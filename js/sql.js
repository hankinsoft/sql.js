// This prevents pollution of the global namespace
var SQL = (function () {
// This is sql.js, a port of SQLite to JavaScript using Emscripten


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function \((.*)\)\s*{\s*([^]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(39203);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([51,46,56,46,52,46,51,0,83,81,76,73,84,69,95,0,224,150,0,0,240,150,0,0,0,151,0,0,24,151,0,0,40,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,10,10,10,10,10,10,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,64,0,42,42,42,42,42,42,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,255,127,0,0,0,0,128,0,0,0,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,3,0,0,0,44,0,0,0,0,2,0,0,0,0,0,0,32,6,0,0,40,6,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,3,0,0,0,44,0,0,0,0,2,0,0,0,0,0,0,48,6,0,0,64,6,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,3,0,0,0,44,0,0,0,0,2,0,0,0,0,0,0,72,6,0,0,88,6,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,3,0,0,0,44,0,0,0,0,2,0,0,0,0,0,0,96,6,0,0,40,6,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,117,110,105,120,0,0,0,0,18,0,0,0,0,0,0,0,117,110,105,120,45,110,111,110,101,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,117,110,105,120,45,100,111,116,102,105,108,101,0,0,0,0,20,0,0,0,0,0,0,0,117,110,105,120,45,101,120,99,108,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,4,5,3,5,1,5,1,5,2,5,2,5,1,5,1,5,4,5,3,5,1,5,1,5,2,5,2,5,1,5,1,5,115,116,114,105,110,103,32,111,114,32,98,108,111,98,32,116,111,111,32,98,105,103,0,0,37,115,0,0,0,0,0,0,42,63,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,114,105,103,103,101,114,0,116,101,109,112,0,0,0,0,50,48,49,52,45,48,52,45,48,51,32,49,54,58,53,51,58,49,50,32,97,54,49,49,102,97,57,54,99,52,97,56,52,56,54,49,52,101,102,101,56,57,57,49,51,48,51,53,57,99,57,102,54,102,98,56,56,57,99,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,100,97,116,97,98,97,115,101,58,32,37,115,0,0,0,0,0,202,154,59,0,202,154,59,208,7,0,0,232,3,0,0,244,1,0,0,168,97,0,0,127,0,0,0,10,0,0,0,80,195,0,0,231,3,0,0,232,3,0,0,0,0,0,0,57,50,50,51,51,55,50,48,51,54,56,53,52,55,55,53,56,48,0,0,0,0,0,0,111,110,111,102,102,97,108,115,101,121,101,115,116,114,117,101,102,117,108,108,0,0,0,0,0,1,2,4,9,12,16,0,2,2,3,5,3,4,4,0,1,0,0,0,1,1,2,0,82,69,73,78,68,69,88,69,68,69,83,67,65,80,69,65,67,72,69,67,75,69,89,66,69,70,79,82,69,73,71,78,79,82,69,71,69,88,80,76,65,73,78,83,84,69,65,68,68,65,84,65,66,65,83,69,76,69,67,84,65,66,76,69,70,84,72,69,78,68,69,70,69,82,82,65,66,76,69,76,83,69,88,67,69,80,84,82,65,78,83,65,67,84,73,79,78,65,84,85,82,65,76,84,69,82,65,73,83,69,88,67,76,85,83,73,86,69,88,73,83,84,83,65,86,69,80,79,73,78,84,69,82,83,69,67,84,82,73,71,71,69,82,69,70,69,82,69,78,67,69,83,67,79,78,83,84,82,65,73,78,84,79,70,70,83,69,84,69,77,80,79,82,65,82,89,85,78,73,81,85,69,82,89,87,73,84,72,79,85,84,69,82,69,76,69,65,83,69,65,84,84,65,67,72,65,86,73,78,71,82,79,85,80,68,65,84,69,66,69,71,73,78,78,69,82,69,67,85,82,83,73,86,69,66,69,84,87,69,69,78,79,84,78,85,76,76,73,75,69,67,65,83,67,65,68,69,76,69,84,69,67,65,83,69,67,79,76,76,65,84,69,67,82,69,65,84,69,67,85,82,82,69,78,84,95,68,65,84,69,68,69,84,65,67,72,73,77,77,69,68,73,65,84,69,74,79,73,78,83,69,82,84,77,65,84,67,72,80,76,65,78,65,76,89,90,69,80,82,65,71,77,65,66,79,82,84,86,65,76,85,69,83,86,73,82,84,85,65,76,73,77,73,84,87,72,69,78,87,72,69,82,69,78,65,77,69,65,70,84,69,82,69,80,76,65,67,69,65,78,68,69,70,65,85,76,84,65,85,84,79,73,78,67,82,69,77,69,78,84,67,65,83,84,67,79,76,85,77,78,67,79,77,77,73,84,67,79,78,70,76,73,67,84,67,82,79,83,83,67,85,82,82,69,78,84,95,84,73,77,69,83,84,65,77,80,82,73,77,65,82,89,68,69,70,69,82,82,69,68,73,83,84,73,78,67,84,68,82,79,80,70,65,73,76,70,82,79,77,70,85,76,76,71,76,79,66,89,73,70,73,83,78,85,76,76,79,82,68,69,82,69,83,84,82,73,67,84,82,73,71,72,84,82,79,76,76,66,65,67,75,82,79,87,85,78,73,79,78,85,83,73,78,71,86,65,67,85,85,77,86,73,69,87,73,78,73,84,73,65,76,76,89,0,0,0,0,0,0,0,76,105,117,74,0,45,0,0,82,0,77,0,0,42,12,78,15,0,116,85,54,112,0,19,0,0,121,0,119,115,0,22,93,0,9,0,0,70,71,0,69,6,0,48,90,102,0,118,101,0,0,44,0,103,24,0,17,0,122,53,23,0,5,110,25,96,0,0,124,106,60,123,57,28,55,0,91,0,100,26,0,99,0,0,0,95,92,97,88,109,14,39,108,0,81,0,18,89,111,32,0,120,80,113,62,46,84,0,0,94,40,59,114,0,36,0,0,29,0,86,63,64,0,20,61,0,56,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,13,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,21,0,0,0,0,0,50,0,43,3,47,0,0,0,0,30,0,58,0,38,0,0,0,1,66,0,0,67,0,41,0,0,0,0,0,0,49,65,0,0,0,0,31,52,16,34,10,0,0,0,0,0,0,0,11,72,79,0,8,0,104,98,0,107,0,87,0,75,51,0,27,37,73,83,0,35,68,0,0,0,0,0,0,7,7,5,4,6,4,5,3,6,7,3,6,6,7,7,3,8,2,6,5,4,4,3,10,4,6,11,6,2,7,5,5,9,6,9,9,7,10,10,4,6,2,3,9,4,2,6,5,7,4,5,7,6,6,5,6,5,5,9,7,7,3,2,4,4,7,3,6,4,7,6,12,6,9,4,6,5,4,7,6,5,6,7,5,4,5,6,5,7,3,7,13,2,2,4,6,6,8,5,17,12,7,8,8,2,4,4,4,4,4,2,2,6,5,8,5,8,3,5,5,6,4,9,3,0,0,0,0,0,0,2,0,2,0,8,0,9,0,14,0,16,0,20,0,23,0,25,0,25,0,29,0,33,0,36,0,41,0,46,0,48,0,53,0,54,0,59,0,62,0,65,0,67,0,69,0,78,0,81,0,86,0,91,0,95,0,96,0,101,0,105,0,109,0,117,0,122,0,128,0,136,0,142,0,152,0,159,0,162,0,162,0,165,0,167,0,167,0,171,0,176,0,179,0,184,0,184,0,188,0,192,0,199,0,204,0,209,0,212,0,218,0,221,0,225,0,234,0,240,0,240,0,240,0,243,0,246,0,250,0,251,0,255,0,5,1,9,1,16,1,22,1,34,1,40,1,49,1,51,1,57,1,62,1,64,1,71,1,76,1,81,1,87,1,93,1,98,1,102,1,105,1,111,1,115,1,122,1,124,1,131,1,133,1,135,1,144,1,148,1,154,1,160,1,168,1,173,1,173,1,189,1,196,1,203,1,204,1,211,1,215,1,219,1,223,1,227,1,230,1,232,1,234,1,240,1,244,1,252,1,1,2,9,2,12,2,17,2,22,2,28,2,32,2,37,2,67,28,140,42,84,44,104,53,35,113,46,47,50,2,49,142,41,24,119,16,98,138,11,112,139,117,6,30,107,98,141,57,9,20,13,118,62,105,99,131,55,54,111,21,21,71,103,3,25,66,98,14,34,128,127,110,5,98,58,74,77,19,52,101,50,37,33,109,136,95,17,69,43,8,124,108,51,4,32,56,29,120,65,129,137,130,68,31,59,72,100,106,15,75,38,39,10,40,98,69,69,102,7,121,73,114,45,123,98,50,36,18,76,126,60,98,12,61,115,125,63,64,48,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,105,115,117,115,101,32,97,116,32,108,105,110,101,32,37,100,32,111,102,32,91,37,46,49,48,115,93,0,0,0,0,117,110,97,98,108,101,32,116,111,32,100,101,108,101,116,101,47,109,111,100,105,102,121,32,99,111,108,108,97,116,105,111,110,32,115,101,113,117,101,110,99,101,32,100,117,101,32,116,111,32,97,99,116,105,118,101,32,115,116,97,116,101,109,101,110,116,115,0,0,0,0,0,66,73,78,65,82,89,0,0,82,84,82,73,77,0,0,0,78,79,67,65,83,69,0,0,109,97,105,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,117,116,111,109,97,116,105,99,32,101,120,116,101,110,115,105,111,110,32,108,111,97,100,105,110,103,32,102,97,105,108,101,100,58,32,37,115,0,0,77,65,84,67,72,0,0,0,58,109,101,109,111,114,121,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,99,111,118,101,114,101,100,32,37,100,32,112,97,103,101,115,32,102,114,111,109,32,37,115,0,0,0,0,0,0,217,213,5,249,32,161,99,215,100,97,116,97,98,97,115,101,32,99,111,114,114,117,112,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,32,111,102,32,91,37,46,49,48,115,93,0,0,0,0,0,0,0,99,97,110,110,111,116,32,108,105,109,105,116,32,87,65,76,32,115,105,122,101,58,32,37,115,0,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,97,116,32,108,105,110,101,32,37,100,32,111,102,32,91,37,46,49,48,115,93,0,0,114,101,99,111,118,101,114,101,100,32,37,100,32,102,114,97,109,101,115,32,102,114,111,109,32,87,65,76,32,102,105,108,101,32,37,115,0,0,0,0,45,106,111,117,114,110,97,108,0,0,0,0,0,0,0,0,45,119,97,108,0,0,0,0,0,0,0,0,0,0,0,0,102,105,108,101,58,0,0,0,108,111,99,97,108,104,111,115,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,114,105,32,97,117,116,104,111,114,105,116,121,58,32,37,46,42,115,0,0,0,0,0,118,102,115,0,0,0,0,0,99,97,99,104,101,0,0,0,40,19,0,0,0,0,2,0,48,19,0,0,0,0,4,0,0,0,0,0,0,0,0,0,115,104,97,114,101,100,0,0,112,114,105,118,97,116,101,0,109,111,100,101,0,0,0,0,104,19,0,0,1,0,0,0,112,19,0,0,2,0,0,0,120,19,0,0,6,0,0,0,128,19,0,0,128,0,0,0,0,0,0,0,0,0,0,0,114,111,0,0,0,0,0,0,114,119,0,0,0,0,0,0,114,119,99,0,0,0,0,0,109,101,109,111,114,121,0,0,97,99,99,101,115,115,0,0,110,111,32,115,117,99,104,32,37,115,32,109,111,100,101,58,32,37,115,0,0,0,0,0,37,115,32,109,111,100,101,32,110,111,116,32,97,108,108,111,119,101,100,58,32,37,115,0,110,111,32,115,117,99,104,32,118,102,115,58,32,37,115,0,105,110,118,97,108,105,100,0,65,80,73,32,99,97,108,108,32,119,105,116,104,32,37,115,32,100,97,116,97,98,97,115,101,32,99,111,110,110,101,99,116,105,111,110,32,112,111,105,110,116,101,114,0,0,0,0,117,110,97,98,108,101,32,116,111,32,117,115,101,32,102,117,110,99,116,105,111,110,32,37,115,32,105,110,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,99,111,110,116,101,120,116,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,0,1,2,3,0,1,0,0,117,110,97,98,108,101,32,116,111,32,100,101,108,101,116,101,47,109,111,100,105,102,121,32,117,115,101,114,45,102,117,110,99,116,105,111,110,32,100,117,101,32,116,111,32,97,99,116,105,118,101,32,115,116,97,116,101,109,101,110,116,115,0,0,48,21,0,0,64,21,0,0,0,0,0,0,104,21,0,0,136,21,0,0,168,21,0,0,192,21,0,0,224,21,0,0,240,21,0,0,24,22,0,0,40,22,0,0,56,22,0,0,96,22,0,0,120,22,0,0,152,22,0,0,184,22,0,0,208,22,0,0,232,22,0,0,152,6,0,0,8,23,0,0,32,23,0,0,56,23,0,0,96,23,0,0,128,23,0,0,152,23,0,0,184,23,0,0,224,23,0,0,0,0,0,0,110,111,116,32,97,110,32,101,114,114,111,114,0,0,0,0,83,81,76,32,108,111,103,105,99,32,101,114,114,111,114,32,111,114,32,109,105,115,115,105,110,103,32,100,97,116,97,98,97,115,101,0,0,0,0,0,97,99,99,101,115,115,32,112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,0,0,0,0,0,0,0,99,97,108,108,98,97,99,107,32,114,101,113,117,101,115,116,101,100,32,113,117,101,114,121,32,97,98,111,114,116,0,0,100,97,116,97,98,97,115,101,32,105,115,32,108,111,99,107,101,100,0,0,0,0,0,0,100,97,116,97,98,97,115,101,32,116,97,98,108,101,32,105,115,32,108,111,99,107,101,100,0,0,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,97,116,116,101,109,112,116,32,116,111,32,119,114,105,116,101,32,97,32,114,101,97,100,111,110,108,121,32,100,97,116,97,98,97,115,101,0,0,0,0,105,110,116,101,114,114,117,112,116,101,100,0,0,0,0,0,100,105,115,107,32,73,47,79,32,101,114,114,111,114,0,0,100,97,116,97,98,97,115,101,32,100,105,115,107,32,105,109,97,103,101,32,105,115,32,109,97,108,102,111,114,109,101,100,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,111,112,101,114,97,116,105,111,110,0,0,0,0,0,0,0,100,97,116,97,98,97,115,101,32,111,114,32,100,105,115,107,32,105,115,32,102,117,108,108,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,100,97,116,97,98,97,115,101,32,102,105,108,101,0,0,0,0,108,111,99,107,105,110,103,32,112,114,111,116,111,99,111,108,0,0,0,0,0,0,0,0,116,97,98,108,101,32,99,111,110,116,97,105,110,115,32,110,111,32,100,97,116,97,0,0,100,97,116,97,98,97,115,101,32,115,99,104,101,109,97,32,104,97,115,32,99,104,97,110,103,101,100,0,0,0,0,0,99,111,110,115,116,114,97,105,110,116,32,102,97,105,108,101,100,0,0,0,0,0,0,0,100,97,116,97,116,121,112,101,32,109,105,115,109,97,116,99,104,0,0,0,0,0,0,0,108,105,98,114,97,114,121,32,114,111,117,116,105,110,101,32,99,97,108,108,101,100,32,111,117,116,32,111,102,32,115,101,113,117,101,110,99,101,0,0,108,97,114,103,101,32,102,105,108,101,32,115,117,112,112,111,114,116,32,105,115,32,100,105,115,97,98,108,101,100,0,0,97,117,116,104,111,114,105,122,97,116,105,111,110,32,100,101,110,105,101,100,0,0,0,0,97,117,120,105,108,105,97,114,121,32,100,97,116,97,98,97,115,101,32,102,111,114,109,97,116,32,101,114,114,111,114,0,98,105,110,100,32,111,114,32,99,111,108,117,109,110,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,102,105,108,101,32,105,115,32,101,110,99,114,121,112,116,101,100,32,111,114,32,105,115,32,110,111,116,32,97,32,100,97,116,97,98,97,115,101,0,0,117,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,97,98,111,114,116,32,100,117,101,32,116,111,32,82,79,76,76,66,65,67,75,0,0,0,117,110,97,98,108,101,32,116,111,32,99,108,111,115,101,32,100,117,101,32,116,111,32,117,110,102,105,110,97,108,105,122,101,100,32,115,116,97,116,101,109,101,110,116,115,32,111,114,32,117,110,102,105,110,105,115,104,101,100,32,98,97,99,107,117,112,115,0,0,0,0,0,1,0,0,0,0,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,0,0,0,0,102,97,105,108,101,100,32,109,101,109,111,114,121,32,114,101,115,105,122,101,32,37,117,32,116,111,32,37,117,32,98,121,116,101,115,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,37,117,32,98,121,116,101,115,32,111,102,32,109,101,109,111,114,121,0,0,0,1,0,1,8,1,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,1,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,2,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,8,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,2,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,8,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,3,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,16,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,3,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,16,33,0,0,0,0,0,0,0,0,0,0,255,255,33,8,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,24,33,0,0,0,0,0,0,0,0,0,0,0,0,33,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,33,0,0,0,0,0,0,0,0,0,0,1,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,48,0,0,0,24,33,0,0,0,0,0,0,0,0,0,0,255,255,33,8,1,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,0,0,0,0,0,0,0,33,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,0,0,0,0,0,1,0,33,0,1,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,48,0,0,0,32,33,0,0,0,0,0,0,0,0,0,0,1,0,129,8,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,40,33,0,0,0,0,0,0,0,0,0,0,1,0,65,8,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,48,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,56,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,64,33,0,0,0,0,0,0,0,0,0,0,3,0,1,8,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,64,33,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,72,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,80,33,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,88,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,96,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,104,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,104,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,112,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,120,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,33,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,33,0,0,0,0,0,0,0,0,0,0,255,255,1,10,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,128,33,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,144,33,0,0,0,0,0,0,0,0,0,0,2,0,1,10,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,152,33,0,0,0,0,0,0,0,0,0,0,1,0,1,12,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,160,33,0,0,0,0,0,0,0,0,0,0,2,0,1,12,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,176,33,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,192,33,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,200,33,0,0,0,0,0,0,0,0,0,0,2,0,33,8,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,216,33,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,224,33,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,240,33,0,0,0,0,0,0,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,8,34,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,24,34,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,88,34,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,96,34,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,120,34,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,128,34,0,0,0,0,0,0,0,0,0,0,3,0,1,8,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,144,34,0,0,0,0,0,0,0,0,0,0,1,0,1,8,0,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,152,34,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,76,0,0,0,168,34,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,77,0,0,0,176,34,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,78,0,0,0,184,34,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,80,0,0,0,192,34,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,80,0,0,0,192,34,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,82,0,0,0,200,34,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,82,0,0,0,200,34,0,0,0,0,0,0,0,0,0,0,2,0,13,8,184,6,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,216,34,0,0,0,0,0,0,0,0,0,0,2,0,5,8,224,34,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,232,34,0,0,0,0,0,0,0,0,0,0,3,0,5,8,224,34,0,0,0,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,232,34,0,0,0,0,0,0,0,0,0,0,108,116,114,105,109,0,0,0,114,116,114,105,109,0,0,0,116,114,105,109,0,0,0,0,109,105,110,0,0,0,0,0,109,97,120,0,0,0,0,0,116,121,112,101,111,102,0,0,108,101,110,103,116,104,0,0,105,110,115,116,114,0,0,0,115,117,98,115,116,114,0,0,112,114,105,110,116,102,0,0,117,110,105,99,111,100,101,0,99,104,97,114,0,0,0,0,97,98,115,0,0,0,0,0,114,111,117,110,100,0,0,0,117,112,112,101,114,0,0,0,108,111,119,101,114,0,0,0,99,111,97,108,101,115,99,101,0,0,0,0,0,0,0,0,104,101,120,0,0,0,0,0,105,102,110,117,108,108,0,0,117,110,108,105,107,101,108,121,0,0,0,0,0,0,0,0,108,105,107,101,108,105,104,111,111,100,0,0,0,0,0,0,114,97,110,100,111,109,0,0,114,97,110,100,111,109,98,108,111,98,0,0,0,0,0,0,110,117,108,108,105,102,0,0,115,113,108,105,116,101,95,118,101,114,115,105,111,110,0,0,115,113,108,105,116,101,95,115,111,117,114,99,101,95,105,100,0,0,0,0,0,0,0,0,115,113,108,105,116,101,95,108,111,103,0,0,0,0,0,0,115,113,108,105,116,101,95,99,111,109,112,105,108,101,111,112,116,105,111,110,95,117,115,101,100,0,0,0,0,0,0,0,115,113,108,105,116,101,95,99,111,109,112,105,108,101,111,112,116,105,111,110,95,103,101,116,0,0,0,0,0,0,0,0,113,117,111,116,101,0,0,0,108,97,115,116,95,105,110,115,101,114,116,95,114,111,119,105,100,0,0,0,0,0,0,0,99,104,97,110,103,101,115,0,116,111,116,97,108,95,99,104,97,110,103,101,115,0,0,0,114,101,112,108,97,99,101,0,122,101,114,111,98,108,111,98,0,0,0,0,0,0,0,0,115,117,109,0,0,0,0,0,116,111,116,97,108,0,0,0,97,118,103,0,0,0,0,0,99,111,117,110,116,0,0,0,103,114,111,117,112,95,99,111,110,99,97,116,0,0,0,0,103,108,111,98,0,0,0,0,37,95,0,1,0,0,0,0,108,105,107,101,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,96,35,0,0,0,0,0,0,0,0,0,0,2,0,1,8,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,120,35,0,0,0,0,0,0,0,0,0,0,3,0,1,8,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,144,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,113,108,105,116,101,95,114,101,110,97,109,101,95,116,97,98,108,101,0,0,0,0,0,115,113,108,105,116,101,95,114,101,110,97,109,101,95,116,114,105,103,103,101,114,0,0,0,115,113,108,105,116,101,95,114,101,110,97,109,101,95,112,97,114,101,110,116,0,0,0,0,37,115,37,46,42,115,34,37,119,34,0,0,0,0,0,0,37,115,37,115,0,0,0,0,37,46,42,115,34,37,119,34,37,115,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,0,0,0,0,240,36,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,8,37,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,16,37,0,0,0,0,0,0,0,0,0,0,255,255,1,8,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,32,37,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,48,37,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,64,37,0,0,0,0,0,0,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,88,37,0,0,0,0,0,0,0,0,0,0,106,117,108,105,97,110,100,97,121,0,0,0,0,0,0,0,100,97,116,101,0,0,0,0,116,105,109,101,0,0,0,0,100,97,116,101,116,105,109,101,0,0,0,0,0,0,0,0,115,116,114,102,116,105,109,101,0,0,0,0,0,0,0,0,99,117,114,114,101,110,116,95,116,105,109,101,0,0,0,0,99,117,114,114,101,110,116,95,116,105,109,101,115,116,97,109,112,0,0,0,0,0,0,0,99,117,114,114,101,110,116,95,100,97,116,101,0,0,0,0,37,48,50,100,0,0,0,0,37,48,54,46,51,102,0,0,37,48,51,100,0,0,0,0,37,46,49,54,103,0,0,0,37,108,108,100,0,0,0,0,37,48,52,100,0,0,0,0,108,111,99,97,108,116,105,109,101,0,0,0,0,0,0,0,117,110,105,120,101,112,111,99,104,0,0,0,0,0,0,0,117,116,99,0,0,0,0,0,119,101,101,107,100,97,121,32,0,0,0,0,0,0,0,0,115,116,97,114,116,32,111,102,32,0,0,0,0,0,0,0,109,111,110,116,104,0,0,0,121,101,97,114,0,0,0,0,100,97,121,0,0,0,0,0,104,111,117,114,0,0,0,0,109,105,110,117,116,101,0,0,115,101,99,111,110,100,0,0,108,111,99,97,108,32,116,105,109,101,32,117,110,97,118,97,105,108,97,98,108,101,0,0,110,111,119,0,0,0,0,0,37,48,52,100,45,37,48,50,100,45,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,0,0,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,0,37,48,52,100,45,37,48,50,100,45,37,48,50,100,0,0,76,73,75,69,32,111,114,32,71,76,79,66,32,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,0,0,0,69,83,67,65,80,69,32,101,120,112,114,101,115,115,105,111,110,32,109,117,115,116,32,98,101,32,97,32,115,105,110,103,108,101,32,99,104,97,114,97,99,116,101,114,0,0,0,0,44,0,0,0,0,0,0,0,105,110,116,101,103,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,37,33,46,49,53,103,0,0,37,33,46,50,48,101,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,78,85,76,76,0,0,0,0,37,46,42,102,0,0,0,0,105,110,116,101,103,101,114,0,116,101,120,116,0,0,0,0,114,101,97,108,0,0,0,0,98,108,111,98,0,0,0,0,110,117,108,108,0,0,0,0,1,0,0,0,0,0,0,0,80,39,0,0,0,0,0,0,32,0,0,0,0,0,0,0,105,110,116,101,114,114,117,112,116,0,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,116,111,107,101,110,58,32,34,37,84,34,0,0,0,0,0,0,0,0,110,101,97,114,32,34,37,84,34,58,32,115,121,110,116,97,120,32,101,114,114,111,114,0,114,111,119,105,100,0,0,0,117,110,107,110,111,119,110,32,116,97,98,108,101,32,111,112,116,105,111,110,58,32,37,46,42,115,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,116,101,114,109,115,32,105,110,32,99,111,109,112,111,117,110,100,32,83,69,76,69,67,84], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([115,101,116,32,108,105,115,116,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,111,110,32,102,117,110,99,116,105,111,110,32,37,84,0,0,0,0,0,0,0,80,91,0,0,1,0,0,0,200,73,0,0,1,0,0,0,105,110,100,101,120,0,0,0,113,117,97,108,105,102,105,101,100,32,116,97,98,108,101,32,110,97,109,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,73,78,83,69,82,84,44,32,85,80,68,65,84,69,44,32,97,110,100,32,68,69,76,69,84,69,32,115,116,97,116,101,109,101,110,116,115,32,119,105,116,104,105,110,32,116,114,105,103,103,101,114,115,0,0,116,104,101,32,73,78,68,69,88,69,68,32,66,89,32,99,108,97,117,115,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,85,80,68,65,84,69,32,111,114,32,68,69,76,69,84,69,32,115,116,97,116,101,109,101,110,116,115,32,119,105,116,104,105,110,32,116,114,105,103,103,101,114,115,0,0,0,0,0,116,104,101,32,78,79,84,32,73,78,68,69,88,69,68,32,99,108,97,117,115,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,85,80,68,65,84,69,32,111,114,32,68,69,76,69,84,69,32,115,116,97,116,101,109,101,110,116,115,32,119,105,116,104,105,110,32,116,114,105,103,103,101,114,115,0,0,0,0,144,1,145,2,145,1,146,1,146,3,147,0,147,1,147,3,148,1,149,3,151,0,151,1,151,2,150,0,150,1,150,1,150,1,149,2,149,2,149,2,153,1,153,0,149,2,149,3,149,5,149,2,154,6,156,1,158,0,158,3,157,1,157,0,155,5,155,2,162,0,162,2,160,3,160,1,164,3,165,1,152,1,152,1,152,1,166,0,166,1,168,1,168,4,168,6,169,1,169,2,170,1,170,1,167,2,167,0,173,2,173,2,173,4,173,3,173,3,173,2,173,2,173,3,173,5,173,2,173,4,173,4,173,1,173,2,178,0,178,1,180,0,180,2,182,2,182,3,182,3,182,3,183,2,183,2,183,1,183,1,183,2,181,3,181,2,184,0,184,2,184,2,161,0,161,2,185,3,185,1,186,1,186,0,187,2,187,7,187,5,187,5,187,10,189,0,189,1,176,0,176,3,190,0,190,2,191,1,191,1,191,1,149,4,193,2,193,0,149,8,149,4,149,1,163,2,195,1,195,3,198,1,198,2,198,1,196,9,196,1,207,4,207,5,199,1,199,1,199,0,210,2,210,0,200,3,200,2,200,4,211,2,211,1,211,0,201,0,201,2,213,2,213,0,212,7,212,7,212,7,159,0,159,2,194,2,214,1,214,2,214,3,214,4,216,2,216,0,215,0,215,3,215,2,217,4,217,0,205,0,205,3,220,4,220,2,177,1,177,1,177,0,203,0,203,3,204,0,204,2,206,0,206,2,206,4,206,4,149,6,202,0,202,2,149,8,221,5,221,3,149,6,149,7,222,2,222,1,223,0,223,3,219,3,219,1,175,1,175,3,174,1,175,1,175,1,175,3,175,5,174,1,174,1,175,1,175,3,175,6,175,5,175,4,174,1,175,3,175,3,175,3,175,3,175,3,175,3,175,3,175,3,224,1,224,2,175,3,175,5,175,2,175,3,175,3,175,4,175,2,175,2,175,2,175,2,225,1,225,2,175,5,226,1,226,2,175,5,175,3,175,5,175,4,175,4,175,5,228,5,228,4,229,2,229,0,227,1,227,0,209,1,209,0,208,3,208,1,149,12,230,1,230,0,179,0,179,3,188,5,188,3,231,0,231,2,149,4,149,1,149,2,149,3,149,5,149,6,149,5,149,6,232,1,232,1,232,1,232,1,232,1,171,2,171,1,172,2,149,5,233,11,235,1,235,1,235,2,235,0,236,1,236,1,236,3,237,0,237,3,238,0,238,2,234,3,234,2,240,1,240,3,241,0,241,3,241,2,239,7,239,5,239,5,239,1,175,4,175,6,192,1,192,1,192,1,149,4,149,6,149,3,243,0,243,2,242,1,242,0,149,1,149,3,149,1,149,3,149,6,149,6,244,1,245,0,245,1,149,1,149,4,246,8,247,1,247,3,248,0,248,2,249,1,249,3,250,1,251,0,251,4,251,2,197,0,197,2,197,3,252,6,252,8,0,0,238,0,186,3,213,0,33,1,54,1,234,0,144,0,61,1,147,255,126,1,121,1,47,1,205,1,133,1,122,1,112,1,46,1,38,1,253,0,139,1,37,1,68,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,254,3,244,3,237,3,230,3,195,3,193,3,191,3,189,3,182,3,179,3,162,3,144,3,105,3,93,3,55,3,42,3,3,3,247,2,208,2,196,2,158,2,145,2,107,2,102,2,100,2,98,2,96,2,94,2,92,2,86,2,83,2,81,2,68,2,30,2,28,2,25,2,23,2,21,2,19,2,17,2,15,2,247,1,130,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,95,0,191,1,82,0,78,1,248,1,211,1,147,1,221,1,208,1,147,1,147,1,147,1,147,1,92,3,235,2,232,2,17,3,126,2,126,2,158,3,123,3,132,3,131,3,119,3,76,3,72,3,67,3,80,3,62,3,75,3,61,3,24,3,71,3,58,3,225,2,70,3,27,3,21,3,47,0,222,2,18,2,184,2,9,3,199,2,165,2,221,2,218,2,217,2,216,2,215,2,115,2,192,1,64,0,187,0,25,5,22,5,228,4,10,5,249,4,43,5,42,5,41,5,39,5,38,5,36,5,35,5,34,5,33,5,32,5,31,5,30,5,28,5,27,5,24,5,23,5,21,5,18,5,14,5,12,5,9,5,242,4,240,4,235,4,8,5,7,5,214,4,5,5,1,5,0,5,255,4,254,4,227,4,253,4,252,4,251,4,249,4,244,4,243,4,241,4,239,4,237,4,233,4,224,4,213,4,223,4,222,4,219,4,214,4,216,4,211,4,225,4,210,4,209,4,206,4,196,4,190,4,186,4,201,4,195,4,208,4,207,4,173,4,171,4,203,4,200,4,177,4,184,4,218,4,113,4,212,4,205,4,169,4,157,4,197,4,153,4,172,4,155,4,167,4,166,4,162,4,158,4,194,4,192,4,152,4,138,4,159,4,156,4,136,4,175,4,179,4,109,4,71,4,174,4,170,4,164,4,168,4,147,4,145,4,144,4,149,4,150,4,142,4,135,4,117,4,146,4,134,4,143,4,133,4,108,4,121,4,119,4,100,4,104,4,79,4,78,4,76,4,72,4,126,4,125,4,61,4,101,4,56,4,40,4,96,4,73,4,58,4,54,4,49,4,43,4,85,4,83,4,95,4,93,4,92,4,89,4,87,4,84,4,239,3,232,3,234,3,52,4,51,4,57,4,0,0,0,0,50,1,212,0,176,1,187,3,127,2,191,0,187,3,39,1,47,2,88,0,88,0,88,0,88,0,81,0,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,185,0,184,0,183,0,123,2,123,2,36,1,94,2,94,2,88,0,88,0,88,0,88,0,171,2,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,16,0,180,1,85,2,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,172,2,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,47,2,84,0,84,0,84,0,83,0,74,1,65,0,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,123,2,123,2,122,2,121,2,182,0,170,2,38,2,123,1,120,1,119,1,17,0,66,1,94,2,94,2,115,1,198,0,223,1,91,0,118,1,82,0,79,0,165,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,86,2,123,2,123,2,107,0,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,186,0,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,82,2,82,2,142,0,72,1,71,1,228,1,249,0,88,1,238,0,123,2,123,2,122,2,121,2,73,2,192,1,14,2,13,2,229,0,132,1,1,0,138,1,194,1,72,2,193,1,123,2,123,2,123,2,123,2,63,1,139,1,94,2,94,2,199,0,157,0,17,1,126,1,12,1,125,1,187,0,123,2,123,2,122,2,121,2,55,1,43,2,10,1,81,2,81,2,10,1,91,1,76,2,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,222,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,16,1,24,2,122,2,121,2,146,0,98,2,197,0,54,1,63,2,182,0,226,1,15,1,123,1,120,1,119,1,250,1,21,0,122,2,121,2,122,2,121,2,123,2,123,2,118,1,99,2,62,2,36,2,184,1,111,0,51,2,94,2,94,2,122,2,121,2,68,1,223,1,96,2,96,2,96,2,44,1,179,1,61,2,119,0,151,1,210,0,162,0,50,2,115,3,80,2,80,2,50,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,250,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,108,2,111,0,123,2,123,2,105,1,94,2,94,2,102,1,249,0,93,1,248,0,177,1,243,0,223,1,74,2,122,2,121,2,195,0,99,2,93,0,119,0,221,0,63,2,241,1,22,2,22,2,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,62,2,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,77,0,173,1,126,2,61,2,77,2,18,2,240,0,230,0,242,0,105,0,249,0,93,1,248,0,3,2,76,2,208,0,204,1,17,2,52,2,173,0,122,2,121,2,202,3,144,0,174,1,2,0,168,1,228,0,124,1,45,2,94,2,94,2,190,0,153,0,159,0,158,0,2,2,51,0,120,2,119,2,118,2,71,0,24,2,176,1,186,3,196,0,98,2,186,3,102,2,45,0,18,0,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,5,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,96,2,96,2,96,2,30,2,168,1,146,1,129,1,241,0,250,1,195,1,64,1,211,0,31,2,164,0,180,1,130,1,37,1,195,1,75,2,108,0,240,1,111,0,78,1,135,1,79,2,168,1,102,2,27,0,196,1,197,1,94,2,94,2,72,0,1,1,70,0,3,1,196,1,83,1,86,1,52,2,70,2,68,0,159,1,213,1,72,1,71,1,62,0,102,2,45,0,110,0,137,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,152,0,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,110,0,243,1,8,2,26,2,146,1,133,1,168,1,110,0,54,2,244,1,81,2,81,2,198,1,82,0,79,0,165,0,168,1,79,2,128,1,52,2,84,1,103,2,188,0,162,0,168,1,94,1,104,2,168,1,102,2,44,0,94,2,94,2,189,1,70,2,44,1,178,1,151,0,19,0,102,2,9,0,56,2,68,2,92,1,103,2,213,1,55,2,102,2,26,0,104,2,102,2,45,0,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,155,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,67,2,110,0,66,2,9,2,26,1,177,1,142,1,144,1,255,0,230,1,82,0,79,0,165,0,231,1,164,0,82,0,79,0,165,0,232,1,232,1,108,1,131,1,168,1,32,2,32,2,253,1,94,1,106,1,155,0,191,0,94,2,94,2,47,2,130,2,128,2,77,1,82,0,79,0,165,0,49,1,52,2,251,1,56,1,101,1,102,2,45,0,73,1,84,2,83,2,194,0,81,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,20,0,67,1,150,0,7,1,211,0,31,2,165,1,84,2,83,2,102,2,22,0,168,1,193,0,168,1,28,1,168,1,135,1,168,1,253,1,168,1,65,2,168,1,186,0,79,1,168,1,47,2,168,1,57,1,120,0,34,2,94,2,94,2,67,0,102,2,47,0,102,2,50,0,102,2,48,0,102,2,100,0,102,2,99,0,102,2,101,0,64,2,102,2,102,0,102,2,109,0,70,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,50,1,168,1,55,1,168,1,73,2,54,0,168,1,4,2,5,2,78,2,102,2,112,0,168,1,72,2,168,1,60,2,168,1,195,0,168,1,59,2,168,1,67,0,168,1,102,2,94,0,102,2,98,0,168,1,102,2,97,0,8,1,94,2,94,2,195,0,102,2,46,0,102,2,96,0,102,2,30,0,102,2,49,0,102,2,115,0,102,2,114,0,162,1,229,0,132,1,102,2,113,0,50,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,119,0,168,1,78,2,110,0,116,1,94,2,94,2,195,0,53,0,250,0,102,2,29,0,195,0,216,1,182,1,217,2,190,0,46,1,242,1,14,0,11,2,129,2,2,0,102,2,43,0,50,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,168,1,101,2,196,3,196,3,98,1,94,2,94,2,164,1,56,1,64,0,102,2,42,0,135,1,99,1,27,1,181,1,45,1,255,0,158,1,154,1,239,1,236,1,102,2,28,0,215,1,50,1,89,0,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,168,1,110,0,110,0,110,0,110,0,94,2,94,2,110,0,254,0,13,0,102,2,41,0,20,2,19,2,27,1,225,1,19,2,201,1,28,1,119,0,49,2,100,1,102,2,40,0,28,1,50,1,89,0,78,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,110,0,168,1,85,1,220,0,43,2,94,2,94,2,95,1,43,2,62,1,102,2,95,0,157,1,255,0,83,0,74,1,28,1,28,1,255,0,128,2,77,1,100,1,255,0,102,2,39,0,50,1,100,1,90,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,168,1,61,1,60,1,141,0,209,1,94,2,94,2,219,0,107,2,207,1,102,2,10,0,161,1,206,1,255,0,189,0,254,1,41,2,95,1,207,0,107,1,161,0,102,2,38,0,59,1,218,0,255,0,255,0,80,0,88,2,87,2,89,2,89,2,87,0,87,0,88,0,88,0,88,0,88,0,168,1,86,0,86,0,86,0,86,0,85,0,85,0,84,0,84,0,84,0,83,0,74,1,76,0,163,1,255,0,3,0,110,3,205,1,168,1,247,0,75,1,75,1,102,2,37,0,217,0,76,0,163,1,134,1,3,0,216,0,215,0,166,1,4,0,75,1,75,1,168,1,35,2,12,0,168,1,33,2,102,2,36,0,168,1,29,2,166,1,168,1,28,2,168,1,214,0,168,1,152,1,168,1,27,2,147,1,93,2,93,2,237,0,102,2,25,0,119,0,102,2,24,0,76,2,152,1,102,2,45,0,118,0,102,2,35,0,102,2,34,0,102,2,33,0,102,2,23,0,76,2,60,0,223,0,91,2,90,2,1,2,122,1,73,0,74,0,140,0,139,0,168,1,110,0,9,1,75,0,170,1,169,1,59,0,168,1,98,2,73,0,74,0,37,2,146,1,148,1,168,1,117,1,75,0,170,1,169,1,92,2,138,0,98,2,102,2,11,0,136,1,76,0,163,1,181,0,3,0,102,2,32,0,15,1,113,1,75,1,75,1,237,1,102,2,31,0,149,0,96,2,96,2,96,2,95,2,15,0,166,1,109,1,102,2,8,0,137,0,233,1,136,0,190,0,96,2,96,2,96,2,95,2,15,0,229,1,176,0,135,0,7,0,252,0,221,1,152,1,174,0,133,0,175,0,218,1,57,0,56,0,132,0,130,0,119,0,76,0,163,1,76,2,3,0,212,1,245,0,208,1,171,0,75,1,75,1,125,0,123,0,200,1,191,1,122,0,190,1,104,0,80,1,231,0,166,1,166,0,154,0,73,0,74,0,76,1,116,0,175,1,121,0,53,1,75,0,170,1,169,1,222,0,106,0,98,2,52,1,125,2,204,0,152,1,117,2,115,2,116,2,6,0,200,0,172,1,171,1,34,1,203,0,110,2,201,0,76,2,62,0,63,0,33,1,66,0,163,1,143,1,3,0,145,1,32,1,92,0,143,0,75,1,75,1,31,1,96,2,96,2,96,2,95,2,15,0,73,0,74,0,227,0,166,1,69,1,69,0,160,1,75,0,170,1,169,1,100,2,156,1,98,2,192,0,61,0,57,2,209,0,140,1,226,0,22,1,225,0,127,1,152,1,15,2,46,2,20,1,21,2,40,2,16,2,65,1,11,2,114,1,252,1,180,0,76,2,238,1,179,0,110,1,117,0,253,0,13,1,10,2,247,1,96,2,96,2,96,2,95,2,15,0,39,2,246,1,58,0,18,1,12,2,178,0,73,0,74,0,48,1,245,1,112,1,47,1,206,0,75,0,170,1,169,1,235,1,104,1,98,2,213,0,177,0,227,1,131,0,89,1,42,1,41,1,40,1,202,0,38,1,224,1,234,1,210,1,134,0,172,0,129,0,188,1,90,1,214,1,128,0,58,1,203,1,103,0,127,0,126,0,148,0,124,0,167,0,187,1,235,0,96,2,96,2,96,2,95,2,15,0,186,1,183,1,111,2,234,0,43,1,145,0,71,2,35,1,121,1,69,2,160,0,119,0,156,0,14,1,124,2,203,3,169,0,23,1,114,2,8,2,113,2,217,1,112,2,170,0,109,2,106,2,119,0,168,0,55,0,153,1,167,1,25,2,97,2,30,1,29,1,149,1,58,2,48,2,44,2,5,0,52,0,202,1,42,2,147,0,11,1,7,2,248,1,6,2,150,1,6,1,239,0,4,1,0,2,87,1,255,1,2,1,97,1,53,2,0,1,224,0,251,0,103,1,21,1,19,1,220,1,219,1,246,0,96,1,244,0,211,1,199,1,236,0,233,0,232,0,51,1,185,1,25,1,205,0,163,0,141,1,24,1,23,2,249,1,74,1,105,2,203,3,203,3,203,3,203,3,111,1,203,3,203,3,203,3,203,3,203,3,203,3,203,3,203,3,203,3,203,3,203,3,82,1,0,0,0,0,0,0,100,117,112,108,105,99,97,116,101,32,87,73,84,72,32,116,97,98,108,101,32,110,97,109,101,58,32,37,115,0,0,0,110,111,116,32,97,117,116,104,111,114,105,122,101,100,0,0,97,117,116,104,111,114,105,122,101,114,32,109,97,108,102,117,110,99,116,105,111,110,0,0,67,82,69,65,84,69,32,86,73,82,84,85,65,76,32,84,65,66,76,69,32,37,84,0,85,80,68,65,84,69,32,37,81,46,37,115,32,83,69,84,32,116,121,112,101,61,39,116,97,98,108,101,39,44,32,110,97,109,101,61,37,81,44,32,116,98,108,95,110,97,109,101,61,37,81,44,32,114,111,111,116,112,97,103,101,61,48,44,32,115,113,108,61,37,81,32,87,72,69,82,69,32,114,111,119,105,100,61,35,37,100,0,115,113,108,105,116,101,95,116,101,109,112,95,109,97,115,116,101,114,0,0,0,0,0,0,115,113,108,105,116,101,95,109,97,115,116,101,114,0,0,0,110,97,109,101,61,39,37,113,39,32,65,78,68,32,116,121,112,101,61,39,116,97,98,108,101,39,0,0,0,0,0,0,118,105,114,116,117,97,108,32,116,97,98,108,101,115,32,109,97,121,32,110,111,116,32,98,101,32,97,108,116,101,114,101,100,0,0,0,0,0,0,0,67,97,110,110,111,116,32,97,100,100,32,97,32,99,111,108,117,109,110,32,116,111,32,97,32,118,105,101,119,0,0,0,115,113,108,105,116,101,95,97,108,116,101,114,116,97,98,95,37,115,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,97,32,116,101,109,112,111,114,97,114,121,32,100,97,116,97,98,97,115,101,32,102,105,108,101,32,102,111,114,32,115,116,111,114,105,110,103,32,116,101,109,112,111,114,97,114,121,32,116,97,98,108,101,115,0,0,0,115,113,108,105,116,101,95,0,116,97,98,108,101,32,37,115,32,109,97,121,32,110,111,116,32,98,101,32,97,108,116,101,114,101,100,0,0,0,0,0,67,97,110,110,111,116,32,97,100,100,32,97,32,80,82,73,77,65,82,89,32,75,69,89,32,99,111,108,117,109,110,0,67,97,110,110,111,116,32,97,100,100,32,97,32,85,78,73,81,85,69,32,99,111,108,117,109,110,0,0,0,0,0,0,67,97,110,110,111,116,32,97,100,100,32,97,32,82,69,70,69,82,69,78,67,69,83,32,99,111,108,117,109,110,32,119,105,116,104,32,110,111,110,45,78,85,76,76,32,100,101,102,97,117,108,116,32,118,97,108,117,101,0,0,0,0,0,0,67,97,110,110,111,116,32,97,100,100,32,97,32,78,79,84,32,78,85,76,76,32,99,111,108,117,109,110,32,119,105,116,104,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,78,85,76,76,0,0,0,0,67,97,110,110,111,116,32,97,100,100,32,97,32,99,111,108,117,109,110,32,119,105,116,104,32,110,111,110,45,99,111,110,115,116,97,110,116,32,100,101,102,97,117,108,116,0,0,0,85,80,68,65,84,69,32,34,37,119,34,46,37,115,32,83,69,84,32,115,113,108,32,61,32,115,117,98,115,116,114,40,115,113,108,44,49,44,37,100,41,32,124,124,32,39,44,32,39,32,124,124,32,37,81,32,124,124,32,115,117,98,115,116,114,40,115,113,108,44,37,100,41,32,87,72,69,82,69,32,116,121,112,101,32,61,32,39,116,97,98,108,101,39,32,65,78,68,32,110,97,109,101,32,61,32,37,81,0,0,0,0,116,98,108,95,110,97,109,101,61,37,81,0,0,0,0,0,116,121,112,101,61,39,116,114,105,103,103,101,114,39,32,65,78,68,32,40,37,115,41,0,110,97,109,101,61,37,81,0,37,115,32,79,82,32,110,97,109,101,61,37,81,0,0,0,45,0,0,0,0,0,0,0,116,104,101,114,101,32,105,115,32,97,108,114,101,97,100,121,32,97,110,111,116,104,101,114,32,116,97,98,108,101,32,111,114,32,105,110,100,101,120,32,119,105,116,104,32,116,104,105,115,32,110,97,109,101,58,32,37,115,0,0,0,0,0,0,118,105,101,119,32,37,115,32,109,97,121,32,110,111,116,32,98,101,32,97,108,116,101,114,101,100,0,0,0,0,0,0,85,80,68,65,84,69,32,34,37,119,34,46,37,115,32,83,69,84,32,115,113,108,32,61,32,115,113,108,105,116,101,95,114,101,110,97,109,101,95,112,97,114,101,110,116,40,115,113,108,44,32,37,81,44,32,37,81,41,32,87,72,69,82,69,32,37,115,59,0,0,0,0,85,80,68,65,84,69,32,37,81,46,37,115,32,83,69,84,32,115,113,108,32,61,32,67,65,83,69,32,87,72,69,78,32,116,121,112,101,32,61,32,39,116,114,105,103,103,101,114,39,32,84,72,69,78,32,115,113,108,105,116,101,95,114,101,110,97,109,101,95,116,114,105,103,103,101,114,40,115,113,108,44,32,37,81,41,69,76,83,69,32,115,113,108,105,116,101,95,114,101,110,97,109,101,95,116,97,98,108,101,40,115,113,108,44,32,37,81,41,32,69,78,68,44,32,116,98,108,95,110,97,109,101,32,61,32,37,81,44,32,110,97,109,101,32,61,32,67,65,83,69,32,87,72,69,78,32,116,121,112,101,61,39,116,97,98,108,101,39,32,84,72,69,78,32,37,81,32,87,72,69,78,32,110,97,109,101,32,76,73,75,69,32,39,115,113,108,105,116,101,95,97,117,116,111,105,110,100,101,120,37,37,39,32,65,78,68,32,116,121,112,101,61,39,105,110,100,101,120,39,32,84,72,69,78,32,39,115,113,108,105,116,101,95,97,117,116,111,105,110,100,101,120,95,39,32,124,124,32,37,81,32,124,124,32,115,117,98,115,116,114,40,110,97,109,101,44,37,100,43,49,56,41,32,69,76,83,69,32,110,97,109,101,32,69,78,68,32,87,72,69,82,69,32,116,98,108,95,110,97,109,101,61,37,81,32,67,79,76,76,65,84,69,32,110,111,99,97,115,101,32,65,78,68,32,40,116,121,112,101,61,39,116,97,98,108,101,39,32,79,82,32,116,121,112,101,61,39,105,110,100,101,120,39,32,79,82,32,116,121,112,101,61,39,116,114,105,103,103,101,114,39,41,59,0,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,0,85,80,68,65,84,69,32,34,37,119,34,46,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,32,115,101,116,32,110,97,109,101,32,61,32,37,81,32,87,72,69,82,69,32,110,97,109,101,32,61,32,37,81,0,0,0,0,0,0,0,85,80,68,65,84,69,32,115,113,108,105,116,101,95,116,101,109,112,95,109,97,115,116,101,114,32,83,69,84,32,115,113,108,32,61,32,115,113,108,105,116,101,95,114,101,110,97,109,101,95,116,114,105,103,103,101,114,40,115,113,108,44,32,37,81,41,44,32,116,98,108,95,110,97,109,101,32,61,32,37,81,32,87,72,69,82,69,32,37,115,59,0,0,0,0,0,118,105,101,119,32,37,115,32,105,115,32,99,105,114,99,117,108,97,114,108,121,32,100,101,102,105,110,101,100,0,0,0,0,0,2,0,3,0,5,0,6,0,7,0,8,0,9,0,110,111,32,115,117,99,104,32,99,111,108,108,97,116,105,111,110,32,115,101,113,117,101,110,99,101,58,32,37,115,0,0,3,2,1,0,0,0,0,0,73,78,84,69,71,69,82,0,37,115,58,37,100,0,0,0,97,32,71,82,79,85,80,32,66,89,32,99,108,97,117,115,101,32,105,115,32,114,101,113,117,105,114,101,100,32,98,101,102,111,114,101,32,72,65,86,73,78,71,0,0,0,0,0,79,82,68,69,82,0,0,0,71,82,79,85,80,0,0,0,97,103,103,114,101,103,97,116,101,32,102,117,110,99,116,105,111,110,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,116,104,101,32,71,82,79,85,80,32,66,89,32,99,108,97,117,115,101,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,116,101,114,109,115,32,105,110,32,79,82,68,69,82,32,66,89,32,99,108,97,117,115,101,0,0,0,0,0,0,0,37,114,32,79,82,68,69,82,32,66,89,32,116,101,114,109,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,97,110,121,32,99,111,108,117,109,110,32,105,110,32,116,104,101,32,114,101,115,117,108,116,32,115,101,116,0,0,0,0,37,114,32,37,115,32,66,89,32,116,101,114,109,32,111,117,116,32,111,102,32,114,97,110,103,101,32,45,32,115,104,111,117,108,100,32,98,101,32,98,101,116,119,101,101,110,32,49,32,97,110,100,32,37,100,0,116,111,111,32,109,97,110,121,32,116,101,114,109,115,32,105,110,32,37,115,32,66,89,32,99,108,97,117,115,101,0,0,69,120,112,114,101,115,115,105,111,110,32,116,114,101,101,32,105,115,32,116,111,111,32,108,97,114,103,101,32,40,109,97,120,105,109,117,109,32,100,101,112,116,104,32,37,100,41,0,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,115,101,99,111,110,100,32,97,114,103,117,109,101,110,116,32,116,111,32,108,105,107,101,108,105,104,111,111,100,40,41,32,109,117,115,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,32,98,101,116,119,101,101,110,32,48,46,48,32,97,110,100,32,49,46,48,0,0,110,111,116,32,97,117,116,104,111,114,105,122,101,100,32,116,111,32,117,115,101,32,102,117,110,99,116,105,111,110,58,32,37,115,0,0,0,0,0,0,109,105,115,117,115,101,32,111,102,32,97,103,103,114,101,103,97,116,101,32,102,117,110,99,116,105,111,110,32,37,46,42,115,40,41,0,0,0,0,0,110,111,32,115,117,99,104,32,102,117,110,99,116,105,111,110,58,32,37,46,42,115,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,117,110,99,116,105,111,110,32,37,46,42,115,40,41,0,0,0,0,115,117,98,113,117,101,114,105,101,115,0,0,0,0,0,0,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,0,37,115,32,112,114,111,104,105,98,105,116,101,100,32,105,110,32,67,72,69,67,75,32,99,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,37,115,32,112,114,111,104,105,98,105,116,101,100,32,105,110,32,112,97,114,116,105,97,108,32,105,110,100,101,120,32,87,72,69,82,69,32,99,108,97,117,115,101,115,0,0,0,0,110,101,119,0,0,0,0,0,111,108,100,0,0,0,0,0,109,105,115,117,115,101,32,111,102,32,97,108,105,97,115,101,100,32,97,103,103,114,101,103,97,116,101,32,37,115,0,0,110,111,32,115,117,99,104,32,99,111,108,117,109,110,0,0,97,109,98,105,103,117,111,117,115,32,99,111,108,117,109,110,32,110,97,109,101,0,0,0,37,115,58,32,37,115,46,37,115,46,37,115,0,0,0,0,37,115,58,32,37,115,46,37,115,0,0,0,0,0,0,0,37,115,58,32,37,115,0,0,82,79,87,73,68,0,0,0,97,99,99,101,115,115,32,116,111,32,37,115,46,37,115,46,37,115,32,105,115,32,112,114,111,104,105,98,105,116,101,100,0,0,0,0,0,0,0,0,97,99,99,101,115,115,32,116,111,32,37,115,46,37,115,32,105,115,32,112,114,111,104,105,98,105,116,101,100,0,0,0,95,82,79,87,73,68,95,0,79,73,68,0,0,0,0,0,115,113,108,105,116,101,95,115,113,95,37,112,0,0,0,0,116,111,111,32,109,97,110,121,32,114,101,102,101,114,101,110,99,101,115,32,116,111,32,34,37,115,34,58,32,109,97,120,32,54,53,53,51,53,0,0,42,0,0,0,0,0,0,0,37,115,46,37,115,0,0,0,37,115,46,37,115,46,37,115,0,0,0,0,0,0,0,0,110,111,32,115,117,99,104,32,116,97,98,108,101,58,32,37,115,0,0,0,0,0,0,0,110,111,32,116,97,98,108,101,115,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,116,111,111,32,109,97,110,121,32,99,111,108,117,109,110,115,32,105,110,32,114,101,115,117,108,116,32,115,101,116,0,0,97,32,78,65,84,85,82,65,76,32,106,111,105,110,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,110,32,79,78,32,111,114,32,85,83,73,78,71,32,99,108,97,117,115,101,0,0,0,0,0,0,0,99,97,110,110,111,116,32,104,97,118,101,32,98,111,116,104,32,79,78,32,97,110,100,32,85,83,73,78,71,32,99,108,97,117,115,101,115,32,105,110,32,116,104,101,32,115,97,109,101,32,106,111,105,110,0,0,99,97,110,110,111,116,32,106,111,105,110,32,117,115,105,110,103,32,99,111,108,117,109,110,32,37,115,32,45,32,99,111,108,117,109,110,32,110,111,116,32,112,114,101,115,101,110,116,32,105,110,32,98,111,116,104,32,116,97,98,108,101,115,0,110,111,32,115,117,99,104,32,105,110,100,101,120,58,32,37,115,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,114,101,102,101,114,101,110,99,101,115,32,116,111,32,114,101,99,117,114,115,105,118,101,32,116,97,98,108,101,58,32,37,115,0,0,0,0,0,0,99,105,114,99,117,108,97,114,32,114,101,102,101,114,101,110,99,101,58,32,37,115,0,0,116,97,98,108,101,32,37,115,32,104,97,115,32,37,100,32,118,97,108,117,101,115,32,102,111,114,32,37,100,32,99,111,108,117,109,110,115,0,0,0,109,117,108,116,105,112,108,101,32,114,101,99,117,114,115,105,118,101,32,114,101,102,101,114,101,110,99,101,115,58,32,37,115,0,0,0,0,0,0,0,114,101,99,117,114,115,105,118,101,32,114,101,102,101,114,101,110,99,101,32,105,110,32,97,32,115,117,98,113,117,101,114,121,58,32,37,115,0,0,0,110,111,32,115,117,99,104,32,109,111,100,117,108,101,58,32,37,115,0,0,0,0,0,0,118,116,97,98,108,101,32,99,111,110,115,116,114,117,99,116,111,114,32,102,97,105,108,101,100,58,32,37,115,0,0,0,118,116,97,98,108,101,32,99,111,110,115,116,114,117,99,116,111,114,32,100,105,100,32,110,111,116,32,100,101,99,108,97,114,101,32,115,99,104,101,109,97,58,32,37,115,0,0,0,104,105,100,100,101,110,0,0,32,104,105,100,100,101,110,0,111,98,106,101,99,116,32,110,97,109,101,32,114,101,115,101,114,118,101,100,32,102,111,114,32,105,110,116,101,114,110,97,108,32,117,115,101,58,32,37,115,0,0,0,0,0,0,0,99,111,114,114,117,112,116,32,100,97,116,97,98,97,115,101,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,100,97,116,97,98,97,115,101,32,37,84,0,0,0,0,0,105,100,120,0,0,0,0,0,116,98,108,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,72,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,56,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,97,97,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,24,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,97,116,95,103,101,116,0,0,0,0,0,0,0,0,37,108,108,117,0,0,0,0,32,37,108,108,117,0,0,0,115,116,97,116,95,112,117,115,104,0,0,0,0,0,0,0,115,116,97,116,95,105,110,105,116,0,0,0,0,0,0,0,112,72,0,0,128,72,0,0,144,72,0,0,0,0,0,0,160,72,0,0,0,0,0,0,115,113,108,105,116,101,95,115,116,97,116,49,0,0,0,0,116,98,108,44,105,100,120,44,115,116,97,116,0,0,0,0,115,113,108,105,116,101,95,115,116,97,116,51,0,0,0,0,115,113,108,105,116,101,95,115,116,97,116,52,0,0,0,0,67,82,69,65,84,69,32,84,65,66,76,69,32,37,81,46,37,115,40,37,115,41,0,0,68,69,76,69,84,69,32,70,82,79,77,32,37,81,46,37,115,32,87,72,69,82,69,32,37,115,61,37,81,0,0,0,67,82,69,65,84,69,32,84,65,66,76,69,32,115,113,108,105,116,101,95,109,97,115,116,101,114,40,10,32,32,116,121,112,101,32,116,101,120,116,44,10,32,32,110,97,109,101,32,116,101,120,116,44,10,32,32,116,98,108,95,110,97,109,101,32,116,101,120,116,44,10,32,32,114,111,111,116,112,97,103,101,32,105,110,116,101,103,101,114,44,10,32,32,115,113,108,32,116,101,120,116,10,41,0,67,82,69,65,84,69,32,84,69,77,80,32,84,65,66,76,69,32,115,113,108,105,116,101,95,116,101,109,112,95,109,97,115,116,101,114,40,10,32,32,116,121,112,101,32,116,101,120,116,44,10,32,32,110,97,109,101,32,116,101,120,116,44,10,32,32,116,98,108,95,110,97,109,101,32,116,101,120,116,44,10,32,32,114,111,111,116,112,97,103,101,32,105,110,116,101,103,101,114,44,10,32,32,115,113,108,32,116,101,120,116,10,41,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,97,116,116,97,99,104,101,100,32,100,97,116,97,98,97,115,101,115,32,109,117,115,116,32,117,115,101,32,116,104,101,32,115,97,109,101,32,116,101,120,116,32,101,110,99,111,100,105,110,103,32,97,115,32,109,97,105,110,32,100,97,116,97,98,97,115,101,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,102,105,108,101,32,102,111,114,109,97,116,0,83,69,76,69,67,84,32,110,97,109,101,44,32,114,111,111,116,112,97,103,101,44,32,115,113,108,32,70,82,79,77,32,39,37,113,39,46,37,115,32,79,82,68,69,82,32,66,89,32,114,111,119,105,100,0,0,83,69,76,69,67,84,32,116,98,108,44,105,100,120,44,115,116,97,116,32,70,82,79,77,32,37,81,46,115,113,108,105,116,101,95,115,116,97,116,49,0,0,0,0,0,0,0,0,117,110,111,114,100,101,114,101,100,0,0,0,0,0,0,0,115,122,61,91,48,45,57,93,42,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,111,111,116,112,97,103,101,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,100,97,116,97,98,97,115,101,32,115,99,104,101,109,97,32,40,37,115,41,0,0,37,115,32,45,32,37,115,0,117,110,97,98,108,101,32,116,111,32,105,100,101,110,116,105,102,121,32,116,104,101,32,111,98,106,101,99,116,32,116,111,32,98,101,32,114,101,105,110,100,101,120,101,100,0,0,0,44,32,0,0,0,0,0,0,46,0,0,0,0,0,0,0,109,105,115,117,115,101,32,111,102,32,97,103,103,114,101,103,97,116,101,58,32,37,115,40,41,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,102,117,110,99,116,105,111,110,58,32,37,46,42,115,40,41,0,0,0,0,0,0,0,0,82,65,73,83,69,40,41,32,109,97,121,32,111,110,108,121,32,98,101,32,117,115,101,100,32,119,105,116,104,105,110,32,97,32,116,114,105,103,103,101,114,45,112,114,111,103,114,97,109,0,0,0,0,0,0,0,69,88,69,67,85,84,69,32,37,115,37,115,32,83,85,66,81,85,69,82,89,32,37,100,0,0,0,0,0,0,0,0,67,79,82,82,69,76,65,84,69,68,32,0,0,0,0,0,76,73,83,84,0,0,0,0,83,67,65,76,65,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,56,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,113,108,105,116,101,95,100,101,116,97,99,104,0,0,0,110,111,32,115,117,99,104,32,100,97,116,97,98,97,115,101,58,32,37,115,0,0,0,0,99,97,110,110,111,116,32,100,101,116,97,99,104,32,100,97,116,97,98,97,115,101,32,37,115,0,0,0,0,0,0,0,99,97,110,110,111,116,32,68,69,84,65,67,72,32,100,97,116,97,98,97,115,101,32,119,105,116,104,105,110,32,116,114,97,110,115,97,99,116,105,111,110,0,0,0,0,0,0,0,100,97,116,97,98,97,115,101,32,37,115,32,105,115,32,108,111,99,107,101,100,0,0,0,3,0,1,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,240,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,113,108,105,116,101,95,97,116,116,97,99,104,0,0,0,116,111,111,32,109,97,110,121,32,97,116,116,97,99,104,101,100,32,100,97,116,97,98,97,115,101,115,32,45,32,109,97,120,32,37,100,0,0,0,0,99,97,110,110,111,116,32,65,84,84,65,67,72,32,100,97,116,97,98,97,115,101,32,119,105,116,104,105,110,32,116,114,97,110,115,97,99,116,105,111,110,0,0,0,0,0,0,0,100,97,116,97,98,97,115,101,32,37,115,32,105,115,32,97,108,114,101,97,100,121,32,105,110,32,117,115,101,0,0,0,100,97,116,97,98,97,115,101,32,105,115,32,97,108,114,101,97,100,121,32,97,116,116,97,99,104,101,100,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,100,97,116,97,98,97,115,101,58,32,37,115,0,0,0,0,0,110,111,32,115,117,99,104,32,116,114,105,103,103,101,114,58,32,37,83,0,0,0,0,0,105,0,246,0,97,0,1,0,46,0,1,2,78,2,247,1,97,0,1,0,46,0,0,2,78,2,247,1,74,0,0,0,9,0,254,0,0,0,0,0,116,101,109,112,111,114,97,114,121,32,116,114,105,103,103,101,114,32,109,97,121,32,110,111,116,32,104,97,118,101,32,113,117,97,108,105,102,105,101,100,32,110,97,109,101,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,116,114,105,103,103,101,114,115,32,111,110,32,118,105,114,116,117,97,108,32,116,97,98,108,101,115,0,0,0,0,0,0,0,0,116,114,105,103,103,101,114,32,37,84,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,116,114,105,103,103,101,114,32,111,110,32,115,121,115,116,101,109,32,116,97,98,108,101,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,37,115,32,116,114,105,103,103,101,114,32,111,110,32,118,105,101,119,58,32,37,83,0,0,0,0,66,69,70,79,82,69,0,0,65,70,84,69,82,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,73,78,83,84,69,65,68,32,79,70,32,116,114,105,103,103,101,114,32,111,110,32,116,97,98,108,101,58,32,37,83,0,0,0,37,115,32,37,84,32,99,97,110,110,111,116,32,114,101,102,101,114,101,110,99,101,32,111,98,106,101,99,116,115,32,105,110,32,100,97,116,97,98,97,115,101,32,37,115,0,0,0,37,115,32,99,97,110,110,111,116,32,117,115,101,32,118,97,114,105,97,98,108,101,115,0,73,78,83,69,82,84,32,73,78,84,79,32,37,81,46,37,115,32,86,65,76,85,69,83,40,39,116,114,105,103,103,101,114,39,44,37,81,44,37,81,44,48,44,39,67,82,69,65,84,69,32,84,82,73,71,71,69,82,32,37,113,39,41,0,116,121,112,101,61,39,116,114,105,103,103,101,114,39,32,65,78,68,32,110,97,109,101,61,39,37,113,39,0,0,0,0,45,37,84,0,0,0,0,0,114,101,115,117,108,116,0,0,120,87,0,0,0,0,0,0,0,0,0,0,240,82,0,0,1,1,0,0,0,0,0,0,136,87,0,0,2,0,0,0,0,0,16,0,152,87,0,0,3,0,0,0,0,0,0,0,112,82,0,0,4,1,0,0,0,0,0,0,168,87,0,0,2,0,0,0,16], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([184,87,0,0,5,0,0,0,0,0,0,0,208,87,0,0,2,0,0,0,8,0,0,0,232,87,0,0,6,0,0,0,0,0,0,0,248,87,0,0,7,0,0,0,0,0,0,0,8,88,0,0,2,0,0,0,128,0,0,0,24,88,0,0,9,1,0,0,0,0,0,0,40,88,0,0,10,1,0,0,0,0,0,0,64,88,0,0,2,0,0,0,0,0,0,1,88,88,0,0,2,0,0,0,0,1,0,0,152,85,0,0,11,0,0,0,0,0,0,0,112,88,0,0,12,1,0,0,0,0,0,0,136,88,0,0,13,1,0,0,0,0,0,0,160,88,0,0,2,0,0,0,0,0,8,0,176,88,0,0,0,0,0,0,0,0,0,0,192,88,0,0,2,0,0,0,32,0,0,0,216,88,0,0,2,0,0,0,4,0,0,0,232,88,0,0,2,0,0,0,0,32,0,0,8,89,0,0,14,1,0,0,0,0,0,0,32,89,0,0,15,1,0,0,0,0,0,0,48,89,0,0,16,1,0,0,0,0,0,0,144,84,0,0,17,1,0,0,0,0,0,0,200,82,0,0,18,1,0,0,0,0,0,0,216,82,0,0,19,0,0,0,0,0,0,0,64,89,0,0,2,0,0,0,0,128,0,0,184,82,0,0,21,0,0,0,0,0,0,0,88,89,0,0,22,1,0,0,0,0,0,0,24,83,0,0,23,0,0,0,0,0,0,0,104,89,0,0,22,1,0,0,0,0,0,0,128,82,0,0,24,0,0,0,0,0,0,0,120,89,0,0,2,0,0,0,0,0,0,2,136,89,0,0,17,1,0,0,0,0,0,0,152,89,0,0,2,0,0,0,0,64,0,0,176,89,0,0,2,0,0,0,0,0,4,0,200,89,0,0,2,0,0,0,0,0,2,0,232,89,0,0,0,0,0,0,0,0,0,0,144,82,0,0,25,0,0,0,0,0,0,0,248,89,0,0,2,0,0,0,64,0,0,0,16,90,0,0,26,0,0,0,0,0,0,0,72,86,0,0,27,0,0,0,0,0,0,0,32,90,0,0,28,1,0,0,0,0,0,0,112,83,0,0,29,1,0,0,0,0,0,0,40,90,0,0,30,1,0,0,0,0,0,0,40,83,0,0,31,0,0,0,0,0,0,0,56,83,0,0,32,0,0,0,0,0,0,0,56,90,0,0,0,0,0,0,0,0,0,0,40,86,0,0,33,0,0,0,0,0,0,0,72,90,0,0,34,1,0,0,0,0,0,0,88,90,0,0,2,0,0,0,0,8,1,0,4,0,0,0,50,0,1,3,132,1,8,0,25,0,2,0,90,1,2,1,132,1,8,0,25,0,1,0,155,0,0,0,35,1,1,0,0,0,0,0,99,97,99,104,101,95,115,105,122,101,0,0,0,0,0,0,112,97,103,101,95,115,105,122,101,0,0,0,0,0,0,0,115,101,99,117,114,101,95,100,101,108,101,116,101,0,0,0,110,111,114,109,97,108,0,0,101,120,99,108,117,115,105,118,101,0,0,0,0,0,0,0,108,111,99,107,105,110,103,95,109,111,100,101,0,0,0,0,106,111,117,114,110,97,108,95,109,111,100,101,0,0,0,0,106,111,117,114,110,97,108,95,115,105,122,101,95,108,105,109,105,116,0,0,0,0,0,0,97,117,116,111,95,118,97,99,117,117,109,0,0,0,0,0,4,0,1,0,50,0,1,4,44,1,0,0,24,0,2,0,25,0,1,0,51,0,7,1,109,109,97,112,95,115,105,122,101,0,0,0,0,0,0,0,116,101,109,112,95,115,116,111,114,101,0,0,0,0,0,0,116,101,109,112,95,115,116,111,114,101,95,100,105,114,101,99,116,111,114,121,0,0,0,0,110,111,116,32,97,32,119,114,105,116,97,98,108,101,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,0,115,121,110,99,104,114,111,110,111,117,115,0,0,0,0,0,83,97,102,101,116,121,32,108,101,118,101,108,32,109,97,121,32,110,111,116,32,98,101,32,99,104,97,110,103,101,100,32,105,110,115,105,100,101,32,97,32,116,114,97,110,115,97,99,116,105,111,110,0,0,0,0,99,105,100,0,0,0,0,0,110,97,109,101,0,0,0,0,116,121,112,101,0,0,0,0,110,111,116,110,117,108,108,0,100,102,108,116,95,118,97,108,117,101,0,0,0,0,0,0,112,107,0,0,0,0,0,0,116,97,98,108,101,0,0,0,119,105,100,116,104,0,0,0,104,101,105,103,104,116,0,0,115,101,113,110,111,0,0,0,115,101,113,0,0,0,0,0,117,110,105,113,117,101,0,0,102,105,108,101,0,0,0,0,105,100,0,0,0,0,0,0,102,114,111,109,0,0,0,0,116,111,0,0,0,0,0,0,111,110,95,117,112,100,97,116,101,0,0,0,0,0,0,0,111,110,95,100,101,108,101,116,101,0,0,0,0,0,0,0,109,97,116,99,104,0,0,0,78,79,78,69,0,0,0,0,112,97,114,101,110,116,0,0,102,107,105,100,0,0,0,0,37,1,0,0,134,1,0,0,97,0,3,0,35,3,1,0,105,110,116,101,103,114,105,116,121,95,99,104,101,99,107,0,42,42,42,32,105,110,32,100,97,116,97,98,97,115,101,32,37,115,32,42,42,42,10,0,114,111,119,32,0,0,0,0,32,109,105,115,115,105,110,103,32,102,114,111,109,32,105,110,100,101,120,32,0,0,0,0,119,114,111,110,103,32,35,32,111,102,32,101,110,116,114,105,101,115,32,105,110,32,105,110,100,101,120,32,0,0,0,0,111,107,0,0,0,0,0,0,72,85,0,0,1,0,0,0,80,85,0,0,1,0,0,0,88,85,0,0,2,0,0,0,104,85,0,0,3,0,0,0,120,85,0,0,2,0,0,0,128,85,0,0,3,0,0,0,136,85,0,0,0,0,0,0,144,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,84,70,56,0,0,0,0,85,84,70,45,56,0,0,0,85,84,70,45,49,54,108,101,0,0,0,0,0,0,0,0,85,84,70,45,49,54,98,101,0,0,0,0,0,0,0,0,85,84,70,49,54,108,101,0,85,84,70,49,54,98,101,0,85,84,70,45,49,54,0,0,85,84,70,49,54,0,0,0,101,110,99,111,100,105,110,103,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,58,32,37,115,0,0,0,0,0,0,0,0,4,0,1,0,25,0,1,0,51,0,0,1,0,0,0,0,4,0,0,0,50,0,1,0,35,1,1,0,0,0,0,0,99,111,109,112,105,108,101,95,111,112,116,105,111,110,0,0,102,117,108,108,0,0,0,0,114,101,115,116,97,114,116,0,98,117,115,121,0,0,0,0,108,111,103,0,0,0,0,0,99,104,101,99,107,112,111,105,110,116,101,100,0,0,0,0,119,97,108,95,97,117,116,111,99,104,101,99,107,112,111,105,110,116,0,0,0,0,0,0,116,105,109,101,111,117,116,0,115,111,102,116,95,104,101,97,112,95,108,105,109,105,116,0,37,95,0,0,0,0,0,0,102,111,114,101,105,103,110,32,107,101,121,32,109,105,115,109,97,116,99,104,32,45,32,34,37,119,34,32,114,101,102,101,114,101,110,99,105,110,103,32,34,37,119,34,0,0,0,0,83,69,84,32,78,85,76,76,0,0,0,0,0,0,0,0,83,69,84,32,68,69,70,65,85,76,84,0,0,0,0,0,67,65,83,67,65,68,69,0,82,69,83,84,82,73,67,84,0,0,0,0,0,0,0,0,78,79,32,65,67,84,73,79,78,0,0,0,0,0,0,0,116,101,109,112,111,114,97,114,121,32,115,116,111,114,97,103,101,32,99,97,110,110,111,116,32,98,101,32,99,104,97,110,103,101,100,32,102,114,111,109,32,119,105,116,104,105,110,32,97,32,116,114,97,110,115,97,99,116,105,111,110,0,0,0,110,111,110,101,0,0,0,0,105,110,99,114,101,109,101,110,116,97,108,0,0,0,0,0,72,87,0,0,80,87,0,0,88,87,0,0,96,87,0,0,128,19,0,0,112,87,0,0,100,101,108,101,116,101,0,0,112,101,114,115,105,115,116,0,111,102,102,0,0,0,0,0,116,114,117,110,99,97,116,101,0,0,0,0,0,0,0,0,119,97,108,0,0,0,0,0,97,112,112,108,105,99,97,116,105,111,110,95,105,100,0,0,97,117,116,111,109,97,116,105,99,95,105,110,100,101,120,0,98,117,115,121,95,116,105,109,101,111,117,116,0,0,0,0,99,97,99,104,101,95,115,112,105,108,108,0,0,0,0,0,99,97,115,101,95,115,101,110,115,105,116,105,118,101,95,108,105,107,101,0,0,0,0,0,99,104,101,99,107,112,111,105,110,116,95,102,117,108,108,102,115,121,110,99,0,0,0,0,99,111,108,108,97,116,105,111,110,95,108,105,115,116,0,0,99,111,109,112,105,108,101,95,111,112,116,105,111,110,115,0,99,111,117,110,116,95,99,104,97,110,103,101,115,0,0,0,100,97,116,97,98,97,115,101,95,108,105,115,116,0,0,0,100,101,102,97,117,108,116,95,99,97,99,104,101,95,115,105,122,101,0,0,0,0,0,0,100,101,102,101,114,95,102,111,114,101,105,103,110,95,107,101,121,115,0,0,0,0,0,0,101,109,112,116,121,95,114,101,115,117,108,116,95,99,97,108,108,98,97,99,107,115,0,0,102,111,114,101,105,103,110,95,107,101,121,95,99,104,101,99,107,0,0,0,0,0,0,0,102,111,114,101,105,103,110,95,107,101,121,95,108,105,115,116,0,0,0,0,0,0,0,0,102,111,114,101,105,103,110,95,107,101,121,115,0,0,0,0,102,114,101,101,108,105,115,116,95,99,111,117,110,116,0,0,102,117,108,108,95,99,111,108,117,109,110,95,110,97,109,101,115,0,0,0,0,0,0,0,102,117,108,108,102,115,121,110,99,0,0,0,0,0,0,0,105,103,110,111,114,101,95,99,104,101,99,107,95,99,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,105,110,99,114,101,109,101,110,116,97,108,95,118,97,99,117,117,109,0,0,0,0,0,0,105,110,100,101,120,95,105,110,102,111,0,0,0,0,0,0,105,110,100,101,120,95,108,105,115,116,0,0,0,0,0,0,108,101,103,97,99,121,95,102,105,108,101,95,102,111,114,109,97,116,0,0,0,0,0,0,109,97,120,95,112,97,103,101,95,99,111,117,110,116,0,0,112,97,103,101,95,99,111,117,110,116,0,0,0,0,0,0,113,117,101,114,121,95,111,110,108,121,0,0,0,0,0,0,113,117,105,99,107,95,99,104,101,99,107,0,0,0,0,0,114,101,97,100,95,117,110,99,111,109,109,105,116,116,101,100,0,0,0,0,0,0,0,0,114,101,99,117,114,115,105,118,101,95,116,114,105,103,103,101,114,115,0,0,0,0,0,0,114,101,118,101,114,115,101,95,117,110,111,114,100,101,114,101,100,95,115,101,108,101,99,116,115,0,0,0,0,0,0,0,115,99,104,101,109,97,95,118,101,114,115,105,111,110,0,0,115,104,111,114,116,95,99,111,108,117,109,110,95,110,97,109,101,115,0,0,0,0,0,0,115,104,114,105,110,107,95,109,101,109,111,114,121,0,0,0,115,116,97,116,115,0,0,0,116,97,98,108,101,95,105,110,102,111,0,0,0,0,0,0,117,115,101,114,95,118,101,114,115,105,111,110,0,0,0,0,119,97,108,95,99,104,101,99,107,112,111,105,110,116,0,0,119,114,105,116,97,98,108,101,95,115,99,104,101,109,97,0,110,111,32,115,117,99,104,32,105,110,100,101,120,58,32,37,83,0,0,0,0,0,0,0,105,110,100,101,120,32,97,115,115,111,99,105,97,116,101,100,32,119,105,116,104,32,85,78,73,81,85,69,32,111,114,32,80,82,73,77,65,82,89,32,75,69,89,32,99,111,110,115,116,114,97,105,110,116,32,99,97,110,110,111,116,32,98,101,32,100,114,111,112,112,101,100,0,0,0,0,0,0,0,0,68,69,76,69,84,69,32,70,82,79,77,32,37,81,46,37,115,32,87,72,69,82,69,32,110,97,109,101,61,37,81,32,65,78,68,32,116,121,112,101,61,39,105,110,100,101,120,39,0,0,0,0,0,0,0,0,85,80,68,65,84,69,32,37,81,46,37,115,32,83,69,84,32,114,111,111,116,112,97,103,101,61,37,100,32,87,72,69,82,69,32,35,37,100,32,65,78,68,32,114,111,111,116,112,97,103,101,61,35,37,100,0,115,113,108,105,116,101,95,115,116,97,116,37,100,0,0,0,48,0,0,0,0,0,0,0,118,97,114,105,97,98,108,101,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,63,49,32,97,110,100,32,63,37,100,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,83,81,76,32,118,97,114,105,97,98,108,101,115,0,0,116,97,98,108,101,32,37,83,32,104,97,115,32,110,111,32,99,111,108,117,109,110,32,110,97,109,101,100,32,37,115,0,116,97,98,108,101,32,37,83,32,104,97,115,32,37,100,32,99,111,108,117,109,110,115,32,98,117,116,32,37,100,32,118,97,108,117,101,115,32,119,101,114,101,32,115,117,112,112,108,105,101,100,0,0,0,0,0,37,100,32,118,97,108,117,101,115,32,102,111,114,32,37,100,32,99,111,108,117,109,110,115,0,0,0,0,0,0,0,0,114,111,119,115,32,105,110,115,101,114,116,101,100,0,0,0,97,116,32,109,111,115,116,32,37,100,32,116,97,98,108,101,115,32,105,110,32,97,32,106,111,105,110,0,0,0,0,0,62,60,59,61,0,0,0,0,0,0,105,102,62,59,61,60,113,111,110,112,0,0,0,0,9,8,0,0,0,0,0,0,105,102,0,0,0,0,0,0,83,69,65,82,67,72,0,0,83,67,65,78,0,0,0,0,37,115,32,83,85,66,81,85,69,82,89,32,37,100,0,0,37,115,32,84,65,66,76,69,32,37,115,0,0,0,0,0,37,115,32,65,83,32,37,115,0,0,0,0,0,0,0,0,37,115,32,85,83,73,78,71,32,65,85,84,79,77,65,84,73,67,32,37,115,73,78,68,69,88,37,46,48,115,37,115,0,0,0,0,0,0,0,0,37,115,32,85,83,73,78,71,32,37,115,73,78,68,69,88,32,37,115,37,115,0,0,0,67,79,86,69,82,73,78,71,32,0,0,0,0,0,0,0,37,115,32,85,83,73,78,71,32,73,78,84,69,71,69,82,32,80,82,73,77,65,82,89,32,75,69,89,0,0,0,0,37,115,32,40,114,111,119,105,100,61,63,41,0,0,0,0,37,115,32,40,114,111,119,105,100,62,63,32,65,78,68,32,114,111,119,105,100,60,63,41,0,0,0,0,0,0,0,0,37,115,32,40,114,111,119,105,100,62,63,41,0,0,0,0,37,115,32,40,114,111,119,105,100,60,63,41,0,0,0,0,37,115,32,86,73,82,84,85,65,76,32,84,65,66,76,69,32,73,78,68,69,88,32,37,100,58,37,115,0,0,0,0,32,40,0,0,0,0,0,0,61,0,0,0,0,0,0,0,32,65,78,68,32,0,0,0,65,78,89,40,0,0,0,0,41,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,97,117,116,111,109,97,116,105,99,32,105,110,100,101,120,32,111,110,32,37,115,40,37,115,41,0,0,0,0,0,0,0,97,117,116,111,45,105,110,100,101,120,0,0,0,0,0,0,110,111,32,113,117,101,114,121,32,115,111,108,117,116,105,111,110,0,0,0,0,0,0,0,10,10,9,9,8,8,7,7,7,6,6,6,5,5,5,4,4,4,4,3,3,3,3,3,3,2,2,2,2,2,2,2,37,115,46,120,66,101,115,116,73,110,100,101,120,40,41,32,109,97,108,102,117,110,99,116,105,111,110,0,0,0,0,0,116,97,98,108,101,32,37,115,58,32,120,66,101,115,116,73,110,100,101,120,32,114,101,116,117,114,110,101,100,32,97,110,32,105,110,118,97,108,105,100,32,112,108,97,110,0,0,0,45,45,32,84,82,73,71,71,69,82,32,37,115,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,2,0,1,0,1,1,4,36,1,4,5,16,0,2,2,2,2,0,2,2,0,0,32,0,0,4,5,4,0,0,1,1,5,5,0,0,0,2,2,16,0,0,0,0,0,0,0,17,17,17,17,8,17,17,17,17,2,2,0,76,76,0,0,0,5,5,21,21,21,21,21,21,0,76,76,76,76,76,76,76,76,76,76,0,36,2,0,0,2,0,1,1,1,1,8,8,0,2,1,1,1,1,2,0,2,2,0,0,0,0,0,0,12,69,21,1,2,0,1,8,5,2,5,5,0,1,0,0,0,0,0,4,4,4,4,4,0,0,1,0,2,2,1,0,0,0,0,0,16,16,2,16,0,0,0,0,0,1,2,3,4,6,8,8,0,0,0,0,0,0,0,0,168,67,0,0,3,0,0,0,160,67,0,0,3,0,0,0,111,105,100,0,0,0,0,0,70,79,82,69,73,71,78,32,75,69,89,32,99,111,110,115,116,114,97,105,110,116,32,102,97,105,108,101,100,0,0,0,37,115,46,114,111,119,105,100,0,0,0,0,0,0,0,0,116,97,98,108,101,32,37,115,32,109,97,121,32,110,111,116,32,98,101,32,109,111,100,105,102,105,101,100,0,0,0,0,99,97,110,110,111,116,32,109,111,100,105,102,121,32,37,115,32,98,101,99,97,117,115,101,32,105,116,32,105,115,32,97,32,118,105,101,119,0,0,0,110,111,32,115,117,99,104,32,99,111,108,117,109,110,58,32,37,115,0,0,0,0,0,0,114,111,119,115,32,117,112,100,97,116,101,100,0,0,0,0,95,114,111,119,105,100,95,0,116,111,111,32,109,97,110,121,32,99,111,108,117,109,110,115,32,105,110,32,37,115,0,0,114,111,119,115,32,100,101,108,101,116,101,100,0,0,0,0,110,97,116,117,114,97,108,101,102,116,111,117,116,101,114,105,103,104,116,102,117,108,108,105,110,110,101,114,99,114,111,115,115,0,0,0,0,0,0,0,0,7,4,6,4,40,10,5,32,14,5,48,19,4,56,23,5,1,28,5,3,0,0,0,117,110,107,110,111,119,110,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,106,111,105,110,32,116,121,112,101,58,32,37,84,32,37,84,37,115,37,84,0,0,0,0,0,82,73,71,72,84,32,97,110,100,32,70,85,76,76,32,79,85,84,69,82,32,74,79,73,78,115,32,97,114,101,32,110,111,116,32,99,117,114,114,101,110,116,108,121,32,115,117,112,112,111,114,116,101,100,0,0,97,32,74,79,73,78,32,99,108,97,117,115,101,32,105,115,32,114,101,113,117,105,114,101,100,32,98,101,102,111,114,101,32,37,115,0,0,0,0,0,79,78,0,0,0,0,0,0,85,83,73,78,71,0,0,0,68,73,83,84,73,78,67,84,0,0,0,0,0,0,0,0,71,82,79,85,80,32,66,89,0,0,0,0,0,0,0,0,79,82,68,69,82,32,66,89,0,0,0,0,0,0,0,0,99,111,108,117,109,110,37,100,0,0,0,0,0,0,0,0,83,67,65,78,32,84,65,66,76,69,32,37,115,37,115,37,115,0,0,0,0,0,0,0,32,85,83,73,78,71,32,67,79,86,69,82,73,78,71,32,73,78,68,69,88,32,0,0,68,73,83,84,73,78,67,84,32,97,103,103,114,101,103,97,116,101,115,32,109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,97,114,103,117,109,101,110,116,0,0,0,0,0,0,85,83,69,32,84,69,77,80,32,66,45,84,82,69,69,32,70,79,82,32,37,115,0,0,79,82,68,69,82,32,66,89,32,99,108,97,117,115,101,32,115,104,111,117,108,100,32,99,111,109,101,32,97,102,116,101,114,32,37,115,32,110,111,116,32,98,101,102,111,114,101,0,76,73,77,73,84,32,99,108,97,117,115,101,32,115,104,111,117,108,100,32,99,111,109,101,32,97,102,116,101,114,32,37,115,32,110,111,116,32,98,101,102,111,114,101,0,0,0,0,97,108,108,32,86,65,76,85,69,83,32,109,117,115,116,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,110,117,109,98,101,114,32,111,102,32,116,101,114,109,115,0,0,0,83,69,76,69,67,84,115,32,116,111,32,116,104,101,32,108,101,102,116,32,97,110,100,32,114,105,103,104,116,32,111,102,32,37,115,32,100,111,32,110,111,116,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,110,117,109,98,101,114,32,111,102,32,114,101,115,117,108,116,32,99,111,108,117,109,110,115,0,0,0,0,0,0,0,67,79,77,80,79,85,78,68,32,83,85,66,81,85,69,82,73,69,83,32,37,100,32,65,78,68,32,37,100,32,37,115,40,37,115,41,0,0,0,0,85,83,73,78,71,32,84,69,77,80,32,66,45,84,82,69,69,32,0,0,0,0,0,0,85,78,73,79,78,32,65,76,76,0,0,0,0,0,0,0,73,78,84,69,82,83,69,67,84,0,0,0,0,0,0,0,69,88,67,69,80,84,0,0,85,78,73,79,78,0,0,0,111,110,108,121,32,97,32,115,105,110,103,108,101,32,114,101,115,117,108,116,32,97,108,108,111,119,101,100,32,102,111,114,32,97,32,83,69,76,69,67,84,32,116,104,97,116,32,105,115,32,112,97,114,116,32,111,102,32,97,110,32,101,120,112,114,101,115,115,105,111,110,0,112,97,114,97,109,101,116,101,114,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,118,105,101,119,115,0,0,0,0,0,118,105,101,119,0,0,0,0,115,113,108,105,116,101,95,115,116,97,116,0,0,0,0,0,116,97,98,108,101,32,37,115,32,109,97,121,32,110,111,116,32,98,101,32,100,114,111,112,112,101,100,0,0,0,0,0,117,115,101,32,68,82,79,80,32,84,65,66,76,69,32,116,111,32,100,101,108,101,116,101,32,116,97,98,108,101,32,37,115,0,0,0,0,0,0,0,117,115,101,32,68,82,79,80,32,86,73,69,87,32,116,111,32,100,101,108,101,116,101,32,118,105,101,119,32,37,115,0,68,69,76,69,84,69,32,70,82,79,77,32,37,81,46,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,32,87,72,69,82,69,32,110,97,109,101,61,37,81,0,0,0,0,68,69,76,69,84,69,32,70,82,79,77,32,37,81,46,37,115,32,87,72,69,82,69,32,116,98,108,95,110,97,109,101,61,37,81,32,97,110,100,32,116,121,112,101,33,61,39,116,114,105,103,103,101,114,39,0,102,111,114,101,105,103,110,32,107,101,121,32,111,110,32,37,115,32,115,104,111,117,108,100,32,114,101,102,101,114,101,110,99,101,32,111,110,108,121,32,111,110,101,32,99,111,108,117,109,110,32,111,102,32,116,97,98,108,101,32,37,84,0,0,110,117,109,98,101,114,32,111,102,32,99,111,108,117,109,110,115,32,105,110,32,102,111,114,101,105,103,110,32,107,101,121,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,111,108,117,109,110,115,32,105,110,32,116,104,101,32,114,101,102,101,114,101,110,99,101,100,32,116,97,98,108,101,0,0,0,117,110,107,110,111,119,110,32,99,111,108,117,109,110,32,34,37,115,34,32,105,110,32,102,111,114,101,105,103,110,32,107,101,121,32,100,101,102,105,110,105,116,105,111,110,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,97,32,84,69,77,80,32,105,110,100,101,120,32,111,110,32,110,111,110,45,84,69,77,80,32,116,97,98,108,101,32,34,37,115,34,0,0,0,0,0,0,0,97,108,116,101,114,116,97,98,95,0,0,0,0,0,0,0,116,97,98,108,101,32,37,115,32,109,97,121,32,110,111,116,32,98,101,32,105,110,100,101,120,101,100,0,0,0,0,0,118,105,101,119,115,32,109,97,121,32,110,111,116,32,98,101,32,105,110,100,101,120,101,100,0,0,0,0,0,0,0,0,118,105,114,116,117,97,108,32,116,97,98,108,101,115,32,109,97,121,32,110,111,116,32,98,101,32,105,110,100,101,120,101,100,0,0,0,0,0,0,0,116,104,101,114,101,32,105,115,32,97,108,114,101,97,100,121,32,97,32,116,97,98,108,101,32,110,97,109,101,100,32,37,115,0,0,0,0,0,0,0,105,110,100,101,120,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,0,115,113,108,105,116,101,95,97,117,116,111,105,110,100,101,120,95,37,115,95,37,100,0,0,116,97,98,108,101,32,37,115,32,104,97,115,32,110,111,32,99,111,108,117,109,110,32,110,97,109,101,100,32,37,115,0,99,111,110,102,108,105,99,116,105,110,103,32,79,78,32,67,79,78,70,76,73,67,84,32,99,108,97,117,115,101,115,32,115,112,101,99,105,102,105,101,100,0,0,0,0,0,0,0,67,82,69,65,84,69,37,115,32,73,78,68,69,88,32,37,46,42,115,0,0,0,0,0,32,85,78,73,81,85,69,0,73,78,83,69,82,84,32,73,78,84,79,32,37,81,46,37,115,32,86,65,76,85,69,83,40,39,105,110,100,101,120,39,44,37,81,44,37,81,44,35,37,100,44,37,81,41,59,0,110,97,109,101,61,39,37,113,39,32,65,78,68,32,116,121,112,101,61,39,105,110,100,101,120,39,0,0,0,0,0,0,116,97,98,108,101,32,34,37,115,34,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,112,114,105,109,97,114,121,32,107,101,121,0,0,0,0,0,0,0,0,65,85,84,79,73,78,67,82,69,77,69,78,84,32,105,115,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,97,110,32,73,78,84,69,71,69,82,32,80,82,73,77,65,82,89,32,75,69,89,0,100,101,102,97,117,108,116,32,118,97,108,117,101,32,111,102,32,99,111,108,117,109,110,32,91,37,115,93,32,105,115,32,110,111,116,32,99,111,110,115,116,97,110,116,0,0,0,0,116,111,111,32,109,97,110,121,32,99,111,108,117,109,110,115,32,111,110,32,37,115,0,0,100,117,112,108,105,99,97,116,101,32,99,111,108,117,109,110,32,110,97,109,101,58,32,37,115,0,0,0,0,0,0,0,65,85,84,79,73,78,67,82,69,77,69,78,84,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,87,73,84,72,79,85,84,32,82,79,87,73,68,32,116,97,98,108,101,115,0,0,0,0,0,0,0,80,82,73,77,65,82,89,32,75,69,89,32,109,105,115,115,105,110,103,32,111,110,32,116,97,98,108,101,32,37,115,0,84,65,66,76,69,0,0,0,86,73,69,87,0,0,0,0,67,82,69,65,84,69,32,37,115,32,37,46,42,115,0,0,85,80,68,65,84,69,32,37,81,46,37,115,32,83,69,84,32,116,121,112,101,61,39,37,115,39,44,32,110,97,109,101,61,37,81,44,32,116,98,108,95,110,97,109,101,61,37,81,44,32,114,111,111,116,112,97,103,101,61,35,37,100,44,32,115,113,108,61,37,81,32,87,72,69,82,69,32,114,111,119,105,100,61,35,37,100,0,0,67,82,69,65,84,69,32,84,65,66,76,69,32,37,81,46,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,40,110,97,109,101,44,115,101,113,41,0,0,0,0,0,0,0,116,98,108,95,110,97,109,101,61,39,37,113,39,32,65,78,68,32,116,121,112,101,33,61,39,116,114,105,103,103,101,114,39,0,0,0,0,0,0,0,10,32,32,0,0,0,0,0,44,10,32,32,0,0,0,0,10,41,0,0,0,0,0,0,67,82,69,65,84,69,32,84,65,66,76,69,32,0,0,0,80,105,0,0,192,6,0,0,88,105,0,0,96,105,0,0,104,105,0,0,0,0,0,0,32,84,69,88,84,0,0,0,32,78,85,77,0,0,0,0,32,73,78,84,0,0,0,0,32,82,69,65,76,0,0,0,116,101,109,112,111,114,97,114,121,32,116,97,98,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,117,110,113,117,97,108,105,102,105,101,100,0,0,0,0,0,0,0,0,116,97,98,108,101,32,37,84,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,0,116,104,101,114,101,32,105,115,32,97,108,114,101,97,100,121,32,97,110,32,105,110,100,101,120,32,110,97,109,101,100,32,37,115,0,0,0,0,0,0,240,105,0,0,248,105,0,0,0,106,0,0,0,0,0,0,66,69,71,73,78,0,0,0,82,69,76,69,65,83,69,0,82,79,76,76,66,65,67,75,0,0,0,0,0,0,0,0,67,79,77,77,73,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,97,114,115,101,114,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,224,3,33,4,75,5,132,4,180,4,180,4,1,0,6,1,237,255,135,0,135,0,8,3,180,4,180,4,180,4,180,4,69,0,69,0,53,0,208,0,27,1,243,2,58,0,213,2,136,2,59,2,238,1,161,1,84,1,7,1,212,0,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,59,3,110,3,59,3,161,3,212,3,212,3,46,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,234,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,180,4,185,255,209,255,209,255,209,255,209,255,209,255,0,0,29,0,244,255,27,1,27,1,139,0,91,0,136,1,136,1,126,3,160,2,214,2,103,5,170,255,170,255,170,255,88,0,62,1,62,1,99,0,125,1,236,255,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,112,2,108,3,214,2,160,2,60,5,60,5,60,5,60,5,60,5,60,5,170,255,170,255,170,255,49,1,136,0,136,0,142,0,167,0,226,0,154,0,137,0,152,0,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,80,1,80,1,80,1,27,1,27,1,96,1,27,1,27,1,27,1,27,1,27,1,228,0,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,245,1,57,2,84,2,84,2,84,2,251,1,241,1,185,1,135,1,97,1,156,0,156,0,89,3,97,1,89,3,223,2,45,3,127,2,203,2,156,0,76,1,203,2,203,2,240,1,163,1,134,2,77,5,160,4,160,4,55,5,55,5,160,4,61,5,236,4,120,4,66,5,66,5,66,5,66,5,160,4,26,5,120,4,61,5,236,4,236,4,120,4,160,4,26,5,182,4,4,5,160,4,160,4,26,5,160,4,26,5,160,4,26,5,238,4,183,4,183,4,183,4,250,4,238,4,183,4,193,4,183,4,250,4,183,4,183,4,161,4,176,4,161,4,176,4,161,4,176,4,160,4,160,4,137,4,238,4,178,4,178,4,238,4,130,4,131,4,123,4,128,4,120,4,217,4,215,4,226,4,226,4,230,4,230,4,230,4,230,4,170,255,170,255,170,255,170,255,170,255,170,255,44,4,48,1,14,2,249,0,152,1,173,255,178,1,44,3,27,0,43,3,39,3,34,3,239,2,77,2,139,2,163,0,131,0,162,2,110,1,194,1,43,1,148,0,23,0,102,0,229,0,235,255,221,4,220,4,198,4,75,4,204,4,148,4,199,4,191,4,189,4,91,4,82,4,99,4,86,4,185,4,81,4,188,4,202,4,74,4,65,4,116,4,115,4,80,4,165,4,154,4,70,4,187,4,181,4,163,4,77,4,47,4,129,4,151,4,122,4,114,4,127,4,67,4,140,4,141,4,139,4,45,4,48,4,124,4,88,4,110,4,103,4,105,4,102,4,68,4,90,4,94,4,64,4,66,4,69,4,63,4,60,4,219,3,55,4,53,4,50,4,41,4,156,3,253,3,246,3,236,3,238,3,51,3,227,2,128,3,87,3,36,3,227,2,228,2,224,2,178,2,142,2,153,2,106,2,70,2,56,2,16,2,42,2,123,1,20,2,223,1,199,1,123,1,176,1,115,1,85,1,28,0,82,1,116,0,245,255,199,255,171,255,7,0,248,255,3,0,0,0,0,0,135,2,196,3,196,3,196,3,110,3,110,3,201,3,196,3,6,3,34,3,34,3,170,3,201,3,201,3,201,3,108,3,201,3,201,3,201,3,196,3,201,3,10,3,40,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,169,3,171,3,48,3,47,3,150,3,21,3,45,3,38,3,42,3,111,3,104,3,105,3,103,3,107,3,112,3,201,3,41,3,73,3,88,3,72,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,82,3,87,3,94,3,86,3,83,3,75,3,74,3,76,3,77,3,201,3,201,3,161,2,227,2,201,3,201,3,78,3,201,3,173,2,79,3,91,3,90,3,89,3,168,2,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,135,2,196,3,201,3,201,3,196,3,196,3,196,3,196,3,196,3,196,3,188,3,10,3,0,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,176,3,174,3,201,3,123,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,141,2,201,3,143,3,6,3,6,3,6,3,8,3,242,2,254,2,143,2,44,3,23,3,23,3,155,3,44,3,155,3,198,2,221,2,195,2,34,3,23,3,106,3,34,3,34,3,7,3,254,2,201,3,181,3,14,3,14,3,173,3,173,3,14,3,53,3,231,2,44,3,238,2,238,2,238,2,238,2,14,3,158,2,44,3,53,3,231,2,231,2,44,3,14,3,158,2,149,3,147,3,14,3,14,3,158,2,14,3,158,2,14,3,158,2,116,3,229,2,229,2,229,2,213,2,116,3,229,2,198,2,229,2,213,2,229,2,229,2,27,3,22,3,27,3,22,3,27,3,22,3,14,3,14,3,201,3,116,3,120,3,120,3,116,3,39,3,28,3,37,3,35,3,44,3,164,2,216,2,151,2,151,2,140,2,140,2,140,2,140,2,193,3,193,3,188,3,200,2,200,2,183,2,201,3,201,3,201,3,201,3,201,3,201,3,175,2,201,3,125,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,60,3,201,3,136,2,183,3,201,3,201,3,180,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,153,3,201,3,201,3,201,3,201,3,201,3,201,3,146,3,145,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,245,2,201,3,201,3,201,3,249,2,201,3,201,3,201,3,201,3,201,3,201,3,36,3,201,3,29,3,201,3,109,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,201,3,198,3,201,3,201,3,201,3,197,3,201,3,201,3,201,3,201,3,201,3,62,3,201,3,61,3,65,3,201,3,149,2,201,3,132,2,137,2,192,3,195,3,194,3,191,3,190,3,189,3,184,3,182,3,179,3,178,3,177,3,175,3,172,3,168,3,129,3,127,3,134,3,133,3,132,3,131,3,130,3,128,3,126,3,124,3,50,3,49,3,46,3,43,3,241,2,167,3,122,3,240,2,237,2,236,2,157,2,185,3,152,3,161,3,160,3,159,3,54,3,158,3,157,3,156,3,154,3,151,3,138,3,52,3,51,3,232,2,114,3,113,3,160,2,142,3,141,3,140,3,144,3,148,3,139,3,16,3,239,2,159,2,156,2,163,2,167,2,219,2,220,2,228,2,226,2,225,2,224,2,223,2,222,2,218,2,169,2,174,2,212,2,197,2,196,2,205,2,204,2,210,2,209,2,208,2,207,2,206,2,203,2,202,2,201,2,194,2,193,2,199,2,192,2,215,2,214,2,211,2,191,2,235,2,234,2,233,2,230,2,190,2,189,2,188,2,65,3,187,2,186,2,70,3,69,3,98,3,58,3,243,2,247,2,246,2,250,2,251,2,3,3,2,3,1,3,12,3,13,3,25,3,24,3,56,3,55,3,26,3,11,3,5,3,4,3,20,3,19,3,18,3,17,3,9,3,255,2,31,3,30,3,100,3,15,3,99,3,97,3,166,3,165,3,164,3,163,3,162,3,102,3,199,3,200,3,119,3,121,3,118,3,33,3,32,3,117,3,101,3,71,3,68,3,178,2,179,2,137,3,136,3,135,3,181,2,180,2,177,2,176,2,95,3,92,3,84,3,96,3,93,3,85,3,81,3,80,3,66,3,64,3,63,3,59,3,67,3,248,2,244,2,57,3,253,2,252,2,185,2,184,2,182,2,166,2,165,2,162,2,155,2,153,2,152,2,154,2,150,2,148,2,147,2,146,2,145,2,144,2,172,2,171,2,170,2,142,2,139,2,138,2,134,2,133,2,131,2,0,0,0,0,19,22,22,23,1,24,26,15,27,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,108,109,110,27,28,23,50,51,80,81,82,83,122,85,86,87,88,89,90,91,92,93,94,95,22,70,23,71,72,73,74,75,76,77,78,79,80,81,82,83,122,85,86,87,88,89,90,91,92,93,94,95,19,97,91,92,93,94,95,26,85,86,87,88,89,90,91,92,93,94,95,27,28,97,98,99,122,211,102,103,104,79,19,50,51,19,122,59,55,113,224,225,226,89,90,91,92,93,94,95,23,27,28,26,71,72,73,74,75,76,77,78,79,80,81,82,83,51,85,86,87,88,89,90,91,92,93,94,95,19,132,133,58,89,90,21,108,109,110,27,28,97,98,33,100,7,8,119,120,22,19,107,42,109,27,28,27,28,95,28,50,51,99,100,101,102,103,104,105,27,28,97,98,107,152,112,132,133,112,65,69,71,72,73,74,75,76,77,78,79,80,81,82,83,11,85,86,87,88,89,90,91,92,93,94,95,19,101,97,97,98,24,101,122,157,12,99,103,112,102,103,104,152,22,97,98,97,98,27,28,113,27,29,91,164,165,124,50,51,97,98,219,59,132,133,134,22,23,45,66,47,212,213,124,140,132,133,19,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,164,165,27,28,230,50,51,233,108,109,110,70,16,59,23,97,98,26,97,22,66,185,12,187,27,28,71,72,73,74,75,76,77,78,79,80,81,82,83,29,85,86,87,88,89,90,91,92,93,94,95,19,22,148,149,45,23,47,62,154,64,156,108,109,110,37,69,23,163,59,26,26,97,98,144,145,146,147,152,200,52,23,50,51,26,22,89,90,60,210,7,8,9,138,97,22,23,26,101,26,174,175,197,71,72,73,74,75,76,77,78,79,80,81,82,83,16,85,86,87,88,89,90,91,92,93,94,95,19,132,133,134,23,152,208,209,140,152,152,111,195,196,98,70,163,160,152,23,22,164,165,246,207,27,152,174,175,171,172,50,51,137,62,139,64,171,172,222,124,27,138,24,163,89,90,130,174,175,197,163,71,72,73,74,75,76,77,78,79,80,81,82,83,22,85,86,87,88,89,90,91,92,93,94,95,19,197,181,182,23,208,209,152,197,26,189,132,133,232,224,225,226,152,97,91,26,232,116,212,213,152,222,121,152,174,175,50,51,243,97,22,23,22,234,174,175,177,23,239,116,163,177,174,175,121,174,175,71,72,73,74,75,76,77,78,79,80,81,82,83,24,85,86,87,88,89,90,91,92,93,94,95,19,23,197,11,23,227,70,208,220,152,31,224,225,226,35,98,224,225,226,108,109,110,115,152,117,118,27,222,49,123,24,50,51,27,0,1,2,224,225,226,166,124,168,169,239,174,175,170,171,172,22,194,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,19,22,208,24,23,195,196,170,171,172,174,175,152,26,152,152,152,207,152,97,152,23,152,51,244,152,97,152,247,248,23,50,51,26,174,175,174,175,174,175,174,175,174,175,174,175,23,174,175,174,175,188,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,19,152,107,152,33,24,152,100,101,27,174,175,152,42,152,23,152,26,152,23,152,26,152,174,175,174,175,152,174,175,23,50,51,26,174,175,174,175,174,175,174,175,174,175,174,175,163,119,120,174,175,19,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,66,152,97,197,23,50,51,26,53,23,174,175,26,23,23,23,26,26,26,36,106,146,147,174,175,19,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,152,196,119,120,19,50,51,168,169,26,174,175,207,28,152,249,250,152,163,163,163,163,174,175,163,19,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,152,197,197,197,197,50,51,197,194,36,174,175,191,192,152,191,192,163,152,66,124,152,174,175,152,19,71,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,197,152,100,188,152,50,51,152,152,188,174,175,252,152,94,95,152,152,152,1,2,152,152,174,175,19,152,72,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,152,188,188,22,194,50,51,240,173,194,174,175,252,194,152,36,181,28,152,23,219,122,174,175,219,221,152,152,73,74,75,76,77,78,79,80,81,82,83,152,85,86,87,88,89,90,91,92,93,94,95,19,20,152,22,23,194,152,240,27,28,174,175,240,19,20,26,22,194,194,38,22,27,28,152,23,22,152,116,174,175,152,23,38,152,23,152,221,152,57,152,23,163,50,51,194,174,175,66,174,175,69,57,174,175,40,174,175,174,175,174,175,174,175,69,22,53,74,75,30,53,89,90,22,22,152,197,23,96,97,98,22,152,101,89,90,91,208,209,152,53,96,97,98,101,22,101,174,175,152,19,20,105,22,174,175,112,19,27,28,20,174,175,24,132,133,134,135,136,38,44,174,175,107,61,54,26,132,133,134,135,136,54,107,22,5,140,1,57,36,111,122,28,79,79,131,123,66,19,20,69,22,1,16,20,125,27,28,123,111,120,23,131,23,16,68,142,38,15,22,89,90,3,167,4,248,251,96,97,98,180,180,101,251,151,6,57,151,13,151,26,25,151,161,202,153,162,153,69,130,128,203,19,20,127,22,126,204,129,22,27,28,205,132,133,134,135,136,89,90,231,38,95,137,179,96,97,98,206,179,101,122,107,159,159,125,231,216,228,107,57,184,217,216,176,217,176,48,106,18,184,158,69,159,158,46,71,237,176,176,176,132,133,134,135,136,217,176,137,216,178,158,89,90,179,176,159,179,159,96,97,98,159,159,101,5,158,202,22,18,10,11,12,13,14,190,238,17,190,158,193], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([41,159,202,193,159,202,245,193,193,223,190,32,159,34,132,133,134,135,136,159,39,155,43,150,223,177,201,178,177,186,66,199,177,152,253,56,215,152,182,152,202,152,63,152,152,66,67,242,229,152,174,152,152,152,152,152,152,152,199,242,202,152,198,152,152,152,183,192,152,215,152,183,215,183,152,241,214,152,211,152,152,211,211,152,152,241,152,152,152,152,152,152,152,114,152,152,235,152,152,152,174,187,95,174,253,253,253,253,236,253,253,253,253,253,253,253,253,253,253,253,141,0,0,0,0,0,0,0,0,0,27,27,27,27,0,27,27,27,0,27,27,27,27,0,0,0,27,0,0,27,0,0,0,27,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,100,97,116,97,98,97,115,101,32,115,99,104,101,109,97,32,105,115,32,108,111,99,107,101,100,58,32,37,115,0,0,0,115,116,97,116,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,56,121,0,0,64,121,0,0,72,121,0,0,80,121,0,0,88,121,0,0,96,121,0,0,104,121,0,0,112,121,0,0,120,121,0,0,136,121,0,0,48,84,0,0,144,121,0,0,97,100,100,114,0,0,0,0,111,112,99,111,100,101,0,0,112,49,0,0,0,0,0,0,112,50,0,0,0,0,0,0,112,51,0,0,0,0,0,0,112,52,0,0,0,0,0,0,112,53,0,0,0,0,0,0,99,111,109,109,101,110,116,0,115,101,108,101,99,116,105,100,0,0,0,0,0,0,0,0,111,114,100,101,114,0,0,0,100,101,116,97,105,108,0,0,117,110,111,112,101,110,101,100,0,0,0,0,0,0,0,0,110,111,32,115,117,99,104,32,118,105,101,119,0,0,0,0,110,111,32,115,117,99,104,32,116,97,98,108,101,0,0,0,98,105,110,100,32,111,110,32,97,32,98,117,115,121,32,112,114,101,112,97,114,101,100,32,115,116,97,116,101,109,101,110,116,58,32,91,37,115,93,0,0,0,0,0,192,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,40,122,0,0,56,122,0,0,64,122,0,0,72,122,0,0,78,79,84,32,78,85,76,76,0,0,0,0,0,0,0,0,85,78,73,81,85,69,0,0,67,72,69,67,75,0,0,0,70,79,82,69,73,71,78,32,75,69,89,0,0,0,0,0,97,98,111,114,116,32,97,116,32,37,100,32,105,110,32,91,37,115,93,58,32,37,115,0,37,115,32,99,111,110,115,116,114,97,105,110,116,32,102,97,105,108,101,100,58,32,37,115,0,0,0,0,0,0,0,0,37,115,32,99,111,110,115,116,114,97,105,110,116,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,1,2,0,2,2,0,0,0,0,0,0,0,0,1,2,1,1,1,2,1,2,0,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,32,115,97,118,101,112,111,105,110,116,32,45,32,83,81,76,32,115,116,97,116,101,109,101,110,116,115,32,105,110,32,112,114,111,103,114,101,115,115,0,0,0,0,0,0,110,111,32,115,117,99,104,32,115,97,118,101,112,111,105,110,116,58,32,37,115,0,0,0,99,97,110,110,111,116,32,114,101,108,101,97,115,101,32,115,97,118,101,112,111,105,110,116,32,45,32,83,81,76,32,115,116,97,116,101,109,101,110,116,115,32,105,110,32,112,114,111,103,114,101,115,115,0,0,0,99,97,110,110,111,116,32,99,111,109,109,105,116,32,116,114,97,110,115,97,99,116,105,111,110,32,45,32,83,81,76,32,115,116,97,116,101,109,101,110,116,115,32,105,110,32,112,114,111,103,114,101,115,115,0,0,99,97,110,110,111,116,32,115,116,97,114,116,32,97,32,116,114,97,110,115,97,99,116,105,111,110,32,119,105,116,104,105,110,32,97,32,116,114,97,110,115,97,99,116,105,111,110,0,99,97,110,110,111,116,32,114,111,108,108,98,97,99,107,32,45,32,110,111,32,116,114,97,110,115,97,99,116,105,111,110,32,105,115,32,97,99,116,105,118,101,0,0,0,0,0,0,99,97,110,110,111,116,32,99,111,109,109,105,116,32,45,32,110,111,32,116,114,97,110,115,97,99,116,105,111,110,32,105,115,32,97,99,116,105,118,101,0,0,0,0,0,0,0,0,83,69,76,69,67,84,32,110,97,109,101,44,32,114,111,111,116,112,97,103,101,44,32,115,113,108,32,70,82,79,77,32,39,37,113,39,46,37,115,32,87,72,69,82,69,32,37,115,32,79,82,68,69,82,32,66,89,32,114,111,119,105,100,0,116,111,111,32,109,97,110,121,32,108,101,118,101,108,115,32,111,102,32,116,114,105,103,103,101,114,32,114,101,99,117,114,115,105,111,110,0,0,0,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,37,115,32,119,97,108,32,109,111,100,101,32,102,114,111,109,32,119,105,116,104,105,110,32,97,32,116,114,97,110,115,97,99,116,105,111,110,0,0,0,0,0,105,110,116,111,0,0,0,0,111,117,116,32,111,102,0,0,100,97,116,97,98,97,115,101,32,116,97,98,108,101,32,105,115,32,108,111,99,107,101,100,58,32,37,115,0,0,0,0,115,116,97,116,101,109,101,110,116,32,97,98,111,114,116,115,32,97,116,32,37,100,58,32,91,37,115,93,32,37,115,0,45,45,32,0,0,0,0,0,39,37,46,42,113,39,0,0,122,101,114,111,98,108,111,98,40,37,100,41,0,0,0,0,120,39,0,0,0,0,0,0,37,48,50,120,0,0,0,0,39,0,0,0,0,0,0,0,99,97,110,110,111,116,32,86,65,67,85,85,77,32,102,114,111,109,32,119,105,116,104,105,110,32,97,32,116,114,97,110,115,97,99,116,105,111,110,0,99,97,110,110,111,116,32,86,65,67,85,85,77,32,45,32,83,81,76,32,115,116,97,116,101,109,101,110,116,115,32,105,110,32,112,114,111,103,114,101,115,115,0,0,0,0,0,0,65,84,84,65,67,72,32,39,58,109,101,109,111,114,121,58,39,32,65,83,32,118,97,99,117,117,109,95,100,98,59,0,65,84,84,65,67,72,32,39,39,32,65,83,32,118,97,99,117,117,109,95,100,98,59,0,80,82,65,71,77,65,32,118,97,99,117,117,109,95,100,98,46,115,121,110,99,104,114,111,110,111,117,115,61,79,70,70,0,0,0,0,0,0,0,0,66,69,71,73,78,59,0,0,83,69,76,69,67,84,32,39,67,82,69,65,84,69,32,84,65,66,76,69,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,115,117,98,115,116,114,40,115,113,108,44,49,52,41,32,32,32,70,82,79,77,32,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,116,121,112,101,61,39,116,97,98,108,101,39,32,65,78,68,32,110,97,109,101,33,61,39,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,39,32,32,32,65,78,68,32,99,111,97,108,101,115,99,101,40,114,111,111,116,112,97,103,101,44,49,41,62,48,0,0,0,0,0,83,69,76,69,67,84,32,39,67,82,69,65,84,69,32,73,78,68,69,88,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,115,117,98,115,116,114,40,115,113,108,44,49,52,41,32,32,70,82,79,77,32,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,115,113,108,32,76,73,75,69,32,39,67,82,69,65,84,69,32,73,78,68,69,88,32,37,39,32,0,83,69,76,69,67,84,32,39,67,82,69,65,84,69,32,85,78,73,81,85,69,32,73,78,68,69,88,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,115,117,98,115,116,114,40,115,113,108,44,50,49,41,32,32,32,70,82,79,77,32,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,115,113,108,32,76,73,75,69,32,39,67,82,69,65,84,69,32,85,78,73,81,85,69,32,73,78,68,69,88,32,37,39,0,0,0,83,69,76,69,67,84,32,39,73,78,83,69,82,84,32,73,78,84,79,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,113,117,111,116,101,40,110,97,109,101,41,32,124,124,32,39,32,83,69,76,69,67,84,32,42,32,70,82,79,77,32,109,97,105,110,46,39,32,124,124,32,113,117,111,116,101,40,110,97,109,101,41,32,124,124,32,39,59,39,70,82,79,77,32,109,97,105,110,46,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,116,121,112,101,32,61,32,39,116,97,98,108,101,39,32,65,78,68,32,110,97,109,101,33,61,39,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,39,32,32,32,65,78,68,32,99,111,97,108,101,115,99,101,40,114,111,111,116,112,97,103,101,44,49,41,62,48,0,0,0,0,0,83,69,76,69,67,84,32,39,68,69,76,69,84,69,32,70,82,79,77,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,113,117,111,116,101,40,110,97,109,101,41,32,124,124,32,39,59,39,32,70,82,79,77,32,118,97,99,117,117,109,95,100,98,46,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,110,97,109,101,61,39,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,39,32,0,0,0,0,0,0,0,0,83,69,76,69,67,84,32,39,73,78,83,69,82,84,32,73,78,84,79,32,118,97,99,117,117,109,95,100,98,46,39,32,124,124,32,113,117,111,116,101,40,110,97,109,101,41,32,124,124,32,39,32,83,69,76,69,67,84,32,42,32,70,82,79,77,32,109,97,105,110,46,39,32,124,124,32,113,117,111,116,101,40,110,97,109,101,41,32,124,124,32,39,59,39,32,70,82,79,77,32,118,97,99,117,117,109,95,100,98,46,115,113,108,105,116,101,95,109,97,115,116,101,114,32,87,72,69,82,69,32,110,97,109,101,61,61,39,115,113,108,105,116,101,95,115,101,113,117,101,110,99,101,39,59,0,0,0,0,0,0,73,78,83,69,82,84,32,73,78,84,79,32,118,97,99,117,117,109,95,100,98,46,115,113,108,105,116,101,95,109,97,115,116,101,114,32,32,32,83,69,76,69,67,84,32,116,121,112,101,44,32,110,97,109,101,44,32,116,98,108,95,110,97,109,101,44,32,114,111,111,116,112,97,103,101,44,32,115,113,108,32,32,32,32,70,82,79,77,32,109,97,105,110,46,115,113,108,105,116,101,95,109,97,115,116,101,114,32,32,32,87,72,69,82,69,32,116,121,112,101,61,39,118,105,101,119,39,32,79,82,32,116,121,112,101,61,39,116,114,105,103,103,101,114,39,32,32,32,32,32,32,79,82,32,40,116,121,112,101,61,39,116,97,98,108,101,39,32,65,78,68,32,114,111,111,116,112,97,103,101,61,48,41,0,1,1,3,0,5,0,6,0,8,0,0,0,0,0,0,0,77,97,105,110,32,102,114,101,101,108,105,115,116,58,32,0,76,105,115,116,32,111,102,32,116,114,101,101,32,114,111,111,116,115,58,32,0,0,0,0,80,97,103,101,32,37,100,32,105,115,32,110,101,118,101,114,32,117,115,101,100,0,0,0,80,111,105,110,116,101,114,32,109,97,112,32,112,97,103,101,32,37,100,32,105,115,32,114,101,102,101,114,101,110,99,101,100,0,0,0,0,0,0,0,79,117,116,115,116,97,110,100,105,110,103,32,112,97,103,101,32,99,111,117,110,116,32,103,111,101,115,32,102,114,111,109,32,37,100,32,116,111,32,37,100,32,100,117,114,105,110,103,32,116,104,105,115,32,97,110,97,108,121,115,105,115,0,0,10,0,0,0,0,0,0,0,80,97,103,101,32,37,100,58,32,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,103,101,116,32,116,104,101,32,112,97,103,101,46,32,101,114,114,111,114,32,99,111,100,101,61,37,100,0,0,0,98,116,114,101,101,73,110,105,116,80,97,103,101,40,41,32,114,101,116,117,114,110,115,32,101,114,114,111,114,32,99,111,100,101,32,37,100,0,0,0,79,110,32,116,114,101,101,32,112,97,103,101,32,37,100,32,99,101,108,108,32,37,100,58,32,0,0,0,0,0,0,0,82,111,119,105,100,32,37,108,108,100,32,111,117,116,32,111,102,32,111,114,100,101,114,32,40,112,114,101,118,105,111,117,115,32,119,97,115,32,37,108,108,100,41,0,0,0,0,0,67,104,105,108,100,32,112,97,103,101,32,100,101,112,116,104,32,100,105,102,102,101,114,115,0,0,0,0,0,0,0,0,79,110,32,112,97,103,101,32,37,100,32,97,116,32,114,105,103,104,116,32,99,104,105,108,100,58,32,0,0,0,0,0,82,111,119,105,100,32,37,108,108,100,32,111,117,116,32,111,102,32,111,114,100,101,114,32,40,109,97,120,32,108,97,114,103,101,114,32,116,104,97,110,32,112,97,114,101,110,116,32,109,105,110,32,111,102,32,37,108,108,100,41,0,0,0,0,82,111,119,105,100,32,37,108,108,100,32,111,117,116,32,111,102,32,111,114,100,101,114,32,40,109,105,110,32,108,101,115,115,32,116,104,97,110,32,112,97,114,101,110,116,32,109,105,110,32,111,102,32,37,108,108,100,41,0,0,0,0,0,0,82,111,119,105,100,32,37,108,108,100,32,111,117,116,32,111,102,32,111,114,100,101,114,32,40,109,97,120,32,108,97,114,103,101,114,32,116,104,97,110,32,112,97,114,101,110,116,32,109,97,120,32,111,102,32,37,108,108,100,41,0,0,0,0,82,111,119,105,100,32,37,108,108,100,32,111,117,116,32,111,102,32,111,114,100,101,114,32,40,109,105,110,32,108,101,115,115,32,116,104,97,110,32,112,97,114,101,110,116,32,109,97,120,32,111,102,32,37,108,108,100,41,0,0,0,0,0,0,67,111,114,114,117,112,116,105,111,110,32,100,101,116,101,99,116,101,100,32,105,110,32,99,101,108,108,32,37,100,32,111,110,32,112,97,103,101,32,37,100,0,0,0,0,0,0,0,77,117,108,116,105,112,108,101,32,117,115,101,115,32,102,111,114,32,98,121,116,101,32,37,100,32,111,102,32,112,97,103,101,32,37,100,0,0,0,0,70,114,97,103,109,101,110,116,97,116,105,111,110,32,111,102,32,37,100,32,98,121,116,101,115,32,114,101,112,111,114,116,101,100,32,97,115,32,37,100,32,111,110,32,112,97,103,101,32,37,100,0,0,0,0,0,105,110,118,97,108,105,100,32,112,97,103,101,32,110,117,109,98,101,114,32,37,100,0,0,50,110,100,32,114,101,102,101,114,101,110,99,101,32,116,111,32,112,97,103,101,32,37,100,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,112,116,114,109,97,112,32,107,101,121,61,37,100,0,0,0,0,66,97,100,32,112,116,114,32,109,97,112,32,101,110,116,114,121,32,107,101,121,61,37,100,32,101,120,112,101,99,116,101,100,61,40,37,100,44,37,100,41,32,103,111,116,61,40,37,100,44,37,100,41,0,0,0,37,100,32,111,102,32,37,100,32,112,97,103,101,115,32,109,105,115,115,105,110,103,32,102,114,111,109,32,111,118,101,114,102,108,111,119,32,108,105,115,116,32,115,116,97,114,116,105,110,103,32,97,116,32,37,100,0,0,0,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,103,101,116,32,112,97,103,101,32,37,100,0,0,0,102,114,101,101,108,105,115,116,32,108,101,97,102,32,99,111,117,110,116,32,116,111,111,32,98,105,103,32,111,110,32,112,97,103,101,32,37,100,0,0,83,81,76,105,116,101,32,102,111,114,109,97,116,32,51,0,37,115,45,109,106,88,88,88,88,88,88,57,88,88,122,0,77,74,32,100,101,108,101,116,101,58,32,37,115,0,0,0,77,74,32,99,111,108,108,105,100,101,58,32,37,115,0,0,45,109,106,37,48,54,88,57,37,48,50,88,0,0,0,0,37,46,50,120,0,0,0,0,107,40,37,100,0,0,0,0,110,105,108,0,0,0,0,0,66,0,0,0,0,0,0,0,40,37,46,50,48,115,41,0,37,115,40,37,100,41,0,0,37,100,0,0,0,0,0,0,40,98,108,111,98,41,0,0,118,116,97,98,58,37,112,58,37,112,0,0,0,0,0,0,105,110,116,97,114,114,97,121,0,0,0,0,0,0,0,0,112,114,111,103,114,97,109,0,208,74,0,0,144,137,0,0,160,137,0,0,176,137,0,0,192,137,0,0,208,137,0,0,224,137,0,0,240,137,0,0,0,138,0,0,8,138,0,0,16,138,0,0,24,138,0,0,40,138,0,0,56,138,0,0,64,138,0,0,72,138,0,0,80,138,0,0,88,138,0,0,96,138,0,0,104,138,0,0,112,138,0,0,128,138,0,0,144,138,0,0,152,138,0,0,168,138,0,0,176,138,0,0,184,138,0,0,192,138,0,0,200,138,0,0,208,138,0,0,224,138,0,0,232,138,0,0,248,138,0,0,0,139,0,0,8,139,0,0,16,139,0,0,32,139,0,0,40,139,0,0,48,139,0,0,64,139,0,0,80,139,0,0,96,139,0,0,104,139,0,0,112,139,0,0,120,139,0,0,128,139,0,0,136,139,0,0,144,139,0,0,160,139,0,0,176,139,0,0,184,139,0,0,200,139,0,0,216,139,0,0,232,139,0,0,248,139,0,0,8,140,0,0,24,140,0,0,40,140,0,0,56,140,0,0,64,140,0,0,72,140,0,0,80,140,0,0,88,140,0,0,96,140,0,0,104,140,0,0,120,140,0,0,136,140,0,0,144,140,0,0,160,140,0,0,176,140,0,0,192,140,0,0,200,140,0,0,208,140,0,0,216,140,0,0,232,140,0,0,240,140,0,0,0,141,0,0,8,141,0,0,16,141,0,0,24,141,0,0,32,141,0,0,40,141,0,0,48,141,0,0,56,141,0,0,64,141,0,0,80,141,0,0,88,141,0,0,96,141,0,0,112,141,0,0,128,141,0,0,136,141,0,0,152,141,0,0,168,141,0,0,176,141,0,0,192,141,0,0,200,141,0,0,216,141,0,0,224,141,0,0,232,141,0,0,240,141,0,0,248,141,0,0,0,142,0,0,8,142,0,0,16,142,0,0,32,142,0,0,40,142,0,0,48,142,0,0,64,142,0,0,80,142,0,0,96,142,0,0,112,142,0,0,120,142,0,0,128,142,0,0,136,142,0,0,144,142,0,0,152,142,0,0,160,142,0,0,176,142,0,0,192,142,0,0,208,142,0,0,224,142,0,0,240,142,0,0,0,143,0,0,16,143,0,0,32,143,0,0,48,143,0,0,64,143,0,0,80,143,0,0,88,143,0,0,96,143,0,0,112,143,0,0,128,143,0,0,136,143,0,0,144,143,0,0,152,143,0,0,160,143,0,0,168,143,0,0,184,143,0,0,200,143,0,0,208,143,0,0,224,143,0,0,232,143,0,0,240,143,0,0,0,144,0,0,8,144,0,0,16,144,0,0,32,144,0,0,40,144,0,0,48,144,0,0,56,144,0,0,64,144,0,0,72,144,0,0,80,144,0,0,96,144,0,0,112,144,0,0,120,144,0,0,128,144,0,0,0,0,0,0,70,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,83,97,118,101,112,111,105,110,116,0,0,0,0,0,0,0,65,117,116,111,67,111,109,109,105,116,0,0,0,0,0,0,84,114,97,110,115,97,99,116,105,111,110,0,0,0,0,0,83,111,114,116,101,114,78,101,120,116,0,0,0,0,0,0,80,114,101,118,73,102,79,112,101,110,0,0,0,0,0,0,78,101,120,116,73,102,79,112,101,110,0,0,0,0,0,0,80,114,101,118,0,0,0,0,78,101,120,116,0,0,0,0,65,103,103,83,116,101,112,0,67,104,101,99,107,112,111,105,110,116,0,0,0,0,0,0,74,111,117,114,110,97,108,77,111,100,101,0,0,0,0,0,86,97,99,117,117,109,0,0,86,70,105,108,116,101,114,0,86,85,112,100,97,116,101,0,71,111,116,111,0,0,0,0,71,111,115,117,98,0,0,0,82,101,116,117,114,110,0,0,78,111,116,0,0,0,0,0,73,110,105,116,67,111,114,111,117,116,105,110,101,0,0,0,69,110,100,67,111,114,111,117,116,105,110,101,0,0,0,0,89,105,101,108,100,0,0,0,72,97,108,116,73,102,78,117,108,108,0,0,0,0,0,0,72,97,108,116,0,0,0,0,73,110,116,101,103,101,114,0,73,110,116,54,52,0,0,0,83,116,114,105,110,103,0,0,78,117,108,108,0,0,0,0,83,111,102,116,78,117,108,108,0,0,0,0,0,0,0,0,66,108,111,98,0,0,0,0,86,97,114,105,97,98,108,101,0,0,0,0,0,0,0,0,77,111,118,101,0,0,0,0,67,111,112,121,0,0,0,0,83,67,111,112,121,0,0,0,82,101,115,117,108,116,82,111,119,0,0,0,0,0,0,0,67,111,108,108,83,101,113,0,65,100,100,73,109,109,0,0,77,117,115,116,66,101,73,110,116,0,0,0,0,0,0,0,82,101,97,108,65,102,102,105,110,105,116,121,0,0,0,0,80,101,114,109,117,116,97,116,105,111,110,0,0,0,0,0,67,111,109,112,97,114,101,0,74,117,109,112,0,0,0,0,79,110,99,101,0,0,0,0,73,102,0,0,0,0,0,0,73,102,78,111,116,0,0,0,67,111,108,117,109,110,0,0,65,102,102,105,110,105,116,121,0,0,0,0,0,0,0,0,77,97,107,101,82,101,99,111,114,100,0,0,0,0,0,0,67,111,117,110,116,0,0,0,82,101,97,100,67,111,111,107,105,101,0,0,0,0,0,0,83,101,116,67,111,111,107,105,101,0,0,0,0,0,0,0,79,112,101,110,82,101,97,100,0,0,0,0,0,0,0,0,79,112,101,110,87,114,105,116,101,0,0,0,0,0,0,0,79,112,101,110,65,117,116,111,105,110,100,101,120,0,0,0,79,112,101,110,69,112,104,101,109,101,114,97,108,0,0,0,83,111,114,116,101,114,79,112,101,110,0,0,0,0,0,0,79,112,101,110,80,115,101,117,100,111,0,0,0,0,0,0,67,108,111,115,101,0,0,0,83,101,101,107,76,84,0,0,83,101,101,107,76,69,0,0,83,101,101,107,71,69,0,0,83,101,101,107,71,84,0,0,83,101,101,107,0,0,0,0,78,111,67,111,110,102,108,105,99,116,0,0,0,0,0,0,78,111,116,70,111,117,110,100,0,0,0,0,0,0,0,0,70,111,117,110,100,0,0,0,78,111,116,69,120,105,115,116,115,0,0,0,0,0,0,0,83,101,113,117,101,110,99,101,0,0,0,0,0,0,0,0,78,101,119,82,111,119,105,100,0,0,0,0,0,0,0,0,73,110,115,101,114,116,0,0,79,114,0,0,0,0,0,0,65,110,100,0,0,0,0,0,73,110,115,101,114,116,73,110,116,0,0,0,0,0,0,0,68,101,108,101,116,101,0,0,82,101,115,101,116,67,111,117,110,116,0,0,0,0,0,0,73,115,78,117,108,108,0,0,78,111,116,78,117,108,108,0,78,101,0,0,0,0,0,0,69,113,0,0,0,0,0,0,71,116,0,0,0,0,0,0,76,101,0,0,0,0,0,0,76,116,0,0,0,0,0,0,71,101,0,0,0,0,0,0,83,111,114,116,101,114,67,111,109,112,97,114,101,0,0,0,66,105,116,65,110,100,0,0,66,105,116,79,114,0,0,0,83,104,105,102,116,76,101,102,116,0,0,0,0,0,0,0,83,104,105,102,116,82,105,103,104,116,0,0,0,0,0,0,65,100,100,0,0,0,0,0,83,117,98,116,114,97,99,116,0,0,0,0,0,0,0,0,77,117,108,116,105,112,108,121,0,0,0,0,0,0,0,0,68,105,118,105,100,101,0,0,82,101,109,97,105,110,100,101,114,0,0,0,0,0,0,0,67,111,110,99,97,116,0,0,83,111,114,116,101,114,68,97,116,97,0,0,0,0,0,0,66,105,116,78,111,116,0,0,83,116,114,105,110,103,56,0,82,111,119,75,101,121,0,0,82,111,119,68,97,116,97,0,82,111,119,105,100,0,0,0,78,117,108,108,82,111,119,0,76,97,115,116,0,0,0,0,83,111,114,116,101,114,83,111,114,116,0,0,0,0,0,0,83,111,114,116,0,0,0,0,82,101,119,105,110,100,0,0,83,111,114,116,101,114,73,110,115,101,114,116,0,0,0,0,73,100,120,73,110,115,101,114,116,0,0,0,0,0,0,0,73,100,120,68,101,108,101,116,101,0,0,0,0,0,0,0,73,100,120,82,111,119,105,100,0,0,0,0,0,0,0,0,73,100,120,76,69,0,0,0,73,100,120,71,84,0,0,0,73,100,120,76,84,0,0,0,73,100,120,71,69,0,0,0,68,101,115,116,114,111,121,0,67,108,101,97,114,0,0,0,67,114,101,97,116,101,73,110,100,101,120,0,0,0,0,0,67,114,101,97,116,101,84,97,98,108,101,0,0,0,0,0,80,97,114,115,101,83,99,104,101,109,97,0,0,0,0,0,76,111,97,100,65,110,97,108,121,115,105,115,0,0,0,0,68,114,111,112,84,97,98,108,101,0,0,0,0,0,0,0,68,114,111,112,73,110,100,101,120,0,0,0,0,0,0,0,68,114,111,112,84,114,105,103,103,101,114,0,0,0,0,0,73,110,116,101,103,114,105,116,121,67,107,0,0,0,0,0,82,111,119,83,101,116,65,100,100,0,0,0,0,0,0,0,82,111,119,83,101,116,82,101,97,100,0,0,0,0,0,0,82,111,119,83,101,116,84,101,115,116,0,0,0,0,0,0,80,114,111,103,114,97,109,0,80,97,114,97,109,0,0,0,70,107,67,111,117,110,116,101,114,0,0,0,0,0,0,0,70,107,73,102,90,101,114,111,0,0,0,0,0,0,0,0,77,101,109,77,97,120,0,0,73,102,80,111,115,0,0,0,82,101,97,108,0,0,0,0,73,102,78,101,103,0,0,0,73,102,90,101,114,111,0,0,65,103,103,70,105,110,97,108,0,0,0,0,0,0,0,0,73,110,99,114,86,97,99,117,117,109,0,0,0,0,0,0,69,120,112,105,114,101,0,0,84,97,98,108,101,76,111,99,107,0,0,0,0,0,0,0,86,66,101,103,105,110,0,0,86,67,114,101,97,116,101,0,86,68,101,115,116,114,111,121,0,0,0,0,0,0,0,0,84,111,84,101,120,116,0,0,84,111,66,108,111,98,0,0,84,111,78,117,109,101,114,105,99,0,0,0,0,0,0,0,84,111,73,110,116,0,0,0,84,111,82,101,97,108,0,0,86,79,112,101,110,0,0,0,86,67,111,108,117,109,110,0,86,78,101,120,116,0,0,0,86,82,101,110,97,109,101,0,80,97,103,101,99,111,117,110,116,0,0,0,0,0,0,0,77,97,120,80,103,99,110,116,0,0,0,0,0,0,0,0,73,110,105,116,0,0,0,0,78,111,111,112,0,0,0,0,69,120,112,108,97,105,110,0,65,80,73,32,99,97,108,108,101,100,32,119,105,116,104,32,78,85,76,76,32,112,114,101,112,97,114,101,100,32,115,116,97,116,101,109,101,110,116,0,65,80,73,32,99,97,108,108,101,100,32,119,105,116,104,32,102,105,110,97,108,105,122,101,100,32,112,114,101,112,97,114,101,100,32,115,116,97,116,101,109,101,110,116,0,0,0,0,64,32,32,0,0,0,0,0,1,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,128,146,0,0,118,0,0,0,0,0,0,0,88,146,0,0,119,0,0,0,0,0,0,0,136,19,0,0,120,0,0,0,0,0,0,0,136,146,0,0,121,0,0,0,0,0,0,0,144,146,0,0,122,0,0,0,0,0,0,0,152,146,0,0,123,0,0,0,0,0,0,0,160,146,0,0,124,0,0,0,0,0,0,0,176,146,0,0,125,0,0,0,0,0,0,0,184,146,0,0,126,0,0,0,0,0,0,0,192,146,0,0,0,0,0,0,0,0,0,0,200,146,0,0,0,0,0,0,0,0,0,0,208,146,0,0,127,0,0,0,0,0,0,0,216,146,0,0,0,0,0,0,0,0,0,0,224,146,0,0,0,0,0,0,0,0,0,0,240,146,0,0,128,0,0,0,0,0,0,0,248,146,0,0,0,0,0,0,0,0,0,0,8,147,0,0,129,0,0,0,0,0,0,0,16,147,0,0,130,0,0,0,0,0,0,0,32,147,0,0,131,0,0,0,0,0,0,0,40,147,0,0,132,0,0,0,0,0,0,0,48,147,0,0,133,0,0,0,0,0,0,0,56,147,0,0,134,0,0,0,0,0,0,0,64,147,0,0,135,0,0,0,0,0,0,0,72,147,0,0,0,0,0,0,0,0,0,0,99,108,111,115,101,0,0,0,111,115,95,117,110,105,120,46,99,58,37,100,58,32,40,37,100,41,32,37,115,40,37,115,41,32,45,32,37,115,0,0,111,112,101,110,0,0,0,0,103,101,116,99,119,100,0,0,115,116,97,116,0,0,0,0,102,115,116,97,116,0,0,0,102,116,114,117,110,99,97,116,101,0,0,0,0,0,0,0,102,99,110,116,108,0,0,0,114,101,97,100,0,0,0,0,112,114,101,97,100,0,0,0,112,114,101,97,100,54,52,0,119,114,105,116,101,0,0,0,112,119,114,105,116,101,0,0,112,119,114,105,116,101,54,52,0,0,0,0,0,0,0,0,102,99,104,109,111,100,0,0,102,97,108,108,111,99,97,116,101,0,0,0,0,0,0,0,117,110,108,105,110,107,0,0,111,112,101,110,68,105,114,101,99,116,111,114,121,0,0,0,109,107,100,105,114,0,0,0,114,109,100,105,114,0,0,0,102,99,104,111,119,110,0,0,109,109,97,112,0,0,0,0,109,117,110,109,97,112,0,0,109,114,101,109,97,112,0,0,97,116,116,101,109,112,116,32,116,111,32,111,112,101,110,32,34,37,115,34,32,97,115,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,37,100,0,0,0,0,0,0,47,100,101,118,47,110,117,108,108,0,0,0,0,0,0,0,37,115,45,115,104,109,0,0,114,101,97,100,111,110,108,121,95,115,104,109,0,0,0,0,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,48,49,50,51,52,53,54,55,56,57,0,0,37,115,47,101,116,105,108,113,115,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,148,0,0,40,148,0,0,56,148,0,0,0,0,0,0,0,0,0,0,47,118,97,114,47,116,109,112,0,0,0,0,0,0,0,0,47,117,115,114,47,116,109,112,0,0,0,0,0,0,0,0,47,116,109,112,0,0,0,0,83,81,76,73,84,69,95,84,77,80,68,73,82,0,0,0,84,77,80,68,73,82,0,0,102,117,108,108,95,102,115,121,110,99,0,0,0,0,0,0,1,0,0,0,136,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,100,101,118,47,117,114,97,110,100,111,109,0,0,0,0,47,37,115,0,0,0,0,0,102,115,121,110,99,0,0,0,112,115,111,119,0,0,0,0,3,0,0,0,140,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,37,115,46,108,111,99,107,0,99,97,110,110,111,116,32,102,115,116,97,116,32,100,98,32,102,105,108,101,32,37,115,0,102,105,108,101,32,117,110,108,105,110,107,101,100,32,119,104,105,108,101,32,111,112,101,110,58,32,37,115,0,0,0,0,109,117,108,116,105,112,108,101,32,108,105,110,107,115,32,116,111,32,102,105,108,101,58,32,37,115,0,0,0,0,0,0,102,105,108,101,32,114,101,110,97,109,101,100,32,119,104,105,108,101,32,111,112,101,110,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,100,10,1,1,0,0,115,0,4,6,0,0,103,0,1,4,30,0,122,0,4,7,0,0,113,0,4,10,0,0,81,0,4,11,0,0,119,0,4,15,0,0,99,0,0,9,0,0,111,8,0,1,0,2,117,10,0,1,0,0,120,16,0,1,16,1,88,16,0,1,0,4,102,0,1,2,0,0,101,0,1,3,30,0,69,0,1,3,14,0,71,0,1,4,14,0,105,10,1,1,0,0,110,0,0,5,0,0,37,0,0,8,0,0,112,16,0,14,0,1,84,0,2,12,0,0,83,0,2,13,0,0,114,10,3,16,0,0,0,0,0,0,0,0,116,104,115,116,110,100,114,100,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,0,0,0,0,0,0,0,45,120,48,0,88,48,0,0,78,97,78,0,0,0,0,0,45,73,110,102,0,0,0,0,43,73,110,102,0,0,0,0,73,110,102,0,0,0,0,0,40,78,85,76,76,41,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,68,73,83,65,66,76,69,95,76,70,83,0,0,0,0,0,73,78,84,54,52,95,84,89,80,69,0,0,0,0,0,0,79,77,73,84,95,76,79,65,68,95,69,88,84,69,78,83,73,79,78,0,0,0,0,0,83,89,83,84,69,77,95,77,65,76,76,79,67,0,0,0,84,72,82,69,65,68,83,65,70,69,61,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _DtoILow=true;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _SItoD=true;

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  var _DtoIHigh=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
        var start = window['performance']['now']();
        while (window['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _sleep(seconds) {
      // unsigned sleep(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sleep.html
      return _usleep(seconds * 1e6);
    }

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }

   
  Module["_strlen"] = _strlen;

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      if (amode & ~7) {
        // need a valid mode
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      }
      return 0;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _geteuid=_getgid;

  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      // remove a trailing slash, if one - /a/b/ has basename of '', but
      // we want to create b in the context of this function
      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _chmod(path, mode, dontResolveLastLink) {
      // int chmod(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chmod.html
      // NOTE: dontResolveLastLink is a shortcut for lchmod(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fchmod(fildes, mode) {
      // int fchmod(int fildes, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fchmod.html
      try {
        FS.fchmod(fildes, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas ||
                                  document['msPointerLockElement'] === canvas;
          }
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }

  function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream;
          try {
            newStream = FS.open(stream.path, stream.flags, 0, arg);
          } catch (e) {
            FS.handleFSError(e);
            return -1;
          }
          return newStream.fd;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.flags |= arg;
          return 0;
        case 12:
        case 12:
          var arg = HEAP32[((varargs)>>2)];
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        case 13:
        case 14:
        case 13:
        case 14:
          // Pretend that the locking is successful.
          return 0;
        case 8:
        case 9:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _BDtoIHigh=true;

  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  var _getpid=_getgid;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  function _chown(path, owner, group, dontResolveLastLink) {
      // int chown(const char *path, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chown.html
      // We don't support multiple users, so changing ownership makes no sense.
      // NOTE: The path argument may be a string, to simplify fchown().
      // NOTE: dontResolveLastLink is a shortcut for lchown(). It should never be
      //       used in client code.
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chown(path, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fchown(fildes, owner, group) {
      // int fchown(int fildes, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fchown.html
      try {
        FS.fchown(fildes, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _mmap(start, num, prot, flags, fd, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      var MAP_PRIVATE = 2;
      var ptr;
      var allocated = false;
  
      if (!_mmap.mappings) _mmap.mappings = {};
  
      if (fd == -1) {
        ptr = _malloc(num);
        if (!ptr) return -1;
        _memset(ptr, 0, num);
        allocated = true;
      } else {
        var info = FS.getStream(fd);
        if (!info) return -1;
        try {
          var res = FS.mmap(info, HEAPU8, start, num, offset, prot, flags);
          ptr = res.ptr;
          allocated = res.allocated;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }
  
      _mmap.mappings[ptr] = { malloc: ptr, num: num, allocated: allocated };
      return ptr;
    }

  
  function _truncate(path, length) {
      // int truncate(const char *path, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
      // NOTE: The path argument may be a string, to simplify ftruncate().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.truncate(path, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _ftruncate(fildes, length) {
      // int ftruncate(int fildes, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
      try {
        FS.ftruncate(fildes, length);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _utimes() { throw 'utimes not implemented' }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _getgid=env._getgid;
  var _sleep=env._sleep;
  var _send=env._send;
  var _getcwd=env._getcwd;
  var _chown=env._chown;
  var _lseek=env._lseek;
  var ___setErrNo=env.___setErrNo;
  var _access=env._access;
  var _fstat=env._fstat;
  var _chmod=env._chmod;
  var _rmdir=env._rmdir;
  var _truncate=env._truncate;
  var _usleep=env._usleep;
  var _utimes=env._utimes;
  var ___buildEnvironment=env.___buildEnvironment;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _fcntl=env._fcntl;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _unlink=env._unlink;
  var _sysconf=env._sysconf;
  var _fchmod=env._fchmod;
  var _close=env._close;
  var _ftruncate=env._ftruncate;
  var _gettimeofday=env._gettimeofday;
  var _munmap=env._munmap;
  var _pread=env._pread;
  var _getenv=env._getenv;
  var _write=env._write;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _fchown=env._fchown;
  var _read=env._read;
  var _abort=env._abort;
  var _time=env._time;
  var _mkport=env._mkport;
  var _strerror=env._strerror;
  var _mknod=env._mknod;
  var _mkdir=env._mkdir;
  var _mmap=env._mmap;
  var _localtime=env._localtime;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _sqlite3_compileoption_used($zOptName) {
 $zOptName = $zOptName|0;
 var $$0 = 0, $$zOptName = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_strnicmp($zOptName,16,7)|0);
 $1 = ($0|0)==(0);
 $2 = (($zOptName) + 7|0);
 $$zOptName = $1 ? $2 : $zOptName;
 $3 = (_sqlite3Strlen30($$zOptName)|0);
 $i$02 = 0;
 while(1) {
  $4 = (24 + ($i$02<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_sqlite3_strnicmp($$zOptName,$5,$3)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = (($5) + ($3)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = (48 + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    $$0 = 1;
    label = 5;
    break;
   }
  }
  $14 = (($i$02) + 1)|0;
  $15 = ($14|0)<(5);
  if ($15) {
   $i$02 = $14;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3_strnicmp($zLeft,$zRight,$N) {
 $zLeft = $zLeft|0;
 $zRight = $zRight|0;
 $N = $N|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$06 = 0, $b$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($N|0)>(0);
 if ($0) {
  $$in = $N;$a$06 = $zLeft;$b$07 = $zRight;
 } else {
  $26 = 0;
  STACKTOP = sp;return ($26|0);
 }
 while(1) {
  $1 = (($$in) + -1)|0;
  $2 = HEAP8[$a$06>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   break;
  }
  $4 = $2&255;
  $5 = (960 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = HEAP8[$b$07>>0]|0;
  $8 = $7&255;
  $9 = (960 + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($6<<24>>24)==($10<<24>>24);
  if (!($11)) {
   break;
  }
  $12 = (($a$06) + 1|0);
  $13 = (($b$07) + 1|0);
  $14 = ($1|0)>(0);
  if ($14) {
   $$in = $1;$a$06 = $12;$b$07 = $13;
  } else {
   $26 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($26|0);
 }
 $15 = ($$in|0)<(1);
 if ($15) {
  $26 = 0;
  STACKTOP = sp;return ($26|0);
 }
 $16 = $2&255;
 $17 = (960 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = HEAP8[$b$07>>0]|0;
 $21 = $20&255;
 $22 = (960 + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($19) - ($24))|0;
 $26 = $25;
 STACKTOP = sp;return ($26|0);
}
function _sqlite3Strlen30($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $z2$0 = $z;
 }
 while(1) {
  $1 = HEAP8[$z2$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  $3 = (($z2$0) + 1|0);
  if ($2) {
   break;
  } else {
   $z2$0 = $3;
  }
 }
 $4 = $z2$0;
 $5 = $z;
 $6 = (($4) - ($5))|0;
 $7 = $6 & 1073741823;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_compileoption_get($N) {
 $N = $N|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($N>>>0)<(5);
 if ($0) {
  $1 = (24 + ($N<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $$0 = $2;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_status($op,$pCurrent,$pHighwater,$resetFlag) {
 $op = $op|0;
 $pCurrent = $pCurrent|0;
 $pHighwater = $pHighwater|0;
 $resetFlag = $resetFlag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($op>>>0)>(9);
 if ($0) {
  _sqlite3MisuseError(14229);
  $$0 = 21;
 } else {
  $1 = (304 + ($op<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$pCurrent>>2] = $2;
  $3 = (344 + ($op<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$pHighwater>>2] = $4;
  $5 = ($resetFlag|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$1>>2]|0;
   HEAP32[$3>>2] = $6;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3MisuseError($lineno) {
 $lineno = $lineno|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $lineno;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = ((1768 + 20|0));
 _sqlite3_log(21,3488,$vararg_buffer);
 STACKTOP = sp;return;
}
function _sqlite3BtreeEnterAll($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($db) + 16|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($i$01<<4)|0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$6>>2]|0;
   $9 = (($6) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 4|0);
   HEAP32[$11>>2] = $8;
  }
  $12 = (($i$01) + 1)|0;
  $13 = ($12|0)<($1|0);
  if ($13) {
   $i$01 = $12;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3BtreePager($p$0$1$val$0$0$val) {
 $p$0$1$val$0$0$val = $p$0$1$val$0$0$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($p$0$1$val$0$0$val|0);
}
function _sqlite3MallocSize($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((384 + 48|0))>>2]|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255]($p)|0);
 STACKTOP = sp;return ($1|0);
}
function _sqlite3DeleteTrigger($db,$pTrigger) {
 $db = $db|0;
 $pTrigger = $pTrigger|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pTrigger|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pTrigger) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3DeleteTriggerStep($db,$2);
 $3 = HEAP32[$pTrigger>>2]|0;
 _sqlite3DbFree($db,$3);
 $4 = (($pTrigger) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _sqlite3DbFree($db,$5);
 $6 = (($pTrigger) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _sqlite3ExprDelete($db,$7);
 $8 = (($pTrigger) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _sqlite3IdListDelete($db,$9);
 _sqlite3DbFree($db,$pTrigger);
 STACKTOP = sp;return;
}
function _sqlite3DeleteTable($db,$pTable) {
 $db = $db|0;
 $pTable = $pTable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIndex$01 = 0, $pIndex$01$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pTable|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ($db|0)!=(0|0);
 if ($1) {
  $2 = (($db) + 512|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = (($pTable) + 40|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = (($6) + -1)<<16>>16;
  HEAP16[$5>>1] = $7;
  $8 = ($7<<16>>16)==(0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = (($pTable) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 L10: do {
  if (!($11)) {
   $12 = (($db) + 512|0);
   if ($1) {
    $pIndex$01$us = $10;
   } else {
    $pIndex$01 = $10;
    while(1) {
     $23 = (($pIndex$01) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = HEAP32[$pIndex$01>>2]|0;
     $26 = (($pIndex$01) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 24|0);
     $29 = (_sqlite3Strlen30($25)|0);
     (_sqlite3HashInsert($28,$25,$29,0)|0);
     _freeIndex(0,$pIndex$01);
     $30 = ($24|0)==(0|0);
     if ($30) {
      break L10;
     } else {
      $pIndex$01 = $24;
     }
    }
   }
   while(1) {
    $13 = (($pIndex$01$us) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$12>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = HEAP32[$pIndex$01$us>>2]|0;
     $18 = (($pIndex$01$us) + 24|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + 24|0);
     $21 = (_sqlite3Strlen30($17)|0);
     (_sqlite3HashInsert($20,$17,$21,0)|0);
    }
    _freeIndex($db,$pIndex$01$us);
    $22 = ($14|0)==(0|0);
    if ($22) {
     break;
    } else {
     $pIndex$01$us = $14;
    }
   }
  }
 } while(0);
 _sqlite3FkDelete($db,$pTable);
 _sqliteDeleteColumnNames($db,$pTable);
 $31 = HEAP32[$pTable>>2]|0;
 _sqlite3DbFree($db,$31);
 $32 = (($pTable) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 _sqlite3DbFree($db,$33);
 $34 = (($pTable) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 _sqlite3SelectDelete($db,$35);
 $36 = (($pTable) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 _sqlite3ExprListDelete($db,$37);
 _sqlite3VtabClear($db,$pTable);
 _sqlite3DbFree($db,$pTable);
 STACKTOP = sp;return;
}
function _sqlite3VdbeClearObject($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$02$in = 0;
 var $pSub$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 68|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 _releaseMemArray($1,$4);
 $5 = (($p) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($p) + 84|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 << 1;
 _releaseMemArray($6,$10);
 $11 = (($p) + 192|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $pSub$03 = $12;
  while(1) {
   $14 = (($pSub$03) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$pSub$03>>2]|0;
   $17 = (($pSub$03) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   _vdbeFreeOpArray($db,$16,$18);
   _sqlite3DbFree($db,$pSub$03);
   $19 = ($15|0)==(0|0);
   if ($19) {
    break;
   } else {
    $pSub$03 = $15;
   }
  }
 }
 $20 = (($p) + 70|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)>(0);
 if ($22) {
  $23 = $21 << 16 >> 16;
  $24 = (($p) + 64|0);
  $i$02$in = $23;
  while(1) {
   $i$02 = (($i$02$in) + -1)|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($i$02<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   _sqlite3DbFree($db,$27);
   $28 = ($i$02|0)>(0);
   if ($28) {
    $i$02$in = $i$02;
   } else {
    break;
   }
  }
 }
 $29 = (($p) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($p) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _vdbeFreeOpArray($db,$30,$32);
 $33 = HEAP32[$5>>2]|0;
 _sqlite3DbFree($db,$33);
 $34 = (($p) + 168|0);
 $35 = HEAP32[$34>>2]|0;
 _sqlite3DbFree($db,$35);
 $36 = (($p) + 172|0);
 $37 = HEAP32[$36>>2]|0;
 _sqlite3DbFree($db,$37);
 STACKTOP = sp;return;
}
function _sqlite3DbFree($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ($db|0)==(0|0);
 if (!($1)) {
  $2 = (($db) + 512|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (_sqlite3DbMallocSize($db,$p)|0);
   $6 = HEAP32[$2>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5))|0;
   HEAP32[$6>>2] = $8;
   STACKTOP = sp;return;
  }
  $9 = (_isLookaside($db,$p)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (($db) + 264|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$p>>2] = $12;
   HEAP32[$11>>2] = $p;
   $13 = (($db) + 244|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + -1)|0;
   HEAP32[$13>>2] = $15;
   STACKTOP = sp;return;
  }
 }
 _sqlite3_free($p);
 STACKTOP = sp;return;
}
function _sqlite3_vfs_find($zVfs) {
 $zVfs = $zVfs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond2 = 0, $pVfs$0 = 0, $pVfs$01 = 0, $pVfs$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $pVfs$01 = HEAP32[648>>2]|0;
   $2 = ($pVfs$01|0)==(0|0);
   $3 = ($zVfs|0)==(0|0);
   $or$cond2 = $2 | $3;
   if ($or$cond2) {
    $$0 = $pVfs$01;
   } else {
    $pVfs$03 = $pVfs$01;
    while(1) {
     $6 = (($pVfs$03) + 16|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (_strcmp($zVfs,$7)|0);
     $9 = ($8|0)==(0);
     if ($9) {
      $$0 = $pVfs$03;
      break L1;
     }
     $4 = (($pVfs$03) + 12|0);
     $pVfs$0 = HEAP32[$4>>2]|0;
     $5 = ($pVfs$0|0)==(0|0);
     if ($5) {
      $$0 = 0;
      break;
     } else {
      $pVfs$03 = $pVfs$0;
     }
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_initialize() {
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $rc$310 = 0, $rc$4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[((384 + 224|0))>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[((384 + 232|0))>>2] = 1;
 $2 = HEAP32[((384 + 236|0))>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_sqlite3MallocInit()|0);
  $cond = ($4|0)==(0);
  if (!($cond)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[((384 + 236|0))>>2] = 1;
 $5 = HEAP32[((384 + 244|0))>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[((384 + 244|0))>>2] = (8);
 }
 $7 = HEAP32[((384 + 248|0))>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[((384 + 248|0))>>2] = $8;
 $9 = HEAP32[((384 + 224|0))>>2]|0;
 $10 = HEAP32[((384 + 228|0))>>2]|0;
 $11 = $10 | $9;
 $12 = ($11|0)==(0);
 if ($12) {
  HEAP32[((384 + 228|0))>>2] = 1;
  dest=1840+0|0; stop=dest+92|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  _sqlite3RegisterGlobalFunctions();
  $13 = HEAP32[((384 + 240|0))>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (_sqlite3PcacheInitialize()|0);
   $16 = ($15|0)==(0);
   if ($16) {
    label = 9;
   } else {
    $rc$310 = $15;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   HEAP32[((384 + 240|0))>>2] = 1;
   $17 = (_sqlite3OsInit()|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = HEAP32[((384 + 204|0))>>2]|0;
    $20 = HEAP32[((384 + 208|0))>>2]|0;
    $21 = HEAP32[((384 + 212|0))>>2]|0;
    _sqlite3PCacheBufferSetup($19,$20,$21);
    HEAP32[((384 + 224|0))>>2] = 1;
    $rc$310 = 0;
   } else {
    $rc$310 = $17;
   }
  }
  HEAP32[((384 + 228|0))>>2] = 0;
  $$pr = HEAP32[((384 + 248|0))>>2]|0;
  $23 = $$pr;$rc$4 = $rc$310;
 } else {
  $23 = $8;$rc$4 = 0;
 }
 $22 = (($23) + -1)|0;
 HEAP32[((384 + 248|0))>>2] = $22;
 $24 = ($23|0)<(2);
 if (!($24)) {
  $$0 = $rc$4;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[((384 + 244|0))>>2] = 0;
 $$0 = $rc$4;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_vfs_register($pVfs,$makeDflt) {
 $pVfs = $pVfs|0;
 $makeDflt = $makeDflt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _vfsUnlink($pVfs);
 $2 = ($makeDflt|0)!=(0);
 $3 = HEAP32[648>>2]|0;
 $4 = ($3|0)==(0|0);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $5 = (($pVfs) + 12|0);
  HEAP32[$5>>2] = $3;
  HEAP32[648>>2] = $pVfs;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = (($3) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($pVfs) + 12|0);
  HEAP32[$8>>2] = $7;
  $9 = HEAP32[648>>2]|0;
  $10 = (($9) + 12|0);
  HEAP32[$10>>2] = $pVfs;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vfsUnlink($pVfs) {
 $pVfs = $pVfs|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pVfs|0)==(0|0);
 do {
  if (!($0)) {
   $1 = HEAP32[648>>2]|0;
   $2 = ($1|0)==($pVfs|0);
   if ($2) {
    $3 = (($pVfs) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    HEAP32[648>>2] = $4;
    break;
   }
   $5 = ($1|0)==(0|0);
   if (!($5)) {
    $p$0 = $1;
    while(1) {
     $6 = (($p$0) + 12|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)!=($pVfs|0);
     $not$ = ($7|0)!=(0|0);
     $$ = $8 & $not$;
     if ($$) {
      $p$0 = $7;
     } else {
      break;
     }
    }
    $9 = ($7|0)==($pVfs|0);
    if ($9) {
     $10 = (($pVfs) + 12|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$6>>2] = $11;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sqlite3MemoryAlarm($xCallback,$pArg,$0,$1) {
 $xCallback = $xCallback|0;
 $pArg = $pArg|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[((656 + 16|0))>>2] = $xCallback;
 HEAP32[((656 + 20|0))>>2] = $pArg;
 $2 = ((656 + 8|0));
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = ($1|0)>(0);
 $7 = ($1|0)==(0);
 $8 = ($0>>>0)>(0);
 $9 = $7 & $8;
 $10 = $6 | $9;
 if (!($10)) {
  $20 = 0;
  $19 = $20&1;
  HEAP32[((656 + 36|0))>>2] = $19;
  STACKTOP = sp;return;
 }
 $11 = (_sqlite3StatusValue()|0);
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = ($13|0)>($1|0);
 $15 = ($13|0)==($1|0);
 $16 = ($11>>>0)>=($0>>>0);
 $17 = $15 & $16;
 $18 = $14 | $17;
 $20 = $18;
 $19 = $20&1;
 HEAP32[((656 + 36|0))>>2] = $19;
 STACKTOP = sp;return;
}
function _sqlite3_soft_heap_limit64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_sqlite3_initialize()|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((656 + 8|0));
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($1|0)<(0);
  if ($10) {
   $17 = $9;$18 = $6;
  } else {
   $11 = ($1|0)>(0);
   $12 = ($1|0)==(0);
   $13 = ($0>>>0)>(0);
   $14 = $12 & $13;
   $15 = $11 | $14;
   if ($15) {
    _sqlite3MemoryAlarm(144,0,$0,$1);
   } else {
    _sqlite3MemoryAlarm(0,0,0,0);
   }
   (_sqlite3_memory_used()|0);
   $16 = tempRet0;
   $17 = $9;$18 = $6;
  }
 } else {
  $17 = -1;$18 = -1;
 }
 tempRet0 = $17;
 STACKTOP = sp;return ($18|0);
}
function _softHeapLimitEnforcer($NotUsed,$0,$1,$allocSize) {
 $NotUsed = $NotUsed|0;
 $0 = $0|0;
 $1 = $1|0;
 $allocSize = $allocSize|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _sqlite3_memory_used() {
 var $0 = 0, $1 = 0, $2 = 0, $mx = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp + 4|0;
 $mx = sp;
 (_sqlite3_status(0,$n,$mx,0)|0);
 $0 = HEAP32[$n>>2]|0;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 tempRet0 = $2;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_malloc($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_sqlite3Malloc($n)|0);
  $$0 = $2;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Malloc($n) {
 $n = $n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $n$off = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $n$off = (($n) + -1)|0;
 $0 = ($n$off>>>0)>(2147483390);
 if ($0) {
  HEAP32[$p>>2] = 0;
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $1 = HEAP32[384>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[((384 + 36|0))>>2]|0;
  $4 = (FUNCTION_TABLE_ii[$3 & 255]($n)|0);
  HEAP32[$p>>2] = $4;
  $5 = $4;
  STACKTOP = sp;return ($5|0);
 } else {
  (_mallocWithAlarm($n,$p)|0);
  $$pre = HEAP32[$p>>2]|0;
  $5 = $$pre;
  STACKTOP = sp;return ($5|0);
 }
 return 0|0;
}
function _sqlite3_free($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[384>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $6 = HEAP32[((384 + 40|0))>>2]|0;
  FUNCTION_TABLE_vi[$6 & 255]($p);
  STACKTOP = sp;return;
 } else {
  $3 = (_sqlite3MallocSize($p)|0);
  $4 = (0 - ($3))|0;
  _sqlite3StatusAdd(0,$4);
  _sqlite3StatusAdd(9,-1);
  $5 = HEAP32[((384 + 40|0))>>2]|0;
  FUNCTION_TABLE_vi[$5 & 255]($p);
  STACKTOP = sp;return;
 }
}
function _sqlite3StatusAdd($op,$N) {
 $op = $op|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (304 + ($op<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($N))|0;
 HEAP32[$0>>2] = $2;
 $3 = (344 + ($op<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3_realloc($pOld,$n) {
 $pOld = $pOld|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_sqlite3Realloc($pOld,$n)|0);
  $$0 = $2;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Realloc($pOld,$nBytes) {
 $pOld = $pOld|0;
 $nBytes = $nBytes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pNew$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pOld|0)==(0|0);
 if ($0) {
  $1 = (_sqlite3Malloc($nBytes)|0);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($nBytes|0)<(1);
 if ($2) {
  _sqlite3_free($pOld);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($nBytes|0)>(2147483391);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_sqlite3MallocSize($pOld)|0);
 $5 = HEAP32[((384 + 52|0))>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 255]($nBytes)|0);
 $7 = ($4|0)==($6|0);
 if ($7) {
  $$0 = $pOld;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[384>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $39 = HEAP32[((384 + 44|0))>>2]|0;
  $40 = (FUNCTION_TABLE_iii[$39 & 255]($pOld,$6)|0);
  $$0 = $40;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3StatusSet(5,$nBytes);
 $10 = (($6) - ($4))|0;
 $11 = (_sqlite3StatusValue()|0);
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = ((656 + 8|0));
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($10|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (_i64Subtract(($16|0),($19|0),($10|0),($21|0))|0);
 $23 = tempRet0;
 $24 = ($13|0)<($23|0);
 $25 = ($13|0)==($23|0);
 $26 = ($11>>>0)<($22>>>0);
 $27 = $25 & $26;
 $28 = $24 | $27;
 if (!($28)) {
  _sqlite3MallocAlarm($10);
 }
 $29 = HEAP32[((384 + 44|0))>>2]|0;
 $30 = (FUNCTION_TABLE_iii[$29 & 255]($pOld,$6)|0);
 $31 = ($30|0)==(0|0);
 $32 = HEAP32[((656 + 16|0))>>2]|0;
 $33 = ($32|0)!=(0|0);
 $or$cond = $31 & $33;
 if ($or$cond) {
  _sqlite3MallocAlarm($nBytes);
  $34 = HEAP32[((384 + 44|0))>>2]|0;
  $35 = (FUNCTION_TABLE_iii[$34 & 255]($pOld,$6)|0);
  $pNew$0 = $35;
 } else {
  $pNew$0 = $30;
 }
 $36 = ($pNew$0|0)==(0|0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (_sqlite3MallocSize($pNew$0)|0);
 $38 = (($37) - ($4))|0;
 _sqlite3StatusAdd(0,$38);
 $$0 = $pNew$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_vmprintf($zFormat,$ap) {
 $zFormat = $zFormat|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $acc = 0, $zBase = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $zBase = sp + 28|0;
 $acc = sp;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3StrAccumInit($acc,$zBase,70,1000000000);
 $2 = (($acc) + 24|0);
 HEAP8[$2>>0] = 2;
 _sqlite3VXPrintf($acc,0,$zFormat,$ap);
 $3 = (_sqlite3StrAccumFinish($acc)|0);
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3StrAccumInit($p,$zBase,$n,$mx) {
 $p = $p|0;
 $zBase = $zBase|0;
 $n = $n|0;
 $mx = $mx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 HEAP32[$0>>2] = $zBase;
 $1 = (($p) + 8|0);
 HEAP32[$1>>2] = $zBase;
 HEAP32[$p>>2] = 0;
 $2 = (($p) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($p) + 16|0);
 HEAP32[$3>>2] = $n;
 $4 = (($p) + 20|0);
 HEAP32[$4>>2] = $mx;
 $5 = (($p) + 24|0);
 HEAP8[$5>>0] = 1;
 $6 = (($p) + 25|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3VXPrintf($pAccum,$bFlags,$fmt,$ap) {
 $pAccum = $pAccum|0;
 $bFlags = $bFlags|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$15 = 0, $$2 = 0, $$24 = 0, $$25 = 0, $$3 = 0, $$4 = 0, $$538 = 0, $$6 = 0, $$745 = 0, $$8 = 0, $$9 = 0, $$bufpt$20 = 0, $$exp$7 = 0, $$flag_leftjustify$1 = 0, $$n$0 = 0, $$pr = 0.0, $$precision$0 = 0;
 var $$precision$3 = 0, $$precision$314 = 0, $$sum = 0, $$sum12 = 0, $$sum13 = 0, $$sum182 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0;
 var $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amt$0 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0;
 var $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $bArgList$0$ph = 0, $buf = 0, $bufpt$0 = 0, $bufpt$1 = 0, $bufpt$10 = 0, $bufpt$1193 = 0, $bufpt$12 = 0, $bufpt$14$lcssa = 0, $bufpt$14$ph = 0, $bufpt$15$lcssa = 0, $bufpt$15107 = 0, $bufpt$16 = 0, $bufpt$17 = 0, $bufpt$18 = 0, $bufpt$19 = 0, $bufpt$2 = 0, $bufpt$20 = 0, $bufpt$21 = 0;
 var $bufpt$22 = 0, $bufpt$23 = 0, $bufpt$3 = 0, $bufpt$4$lcssa = 0, $bufpt$4127 = 0, $bufpt$5 = 0, $bufpt$6134 = 0, $bufpt$7 = 0, $bufpt$8 = 0, $bufpt$9 = 0, $c$0 = 0, $c$1 = 0, $c$2$off = 0, $c$2$off35 = 0, $c$237 = 0, $c$3 = 0, $c$4$off = 0, $c$4$off42 = 0, $c$444 = 0, $c$5 = 0;
 var $c$6 = 0, $c$7 = 0, $e2$192 = 0, $e2$2 = 0, $e2$399 = 0, $escarg$0 = 0, $escarg$1 = 0, $exitcond = 0, $exp$0 = 0, $exp$1 = 0, $exp$2 = 0, $exp$3 = 0, $exp$4$lcssa = 0, $exp$480 = 0, $exp$5$lcssa = 0, $exp$585 = 0, $exp$6 = 0, $exp$7 = 0, $exp$8 = 0, $exp$9 = 0;
 var $flag_alternateform$0 = 0, $flag_alternateform$1 = 0, $flag_alternateform$128 = 0, $flag_altform2$0 = 0, $flag_altform2$1 = 0, $flag_altform2$127 = 0, $flag_blanksign$0 = 0, $flag_blanksign$1 = 0, $flag_blanksign$129 = 0, $flag_leftjustify$0 = 0, $flag_leftjustify$1 = 0, $flag_leftjustify$131 = 0, $flag_leftjustify$3 = 0, $flag_longlong$0 = 0, $flag_longlong$1 = 0, $flag_plussign$0 = 0, $flag_plussign$1 = 0, $flag_plussign$130 = 0, $flag_rtz$0 = 0, $flag_zeropad$0 = 0;
 var $flag_zeropad$1 = 0, $flag_zeropad$126 = 0, $i$0116 = 0, $i2$0$lcssa = 0, $i2$053 = 0, $i2$160 = 0, $idx$052 = 0, $idx$1126 = 0, $idx$273 = 0, $infop$0 = 0, $j$1$lcssa = 0, $j$1$ph = 0, $j$161 = 0, $j$2 = 0, $j$3 = 0, $k$054 = 0, $length$165 = 0, $length$2 = 0, $n$0$lcssa = 0, $n$055 = 0;
 var $nOut$0 = 0, $not$ = 0, $not$32 = 0, $nsd = 0, $or$cond = 0, $or$cond16 = 0, $or$cond17 = 0, $or$cond18 = 0, $or$cond19 = 0, $or$cond20 = 0, $or$cond21 = 0, $or$cond22 = 0, $or$cond23 = 0, $pArgList$0 = 0, $pArgList$1$ph = 0, $phitmp = 0, $pre$0133 = 0, $precision$0 = 0, $precision$243 = 0, $precision$3 = 0;
 var $precision$4 = 0, $precision$6 = 0, $precision$6$ = 0, $precision$7 = 0, $precision$8$lcssa = 0, $precision$9106 = 0, $prefix$0 = 0, $prefix$1 = 0, $realvalue = 0, $rounder$0$lcssa = 0.0, $rounder$072 = 0.0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $scale$3 = 0.0, $scevgep = 0, $scevgep164$sum = 0, $scevgep165 = 0, $scevgep168$sum = 0, $scevgep169 = 0;
 var $scevgep172 = 0, $scevgep176 = 0, $scevgep179 = 0, $smax = 0, $storemerge = 0.0, $useIntern$0$ph = 0, $width$0 = 0, $width$236 = 0, $width$3 = 0, $width$4 = 0, $x$0 = 0, $xtype$0 = 0, $xtype$1 = 0, $zExtra$0 = 0, $zExtra$1 = 0, $zExtra$2 = 0, $zExtra$3 = 0, $zExtra$4 = 0, $zOut$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $realvalue = sp;
 $nsd = sp + 8|0;
 $buf = sp + 12|0;
 $0 = ($bFlags|0)==(0);
 if ($0) {
  $bArgList$0$ph = 0;$pArgList$1$ph = 0;$useIntern$0$ph = 0;
 } else {
  $1 = $bFlags & 2;
  $2 = $1&255;
  $3 = ($1|0)==(0);
  if ($3) {
   $pArgList$0 = 0;
  } else {
   $arglist_current = HEAP32[$ap>>2]|0;
   $4 = HEAP32[$arglist_current>>2]|0;
   $arglist_next = (($arglist_current) + 4|0);
   HEAP32[$ap>>2] = $arglist_next;
   $pArgList$0 = $4;
  }
  $5 = $bFlags & 1;
  $phitmp = ($5|0)!=(0);
  $bArgList$0$ph = $2;$pArgList$1$ph = $pArgList$0;$useIntern$0$ph = $phitmp;
 }
 $6 = ($bArgList$0$ph<<24>>24)==(0);
 $7 = ($bArgList$0$ph<<24>>24)!=(0);
 $8 = (($pAccum) + 12|0);
 $scevgep = (($buf) + 1|0);
 $$0 = $fmt;$bufpt$0 = 0;
 L7: while(1) {
  $9 = HEAP8[$$0>>0]|0;
  if ((($9<<24>>24) == 37)) {
   $$2 = $$0;$bufpt$1 = $bufpt$0;
  } else if ((($9<<24>>24) == 0)) {
   label = 213;
   break;
  } else {
   $$1 = $$0;$amt$0 = 1;
   while(1) {
    $10 = (($$1) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 0) | (($11<<24>>24) == 37)) {
     break;
    }
    $12 = (($amt$0) + 1)|0;
    $$1 = $10;$amt$0 = $12;
   }
   _sqlite3StrAccumAppend($pAccum,$$0,$amt$0);
   $13 = ($11<<24>>24)==(0);
   if ($13) {
    label = 213;
    break;
   } else {
    $$2 = $10;$bufpt$1 = $$0;
   }
  }
  $14 = (($$2) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   label = 11;
   break;
  }
  $17 = $15 << 24 >> 24;
  $$3 = $14;$c$0 = $17;$flag_alternateform$0 = 0;$flag_altform2$0 = 0;$flag_blanksign$0 = 0;$flag_leftjustify$0 = 0;$flag_plussign$0 = 0;$flag_zeropad$0 = 0;
  L16: while(1) {
   switch ($c$0|0) {
   case 43:  {
    $flag_alternateform$1 = $flag_alternateform$0;$flag_altform2$1 = $flag_altform2$0;$flag_blanksign$1 = $flag_blanksign$0;$flag_leftjustify$1 = $flag_leftjustify$0;$flag_plussign$1 = 1;$flag_zeropad$1 = $flag_zeropad$0;
    break;
   }
   case 45:  {
    $flag_alternateform$1 = $flag_alternateform$0;$flag_altform2$1 = $flag_altform2$0;$flag_blanksign$1 = $flag_blanksign$0;$flag_leftjustify$1 = 1;$flag_plussign$1 = $flag_plussign$0;$flag_zeropad$1 = $flag_zeropad$0;
    break;
   }
   case 32:  {
    $flag_alternateform$1 = $flag_alternateform$0;$flag_altform2$1 = $flag_altform2$0;$flag_blanksign$1 = 1;$flag_leftjustify$1 = $flag_leftjustify$0;$flag_plussign$1 = $flag_plussign$0;$flag_zeropad$1 = $flag_zeropad$0;
    break;
   }
   case 35:  {
    $flag_alternateform$1 = 1;$flag_altform2$1 = $flag_altform2$0;$flag_blanksign$1 = $flag_blanksign$0;$flag_leftjustify$1 = $flag_leftjustify$0;$flag_plussign$1 = $flag_plussign$0;$flag_zeropad$1 = $flag_zeropad$0;
    break;
   }
   case 33:  {
    $flag_alternateform$1 = $flag_alternateform$0;$flag_altform2$1 = 1;$flag_blanksign$1 = $flag_blanksign$0;$flag_leftjustify$1 = $flag_leftjustify$0;$flag_plussign$1 = $flag_plussign$0;$flag_zeropad$1 = $flag_zeropad$0;
    break;
   }
   case 48:  {
    $flag_alternateform$1 = $flag_alternateform$0;$flag_altform2$1 = $flag_altform2$0;$flag_blanksign$1 = $flag_blanksign$0;$flag_leftjustify$1 = $flag_leftjustify$0;$flag_plussign$1 = $flag_plussign$0;$flag_zeropad$1 = 1;
    break;
   }
   default: {
    $$4 = $$3;$c$1 = $c$0;$flag_alternateform$128 = $flag_alternateform$0;$flag_altform2$127 = $flag_altform2$0;$flag_blanksign$129 = $flag_blanksign$0;$flag_leftjustify$131 = $flag_leftjustify$0;$flag_plussign$130 = $flag_plussign$0;$flag_zeropad$126 = $flag_zeropad$0;
    break L16;
   }
   }
   $18 = (($$3) + 1|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($19<<24>>24)==(0);
   if ($21) {
    $$4 = $18;$c$1 = $20;$flag_alternateform$128 = $flag_alternateform$1;$flag_altform2$127 = $flag_altform2$1;$flag_blanksign$129 = $flag_blanksign$1;$flag_leftjustify$131 = $flag_leftjustify$1;$flag_plussign$130 = $flag_plussign$1;$flag_zeropad$126 = $flag_zeropad$1;
    break;
   } else {
    $$3 = $18;$c$0 = $20;$flag_alternateform$0 = $flag_alternateform$1;$flag_altform2$0 = $flag_altform2$1;$flag_blanksign$0 = $flag_blanksign$1;$flag_leftjustify$0 = $flag_leftjustify$1;$flag_plussign$0 = $flag_plussign$1;$flag_zeropad$0 = $flag_zeropad$1;
   }
  }
  $22 = ($c$1|0)==(42);
  if ($22) {
   if ($6) {
    $arglist_current2 = HEAP32[$ap>>2]|0;
    $26 = HEAP32[$arglist_current2>>2]|0;
    $arglist_next3 = (($arglist_current2) + 4|0);
    HEAP32[$ap>>2] = $arglist_next3;
    $width$0 = $26;
   } else {
    $24 = (_getIntArg($pArgList$1$ph)|0);
    $25 = tempRet0;
    $width$0 = $24;
   }
   $27 = ($width$0|0)<(0);
   $28 = (0 - ($width$0))|0;
   $$flag_leftjustify$1 = $27 ? 1 : $flag_leftjustify$131;
   $$width$0 = $27 ? $28 : $width$0;
   $29 = (($$4) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $$6 = $29;$c$3 = $31;$flag_leftjustify$3 = $$flag_leftjustify$1;$width$3 = $$width$0;
  } else {
   $c$2$off35 = (($c$1) + -48)|0;
   $23 = ($c$2$off35>>>0)<(10);
   if ($23) {
    $$538 = $$4;$c$237 = $c$1;$width$236 = 0;
    while(1) {
     $32 = ($width$236*10)|0;
     $33 = (($c$237) + -48)|0;
     $34 = (($33) + ($32))|0;
     $35 = (($$538) + 1|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $c$2$off = (($37) + -48)|0;
     $38 = ($c$2$off>>>0)<(10);
     if ($38) {
      $$538 = $35;$c$237 = $37;$width$236 = $34;
     } else {
      $$6 = $35;$c$3 = $37;$flag_leftjustify$3 = $flag_leftjustify$131;$width$3 = $34;
      break;
     }
    }
   } else {
    $$6 = $$4;$c$3 = $c$1;$flag_leftjustify$3 = $flag_leftjustify$131;$width$3 = 0;
   }
  }
  $39 = ($c$3|0)==(46);
  L36: do {
   if ($39) {
    $40 = (($$6) + 1|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    $43 = ($41<<24>>24)==(42);
    if (!($43)) {
     $c$4$off42 = (($42) + -48)|0;
     $44 = ($c$4$off42>>>0)<(10);
     if ($44) {
      $$745 = $40;$c$444 = $42;$precision$243 = 0;
     } else {
      $$8 = $40;$c$5 = $42;$precision$3 = 0;
      break;
     }
     while(1) {
      $53 = ($precision$243*10)|0;
      $54 = (($c$444) + -48)|0;
      $55 = (($54) + ($53))|0;
      $56 = (($$745) + 1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57 << 24 >> 24;
      $c$4$off = (($58) + -48)|0;
      $59 = ($c$4$off>>>0)<(10);
      if ($59) {
       $$745 = $56;$c$444 = $58;$precision$243 = $55;
      } else {
       $$8 = $56;$c$5 = $58;$precision$3 = $55;
       break L36;
      }
     }
    }
    if ($6) {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $47 = HEAP32[$arglist_current5>>2]|0;
     $arglist_next6 = (($arglist_current5) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $precision$0 = $47;
    } else {
     $45 = (_getIntArg($pArgList$1$ph)|0);
     $46 = tempRet0;
     $precision$0 = $45;
    }
    $48 = ($precision$0|0)<(0);
    $49 = (0 - ($precision$0))|0;
    $$precision$0 = $48 ? $49 : $precision$0;
    $50 = (($$6) + 2|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51 << 24 >> 24;
    $$8 = $50;$c$5 = $52;$precision$3 = $$precision$0;
   } else {
    $$8 = $$6;$c$5 = $c$3;$precision$3 = -1;
   }
  } while(0);
  $60 = ($c$5|0)==(108);
  do {
   if ($60) {
    $61 = (($$8) + 1|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = ($62<<24>>24)==(108);
    if ($63) {
     $64 = (($$8) + 2|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 << 24 >> 24;
     $$9 = $64;$c$6 = $66;$flag_longlong$0 = 1;
     break;
    } else {
     $67 = $62 << 24 >> 24;
     $$9 = $61;$c$6 = $67;$flag_longlong$0 = 0;
     break;
    }
   } else {
    $$9 = $$8;$c$6 = $c$5;$flag_longlong$0 = 0;
   }
  } while(0);
  $idx$052 = 0;
  while(1) {
   $70 = (38344 + (($idx$052*6)|0)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   $73 = ($c$6|0)==($72|0);
   $69 = (($idx$052) + 1)|0;
   if ($73) {
    label = 42;
    break;
   }
   $68 = ($69|0)<(23);
   if ($68) {
    $idx$052 = $69;
   } else {
    $infop$0 = 38344;$xtype$0 = 0;
    break;
   }
  }
  if ((label|0) == 42) {
   label = 0;
   $74 = ($idx$052>>>0)<(20);
   $or$cond = $useIntern$0$ph | $74;
   if (!($or$cond)) {
    label = 213;
    break;
   }
   $75 = ((38344 + (($idx$052*6)|0)|0) + 3|0);
   $76 = HEAP8[$75>>0]|0;
   $infop$0 = $70;$xtype$0 = $76;
  }
  $77 = $xtype$0&255;
  L61: do {
   switch ($77|0) {
   case 14:  {
    $flag_longlong$1 = 0;
    label = 46;
    break;
   }
   case 1: case 16:  {
    $flag_longlong$1 = $flag_longlong$0;
    label = 46;
    break;
   }
   case 4: case 3: case 2:  {
    if ($6) {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current20>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current20+4>>2];$192 = +HEAPF64[tempDoublePtr>>3];
     $arglist_next21 = (($arglist_current20) + 8|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $storemerge = $192;
    } else {
     $191 = (+_getDoubleArg($pArgList$1$ph));
     $storemerge = $191;
    }
    HEAPF64[$realvalue>>3] = $storemerge;
    $193 = ($precision$3|0)<(0);
    $$precision$314 = $193 ? 6 : $precision$3;
    $194 = $storemerge < 0.0;
    if ($194) {
     $195 = -$storemerge;
     HEAPF64[$realvalue>>3] = $195;
     $207 = $195;$prefix$1 = 45;
    } else {
     $196 = ($flag_plussign$130<<24>>24)==(0);
     if ($196) {
      $197 = ($flag_blanksign$129<<24>>24)==(0);
      $$15 = $197 ? 0 : 32;
      $207 = $storemerge;$prefix$1 = $$15;
     } else {
      $207 = $storemerge;$prefix$1 = 43;
     }
    }
    $198 = ($xtype$0<<24>>24)==(4);
    $199 = ($$precision$314|0)>(0);
    $or$cond16 = $198 & $199;
    $200 = $or$cond16 << 31 >> 31;
    $precision$6 = (($200) + ($$precision$314))|0;
    $201 = ($precision$6|0)>(0);
    if ($201) {
     $idx$273 = $precision$6;$rounder$072 = 0.5;
     while(1) {
      $202 = (($idx$273) + -1)|0;
      $203 = $rounder$072 * 0.100000000000000005551;
      $204 = ($202|0)>(0);
      if ($204) {
       $idx$273 = $202;$rounder$072 = $203;
      } else {
       $rounder$0$lcssa = $203;
       break;
      }
     }
    } else {
     $rounder$0$lcssa = 0.5;
    }
    $205 = ($xtype$0<<24>>24)==(2);
    if ($205) {
     $206 = $rounder$0$lcssa + $207;
     HEAPF64[$realvalue>>3] = $206;
     $208 = $206;
    } else {
     $208 = $207;
    }
    $209 = (_sqlite3IsNaN($208)|0);
    $210 = ($209|0)==(0);
    if ($210) {
     $211 = $208 > 0.0;
     if ($211) {
      $exp$0 = 0;$scale$0 = 1.0;
      while(1) {
       $212 = $scale$0 * 1.0000000000000000159E+100;
       $213 = $208 >= $212;
       $214 = ($exp$0|0)<(351);
       $or$cond17 = $213 & $214;
       $215 = (($exp$0) + 100)|0;
       if ($or$cond17) {
        $exp$0 = $215;$scale$0 = $212;
       } else {
        $exp$1 = $exp$0;$scale$1 = $scale$0;
        break;
       }
      }
      while(1) {
       $216 = $scale$1 * 1.00000000000000002132E+64;
       $217 = $208 >= $216;
       $218 = ($exp$1|0)<(351);
       $or$cond18 = $217 & $218;
       $219 = (($exp$1) + 64)|0;
       if ($or$cond18) {
        $exp$1 = $219;$scale$1 = $216;
       } else {
        $exp$2 = $exp$1;$scale$2 = $scale$1;
        break;
       }
      }
      while(1) {
       $220 = $scale$2 * 1.0E+8;
       $221 = $208 >= $220;
       $222 = ($exp$2|0)<(351);
       $or$cond19 = $221 & $222;
       $223 = (($exp$2) + 8)|0;
       if ($or$cond19) {
        $exp$2 = $223;$scale$2 = $220;
       } else {
        $exp$3 = $exp$2;$scale$3 = $scale$2;
        break;
       }
      }
      while(1) {
       $224 = $scale$3 * 10.0;
       $225 = ($exp$3|0)<(351);
       $not$32 = $208 >= $224;
       $226 = $225 & $not$32;
       $227 = (($exp$3) + 1)|0;
       if ($226) {
        $exp$3 = $227;$scale$3 = $224;
       } else {
        break;
       }
      }
      $228 = $208 / $scale$3;
      HEAPF64[$realvalue>>3] = $228;
      $229 = $228 < 1.00000000000000002092E-8;
      if ($229) {
       $231 = $228;$exp$480 = $exp$3;
       while(1) {
        $230 = $231 * 1.0E+8;
        $232 = (($exp$480) + -8)|0;
        $233 = $230 < 1.00000000000000002092E-8;
        if ($233) {
         $231 = $230;$exp$480 = $232;
        } else {
         break;
        }
       }
       HEAPF64[$realvalue>>3] = $230;
       $$pr = $230;$exp$4$lcssa = $232;
      } else {
       $$pr = $228;$exp$4$lcssa = $exp$3;
      }
      $234 = $$pr < 1.0;
      if ($234) {
       $236 = $$pr;$exp$585 = $exp$4$lcssa;
       while(1) {
        $235 = $236 * 10.0;
        $237 = (($exp$585) + -1)|0;
        $238 = $235 < 1.0;
        if ($238) {
         $236 = $235;$exp$585 = $237;
        } else {
         break;
        }
       }
       HEAPF64[$realvalue>>3] = $235;
       $423 = $235;$exp$5$lcssa = $237;
      } else {
       $423 = $$pr;$exp$5$lcssa = $exp$4$lcssa;
      }
      $239 = ($exp$5$lcssa|0)>(350);
      if ($239) {
       if ((($prefix$1<<24>>24) == 43)) {
        $bufpt$8 = 38568;
       } else if ((($prefix$1<<24>>24) == 45)) {
        $bufpt$8 = 38560;
       } else {
        $bufpt$8 = 38576;
       }
       $240 = (_sqlite3Strlen30($bufpt$8)|0);
       $bufpt$23 = $bufpt$8;$length$2 = $240;$width$4 = $width$3;$zExtra$4 = 0;
       break L61;
      } else {
       $242 = $423;$exp$6 = $exp$5$lcssa;
      }
     } else {
      $242 = $208;$exp$6 = 0;
     }
     if ($205) {
      $exp$7 = $exp$6;
     } else {
      $241 = $rounder$0$lcssa + $242;
      HEAPF64[$realvalue>>3] = $241;
      $243 = !($241 >= 10.0);
      if ($243) {
       $exp$7 = $exp$6;
      } else {
       $244 = $241 * 0.100000000000000005551;
       HEAPF64[$realvalue>>3] = $244;
       $245 = (($exp$6) + 1)|0;
       $exp$7 = $245;
      }
     }
     if ($198) {
      $246 = ($flag_alternateform$128<<24>>24)==(0);
      $247 = $246&1;
      $248 = ($exp$7|0)<(-4);
      $249 = ($exp$7|0)>($precision$6|0);
      $or$cond20 = $248 | $249;
      $$25 = $or$cond20 ? 3 : 2;
      $250 = $or$cond20 ? 0 : $exp$7;
      $precision$6$ = (($precision$6) - ($250))|0;
      $flag_rtz$0 = $247;$precision$7 = $precision$6$;$xtype$1 = $$25;
     } else {
      $flag_rtz$0 = $flag_altform2$127;$precision$7 = $precision$6;$xtype$1 = $xtype$0;
     }
     $251 = ($xtype$1<<24>>24)==(3);
     $$exp$7 = $251 ? 0 : $exp$7;
     $252 = ($$exp$7|0)>(0);
     $253 = $252 ? $$exp$7 : 0;
     $254 = (($precision$7) + ($width$3))|0;
     $255 = (($254) + ($253))|0;
     $256 = ($255|0)>(55);
     if ($256) {
      $257 = (($255) + 15)|0;
      $258 = (_sqlite3Malloc($257)|0);
      $259 = ($258|0)==(0|0);
      if ($259) {
       label = 120;
       break L7;
      } else {
       $bufpt$9 = $258;$zExtra$1 = $258;
      }
     } else {
      $bufpt$9 = $buf;$zExtra$1 = 0;
     }
     $260 = $flag_altform2$127&255;
     $261 = ($260*10)|0;
     $262 = (($261) + 16)|0;
     HEAP32[$nsd>>2] = $262;
     $263 = ($precision$7|0)>(0);
     $264 = $263&1;
     $265 = $flag_altform2$127 | $flag_alternateform$128;
     $266 = $265&255;
     $267 = $266 | $264;
     $268 = ($prefix$1<<24>>24)==(0);
     if ($268) {
      $bufpt$10 = $bufpt$9;
     } else {
      $269 = (($bufpt$9) + 1|0);
      HEAP8[$bufpt$9>>0] = $prefix$1;
      $bufpt$10 = $269;
     }
     $270 = ($$exp$7|0)<(0);
     if ($270) {
      $275 = (($bufpt$10) + 1|0);
      HEAP8[$bufpt$10>>0] = 48;
      $bufpt$12 = $275;$e2$2 = $$exp$7;
     } else {
      $271 = $$exp$7 ^ -1;
      $272 = ($271|0)>(-1);
      $smax = $272 ? $271 : -1;
      $273 = (-2 - ($smax))|0;
      $274 = (($$exp$7) + ($smax))|0;
      $bufpt$1193 = $bufpt$10;$e2$192 = $$exp$7;
      while(1) {
       $276 = (_et_getdigit($realvalue,$nsd)|0);
       $277 = (($bufpt$1193) + 1|0);
       HEAP8[$bufpt$1193>>0] = $276;
       $278 = (($e2$192) + -1)|0;
       $279 = ($e2$192|0)>(0);
       if ($279) {
        $bufpt$1193 = $277;$e2$192 = $278;
       } else {
        break;
       }
      }
      $scevgep164$sum = (($274) + 2)|0;
      $scevgep165 = (($bufpt$10) + ($scevgep164$sum)|0);
      $bufpt$12 = $scevgep165;$e2$2 = $273;
     }
     $280 = ($267|0)==(0);
     if ($280) {
      $bufpt$14$ph = $bufpt$12;
     } else {
      $281 = (($bufpt$12) + 1|0);
      HEAP8[$bufpt$12>>0] = 46;
      $bufpt$14$ph = $281;
     }
     $e2$399 = (($e2$2) + 1)|0;
     $282 = ($e2$399|0)<(0);
     if ($282) {
      $283 = (($precision$7) + 1)|0;
      $284 = (($283) + ($e2$2))|0;
      $285 = $e2$2 ^ -1;
      _memset(($bufpt$14$ph|0),48,($285|0))|0;
      $scevgep168$sum = $e2$2 ^ -1;
      $scevgep169 = (($bufpt$14$ph) + ($scevgep168$sum)|0);
      $bufpt$14$lcssa = $scevgep169;$precision$8$lcssa = $284;
     } else {
      $bufpt$14$lcssa = $bufpt$14$ph;$precision$8$lcssa = $precision$7;
     }
     $286 = ($precision$8$lcssa|0)>(0);
     if ($286) {
      $bufpt$15107 = $bufpt$14$lcssa;$precision$9106 = $precision$8$lcssa;
      while(1) {
       $287 = (($precision$9106) + -1)|0;
       $288 = (_et_getdigit($realvalue,$nsd)|0);
       $289 = (($bufpt$15107) + 1|0);
       HEAP8[$bufpt$15107>>0] = $288;
       $290 = ($287|0)>(0);
       if ($290) {
        $bufpt$15107 = $289;$precision$9106 = $287;
       } else {
        break;
       }
      }
      $scevgep172 = (($bufpt$14$lcssa) + ($precision$8$lcssa)|0);
      $bufpt$15$lcssa = $scevgep172;
     } else {
      $bufpt$15$lcssa = $bufpt$14$lcssa;
     }
     $291 = ($flag_rtz$0<<24>>24)==(0);
     $or$cond21 = $291 | $280;
     L138: do {
      if ($or$cond21) {
       $bufpt$17 = $bufpt$15$lcssa;
      } else {
       $bufpt$16 = $bufpt$15$lcssa;
       while(1) {
        $292 = (($bufpt$16) + -1|0);
        $293 = HEAP8[$292>>0]|0;
        if ((($293<<24>>24) == 46)) {
         break;
        } else if (!((($293<<24>>24) == 48))) {
         $bufpt$17 = $bufpt$16;
         break L138;
        }
        HEAP8[$292>>0] = 0;
        $bufpt$16 = $292;
       }
       $294 = ($flag_altform2$127<<24>>24)==(0);
       if ($294) {
        HEAP8[$292>>0] = 0;
        $bufpt$17 = $292;
        break;
       } else {
        $295 = (($bufpt$16) + 1|0);
        HEAP8[$bufpt$16>>0] = 48;
        $bufpt$17 = $295;
        break;
       }
      }
     } while(0);
     if ($251) {
      $296 = (($infop$0) + 4|0);
      $297 = HEAP8[$296>>0]|0;
      $298 = $297&255;
      $299 = (38504 + ($298)|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = (($bufpt$17) + 1|0);
      HEAP8[$bufpt$17>>0] = $300;
      $302 = ($exp$7|0)<(0);
      $303 = (($bufpt$17) + 2|0);
      if ($302) {
       HEAP8[$301>>0] = 45;
       $304 = (0 - ($exp$7))|0;
       $exp$8 = $304;
      } else {
       HEAP8[$301>>0] = 43;
       $exp$8 = $exp$7;
      }
      $305 = ($exp$8|0)>(99);
      if ($305) {
       $306 = (($exp$8|0) / 100)&-1;
       $307 = (($306) + 48)|0;
       $308 = $307&255;
       $309 = (($bufpt$17) + 3|0);
       HEAP8[$303>>0] = $308;
       $310 = (($exp$8|0) % 100)&-1;
       $bufpt$18 = $309;$exp$9 = $310;
      } else {
       $bufpt$18 = $303;$exp$9 = $exp$8;
      }
      $311 = (($exp$9|0) / 10)&-1;
      $312 = (($311) + 48)|0;
      $313 = $312&255;
      $314 = (($bufpt$18) + 1|0);
      HEAP8[$bufpt$18>>0] = $313;
      $315 = (($exp$9|0) % 10)&-1;
      $316 = (($315) + 48)|0;
      $317 = $316&255;
      $318 = (($bufpt$18) + 2|0);
      HEAP8[$314>>0] = $317;
      $bufpt$19 = $318;
     } else {
      $bufpt$19 = $bufpt$17;
     }
     HEAP8[$bufpt$19>>0] = 0;
     $319 = $bufpt$19;
     $320 = $bufpt$9;
     $321 = (($319) - ($320))|0;
     $322 = ($flag_zeropad$126<<24>>24)!=(0);
     $323 = ($flag_leftjustify$3<<24>>24)==(0);
     $or$cond22 = $322 & $323;
     $324 = ($321|0)<($width$3|0);
     $or$cond23 = $or$cond22 & $324;
     if (!($or$cond23)) {
      $bufpt$23 = $bufpt$9;$length$2 = $321;$width$4 = $width$3;$zExtra$4 = $zExtra$1;
      break L61;
     }
     $325 = (($width$3) - ($321))|0;
     $326 = ($321|0)<(0);
     if (!($326)) {
      $i$0116 = $width$3;
      while(1) {
       $327 = (($i$0116) - ($325))|0;
       $328 = (($bufpt$9) + ($327)|0);
       $329 = HEAP8[$328>>0]|0;
       $330 = (($bufpt$9) + ($i$0116)|0);
       HEAP8[$330>>0] = $329;
       $331 = (($i$0116) + -1)|0;
       $332 = ($i$0116|0)>($325|0);
       if ($332) {
        $i$0116 = $331;
       } else {
        break;
       }
      }
     }
     $333 = ($width$3|0)==($321|0);
     if ($333) {
      $bufpt$23 = $bufpt$9;$length$2 = $width$3;$width$4 = $width$3;$zExtra$4 = $zExtra$1;
      break L61;
     }
     $334 = ($prefix$1<<24>>24)!=(0);
     $335 = $334&1;
     $scevgep176 = (($bufpt$9) + ($335)|0);
     $336 = (($width$3) + ($320))|0;
     $337 = (($336) - ($319))|0;
     _memset(($scevgep176|0),48,($337|0))|0;
     $bufpt$23 = $bufpt$9;$length$2 = $width$3;$width$4 = $width$3;$zExtra$4 = $zExtra$1;
    } else {
     $bufpt$23 = 38552;$length$2 = 3;$width$4 = $width$3;$zExtra$4 = 0;
    }
    break;
   }
   case 5:  {
    if ($6) {
     $338 = HEAP32[$8>>2]|0;
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $339 = HEAP32[$arglist_current23>>2]|0;
     $arglist_next24 = (($arglist_current23) + 4|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAP32[$339>>2] = $338;
     $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
    } else {
     $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
    }
    break;
   }
   case 8:  {
    HEAP8[$buf>>0] = 37;
    $bufpt$23 = $buf;$length$2 = 1;$width$4 = $width$3;$zExtra$4 = 0;
    break;
   }
   case 9:  {
    if ($6) {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $344 = HEAP32[$arglist_current26>>2]|0;
     $arglist_next27 = (($arglist_current26) + 4|0);
     HEAP32[$ap>>2] = $arglist_next27;
     $c$7 = $344;
    } else {
     $340 = (_getTextArg($pArgList$1$ph)|0);
     $341 = ($340|0)==(0|0);
     if ($341) {
      $c$7 = 0;
     } else {
      $342 = HEAP8[$340>>0]|0;
      $343 = $342 << 24 >> 24;
      $c$7 = $343;
     }
    }
    $345 = $c$7&255;
    HEAP8[$buf>>0] = $345;
    $346 = ($precision$3|0)>(-1);
    if ($346) {
     $347 = ($precision$3|0)>(1);
     if ($347) {
      $348 = (($precision$3) + -1)|0;
      _memset(($scevgep|0),($345|0),($348|0))|0;
      $bufpt$23 = $buf;$length$2 = $precision$3;$width$4 = $width$3;$zExtra$4 = 0;
     } else {
      $bufpt$23 = $buf;$length$2 = $precision$3;$width$4 = $width$3;$zExtra$4 = 0;
     }
    } else {
     $bufpt$23 = $buf;$length$2 = 1;$width$4 = $width$3;$zExtra$4 = 0;
    }
    break;
   }
   case 7: case 6:  {
    if ($7) {
     $349 = (_getTextArg($pArgList$1$ph)|0);
     $bufpt$20 = $349;
    } else {
     $arglist_current29 = HEAP32[$ap>>2]|0;
     $350 = HEAP32[$arglist_current29>>2]|0;
     $arglist_next30 = (($arglist_current29) + 4|0);
     HEAP32[$ap>>2] = $arglist_next30;
     $bufpt$20 = $350;
    }
    $351 = ($bufpt$20|0)==(0|0);
    if ($351) {
     $bufpt$21 = 1728;$zExtra$2 = 0;
    } else {
     $352 = ($xtype$0<<24>>24)==(7);
     if ($352) {
      $$bufpt$20 = $7 ? 0 : $bufpt$20;
      $bufpt$21 = $bufpt$20;$zExtra$2 = $$bufpt$20;
     } else {
      $bufpt$21 = $bufpt$20;$zExtra$2 = 0;
     }
    }
    $353 = ($precision$3|0)>(-1);
    if (!($353)) {
     $360 = (_sqlite3Strlen30($bufpt$21)|0);
     $bufpt$23 = $bufpt$21;$length$2 = $360;$width$4 = $width$3;$zExtra$4 = $zExtra$2;
     break L61;
    }
    $354 = ($precision$3|0)>(0);
    if ($354) {
     $length$165 = 0;
     while(1) {
      $357 = (($bufpt$21) + ($length$165)|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = ($358<<24>>24)==(0);
      $356 = (($length$165) + 1)|0;
      if ($359) {
       $bufpt$23 = $bufpt$21;$length$2 = $length$165;$width$4 = $width$3;$zExtra$4 = $zExtra$2;
       break L61;
      }
      $355 = ($356|0)<($precision$3|0);
      if ($355) {
       $length$165 = $356;
      } else {
       $bufpt$23 = $bufpt$21;$length$2 = $356;$width$4 = $width$3;$zExtra$4 = $zExtra$2;
       break;
      }
     }
    } else {
     $bufpt$23 = $bufpt$21;$length$2 = 0;$width$4 = $width$3;$zExtra$4 = $zExtra$2;
    }
    break;
   }
   case 15: case 11: case 10:  {
    $361 = ($xtype$0<<24>>24)==(15);
    $362 = $361 ? 34 : 39;
    if ($6) {
     $arglist_current32 = HEAP32[$ap>>2]|0;
     $364 = HEAP32[$arglist_current32>>2]|0;
     $arglist_next33 = (($arglist_current32) + 4|0);
     HEAP32[$ap>>2] = $arglist_next33;
     $escarg$0 = $364;
    } else {
     $363 = (_getTextArg($pArgList$1$ph)|0);
     $escarg$0 = $363;
    }
    $365 = ($escarg$0|0)==(0|0);
    if ($365) {
     $366 = ($xtype$0<<24>>24)==(11);
     $367 = $366 ? 9992 : 38584;
     $escarg$1 = $367;
    } else {
     $escarg$1 = $escarg$0;
    }
    $368 = ($precision$3|0)==(0);
    L197: do {
     if ($368) {
      $i2$0$lcssa = 0;$n$0$lcssa = 0;
     } else {
      $369 = $362&255;
      $i2$053 = 0;$k$054 = $precision$3;$n$055 = 0;
      while(1) {
       $370 = (($escarg$1) + ($i2$053)|0);
       $371 = HEAP8[$370>>0]|0;
       $372 = ($371<<24>>24)==(0);
       if ($372) {
        $i2$0$lcssa = $i2$053;$n$0$lcssa = $n$055;
        break L197;
       }
       $373 = $371 << 24 >> 24;
       $374 = ($373|0)==($369|0);
       $375 = $374&1;
       $$n$0 = (($375) + ($n$055))|0;
       $376 = (($i2$053) + 1)|0;
       $377 = (($k$054) + -1)|0;
       $378 = ($377|0)==(0);
       if ($378) {
        $i2$0$lcssa = $376;$n$0$lcssa = $$n$0;
        break;
       } else {
        $i2$053 = $376;$k$054 = $377;$n$055 = $$n$0;
       }
      }
     }
    } while(0);
    $379 = ($xtype$0<<24>>24)==(11);
    $not$ = $365 ^ 1;
    $$24 = $379 & $not$;
    $380 = $$24&1;
    $381 = $380 << 1;
    $382 = $381 | 1;
    $383 = (($382) + ($i2$0$lcssa))|0;
    $384 = (($383) + ($n$0$lcssa))|0;
    $385 = ($384|0)>(70);
    if ($385) {
     $386 = (_sqlite3Malloc($384)|0);
     $387 = ($386|0)==(0|0);
     if ($387) {
      label = 185;
      break L7;
     } else {
      $bufpt$22 = $386;$zExtra$3 = $386;
     }
    } else {
     $bufpt$22 = $buf;$zExtra$3 = 0;
    }
    if ($$24) {
     HEAP8[$bufpt$22>>0] = $362;
     $j$1$ph = 1;
    } else {
     $j$1$ph = 0;
    }
    $388 = ($i2$0$lcssa|0)>(0);
    if ($388) {
     $389 = $362&255;
     $i2$160 = 0;$j$161 = $j$1$ph;
     while(1) {
      $390 = (($escarg$1) + ($i2$160)|0);
      $391 = HEAP8[$390>>0]|0;
      $392 = (($j$161) + 1)|0;
      $393 = (($bufpt$22) + ($j$161)|0);
      HEAP8[$393>>0] = $391;
      $394 = $391 << 24 >> 24;
      $395 = ($394|0)==($389|0);
      if ($395) {
       $396 = (($j$161) + 2)|0;
       $397 = (($bufpt$22) + ($392)|0);
       HEAP8[$397>>0] = $391;
       $j$2 = $396;
      } else {
       $j$2 = $392;
      }
      $398 = (($i2$160) + 1)|0;
      $exitcond = ($398|0)==($i2$0$lcssa|0);
      if ($exitcond) {
       $j$1$lcssa = $j$2;
       break;
      } else {
       $i2$160 = $398;$j$161 = $j$2;
      }
     }
    } else {
     $j$1$lcssa = $j$1$ph;
    }
    if ($$24) {
     $399 = (($j$1$lcssa) + 1)|0;
     $400 = (($bufpt$22) + ($j$1$lcssa)|0);
     HEAP8[$400>>0] = $362;
     $j$3 = $399;
    } else {
     $j$3 = $j$1$lcssa;
    }
    $401 = (($bufpt$22) + ($j$3)|0);
    HEAP8[$401>>0] = 0;
    $bufpt$23 = $bufpt$22;$length$2 = $j$3;$width$4 = $width$3;$zExtra$4 = $zExtra$3;
    break;
   }
   case 12:  {
    $arglist_current35 = HEAP32[$ap>>2]|0;
    $402 = HEAP32[$arglist_current35>>2]|0;
    $arglist_next36 = (($arglist_current35) + 4|0);
    HEAP32[$ap>>2] = $arglist_next36;
    $403 = ($402|0)==(0|0);
    if ($403) {
     $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
    } else {
     $404 = (($402) + 4|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = ($405|0)==(0);
     if ($406) {
      $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
     } else {
      $407 = HEAP32[$402>>2]|0;
      _sqlite3StrAccumAppend($pAccum,$407,$405);
      $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
     }
    }
    break;
   }
   case 13:  {
    $arglist_current38 = HEAP32[$ap>>2]|0;
    $408 = HEAP32[$arglist_current38>>2]|0;
    $arglist_next39 = (($arglist_current38) + 4|0);
    HEAP32[$ap>>2] = $arglist_next39;
    $arglist_current41 = HEAP32[$ap>>2]|0;
    $409 = HEAP32[$arglist_current41>>2]|0;
    $arglist_next42 = (($arglist_current41) + 4|0);
    HEAP32[$ap>>2] = $arglist_next42;
    $410 = ((($408) + (($409*72)|0)|0) + 12|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = ($411|0)==(0|0);
    if (!($412)) {
     _sqlite3StrAccumAppendAll($pAccum,$411);
     _sqlite3StrAccumAppend($pAccum,19256,1);
    }
    $413 = ((($408) + (($409*72)|0)|0) + 16|0);
    $414 = HEAP32[$413>>2]|0;
    _sqlite3StrAccumAppendAll($pAccum,$414);
    $bufpt$23 = $bufpt$1;$length$2 = 0;$width$4 = 0;$zExtra$4 = 0;
    break;
   }
   default: {
    label = 213;
    break L7;
   }
   }
  } while(0);
  if ((label|0) == 46) {
   label = 0;
   $78 = (($infop$0) + 2|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 & 1;
   $81 = ($80<<24>>24)==(0);
   do {
    if ($81) {
     if ($7) {
      $101 = (_getIntArg($pArgList$1$ph)|0);
      $102 = tempRet0;
      $112 = $101;$114 = $102;$prefix$0 = 0;
      break;
     }
     $103 = ($flag_longlong$1<<24>>24)==(0);
     if ($103) {
      $arglist_current17 = HEAP32[$ap>>2]|0;
      $110 = HEAP32[$arglist_current17>>2]|0;
      $arglist_next18 = (($arglist_current17) + 4|0);
      HEAP32[$ap>>2] = $arglist_next18;
      $112 = $110;$114 = 0;$prefix$0 = 0;
      break;
     } else {
      $arglist_current14 = HEAP32[$ap>>2]|0;
      $104 = $arglist_current14;
      $105 = $104;
      $106 = HEAP32[$105>>2]|0;
      $107 = (($104) + 4)|0;
      $108 = $107;
      $109 = HEAP32[$108>>2]|0;
      $arglist_next15 = (($arglist_current14) + 8|0);
      HEAP32[$ap>>2] = $arglist_next15;
      $112 = $106;$114 = $109;$prefix$0 = 0;
      break;
     }
    } else {
     do {
      if ($7) {
       $82 = (_getIntArg($pArgList$1$ph)|0);
       $83 = tempRet0;
       $95 = $83;$96 = $82;
      } else {
       $84 = ($flag_longlong$1<<24>>24)==(0);
       if ($84) {
        $arglist_current11 = HEAP32[$ap>>2]|0;
        $91 = HEAP32[$arglist_current11>>2]|0;
        $arglist_next12 = (($arglist_current11) + 4|0);
        HEAP32[$ap>>2] = $arglist_next12;
        $92 = ($91|0)<(0);
        $93 = $92 << 31 >> 31;
        $95 = $93;$96 = $91;
        break;
       } else {
        $arglist_current8 = HEAP32[$ap>>2]|0;
        $85 = $arglist_current8;
        $86 = $85;
        $87 = HEAP32[$86>>2]|0;
        $88 = (($85) + 4)|0;
        $89 = $88;
        $90 = HEAP32[$89>>2]|0;
        $arglist_next9 = (($arglist_current8) + 8|0);
        HEAP32[$ap>>2] = $arglist_next9;
        $95 = $90;$96 = $87;
        break;
       }
      }
     } while(0);
     $94 = ($95|0)<(0);
     if ($94) {
      $97 = (_i64Subtract(0,0,($96|0),($95|0))|0);
      $98 = tempRet0;
      $112 = $97;$114 = $98;$prefix$0 = 45;
      break;
     }
     $99 = ($flag_plussign$130<<24>>24)==(0);
     if ($99) {
      $100 = ($flag_blanksign$129<<24>>24)==(0);
      $$ = $100 ? 0 : 32;
      $112 = $96;$114 = $95;$prefix$0 = $$;
     } else {
      $112 = $96;$114 = $95;$prefix$0 = 43;
     }
    }
   } while(0);
   $111 = ($112|0)==(0);
   $113 = ($114|0)==(0);
   $115 = $111 & $113;
   $116 = ($flag_zeropad$126<<24>>24)==(0);
   if ($116) {
    $precision$4 = $precision$3;
   } else {
    $117 = ($prefix$0<<24>>24)!=(0);
    $118 = $117&1;
    $119 = (($width$3) - ($118))|0;
    $120 = ($precision$3|0)<($119|0);
    $$precision$3 = $120 ? $119 : $precision$3;
    $precision$4 = $$precision$3;
   }
   $121 = ($precision$4|0)<(60);
   if ($121) {
    $nOut$0 = 70;$zExtra$0 = 0;$zOut$0 = $buf;
   } else {
    $122 = (($precision$4) + 10)|0;
    $123 = (_sqlite3Malloc($122)|0);
    $124 = ($123|0)==(0|0);
    if ($124) {
     label = 65;
     break;
    } else {
     $nOut$0 = $122;$zExtra$0 = $123;$zOut$0 = $123;
    }
   }
   $125 = (($nOut$0) + -1)|0;
   $126 = (($zOut$0) + ($125)|0);
   $127 = ($xtype$0<<24>>24)==(16);
   if ($127) {
    $128 = (___uremdi3(($112|0),($114|0),10,0)|0);
    $129 = tempRet0;
    $130 = ($128>>>0)>(3);
    if ($130) {
     label = 69;
    } else {
     $131 = (___udivdi3(($112|0),($114|0),10,0)|0);
     $132 = tempRet0;
     $133 = (___uremdi3(($131|0),($132|0),10,0)|0);
     $134 = tempRet0;
     $135 = ($133|0)==(1);
     $136 = ($134|0)==(0);
     $137 = $135 & $136;
     if ($137) {
      label = 69;
     } else {
      $x$0 = $128;
     }
    }
    if ((label|0) == 69) {
     label = 0;
     $x$0 = 0;
    }
    $138 = $x$0 << 1;
    $139 = $138 | 1;
    $140 = (38488 + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $$sum12 = (($nOut$0) + -2)|0;
    $142 = (($zOut$0) + ($$sum12)|0);
    HEAP8[$142>>0] = $141;
    $143 = (38488 + ($138)|0);
    $144 = HEAP8[$143>>0]|0;
    $$sum13 = (($nOut$0) + -3)|0;
    $145 = (($zOut$0) + ($$sum13)|0);
    HEAP8[$145>>0] = $144;
    $bufpt$2 = $145;
   } else {
    $bufpt$2 = $126;
   }
   $146 = (($infop$0) + 4|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = (($infop$0) + 1|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = $112;$153 = $114;$bufpt$3 = $bufpt$2;
   while(1) {
    $154 = (___uremdi3(($152|0),($153|0),($151|0),0)|0);
    $155 = tempRet0;
    $$sum = (($154) + ($148))|0;
    $156 = (38504 + ($$sum)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = (($bufpt$3) + -1|0);
    HEAP8[$158>>0] = $157;
    $159 = (___udivdi3(($152|0),($153|0),($151|0),0)|0);
    $160 = tempRet0;
    $161 = ($159|0)==(0);
    $162 = ($160|0)==(0);
    $163 = $161 & $162;
    if ($163) {
     break;
    } else {
     $152 = $159;$153 = $160;$bufpt$3 = $158;
    }
   }
   $164 = $126;
   $165 = $158;
   $166 = (($precision$4) - ($164))|0;
   $167 = (($166) + ($165))|0;
   $168 = ($167|0)>(0);
   if ($168) {
    $169 = (($164) - ($precision$4))|0;
    $170 = (($169) - ($165))|0;
    $bufpt$4127 = $158;$idx$1126 = $167;
    while(1) {
     $171 = (($bufpt$4127) + -1|0);
     HEAP8[$171>>0] = 48;
     $172 = (($idx$1126) + -1)|0;
     $173 = ($172|0)>(0);
     if ($173) {
      $bufpt$4127 = $171;$idx$1126 = $172;
     } else {
      break;
     }
    }
    $$sum182 = (($170) + -1)|0;
    $scevgep179 = (($bufpt$3) + ($$sum182)|0);
    $bufpt$4$lcssa = $scevgep179;
   } else {
    $bufpt$4$lcssa = $158;
   }
   $174 = ($prefix$0<<24>>24)==(0);
   if ($174) {
    $bufpt$5 = $bufpt$4$lcssa;
   } else {
    $175 = (($bufpt$4$lcssa) + -1|0);
    HEAP8[$175>>0] = $prefix$0;
    $bufpt$5 = $175;
   }
   $176 = ($flag_alternateform$128<<24>>24)==(0);
   $177 = $115 | $176;
   if ($177) {
    $bufpt$7 = $bufpt$5;
   } else {
    $178 = (($infop$0) + 5|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = ($179<<24>>24)==(0);
    if ($180) {
     $bufpt$7 = $bufpt$5;
    } else {
     $181 = $179&255;
     $182 = (38544 + ($181)|0);
     if ((($179<<24>>24) == 3) | (($179<<24>>24) == 6)) {
      $bufpt$7 = $bufpt$5;
     } else {
      $183 = HEAP8[$182>>0]|0;
      $185 = $183;$bufpt$6134 = $bufpt$5;$pre$0133 = $182;
      while(1) {
       $184 = (($bufpt$6134) + -1|0);
       HEAP8[$184>>0] = $185;
       $186 = (($pre$0133) + 1|0);
       $187 = HEAP8[$186>>0]|0;
       $188 = ($187<<24>>24)==(0);
       if ($188) {
        $bufpt$7 = $184;
        break;
       } else {
        $185 = $187;$bufpt$6134 = $184;$pre$0133 = $186;
       }
      }
     }
    }
   }
   $189 = $bufpt$7;
   $190 = (($164) - ($189))|0;
   $bufpt$23 = $bufpt$7;$length$2 = $190;$width$4 = $width$3;$zExtra$4 = $zExtra$0;
  }
  $415 = ($flag_leftjustify$3<<24>>24)!=(0);
  if (!($415)) {
   $416 = (($width$4) - ($length$2))|0;
   $417 = ($416|0)>(0);
   if ($417) {
    _sqlite3AppendSpace($pAccum,$416);
   }
  }
  $418 = ($length$2|0)>(0);
  if ($418) {
   _sqlite3StrAccumAppend($pAccum,$bufpt$23,$length$2);
  }
  if ($415) {
   $419 = (($width$4) - ($length$2))|0;
   $420 = ($419|0)>(0);
   if ($420) {
    _sqlite3AppendSpace($pAccum,$419);
   }
  }
  $421 = ($zExtra$4|0)==(0|0);
  if (!($421)) {
   _sqlite3_free($zExtra$4);
  }
  $422 = (($$9) + 1|0);
  $$0 = $422;$bufpt$0 = $bufpt$23;
 }
 if ((label|0) == 11) {
  _sqlite3StrAccumAppend($pAccum,38336,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 65) {
  _setStrAccumError($pAccum,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 120) {
  _setStrAccumError($pAccum,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 185) {
  _setStrAccumError($pAccum,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 213) {
  STACKTOP = sp;return;
 }
}
function _sqlite3StrAccumFinish($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = (($p) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($1) + ($4)|0);
   HEAP8[$5>>0] = 0;
   $6 = (($p) + 24|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if (!($8)) {
    $9 = HEAP32[$0>>2]|0;
    $10 = (($p) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = ($7<<24>>24)==(1);
     if ($13) {
      $14 = HEAP32[$p>>2]|0;
      $15 = HEAP32[$3>>2]|0;
      $16 = (($15) + 1)|0;
      $17 = (_sqlite3DbMallocRaw($14,$16)|0);
      $storemerge = $17;
     } else {
      $18 = HEAP32[$3>>2]|0;
      $19 = (($18) + 1)|0;
      $20 = (_sqlite3_malloc($19)|0);
      $storemerge = $20;
     }
     HEAP32[$0>>2] = $storemerge;
     $21 = ($storemerge|0)==(0|0);
     if ($21) {
      _setStrAccumError($p,1);
      break;
     } else {
      $22 = HEAP32[$10>>2]|0;
      $23 = HEAP32[$3>>2]|0;
      $24 = (($23) + 1)|0;
      _memcpy(($storemerge|0),($22|0),($24|0))|0;
      break;
     }
    }
   }
  }
 } while(0);
 $25 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _sqlite3_mprintf($zFormat,$varargs) {
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = (_sqlite3_initialize()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$ap>>2] = $varargs;
 $2 = (_sqlite3_vmprintf($zFormat,$ap)|0);
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_vsnprintf($n,$zBuf,$zFormat,$ap) {
 $n = $n|0;
 $zBuf = $zBuf|0;
 $zFormat = $zFormat|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $acc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $acc = sp;
 $0 = ($n|0)<(1);
 if ($0) {
  $$0 = $zBuf;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3StrAccumInit($acc,$zBuf,$n,0);
 $1 = (($acc) + 24|0);
 HEAP8[$1>>0] = 0;
 _sqlite3VXPrintf($acc,0,$zFormat,$ap);
 $2 = (_sqlite3StrAccumFinish($acc)|0);
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_snprintf($n,$zBuf,$zFormat,$varargs) {
 $n = $n|0;
 $zBuf = $zBuf|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_sqlite3_vsnprintf($n,$zBuf,$zFormat,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_log($iErrCode,$zFormat,$varargs) {
 $iErrCode = $iErrCode|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = HEAP32[((384 + 252|0))>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP32[$ap>>2] = $varargs;
 _renderLogMsg($iErrCode,$zFormat,$ap);
 STACKTOP = sp;return;
}
function _renderLogMsg($iErrCode,$zFormat,$ap) {
 $iErrCode = $iErrCode|0;
 $zFormat = $zFormat|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $acc = 0, $zMsg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $acc = sp;
 $zMsg = sp + 28|0;
 _sqlite3StrAccumInit($acc,$zMsg,210,0);
 $0 = (($acc) + 24|0);
 HEAP8[$0>>0] = 0;
 _sqlite3VXPrintf($acc,0,$zFormat,$ap);
 $1 = HEAP32[((384 + 252|0))>>2]|0;
 $2 = HEAP32[((384 + 256|0))>>2]|0;
 $3 = (_sqlite3StrAccumFinish($acc)|0);
 FUNCTION_TABLE_viii[$1 & 255]($2,$iErrCode,$3);
 STACKTOP = sp;return;
}
function _sqlite3_randomness($N,$pBuf) {
 $N = $N|0;
 $pBuf = $pBuf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $i$03 = 0, $i$12 = 0, $k = 0, $zBuf$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $k = sp;
 $0 = ($N|0)<(1);
 if ($0) {
  HEAP8[696>>0] = 0;
  STACKTOP = sp;return;
 }
 $1 = HEAP8[696>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  HEAP8[((696 + 2|0))>>0] = 0;
  HEAP8[((696 + 1|0))>>0] = 0;
  $3 = (_sqlite3_vfs_find(0)|0);
  _sqlite3OsRandomness($3,$k);
  $i$03 = 0;
  while(1) {
   $4 = $i$03&255;
   $5 = ((696 + ($i$03)|0) + 3|0);
   HEAP8[$5>>0] = $4;
   $6 = (($i$03) + 1)|0;
   $exitcond4 = ($6|0)==(256);
   if ($exitcond4) {
    $i$12 = 0;
    break;
   } else {
    $i$03 = $6;
   }
  }
  while(1) {
   $7 = ((696 + ($i$12)|0) + 3|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = (($k) + ($i$12)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = (($12) + ($9))|0;
   $14 = HEAP8[((696 + 2|0))>>0]|0;
   $15 = $14&255;
   $16 = (($13) + ($15))|0;
   $17 = $16&255;
   HEAP8[((696 + 2|0))>>0] = $17;
   $18 = $16 & 255;
   $19 = ((696 + ($18)|0) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = HEAP8[$7>>0]|0;
   HEAP8[$19>>0] = $21;
   HEAP8[$7>>0] = $20;
   $22 = (($i$12) + 1)|0;
   $exitcond = ($22|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $i$12 = $22;
   }
  }
  HEAP8[696>>0] = 1;
  $$0 = $N;$zBuf$0 = $pBuf;
 } else {
  $$0 = $N;$zBuf$0 = $pBuf;
 }
 while(1) {
  $23 = HEAP8[((696 + 1|0))>>0]|0;
  $24 = (($23) + 1)<<24>>24;
  HEAP8[((696 + 1|0))>>0] = $24;
  $25 = $24&255;
  $26 = ((696 + ($25)|0) + 3|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = HEAP8[((696 + 2|0))>>0]|0;
  $30 = $29&255;
  $31 = (($30) + ($28))|0;
  $32 = $31&255;
  HEAP8[((696 + 2|0))>>0] = $32;
  $33 = $31 & 255;
  $34 = ((696 + ($33)|0) + 3|0);
  $35 = HEAP8[$34>>0]|0;
  HEAP8[$26>>0] = $35;
  $36 = HEAP8[((696 + 2|0))>>0]|0;
  $37 = $36&255;
  $38 = ((696 + ($37)|0) + 3|0);
  HEAP8[$38>>0] = $27;
  $39 = HEAP8[((696 + 1|0))>>0]|0;
  $40 = $39&255;
  $41 = ((696 + ($40)|0) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($43) + ($28))|0;
  $45 = $44 & 255;
  $46 = ((696 + ($45)|0) + 3|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = (($zBuf$0) + 1|0);
  HEAP8[$zBuf$0>>0] = $47;
  $49 = (($$0) + -1)|0;
  $50 = ($49|0)==(0);
  if ($50) {
   break;
  } else {
   $$0 = $49;$zBuf$0 = $48;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3OsRandomness($pVfs,$zBufOut) {
 $pVfs = $pVfs|0;
 $zBufOut = $zBufOut|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 (FUNCTION_TABLE_iiii[$1 & 255]($pVfs,256,$zBufOut)|0);
 STACKTOP = sp;return;
}
function _sqlite3_stricmp($zLeft,$zRight) {
 $zLeft = $zLeft|0;
 $zRight = $zRight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$01 = 0, $b$0$lcssa = 0, $b$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$zLeft>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $16 = 0;$b$0$lcssa = $zRight;
  } else {
   $3 = $0;$a$01 = $zLeft;$b$02 = $zRight;
   while(1) {
    $2 = $3&255;
    $4 = (960 + ($2)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = HEAP8[$b$02>>0]|0;
    $7 = $6&255;
    $8 = (960 + ($7)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($5<<24>>24)==($9<<24>>24);
    if (!($10)) {
     $16 = $3;$b$0$lcssa = $b$02;
     break L1;
    }
    $11 = (($a$01) + 1|0);
    $12 = (($b$02) + 1|0);
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     $16 = 0;$b$0$lcssa = $12;
     break;
    } else {
     $3 = $13;$a$01 = $11;$b$02 = $12;
    }
   }
  }
 } while(0);
 $15 = $16&255;
 $17 = (960 + ($15)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = HEAP8[$b$0$lcssa>>0]|0;
 $21 = $20&255;
 $22 = (960 + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($19) - ($24))|0;
 STACKTOP = sp;return ($25|0);
}
function _sqlite3_os_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_sqlite3_vfs_register(1216,1)|0);
 (_sqlite3_vfs_register(((1216 + 88|0)),0)|0);
 (_sqlite3_vfs_register(((1216 + 176|0)),0)|0);
 (_sqlite3_vfs_register(((1216 + 264|0)),0)|0);
 STACKTOP = sp;return 0;
}
function _unixOpen($pVfs,$zPath,$pFile,$flags,$pOutFlags) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $pFile = $pFile|0;
 $flags = $flags|0;
 $pOutFlags = $pOutFlags|0;
 var $$0 = 0, $$027 = 0, $$1 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $brmerge3 = 0, $ctrlFlags$1 = 0, $ctrlFlags$1$ = 0, $ctrlFlags$3 = 0, $fd$0 = 0, $fd$25 = 0;
 var $fd$3 = 0, $gid = 0, $isReadonly$06 = 0, $isReadonly$1 = 0, $openFlags$3 = 0, $openFlags$312 = 0, $openFlags$39 = 0, $openMode = 0, $pUnused$0 = 0, $rc$0 = 0, $uid = 0, $zName$0$ph = 0, $zName$010 = 0, $zName$011 = 0, $zTmpname = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $zTmpname = sp + 12|0;
 $openMode = sp + 8|0;
 $uid = sp + 4|0;
 $gid = sp;
 $0 = $flags & -256;
 $1 = $flags & 16;
 $2 = $flags & 8;
 $3 = $flags & 4;
 $4 = $flags & 1;
 $5 = $flags & 2;
 $6 = ($3|0)==(0);
 if ($6) {
  $62 = 0;
 } else {
  if ((($0|0) == 524288) | (($0|0) == 2048) | (($0|0) == 16384)) {
   $62 = 1;
  } else {
   $62 = 0;
  }
 }
 $7 = HEAP32[38072>>2]|0;
 $8 = (_getgid()|0);
 $9 = ($7|0)==($8|0);
 if (!($9)) {
  $10 = (_getgid()|0);
  HEAP32[38072>>2] = $10;
  _sqlite3_randomness(0,0);
 }
 dest=$pFile+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = ($0|0)==(256);
 if ($11) {
  $12 = (_findReusableFd($zPath,$flags)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $15 = (_sqlite3_malloc(12)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    $fd$0 = -1;$pUnused$0 = $15;
   }
  } else {
   $14 = HEAP32[$12>>2]|0;
   $fd$0 = $14;$pUnused$0 = $12;
  }
  $24 = (($pFile) + 28|0);
  HEAP32[$24>>2] = $pUnused$0;
  $25 = $3 << 4;
  $26 = $25 | $5;
  $27 = ($1|0)!=(0);
  $28 = $26 | 131200;
  $openFlags$3 = $27 ? $28 : $26;
  $29 = ($fd$0|0)<(0);
  if ($29) {
   $38 = $27;$openFlags$312 = $openFlags$3;$zName$010 = $zPath;
   label = 14;
  } else {
   $$1 = $flags;$fd$3 = $fd$0;$isReadonly$1 = $4;$zName$011 = $zPath;
   label = 21;
  }
 } else {
  $17 = ($zPath|0)==(0|0);
  if ($17) {
   $18 = (_unixGetTempname(514,$zTmpname)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $zName$0$ph = $zTmpname;
   } else {
    $$0 = $18;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $zName$0$ph = $zPath;
  }
  $20 = $3 << 4;
  $21 = $20 | $5;
  $22 = ($1|0)!=(0);
  $23 = $21 | 131200;
  $openFlags$39 = $22 ? $23 : $21;
  $38 = $22;$openFlags$312 = $openFlags$39;$zName$010 = $zName$0$ph;
  label = 14;
 }
 L20: do {
  if ((label|0) == 14) {
   $30 = (_findCreateFileMode($zName$010,$flags,$openMode,$uid,$gid)|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    $$0 = $30;
    STACKTOP = sp;return ($$0|0);
   }
   $32 = HEAP32[$openMode>>2]|0;
   $33 = (_robust_open($zName$010,$openFlags$312,$32)|0);
   $34 = ($33|0)<(0);
   do {
    if ($34) {
     $35 = (___errno_location()|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(21);
     $$not = ($5|0)==(0);
     $brmerge = $37 | $$not;
     $brmerge3 = $brmerge | $38;
     if (!($brmerge3)) {
      $39 = $flags & -8;
      $40 = $openFlags$312 & 131200;
      $41 = $39 | 1;
      $42 = (_robust_open($zName$010,$40,$32)|0);
      $43 = ($42|0)<(0);
      if (!($43)) {
       $$027 = $41;$fd$25 = $42;$isReadonly$06 = 1;
       break;
      }
     }
     _sqlite3CantopenError(29403);
     $44 = (_unixLogErrorAtLine(14,37504,$zName$010,29403)|0);
     $rc$0 = $44;
     break L20;
    } else {
     $$027 = $flags;$fd$25 = $33;$isReadonly$06 = $4;
    }
   } while(0);
   $45 = $$027 & 526336;
   $46 = ($45|0)==(0);
   if ($46) {
    $$1 = $$027;$fd$3 = $fd$25;$isReadonly$1 = $isReadonly$06;$zName$011 = $zName$010;
    label = 21;
   } else {
    $47 = HEAP32[((37176 + 244|0))>>2]|0;
    $48 = HEAP32[$uid>>2]|0;
    $49 = HEAP32[$gid>>2]|0;
    (FUNCTION_TABLE_iiii[$47 & 255]($fd$25,$48,$49)|0);
    $$1 = $$027;$fd$3 = $fd$25;$isReadonly$1 = $isReadonly$06;$zName$011 = $zName$010;
    label = 21;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $50 = ($pOutFlags|0)==(0|0);
  if (!($50)) {
   HEAP32[$pOutFlags>>2] = $$1;
  }
  $51 = (($pFile) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   HEAP32[$52>>2] = $fd$3;
   $54 = (($52) + 4|0);
   HEAP32[$54>>2] = $$1;
  }
  $55 = ($2|0)==(0);
  if (!($55)) {
   $56 = HEAP32[((37176 + 196|0))>>2]|0;
   (FUNCTION_TABLE_ii[$56 & 255]($zName$011)|0);
  }
  $57 = $2 << 2;
  $58 = ($isReadonly$1|0)==(0);
  $59 = $57 | 2;
  $ctrlFlags$1 = $58 ? $57 : $59;
  $60 = $ctrlFlags$1 | 128;
  $ctrlFlags$1$ = $11 ? $ctrlFlags$1 : $60;
  $61 = $ctrlFlags$1$ | 8;
  $ctrlFlags$3 = $62 ? $61 : $ctrlFlags$1$;
  $63 = $$1 & 64;
  $64 = $ctrlFlags$3 | $63;
  $65 = (_fillInUnixFile($pVfs,$fd$3,$pFile,$zPath,$64)|0);
  $rc$0 = $65;
 }
 $66 = ($rc$0|0)==(0);
 if ($66) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = (($pFile) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 _sqlite3_free($68);
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _unixDelete($NotUsed,$zPath,$dirSync) {
 $NotUsed = $NotUsed|0;
 $zPath = $zPath|0;
 $dirSync = $dirSync|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, $rc$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fd = sp;
 $0 = HEAP32[((37176 + 196|0))>>2]|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255]($zPath)|0);
 $2 = ($1|0)==(-1);
 do {
  if ($2) {
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(2);
   if ($5) {
    $$0 = 5898;
   } else {
    $6 = (_unixLogErrorAtLine(2570,37640,$zPath,29531)|0);
    $$0 = $6;
   }
  } else {
   $7 = $dirSync & 1;
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = HEAP32[((37176 + 208|0))>>2]|0;
    $10 = (FUNCTION_TABLE_iii[$9 & 255]($zPath,$fd)|0);
    if ((($10|0) == 14)) {
     $$0 = 0;
     break;
    } else if (!((($10|0) == 0))) {
     $$0 = $10;
     break;
    }
    $11 = HEAP32[$fd>>2]|0;
    $12 = (_fsync(($11|0))|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $rc$1 = 0;
    } else {
     $14 = (_unixLogErrorAtLine(1290,38104,$zPath,29546)|0);
     $rc$1 = $14;
    }
    $15 = HEAP32[$fd>>2]|0;
    _robust_close(0,$15,29548);
    $$0 = $rc$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _unixAccess($NotUsed,$zPath,$flags,$pResOut) {
 $NotUsed = $NotUsed|0;
 $zPath = $zPath|0;
 $flags = $flags|0;
 $pResOut = $pResOut|0;
 var $$not = 0, $$not1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amode$0 = 0, $brmerge = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 if ((($flags|0) == 2)) {
  $amode$0 = 4;
 } else if ((($flags|0) == 1)) {
  $amode$0 = 6;
 } else {
  $amode$0 = 0;
 }
 $0 = HEAP32[((37176 + 28|0))>>2]|0;
 $1 = (FUNCTION_TABLE_iii[$0 & 255]($zPath,$amode$0)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 HEAP32[$pResOut>>2] = $3;
 $$not = ($flags|0)!=(0);
 $$not1 = $2 ^ 1;
 $brmerge = $$not | $$not1;
 if ($brmerge) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP32[((37176 + 52|0))>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 255]($zPath,$buf)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return 0;
 }
 $7 = (($buf) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return 0;
 }
 HEAP32[$pResOut>>2] = 0;
 STACKTOP = sp;return 0;
}
function _unixFullPathname($pVfs,$zPath,$nOut,$zOut) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $nOut = $nOut|0;
 $zOut = $zOut|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($nOut) + -1)|0;
 $1 = (($zOut) + ($0)|0);
 HEAP8[$1>>0] = 0;
 $2 = HEAP8[$zPath>>0]|0;
 $3 = ($2<<24>>24)==(47);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $zPath;
  (_sqlite3_snprintf($nOut,$zOut,1712,$vararg_buffer)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[((37176 + 40|0))>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 255]($zOut,$0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _sqlite3CantopenError(29633);
  $7 = (_unixLogErrorAtLine(14,37512,$zPath,29633)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (_strlen(($zOut|0))|0);
  $9 = (($nOut) - ($8))|0;
  $10 = (($zOut) + ($8)|0);
  HEAP32[$vararg_buffer1>>2] = $zPath;
  (_sqlite3_snprintf($9,$10,38096,$vararg_buffer1)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _unixRandomness($NotUsed,$nBuf,$zBuf) {
 $NotUsed = $NotUsed|0;
 $nBuf = $nBuf|0;
 $zBuf = $zBuf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $t = sp;
 _memset(($zBuf|0),0,($nBuf|0))|0;
 $0 = (_getgid()|0);
 HEAP32[38072>>2] = $0;
 $1 = (_robust_open(38080,0,0)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  (_time(($t|0))|0);
  $3 = HEAP32[$t>>2]|0;
  HEAP8[$zBuf>>0]=$3&255;HEAP8[$zBuf+1>>0]=($3>>8)&255;HEAP8[$zBuf+2>>0]=($3>>16)&255;HEAP8[$zBuf+3>>0]=$3>>24;
  $4 = (($zBuf) + 4|0);
  $5 = HEAP32[38072>>2]|0;
  HEAP8[$4>>0]=$5&255;HEAP8[$4+1>>0]=($5>>8)&255;HEAP8[$4+2>>0]=($5>>16)&255;HEAP8[$4+3>>0]=$5>>24;
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $6 = HEAP32[((37176 + 100|0))>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($1,$zBuf,$nBuf)|0);
  $8 = ($7|0)<(0);
  if (!($8)) {
   break;
  }
  $9 = (___errno_location()|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(4);
  if (!($11)) {
   break;
  }
 }
 _robust_close(0,$1,29738);
 $$0 = $nBuf;
 STACKTOP = sp;return ($$0|0);
}
function _unixSleep($NotUsed,$microseconds) {
 $NotUsed = $NotUsed|0;
 $microseconds = $microseconds|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($microseconds) + 999999)|0;
 $1 = (($0|0) / 1000000)&-1;
 (_sleep(($1|0))|0);
 $2 = ($1*1000000)|0;
 STACKTOP = sp;return ($2|0);
}
function _unixCurrentTime($NotUsed,$prNow) {
 $NotUsed = $NotUsed|0;
 $prNow = $prNow|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 $0 = $i;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (_unixCurrentTimeInt64(0,$i)|0);
 $5 = $i;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($7>>>0)) + (4294967296.0*(+($10|0)));
 $12 = $11 / 8.64E+7;
 HEAPF64[$prNow>>3] = $12;
 STACKTOP = sp;return ($4|0);
}
function _unixGetLastError($NotUsed,$NotUsed2,$NotUsed3) {
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 $NotUsed3 = $NotUsed3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _unixCurrentTimeInt64($NotUsed,$piNow) {
 $NotUsed = $NotUsed|0;
 $piNow = $piNow|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $rc$0 = 0, $sNow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sNow = sp;
 $0 = (_gettimeofday(($sNow|0),(0|0))|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $rc$0 = 1;
  STACKTOP = sp;return ($rc$0|0);
 }
 $2 = HEAP32[$sNow>>2]|0;
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (___muldi3(($2|0),($4|0),1000,0)|0);
 $6 = tempRet0;
 $7 = (_i64Add(($5|0),($6|0),1045635584,49096)|0);
 $8 = tempRet0;
 $9 = (($sNow) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10|0) / 1000)&-1;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = (_i64Add(($7|0),($8|0),($11|0),($13|0))|0);
 $15 = tempRet0;
 $16 = $piNow;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _unixSetSystemCall($pNotUsed,$zName,$pNewFunc) {
 $pNotUsed = $pNotUsed|0;
 $zName = $zName|0;
 $pNewFunc = $pNewFunc|0;
 var $$pNewFunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$01 = 0, $i$15 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($zName|0)==(0|0);
 if ($0) {
  $i$01 = 0;
  while(1) {
   $1 = ((37176 + (($i$01*12)|0)|0) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    $4 = ((37176 + (($i$01*12)|0)|0) + 4|0);
    HEAP32[$4>>2] = $2;
   }
   $5 = (($i$01) + 1)|0;
   $exitcond = ($5|0)==(24);
   if ($exitcond) {
    $rc$0 = 0;
    break;
   } else {
    $i$01 = $5;
   }
  }
  STACKTOP = sp;return ($rc$0|0);
 } else {
  $i$15 = 0;
 }
 while(1) {
  $8 = (37176 + (($i$15*12)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strcmp($zName,$9)|0);
  $11 = ($10|0)==(0);
  $7 = (($i$15) + 1)|0;
  if ($11) {
   break;
  }
  $6 = ($7>>>0)<(24);
  if ($6) {
   $i$15 = $7;
  } else {
   $rc$0 = 12;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($rc$0|0);
 }
 $12 = ((37176 + (($i$15*12)|0)|0) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = ((37176 + (($i$15*12)|0)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$12>>2] = $16;
  $18 = $16;
 } else {
  $18 = $13;
 }
 $17 = ($pNewFunc|0)==(0|0);
 $$pNewFunc = $17 ? $18 : $pNewFunc;
 $19 = ((37176 + (($i$15*12)|0)|0) + 4|0);
 HEAP32[$19>>2] = $$pNewFunc;
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _unixGetSystemCall($pNotUsed,$zName) {
 $pNotUsed = $pNotUsed|0;
 $zName = $zName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $2 = (37176 + (($i$02*12)|0)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_strcmp($zName,$3)|0);
  $5 = ($4|0)==(0);
  $1 = (($i$02) + 1)|0;
  if ($5) {
   break;
  }
  $0 = ($1>>>0)<(24);
  if ($0) {
   $i$02 = $1;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((37176 + (($i$02*12)|0)|0) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _unixNextSystemCall($p,$zName) {
 $p = $p|0;
 $zName = $zName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$2 = 0, $i$2$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($zName|0)==(0|0);
 L1: do {
  if ($0) {
   $i$2$in = -1;
  } else {
   $i$03 = 0;
   while(1) {
    $3 = (37176 + (($i$03*12)|0)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (_strcmp($zName,$4)|0);
    $6 = ($5|0)==(0);
    $2 = (($i$03) + 1)|0;
    if ($6) {
     $i$2$in = $i$03;
     break L1;
    }
    $1 = ($2|0)<(23);
    if ($1) {
     $i$03 = $2;
    } else {
     $i$2$in = $2;
     break;
    }
   }
  }
 } while(0);
 while(1) {
  $i$2 = (($i$2$in) + 1)|0;
  $7 = ($i$2|0)<(24);
  if (!($7)) {
   $$0 = 0;
   label = 7;
   break;
  }
  $8 = ((37176 + (($i$2*12)|0)|0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $i$2$in = $i$2;
  } else {
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (37176 + (($i$2*12)|0)|0);
 $12 = HEAP32[$11>>2]|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Error($db,$err_code,$zFormat,$varargs) {
 $db = $db|0;
 $err_code = $err_code|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = (($db) + 52|0);
 HEAP32[$0>>2] = $err_code;
 $1 = ($zFormat|0)==(0|0);
 $$phi$trans$insert = (($db) + 224|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $2 = ($$pre|0)==(0|0);
 if ($1) {
  if ($2) {
   STACKTOP = sp;return;
  }
  _sqlite3ValueSetNull($$pre);
  STACKTOP = sp;return;
 }
 if ($2) {
  $3 = (_sqlite3ValueNew($db)|0);
  HEAP32[$$phi$trans$insert>>2] = $3;
  $4 = ($3|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$ap>>2] = $varargs;
 $5 = (_sqlite3VMPrintf($db,$zFormat,$ap)|0);
 $6 = HEAP32[$$phi$trans$insert>>2]|0;
 _sqlite3ValueSetStr($6,$5,1,145);
 STACKTOP = sp;return;
}
function _sqlite3MallocZero($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Malloc($n)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _memset(($0|0),0,($n|0))|0;
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_backup_step($p,$nPage) {
 $p = $p|0;
 $nPage = $nPage|0;
 var $$ = 0, $$9 = 0, $$idx$val$idx$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx12$val$idx$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx13$val$idx$val = 0, $$idx14 = 0, $$idx14$val = 0, $$idx14$val$idx = 0, $$idx14$val$idx$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx15$val$idx = 0, $$idx15$val$idx$val = 0, $$idx16 = 0, $$idx16$val = 0, $$idx17 = 0;
 var $$idx17$val = 0, $$idx18$val$idx = 0, $$idx18$val$idx$val = 0, $$idx19$val = 0, $$idx20 = 0, $$idx20$val = 0, $$idx21 = 0, $$idx21$val = 0, $$idx22$val = 0, $$idx23 = 0, $$idx23$val = 0, $$idx24 = 0, $$idx24$val = 0, $$idx25 = 0, $$idx25$val = 0, $$idx26$val = 0, $$idx27 = 0, $$idx27$val = 0, $$idx28 = 0, $$idx28$val = 0;
 var $$lcssa = 0, $$pre = 0, $$pre62 = 0, $$rc$17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bCloseTrans$0 = 0, $iPg$052 = 0, $ii$056 = 0, $nDstPage = 0, $nSrcPage$037 = 0, $or$cond = 0, $or$cond48 = 0, $or$cond5 = 0, $or$cond5$not = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $pPg = 0, $pSrcPg = 0, $pSrcPg1 = 0, $rc$12 = 0, $rc$13$lcssa = 0;
 var $rc$14 = 0, $rc$16 = 0, $rc$17 = 0, $rc$19 = 0, $rc$2 = 0, $rc$3 = 0, $rc$4$lcssa = 0, $rc$457 = 0, $rc$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pSrcPg = sp + 12|0;
 $nDstPage = sp + 8|0;
 $pPg = sp + 4|0;
 $pSrcPg1 = sp;
 $0 = (($p) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx19$val = HEAP32[$1>>2]|0;
 $$idx20 = (($1) + 4|0);
 $$idx20$val = HEAP32[$$idx20>>2]|0;
 _sqlite3BtreeEnter($$idx19$val,$$idx20$val);
 $2 = (($p) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_isFatalError($3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $rc$19 = $3;
  STACKTOP = sp;return ($rc$19|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $$idx13 = (($6) + 4|0);
 $$idx13$val = HEAP32[$$idx13>>2]|0;
 $$idx13$val$idx$val = HEAP32[$$idx13$val>>2]|0;
 $7 = (_sqlite3BtreePager($$idx13$val$idx$val)|0);
 $8 = (($p) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $$idx12 = (($9) + 4|0);
 $$idx12$val = HEAP32[$$idx12>>2]|0;
 $$idx12$val$idx$val = HEAP32[$$idx12$val>>2]|0;
 $10 = (_sqlite3BtreePager($$idx12$val$idx$val)|0);
 $11 = HEAP32[$p>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  label = 4;
 } else {
  $13 = (($$idx13$val) + 20|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(2);
  if ($15) {
   $bCloseTrans$0 = 0;$rc$2 = 5;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $16 = (($p) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (_sqlite3BtreeBeginTrans($9,2)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $bCloseTrans$0 = 0;$rc$2 = $19;
     break;
    }
    HEAP32[$16>>2] = 1;
    $21 = HEAP32[$8>>2]|0;
    $22 = (($p) + 8|0);
    $$idx22$val = HEAP32[$21>>2]|0;
    $$idx23 = (($21) + 4|0);
    $$idx23$val = HEAP32[$$idx23>>2]|0;
    _sqlite3BtreeGetMeta($$idx22$val,$$idx23$val,1,$22);
    $$pre = HEAP32[$0>>2]|0;
    $23 = $$pre;
   } else {
    $23 = $6;
   }
   $$idx24 = (($23) + 8|0);
   $$idx24$val = HEAP8[$$idx24>>0]|0;
   $24 = (_sqlite3BtreeIsInReadTrans($$idx24$val)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = (_sqlite3BtreeBeginTrans($23,0)|0);
    $bCloseTrans$0 = 1;$rc$2 = $26;
   } else {
    $bCloseTrans$0 = 0;$rc$2 = 0;
   }
  }
 } while(0);
 $27 = HEAP32[$0>>2]|0;
 $$idx15 = (($27) + 4|0);
 $$idx15$val = HEAP32[$$idx15>>2]|0;
 $$idx15$val$idx = (($$idx15$val) + 32|0);
 $$idx15$val$idx$val = HEAP32[$$idx15$val$idx>>2]|0;
 $28 = (_sqlite3BtreeGetPageSize($$idx15$val$idx$val)|0);
 $29 = HEAP32[$8>>2]|0;
 $$idx14 = (($29) + 4|0);
 $$idx14$val = HEAP32[$$idx14>>2]|0;
 $$idx14$val$idx = (($$idx14$val) + 32|0);
 $$idx14$val$idx$val = HEAP32[$$idx14$val$idx>>2]|0;
 $30 = (_sqlite3BtreeGetPageSize($$idx14$val$idx$val)|0);
 $$idx$val$idx$val = HEAP32[$$idx14$val>>2]|0;
 $31 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
 $$idx25 = (($31) + 5|0);
 $$idx25$val = HEAP8[$$idx25>>0]|0;
 $32 = (_sqlite3PagerGetJournalMode($$idx25$val)|0);
 $33 = ($rc$2|0)==(0);
 $34 = ($32|0)==(5);
 $or$cond5 = $33 & $34;
 $or$cond5$not = $or$cond5 ^ 1;
 $35 = ($28|0)==($30|0);
 $or$cond6 = $35 | $or$cond5$not;
 $rc$3 = $or$cond6 ? $rc$2 : 8;
 $$idx18$val$idx = (($$idx15$val) + 44|0);
 $$idx18$val$idx$val = HEAP32[$$idx18$val$idx>>2]|0;
 $36 = (_sqlite3BtreeLastPage($$idx18$val$idx$val)|0);
 $37 = ($nPage|0)<(0);
 $38 = ($nPage|0)==(0);
 L14: do {
  if ($38) {
   $rc$4$lcssa = $rc$3;
  } else {
   $39 = (($p) + 16|0);
   $$pre62 = HEAP32[$39>>2]|0;
   $41 = $$pre62;$ii$056 = 0;$rc$457 = $rc$3;
   while(1) {
    $40 = ($41>>>0)<=($36>>>0);
    $42 = ($rc$457|0)==(0);
    $or$cond8 = $40 & $42;
    if (!($or$cond8)) {
     $rc$4$lcssa = $rc$457;
     break L14;
    }
    $43 = HEAP32[1648>>2]|0;
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 32|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($43>>>0) / ($48>>>0))&-1;
    $50 = (($49) + 1)|0;
    $51 = ($41|0)==($50|0);
    if ($51) {
     $rc$5 = 0;
    } else {
     $52 = (_sqlite3PagerAcquire($7,$41,$pSrcPg,2)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = HEAP32[$pSrcPg>>2]|0;
      $$idx17 = (($54) + 4|0);
      $$idx17$val = HEAP32[$$idx17>>2]|0;
      $55 = (_sqlite3PagerGetData($$idx17$val)|0);
      $56 = (_backupOnePage($p,$41,$55,0)|0);
      _sqlite3PagerUnref($54);
      $rc$5 = $56;
     } else {
      $rc$5 = $52;
     }
    }
    $57 = HEAP32[$39>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$39>>2] = $58;
    $59 = (($ii$056) + 1)|0;
    $60 = ($59|0)<($nPage|0);
    $or$cond7 = $37 | $60;
    if ($or$cond7) {
     $41 = $58;$ii$056 = $59;$rc$457 = $rc$5;
    } else {
     $rc$4$lcssa = $rc$5;
     break;
    }
   }
  }
 } while(0);
 if ((($rc$4$lcssa|0) == 0)) {
  $61 = (($p) + 36|0);
  HEAP32[$61>>2] = $36;
  $62 = (($36) + 1)|0;
  $63 = (($p) + 16|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) - ($64))|0;
  $66 = (($p) + 32|0);
  HEAP32[$66>>2] = $65;
  $67 = ($64>>>0)>($36>>>0);
  if ($67) {
   label = 20;
  } else {
   $68 = (($p) + 40|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0);
   if ($70) {
    _attachBackupObject($p);
    $rc$17 = 0;
   } else {
    $rc$17 = 0;
   }
  }
 } else if ((($rc$4$lcssa|0) == 101)) {
  label = 20;
 } else {
  $rc$17 = $rc$4$lcssa;
 }
 do {
  if ((label|0) == 20) {
   $71 = ($36|0)==(0);
   if ($71) {
    $72 = HEAP32[$8>>2]|0;
    $73 = (_sqlite3BtreeNewDb($72)|0);
    if ((($73|0) == 0) | (($73|0) == 101)) {
     $nSrcPage$037 = 1;
    } else {
     $rc$17 = $73;
     break;
    }
   } else {
    $nSrcPage$037 = $36;
   }
   $74 = HEAP32[$8>>2]|0;
   $75 = (($p) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 1)|0;
   $$idx26$val = HEAP32[$74>>2]|0;
   $$idx27 = (($74) + 4|0);
   $$idx27$val = HEAP32[$$idx27>>2]|0;
   $78 = (_sqlite3BtreeUpdateMeta($$idx26$val,$$idx27$val,1,$77)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = HEAP32[$p>>2]|0;
    $81 = ($80|0)==(0|0);
    if (!($81)) {
     _sqlite3ResetAllSchemasOfConnection($80);
    }
    if ($34) {
     $82 = HEAP32[$8>>2]|0;
     $83 = (_sqlite3BtreeSetVersion($82,2)|0);
     $84 = ($83|0)==(0);
     if (!($84)) {
      $rc$17 = $83;
      break;
     }
    }
    $85 = ($28|0)<($30|0);
    if ($85) {
     $86 = (($30|0) / ($28|0))&-1;
     $87 = (($nSrcPage$037) + -1)|0;
     $88 = (($87) + ($86))|0;
     $89 = (($88|0) / ($86|0))&-1;
     $90 = HEAP32[1648>>2]|0;
     $91 = HEAP32[$8>>2]|0;
     $92 = (($91) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + 32|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($28|0)<(0);
     $97 = $96 << 31 >> 31;
     $98 = ($nSrcPage$037|0)<(0);
     $99 = $98 << 31 >> 31;
     $100 = (___muldi3(($nSrcPage$037|0),($99|0),($28|0),($97|0))|0);
     $101 = tempRet0;
     $$idx28 = (($10) + 60|0);
     $$idx28$val = HEAP32[$$idx28>>2]|0;
     $102 = (_sqlite3PagerFile($$idx28$val)|0);
     $$idx21 = (($10) + 24|0);
     $$idx21$val = HEAP32[$$idx21>>2]|0;
     _sqlite3PagerPagecount($$idx21$val,$nDstPage);
     $103 = (($90>>>0) / ($95>>>0))&-1;
     $104 = (($103) + 1)|0;
     $105 = ($89|0)==($104|0);
     $106 = $105 << 31 >> 31;
     $$9 = (($106) + ($89))|0;
     $107 = HEAP32[$nDstPage>>2]|0;
     $iPg$052 = $$9;
     while(1) {
      $108 = ($iPg$052>>>0)>($107>>>0);
      if ($108) {
       label = 34;
       break;
      }
      $109 = HEAP32[1648>>2]|0;
      $110 = HEAP32[$8>>2]|0;
      $111 = (($110) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 32|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($109>>>0) / ($114>>>0))&-1;
      $116 = (($115) + 1)|0;
      $117 = ($iPg$052|0)==($116|0);
      if ($117) {
       $118 = (($iPg$052) + 1)|0;
       $iPg$052 = $118;
       continue;
      }
      $119 = (_sqlite3PagerAcquire($10,$iPg$052,$pPg,0)|0);
      $120 = ($119|0)==(0);
      if (!($120)) {
       $rc$12 = $119;
       break;
      }
      $121 = HEAP32[$pPg>>2]|0;
      $122 = (_sqlite3PagerWrite($121)|0);
      _sqlite3PagerUnref($121);
      $123 = (($iPg$052) + 1)|0;
      $124 = ($122|0)==(0);
      if ($124) {
       $iPg$052 = $123;
      } else {
       $rc$12 = $122;
       break;
      }
     }
     if ((label|0) == 34) {
      $125 = (_sqlite3PagerCommitPhaseOne($10,0,1)|0);
      $rc$12 = $125;
     }
     $126 = HEAP32[1648>>2]|0;
     $127 = (($126) + ($30))|0;
     $128 = ($127|0)<(0);
     $129 = $128 << 31 >> 31;
     $130 = ($129|0)<($101|0);
     $131 = ($129|0)==($101|0);
     $132 = ($127>>>0)<($100>>>0);
     $133 = $131 & $132;
     $134 = $130 | $133;
     $135 = $134 ? $127 : $100;
     $136 = $134 ? $129 : $101;
     $137 = (($126) + ($28))|0;
     $138 = ($137|0)<(0);
     $139 = $138 << 31 >> 31;
     $140 = ($rc$12|0)==(0);
     $141 = ($139|0)<($136|0);
     $142 = ($139|0)==($136|0);
     $143 = ($137>>>0)<($135>>>0);
     $144 = $142 & $143;
     $145 = $141 | $144;
     $or$cond48 = $140 & $145;
     if ($or$cond48) {
      $146 = $137;$147 = $139;
      while(1) {
       HEAP32[$pSrcPg1>>2] = 0;
       $148 = (___divdi3(($146|0),($147|0),($28|0),($97|0))|0);
       $149 = tempRet0;
       $150 = (_i64Add(($148|0),($149|0),1,0)|0);
       $151 = tempRet0;
       $152 = (_sqlite3PagerAcquire($7,$150,$pSrcPg1,0)|0);
       $153 = ($152|0)==(0);
       $154 = HEAP32[$pSrcPg1>>2]|0;
       if ($153) {
        $$idx16 = (($154) + 4|0);
        $$idx16$val = HEAP32[$$idx16>>2]|0;
        $155 = (_sqlite3PagerGetData($$idx16$val)|0);
        $156 = (_sqlite3OsWrite($102,$155,$28,$146,$147)|0);
        $rc$14 = $156;
       } else {
        $rc$14 = $152;
       }
       _sqlite3PagerUnref($154);
       $157 = (_i64Add(($146|0),($147|0),($28|0),($97|0))|0);
       $158 = tempRet0;
       $159 = ($rc$14|0)==(0);
       $160 = ($158|0)<($136|0);
       $161 = ($158|0)==($136|0);
       $162 = ($157>>>0)<($135>>>0);
       $163 = $161 & $162;
       $164 = $160 | $163;
       $or$cond = $159 & $164;
       if ($or$cond) {
        $146 = $157;$147 = $158;
       } else {
        $$lcssa = $159;$rc$13$lcssa = $rc$14;
        break;
       }
      }
     } else {
      $$lcssa = $140;$rc$13$lcssa = $rc$12;
     }
     if (!($$lcssa)) {
      $rc$17 = $rc$13$lcssa;
      break;
     }
     $165 = (_backupTruncateFile($102,$100,$101)|0);
     $166 = ($165|0)==(0);
     if (!($166)) {
      $rc$17 = $165;
      break;
     }
     $167 = (_sqlite3PagerSync($10,0)|0);
     $rc$16 = $167;
    } else {
     $168 = (($28|0) / ($30|0))&-1;
     $169 = Math_imul($168, $nSrcPage$037)|0;
     _sqlite3PagerTruncateImage($10,$169);
     $170 = (_sqlite3PagerCommitPhaseOne($10,0,0)|0);
     $rc$16 = $170;
    }
    $171 = ($rc$16|0)==(0);
    if ($171) {
     $172 = HEAP32[$8>>2]|0;
     $173 = (_sqlite3BtreeCommitPhaseTwo($172,0)|0);
     $174 = ($173|0)==(0);
     $$ = $174 ? 101 : $173;
     $rc$17 = $$;
    } else {
     $rc$17 = $rc$16;
    }
   } else {
    $rc$17 = $78;
   }
  }
 } while(0);
 $175 = ($bCloseTrans$0|0)==(0);
 if (!($175)) {
  $176 = HEAP32[$0>>2]|0;
  (_sqlite3BtreeCommitPhaseOne($176,0)|0);
  $177 = HEAP32[$0>>2]|0;
  (_sqlite3BtreeCommitPhaseTwo($177,0)|0);
 }
 $178 = ($rc$17|0)==(3082);
 $$rc$17 = $178 ? 7 : $rc$17;
 HEAP32[$2>>2] = $$rc$17;
 $rc$19 = $$rc$17;
 STACKTOP = sp;return ($rc$19|0);
}
function _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p$0$1$val) + 4|0);
 HEAP32[$0>>2] = $p$0$0$val;
 STACKTOP = sp;return;
}
function _isFatalError($rc) {
 $rc = $rc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($rc|0) == 6) | (($rc|0) == 0) | (($rc|0) == 5)) {
  $0 = 0;
 } else {
  $0 = 1;
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeBeginTrans($p,$wrflag) {
 $p = $p|0;
 $wrflag = $wrflag|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$not = 0, $$not3 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $or$cond = 0, $or$cond4 = 0, $p$idx$val = 0, $pBlock$0 = 0, $pIter$0 = 0, $pIter$022 = 0, $pIter$023 = 0, $rc$0 = 0;
 var $rc$2 = 0, $rc$2$ph = 0, $rc$211 = 0, $rc$2121415 = 0, $rc$3 = 0, $rc$4 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$1);
 $2 = (($p) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 if ((($3<<24>>24) == 1)) {
  $4 = ($wrflag|0)==(0);
  if ($4) {
   $rc$4 = 0;
   STACKTOP = sp;return ($rc$4|0);
  } else {
   label = 3;
  }
 } else if ((($3<<24>>24) == 2)) {
  $rc$3 = 0;
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (($1) + 22|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 & 1;
   $8 = ($7<<16>>16)==(0);
   $9 = ($wrflag|0)==(0);
   $or$cond = $8 | $9;
   if (!($or$cond)) {
    $rc$4 = 8;
    STACKTOP = sp;return ($rc$4|0);
   }
   $10 = ($wrflag|0)!=(0);
   if ($10) {
    $11 = (($1) + 20|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(2);
    if ($13) {
     label = 7;
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
   L11: do {
    if ((label|0) == 6) {
     $14 = $6 & 64;
     $15 = ($14<<16>>16)==(0);
     if ($15) {
      $18 = ($wrflag|0)>(1);
      if ($18) {
       $19 = (($1) + 72|0);
       $pIter$022 = HEAP32[$19>>2]|0;
       $20 = ($pIter$022|0)==(0|0);
       if (!($20)) {
        $pIter$023 = $pIter$022;
        while(1) {
         $23 = HEAP32[$pIter$023>>2]|0;
         $24 = ($23|0)==($p|0);
         if (!($24)) {
          $$pn = $23;
          label = 12;
          break L11;
         }
         $21 = (($pIter$023) + 12|0);
         $pIter$0 = HEAP32[$21>>2]|0;
         $22 = ($pIter$0|0)==(0|0);
         if ($22) {
          break;
         } else {
          $pIter$023 = $pIter$0;
         }
        }
       }
      }
     } else {
      label = 7;
     }
    }
   } while(0);
   if ((label|0) == 7) {
    $16 = (($1) + 76|0);
    $17 = HEAP32[$16>>2]|0;
    $$pn = $17;
    label = 12;
   }
   if ((label|0) == 12) {
    $pBlock$0 = HEAP32[$$pn>>2]|0;
    $25 = ($pBlock$0|0)==(0|0);
    if (!($25)) {
     $rc$4 = 262;
     STACKTOP = sp;return ($rc$4|0);
    }
   }
   $26 = (_querySharedCacheTableLock($p,1,1)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    $rc$4 = $26;
    STACKTOP = sp;return ($rc$4|0);
   }
   $28 = HEAP16[$5>>1]|0;
   $29 = $28&65535;
   $30 = $29 & 65527;
   $31 = $30&65535;
   HEAP16[$5>>1] = $31;
   $32 = (($1) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = $29 | 8;
    $36 = $35&65535;
    HEAP16[$5>>1] = $36;
   }
   $37 = (($1) + 12|0);
   $38 = (($1) + 20|0);
   $$not3 = $10 ^ 1;
   $39 = ($wrflag|0)>(1);
   $40 = $39&1;
   $rc$0 = 0;
   L30: while(1) {
    $41 = HEAP32[$37>>2]|0;
    $42 = ($41|0)==(0|0);
    do {
     if ($42) {
      $43 = (_lockBtree($1)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       $rc$0 = 0;
       continue L30;
      } else {
       $rc$2$ph = $43;
       label = 23;
      }
     } else {
      $$not = ($rc$0|0)!=(0);
      $brmerge = $$not | $$not3;
      if ($brmerge) {
       $rc$2 = $rc$0;
      } else {
       $45 = HEAP16[$5>>1]|0;
       $46 = $45 & 1;
       $47 = ($46<<16>>16)==(0);
       if (!($47)) {
        $rc$2$ph = 8;
        label = 23;
        break;
       }
       $48 = HEAP32[$1>>2]|0;
       $49 = HEAP32[$p>>2]|0;
       $$idx = (($49) + 63|0);
       $$idx$val = HEAP8[$$idx>>0]|0;
       $50 = (_sqlite3TempInMemory($$idx$val)|0);
       $51 = (_sqlite3PagerBegin($48,$40,$50)|0);
       $52 = ($51|0)==(0);
       if (!($52)) {
        $rc$2$ph = $51;
        label = 23;
        break;
       }
       $53 = (_newDatabase($1)|0);
       $rc$2 = $53;
      }
      $55 = ($rc$2|0)==(0);
      if ($55) {
       $rc$2121415 = 0;
       break L30;
      } else {
       $104 = 0;$rc$211 = $rc$2;
      }
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     $54 = ($rc$2$ph|0)==(0);
     $104 = $54;$rc$211 = $rc$2$ph;
    }
    _unlockBtreeIfUnused($1);
    $56 = $rc$211 & 255;
    $57 = ($56|0)==(5);
    if (!($57)) {
     label = 28;
     break;
    }
    $58 = HEAP8[$38>>0]|0;
    $59 = ($58<<24>>24)==(0);
    if (!($59)) {
     label = 28;
     break;
    }
    $60 = (_btreeInvokeBusyHandler($1)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     label = 28;
     break;
    } else {
     $rc$0 = $rc$211;
    }
   }
   if ((label|0) == 28) {
    if ($104) {
     $rc$2121415 = $rc$211;
    } else {
     $rc$3 = $rc$211;
     break;
    }
   }
   $62 = HEAP8[$2>>0]|0;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $64 = (($1) + 40|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $67 = (($p) + 9|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = ($68<<24>>24)==(0);
    if (!($69)) {
     $70 = (($p) + 28|0);
     $71 = (($p) + 36|0);
     HEAP8[$71>>0] = 1;
     $72 = (($1) + 72|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($p) + 40|0);
     HEAP32[$74>>2] = $73;
     HEAP32[$72>>2] = $70;
    }
   }
   $75 = $10 ? 2 : 1;
   HEAP8[$2>>0] = $75;
   $76 = HEAP8[$38>>0]|0;
   $77 = ($75&255)>($76&255);
   if ($77) {
    HEAP8[$38>>0] = $75;
   }
   if (!($10)) {
    $rc$4 = $rc$2121415;
    STACKTOP = sp;return ($rc$4|0);
   }
   $78 = HEAP32[$37>>2]|0;
   $79 = (($1) + 76|0);
   HEAP32[$79>>2] = $p;
   $80 = HEAP16[$5>>1]|0;
   $81 = $80&65535;
   $82 = $81 & 65503;
   $83 = $81 | 32;
   $$ = $39 ? $83 : $82;
   $storemerge = $$&65535;
   HEAP16[$5>>1] = $storemerge;
   $84 = HEAP32[$32>>2]|0;
   $85 = (($78) + 56|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + 28|0);
   $88 = (_sqlite3Get4byte($87)|0);
   $89 = ($84|0)==($88|0);
   if ($89) {
    $rc$3 = $rc$2121415;
   } else {
    $90 = (($78) + 68|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (_sqlite3PagerWrite($91)|0);
    $93 = ($92|0)==(0);
    if ($93) {
     $94 = HEAP32[$85>>2]|0;
     $95 = (($94) + 28|0);
     $96 = HEAP32[$32>>2]|0;
     _sqlite3Put4byte($95,$96);
     $rc$3 = 0;
     break;
    } else {
     $rc$4 = $92;
     STACKTOP = sp;return ($rc$4|0);
    }
   }
  }
 } while(0);
 $97 = ($rc$3|0)!=(0);
 $98 = ($wrflag|0)==(0);
 $or$cond4 = $97 | $98;
 if ($or$cond4) {
  $rc$4 = $rc$3;
  STACKTOP = sp;return ($rc$4|0);
 }
 $99 = HEAP32[$1>>2]|0;
 $100 = HEAP32[$p>>2]|0;
 $101 = (($100) + 488|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (_sqlite3PagerOpenSavepoint($99,$102)|0);
 $rc$4 = $103;
 STACKTOP = sp;return ($rc$4|0);
}
function _sqlite3BtreeGetMeta($p$0$0$val,$p$0$1$val,$idx,$pMeta) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $idx = $idx|0;
 $pMeta = $pMeta|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = $idx << 2;
 $1 = (($0) + 36)|0;
 $2 = (($p$0$1$val) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1)|0);
 $7 = (_sqlite3Get4byte($6)|0);
 HEAP32[$pMeta>>2] = $7;
 STACKTOP = sp;return;
}
function _sqlite3BtreeIsInReadTrans($p$0$2$val) {
 $p$0$2$val = $p$0$2$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p$0$2$val<<24>>24)!=(0);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3BtreeGetPageSize($p$0$1$val$0$15$val) {
 $p$0$1$val$0$15$val = $p$0$1$val$0$15$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($p$0$1$val$0$15$val|0);
}
function _sqlite3PagerGetJournalMode($pPager$0$2$val) {
 $pPager$0$2$val = $pPager$0$2$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pPager$0$2$val&255;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeLastPage($p$0$1$val$0$18$val) {
 $p$0$1$val$0$18$val = $p$0$1$val$0$18$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_btreePagecount($p$0$1$val$0$18$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PagerAcquire($pPager,$pgno,$ppPage,$flags) {
 $pPager = $pPager|0;
 $pgno = $pgno|0;
 $ppPage = $ppPage|0;
 $flags = $flags|0;
 var $$0 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iFrame = 0;
 var $or$cond = 0, $or$cond1 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $rc$3 = 0, $rc$34 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iFrame = sp;
 HEAP32[$iFrame>>2] = 0;
 $0 = $flags & 1;
 $1 = ($pgno|0)==(0);
 if ($1) {
  _sqlite3CorruptError(44823);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pPager) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (($pPager) + 204|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_sqlite3PcacheFetch($6,$pgno,1,$ppPage)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = HEAP32[$ppPage>>2]|0;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   $13 = ($0|0)==(0);
   $or$cond = $12 & $13;
   if ($or$cond) {
    $14 = (($pPager) + 184|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + 1)|0;
    HEAP32[$14>>2] = $16;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$10>>2] = $pPager;
   $17 = ($pgno|0)<(0);
   do {
    if ($17) {
     label = 9;
    } else {
     $18 = HEAP32[1648>>2]|0;
     $19 = (($pPager) + 152|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18|0) / ($20|0))&-1;
     $22 = (($21) + 1)|0;
     $23 = ($22|0)==($pgno|0);
     if ($23) {
      label = 9;
     } else {
      $24 = (($pPager) + 14|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if ($26) {
       $27 = (($pPager) + 24|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28>>>0)>=($pgno>>>0);
       $or$cond1 = $29 & $13;
       if ($or$cond1) {
        $30 = (($pPager) + 60|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = HEAP32[$31>>2]|0;
        $33 = ($32|0)==(0|0);
        if (!($33)) {
         $pPager$idx = (($pPager) + 208|0);
         $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
         $45 = (_pagerUseWal($pPager$idx$val)|0);
         $46 = ($45|0)==(0);
         if ($46) {
          $52 = 0;
         } else {
          $47 = (_sqlite3WalFindFrame($pPager$idx$val,$pgno,$iFrame)|0);
          $48 = ($47|0)==(0);
          if (!($48)) {
           $rc$3 = $47;
           break;
          }
          $$pre5 = HEAP32[$iFrame>>2]|0;
          $52 = $$pre5;
         }
         $49 = (($pPager) + 188|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($50) + 1)|0;
         HEAP32[$49>>2] = $51;
         $53 = (_readDbPage($9,$52)|0);
         $54 = ($53|0)==(0);
         if ($54) {
          $$0 = 0;
         } else {
          $rc$3 = $53;
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
      $34 = (($pPager) + 156|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35>>>0)<($pgno>>>0);
      if ($36) {
       $rc$3 = 13;
      } else {
       if ($13) {
        $44 = $20;
       } else {
        _sqlite3BeginBenignMalloc();
        $37 = (($pPager) + 28|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($38>>>0)<($pgno>>>0);
        if (!($39)) {
         $40 = (($pPager) + 56|0);
         $41 = HEAP32[$40>>2]|0;
         (_sqlite3BitvecSet($41,$pgno)|0);
        }
        (_addToSavepointBitvecs($pPager,$pgno)|0);
        _sqlite3EndBenignMalloc();
        $$pre = HEAP32[$19>>2]|0;
        $44 = $$pre;
       }
       $42 = (($9) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       _memset(($43|0),0,($44|0))|0;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   } while(0);
   if ((label|0) == 9) {
    _sqlite3CorruptError(44894);
    $rc$3 = 11;
   }
   $55 = ($9|0)==(0|0);
   if ($55) {
    $rc$34 = $rc$3;
   } else {
    _sqlite3PcacheDrop($9);
    $rc$34 = $rc$3;
   }
  } else {
   $rc$34 = $7;
  }
 } else {
  $rc$34 = $3;
 }
 _pagerUnlockIfUnused($pPager);
 HEAP32[$ppPage>>2] = 0;
 $$0 = $rc$34;
 STACKTOP = sp;return ($$0|0);
}
function _backupOnePage($p,$iSrcPg,$zSrcData,$bUpdate) {
 $p = $p|0;
 $iSrcPg = $iSrcPg|0;
 $zSrcData = $zSrcData|0;
 $bUpdate = $bUpdate|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx2$val$idx = 0, $$idx2$val$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx3$val$idx = 0, $$idx3$val$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx5 = 0, $$idx5$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx7$val$idx = 0, $$idx7$val$idx$val = 0;
 var $$phi$trans$insert = 0, $$phi$trans$insert13 = 0, $$pre = 0, $$pre12 = 0, $$pre14 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond8 = 0, $pDestPg = 0, $rc$0 = 0, $rc$1$lcssa = 0, $rc$2 = 0, $rc$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pDestPg = sp;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx = (($1) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
 $2 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
 $3 = (($p) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$idx3 = (($4) + 4|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$idx3$val$idx = (($$idx3$val) + 32|0);
 $$idx3$val$idx$val = HEAP32[$$idx3$val$idx>>2]|0;
 $5 = (_sqlite3BtreeGetPageSize($$idx3$val$idx$val)|0);
 $$idx2$val$idx = (($$idx$val) + 32|0);
 $$idx2$val$idx$val = HEAP32[$$idx2$val$idx>>2]|0;
 $6 = (_sqlite3BtreeGetPageSize($$idx2$val$idx$val)|0);
 $7 = ($5|0)<($6|0);
 $8 = $7 ? $5 : $6;
 $9 = ($5|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = (___muldi3(($5|0),($10|0),($iSrcPg|0),0)|0);
 $12 = tempRet0;
 $13 = ($5|0)==($6|0);
 if ($13) {
  $rc$0 = 0;
 } else {
  $$idx4 = (($2) + 14|0);
  $$idx4$val = HEAP8[$$idx4>>0]|0;
  $14 = (_sqlite3PagerIsMemdb($$idx4$val)|0);
  $15 = ($14|0)==(0);
  $$ = $15 ? 0 : 8;
  $rc$0 = $$;
 }
 $16 = ($rc$0|0)==(0);
 $17 = ($5|0)>(0);
 $or$cond8 = $16 & $17;
 if (!($or$cond8)) {
  $rc$1$lcssa = $rc$0;
  STACKTOP = sp;return ($rc$1$lcssa|0);
 }
 $18 = (_i64Subtract(($11|0),($12|0),($5|0),($10|0))|0);
 $19 = tempRet0;
 $20 = ($6|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = ($bUpdate|0)==(0);
 $23 = $18;$24 = $19;$29 = $$idx2$val$idx$val;
 while(1) {
  HEAP32[$pDestPg>>2] = 0;
  $25 = (___divdi3(($23|0),($24|0),($6|0),($21|0))|0);
  $26 = tempRet0;
  $27 = HEAP32[1648>>2]|0;
  $28 = (($27>>>0) / ($29>>>0))&-1;
  $30 = ($25|0)==($28|0);
  if ($30) {
   $rc$3 = 0;
  } else {
   $31 = (($25) + 1)|0;
   $32 = (_sqlite3PagerAcquire($2,$31,$pDestPg,0)|0);
   $33 = ($32|0)==(0);
   $34 = HEAP32[$pDestPg>>2]|0;
   if ($33) {
    $35 = (_sqlite3PagerWrite($34)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = (___remdi3(($23|0),($24|0),($5|0),($10|0))|0);
     $38 = tempRet0;
     $39 = (($zSrcData) + ($37)|0);
     $$idx5 = (($34) + 4|0);
     $$idx5$val = HEAP32[$$idx5>>2]|0;
     $40 = (_sqlite3PagerGetData($$idx5$val)|0);
     $41 = (___remdi3(($23|0),($24|0),($6|0),($21|0))|0);
     $42 = tempRet0;
     $43 = (($40) + ($41)|0);
     _memcpy(($43|0),($39|0),($8|0))|0;
     $$idx6 = (($34) + 8|0);
     $$idx6$val = HEAP32[$$idx6>>2]|0;
     $44 = (_sqlite3PagerGetExtra($$idx6$val)|0);
     HEAP8[$44>>0] = 0;
     $45 = ($23|0)==(0);
     $46 = ($24|0)==(0);
     $47 = $45 & $46;
     $or$cond1 = $47 & $22;
     if ($or$cond1) {
      $$sum = (($41) + 28)|0;
      $48 = (($40) + ($$sum)|0);
      $49 = HEAP32[$3>>2]|0;
      $$idx7 = (($49) + 4|0);
      $$idx7$val = HEAP32[$$idx7>>2]|0;
      $$idx7$val$idx = (($$idx7$val) + 44|0);
      $$idx7$val$idx$val = HEAP32[$$idx7$val$idx>>2]|0;
      $50 = (_sqlite3BtreeLastPage($$idx7$val$idx$val)|0);
      _sqlite3Put4byte($48,$50);
      $rc$2 = 0;
     } else {
      $rc$2 = 0;
     }
    } else {
     $rc$2 = $35;
    }
   } else {
    $rc$2 = $32;
   }
   _sqlite3PagerUnref($34);
   $rc$3 = $rc$2;
  }
  $51 = (_i64Add(($23|0),($24|0),($6|0),($21|0))|0);
  $52 = tempRet0;
  $53 = ($rc$3|0)==(0);
  $54 = ($52|0)<($12|0);
  $55 = ($52|0)==($12|0);
  $56 = ($51>>>0)<($11>>>0);
  $57 = $55 & $56;
  $58 = $54 | $57;
  $or$cond = $53 & $58;
  if (!($or$cond)) {
   $rc$1$lcssa = $rc$3;
   break;
  }
  $$pre = HEAP32[$0>>2]|0;
  $$phi$trans$insert = (($$pre) + 4|0);
  $$pre12 = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert13 = (($$pre12) + 32|0);
  $$pre14 = HEAP32[$$phi$trans$insert13>>2]|0;
  $23 = $51;$24 = $52;$29 = $$pre14;
 }
 STACKTOP = sp;return ($rc$1$lcssa|0);
}
function _sqlite3PagerGetData($pPg$0$1$val) {
 $pPg$0$1$val = $pPg$0$1$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPg$0$1$val|0);
}
function _sqlite3PagerUnref($pPg) {
 $pPg = $pPg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPg|0)==(0|0);
 if (!($0)) {
  _sqlite3PagerUnrefNotNull($pPg);
 }
 STACKTOP = sp;return;
}
function _attachBackupObject($p) {
 $p = $p|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx = (($1) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
 $2 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
 $3 = (_sqlite3PagerBackupPtr($2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($p) + 44|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$3>>2] = $p;
 $6 = (($p) + 40|0);
 HEAP32[$6>>2] = 1;
 STACKTOP = sp;return;
}
function _sqlite3BtreeNewDb($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = HEAP32[$p$idx1>>2]|0;
 $1 = (($0) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = (_newDatabase($0)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3BtreeUpdateMeta($p$0$0$val,$p$0$1$val,$idx,$iMeta) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $idx = $idx|0;
 $iMeta = $iMeta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = (($p$0$1$val) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_sqlite3PagerWrite($5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = $idx << 2;
 $9 = (($8) + 36)|0;
 $10 = (($3) + ($9)|0);
 _sqlite3Put4byte($10,$iMeta);
 $11 = ($idx|0)==(7);
 if (!($11)) {
  STACKTOP = sp;return ($6|0);
 }
 $12 = $iMeta&255;
 $13 = (($p$0$1$val) + 18|0);
 HEAP8[$13>>0] = $12;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3ResetAllSchemasOfConnection($db) {
 $db = $db|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnterAll($db);
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($db) + 16|0);
  $14 = $1;$i$01 = 0;
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4) + ($i$01<<4)|0) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $10 = $14;
   } else {
    _sqlite3SchemaClear($6);
    $$pre = HEAP32[$0>>2]|0;
    $10 = $$pre;
   }
   $8 = (($i$01) + 1)|0;
   $9 = ($8|0)<($10|0);
   if ($9) {
    $14 = $10;$i$01 = $8;
   } else {
    break;
   }
  }
 }
 $11 = (($db) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & -3;
 HEAP32[$11>>2] = $13;
 _sqlite3VtabUnlockList($db);
 _sqlite3CollapseDatabaseArray($db);
 STACKTOP = sp;return;
}
function _sqlite3BtreeSetVersion($pBtree,$iVersion) {
 $pBtree = $pBtree|0;
 $iVersion = $iVersion|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBtree) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 22|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 65519;
 $6 = ($iVersion|0)==(1);
 $7 = $4 | 16;
 $$ = $6 ? $7 : $5;
 $storemerge = $$&65535;
 HEAP16[$2>>1] = $storemerge;
 $8 = (_sqlite3BtreeBeginTrans($pBtree,0)|0);
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 56|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 18|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $iVersion&255;
   $17 = ($15<<24>>24)==($16<<24>>24);
   if ($17) {
    $18 = (($13) + 19|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==($15<<24>>24);
    if ($20) {
     $rc$0 = 0;
     break;
    }
   }
   $21 = (_sqlite3BtreeBeginTrans($pBtree,2)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP32[$10>>2]|0;
    $24 = (($23) + 68|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_sqlite3PagerWrite($25)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     HEAP8[$14>>0] = $16;
     $28 = (($13) + 19|0);
     HEAP8[$28>>0] = $16;
     $rc$0 = 0;
    } else {
     $rc$0 = $26;
    }
   } else {
    $rc$0 = $21;
   }
  } else {
   $rc$0 = $8;
  }
 } while(0);
 $29 = HEAP16[$2>>1]|0;
 $30 = $29&65535;
 $31 = $30 & 65519;
 $32 = $31&65535;
 HEAP16[$2>>1] = $32;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3PagerFile($pPager$0$27$val) {
 $pPager$0$27$val = $pPager$0$27$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPager$0$27$val|0);
}
function _sqlite3PagerPagecount($pPager$0$18$val,$pnPage) {
 $pPager$0$18$val = $pPager$0$18$val|0;
 $pnPage = $pnPage|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pnPage>>2] = $pPager$0$18$val;
 STACKTOP = sp;return;
}
function _sqlite3PagerWrite($pDbPage) {
 $pDbPage = $pDbPage|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$neg = 0, $$not = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, $exitcond = 0, $ii$06 = 0, $ii$14 = 0, $nPage$0 = 0, $needSync$0$ = 0, $needSync$0$1 = 0, $needSync$05 = 0, $needSync$3 = 0, $or$cond = 0, $or$cond2 = 0, $pPage = 0, $rc$0$lcssa16 = 0, $rc$1 = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPage = sp;
 $0 = (($pDbPage) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 148|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 152|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 if (!($6)) {
  $73 = (_pager_write($pDbPage)|0);
  $rc$2 = $73;
  STACKTOP = sp;return ($rc$2|0);
 }
 $7 = (($3>>>0) / ($5>>>0))&-1;
 $8 = (($1) + 19|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 4;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 $13 = (($pDbPage) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -1)|0;
 $16 = (0 - ($7))|0;
 $17 = $15 & $16;
 $18 = (($17) + 1)|0;
 $$neg = $17 ^ -1;
 $19 = (($1) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($14>>>0)>($20>>>0);
 if ($21) {
  $22 = (($14) + 1)|0;
  $23 = (($22) + ($$neg))|0;
  $nPage$0 = $23;
 } else {
  $24 = (($17) + ($7))|0;
  $25 = ($24>>>0)>($20>>>0);
  if ($25) {
   $26 = (($20) + 1)|0;
   $27 = (($26) + ($$neg))|0;
   $nPage$0 = $27;
  } else {
   $nPage$0 = $7;
  }
 }
 $28 = ($nPage$0|0)>(0);
 L10: do {
  if ($28) {
   $29 = (($1) + 56|0);
   $$idx3 = (($1) + 204|0);
   $32 = $14;$ii$06 = 0;$needSync$05 = 0;
   while(1) {
    $30 = (($ii$06) + ($18))|0;
    $31 = ($30|0)==($32|0);
    if ($31) {
     label = 10;
    } else {
     $33 = HEAP32[$29>>2]|0;
     $34 = (_sqlite3BitvecTest($33,$30)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      label = 10;
     } else {
      $$idx3$val = HEAP32[$$idx3>>2]|0;
      $49 = (_pager_lookup($$idx3$val,$30)|0);
      HEAP32[$pPage>>2] = $49;
      $50 = ($49|0)==(0|0);
      if ($50) {
       $needSync$3 = $needSync$05;$rc$1 = 0;
      } else {
       $51 = (($49) + 24|0);
       $52 = HEAP16[$51>>1]|0;
       $53 = $52 & 4;
       $54 = ($53<<16>>16)==(0);
       $needSync$0$1 = $54 ? $needSync$05 : 1;
       _sqlite3PagerUnrefNotNull($49);
       $needSync$3 = $needSync$0$1;$rc$1 = 0;
      }
     }
    }
    if ((label|0) == 10) {
     label = 0;
     $36 = HEAP32[1648>>2]|0;
     $37 = HEAP32[$4>>2]|0;
     $38 = (($36|0) / ($37|0))&-1;
     $39 = (($38) + 1)|0;
     $40 = ($30|0)==($39|0);
     if ($40) {
      $needSync$3 = $needSync$05;$rc$1 = 0;
     } else {
      $41 = (_sqlite3PagerAcquire($1,$30,$pPage,0)|0);
      $42 = ($41|0)==(0);
      if (!($42)) {
       $rc$0$lcssa16 = $41;
       break L10;
      }
      $43 = HEAP32[$pPage>>2]|0;
      $44 = (_pager_write($43)|0);
      $45 = (($43) + 24|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46 & 4;
      $48 = ($47<<16>>16)==(0);
      $needSync$0$ = $48 ? $needSync$05 : 1;
      _sqlite3PagerUnrefNotNull($43);
      $needSync$3 = $needSync$0$;$rc$1 = $44;
     }
    }
    $55 = (($ii$06) + 1)|0;
    $56 = ($55|0)<($nPage$0|0);
    $57 = ($rc$1|0)==(0);
    $or$cond = $56 & $57;
    if (!($or$cond)) {
     break;
    }
    $$pre = HEAP32[$13>>2]|0;
    $32 = $$pre;$ii$06 = $55;$needSync$05 = $needSync$3;
   }
   $58 = ($rc$1|0)!=(0);
   $59 = ($needSync$3|0)==(0);
   $or$cond2 = $58 | $59;
   $$not = $28 ^ 1;
   $brmerge = $or$cond2 | $$not;
   if ($brmerge) {
    $rc$0$lcssa16 = $rc$1;
   } else {
    $$idx = (($1) + 204|0);
    $ii$14 = 0;
    while(1) {
     $60 = (($ii$14) + ($18))|0;
     $$idx$val = HEAP32[$$idx>>2]|0;
     $61 = (_pager_lookup($$idx$val,$60)|0);
     $62 = ($61|0)==(0|0);
     if (!($62)) {
      $63 = (($61) + 24|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = $65 | 4;
      $67 = $66&65535;
      HEAP16[$63>>1] = $67;
      _sqlite3PagerUnrefNotNull($61);
     }
     $68 = (($ii$14) + 1)|0;
     $exitcond = ($68|0)==($nPage$0|0);
     if ($exitcond) {
      $rc$0$lcssa16 = $rc$1;
      break;
     } else {
      $ii$14 = $68;
     }
    }
   }
  } else {
   $rc$0$lcssa16 = 0;
  }
 } while(0);
 $69 = HEAP8[$8>>0]|0;
 $70 = $69&255;
 $71 = $70 & 251;
 $72 = $71&255;
 HEAP8[$8>>0] = $72;
 $rc$2 = $rc$0$lcssa16;
 STACKTOP = sp;return ($rc$2|0);
}
function _sqlite3PagerCommitPhaseOne($pPager,$zMaster,$noSync) {
 $pPager = $pPager|0;
 $zMaster = $zMaster|0;
 $noSync = $noSync|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pList$02 = 0, $pPageOne = 0, $pPager$idx$pre = 0, $pPager$idx$pre$phiZZ2D = 0, $pPager$idx$val = 0, $pPager$idx1 = 0, $pPager$idx1$val = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPageOne = sp;
 $0 = (($pPager) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPager) + 15|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255)<(3);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pPager) + 14|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 do {
  if ($8) {
   $pPager$idx1 = (($pPager) + 208|0);
   $pPager$idx1$val = HEAP32[$pPager$idx1>>2]|0;
   $11 = (_pagerUseWal($pPager$idx1$val)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (($pPager) + 204|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_sqlite3PcacheDirtyList($14)|0);
    HEAP32[$pPageOne>>2] = 0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = (_sqlite3PagerAcquire($pPager,1,$pPageOne,0)|0);
     $18 = HEAP32[$pPageOne>>2]|0;
     $19 = (($18) + 12|0);
     HEAP32[$19>>2] = 0;
     $20 = ($18|0)==(0|0);
     if ($20) {
      $24 = 0;$rc$1 = $17;
     } else {
      $59 = $18;$pList$02 = $18;
      label = 8;
     }
    } else {
     $59 = 0;$pList$02 = $15;
     label = 8;
    }
    if ((label|0) == 8) {
     $21 = (($pPager) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (_pagerWalFrames($pPager,$pList$02,$22,1)|0);
     $24 = $59;$rc$1 = $23;
    }
    _sqlite3PagerUnref($24);
    $25 = ($rc$1|0)==(0);
    if ($25) {
     $26 = HEAP32[$13>>2]|0;
     _sqlite3PcacheCleanAll($26);
     $pPager$idx$pre$phiZZ2D = $pPager$idx1;
     break;
    } else {
     $$0 = $rc$1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $27 = (_pager_incr_changecounter($pPager)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $$0 = $27;
    STACKTOP = sp;return ($$0|0);
   }
   $29 = (_writeMasterJournal($pPager,$zMaster)|0);
   $30 = ($29|0)==(0);
   if (!($30)) {
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (_syncJournal($pPager,0)|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    $$0 = $31;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = (($pPager) + 204|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_sqlite3PcacheDirtyList($34)|0);
   $36 = (_pager_write_pagelist($pPager,$35)|0);
   $37 = ($36|0)==(0);
   if (!($37)) {
    $$0 = $36;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$33>>2]|0;
   _sqlite3PcacheCleanAll($38);
   $39 = (($pPager) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($pPager) + 32|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($40>>>0)>($42>>>0);
   if ($43) {
    $44 = HEAP32[1648>>2]|0;
    $45 = (($pPager) + 152|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($44|0) / ($46|0))&-1;
    $48 = (($47) + 1)|0;
    $49 = ($40|0)==($48|0);
    $50 = $49&1;
    $51 = (($40) - ($50))|0;
    $52 = (_pager_truncate($pPager,$51)|0);
    $53 = ($52|0)==(0);
    if (!($53)) {
     $$0 = $52;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $54 = ($noSync|0)==(0);
   if ($54) {
    $55 = (_sqlite3PagerSync($pPager,$zMaster)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $pPager$idx$pre$phiZZ2D = $pPager$idx1;
    } else {
     $$0 = $55;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $pPager$idx$pre$phiZZ2D = $pPager$idx1;
   }
  } else {
   $9 = (($pPager) + 88|0);
   $10 = HEAP32[$9>>2]|0;
   _sqlite3BackupRestart($10);
   $pPager$idx$pre = (($pPager) + 208|0);
   $pPager$idx$pre$phiZZ2D = $pPager$idx$pre;
  }
 } while(0);
 $pPager$idx$val = HEAP32[$pPager$idx$pre$phiZZ2D>>2]|0;
 $57 = (_pagerUseWal($pPager$idx$val)|0);
 $58 = ($57|0)==(0);
 if (!($58)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$3>>0] = 5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsWrite($id,$pBuf,$amt,$0,$1) {
 $id = $id|0;
 $pBuf = $pBuf|0;
 $amt = $amt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$id>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiiiii[$4 & 255]($id,$pBuf,$amt,$0,$1)|0);
 STACKTOP = sp;return ($5|0);
}
function _backupTruncateFile($pFile,$0,$1) {
 $pFile = $pFile|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCurrent = 0, $or$cond = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iCurrent = sp;
 $2 = (_sqlite3OsFileSize($pFile,$iCurrent)|0);
 $3 = ($2|0)==(0);
 $4 = $iCurrent;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>($1|0);
 $11 = ($9|0)==($1|0);
 $12 = ($6>>>0)>($0>>>0);
 $13 = $11 & $12;
 $14 = $10 | $13;
 $or$cond = $3 & $14;
 if (!($or$cond)) {
  $rc$0 = $2;
  STACKTOP = sp;return ($rc$0|0);
 }
 $15 = (_sqlite3OsTruncate($pFile,$0,$1)|0);
 $rc$0 = $15;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3PagerSync($pPager,$zMaster) {
 $pPager = $pPager|0;
 $zMaster = $zMaster|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (_sqlite3OsFileControl($1,21,$zMaster)|0);
  $5 = ($4|0)==(12);
  $$ = $5 ? 0 : $4;
  $6 = ($$|0)==(0);
  if (!($6)) {
   $rc$1 = $$;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $7 = (($pPager) + 7|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($pPager) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_sqlite3OsSync($10,$13)|0);
 $rc$1 = $14;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3PagerTruncateImage($pPager,$nPage) {
 $pPager = $pPager|0;
 $nPage = $nPage|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 24|0);
 HEAP32[$0>>2] = $nPage;
 STACKTOP = sp;return;
}
function _sqlite3BtreeCommitPhaseTwo($p,$bCleanup) {
 $p = $p|0;
 $bCleanup = $bCleanup|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(2);
 do {
  if ($4) {
   $5 = HEAP32[$p$idx1>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $7 = (_sqlite3PagerCommitPhaseTwo($6)|0);
   $8 = ($7|0)!=(0);
   $9 = ($bCleanup|0)==(0);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $$0 = $7;
    STACKTOP = sp;return ($$0|0);
   } else {
    $10 = (($5) + 20|0);
    HEAP8[$10>>0] = 1;
    _btreeClearHasContent($5);
    break;
   }
  }
 } while(0);
 _btreeEndTransaction($p);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeCommitPhaseOne($p,$zMaster) {
 $p = $p|0;
 $zMaster = $zMaster|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$idx$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$4);
 $5 = (($4) + 17|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = (_autoVacuumCommit($4)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = (($4) + 19|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $13 = HEAP32[$4>>2]|0;
  $14 = (($4) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  _sqlite3PagerTruncateImage($13,$15);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (_sqlite3PagerCommitPhaseOne($16,$zMaster,0)|0);
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_backup_finish($p) {
 $p = $p|0;
 var $$ = 0, $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $pp$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($p) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($p) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$idx1$val = HEAP32[$4>>2]|0;
 $$idx2 = (($4) + 4|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 _sqlite3BtreeEnter($$idx1$val,$$idx2$val);
 $5 = HEAP32[$p>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$3>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + -1)|0;
  HEAP32[$8>>2] = $10;
 }
 $11 = (($p) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = HEAP32[$3>>2]|0;
  $$idx = (($14) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
  $15 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
  $16 = (_sqlite3PagerBackupPtr($15)|0);
  $pp$0 = $16;
  while(1) {
   $17 = HEAP32[$pp$0>>2]|0;
   $18 = ($17|0)==($p|0);
   $19 = (($17) + 44|0);
   if ($18) {
    break;
   } else {
    $pp$0 = $19;
   }
  }
  $20 = (($p) + 44|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$pp$0>>2] = $21;
 }
 $22 = (($p) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 _sqlite3BtreeRollback($23,0);
 $24 = (($p) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(101);
 $$ = $26 ? 0 : $25;
 $27 = HEAP32[$p>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _sqlite3Error($27,$$,0,$vararg_buffer);
  $29 = HEAP32[$p>>2]|0;
  _sqlite3LeaveMutexAndCloseZombie($29);
  $$pr = HEAP32[$p>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if (!($30)) {
   _sqlite3_free($p);
  }
 }
 _sqlite3LeaveMutexAndCloseZombie($2);
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerBackupPtr($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 88|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeRollback($p,$tripCode) {
 $p = $p|0;
 $tripCode = $tripCode|0;
 var $$02 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nPage = 0, $p$idx$val = 0, $pPage1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPage1 = sp + 4|0;
 $nPage = sp;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$1);
 $2 = ($tripCode|0)==(0);
 if ($2) {
  $3 = (_saveAllCursors($1,0,0)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$02 = $3;
   label = 3;
  }
 } else {
  $$02 = $tripCode;
  label = 3;
 }
 if ((label|0) == 3) {
  _sqlite3BtreeTripAllCursors($p,$$02);
 }
 $5 = (($p) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(2);
 if (!($7)) {
  _btreeEndTransaction($p);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$1>>2]|0;
 (_sqlite3PagerRollback($8)|0);
 $9 = (_btreeGetPage($1,1,$pPage1,0)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$pPage1>>2]|0;
  $12 = (($11) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 28|0);
  $15 = (_sqlite3Get4byte($14)|0);
  HEAP32[$nPage>>2] = $15;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = HEAP32[$1>>2]|0;
   $$idx = (($17) + 24|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   _sqlite3PagerPagecount($$idx$val,$nPage);
   $$pre = HEAP32[$nPage>>2]|0;
   $19 = $$pre;
  } else {
   $19 = $15;
  }
  $18 = (($1) + 44|0);
  HEAP32[$18>>2] = $19;
  _releasePage($11);
 }
 $20 = (($1) + 20|0);
 HEAP8[$20>>0] = 1;
 _btreeClearHasContent($1);
 _btreeEndTransaction($p);
 STACKTOP = sp;return;
}
function _sqlite3LeaveMutexAndCloseZombie($db) {
 $db = $db|0;
 var $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$04 = 0;
 var $i$05 = 0, $i$1 = 0, $i$11 = 0, $i$12 = 0, $j$018 = 0, $j$116 = 0, $p$012 = 0, $p$1$idx = 0, $p$1$idx$val = 0, $p$19 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($db) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1691352191);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (_connectionIsBusy($db)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 _sqlite3RollbackAll($db,0);
 _sqlite3CloseSavepoints($db);
 $5 = (($db) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 $8 = (($db) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $11 = $9;$j$018 = 0;
  while(1) {
   $10 = ((($11) + ($j$018<<4)|0) + 4|0);
   $12 = HEAP32[$10>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    _sqlite3BtreeClose($12);
    HEAP32[$10>>2] = 0;
    $14 = ($j$018|0)==(1);
    if (!($14)) {
     $15 = ((($11) + ($j$018<<4)|0) + 12|0);
     HEAP32[$15>>2] = 0;
    }
   }
   $16 = (($j$018) + 1)|0;
   $17 = HEAP32[$5>>2]|0;
   $18 = ($16|0)<($17|0);
   $19 = HEAP32[$8>>2]|0;
   if ($18) {
    $11 = $19;$j$018 = $16;
   } else {
    $$lcssa17 = $19;
    break;
   }
  }
 } else {
  $$lcssa17 = $9;
 }
 $20 = (($$lcssa17) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _sqlite3SchemaClear($21);
 }
 _sqlite3VtabUnlockList($db);
 _sqlite3CollapseDatabaseArray($db);
 $j$116 = 0;
 while(1) {
  $23 = ((($db) + ($j$116<<2)|0) + 328|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $p$012 = $24;
   while(1) {
    $28 = (($p$012) + 28|0);
    $27 = HEAP32[$28>>2]|0;
    $29 = ($p$012|0)==(0|0);
    if (!($29)) {
     $p$19 = $p$012;
     while(1) {
      $p$1$idx = (($p$19) + 32|0);
      $p$1$idx$val = HEAP32[$p$1$idx>>2]|0;
      _functionDestroy($db,$p$1$idx$val);
      $30 = (($p$19) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      _sqlite3DbFree($db,$p$19);
      $32 = ($31|0)==(0|0);
      if ($32) {
       break;
      } else {
       $p$19 = $31;
      }
     }
    }
    $26 = ($27|0)==(0|0);
    if ($26) {
     break;
    } else {
     $p$012 = $27;
    }
   }
  }
  $33 = (($j$116) + 1)|0;
  $exitcond = ($33|0)==(23);
  if ($exitcond) {
   break;
  } else {
   $j$116 = $33;
  }
 }
 $34 = (($db) + 420|0);
 $35 = (($db) + 428|0);
 $i$04 = HEAP32[$35>>2]|0;
 $36 = ($i$04|0)==(0|0);
 if (!($36)) {
  $i$05 = $i$04;
  while(1) {
   $37 = (($i$05) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $42 = (($38) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_vi[$40 & 255]($43);
   }
   $44 = (($38) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0|0);
   if (!($46)) {
    $68 = (($38) + 28|0);
    $69 = HEAP32[$68>>2]|0;
    FUNCTION_TABLE_vi[$45 & 255]($69);
   }
   $70 = (($38) + 56|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    $73 = (($38) + 48|0);
    $74 = HEAP32[$73>>2]|0;
    FUNCTION_TABLE_vi[$71 & 255]($74);
   }
   _sqlite3DbFree($db,$38);
   $i$0 = HEAP32[$i$05>>2]|0;
   $75 = ($i$0|0)==(0|0);
   if ($75) {
    break;
   } else {
    $i$05 = $i$0;
   }
  }
 }
 _sqlite3HashClear($34);
 $47 = (($db) + 300|0);
 $48 = (($db) + 308|0);
 $i$11 = HEAP32[$48>>2]|0;
 $49 = ($i$11|0)==(0|0);
 if (!($49)) {
  $i$12 = $i$11;
  while(1) {
   $50 = (($i$12) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    $55 = (($51) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    FUNCTION_TABLE_vi[$53 & 255]($56);
   }
   _sqlite3DbFree($db,$51);
   $i$1 = HEAP32[$i$12>>2]|0;
   $57 = ($i$1|0)==(0|0);
   if ($57) {
    break;
   } else {
    $i$12 = $i$1;
   }
  }
 }
 _sqlite3HashClear($47);
 _sqlite3Error($db,0,0,$vararg_buffer);
 $58 = (($db) + 224|0);
 $59 = HEAP32[$58>>2]|0;
 _sqlite3ValueFree($59);
 HEAP32[$0>>2] = -1254786768;
 $60 = HEAP32[$8>>2]|0;
 $61 = (($60) + 28|0);
 $62 = HEAP32[$61>>2]|0;
 _sqlite3DbFree($db,$62);
 HEAP32[$0>>2] = -1623446221;
 $63 = (($db) + 243|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = ($64<<24>>24)==(0);
 if (!($65)) {
  $66 = (($db) + 268|0);
  $67 = HEAP32[$66>>2]|0;
  _sqlite3_free($67);
 }
 _sqlite3_free($db);
 STACKTOP = sp;return;
}
function _sqlite3_sql($pStmt) {
 $pStmt = $pStmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 if ($0) {
  $7 = 0;
 } else {
  $1 = (($pStmt) + 88|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & 1024;
  $4 = ($3<<16>>16)==(0);
  if ($4) {
   $7 = 0;
  } else {
   $5 = (($pStmt) + 168|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6;
  }
 }
 STACKTOP = sp;return ($7|0);
}
function _sqlite3_finalize($pStmt) {
 $pStmt = $pStmt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[$pStmt>>2]|0;
   $2 = (_vdbeSafety($1)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = (_sqlite3VdbeFinalize($pStmt)|0);
    $5 = (_sqlite3ApiExit($1,$4)|0);
    _sqlite3LeaveMutexAndCloseZombie($1);
    $$0 = $5;
    break;
   } else {
    _sqlite3MisuseError(65422);
    $$0 = 21;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSafety($p$0$0$val) {
 $p$0$0$val = $p$0$0$val|0;
 var $$0 = 0, $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($p$0$0$val|0)==(0|0);
 if ($0) {
  _sqlite3_log(21,37040,$vararg_buffer);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeFinalize($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 1369188723) | (($1|0) == -1108210269)) {
  $2 = (_sqlite3VdbeReset($p)|0);
  $rc$0 = $2;
 } else {
  $rc$0 = 0;
 }
 _sqlite3VdbeDelete($p);
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3ApiExit($db,$rc) {
 $db = $db|0;
 $rc = $rc|0;
 var $$0$ph = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($db|0)==(0|0);
 if ($0) {
  $$01 = $rc;$8 = 255;
  $7 = $8 & $$01;
  STACKTOP = sp;return ($7|0);
 }
 $1 = (($db) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = ($rc|0)==(3082);
 $or$cond = $3 | $4;
 if ($or$cond) {
  _sqlite3Error($db,7,0,$vararg_buffer);
  HEAP8[$1>>0] = 0;
  $$0$ph = 7;
 } else {
  $$0$ph = $rc;
 }
 $5 = (($db) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $$01 = $$0$ph;$8 = $6;
 $7 = $8 & $$01;
 STACKTOP = sp;return ($7|0);
}
function _sqlite3_reset($pStmt) {
 $pStmt = $pStmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 if ($0) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $1 = (_sqlite3VdbeReset($pStmt)|0);
 _sqlite3VdbeRewind($pStmt);
 $2 = HEAP32[$pStmt>>2]|0;
 $3 = (_sqlite3ApiExit($2,$1)|0);
 $rc$0 = $3;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3VdbeReset($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$p>>2]|0;
 (_sqlite3VdbeHalt($p)|0);
 $1 = (($p) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  (_sqlite3VdbeTransferError($p)|0);
  $4 = (($p) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  _sqlite3DbFree($0,$5);
  HEAP32[$4>>2] = 0;
  $6 = (($p) + 88|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 64;
  $9 = ($8<<16>>16)==(0);
  if (!($9)) {
   $10 = $7 | 32;
   HEAP16[$6>>1] = $10;
  }
 } else {
  $11 = (($p) + 80|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = (($p) + 88|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 & 32;
   $17 = ($16<<16>>16)==(0);
   if (!($17)) {
    $18 = (($p) + 44|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)!=(0|0);
    $21 = $20 ? 1712 : 0;
    HEAP32[$vararg_buffer>>2] = $19;
    _sqlite3Error($0,$12,$21,$vararg_buffer);
    $22 = HEAP32[$18>>2]|0;
    _sqlite3DbFree($0,$22);
    HEAP32[$18>>2] = 0;
   }
  }
 }
 _Cleanup($p);
 $23 = (($p) + 136|0);
 $24 = $23;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = (($p) + 40|0);
 HEAP32[$28>>2] = 649915045;
 $29 = (($p) + 80|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($0) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & $30;
 STACKTOP = sp;return ($33|0);
}
function _sqlite3VdbeRewind($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = (($p) + 76|0);
 HEAP32[$1>>2] = -1;
 $2 = (($p) + 80|0);
 HEAP32[$2>>2] = 0;
 $3 = (($p) + 86|0);
 HEAP8[$3>>0] = 2;
 HEAP32[$0>>2] = -1108210269;
 $4 = (($p) + 92|0);
 HEAP32[$4>>2] = 0;
 $5 = (($p) + 72|0);
 HEAP32[$5>>2] = 1;
 $6 = (($p) + 87|0);
 HEAP8[$6>>0] = -1;
 $7 = (($p) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = (($p) + 144|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemRelease($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 9312;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  _sqlite3VdbeMemReleaseExternal($p);
 }
 $4 = (($p) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $8 = (($p) + 4|0);
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$p>>2]|0;
 _sqlite3DbFree($7,$5);
 HEAP32[$4>>2] = 0;
 $8 = (($p) + 4|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3_value_blob($pVal) {
 $pVal = $pVal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVal) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 18;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $13 = (_sqlite3_value_text($pVal)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 (_sqlite3VdbeMemExpandBlob($pVal)|0);
 $4 = HEAP16[$0>>1]|0;
 $5 = $4&65535;
 $6 = $5 | 16;
 $7 = $6&65535;
 HEAP16[$0>>1] = $7;
 $8 = (($pVal) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($pVal) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeMemExpandBlob($pMem) {
 $pMem = $pMem|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 16384;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pMem) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pMem) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 $9 = ($8|0)<(1);
 $$ = $9 ? 1 : $8;
 $10 = (_sqlite3VdbeMemGrow($pMem,$$,1)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = (($pMem) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12)|0);
 $16 = HEAP32[$6>>2]|0;
 _memset(($15|0),0,($16|0))|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = HEAP32[$4>>2]|0;
 $19 = (($18) + ($17))|0;
 HEAP32[$4>>2] = $19;
 $20 = HEAP16[$0>>1]|0;
 $21 = $20&65535;
 $22 = $21 & 48639;
 $23 = $22&65535;
 HEAP16[$0>>1] = $23;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_value_text($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ValueText($pVal,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_value_bytes($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ValueBytes($pVal,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ValueBytes($pVal,$enc) {
 $pVal = $pVal|0;
 $enc = $enc|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVal) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 16;
 $3 = ($2<<16>>16)==(0);
 do {
  if ($3) {
   $4 = (_sqlite3ValueText($pVal,$enc)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pre = HEAP16[$0>>1]|0;
    $7 = $$pre;
    break;
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $6 = $7 & 16384;
 $8 = ($6<<16>>16)==(0);
 $9 = (($pVal) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($pVal) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10))|0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_value_double($pVal) {
 $pVal = $pVal|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_sqlite3VdbeRealValue($pVal));
 STACKTOP = sp;return (+$0);
}
function _sqlite3VdbeRealValue($pMem) {
 $pMem = $pMem|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $val = sp;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 8;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($pMem) + 8|0);
  $6 = +HEAPF64[$5>>3];
  $$0 = $6;
  STACKTOP = sp;return (+$$0);
 }
 $7 = $2 & 4;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($pMem) + 16|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (+($12>>>0)) + (4294967296.0*(+($15|0)));
  $$0 = $16;
  STACKTOP = sp;return (+$$0);
 }
 $17 = $2 & 18;
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 HEAPF64[$val>>3] = 0.0;
 $19 = (($pMem) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($pMem) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($pMem) + 30|0);
 $24 = HEAP8[$23>>0]|0;
 (_sqlite3AtoF($20,$val,$22,$24)|0);
 $25 = +HEAPF64[$val>>3];
 $$0 = $25;
 STACKTOP = sp;return (+$$0);
}
function _sqlite3_value_int($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeIntValue($pVal)|0);
 $1 = tempRet0;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeIntValue($pMem) {
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $value = sp;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($pMem) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $36 = $11;$37 = $8;
  tempRet0 = $36;
  STACKTOP = sp;return ($37|0);
 }
 $12 = $2 & 8;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = (($pMem) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = (_doubleToInt64($15)|0);
  $17 = tempRet0;
  $36 = $17;$37 = $16;
  tempRet0 = $36;
  STACKTOP = sp;return ($37|0);
 }
 $18 = $2 & 18;
 $19 = ($18|0)==(0);
 if ($19) {
  $36 = 0;$37 = 0;
  tempRet0 = $36;
  STACKTOP = sp;return ($37|0);
 }
 $20 = $value;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = (($pMem) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($pMem) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($pMem) + 30|0);
 $29 = HEAP8[$28>>0]|0;
 (_sqlite3Atoi64($25,$value,$27,$29)|0);
 $30 = $value;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35;$37 = $32;
 tempRet0 = $36;
 STACKTOP = sp;return ($37|0);
}
function _sqlite3_value_int64($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeIntValue($pVal)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ValueText($pVal,$enc) {
 $pVal = $pVal|0;
 $enc = $enc|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pVal|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pVal) + 28|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $3 >>> 3;
 $7 = $6 & 2;
 $8 = $7 | $3;
 $9 = $8&65535;
 HEAP16[$1>>1] = $9;
 $10 = $3 & 16384;
 $11 = ($10|0)==(0);
 if ($11) {
  $13 = $9;
 } else {
  (_sqlite3VdbeMemExpandBlob($pVal)|0);
  $$pre = HEAP16[$1>>1]|0;
  $13 = $$pre;
 }
 $12 = $13 & 2;
 $14 = ($12<<16>>16)==(0);
 $15 = $enc&255;
 if ($14) {
  (_sqlite3VdbeMemStringify($pVal,$15)|0);
  $$pre1 = $15 & 247;
  $$pre$phiZ2D = $$pre1;
 } else {
  $16 = $15 & 247;
  (_sqlite3VdbeChangeEncoding($pVal,$16)|0);
  $17 = $15 & 8;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = (($pVal) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20;
   $22 = $21 & 1;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $24 = (_sqlite3VdbeMemMakeWriteable($pVal)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  _sqlite3VdbeMemNulTerminate($pVal);
  $$pre$phiZ2D = $16;
 }
 $26 = (($pVal) + 30|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==($$pre$phiZ2D|0);
 if (!($29)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (($pVal) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $$0 = $31;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_value_type($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVal) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 31;
 $4 = (1656 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3_result_blob($pCtx,$z,$n,$xDel) {
 $pCtx = $pCtx|0;
 $z = $z|0;
 $n = $n|0;
 $xDel = $xDel|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _setResultStrOrError($pCtx,$z,$n,0,$xDel);
 STACKTOP = sp;return;
}
function _setResultStrOrError($pCtx,$z,$n,$enc,$xDel) {
 $pCtx = $pCtx|0;
 $z = $z|0;
 $n = $n|0;
 $enc = $enc|0;
 $xDel = $xDel|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 $1 = (_sqlite3VdbeMemSetStr($0,$z,$n,$enc,$xDel)|0);
 $2 = ($1|0)==(18);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _sqlite3_result_error_toobig($pCtx);
 STACKTOP = sp;return;
}
function _sqlite3_result_double($pCtx,$rVal) {
 $pCtx = $pCtx|0;
 $rVal = +$rVal;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 _sqlite3VdbeMemSetDouble($0,$rVal);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemSetDouble($pMem,$val) {
 $pMem = $pMem|0;
 $val = +$val;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3IsNaN($val)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _sqlite3VdbeMemRelease($pMem);
  $2 = (($pMem) + 8|0);
  HEAPF64[$2>>3] = $val;
  $3 = (($pMem) + 28|0);
  HEAP16[$3>>1] = 8;
  STACKTOP = sp;return;
 } else {
  _sqlite3VdbeMemSetNull($pMem);
  STACKTOP = sp;return;
 }
}
function _sqlite3_result_error($pCtx,$z,$n) {
 $pCtx = $pCtx|0;
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 64|0);
 HEAP32[$0>>2] = 1;
 $1 = (($pCtx) + 69|0);
 HEAP8[$1>>0] = 1;
 $2 = (($pCtx) + 8|0);
 (_sqlite3VdbeMemSetStr($2,$z,$n,1,(-1))|0);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemSetStr($pMem,$z,$n,$enc,$xDel) {
 $pMem = $pMem|0;
 $z = $z|0;
 $n = $n|0;
 $enc = $enc|0;
 $xDel = $xDel|0;
 var $$ = 0, $$0 = 0, $$enc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$1 = 0;
 var $iLimit$0 = 0, $nAlloc$0 = 0, $nByte$02 = 0, $nByte$15 = 0, $nByte$2 = 0, $nByte$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  _sqlite3VdbeMemSetNull($pMem);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$pMem>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $iLimit$0 = 1000000000;
 } else {
  $3 = (($1) + 88|0);
  $4 = HEAP32[$3>>2]|0;
  $iLimit$0 = $4;
 }
 $5 = ($enc<<24>>24)==(0);
 $6 = $5 ? 16 : 2;
 $7 = ($n|0)<(0);
 if ($7) {
  $8 = ($enc<<24>>24)==(1);
  $9 = ($iLimit$0|0)<(0);
  L10: do {
   if ($8) {
    if ($9) {
     $nByte$2 = 0;
    } else {
     $nByte$02 = 0;
     while(1) {
      $11 = (($z) + ($nByte$02)|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      $14 = (($nByte$02) + 1)|0;
      if ($13) {
       $nByte$2 = $nByte$02;
       break L10;
      }
      $10 = ($nByte$02|0)<($iLimit$0|0);
      if ($10) {
       $nByte$02 = $14;
      } else {
       $nByte$2 = $14;
       break;
      }
     }
    }
   } else {
    if ($9) {
     $nByte$2 = 0;
    } else {
     $nByte$15 = 0;
     while(1) {
      $17 = (($z) + ($nByte$15)|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = $nByte$15 | 1;
      $20 = (($z) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = $21 | $18;
      $23 = ($22<<24>>24)==(0);
      $16 = (($nByte$15) + 2)|0;
      if ($23) {
       $nByte$2 = $nByte$15;
       break L10;
      }
      $15 = ($16|0)>($iLimit$0|0);
      if ($15) {
       $nByte$2 = $16;
       break;
      } else {
       $nByte$15 = $16;
      }
     }
    }
   }
  } while(0);
  $24 = $6&65535;
  $25 = $24 | 512;
  $26 = $25&65535;
  $flags$0 = $26;$nByte$3 = $nByte$2;
 } else {
  $flags$0 = $6;$nByte$3 = $n;
 }
 $27 = ($xDel|0)==((-1)|0);
 do {
  if ($27) {
   $28 = $flags$0 & 512;
   $29 = ($28<<16>>16)==(0);
   if ($29) {
    $nAlloc$0 = $nByte$3;
   } else {
    $30 = ($enc<<24>>24)==(1);
    $31 = $30 ? 1 : 2;
    $32 = (($nByte$3) + ($31))|0;
    $nAlloc$0 = $32;
   }
   $33 = ($nByte$3|0)>($iLimit$0|0);
   if ($33) {
    $$0 = 18;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = (_sqlite3VdbeMemGrow($pMem,$nAlloc$0,0)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = (($pMem) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    _memcpy(($37|0),($z|0),($nAlloc$0|0))|0;
    $flags$1 = $flags$0;
    break;
   } else {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $38 = ($xDel|0)==(145|0);
   _sqlite3VdbeMemRelease($pMem);
   $39 = (($pMem) + 4|0);
   HEAP32[$39>>2] = $z;
   if ($38) {
    $40 = (($pMem) + 36|0);
    HEAP32[$40>>2] = $z;
    $41 = (($pMem) + 32|0);
    HEAP32[$41>>2] = 0;
    $flags$1 = $flags$0;
    break;
   } else {
    $42 = (($pMem) + 32|0);
    HEAP32[$42>>2] = $xDel;
    $43 = ($xDel|0)==(0|0);
    $44 = $43 ? 2048 : 1024;
    $45 = $flags$0&65535;
    $46 = $45 | $44;
    $47 = $46&65535;
    $flags$1 = $47;
    break;
   }
  }
 } while(0);
 $48 = (($pMem) + 24|0);
 HEAP32[$48>>2] = $nByte$3;
 $49 = (($pMem) + 28|0);
 HEAP16[$49>>1] = $flags$1;
 $$enc = $5 ? 1 : $enc;
 $50 = (($pMem) + 30|0);
 HEAP8[$50>>0] = $$enc;
 $51 = ($$enc<<24>>24)==(1);
 if (!($51)) {
  $52 = (_sqlite3VdbeMemHandleBom($pMem)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $54 = ($nByte$3|0)>($iLimit$0|0);
 $$ = $54 ? 18 : 0;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_result_int($pCtx,$iVal) {
 $pCtx = $pCtx|0;
 $iVal = $iVal|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 $1 = ($iVal|0)<(0);
 $2 = $1 << 31 >> 31;
 _sqlite3VdbeMemSetInt64($0,$iVal,$2);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemSetInt64($pMem,$0,$1) {
 $pMem = $pMem|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3VdbeMemRelease($pMem);
 $2 = (($pMem) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = (($pMem) + 28|0);
 HEAP16[$7>>1] = 4;
 STACKTOP = sp;return;
}
function _sqlite3_result_int64($pCtx,$0,$1) {
 $pCtx = $pCtx|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pCtx) + 8|0);
 _sqlite3VdbeMemSetInt64($2,$0,$1);
 STACKTOP = sp;return;
}
function _sqlite3_result_null($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 _sqlite3VdbeMemSetNull($0);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemSetNull($pMem) {
 $pMem = $pMem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 64;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  $4 = (($pMem) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 180|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($5) + 4|0);
  HEAP32[$9>>2] = $8;
  HEAP32[$7>>2] = $5;
 }
 $10 = $1 & 32;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $15 = $1;
 } else {
  $12 = (($pMem) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  _sqlite3RowSetClear($13);
  $$pre = HEAP16[$0>>1]|0;
  $15 = $$pre;
 }
 $14 = $15&65535;
 $16 = $14 & 48640;
 $17 = $16 | 1;
 $18 = $17&65535;
 HEAP16[$0>>1] = $18;
 STACKTOP = sp;return;
}
function _sqlite3_result_text($pCtx,$z,$n,$xDel) {
 $pCtx = $pCtx|0;
 $z = $z|0;
 $n = $n|0;
 $xDel = $xDel|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _setResultStrOrError($pCtx,$z,$n,1,$xDel);
 STACKTOP = sp;return;
}
function _sqlite3_result_value($pCtx,$pValue) {
 $pCtx = $pCtx|0;
 $pValue = $pValue|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 _sqlite3VdbeMemCopy($0,$pValue);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemCopy($pTo,$pFrom) {
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTo) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 9312;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  _sqlite3VdbeMemReleaseExternal($pTo);
 }
 ;HEAP32[$pTo+0>>2]=HEAP32[$pFrom+0>>2]|0;HEAP32[$pTo+4>>2]=HEAP32[$pFrom+4>>2]|0;HEAP32[$pTo+8>>2]=HEAP32[$pFrom+8>>2]|0;HEAP32[$pTo+12>>2]=HEAP32[$pFrom+12>>2]|0;HEAP32[$pTo+16>>2]=HEAP32[$pFrom+16>>2]|0;HEAP32[$pTo+20>>2]=HEAP32[$pFrom+20>>2]|0;HEAP32[$pTo+24>>2]=HEAP32[$pFrom+24>>2]|0;HEAP32[$pTo+28>>2]=HEAP32[$pFrom+28>>2]|0;
 $4 = HEAP16[$0>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 64511;
 $7 = $6&65535;
 HEAP16[$0>>1] = $7;
 $8 = (($pTo) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = $5 & 18;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($pFrom) + 28|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 & 2048;
 $14 = ($13<<16>>16)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $6 | 4096;
 $16 = $15&65535;
 HEAP16[$0>>1] = $16;
 (_sqlite3VdbeMemMakeWriteable($pTo)|0);
 STACKTOP = sp;return;
}
function _sqlite3_result_zeroblob($pCtx,$n) {
 $pCtx = $pCtx|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 _sqlite3VdbeMemSetZeroBlob($0,$n);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemSetZeroBlob($pMem,$n) {
 $pMem = $pMem|0;
 $n = $n|0;
 var $$n = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3VdbeMemRelease($pMem);
 $0 = (($pMem) + 28|0);
 HEAP16[$0>>1] = 16400;
 $1 = (($pMem) + 24|0);
 HEAP32[$1>>2] = 0;
 $2 = ($n|0)<(0);
 $$n = $2 ? 0 : $n;
 $3 = (($pMem) + 16|0);
 HEAP32[$3>>2] = $$n;
 $4 = (($pMem) + 30|0);
 HEAP8[$4>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3_result_error_code($pCtx,$errCode) {
 $pCtx = $pCtx|0;
 $errCode = $errCode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 64|0);
 HEAP32[$0>>2] = $errCode;
 $1 = (($pCtx) + 69|0);
 HEAP8[$1>>0] = 1;
 $2 = (($pCtx) + 36|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 1;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($pCtx) + 8|0);
 $7 = (_sqlite3ErrStr($errCode)|0);
 (_sqlite3VdbeMemSetStr($6,$7,-1,1,0)|0);
 STACKTOP = sp;return;
}
function _sqlite3ErrStr($rc) {
 $rc = $rc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cond = 0, $or$cond = 0, $zErr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond = ($rc|0)==(516);
 if ($cond) {
  $zErr$0 = 6168;
 } else {
  $0 = $rc & 255;
  $1 = ($0>>>0)>(26);
  $2 = ($0|0)==(2);
  $or$cond = $1 | $2;
  if ($or$cond) {
   $zErr$0 = 6152;
  } else {
   $3 = (5312 + ($0<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $zErr$0 = $4;
  }
 }
 STACKTOP = sp;return ($zErr$0|0);
}
function _sqlite3_result_error_toobig($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 64|0);
 HEAP32[$0>>2] = 18;
 $1 = (($pCtx) + 69|0);
 HEAP8[$1>>0] = 1;
 $2 = (($pCtx) + 8|0);
 (_sqlite3VdbeMemSetStr($2,1688,-1,1,0)|0);
 STACKTOP = sp;return;
}
function _sqlite3_result_error_nomem($pCtx) {
 $pCtx = $pCtx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCtx) + 8|0);
 _sqlite3VdbeMemSetNull($0);
 $1 = (($pCtx) + 64|0);
 HEAP32[$1>>2] = 7;
 $2 = (($pCtx) + 69|0);
 HEAP8[$2>>0] = 1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 64|0);
 HEAP8[$4>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3_step($pStmt) {
 $pStmt = $pStmt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$04 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vdbeSafetyNotNull($pStmt)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _sqlite3MisuseError(65858);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$pStmt>>2]|0;
 $3 = (($pStmt) + 88|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & -2049;
 HEAP16[$3>>1] = $5;
 $6 = (_sqlite3Step($pStmt)|0);
 $7 = ($6|0)==(17);
 L5: do {
  if ($7) {
   $cnt$04 = 0;
   while(1) {
    $8 = (($cnt$04) + 1)|0;
    $9 = ($cnt$04|0)<(50);
    if (!($9)) {
     $rc$1 = 17;
     break L5;
    }
    $10 = (_sqlite3Reprepare($pStmt)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     break;
    }
    (_sqlite3_reset($pStmt)|0);
    $12 = HEAP16[$3>>1]|0;
    $13 = $12 | 2048;
    HEAP16[$3>>1] = $13;
    $14 = (_sqlite3Step($pStmt)|0);
    $15 = ($14|0)==(17);
    if ($15) {
     $cnt$04 = $8;
    } else {
     $rc$1 = $14;
     break L5;
    }
   }
   $16 = (($2) + 224|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_sqlite3_value_text($17)|0);
   $19 = (($pStmt) + 44|0);
   $20 = HEAP32[$19>>2]|0;
   _sqlite3DbFree($2,$20);
   $21 = (($2) + 64|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $24 = (_sqlite3DbStrDup($2,$18)|0);
    HEAP32[$19>>2] = $24;
    $25 = (($pStmt) + 80|0);
    HEAP32[$25>>2] = $10;
    $rc$1 = $10;
    break;
   } else {
    HEAP32[$19>>2] = 0;
    $26 = (($pStmt) + 80|0);
    HEAP32[$26>>2] = 7;
    $rc$1 = 7;
    break;
   }
  } else {
   $rc$1 = $6;
  }
 } while(0);
 $27 = (_sqlite3ApiExit($2,$rc$1)|0);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSafetyNotNull($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $p$idx$val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($p|0)==(0|0);
 if ($0) {
  _sqlite3_log(21,37000,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$idx$val = HEAP32[$p>>2]|0;
  $1 = (_vdbeSafety($p$idx$val)|0);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3Step($p) {
 $p = $p|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $iNow = 0, $rc$0 = 0, $rc$0$ = 0, $rc$1 = 0, $rc$2 = 0, $rc$2$off = 0, $rc$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iNow = sp;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1108210269);
 if (!($2)) {
  (_sqlite3_reset($p)|0);
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = (($3) + 64|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = (($p) + 80|0);
  HEAP32[$7>>2] = 7;
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($p) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(1);
 $11 = (($p) + 88|0);
 do {
  if ($10) {
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 & 32;
   $14 = ($13<<16>>16)==(0);
   if (!($14)) {
    $15 = (($p) + 80|0);
    HEAP32[$15>>2] = 17;
    $rc$2 = 1;
    break;
   }
   $16 = ($9|0)<(0);
   if ($16) {
    $17 = (($3) + 140|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = (($3) + 232|0);
     HEAP32[$20>>2] = 0;
    }
    $21 = (($3) + 172|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $24 = (($3) + 137|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if ($26) {
      $27 = HEAP32[$3>>2]|0;
      $28 = (($p) + 128|0);
      (_sqlite3OsCurrentTimeInt64($27,$28)|0);
     }
    }
    $29 = HEAP32[$17>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$17>>2] = $30;
    $31 = HEAP16[$11>>1]|0;
    $32 = $31 & 256;
    $33 = ($32<<16>>16)==(0);
    if ($33) {
     $34 = (($3) + 148|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + 1)|0;
     HEAP32[$34>>2] = $36;
     $$pre = HEAP16[$11>>1]|0;
     $38 = $$pre;
    } else {
     $38 = $31;
    }
    $37 = $38 & 512;
    $39 = ($37<<16>>16)==(0);
    if (!($39)) {
     $40 = (($3) + 144|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + 1)|0;
     HEAP32[$40>>2] = $42;
    }
    HEAP32[$8>>2] = 0;
    label = 19;
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $43 = HEAP16[$11>>1]|0;
  $44 = $43 & 3;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $47 = (($3) + 152|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$47>>2] = $49;
   $50 = (_sqlite3VdbeExec($p)|0);
   $51 = HEAP32[$47>>2]|0;
   $52 = (($51) + -1)|0;
   HEAP32[$47>>2] = $52;
   $rc$0 = $50;
  } else {
   $46 = (_sqlite3VdbeList($p)|0);
   $rc$0 = $46;
  }
  $cond = ($rc$0|0)==(100);
  if ($cond) {
   $rc$1 = 100;
  } else {
   $53 = (($3) + 172|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = (($3) + 137|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $59 = (($p) + 168|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if (!($61)) {
      $62 = HEAP32[$3>>2]|0;
      (_sqlite3OsCurrentTimeInt64($62,$iNow)|0);
      $63 = HEAP32[$53>>2]|0;
      $64 = (($3) + 176|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = HEAP32[$59>>2]|0;
      $67 = $iNow;
      $68 = $67;
      $69 = HEAP32[$68>>2]|0;
      $70 = (($67) + 4)|0;
      $71 = $70;
      $72 = HEAP32[$71>>2]|0;
      $73 = (($p) + 128|0);
      $74 = $73;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($74) + 4)|0;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (_i64Subtract(($69|0),($72|0),($76|0),($79|0))|0);
      $81 = tempRet0;
      $82 = (___muldi3(($80|0),($81|0),1000000,0)|0);
      $83 = tempRet0;
      FUNCTION_TABLE_viiii[$63 & 255]($65,$66,$82,$83);
     }
    }
   }
   $84 = ($rc$0|0)==(101);
   if ($84) {
    $85 = (_doWalCallbacks($3)|0);
    $86 = (($p) + 80|0);
    HEAP32[$86>>2] = $85;
    $87 = ($85|0)==(0);
    $rc$0$ = $87 ? 101 : 1;
    $rc$1 = $rc$0$;
   } else {
    $rc$1 = $rc$0;
   }
  }
  $88 = (($3) + 52|0);
  HEAP32[$88>>2] = $rc$1;
  $89 = HEAP32[$p>>2]|0;
  $90 = (($p) + 80|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_sqlite3ApiExit($89,$91)|0);
  $93 = ($92|0)==(7);
  if ($93) {
   HEAP32[$90>>2] = 7;
   $rc$2 = $rc$1;
  } else {
   $rc$2 = $rc$1;
  }
 }
 $94 = (($p) + 88|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95 & 1024;
 $97 = ($96<<16>>16)==(0);
 if ($97) {
  $rc$3 = $rc$2;
 } else {
  $rc$2$off = (($rc$2) + -100)|0;
  $98 = ($rc$2$off>>>0)>(1);
  if ($98) {
   $99 = (_sqlite3VdbeTransferError($p)|0);
   $rc$3 = $99;
  } else {
   $rc$3 = $rc$2;
  }
 }
 $100 = (($3) + 56|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $101 & $rc$3;
 $$0 = $102;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Reprepare($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p$idx$val = 0, $pNew = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pNew = sp;
 $0 = (_sqlite3_sql($p)|0);
 $p$idx$val = HEAP32[$p>>2]|0;
 $1 = (_sqlite3VdbeDb($p$idx$val)|0);
 $2 = (_sqlite3LockAndPrepare($1,$0,-1,0,$p,$pNew,0)|0);
 if ((($2|0) == 0)) {
  $4 = HEAP32[$pNew>>2]|0;
  _sqlite3VdbeSwap($4,$p);
  _sqlite3TransferBindings($4,$p);
  _sqlite3VdbeResetStepResult($4);
  (_sqlite3VdbeFinalize($4)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 7)) {
  $3 = (($1) + 64|0);
  HEAP8[$3>>0] = 1;
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3DbStrDup($db,$z) {
 $db = $db|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_sqlite3Strlen30($z)|0);
  $2 = (($1) + 1)|0;
  $3 = (_sqlite3DbMallocRaw($db,$2)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   _memcpy(($3|0),($z|0),($2|0))|0;
   $$0 = $3;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_user_data($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _sqlite3_context_db_handle($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3_aggregate_context($p,$nByte) {
 $p = $p|0;
 $nByte = $nByte|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 8192;
 $5 = ($4<<16>>16)==(0);
 do {
  if ($5) {
   $6 = ($nByte|0)<(1);
   if ($6) {
    _sqlite3VdbeMemReleaseExternal($1);
    HEAP16[$2>>1] = 1;
    $7 = (($1) + 4|0);
    HEAP32[$7>>2] = 0;
    $$pre$phiZ2D = $7;
    break;
   }
   (_sqlite3VdbeMemGrow($1,$nByte,0)|0);
   HEAP16[$2>>1] = 8192;
   $8 = HEAP32[$p>>2]|0;
   $9 = (($1) + 16|0);
   HEAP32[$9>>2] = $8;
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$pre$phiZ2D = $10;
   } else {
    _memset(($11|0),0,($nByte|0))|0;
    $$pre$phiZ2D = $10;
   }
  } else {
   $$pre = (($1) + 4|0);
   $$pre$phiZ2D = $$pre;
  }
 } while(0);
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _sqlite3VdbeMemReleaseExternal($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 8192;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($p) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  (_sqlite3VdbeMemFinalize($p,$6)|0);
  _sqlite3VdbeMemRelease($p);
  STACKTOP = sp;return;
 }
 $7 = $2 & 1024;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($p) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($p) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$10 & 255]($12);
  HEAP32[$9>>2] = 0;
  STACKTOP = sp;return;
 }
 $13 = $2 & 32;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (($p) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  _sqlite3RowSetClear($16);
  STACKTOP = sp;return;
 }
 $17 = $2 & 64;
 $18 = ($17|0)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeMemSetNull($p);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemGrow($pMem,$n,$bPreserve) {
 $pMem = $pMem|0;
 $n = $n|0;
 $bPreserve = $bPreserve|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$n = 0, $$pre = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[$pMem>>2]|0;
  $4 = (_sqlite3DbMallocSize($3,$1)|0);
  $5 = ($4|0)<($n|0);
  if ($5) {
   label = 3;
  } else {
   $$1 = $bPreserve;
  }
 }
 if ((label|0) == 3) {
  $6 = ($n|0)<(32);
  $$n = $6 ? 32 : $n;
  $7 = ($bPreserve|0)==(0);
  if ($7) {
   $$pre6 = HEAP32[$0>>2]|0;
   $15 = $$pre6;
   label = 7;
  } else {
   $8 = (($pMem) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$0>>2]|0;
   $11 = ($9|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$pMem>>2]|0;
    $13 = (_sqlite3DbReallocOrFree($12,$9,$$n)|0);
    HEAP32[$0>>2] = $13;
    HEAP32[$8>>2] = $13;
    $$0 = 0;$19 = $13;
   } else {
    $15 = $10;
    label = 7;
   }
  }
  if ((label|0) == 7) {
   $14 = HEAP32[$pMem>>2]|0;
   _sqlite3DbFree($14,$15);
   $16 = HEAP32[$pMem>>2]|0;
   $17 = (_sqlite3DbMallocRaw($16,$$n)|0);
   HEAP32[$0>>2] = $17;
   $$0 = $bPreserve;$19 = $17;
  }
  $18 = ($19|0)==(0|0);
  if ($18) {
   $20 = (($pMem) + 28|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 & 9312;
   $23 = ($22<<16>>16)==(0);
   if (!($23)) {
    _sqlite3VdbeMemReleaseExternal($pMem);
   }
   $24 = (($pMem) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP16[$20>>1] = 1;
   $$02 = 7;
   STACKTOP = sp;return ($$02|0);
  } else {
   $$1 = $$0;
  }
 }
 $25 = (($pMem) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 $28 = ($$1|0)==(0);
 $or$cond = $27 | $28;
 if (!($or$cond)) {
  $29 = HEAP32[$0>>2]|0;
  $30 = ($26|0)==($29|0);
  if (!($30)) {
   $31 = (($pMem) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   _memcpy(($29|0),($26|0),($32|0))|0;
  }
 }
 $33 = (($pMem) + 28|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 & 1024;
 $36 = ($35<<16>>16)==(0);
 $$pre7 = (($pMem) + 32|0);
 if ($36) {
  $41 = $34;
 } else {
  $37 = HEAP32[$$pre7>>2]|0;
  $38 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$37 & 255]($38);
  $$pre = HEAP16[$33>>1]|0;
  $41 = $$pre;
 }
 $39 = HEAP32[$0>>2]|0;
 HEAP32[$25>>2] = $39;
 $40 = $41&65535;
 $42 = $40 & 58367;
 $43 = $42&65535;
 HEAP16[$33>>1] = $43;
 HEAP32[$$pre7>>2] = 0;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function _sqlite3DbMallocZero($db,$n) {
 $db = $db|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3DbMallocRaw($db,$n)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _memset(($0|0),0,($n|0))|0;
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_column_count($pStmt) {
 $pStmt = $pStmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 if ($0) {
  $4 = 0;
 } else {
  $1 = (($pStmt) + 84|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2&65535;
  $4 = $3;
 }
 STACKTOP = sp;return ($4|0);
}
function _sqlite3_data_count($pStmt) {
 $pStmt = $pStmt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($pStmt) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = (($pStmt) + 84|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $$0 = $6;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _columnMem($pStmt,$i) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pOut$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($pStmt|0)==(0|0);
 do {
  if ($0) {
   $pOut$0 = 31216;
  } else {
   $1 = (($pStmt) + 20|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if (!($3)) {
    $4 = (($pStmt) + 84|0);
    $5 = HEAP16[$4>>1]|0;
    $6 = $5&65535;
    $7 = ($6|0)>($i|0);
    $8 = ($i|0)>(-1);
    $or$cond = $7 & $8;
    if ($or$cond) {
     $9 = (($2) + (($i*40)|0)|0);
     $pOut$0 = $9;
     break;
    }
   }
   $10 = HEAP32[$pStmt>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $pOut$0 = 31216;
   } else {
    _sqlite3Error($10,25,0,$vararg_buffer);
    $pOut$0 = 31216;
   }
  }
 } while(0);
 STACKTOP = sp;return ($pOut$0|0);
}
function _columnMallocFailure($pStmt) {
 $pStmt = $pStmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStmt|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pStmt>>2]|0;
 $2 = (($pStmt) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3ApiExit($1,$3)|0);
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function _sqlite3_column_double($pStmt,$i) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_columnMem($pStmt,$i)|0);
 $1 = (+_sqlite3_value_double($0));
 _columnMallocFailure($pStmt);
 STACKTOP = sp;return (+$1);
}
function _sqlite3_column_text($pStmt,$i) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_columnMem($pStmt,$i)|0);
 $1 = (_sqlite3_value_text($0)|0);
 _columnMallocFailure($pStmt);
 STACKTOP = sp;return ($1|0);
}
function _sqlite3_column_type($pStmt,$i) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_columnMem($pStmt,$i)|0);
 $1 = (_sqlite3_value_type($0)|0);
 _columnMallocFailure($pStmt);
 STACKTOP = sp;return ($1|0);
}
function _sqlite3_column_name($pStmt,$N) {
 $pStmt = $pStmt|0;
 $N = $N|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_columnName($pStmt,$N,146,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _columnName($pStmt,$N,$xFunc,$useType) {
 $pStmt = $pStmt|0;
 $N = $N|0;
 $xFunc = $xFunc|0;
 $useType = $useType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_column_count($pStmt)|0);
 $1 = ($0|0)>($N|0);
 $2 = ($N|0)>(-1);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $ret$0 = 0;
  STACKTOP = sp;return ($ret$0|0);
 }
 $3 = HEAP32[$pStmt>>2]|0;
 $4 = Math_imul($0, $useType)|0;
 $5 = (($4) + ($N))|0;
 $6 = (($pStmt) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($5*40)|0)|0);
 $9 = (FUNCTION_TABLE_ii[$xFunc & 255]($8)|0);
 $10 = (($3) + 64|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $ret$0 = $9;
  STACKTOP = sp;return ($ret$0|0);
 }
 HEAP8[$10>>0] = 0;
 $ret$0 = 0;
 STACKTOP = sp;return ($ret$0|0);
}
function _bindText($pStmt,$i,$zData,$nData,$xDel,$encoding) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 $zData = $zData|0;
 $nData = $nData|0;
 $xDel = $xDel|0;
 $encoding = $encoding|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $magicptr = 0, $or$cond2 = 0, $rc$0 = 0, $rc$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_vdbeUnbind($pStmt,$i)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $magicptr = $xDel;
  if ((($magicptr|0) == 0) | (($magicptr|0) == -1)) {
   $rc$1 = $0;
   STACKTOP = sp;return ($rc$1|0);
  }
  FUNCTION_TABLE_vi[$xDel & 255]($zData);
  $rc$1 = $0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $2 = ($zData|0)==(0|0);
 if ($2) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $3 = (($i) + -1)|0;
 $4 = (($pStmt) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($3*40)|0)|0);
 $7 = (_sqlite3VdbeMemSetStr($6,$zData,$nData,$encoding,$xDel)|0);
 $8 = ($7|0)!=(0);
 $9 = ($encoding<<24>>24)==(0);
 $or$cond2 = $8 | $9;
 if ($or$cond2) {
  $rc$0 = $7;
 } else {
  $10 = HEAP32[$pStmt>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 77|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (_sqlite3VdbeChangeEncoding($6,$17)|0);
  $rc$0 = $18;
 }
 $19 = HEAP32[$pStmt>>2]|0;
 _sqlite3Error($19,$rc$0,0,$vararg_buffer);
 $20 = HEAP32[$pStmt>>2]|0;
 $21 = (_sqlite3ApiExit($20,$rc$0)|0);
 $rc$1 = $21;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3_bind_double($pStmt,$i,$rValue) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 $rValue = +$rValue;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vdbeUnbind($pStmt,$i)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (($i) + -1)|0;
 $3 = (($pStmt) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + (($2*40)|0)|0);
 _sqlite3VdbeMemSetDouble($5,$rValue);
 STACKTOP = sp;return ($0|0);
}
function _vdbeUnbind($p,$i) {
 $p = $p|0;
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_vdbeSafetyNotNull($p)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _sqlite3MisuseError(66380);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($p) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1108210269);
 if ($4) {
  $5 = (($p) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>(-1);
  if (!($7)) {
   $11 = ($i|0)<(1);
   if (!($11)) {
    $12 = (($p) + 68|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13 << 16 >> 16;
    $15 = ($14|0)<($i|0);
    if (!($15)) {
     $17 = (($i) + -1)|0;
     $18 = (($p) + 60|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + (($17*40)|0)|0);
     _sqlite3VdbeMemRelease($20);
     $21 = ((($19) + (($17*40)|0)|0) + 28|0);
     HEAP16[$21>>1] = 1;
     $22 = HEAP32[$p>>2]|0;
     _sqlite3Error($22,0,0,$vararg_buffer5);
     $23 = (($p) + 88|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 & 1024;
     $26 = ($25<<16>>16)==(0);
     if ($26) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $27 = ($i|0)<(33);
     $28 = (($p) + 188|0);
     $29 = HEAP32[$28>>2]|0;
     if ($27) {
      $30 = 1 << $17;
      $31 = $29 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      $33 = ($29|0)==(-1);
      if (!($33)) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $34 = $24 | 32;
     HEAP16[$23>>1] = $34;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $16 = HEAP32[$p>>2]|0;
   _sqlite3Error($16,25,0,$vararg_buffer3);
   $$0 = 25;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = HEAP32[$p>>2]|0;
 _sqlite3Error($8,21,0,$vararg_buffer);
 $9 = (($p) + 168|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $10;
 _sqlite3_log(21,31176,$vararg_buffer1);
 _sqlite3MisuseError(66388);
 $$0 = 21;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_bind_text($pStmt,$i,$zData,$nData,$xDel) {
 $pStmt = $pStmt|0;
 $i = $i|0;
 $zData = $zData|0;
 $nData = $nData|0;
 $xDel = $xDel|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_bindText($pStmt,$i,$zData,$nData,$xDel,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeParameterIndex($p,$zName,$nName) {
 $p = $p|0;
 $zName = $zName|0;
 $nName = $nName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 $1 = ($zName|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($p) + 70|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)>(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($p) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $i$02 = 0;
 while(1) {
  $7 = (($6) + ($i$02<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = (_strncmp($8,$zName,$nName)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (($8) + ($nName)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     break;
    }
   }
  }
  $16 = (($i$02) + 1)|0;
  $17 = $3 << 16 >> 16;
  $18 = ($16|0)<($17|0);
  if ($18) {
   $i$02 = $16;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($i$02) + 1)|0;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3TransferBindings($pFromStmt,$pToStmt) {
 $pFromStmt = $pFromStmt|0;
 $pToStmt = $pToStmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFromStmt) + 68|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pToStmt) + 60|0);
 $4 = (($pFromStmt) + 60|0);
 $i$01 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + (($i$01*40)|0)|0);
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + (($i$01*40)|0)|0);
  _sqlite3VdbeMemMove($6,$8);
  $9 = (($i$01) + 1)|0;
  $10 = HEAP16[$0>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = ($9|0)<($11|0);
  if ($12) {
   $i$01 = $9;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3_value_numeric_type($pVal) {
 $pVal = $pVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $eType$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_value_type($pVal)|0);
 $1 = ($0|0)==(3);
 if ($1) {
  _applyNumericAffinity($pVal);
  $2 = (_sqlite3_value_type($pVal)|0);
  $eType$0 = $2;
 } else {
  $eType$0 = $0;
 }
 STACKTOP = sp;return ($eType$0|0);
}
function _applyNumericAffinity($pRec) {
 $pRec = $pRec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $iValue = 0, $rValue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rValue = sp + 8|0;
 $iValue = sp;
 $0 = (($pRec) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 12;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($pRec) + 30|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $2 & 2;
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($pRec) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($pRec) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_sqlite3AtoF($10,$rValue,$12,$6)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = (_sqlite3Atoi64($15,$iValue,$16,$6)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $iValue;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($pRec) + 16|0);
  $26 = $25;
  $27 = $26;
  HEAP32[$27>>2] = $21;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = HEAP16[$0>>1]|0;
  $31 = $30&65535;
  $32 = $31 | 4;
  $33 = $32&65535;
  HEAP16[$0>>1] = $33;
  STACKTOP = sp;return;
 } else {
  $34 = +HEAPF64[$rValue>>3];
  $35 = (($pRec) + 8|0);
  HEAPF64[$35>>3] = $34;
  $36 = HEAP16[$0>>1]|0;
  $37 = $36&65535;
  $38 = $37 | 8;
  $39 = $38&65535;
  HEAP16[$0>>1] = $39;
  STACKTOP = sp;return;
 }
}
function _sqlite3DbMallocRaw($db,$n) {
 $db = $db|0;
 $n = $n|0;
 var $$0 = 0, $$not = 0, $$not1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)!=(0|0);
 do {
  if ($0) {
   $1 = (($db) + 64|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $4 = (($db) + 242|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if (!($6)) {
    $7 = (($db) + 240|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8&65535;
    $10 = ($9|0)<($n|0);
    if ($10) {
     $11 = (($db) + 256|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($12) + 1)|0;
     HEAP32[$11>>2] = $13;
     break;
    }
    $14 = (($db) + 264|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = (($db) + 260|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     HEAP32[$17>>2] = $19;
     break;
    }
    $20 = HEAP32[$15>>2]|0;
    HEAP32[$14>>2] = $20;
    $21 = (($db) + 244|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 1)|0;
    HEAP32[$21>>2] = $23;
    $24 = (($db) + 252|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 1)|0;
    HEAP32[$24>>2] = $26;
    $27 = (($db) + 248|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($22|0)<($28|0);
    if (!($29)) {
     HEAP32[$27>>2] = $23;
    }
    $$0 = $15;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $30 = (_sqlite3Malloc($n)|0);
 $$not = ($30|0)!=(0|0);
 $$not1 = $0 ^ 1;
 $brmerge = $$not | $$not1;
 if ($brmerge) {
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (($db) + 64|0);
 HEAP8[$31>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3LocateTable($pParse,$isView,$zName,$zDbase) {
 $pParse = $pParse|0;
 $isView = $isView|0;
 $zName = $zName|0;
 $zDbase = $zDbase|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3ReadSchema($pParse)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (_sqlite3FindTable($2,$zName,$zDbase)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($isView|0)!=(0);
 $6 = $5 ? 31144 : 31160;
 $7 = ($zDbase|0)==(0|0);
 if ($7) {
  HEAP32[$vararg_buffer3>>2] = $6;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $zName;
  _sqlite3ErrorMsg($pParse,17432,$vararg_buffer3);
 } else {
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $zDbase;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $zName;
  _sqlite3ErrorMsg($pParse,17416,$vararg_buffer);
 }
 $8 = (($pParse) + 17|0);
 HEAP8[$8>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ErrorMsg($pParse,$zFormat,$varargs) {
 $pParse = $pParse|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = HEAP32[$pParse>>2]|0;
 HEAP32[$ap>>2] = $varargs;
 $1 = (_sqlite3VMPrintf($0,$zFormat,$ap)|0);
 $2 = (($0) + 67|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (($pParse) + 68|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
  $8 = (($pParse) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  _sqlite3DbFree($0,$9);
  HEAP32[$8>>2] = $1;
  $10 = (($pParse) + 12|0);
  HEAP32[$10>>2] = 1;
  STACKTOP = sp;return;
 } else {
  _sqlite3DbFree($0,$1);
  STACKTOP = sp;return;
 }
}
function _sqlite3MPrintf($db,$zFormat,$varargs) {
 $db = $db|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_sqlite3VMPrintf($db,$zFormat,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeCreate($pParse) {
 $pParse = $pParse|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3DbMallocZero($0,208)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$1>>2] = $0;
 $3 = (($0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $8 = 0;
 } else {
  $6 = (($4) + 48|0);
  HEAP32[$6>>2] = $1;
  $$pre = HEAP32[$3>>2]|0;
  $8 = $$pre;
 }
 $7 = (($1) + 52|0);
 HEAP32[$7>>2] = $8;
 $9 = (($1) + 48|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$3>>2] = $1;
 $10 = (($1) + 40|0);
 HEAP32[$10>>2] = 649915045;
 $11 = (($1) + 24|0);
 HEAP32[$11>>2] = $pParse;
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SchemaToIndex($db,$pSchema) {
 $db = $db|0;
 $pSchema = $pSchema|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pSchema|0)==(0|0);
 L1: do {
  if ($0) {
   $i$1 = -1000000;
  } else {
   $1 = (($db) + 20|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(0);
   if ($3) {
    $4 = (($db) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $i$01 = 0;
    while(1) {
     $8 = ((($5) + ($i$01<<4)|0) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==($pSchema|0);
     $7 = (($i$01) + 1)|0;
     if ($10) {
      $i$1 = $i$01;
      break L1;
     }
     $6 = ($7|0)<($2|0);
     if ($6) {
      $i$01 = $7;
     } else {
      $i$1 = $7;
      break;
     }
    }
   } else {
    $i$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($i$1|0);
}
function _sqlite3VdbeAddOp4Int($p,$op,$p1,$p2,$p3,$p4) {
 $p = $p|0;
 $op = $op|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 $p4 = $p4|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,$op,$p1,$p2,$p3)|0);
 $1 = $p4;
 _sqlite3VdbeChangeP4($p,$0,$1,-14);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeChangeP5($p,$val) {
 $p = $p|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ((($1) + (($5*20)|0)|0) + 3|0);
 HEAP8[$6>>0] = $val;
 STACKTOP = sp;return;
}
function _sqlite3VdbeAddOpList($p,$nOp,$aOp) {
 $p = $p|0;
 $nOp = $nOp|0;
 $aOp = $aOp|0;
 var $$0 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $pIn$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($nOp))|0;
 $3 = (($p) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($2|0)>($6|0);
 do {
  if ($7) {
   $8 = (_growOpArray($p)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$pre4 = HEAP32[$0>>2]|0;
    $16 = $$pre4;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $16 = $1;
  }
 } while(0);
 $10 = ($nOp|0)>(0);
 if (!($10)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($p) + 4|0);
 $i$02 = 0;$pIn$01 = $aOp;
 while(1) {
  $12 = (($pIn$01) + 2|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (($i$02) + ($16))|0;
  $17 = HEAP32[$11>>2]|0;
  $18 = HEAP8[$pIn$01>>0]|0;
  $19 = (($17) + (($15*20)|0)|0);
  HEAP8[$19>>0] = $18;
  $20 = (($pIn$01) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = ((($17) + (($15*20)|0)|0) + 4|0);
  HEAP32[$23>>2] = $22;
  $24 = ($13<<24>>24)<(0);
  if ($24) {
   $25 = $14 ^ -1;
   $26 = (($16) + ($25))|0;
   $27 = ((($17) + (($15*20)|0)|0) + 8|0);
   HEAP32[$27>>2] = $26;
  } else {
   $28 = ((($17) + (($15*20)|0)|0) + 8|0);
   HEAP32[$28>>2] = $14;
  }
  $29 = (($pIn$01) + 3|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ((($17) + (($15*20)|0)|0) + 12|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($17) + (($15*20)|0)|0) + 1|0);
  HEAP8[$33>>0] = 0;
  $34 = ((($17) + (($15*20)|0)|0) + 16|0);
  HEAP32[$34>>2] = 0;
  $35 = ((($17) + (($15*20)|0)|0) + 3|0);
  HEAP8[$35>>0] = 0;
  $36 = (($i$02) + 1)|0;
  $37 = (($pIn$01) + 4|0);
  $exitcond = ($36|0)==($nOp|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $36;$pIn$01 = $37;
  }
 }
 $$pre = HEAP32[$0>>2]|0;
 $38 = (($$pre) + ($nOp))|0;
 HEAP32[$0>>2] = $38;
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeUsesBtree($p,$i) {
 $p = $p|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1 << $i;
 $1 = (($p) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | $0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function _sqlite3VdbeChangeP1($p,$addr,$val) {
 $p = $p|0;
 $addr = $addr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($addr>>>0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + (($addr*20)|0)|0) + 4|0);
 HEAP32[$5>>2] = $val;
 STACKTOP = sp;return;
}
function _sqlite3VdbeChangeP2($p,$addr,$val) {
 $p = $p|0;
 $addr = $addr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($addr>>>0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + (($addr*20)|0)|0) + 8|0);
 HEAP32[$5>>2] = $val;
 STACKTOP = sp;return;
}
function _sqlite3VdbeChangeP3($p,$addr,$val) {
 $p = $p|0;
 $addr = $addr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($addr>>>0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + (($addr*20)|0)|0) + 12|0);
 HEAP32[$5>>2] = $val;
 STACKTOP = sp;return;
}
function _sqlite3VdbeChangeP4($p,$addr,$zP4,$n) {
 $p = $p|0;
 $addr = $addr|0;
 $zP4 = $zP4|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zP4$c = 0, $zP4$c2 = 0, $zP4$c3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($0) + 64|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $8 = ($addr|0)<(0);
   if ($8) {
    $9 = (($p) + 32|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + -1)|0;
    $$0 = $11;
   } else {
    $$0 = $addr;
   }
   $12 = ((($2) + (($$0*20)|0)|0) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ((($2) + (($$0*20)|0)|0) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   _freeP4($0,$14,$16);
   HEAP32[$15>>2] = 0;
   $17 = ($n|0)==(-14);
   if ($17) {
    $18 = $zP4;
    HEAP32[$15>>2] = $18;
    HEAP8[$12>>0] = -14;
    STACKTOP = sp;return;
   }
   $19 = ($zP4|0)==(0|0);
   if ($19) {
    HEAP32[$15>>2] = 0;
    HEAP8[$12>>0] = 0;
    STACKTOP = sp;return;
   }
   if ((($n|0) == -6)) {
    $zP4$c3 = $zP4;
    HEAP32[$15>>2] = $zP4$c3;
    HEAP8[$12>>0] = -6;
    STACKTOP = sp;return;
   } else if ((($n|0) == -10)) {
    $zP4$c2 = $zP4;
    HEAP32[$15>>2] = $zP4$c2;
    HEAP8[$12>>0] = -10;
    _sqlite3VtabLock($zP4);
    STACKTOP = sp;return;
   } else {
    $20 = ($n|0)<(0);
    if ($20) {
     $zP4$c = $zP4;
     HEAP32[$15>>2] = $zP4$c;
     $21 = $n&255;
     HEAP8[$12>>0] = $21;
     STACKTOP = sp;return;
    }
    $22 = ($n|0)==(0);
    if ($22) {
     $23 = (_sqlite3Strlen30($zP4)|0);
     $$01 = $23;
    } else {
     $$01 = $n;
    }
    $24 = HEAP32[$p>>2]|0;
    $25 = (_sqlite3DbStrNDup($24,$zP4,$$01)|0);
    $$c = $25;
    HEAP32[$15>>2] = $$c;
    HEAP8[$12>>0] = -1;
    STACKTOP = sp;return;
   }
  }
 }
 $7 = ($n|0)==(-10);
 if ($7) {
  STACKTOP = sp;return;
 }
 _freeP4($0,$n,$zP4);
 STACKTOP = sp;return;
}
function _sqlite3VdbeChangeToNoop($p,$addr) {
 $p = $p|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = ((($1) + (($addr*20)|0)|0) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ((($1) + (($addr*20)|0)|0) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 _freeP4($3,$6,$8);
 $9 = (($1) + (($addr*20)|0)|0);
 ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;
 HEAP8[$9>>0] = -101;
 $10 = (($p) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = ($12|0)==($addr|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 HEAP32[$10>>2] = $addr;
 STACKTOP = sp;return;
}
function _sqlite3VdbeMakeReady($p,$pParse) {
 $p = $p|0;
 $pParse = $pParse|0;
 var $$ = 0, $$pre = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond11 = 0, $n$04 = 0;
 var $n$12 = 0, $nArg = 0, $nByte = 0, $nMem$0 = 0, $or$cond = 0, $phitmp = 0, $phitmp1 = 0, $sext = 0, $zCsr = 0, $zEnd$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nArg = sp + 8|0;
 $zCsr = sp + 4|0;
 $nByte = sp;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($pParse) + 444|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pParse) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pParse) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pParse) + 396|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$nArg>>2] = $8;
 $9 = (($pParse) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 $$ = $11 ? 1 : $10;
 $12 = (($6) + ($4))|0;
 $13 = (($p) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($p) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($14*20)|0)|0);
 HEAP32[$zCsr>>2] = $17;
 $18 = (($pParse) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + (($19*20)|0)|0);
 _resolveP2Values($p,$nArg);
 $21 = (($pParse) + 22|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $31 = 0;
 } else {
  $24 = (($pParse) + 23|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)!=(0);
  $phitmp1 = $26&1;
  $phitmp = ($phitmp1 << 7)&65535;
  $31 = $phitmp;
 }
 $27 = (($p) + 88|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 & -129;
 $30 = $29 | $31;
 HEAP16[$27>>1] = $30;
 $32 = (($pParse) + 454|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)!=(0);
 $35 = ($12|0)<(10);
 $or$cond = $34 & $35;
 $nMem$0 = $or$cond ? 10 : $12;
 $36 = $20;
 $37 = $17;
 $38 = (($36) - ($37))|0;
 _memset(($17|0),0,($38|0))|0;
 $39 = $37 & 7;
 $40 = (($17) + ($39)|0);
 HEAP32[$zCsr>>2] = $40;
 $41 = HEAP16[$27>>1]|0;
 $42 = $41 & -33;
 HEAP16[$27>>1] = $42;
 $43 = (($p) + 8|0);
 $44 = ($nMem$0*40)|0;
 $45 = (($p) + 60|0);
 $46 = ($2*40)|0;
 $47 = (($p) + 12|0);
 $48 = HEAP32[$nArg>>2]|0;
 $49 = $48 << 2;
 $50 = (($p) + 64|0);
 $51 = $2 << 2;
 $52 = (($p) + 56|0);
 $53 = $6 << 2;
 $54 = (($p) + 200|0);
 $55 = (($p) + 172|0);
 $56 = (($0) + 64|0);
 $zEnd$0 = $20;
 while(1) {
  HEAP32[$nByte>>2] = 0;
  $57 = HEAP32[$43>>2]|0;
  $58 = (_allocSpace($57,$44,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$43>>2] = $58;
  $59 = HEAP32[$45>>2]|0;
  $60 = (_allocSpace($59,$46,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$45>>2] = $60;
  $61 = HEAP32[$47>>2]|0;
  $62 = (_allocSpace($61,$49,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$47>>2] = $62;
  $63 = HEAP32[$50>>2]|0;
  $64 = (_allocSpace($63,$51,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$50>>2] = $64;
  $65 = HEAP32[$52>>2]|0;
  $66 = (_allocSpace($65,$53,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$52>>2] = $66;
  $67 = HEAP32[$54>>2]|0;
  $68 = (_allocSpace($67,$$,$zCsr,$zEnd$0,$nByte)|0);
  HEAP32[$54>>2] = $68;
  $69 = HEAP32[$nByte>>2]|0;
  $70 = ($69|0)==(0);
  if ($70) {
   label = 5;
   break;
  }
  $72 = (_sqlite3DbMallocZero($0,$69)|0);
  HEAP32[$55>>2] = $72;
  HEAP32[$zCsr>>2] = $72;
  $73 = (($72) + ($69)|0);
  $74 = HEAP8[$56>>0]|0;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $zEnd$0 = $73;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  $71 = HEAP32[$55>>2]|0;
  HEAP32[$zCsr>>2] = $71;
 }
 $76 = (($p) + 36|0);
 HEAP32[$76>>2] = $6;
 $77 = (($p) + 196|0);
 HEAP32[$77>>2] = $$;
 $78 = HEAP32[$45>>2]|0;
 $79 = ($78|0)==(0|0);
 L10: do {
  if (!($79)) {
   $80 = $2&65535;
   $81 = (($p) + 68|0);
   HEAP16[$81>>1] = $80;
   $82 = ($2|0)>(0);
   if ($82) {
    $84 = $78;$n$04 = 0;
    while(1) {
     $83 = ((($84) + (($n$04*40)|0)|0) + 28|0);
     HEAP16[$83>>1] = 1;
     $85 = (($84) + (($n$04*40)|0)|0);
     HEAP32[$85>>2] = $0;
     $86 = (($n$04) + 1)|0;
     $exitcond11 = ($86|0)==($2|0);
     if ($exitcond11) {
      break L10;
     }
     $$pre13 = HEAP32[$45>>2]|0;
     $84 = $$pre13;$n$04 = $86;
    }
   }
  }
 } while(0);
 $87 = HEAP32[$50>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = (($pParse) + 448|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90&65535;
  $92 = (($p) + 70|0);
  HEAP16[$92>>1] = $91;
  $93 = (($pParse) + 476|0);
  $94 = HEAP32[$93>>2]|0;
  $sext = $90 << 16;
  $95 = $sext >> 14;
  _memcpy(($87|0),($94|0),($95|0))|0;
  $96 = HEAP32[$93>>2]|0;
  $97 = HEAP32[$89>>2]|0;
  $98 = $97 << 2;
  _memset(($96|0),0,($98|0))|0;
 }
 $99 = HEAP32[$43>>2]|0;
 $100 = ($99|0)==(0|0);
 if ($100) {
  $108 = HEAP8[$32>>0]|0;
  $109 = $108&255;
  $110 = HEAP16[$27>>1]|0;
  $111 = $109 & 3;
  $112 = $110 & -4;
  $113 = $112 | $111;
  HEAP16[$27>>1] = $113;
  _sqlite3VdbeRewind($p);
  STACKTOP = sp;return;
 }
 $101 = (($99) + -40|0);
 HEAP32[$43>>2] = $101;
 $102 = (($p) + 28|0);
 HEAP32[$102>>2] = $nMem$0;
 $103 = ($nMem$0|0)<(1);
 if ($103) {
  $108 = HEAP8[$32>>0]|0;
  $109 = $108&255;
  $110 = HEAP16[$27>>1]|0;
  $111 = $109 & 3;
  $112 = $110 & -4;
  $113 = $112 | $111;
  HEAP16[$27>>1] = $113;
  _sqlite3VdbeRewind($p);
  STACKTOP = sp;return;
 } else {
  $105 = $101;$n$12 = 1;
 }
 while(1) {
  $104 = ((($105) + (($n$12*40)|0)|0) + 28|0);
  HEAP16[$104>>1] = 128;
  $106 = (($105) + (($n$12*40)|0)|0);
  HEAP32[$106>>2] = $0;
  $exitcond = ($n$12|0)==($nMem$0|0);
  if ($exitcond) {
   break;
  }
  $107 = (($n$12) + 1)|0;
  $$pre = HEAP32[$43>>2]|0;
  $105 = $$pre;$n$12 = $107;
 }
 $108 = HEAP8[$32>>0]|0;
 $109 = $108&255;
 $110 = HEAP16[$27>>1]|0;
 $111 = $109 & 3;
 $112 = $110 & -4;
 $113 = $112 | $111;
 HEAP16[$27>>1] = $113;
 _sqlite3VdbeRewind($p);
 STACKTOP = sp;return;
}
function _sqlite3ParserReset($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pParse|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pParse>>2]|0;
 $2 = (($pParse) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 _sqlite3DbFree($1,$3);
 $4 = (($pParse) + 320|0);
 $5 = HEAP32[$4>>2]|0;
 _sqlite3ExprListDelete($1,$5);
 STACKTOP = sp;return;
}
function _sqlite3BtreeData($pCur,$offset,$amt,$pBuf) {
 $pCur = $pCur|0;
 $offset = $offset|0;
 $amt = $amt|0;
 $pBuf = $pBuf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $$0 = 4;
  } else {
   $3 = ($1&255)>(2);
   if ($3) {
    $4 = (_btreeRestoreCursorPosition($pCur)|0);
    $5 = ($4|0)==(0);
    if (!($5)) {
     $$0 = $4;
     break;
    }
   }
   $6 = (_accessPayload($pCur,$offset,$amt,$pBuf,0)|0);
   $$0 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExpirePreparedStatements($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 4|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $p$02 = $p$01;
 }
 while(1) {
  $2 = (($p$02) + 88|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 | 32;
  HEAP16[$2>>1] = $4;
  $5 = (($p$02) + 52|0);
  $p$0 = HEAP32[$5>>2]|0;
  $6 = ($p$0|0)==(0|0);
  if ($6) {
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3_strglob($zGlobPattern,$zString) {
 $zGlobPattern = $zGlobPattern|0;
 $zString = $zString|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_patternCompare($zGlobPattern,$zString,1720,0)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _patternCompare($zPattern,$zString,$pInfo,$esc) {
 $zPattern = $zPattern|0;
 $zString = $zString|0;
 $pInfo = $pInfo|0;
 $esc = $esc|0;
 var $$ = 0, $$0 = 0, $$6 = 0, $$633 = 0, $$lcssa31 = 0, $$pre = 0, $$pre67 = 0, $$seen$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$0$ph = 0, $c$1$ph = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0;
 var $c2$0 = 0, $c2$1$be = 0, $c2$3 = 0, $c2$4 = 0, $c2$5$ph = 0, $c2$535 = 0, $c2$6 = 0, $invert$0 = 0, $not$ = 0, $not$32 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond310 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond68 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, $phitmp = 0;
 var $prevEscape$0$ph$be = 0, $prevEscape$0$ph56 = 0, $prior_c$036 = 0, $prior_c$1 = 0, $seen$1$lcssa = 0, $seen$1$ph = 0, $seen$134 = 0, $seen$2 = 0, $seen$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $zPattern;
 HEAP32[$1>>2] = $zString;
 $2 = (($pInfo) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = HEAP8[$pInfo>>0]|0;
 $5 = (($pInfo) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($pInfo) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (_sqlite3Utf8Read($0)|0);
 $10 = ($9|0)==(0);
 L1: do {
  if (!($10)) {
   $11 = $4&255;
   $12 = $3&255;
   $13 = $6&255;
   $14 = ($8<<24>>24)==(0);
   $125 = $9;$prevEscape$0$ph56 = 0;
   L3: while(1) {
    $15 = ($prevEscape$0$ph56|0)==(0);
    $17 = $125;
    while(1) {
     $16 = ($17|0)==($11|0);
     $or$cond = $16 & $15;
     if ($or$cond) {
      label = 5;
      break L3;
     }
     $80 = ($17|0)==($12|0);
     $or$cond5 = $80 & $15;
     if ($or$cond5) {
      $81 = (_sqlite3Utf8Read($1)|0);
      $82 = ($81|0)==(0);
      if ($82) {
       $$0 = 0;
       label = 63;
       break L3;
      }
     } else {
      $85 = ($17|0)==($13|0);
      if (!($85)) {
       break;
      }
      $86 = (_sqlite3Utf8Read($1)|0);
      $87 = ($86|0)==(0);
      if ($87) {
       $$0 = 0;
       label = 63;
       break L3;
      }
      $88 = (_sqlite3Utf8Read($0)|0);
      $89 = ($88|0)==(94);
      if ($89) {
       $90 = (_sqlite3Utf8Read($0)|0);
       $c2$4 = $90;$invert$0 = 1;
      } else {
       $c2$4 = $88;$invert$0 = 0;
      }
      $91 = ($c2$4|0)==(93);
      if ($91) {
       $92 = ($86|0)==(93);
       $$ = $92&1;
       $93 = (_sqlite3Utf8Read($0)|0);
       $c2$5$ph = $93;$seen$1$ph = $$;
      } else {
       $c2$5$ph = $c2$4;$seen$1$ph = 0;
      }
      $94 = ($c2$5$ph|0)==(0);
      $95 = ($c2$5$ph|0)!=(93);
      $not$32 = $94 ^ 1;
      $$633 = $95 & $not$32;
      if ($$633) {
       $c2$535 = $c2$5$ph;$prior_c$036 = 0;$seen$134 = $seen$1$ph;
       while(1) {
        $96 = ($c2$535|0)==(45);
        if ($96) {
         $97 = HEAP32[$0>>2]|0;
         $98 = HEAP8[$97>>0]|0;
         if ((($98<<24>>24) == 0) | (($98<<24>>24) == 93)) {
          label = 51;
         } else {
          $99 = ($prior_c$036|0)==(0);
          if ($99) {
           label = 51;
          } else {
           $100 = (_sqlite3Utf8Read($0)|0);
           $101 = ($86>>>0)<($prior_c$036>>>0);
           $102 = ($86>>>0)>($100>>>0);
           $or$cond7 = $101 | $102;
           $seen$2 = $or$cond7 ? $seen$134 : 1;
           $prior_c$1 = 0;$seen$4 = $seen$2;
          }
         }
        } else {
         label = 51;
        }
        if ((label|0) == 51) {
         label = 0;
         $103 = ($86|0)==($c2$535|0);
         $$seen$1 = $103 ? 1 : $seen$134;
         $prior_c$1 = $c2$535;$seen$4 = $$seen$1;
        }
        $104 = (_sqlite3Utf8Read($0)|0);
        $105 = ($104|0)==(0);
        $106 = ($104|0)!=(93);
        $not$ = $105 ^ 1;
        $$6 = $106 & $not$;
        if ($$6) {
         $c2$535 = $104;$prior_c$036 = $prior_c$1;$seen$134 = $seen$4;
        } else {
         $$lcssa31 = $105;$seen$1$lcssa = $seen$4;
         break;
        }
       }
      } else {
       $$lcssa31 = $94;$seen$1$lcssa = $seen$1$ph;
      }
      $107 = ($seen$1$lcssa|0)==($invert$0|0);
      $or$cond8 = $$lcssa31 | $107;
      if ($or$cond8) {
       $$0 = 0;
       label = 63;
       break L3;
      }
     }
     $83 = (_sqlite3Utf8Read($0)|0);
     $84 = ($83|0)==(0);
     if ($84) {
      break L1;
     } else {
      $17 = $83;
     }
    }
    $108 = ($17|0)==($esc|0);
    $or$cond9 = $108 & $15;
    if ($or$cond9) {
     $prevEscape$0$ph$be = 1;
    } else {
     $111 = (_sqlite3Utf8Read($1)|0);
     if ($14) {
      $c$4 = $17;$c2$6 = $111;
     } else {
      $112 = ($17>>>0)>(127);
      if ($112) {
       $c$3 = $17;
      } else {
       $113 = (960 + ($17)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $114&255;
       $c$3 = $115;
      }
      $116 = ($111>>>0)>(127);
      if ($116) {
       $c$4 = $c$3;$c2$6 = $111;
      } else {
       $117 = (960 + ($111)|0);
       $118 = HEAP8[$117>>0]|0;
       $119 = $118&255;
       $c$4 = $c$3;$c2$6 = $119;
      }
     }
     $120 = ($c$4|0)==($c2$6|0);
     if ($120) {
      $prevEscape$0$ph$be = 0;
     } else {
      $$0 = 0;
      label = 63;
      break;
     }
    }
    $109 = (_sqlite3Utf8Read($0)|0);
    $110 = ($109|0)==(0);
    if ($110) {
     break L1;
    } else {
     $125 = $109;$prevEscape$0$ph56 = $prevEscape$0$ph$be;
    }
   }
   if ((label|0) == 5) {
    while(1) {
     label = 0;
     $18 = (_sqlite3Utf8Read($0)|0);
     $19 = ($18|0)==($11|0);
     $20 = ($18|0)==($12|0);
     $or$cond68 = $19 | $20;
     if (!($or$cond68)) {
      break;
     }
     $21 = ($18|0)==($12|0);
     if (!($21)) {
      label = 5;
      continue;
     }
     $22 = (_sqlite3Utf8Read($1)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$0 = 0;
      label = 63;
      break;
     } else {
      label = 5;
     }
    }
    if ((label|0) == 63) {
     STACKTOP = sp;return ($$0|0);
    }
    $24 = ($18|0)==(0);
    if ($24) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
    $25 = ($18|0)==($esc|0);
    if ($25) {
     $26 = (_sqlite3Utf8Read($0)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $c$0$ph = $26;
     }
    } else {
     $28 = ($18|0)==($13|0);
     if ($28) {
      $29 = HEAP32[$1>>2]|0;
      $30 = HEAP8[$29>>0]|0;
      $31 = ($30<<24>>24)==(0);
      L58: do {
       if ($31) {
        $52 = 0;
       } else {
        $$pre67 = HEAP32[$0>>2]|0;
        $35 = $29;
        while(1) {
         $34 = (($$pre67) + -1|0);
         $36 = (_patternCompare($34,$35,$pInfo,$esc)|0);
         $37 = ($36|0)==(0);
         if (!($37)) {
          break;
         }
         $38 = (($35) + 1|0);
         HEAP32[$1>>2] = $38;
         $39 = HEAP8[$35>>0]|0;
         $40 = ($39&255)>(191);
         if ($40) {
          $44 = HEAP8[$38>>0]|0;
          $45 = $44 & -64;
          $46 = ($45<<24>>24)==(-128);
          if ($46) {
           $47 = $38;
           while(1) {
            $33 = (($47) + 1|0);
            $48 = HEAP8[$33>>0]|0;
            $49 = $48 & -64;
            $50 = ($49<<24>>24)==(-128);
            if ($50) {
             $47 = $33;
            } else {
             break;
            }
           }
           HEAP32[$1>>2] = $33;
           $42 = $33;
          } else {
           $42 = $38;
          }
         } else {
          $42 = $38;
         }
         $41 = HEAP8[$42>>0]|0;
         $43 = ($41<<24>>24)==(0);
         if ($43) {
          $52 = 0;
          break L58;
         } else {
          $35 = $42;
         }
        }
        $$pre = HEAP8[$35>>0]|0;
        $phitmp = ($$pre<<24>>24)!=(0);
        $52 = $phitmp;
       }
      } while(0);
      $51 = $52&1;
      $$0 = $51;
      STACKTOP = sp;return ($$0|0);
     } else {
      $c$0$ph = $18;
     }
    }
    $32 = HEAP32[$0>>2]|0;
    $c$0 = $c$0$ph;
    while(1) {
     $53 = (_sqlite3Utf8Read($1)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      $$0 = 0;
      label = 63;
      break;
     }
     if ($14) {
      $55 = ($53|0)==($c$0|0);
      if ($55) {
       $c$2 = $c$0;$c2$3 = $c$0;
      } else {
       while(1) {
        $73 = (_sqlite3Utf8Read($1)|0);
        $74 = ($73|0)==(0);
        $75 = ($73|0)==($c$0|0);
        $or$cond4 = $74 | $75;
        if ($or$cond4) {
         $c$2 = $c$0;$c2$3 = $73;
         break;
        }
       }
      }
     } else {
      $56 = ($53>>>0)>(127);
      if ($56) {
       $c2$0 = $53;
      } else {
       $57 = (960 + ($53)|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58&255;
       $c2$0 = $59;
      }
      $60 = ($c$0>>>0)>(127);
      if ($60) {
       $c$1$ph = $c$0;
      } else {
       $61 = (960 + ($c$0)|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = $62&255;
       $c$1$ph = $63;
      }
      $64 = ($c2$0|0)==(0);
      $65 = ($c2$0|0)==($c$1$ph|0);
      $or$cond310 = $64 | $65;
      if ($or$cond310) {
       $c$2 = $c$1$ph;$c2$3 = $c2$0;
      } else {
       while(1) {
        $66 = (_sqlite3Utf8Read($1)|0);
        $67 = ($66>>>0)>(127);
        if ($67) {
         $c2$1$be = $66;
        } else {
         $68 = (960 + ($66)|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = $69&255;
         $c2$1$be = $70;
        }
        $71 = ($c2$1$be|0)==(0);
        $72 = ($c2$1$be|0)==($c$1$ph|0);
        $or$cond3 = $71 | $72;
        if ($or$cond3) {
         $c$2 = $c$1$ph;$c2$3 = $c2$1$be;
         break;
        }
       }
      }
     }
     $76 = ($c2$3|0)==(0);
     if ($76) {
      $$0 = 0;
      label = 63;
      break;
     }
     $77 = HEAP32[$1>>2]|0;
     $78 = (_patternCompare($32,$77,$pInfo,$esc)|0);
     $79 = ($78|0)==(0);
     if ($79) {
      $c$0 = $c$2;
     } else {
      $$0 = 1;
      label = 63;
      break;
     }
    }
    if ((label|0) == 63) {
     STACKTOP = sp;return ($$0|0);
    }
   }
   else if ((label|0) == 63) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $121 = HEAP32[$1>>2]|0;
 $122 = HEAP8[$121>>0]|0;
 $123 = ($122<<24>>24)==(0);
 $124 = $123&1;
 $$0 = $124;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_exec($db,$zSql,$xCallback,$pArg,$pzErrMsg) {
 $db = $db|0;
 $zSql = $zSql|0;
 $xCallback = $xCallback|0;
 $pArg = $pArg|0;
 $pzErrMsg = $pzErrMsg|0;
 var $$0 = 0, $$1$ph = 0, $$2 = 0, $$pre = 0, $$pre22 = 0, $$pre24 = 0, $$sum = 0, $$zSql = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $azCols$1 = 0, $azCols$2 = 0;
 var $azCols$3 = 0, $azCols$33 = 0, $azCols$4 = 0, $azCols$426 = 0, $azVals$0 = 0, $azVals$1 = 0, $azVals$2 = 0, $callbackIsInit$0 = 0, $callbackIsInit$1 = 0, $callbackIsInit$2 = 0, $exitcond = 0, $i$04 = 0, $i$16 = 0, $or$cond = 0, $or$cond2 = 0, $pStmt = 0, $rc$0 = 0, $rc$0$ph = 0, $rc$1 = 0, $rc$1$ph = 0;
 var $rc$125 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $zLeftover = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zLeftover = sp + 24|0;
 $pStmt = sp + 20|0;
 HEAP32[$pStmt>>2] = 0;
 $0 = (_sqlite3SafetyCheckOk($db)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _sqlite3MisuseError(95494);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($zSql|0)==(0|0);
 $$zSql = $2 ? 1728 : $zSql;
 _sqlite3Error($db,0,0,$vararg_buffer);
 $3 = ($xCallback|0)==(0|0);
 $4 = (($db) + 24|0);
 $$1$ph = $$zSql;$rc$0$ph = 0;
 L5: while(1) {
  $rc$0 = $rc$0$ph;
  while(1) {
   $5 = ($rc$0|0)==(0);
   if (!($5)) {
    $rc$1$ph = $rc$0;
    label = 32;
    break L5;
   }
   $6 = HEAP8[$$1$ph>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $rc$1$ph = 0;
    label = 32;
    break L5;
   }
   HEAP32[$pStmt>>2] = 0;
   $8 = (_sqlite3_prepare_v2($db,$$1$ph,-1,$pStmt,$zLeftover)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   } else {
    $rc$0 = $8;
   }
  }
  $10 = HEAP32[$pStmt>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = HEAP32[$zLeftover>>2]|0;
   $$1$ph = $12;$rc$0$ph = 0;
   continue;
  }
  $13 = (_sqlite3_column_count($10)|0);
  $14 = $13 << 3;
  $15 = $14 | 1;
  $16 = ($13|0)>(0);
  $17 = $10;$azCols$1 = 0;$azVals$0 = 0;$callbackIsInit$0 = 0;
  L15: while(1) {
   $18 = (_sqlite3_step($17)|0);
   do {
    if ($3) {
     $azCols$3 = $azCols$1;$azVals$2 = $azVals$0;$callbackIsInit$2 = $callbackIsInit$0;
    } else {
     $19 = ($18|0)==(100);
     if (!($19)) {
      $20 = ($18|0)==(101);
      $21 = ($callbackIsInit$0|0)==(0);
      $or$cond = $20 & $21;
      if (!($or$cond)) {
       $46 = $17;$azCols$33 = $azCols$1;
       break L15;
      }
      $22 = HEAP32[$4>>2]|0;
      $23 = $22 & 256;
      $24 = ($23|0)==(0);
      if ($24) {
       $azCols$3 = $azCols$1;$azVals$2 = $azVals$0;$callbackIsInit$2 = 0;
       break;
      }
     }
     $25 = ($callbackIsInit$0|0)==(0);
     if ($25) {
      $26 = (_sqlite3DbMallocZero($db,$15)|0);
      $27 = ($26|0)==(0|0);
      if ($27) {
       $57 = $17;$azCols$4 = $26;$rc$1 = $18;
       label = 33;
       break L5;
      }
      if ($16) {
       $i$04 = 0;
       while(1) {
        $28 = (_sqlite3_column_name($17,$i$04)|0);
        $29 = (($26) + ($i$04<<2)|0);
        HEAP32[$29>>2] = $28;
        $30 = (($i$04) + 1)|0;
        $exitcond = ($30|0)==($13|0);
        if ($exitcond) {
         $azCols$2 = $26;$callbackIsInit$1 = 1;
         break;
        } else {
         $i$04 = $30;
        }
       }
      } else {
       $azCols$2 = $26;$callbackIsInit$1 = 1;
      }
     } else {
      $azCols$2 = $azCols$1;$callbackIsInit$1 = $callbackIsInit$0;
     }
     L29: do {
      if ($19) {
       $31 = (($azCols$2) + ($13<<2)|0);
       if ($16) {
        $32 = $17;$i$16 = 0;
        while(1) {
         $33 = (_sqlite3_column_text($32,$i$16)|0);
         $$sum = (($i$16) + ($13))|0;
         $34 = (($azCols$2) + ($$sum<<2)|0);
         HEAP32[$34>>2] = $33;
         $35 = ($33|0)==(0|0);
         if ($35) {
          $36 = HEAP32[$pStmt>>2]|0;
          $37 = (_sqlite3_column_type($36,$i$16)|0);
          $38 = ($37|0)==(5);
          if (!($38)) {
           label = 23;
           break L5;
          }
         }
         $40 = (($i$16) + 1)|0;
         $41 = ($40|0)<($13|0);
         if (!($41)) {
          $azVals$1 = $31;
          break L29;
         }
         $$pre24 = HEAP32[$pStmt>>2]|0;
         $32 = $$pre24;$i$16 = $40;
        }
       } else {
        $azVals$1 = $31;
       }
      } else {
       $azVals$1 = $azVals$0;
      }
     } while(0);
     $42 = (FUNCTION_TABLE_iiiii[$xCallback & 255]($pArg,$13,$azVals$1,$azCols$2)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $azCols$3 = $azCols$2;$azVals$2 = $azVals$1;$callbackIsInit$2 = $callbackIsInit$1;
     } else {
      label = 27;
      break L5;
     }
    }
   } while(0);
   $45 = ($18|0)==(100);
   $$pre22 = HEAP32[$pStmt>>2]|0;
   if ($45) {
    $17 = $$pre22;$azCols$1 = $azCols$3;$azVals$0 = $azVals$2;$callbackIsInit$0 = $callbackIsInit$2;
   } else {
    $46 = $$pre22;$azCols$33 = $azCols$3;
    break;
   }
  }
  $47 = (_sqlite3VdbeFinalize($46)|0);
  HEAP32[$pStmt>>2] = 0;
  $48 = HEAP32[$zLeftover>>2]|0;
  $$2 = $48;
  while(1) {
   $49 = HEAP8[$$2>>0]|0;
   $50 = $49&255;
   $51 = (48 + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   $55 = (($$2) + 1|0);
   if ($54) {
    break;
   } else {
    $$2 = $55;
   }
  }
  _sqlite3DbFree($db,$azCols$33);
  $$1$ph = $$2;$rc$0$ph = $47;
 }
 if ((label|0) == 23) {
  $39 = (($db) + 64|0);
  HEAP8[$39>>0] = 1;
  $57 = $36;$azCols$4 = $azCols$2;$rc$1 = 100;
  label = 33;
 }
 else if ((label|0) == 27) {
  $44 = HEAP32[$pStmt>>2]|0;
  (_sqlite3VdbeFinalize($44)|0);
  HEAP32[$pStmt>>2] = 0;
  _sqlite3Error($db,4,0,$vararg_buffer1);
  $azCols$426 = $azCols$2;$rc$125 = 4;
 }
 else if ((label|0) == 32) {
  $$pre = HEAP32[$pStmt>>2]|0;
  $57 = $$pre;$azCols$4 = 0;$rc$1 = $rc$1$ph;
  label = 33;
 }
 if ((label|0) == 33) {
  $56 = ($57|0)==(0|0);
  if ($56) {
   $azCols$426 = $azCols$4;$rc$125 = $rc$1;
  } else {
   (_sqlite3VdbeFinalize($57)|0);
   $azCols$426 = $azCols$4;$rc$125 = $rc$1;
  }
 }
 _sqlite3DbFree($db,$azCols$426);
 $58 = (_sqlite3ApiExit($db,$rc$125)|0);
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = (_sqlite3_errcode($db)|0);
  $61 = ($58|0)!=($60|0);
  $62 = ($pzErrMsg|0)==(0|0);
  $or$cond2 = $61 | $62;
  if (!($or$cond2)) {
   $63 = (_sqlite3_errmsg($db)|0);
   $64 = (_sqlite3Strlen30($63)|0);
   $65 = (($64) + 1)|0;
   $66 = (_sqlite3Malloc($65)|0);
   HEAP32[$pzErrMsg>>2] = $66;
   $67 = ($66|0)==(0|0);
   if ($67) {
    _sqlite3Error($db,7,0,$vararg_buffer3);
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    $68 = (_sqlite3_errmsg($db)|0);
    _memcpy(($66|0),($68|0),($65|0))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $69 = ($pzErrMsg|0)==(0|0);
 if ($69) {
  $$0 = $58;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pzErrMsg>>2] = 0;
 $$0 = $58;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SafetyCheckOk($db) {
 $db = $db|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)==(0|0);
 if ($0) {
  _logBadConnection(9992);
  $$0 = 0;
 } else {
  $1 = (($db) + 76|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(-1607883113);
  if ($3) {
   $$0 = 1;
  } else {
   $4 = (_sqlite3SafetyCheckSickOrOk($2)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 0;
   } else {
    _logBadConnection(31128);
    $$0 = 0;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_prepare_v2($db,$zSql,$nBytes,$ppStmt,$pzTail) {
 $db = $db|0;
 $zSql = $zSql|0;
 $nBytes = $nBytes|0;
 $ppStmt = $ppStmt|0;
 $pzTail = $pzTail|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3LockAndPrepare($db,$zSql,$nBytes,1,0,$ppStmt,$pzTail)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3_errcode($db) {
 $db = $db|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $db$idx = 0, $db$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)==(0|0);
 do {
  if ($0) {
   $$0 = 7;
  } else {
   $db$idx = (($db) + 76|0);
   $db$idx$val = HEAP32[$db$idx>>2]|0;
   $1 = (_sqlite3SafetyCheckSickOrOk($db$idx$val)|0);
   $2 = ($1|0)==(0);
   if ($2) {
    _sqlite3MisuseError(121970);
    $$0 = 21;
    break;
   }
   $3 = (($db) + 64|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (($db) + 52|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($db) + 56|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & $7;
    $$0 = $10;
   } else {
    $$0 = 7;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_errmsg($db) {
 $db = $db|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $db$idx = 0, $db$idx$val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)==(0|0);
 do {
  if ($0) {
   $1 = (_sqlite3ErrStr(7)|0);
   $$0 = $1;
  } else {
   $db$idx = (($db) + 76|0);
   $db$idx$val = HEAP32[$db$idx>>2]|0;
   $2 = (_sqlite3SafetyCheckSickOrOk($db$idx$val)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    _sqlite3MisuseError(121901);
    $4 = (_sqlite3ErrStr(21)|0);
    $$0 = $4;
    break;
   }
   $5 = (($db) + 64|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = (_sqlite3ErrStr(7)|0);
    $$0 = $8;
    break;
   }
   $9 = (($db) + 224|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_sqlite3_value_text($10)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = (($db) + 52|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_sqlite3ErrStr($14)|0);
    $$0 = $15;
   } else {
    $$0 = $11;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_prepare($db,$zSql,$nBytes,$ppStmt,$pzTail) {
 $db = $db|0;
 $zSql = $zSql|0;
 $nBytes = $nBytes|0;
 $ppStmt = $ppStmt|0;
 $pzTail = $pzTail|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3LockAndPrepare($db,$zSql,$nBytes,0,0,$ppStmt,$pzTail)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3LockAndPrepare($db,$zSql,$nBytes,$saveSqlFlag,$pOld,$ppStmt,$pzTail) {
 $db = $db|0;
 $zSql = $zSql|0;
 $nBytes = $nBytes|0;
 $saveSqlFlag = $saveSqlFlag|0;
 $pOld = $pOld|0;
 $ppStmt = $ppStmt|0;
 $pzTail = $pzTail|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$ppStmt>>2] = 0;
 $0 = (_sqlite3SafetyCheckOk($db)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _sqlite3MisuseError(99870);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3BtreeEnterAll($db);
 $2 = (_sqlite3Prepare($db,$zSql,$nBytes,$saveSqlFlag,$pOld,$ppStmt,$pzTail)|0);
 $3 = ($2|0)==(17);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$ppStmt>>2]|0;
 (_sqlite3_finalize($4)|0);
 $5 = (_sqlite3Prepare($db,$zSql,$nBytes,$saveSqlFlag,$pOld,$ppStmt,$pzTail)|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3RunParser($pParse,$zSql,$pzErrMsg) {
 $pParse = $pParse|0;
 $zSql = $zSql|0;
 $pzErrMsg = $pzErrMsg|0;
 var $$0 = 0, $$01$pre = 0, $$01$val = 0, $$02$val = 0, $$04$val = 0, $$1$val = 0, $$13$val = 0, $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$0 = 0, $i$0$ph = 0, $i$1 = 0, $i$211 = 0, $i$211$in = 0, $lastTokenParsed$0$ph = 0, $lastTokenParsed$1 = 0, $nErr$07 = 0, $nErr$1 = 0, $tokenType = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $tokenType = sp + 28|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($0) + 232|0);
  HEAP32[$6>>2] = 0;
 }
 $7 = (($pParse) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = (($pParse) + 484|0);
 HEAP32[$8>>2] = $zSql;
 $9 = (_sqlite3ParserAlloc()|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (($0) + 64|0);
  HEAP8[$11>>0] = 1;
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($0) + 242|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($0) + 268|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  HEAP8[$12>>0] = 1;
 }
 $17 = (($0) + 64|0);
 $18 = (($pParse) + 508|0);
 $19 = (($pParse) + 512|0);
 $20 = (($0) + 232|0);
 $i$0$ph = 0;$lastTokenParsed$0$ph = -1;
 L11: while(1) {
  $i$0 = $i$0$ph;
  while(1) {
   $21 = HEAP8[$17>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if (!($22)) {
    $i$1 = $i$0;$lastTokenParsed$1 = $lastTokenParsed$0$ph;
    label = 19;
    break L11;
   }
   $23 = (($zSql) + ($i$0)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $i$1 = $i$0;$lastTokenParsed$1 = $lastTokenParsed$0$ph;
    label = 19;
    break L11;
   }
   HEAP32[$18>>2] = $23;
   $26 = (_sqlite3GetToken($23,$tokenType)|0);
   HEAP32[$19>>2] = $26;
   $27 = (($26) + ($i$0))|0;
   $28 = ($27|0)>($2|0);
   if ($28) {
    label = 12;
    break L11;
   }
   $29 = HEAP32[$tokenType>>2]|0;
   if ((($29|0) == 150)) {
    label = 16;
    break L11;
   } else if ((($29|0) == 1)) {
    label = 17;
    break;
   } else if (!((($29|0) == 151))) {
    break;
   }
   $30 = HEAP32[$20>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    $i$0 = $27;
   } else {
    label = 15;
    break L11;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $34 = (($zSql) + ($27)|0);
   HEAP32[$8>>2] = $34;
  }
  $$04$val = HEAP32[$18>>2]|0;
  _sqlite3Parser($9,$29,$$04$val,$26,$pParse);
  $35 = HEAP32[$tokenType>>2]|0;
  $36 = HEAP32[$7>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   $i$0$ph = $27;$lastTokenParsed$0$ph = $35;
  } else {
   $i$1 = $27;$lastTokenParsed$1 = $35;
   label = 19;
   break;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$7>>2] = 18;
  $i$1 = $27;$lastTokenParsed$1 = $lastTokenParsed$0$ph;
  label = 19;
 }
 else if ((label|0) == 15) {
  _sqlite3ErrorMsg($pParse,10072,$vararg_buffer);
  HEAP32[$7>>2] = 9;
  $i$1 = $27;$lastTokenParsed$1 = $lastTokenParsed$0$ph;
  label = 19;
 }
 else if ((label|0) == 16) {
  $32 = HEAP32[$pzErrMsg>>2]|0;
  _sqlite3DbFree($0,$32);
  HEAP32[$vararg_buffer1>>2] = $18;
  $33 = (_sqlite3MPrintf($0,10088,$vararg_buffer1)|0);
  HEAP32[$pzErrMsg>>2] = $33;
  $nErr$07 = 1;
 }
 if ((label|0) == 19) {
  $38 = (($zSql) + ($i$1)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $41 = HEAP32[$7>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = ($lastTokenParsed$1|0)==(1);
    $$01$pre = (($pParse) + 508|0);
    if (!($43)) {
     $$02$val = HEAP32[$$01$pre>>2]|0;
     $$13$val = HEAP32[$19>>2]|0;
     _sqlite3Parser($9,1,$$02$val,$$13$val,$pParse);
     HEAP32[$8>>2] = $38;
    }
    $$01$val = HEAP32[$$01$pre>>2]|0;
    $$1$val = HEAP32[$19>>2]|0;
    _sqlite3Parser($9,0,$$01$val,$$1$val,$pParse);
    $nErr$07 = 0;
   } else {
    $nErr$07 = 0;
   }
  } else {
   $nErr$07 = 0;
  }
 }
 _sqlite3ParserFree($9);
 HEAP8[$12>>0] = $13;
 $44 = HEAP8[$17>>0]|0;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $$pr = HEAP32[$7>>2]|0;
  if (!((($$pr|0) == 101) | (($$pr|0) == 0))) {
   $49 = $$pr;
   label = 27;
  }
 } else {
  HEAP32[$7>>2] = 7;
  $49 = 7;
  label = 27;
 }
 if ((label|0) == 27) {
  $46 = (($pParse) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $50 = (_sqlite3ErrStr($49)|0);
   HEAP32[$vararg_buffer3>>2] = $50;
   _sqlite3SetString($46,$0,1712,$vararg_buffer3);
  }
 }
 $51 = (($pParse) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  $nErr$1 = $nErr$07;
 } else {
  HEAP32[$pzErrMsg>>2] = $52;
  $54 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $52;
  _sqlite3_log($54,1712,$vararg_buffer6);
  HEAP32[$51>>2] = 0;
  $55 = (($nErr$07) + 1)|0;
  $nErr$1 = $55;
 }
 $56 = (($pParse) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  $59 = (($pParse) + 68|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)>(0);
  if ($61) {
   $62 = (($pParse) + 18|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    _sqlite3VdbeDelete($57);
    HEAP32[$56>>2] = 0;
   }
  }
 }
 $65 = (($pParse) + 18|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $68 = (($pParse) + 404|0);
  $69 = HEAP32[$68>>2]|0;
  _sqlite3DbFree($0,$69);
  HEAP32[$68>>2] = 0;
  $70 = (($pParse) + 400|0);
  HEAP32[$70>>2] = 0;
 }
 $71 = (($pParse) + 524|0);
 $72 = HEAP32[$71>>2]|0;
 _sqlite3_free($72);
 $73 = (($pParse) + 455|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = ($74<<24>>24)==(0);
 if ($75) {
  $76 = (($pParse) + 488|0);
  $77 = HEAP32[$76>>2]|0;
  _sqlite3DeleteTable($0,$77);
 }
 $78 = (($pParse) + 453|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = ($79<<24>>24)==(0);
 if (!($80)) {
  $81 = (($pParse) + 536|0);
  $82 = HEAP32[$81>>2]|0;
  _sqlite3WithDelete($0,$82);
 }
 $83 = (($pParse) + 492|0);
 $84 = HEAP32[$83>>2]|0;
 _sqlite3DeleteTrigger($0,$84);
 $85 = (($pParse) + 448|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)>(0);
 $88 = (($pParse) + 476|0);
 $89 = HEAP32[$88>>2]|0;
 if ($87) {
  $91 = $89;$i$211$in = $86;
  while(1) {
   $i$211 = (($i$211$in) + -1)|0;
   $90 = (($91) + ($i$211<<2)|0);
   $92 = HEAP32[$90>>2]|0;
   _sqlite3DbFree($0,$92);
   $93 = ($i$211|0)>(0);
   $94 = HEAP32[$88>>2]|0;
   if ($93) {
    $91 = $94;$i$211$in = $i$211;
   } else {
    $$lcssa = $94;
    break;
   }
  }
 } else {
  $$lcssa = $89;
 }
 _sqlite3DbFree($0,$$lcssa);
 $95 = (($pParse) + 408|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(0|0);
 if (!($97)) {
  $102 = $96;
  while(1) {
   $101 = HEAP32[$102>>2]|0;
   HEAP32[$95>>2] = $101;
   _sqlite3DbFree($0,$102);
   $103 = HEAP32[$95>>2]|0;
   $104 = ($103|0)==(0|0);
   if ($104) {
    break;
   } else {
    $102 = $103;
   }
  }
 }
 $98 = (($pParse) + 528|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $106 = $99;
  while(1) {
   $105 = (($106) + 72|0);
   $107 = HEAP32[$105>>2]|0;
   HEAP32[$98>>2] = $107;
   _sqlite3DeleteTable($0,$106);
   $108 = HEAP32[$98>>2]|0;
   $109 = ($108|0)==(0|0);
   if ($109) {
    break;
   } else {
    $106 = $108;
   }
  }
 }
 $110 = ($nErr$1|0)>(0);
 if (!($110)) {
  $$0 = $nErr$1;
  STACKTOP = sp;return ($$0|0);
 }
 $111 = HEAP32[$7>>2]|0;
 $112 = ($111|0)==(0);
 if (!($112)) {
  $$0 = $nErr$1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$7>>2] = 1;
 $$0 = $nErr$1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ValueNew($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3DbMallocZero($db,40)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (($0) + 28|0);
 HEAP16[$2>>1] = 1;
 HEAP32[$0>>2] = $db;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ValueSetStr($v,$z,$enc,$xDel) {
 $v = $v|0;
 $z = $z|0;
 $enc = $enc|0;
 $xDel = $xDel|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0|0);
 if (!($0)) {
  (_sqlite3VdbeMemSetStr($v,$z,-1,$enc,$xDel)|0);
 }
 STACKTOP = sp;return;
}
function _sqlite3ValueFree($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeMemRelease($v);
 $1 = HEAP32[$v>>2]|0;
 _sqlite3DbFree($1,$v);
 STACKTOP = sp;return;
}
function _sqlite3MallocInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$08 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pSlot$0$lcssa = 0, $pSlot$09 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[((384 + 36|0))>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _sqlite3MemSetDefault();
 }
 dest=656+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[((384 + 4|0))>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  HEAP32[656>>2] = (8);
 }
 $4 = HEAP32[((384 + 192|0))>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = HEAP32[((384 + 196|0))>>2]|0;
 $7 = ($6|0)>(99);
 $or$cond = $5 & $7;
 $8 = HEAP32[((384 + 200|0))>>2]|0;
 $9 = ($8|0)>(0);
 $or$cond3 = $or$cond & $9;
 if ($or$cond3) {
  $10 = $6 & -8;
  HEAP32[((384 + 196|0))>>2] = $10;
  HEAP32[((656 + 28|0))>>2] = $4;
  HEAP32[((656 + 32|0))>>2] = $8;
  $11 = (($8) + -1)|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = Math_imul($10, $11)|0;
   $scevgep = (($4) + ($13)|0);
   $i$08 = 0;$pSlot$09 = $4;
   while(1) {
    $14 = (($pSlot$09) + ($10)|0);
    HEAP32[$pSlot$09>>2] = $14;
    $15 = (($i$08) + 1)|0;
    $exitcond = ($15|0)==($11|0);
    if ($exitcond) {
     break;
    } else {
     $i$08 = $15;$pSlot$09 = $14;
    }
   }
   $pSlot$0$lcssa = $scevgep;
  } else {
   $pSlot$0$lcssa = $4;
  }
  HEAP32[$pSlot$0$lcssa>>2] = 0;
  $16 = (($pSlot$0$lcssa) + 4|0);
  HEAP32[((656 + 24|0))>>2] = $16;
 } else {
  HEAP32[((656 + 24|0))>>2] = 0;
  HEAP32[((384 + 192|0))>>2] = 0;
  HEAP32[((384 + 196|0))>>2] = 0;
  HEAP32[((384 + 200|0))>>2] = 0;
 }
 $17 = HEAP32[((384 + 204|0))>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = HEAP32[((384 + 208|0))>>2]|0;
 $20 = ($19|0)<(512);
 $or$cond5 = $18 | $20;
 $21 = HEAP32[((384 + 212|0))>>2]|0;
 $22 = ($21|0)<(1);
 $or$cond7 = $or$cond5 | $22;
 if (!($or$cond7)) {
  $23 = HEAP32[((384 + 56|0))>>2]|0;
  $24 = HEAP32[((384 + 64|0))>>2]|0;
  $25 = (FUNCTION_TABLE_ii[$23 & 255]($24)|0);
  STACKTOP = sp;return ($25|0);
 }
 HEAP32[((384 + 204|0))>>2] = 0;
 HEAP32[((384 + 208|0))>>2] = 0;
 HEAP32[((384 + 212|0))>>2] = 0;
 $23 = HEAP32[((384 + 56|0))>>2]|0;
 $24 = HEAP32[((384 + 64|0))>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$23 & 255]($24)|0);
 STACKTOP = sp;return ($25|0);
}
function _sqlite3RegisterGlobalFunctions() {
 var $0 = 0, $1 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (6432 + (($i$01*36)|0)|0);
  _sqlite3FuncDefInsert(1840,$0);
  $1 = (($i$01) + 1)|0;
  $exitcond = ($1|0)==(56);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $1;
  }
 }
 _sqlite3RegisterDateTimeFunctions();
 _sqlite3AlterFunctions();
 STACKTOP = sp;return;
}
function _sqlite3PcacheInitialize() {
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((384 + 112|0))>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _sqlite3PCacheSetDefault();
  $$pre = HEAP32[((384 + 112|0))>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[((384 + 108|0))>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 255]($2)|0);
 STACKTOP = sp;return ($4|0);
}
function _sqlite3OsInit() {
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_malloc(10)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 7;
 } else {
  _sqlite3_free($0);
  (_sqlite3_os_init()|0);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PCacheBufferSetup($pBuf,$sz,$n) {
 $pBuf = $pBuf|0;
 $sz = $sz|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $9$phi = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((3400 + 28|0))>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $sz & -8;
 HEAP32[((3400 + 32|0))>>2] = $2;
 HEAP32[((3400 + 60|0))>>2] = $n;
 HEAP32[((3400 + 36|0))>>2] = $n;
 $3 = ($n|0)>(90);
 if ($3) {
  HEAP32[((3400 + 40|0))>>2] = 10;
  HEAP32[((3400 + 44|0))>>2] = $pBuf;
  HEAP32[((3400 + 56|0))>>2] = 0;
  HEAP32[((3400 + 64|0))>>2] = 0;
  label = 5;
 } else {
  $4 = (($n|0) / 10)&-1;
  $5 = (($4) + 1)|0;
  HEAP32[((3400 + 40|0))>>2] = $5;
  HEAP32[((3400 + 44|0))>>2] = $pBuf;
  HEAP32[((3400 + 56|0))>>2] = 0;
  HEAP32[((3400 + 64|0))>>2] = 0;
  $6 = ($n|0)==(0);
  if ($6) {
   $$0$lcssa = $pBuf;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $7 = Math_imul($2, $n)|0;
  $$012 = $n;$$03 = $pBuf;$9 = 0;
  while(1) {
   $8 = (($$012) + -1)|0;
   HEAP32[$$03>>2] = $9;
   HEAP32[((3400 + 56|0))>>2] = $$03;
   $10 = (($$03) + ($2)|0);
   $11 = ($8|0)==(0);
   if ($11) {
    break;
   } else {
    $9$phi = $$03;$$012 = $8;$$03 = $10;$9 = $9$phi;
   }
  }
  $scevgep = (($pBuf) + ($7)|0);
  $$0$lcssa = $scevgep;
 }
 HEAP32[((3400 + 48|0))>>2] = $$0$lcssa;
 STACKTOP = sp;return;
}
function _sqlite3_config($op,$varargs) {
 $op = $op|0;
 $varargs = $varargs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0;
 var $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0;
 var $arglist_next54 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $rc$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = HEAP32[((384 + 224|0))>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  _sqlite3MisuseError(120363);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$ap>>2] = $varargs;
 do {
  switch ($op|0) {
  case 13:  {
   $arglist_current32 = HEAP32[$ap>>2]|0;
   $17 = HEAP32[$arglist_current32>>2]|0;
   $arglist_next33 = (($arglist_current32) + 4|0);
   HEAP32[$ap>>2] = $arglist_next33;
   HEAP32[((384 + 28|0))>>2] = $17;
   $arglist_current35 = HEAP32[$ap>>2]|0;
   $18 = HEAP32[$arglist_current35>>2]|0;
   $arglist_next36 = (($arglist_current35) + 4|0);
   HEAP32[$ap>>2] = $arglist_next36;
   HEAP32[((384 + 32|0))>>2] = $18;
   $rc$0 = 0;
   break;
  }
  case 7:  {
   $arglist_current17 = HEAP32[$ap>>2]|0;
   $10 = HEAP32[$arglist_current17>>2]|0;
   $arglist_next18 = (($arglist_current17) + 4|0);
   HEAP32[$ap>>2] = $arglist_next18;
   HEAP32[((384 + 204|0))>>2] = $10;
   $arglist_current20 = HEAP32[$ap>>2]|0;
   $11 = HEAP32[$arglist_current20>>2]|0;
   $arglist_next21 = (($arglist_current20) + 4|0);
   HEAP32[$ap>>2] = $arglist_next21;
   HEAP32[((384 + 208|0))>>2] = $11;
   $arglist_current23 = HEAP32[$ap>>2]|0;
   $12 = HEAP32[$arglist_current23>>2]|0;
   $arglist_next24 = (($arglist_current23) + 4|0);
   HEAP32[$ap>>2] = $arglist_next24;
   HEAP32[((384 + 212|0))>>2] = $12;
   $rc$0 = 0;
   break;
  }
  case 5:  {
   $3 = HEAP32[((384 + 36|0))>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    _sqlite3MemSetDefault();
   }
   $arglist_current2 = HEAP32[$ap>>2]|0;
   $5 = HEAP32[$arglist_current2>>2]|0;
   $arglist_next3 = (($arglist_current2) + 4|0);
   HEAP32[$ap>>2] = $arglist_next3;
   ;HEAP32[$5+0>>2]=HEAP32[((384 + 36|0))+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[((384 + 36|0))+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[((384 + 36|0))+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[((384 + 36|0))+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[((384 + 36|0))+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[((384 + 36|0))+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[((384 + 36|0))+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[((384 + 36|0))+28>>2]|0;
   $rc$0 = 0;
   break;
  }
  case 16:  {
   $arglist_current38 = HEAP32[$ap>>2]|0;
   $19 = HEAP32[$arglist_current38>>2]|0;
   $arglist_next39 = (($arglist_current38) + 4|0);
   HEAP32[$ap>>2] = $arglist_next39;
   HEAP32[((384 + 252|0))>>2] = $19;
   $arglist_current41 = HEAP32[$ap>>2]|0;
   $20 = HEAP32[$arglist_current41>>2]|0;
   $arglist_next42 = (($arglist_current41) + 4|0);
   HEAP32[$ap>>2] = $arglist_next42;
   HEAP32[((384 + 256|0))>>2] = $20;
   $rc$0 = 0;
   break;
  }
  case 6:  {
   $arglist_current8 = HEAP32[$ap>>2]|0;
   $7 = HEAP32[$arglist_current8>>2]|0;
   $arglist_next9 = (($arglist_current8) + 4|0);
   HEAP32[$ap>>2] = $arglist_next9;
   HEAP32[((384 + 192|0))>>2] = $7;
   $arglist_current11 = HEAP32[$ap>>2]|0;
   $8 = HEAP32[$arglist_current11>>2]|0;
   $arglist_next12 = (($arglist_current11) + 4|0);
   HEAP32[$ap>>2] = $arglist_next12;
   HEAP32[((384 + 196|0))>>2] = $8;
   $arglist_current14 = HEAP32[$ap>>2]|0;
   $9 = HEAP32[$arglist_current14>>2]|0;
   $arglist_next15 = (($arglist_current14) + 4|0);
   HEAP32[$ap>>2] = $arglist_next15;
   HEAP32[((384 + 200|0))>>2] = $9;
   $rc$0 = 0;
   break;
  }
  case 20:  {
   $arglist_current47 = HEAP32[$ap>>2]|0;
   $22 = HEAP32[$arglist_current47>>2]|0;
   $arglist_next48 = (($arglist_current47) + 4|0);
   HEAP32[$ap>>2] = $arglist_next48;
   HEAP32[((384 + 16|0))>>2] = $22;
   $rc$0 = 0;
   break;
  }
  case 9:  {
   $arglist_current5 = HEAP32[$ap>>2]|0;
   $6 = HEAP32[$arglist_current5>>2]|0;
   $arglist_next6 = (($arglist_current5) + 4|0);
   HEAP32[$ap>>2] = $arglist_next6;
   HEAP32[384>>2] = $6;
   $rc$0 = 0;
   break;
  }
  case 4:  {
   $arglist_current = HEAP32[$ap>>2]|0;
   $2 = HEAP32[$arglist_current>>2]|0;
   $arglist_next = (($arglist_current) + 4|0);
   HEAP32[$ap>>2] = $arglist_next;
   ;HEAP32[((384 + 36|0))+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[((384 + 36|0))+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[((384 + 36|0))+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[((384 + 36|0))+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[((384 + 36|0))+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[((384 + 36|0))+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[((384 + 36|0))+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[((384 + 36|0))+28>>2]=HEAP32[$2+28>>2]|0;
   $rc$0 = 0;
   break;
  }
  case 17:  {
   $arglist_current44 = HEAP32[$ap>>2]|0;
   $21 = HEAP32[$arglist_current44>>2]|0;
   $arglist_next45 = (($arglist_current44) + 4|0);
   HEAP32[$ap>>2] = $arglist_next45;
   HEAP32[((384 + 12|0))>>2] = $21;
   $rc$0 = 0;
   break;
  }
  case 18:  {
   $arglist_current26 = HEAP32[$ap>>2]|0;
   $13 = HEAP32[$arglist_current26>>2]|0;
   $arglist_next27 = (($arglist_current26) + 4|0);
   HEAP32[$ap>>2] = $arglist_next27;
   dest=((384 + 104|0))+0|0; src=$13+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $rc$0 = 0;
   break;
  }
  case 15:  {
   $rc$0 = 1;
   break;
  }
  case 19:  {
   $14 = HEAP32[((384 + 112|0))>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    _sqlite3PCacheSetDefault();
   }
   $arglist_current29 = HEAP32[$ap>>2]|0;
   $16 = HEAP32[$arglist_current29>>2]|0;
   $arglist_next30 = (($arglist_current29) + 4|0);
   HEAP32[$ap>>2] = $arglist_next30;
   dest=$16+0|0; src=((384 + 104|0))+0|0; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $rc$0 = 0;
   break;
  }
  case 14:  {
   $rc$0 = 0;
   break;
  }
  case 22:  {
   $arglist_current50 = HEAP32[$ap>>2]|0;
   $arglist_next51 = (($arglist_current50) + 8|0);
   HEAP32[$ap>>2] = $arglist_next51;
   $arglist_current53 = HEAP32[$ap>>2]|0;
   $arglist_next54 = (($arglist_current53) + 8|0);
   HEAP32[$ap>>2] = $arglist_next54;
   ;HEAP32[((384 + 176|0))+0>>2]=0|0;HEAP32[((384 + 176|0))+4>>2]=0|0;HEAP32[((384 + 176|0))+8>>2]=0|0;HEAP32[((384 + 176|0))+12>>2]=0|0;
   $rc$0 = 0;
   break;
  }
  default: {
   $rc$0 = 1;
  }
  }
 } while(0);
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3MemSetDefault() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 6320;
 (_sqlite3_config(4,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _sqlite3PCacheSetDefault() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 6264;
 (_sqlite3_config(18,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _sqlite3_db_release_memory($db) {
 $db = $db|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx1$val$idx = 0, $$idx1$val$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnterAll($db);
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = (($db) + 16|0);
 $12 = $1;$i$02 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($i$02<<4)|0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $11 = $12;
  } else {
   $$idx = (($6) + 4|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
   $8 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
   $$idx1 = (($8) + 204|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   $$idx1$val$idx = (($$idx1$val) + 40|0);
   $$idx1$val$idx$val = HEAP32[$$idx1$val$idx>>2]|0;
   _sqlite3PagerShrink($$idx1$val$idx$val);
   $$pre = HEAP32[$0>>2]|0;
   $11 = $$pre;
  }
  $9 = (($i$02) + 1)|0;
  $10 = ($9|0)<($11|0);
  if ($10) {
   $12 = $11;$i$02 = $9;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _sqlite3PagerShrink($pPager$0$54$val$0$11$val) {
 $pPager$0$54$val$0$11$val = $pPager$0$54$val$0$11$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3PcacheShrink($pPager$0$54$val$0$11$val);
 STACKTOP = sp;return;
}
function _setupLookaside($db,$pBuf,$sz,$cnt) {
 $db = $db|0;
 $pBuf = $pBuf|0;
 $sz = $sz|0;
 $cnt = $cnt|0;
 var $$ = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$cnt = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $26$phi = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0 = 0, $i$0$in3 = 0, $or$cond = 0, $p$0$in$lcssa = 0, $p$0$in4 = 0, $pStart$0 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 244|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$02 = 5;
  STACKTOP = sp;return ($$02|0);
 }
 $3 = (($db) + 243|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = (($db) + 268|0);
  $7 = HEAP32[$6>>2]|0;
  _sqlite3_free($7);
 }
 $8 = $sz & -8;
 $9 = ($8|0)<(5);
 $$ = $9 ? 0 : $8;
 $10 = ($cnt|0)<(0);
 $$cnt = $10 ? 0 : $cnt;
 $11 = ($$|0)==(0);
 $12 = ($$cnt|0)==(0);
 $or$cond = $11 | $12;
 if ($or$cond) {
  $$01 = 0;$$1 = $$cnt;$pStart$0 = 0;
 } else {
  $13 = ($pBuf|0)==(0|0);
  if ($13) {
   _sqlite3BeginBenignMalloc();
   $14 = Math_imul($$, $$cnt)|0;
   $15 = (_sqlite3Malloc($14)|0);
   _sqlite3EndBenignMalloc();
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$01 = $$;$$1 = $$cnt;$pStart$0 = 0;
   } else {
    $17 = (_sqlite3MallocSize($15)|0);
    $18 = (($17|0) / ($8|0))&-1;
    $$01 = $$;$$1 = $18;$pStart$0 = $15;
   }
  } else {
   $$01 = $$;$$1 = $$cnt;$pStart$0 = $pBuf;
  }
 }
 $19 = (($db) + 268|0);
 HEAP32[$19>>2] = $pStart$0;
 $20 = (($db) + 264|0);
 HEAP32[$20>>2] = 0;
 $21 = $$01&65535;
 $22 = (($db) + 240|0);
 HEAP16[$22>>1] = $21;
 $23 = ($pStart$0|0)==(0|0);
 if ($23) {
  HEAP32[$19>>2] = $db;
  $33 = (($db) + 272|0);
  HEAP32[$33>>2] = $db;
  $34 = (($db) + 242|0);
  HEAP8[$34>>0] = 0;
  $storemerge = 0;
 } else {
  $24 = ($$1|0)>(0);
  if ($24) {
   $25 = Math_imul($$01, $$1)|0;
   $26 = 0;$i$0$in3 = $$1;$p$0$in4 = $pStart$0;
   while(1) {
    $i$0 = (($i$0$in3) + -1)|0;
    HEAP32[$p$0$in4>>2] = $26;
    HEAP32[$20>>2] = $p$0$in4;
    $27 = (($p$0$in4) + ($$01)|0);
    $28 = ($i$0|0)>(0);
    if ($28) {
     $26$phi = $p$0$in4;$i$0$in3 = $i$0;$p$0$in4 = $27;$26 = $26$phi;
    } else {
     break;
    }
   }
   $scevgep = (($pStart$0) + ($25)|0);
   $p$0$in$lcssa = $scevgep;
  } else {
   $p$0$in$lcssa = $pStart$0;
  }
  $29 = (($db) + 272|0);
  HEAP32[$29>>2] = $p$0$in$lcssa;
  $30 = (($db) + 242|0);
  HEAP8[$30>>0] = 1;
  $31 = ($pBuf|0)==(0|0);
  $32 = $31&1;
  $storemerge = $32;
 }
 HEAP8[$3>>0] = $storemerge;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function _sqlite3_last_insert_rowid($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 32|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 tempRet0 = $6;
 STACKTOP = sp;return ($3|0);
}
function _sqlite3_changes($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3_total_changes($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3_close($db) {
 $db = $db|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Close($db,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3Close($db,$forceZombie) {
 $db = $db|0;
 $forceZombie = $forceZombie|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $db$idx = 0, $db$idx$val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($db|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $db$idx = (($db) + 76|0);
 $db$idx$val = HEAP32[$db$idx>>2]|0;
 $1 = (_sqlite3SafetyCheckSickOrOk($db$idx$val)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _sqlite3MisuseError(120869);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 _disconnectAllVtab($db);
 _sqlite3VtabRollback($db);
 $3 = ($forceZombie|0)==(0);
 if ($3) {
  $4 = (_connectionIsBusy($db)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   _sqlite3Error($db,5,6192,$vararg_buffer);
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$db$idx>>2] = 1691352191;
 _sqlite3LeaveMutexAndCloseZombie($db);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_busy_handler($db,$xBusy,$pArg) {
 $db = $db|0;
 $xBusy = $xBusy|0;
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 436|0);
 HEAP32[$0>>2] = $xBusy;
 $1 = (($db) + 440|0);
 HEAP32[$1>>2] = $pArg;
 $2 = (($db) + 444|0);
 HEAP32[$2>>2] = 0;
 $3 = (($db) + 484|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return 0;
}
function _sqlite3_busy_timeout($db,$ms) {
 $db = $db|0;
 $ms = $ms|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ms|0)>(0);
 if ($0) {
  (_sqlite3_busy_handler($db,147,$db)|0);
  $1 = (($db) + 484|0);
  HEAP32[$1>>2] = $ms;
  STACKTOP = sp;return 0;
 } else {
  (_sqlite3_busy_handler($db,0,0)|0);
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _sqliteDefaultBusyCallback($ptr,$count) {
 $ptr = $ptr|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ptr) + 484|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($count*1000)|0;
 $3 = (($2) + 1000)|0;
 $4 = ($3|0)>($1|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$ptr>>2]|0;
 (_sqlite3OsSleep($5,1000000)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3CreateFunc($db,$zFunctionName,$nArg,$enc,$pUserData,$xFunc,$xStep,$xFinal,$pDestructor) {
 $db = $db|0;
 $zFunctionName = $zFunctionName|0;
 $nArg = $nArg|0;
 $enc = $enc|0;
 $pUserData = $pUserData|0;
 $xFunc = $xFunc|0;
 $xStep = $xStep|0;
 $xFinal = $xFinal|0;
 $pDestructor = $pDestructor|0;
 var $$0 = 0, $$02 = 0, $$idx = 0, $$idx$val = 0, $$old = 0, $$old4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nArg$off = 0, $or$cond = 0, $or$cond21 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($zFunctionName|0)==(0|0);
 do {
  if (!($0)) {
   $1 = ($xFunc|0)==(0|0);
   if ($1) {
    $$old = ($xFinal|0)!=(0|0);
    $$old4 = ($xStep|0)==(0|0);
    $or$cond21 = $$old ^ $$old4;
    if (!($or$cond21)) {
     break;
    }
   } else {
    $2 = ($xFinal|0)==(0|0);
    $3 = ($xStep|0)==(0|0);
    $or$cond = $2 & $3;
    if (!($or$cond)) {
     break;
    }
   }
   $nArg$off = (($nArg) + 1)|0;
   $4 = ($nArg$off>>>0)>(128);
   if (!($4)) {
    $5 = (_sqlite3Strlen30($zFunctionName)|0);
    $6 = ($5|0)>(255);
    if (!($6)) {
     $7 = $enc & 2048;
     $8 = $enc & 7;
     $9 = ($8|0)==(4);
     if ($9) {
      $$02 = 2;
     } else {
      $10 = ($8|0)==(5);
      if ($10) {
       $11 = $7 | 1;
       $12 = (_sqlite3CreateFunc($db,$zFunctionName,$nArg,$11,$pUserData,$xFunc,$xStep,$xFinal,$pDestructor)|0);
       $13 = ($12|0)==(0);
       if (!($13)) {
        $$0 = $12;
        STACKTOP = sp;return ($$0|0);
       }
       $14 = $7 | 2;
       $15 = (_sqlite3CreateFunc($db,$zFunctionName,$nArg,$14,$pUserData,$xFunc,$xStep,$xFinal,$pDestructor)|0);
       $16 = ($15|0)==(0);
       if ($16) {
        $$02 = 3;
       } else {
        $$0 = $15;
        STACKTOP = sp;return ($$0|0);
       }
      } else {
       $$02 = $8;
      }
     }
     $17 = $$02&255;
     $18 = (_sqlite3FindFunction($db,$zFunctionName,$5,$nArg,$17,0)|0);
     $19 = ($18|0)==(0|0);
     do {
      if (!($19)) {
       $20 = (($18) + 2|0);
       $21 = HEAP16[$20>>1]|0;
       $22 = $21&65535;
       $23 = $22 & 3;
       $24 = ($23|0)==($$02|0);
       if ($24) {
        $25 = HEAP16[$18>>1]|0;
        $26 = $25 << 16 >> 16;
        $27 = ($26|0)==($nArg|0);
        if ($27) {
         $28 = (($db) + 140|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0);
         if ($30) {
          _sqlite3ExpirePreparedStatements($db);
          break;
         }
         _sqlite3Error($db,5,5248,$vararg_buffer);
         $$0 = 5;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     } while(0);
     $31 = (_sqlite3FindFunction($db,$zFunctionName,$5,$nArg,$17,1)|0);
     $32 = ($31|0)==(0|0);
     if ($32) {
      $$0 = 7;
      STACKTOP = sp;return ($$0|0);
     }
     $$idx = (($31) + 32|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     _functionDestroy($db,$$idx$val);
     $33 = ($pDestructor|0)==(0|0);
     if (!($33)) {
      $34 = HEAP32[$pDestructor>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$pDestructor>>2] = $35;
     }
     HEAP32[$$idx>>2] = $pDestructor;
     $36 = (($31) + 2|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = $38 & 3;
     $40 = $39 | $7;
     $41 = $40&65535;
     HEAP16[$36>>1] = $41;
     $42 = (($31) + 12|0);
     HEAP32[$42>>2] = $xFunc;
     $43 = (($31) + 16|0);
     HEAP32[$43>>2] = $xStep;
     $44 = (($31) + 20|0);
     HEAP32[$44>>2] = $xFinal;
     $45 = (($31) + 4|0);
     HEAP32[$45>>2] = $pUserData;
     $46 = $nArg&65535;
     HEAP16[$31>>1] = $46;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 _sqlite3MisuseError(121411);
 $$0 = 21;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_overload_function($db,$zName,$nArg) {
 $db = $db|0;
 $zName = $zName|0;
 $nArg = $nArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = (_sqlite3FindFunction($db,$zName,$0,$nArg,1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_sqlite3CreateFunc($db,$zName,$nArg,1,0,148,0,0,0)|0);
  $rc$0 = $3;
 } else {
  $rc$0 = 0;
 }
 $4 = (_sqlite3ApiExit($db,$rc$0)|0);
 STACKTOP = sp;return ($4|0);
}
function _sqlite3FindFunction($db,$zName,$nName,$nArg,$enc,$createFlag) {
 $db = $db|0;
 $zName = $zName|0;
 $nName = $nName|0;
 $nArg = $nArg|0;
 $enc = $enc|0;
 $createFlag = $createFlag|0;
 var $$0 = 0, $$bestScore$0 = 0, $$bestScore$2 = 0, $$not = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bestScore$0$lcssa = 0, $bestScore$06 = 0, $bestScore$22 = 0, $bestScore$4 = 0, $brmerge = 0, $or$cond = 0, $p$0$pBest$0 = 0, $p$08 = 0;
 var $p$1$pBest$2 = 0, $p$14 = 0, $pBest$0$lcssa = 0, $pBest$07 = 0, $pBest$23 = 0, $pBest$4 = 0, $pBest$5 = 0, $pBest$512 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$zName>>0]|0;
 $1 = $0&255;
 $2 = (960 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + ($nName))|0;
 $6 = (($5|0) % 23)&-1;
 $7 = (($db) + 328|0);
 $8 = (_functionSearch($7,$6,$zName,$nName)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $bestScore$0$lcssa = 0;$pBest$0$lcssa = 0;
 } else {
  $bestScore$06 = 0;$p$08 = $8;$pBest$07 = 0;
  while(1) {
   $10 = (_matchQuality($p$08,$nArg,$enc)|0);
   $11 = ($10|0)>($bestScore$06|0);
   $$bestScore$0 = $11 ? $10 : $bestScore$06;
   $p$0$pBest$0 = $11 ? $p$08 : $pBest$07;
   $12 = (($p$08) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $bestScore$0$lcssa = $$bestScore$0;$pBest$0$lcssa = $p$0$pBest$0;
    break;
   } else {
    $bestScore$06 = $$bestScore$0;$p$08 = $13;$pBest$07 = $p$0$pBest$0;
   }
  }
 }
 $15 = ($createFlag<<24>>24)==(0);
 do {
  if ($15) {
   $16 = ($pBest$0$lcssa|0)==(0|0);
   if (!($16)) {
    $17 = (($db) + 24|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 & 2097152;
    $20 = ($19|0)==(0);
    if ($20) {
     $45 = 0;$pBest$512 = $pBest$0$lcssa;
     label = 12;
     break;
    }
   }
   $21 = (_functionSearch(1840,$6,$zName,$nName)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    $bestScore$4 = 0;$pBest$4 = $pBest$0$lcssa;
    label = 8;
   } else {
    $bestScore$22 = 0;$p$14 = $21;$pBest$23 = $pBest$0$lcssa;
    while(1) {
     $23 = (_matchQuality($p$14,$nArg,$enc)|0);
     $24 = ($23|0)>($bestScore$22|0);
     $$bestScore$2 = $24 ? $23 : $bestScore$22;
     $p$1$pBest$2 = $24 ? $p$14 : $pBest$23;
     $25 = (($p$14) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0|0);
     if ($27) {
      $bestScore$4 = $$bestScore$2;$pBest$4 = $p$1$pBest$2;
      label = 8;
      break;
     } else {
      $bestScore$22 = $$bestScore$2;$p$14 = $26;$pBest$23 = $p$1$pBest$2;
     }
    }
   }
  } else {
   $bestScore$4 = $bestScore$0$lcssa;$pBest$4 = $pBest$0$lcssa;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $28 = ($createFlag<<24>>24)!=(0);
  $29 = ($bestScore$4|0)<(6);
  $or$cond = $28 & $29;
  if ($or$cond) {
   $30 = (($nName) + 37)|0;
   $31 = (_sqlite3DbMallocZero($db,$30)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    $46 = 1;$pBest$5 = $31;
   } else {
    $33 = (($31) + 36|0);
    $34 = (($31) + 24|0);
    HEAP32[$34>>2] = $33;
    $35 = $nArg&65535;
    HEAP16[$31>>1] = $35;
    $36 = $enc&255;
    $37 = (($31) + 2|0);
    HEAP16[$37>>1] = $36;
    _memcpy(($33|0),($zName|0),($nName|0))|0;
    $$sum = (($nName) + 36)|0;
    $38 = (($31) + ($$sum)|0);
    HEAP8[$38>>0] = 0;
    _sqlite3FuncDefInsert($7,$31);
    $46 = 1;$pBest$5 = $31;
   }
  } else {
   $46 = $28;$pBest$5 = $pBest$4;
  }
  $39 = ($pBest$5|0)==(0|0);
  if (!($39)) {
   $45 = $46;$pBest$512 = $pBest$5;
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $40 = (($pBest$512) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $$0 = $pBest$512;
   STACKTOP = sp;return ($$0|0);
  }
  $43 = (($pBest$512) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $$not = ($44|0)!=(0|0);
  $brmerge = $$not | $45;
  if ($brmerge) {
   $$0 = $pBest$512;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3InvalidFunction($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$context>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (_sqlite3_mprintf(5128,$vararg_buffer)|0);
 _sqlite3_result_error($context,$3,-1);
 _sqlite3_free($3);
 STACKTOP = sp;return;
}
function _sqlite3_wal_autocheckpoint($db,$nFrame) {
 $db = $db|0;
 $nFrame = $nFrame|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nFrame|0)>(0);
 if ($0) {
  $1 = $nFrame;
  (_sqlite3_wal_hook($db,149,$1)|0);
  STACKTOP = sp;return 0;
 } else {
  (_sqlite3_wal_hook($db,0,0)|0);
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _sqlite3_wal_hook($db,$xCallback,$pArg) {
 $db = $db|0;
 $xCallback = $xCallback|0;
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 208|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($db) + 204|0);
 HEAP32[$2>>2] = $xCallback;
 HEAP32[$0>>2] = $pArg;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3WalDefaultHook($pClientData,$db,$zDb,$nFrame) {
 $pClientData = $pClientData|0;
 $db = $db|0;
 $zDb = $zDb|0;
 $nFrame = $nFrame|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pClientData;
 $1 = ($0|0)>($nFrame|0);
 if ($1) {
  STACKTOP = sp;return 0;
 }
 _sqlite3BeginBenignMalloc();
 (_sqlite3_wal_checkpoint($db,$zDb)|0);
 _sqlite3EndBenignMalloc();
 STACKTOP = sp;return 0;
}
function _sqlite3_wal_checkpoint_v2($db,$zDb,$eMode,$pnLog,$pnCkpt) {
 $db = $db|0;
 $zDb = $zDb|0;
 $eMode = $eMode|0;
 $pnLog = $pnLog|0;
 $pnCkpt = $pnCkpt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDb$02 = 0, $rc$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($pnLog|0)==(0|0);
 if (!($0)) {
  HEAP32[$pnLog>>2] = -1;
 }
 $1 = ($pnCkpt|0)==(0|0);
 if (!($1)) {
  HEAP32[$pnCkpt>>2] = -1;
 }
 $2 = ($eMode>>>0)>(2);
 if ($2) {
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($zDb|0)==(0|0);
 if ($3) {
  $iDb$02 = 10;
  label = 10;
 } else {
  $4 = HEAP8[$zDb>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $iDb$02 = 10;
   label = 10;
  } else {
   $6 = (_sqlite3FindDbName($db,$zDb)|0);
   $7 = ($6|0)<(0);
   if ($7) {
    HEAP32[$vararg_buffer>>2] = $zDb;
    _sqlite3Error($db,1,1936,$vararg_buffer);
    $rc$0 = 1;
   } else {
    $iDb$02 = $6;
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $8 = (_sqlite3Checkpoint($db,$iDb$02,$eMode,$pnLog,$pnCkpt)|0);
  _sqlite3Error($db,$8,0,$vararg_buffer1);
  $rc$0 = $8;
 }
 $9 = (_sqlite3ApiExit($db,$rc$0)|0);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FindDbName($db,$zName) {
 $db = $db|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$1 = 0, $pDb$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($zName|0)==(0|0);
 L1: do {
  if ($0) {
   $i$1 = -1;
  } else {
   $1 = (_sqlite3Strlen30($zName)|0);
   $2 = (($db) + 20|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + -1)|0;
   $5 = ($3|0)>(0);
   if ($5) {
    $6 = (($db) + 16|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + ($4<<4)|0);
    $i$02 = $4;$pDb$01 = $8;
    while(1) {
     $9 = HEAP32[$pDb$01>>2]|0;
     $10 = (_sqlite3Strlen30($9)|0);
     $11 = ($1|0)==($10|0);
     if ($11) {
      $12 = (_sqlite3_stricmp($9,$zName)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $i$1 = $i$02;
       break L1;
      }
     }
     $14 = (($i$02) + -1)|0;
     $15 = (($pDb$01) + -16|0);
     $16 = ($i$02|0)>(0);
     if ($16) {
      $i$02 = $14;$pDb$01 = $15;
     } else {
      $i$1 = $14;
      break;
     }
    }
   } else {
    $i$1 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($i$1|0);
}
function _sqlite3Checkpoint($db,$iDb,$eMode,$pnLog,$pnCkpt) {
 $db = $db|0;
 $iDb = $iDb|0;
 $eMode = $eMode|0;
 $pnLog = $pnLog|0;
 $pnCkpt = $pnCkpt|0;
 var $$ = 0, $$026 = 0, $$07 = 0, $$1 = 0, $$13 = 0, $$bBusy$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bBusy$0$lcssa = 0, $bBusy$010 = 0, $bBusy$1 = 0, $i$09 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond5 = 0, $rc$0$lcssa = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ($iDb|0)==(10);
  $4 = (($db) + 16|0);
  $$026 = $pnLog;$$07 = $pnCkpt;$18 = $1;$bBusy$010 = 0;$i$09 = 0;
  while(1) {
   $5 = ($i$09|0)==($iDb|0);
   $or$cond = $5 | $3;
   if ($or$cond) {
    $6 = HEAP32[$4>>2]|0;
    $7 = ((($6) + ($i$09<<4)|0) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_sqlite3BtreeCheckpoint($8,$eMode,$$026,$$07)|0);
    $10 = ($9|0)==(5);
    $$ = $10 ? 0 : $9;
    $$bBusy$0 = $10 ? 1 : $bBusy$010;
    $$pre = HEAP32[$0>>2]|0;
    $$1 = 0;$$13 = 0;$13 = $$pre;$bBusy$1 = $$bBusy$0;$rc$1 = $$;
   } else {
    $$1 = $$07;$$13 = $$026;$13 = $18;$bBusy$1 = $bBusy$010;$rc$1 = 0;
   }
   $11 = (($i$09) + 1)|0;
   $12 = ($11|0)<($13|0);
   $14 = ($rc$1|0)==(0);
   $or$cond4 = $12 & $14;
   if ($or$cond4) {
    $$026 = $$13;$$07 = $$1;$18 = $13;$bBusy$010 = $bBusy$1;$i$09 = $11;
   } else {
    $bBusy$0$lcssa = $bBusy$1;$rc$0$lcssa = $rc$1;
    break;
   }
  }
 } else {
  $bBusy$0$lcssa = 0;$rc$0$lcssa = 0;
 }
 $15 = ($rc$0$lcssa|0)!=(0);
 $16 = ($bBusy$0$lcssa|0)==(0);
 $or$cond5 = $15 | $16;
 $17 = $or$cond5 ? $rc$0$lcssa : 5;
 STACKTOP = sp;return ($17|0);
}
function _sqlite3_wal_checkpoint($db,$zDb) {
 $db = $db|0;
 $zDb = $zDb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_wal_checkpoint_v2($db,$zDb,0,0,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3SafetyCheckSickOrOk($db$0$22$val) {
 $db$0$22$val = $db$0$22$val|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($db$0$22$val|0) == 1266094736) | (($db$0$22$val|0) == -1607883113) | (($db$0$22$val|0) == -264537850)) {
  $$0 = 1;
 } else {
  _logBadConnection(5072);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3_open($zFilename,$ppDb) {
 $zFilename = $zFilename|0;
 $ppDb = $ppDb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_openDatabase($zFilename,$ppDb,6,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _openDatabase($zFilename,$ppDb,$flags,$zVfs) {
 $zFilename = $zFilename|0;
 $ppDb = $ppDb|0;
 $flags = $flags|0;
 $zVfs = $zVfs|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $db$1 = 0;
 var $isThreadsafe$0 = 0, $rc$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $zErrMsg = 0, $zOpen = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $zOpen = sp + 32|0;
 $zErrMsg = sp + 28|0;
 HEAP32[$0>>2] = $flags;
 HEAP32[$zOpen>>2] = 0;
 HEAP32[$zErrMsg>>2] = 0;
 HEAP32[$ppDb>>2] = 0;
 $1 = (_sqlite3_initialize()|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $flags & 7;
 $4 = 1 << $3;
 $5 = $4 & 70;
 $6 = ($5|0)==(0);
 if ($6) {
  _sqlite3MisuseError(122473);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[((384 + 4|0))>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $isThreadsafe$0 = 0;
 } else {
  $9 = $flags & 32768;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $flags & 65536;
   $12 = ($11|0)==(0);
   $13 = HEAP32[((384 + 8|0))>>2]|0;
   $$ = $12 ? $13 : 1;
   $isThreadsafe$0 = $$;
  } else {
   $isThreadsafe$0 = 0;
  }
 }
 $14 = $flags & 262144;
 $15 = ($14|0)==(0);
 if ($15) {
  $17 = HEAP32[((384 + 220|0))>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $21 = $flags;
  } else {
   $19 = $flags | 131072;
   HEAP32[$0>>2] = $19;
   $21 = $19;
  }
 } else {
  $16 = $flags & -131073;
  HEAP32[$0>>2] = $16;
  $21 = $16;
 }
 $20 = $21 & -655129;
 HEAP32[$0>>2] = $20;
 $22 = (_sqlite3MallocZero(520)|0);
 $23 = ($22|0)==(0|0);
 do {
  if ($23) {
   $92 = 0;
  } else {
   $24 = ($isThreadsafe$0|0)==(0);
   if (!($24)) {
    $25 = (($22) + 12|0);
    HEAP32[$25>>2] = (8);
   }
   $26 = (($22) + 56|0);
   HEAP32[$26>>2] = 255;
   $27 = (($22) + 20|0);
   HEAP32[$27>>2] = 2;
   $28 = (($22) + 76|0);
   HEAP32[$28>>2] = -264537850;
   $29 = (($22) + 448|0);
   $30 = (($22) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (($22) + 88|0);
   dest=$31+0|0; src=1960+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $32 = (($22) + 62|0);
   HEAP8[$32>>0] = 1;
   $33 = (($22) + 66|0);
   HEAP8[$33>>0] = -1;
   $34 = ((384 + 176|0));
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($22) + 40|0);
   $41 = $40;
   $42 = $41;
   HEAP32[$42>>2] = $36;
   $43 = (($41) + 4)|0;
   $44 = $43;
   HEAP32[$44>>2] = $39;
   $45 = (($22) + 72|0);
   HEAP32[$45>>2] = 0;
   $46 = (($22) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 | 9437264;
   HEAP32[$46>>2] = $48;
   $49 = (($22) + 420|0);
   _sqlite3HashInit($49);
   $50 = (($22) + 300|0);
   _sqlite3HashInit($50);
   (_createCollation($22,3592,1,0,150,0)|0);
   (_createCollation($22,3592,3,0,150,0)|0);
   (_createCollation($22,3592,2,0,150,0)|0);
   (_createCollation($22,3600,1,(1),150,0)|0);
   $51 = (($22) + 64|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = ($52<<24>>24)==(0);
   if ($53) {
    $54 = (_sqlite3FindCollSeq($22,1,3592,0)|0);
    $55 = (($22) + 8|0);
    HEAP32[$55>>2] = $54;
    (_createCollation($22,3608,1,0,151,0)|0);
    $56 = (($22) + 48|0);
    HEAP32[$56>>2] = $20;
    $57 = (_sqlite3ParseUri($zVfs,$zFilename,$0,$22,$zOpen,$zErrMsg)|0);
    if ((($57|0) == 7)) {
     HEAP8[$51>>0] = 1;
    } else if ((($57|0) == 0)) {
     $61 = HEAP32[$22>>2]|0;
     $62 = HEAP32[$zOpen>>2]|0;
     $63 = HEAP32[$30>>2]|0;
     $64 = (($63) + 4|0);
     $65 = HEAP32[$0>>2]|0;
     $66 = $65 | 256;
     $67 = (_sqlite3BtreeOpen($61,$62,$22,$64,0,$66)|0);
     if ((($67|0) == 3082)) {
      $rc$0 = 7;
     } else if ((($67|0) == 0)) {
      $68 = HEAP32[$30>>2]|0;
      $69 = (($68) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (_sqlite3SchemaGet($22,$70)|0);
      $72 = HEAP32[$30>>2]|0;
      $73 = (($72) + 12|0);
      HEAP32[$73>>2] = $71;
      $74 = (_sqlite3SchemaGet($22,0)|0);
      $75 = HEAP32[$30>>2]|0;
      $76 = (($75) + 28|0);
      HEAP32[$76>>2] = $74;
      $77 = HEAP32[$30>>2]|0;
      HEAP32[$77>>2] = 3616;
      $78 = HEAP32[$30>>2]|0;
      $79 = (($78) + 8|0);
      HEAP8[$79>>0] = 3;
      $80 = HEAP32[$30>>2]|0;
      $81 = (($80) + 16|0);
      HEAP32[$81>>2] = 1760;
      $82 = HEAP32[$30>>2]|0;
      $83 = (($82) + 24|0);
      HEAP8[$83>>0] = 1;
      HEAP32[$28>>2] = -1607883113;
      $84 = HEAP8[$51>>0]|0;
      $85 = ($84<<24>>24)==(0);
      if (!($85)) {
       $92 = $62;
       break;
      }
      _sqlite3Error($22,0,0,$vararg_buffer3);
      _sqlite3RegisterBuiltinFunctions($22);
      $86 = (_sqlite3_errcode($22)|0);
      $87 = ($86|0)==(0);
      if ($87) {
       _sqlite3AutoLoadExtensions($22);
       $88 = (_sqlite3_errcode($22)|0);
       $89 = ($88|0)==(0);
       if (!($89)) {
        $92 = $62;
        break;
       }
      } else {
       _sqlite3Error($22,$86,0,$vararg_buffer5);
      }
      $90 = HEAP32[((384 + 28|0))>>2]|0;
      $91 = HEAP32[((384 + 32|0))>>2]|0;
      (_setupLookaside($22,0,$90,$91)|0);
      (_sqlite3_wal_autocheckpoint($22,1000)|0);
      $92 = $62;
      break;
     } else {
      $rc$0 = $67;
     }
     _sqlite3Error($22,$rc$0,0,$vararg_buffer1);
     $92 = $62;
     break;
    }
    $58 = HEAP32[$zErrMsg>>2]|0;
    $59 = ($58|0)!=(0|0);
    $60 = $59 ? 1712 : 0;
    HEAP32[$vararg_buffer>>2] = $58;
    _sqlite3Error($22,$57,$60,$vararg_buffer);
    _sqlite3_free($58);
    $$pre = HEAP32[$zOpen>>2]|0;
    $92 = $$pre;
   } else {
    $92 = 0;
   }
  }
 } while(0);
 _sqlite3_free($92);
 $93 = (_sqlite3_errcode($22)|0);
 if ((($93|0) == 0)) {
  $db$1 = $22;
 } else if ((($93|0) == 7)) {
  (_sqlite3_close($22)|0);
  $db$1 = 0;
 } else {
  $94 = (($22) + 76|0);
  HEAP32[$94>>2] = 1266094736;
  $db$1 = $22;
 }
 HEAP32[$ppDb>>2] = $db$1;
 $95 = (_sqlite3ApiExit(0,$93)|0);
 $$0 = $95;
 STACKTOP = sp;return ($$0|0);
}
function _createCollation($db,$zName,$enc,$pCtx,$xCompare,$xDel) {
 $db = $db|0;
 $zName = $zName|0;
 $enc = $enc|0;
 $pCtx = $pCtx|0;
 $xCompare = $xCompare|0;
 $xDel = $xDel|0;
 var $$0 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $enc2$0 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = $enc&255;
 if ((($enc<<24>>24) == 4) | (($enc<<24>>24) == 8)) {
  $enc2$0 = 2;
 } else {
  $enc2$0 = $1;
 }
 $2 = ($enc2$0|0)==(0);
 $3 = ($enc2$0>>>0)>(3);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  _sqlite3MisuseError(122051);
  $$0 = 21;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $enc2$0&255;
 $5 = (_sqlite3FindCollSeq($db,$4,$zName,0)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (($5) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = (($db) + 140|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if (!($12)) {
    _sqlite3Error($db,5,3520,$vararg_buffer);
    $$0 = 5;
    STACKTOP = sp;return ($$0|0);
   }
   _sqlite3ExpirePreparedStatements($db);
   _invalidateCachedKeyInfo($db);
   $13 = (($5) + 4|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 & 247;
   $17 = ($16|0)==($enc2$0|0);
   if ($17) {
    $18 = (($db) + 420|0);
    $19 = (_sqlite3HashFind($18,$zName,$0)|0);
    $20 = (($19) + 4|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==($14<<24>>24);
    if ($22) {
     $23 = (($19) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      $26 = (($19) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      FUNCTION_TABLE_vi[$24 & 255]($27);
     }
     $28 = (($19) + 12|0);
     HEAP32[$28>>2] = 0;
     $$pre = HEAP8[$13>>0]|0;
     $32 = $$pre;
    } else {
     $32 = $14;
    }
    $29 = (($19) + 24|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==($32<<24>>24);
    if ($31) {
     $42 = (($19) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if (!($44)) {
      $45 = (($19) + 28|0);
      $46 = HEAP32[$45>>2]|0;
      FUNCTION_TABLE_vi[$43 & 255]($46);
     }
     $47 = (($19) + 32|0);
     HEAP32[$47>>2] = 0;
     $$pre6 = HEAP8[$13>>0]|0;
     $51 = $$pre6;
    } else {
     $51 = $32;
    }
    $48 = (($19) + 44|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)==($51<<24>>24);
    if ($50) {
     $52 = (($19) + 56|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0|0);
     if (!($54)) {
      $55 = (($19) + 48|0);
      $56 = HEAP32[$55>>2]|0;
      FUNCTION_TABLE_vi[$53 & 255]($56);
     }
     $57 = (($19) + 52|0);
     HEAP32[$57>>2] = 0;
    }
   }
  }
 }
 $33 = (_sqlite3FindCollSeq($db,$4,$zName,1)|0);
 $34 = ($33|0)==(0|0);
 if ($34) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($33) + 12|0);
 HEAP32[$35>>2] = $xCompare;
 $36 = (($33) + 8|0);
 HEAP32[$36>>2] = $pCtx;
 $37 = (($33) + 16|0);
 HEAP32[$37>>2] = $xDel;
 $38 = $1 & 8;
 $39 = $enc2$0 | $38;
 $40 = $39&255;
 $41 = (($33) + 4|0);
 HEAP8[$41>>0] = $40;
 _sqlite3Error($db,0,0,$vararg_buffer1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsSleep($pVfs,$nMicro) {
 $pVfs = $pVfs|0;
 $nMicro = $nMicro|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iii[$1 & 255]($pVfs,$nMicro)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3_file_control($db,$zDbName,$op,$pArg) {
 $db = $db|0;
 $zDbName = $zDbName|0;
 $op = $op|0;
 $pArg = $pArg|0;
 var $$idx$val = 0, $$idx$val$idx$val = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3DbNameToBtree($db,$zDbName)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $rc$0 = 1;
  STACKTOP = sp;return ($rc$0|0);
 }
 $$idx1$val = HEAP32[$0>>2]|0;
 $$idx2 = (($0) + 4|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 _sqlite3BtreeEnter($$idx1$val,$$idx2$val);
 $$idx$val = HEAP32[$$idx2>>2]|0;
 $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
 $2 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
 $$idx3 = (($2) + 60|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $3 = (_sqlite3PagerFile($$idx3$val)|0);
 $4 = ($op|0)==(7);
 if ($4) {
  HEAP32[$pArg>>2] = $3;
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $rc$0 = 12;
  STACKTOP = sp;return ($rc$0|0);
 }
 $7 = (_sqlite3OsFileControl($3,$op,$pArg)|0);
 $rc$0 = $7;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3DbNameToBtree($db,$zDbName) {
 $db = $db|0;
 $zDbName = $zDbName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = (($db) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($zDbName|0)==(0|0);
   $i$02 = 0;
   while(1) {
    $6 = ((($4) + ($i$02<<4)|0) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if (!($8)) {
     if ($5) {
      $$0 = $7;
      break L1;
     }
     $9 = (($4) + ($i$02<<4)|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (_sqlite3_stricmp($zDbName,$10)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $$0 = $7;
      break L1;
     }
    }
    $13 = (($i$02) + 1)|0;
    $14 = ($13|0)<($1|0);
    if ($14) {
     $i$02 = $13;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsFileControl($id,$op,$pArg) {
 $id = $id|0;
 $op = $op|0;
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiii[$2 & 255]($id,$op,$pArg)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3BtreeSetPageSize($p$0$0$val,$p$0$1$val,$pageSize,$nReserve,$iFix) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $pageSize = $pageSize|0;
 $nReserve = $nReserve|0;
 $iFix = $iFix|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pageSize$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = (($p$0$1$val) + 22|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 2;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($nReserve|0)<(0);
 if ($4) {
  $5 = (($p$0$1$val) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($p$0$1$val) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) - ($8))|0;
  $$02 = $9;
 } else {
  $$02 = $nReserve;
 }
 $pageSize$off = (($pageSize) + -512)|0;
 $10 = ($pageSize$off>>>0)<(65025);
 if ($10) {
  $11 = (($pageSize) + -1)|0;
  $12 = $11 & $pageSize;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = (($p$0$1$val) + 32|0);
   HEAP32[$14>>2] = $pageSize;
   _freeTempSpace($p$0$1$val);
  }
 }
 $15 = HEAP32[$p$0$1$val>>2]|0;
 $16 = (($p$0$1$val) + 32|0);
 $17 = (_sqlite3PagerSetPagesize($15,$16,$$02)|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = $$02 & 65535;
 $20 = (($18) - ($19))|0;
 $21 = (($p$0$1$val) + 36|0);
 HEAP32[$21>>2] = $20;
 $22 = ($iFix|0)==(0);
 if ($22) {
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP16[$0>>1]|0;
 $24 = $23&65535;
 $25 = $24 | 2;
 $26 = $25&65535;
 HEAP16[$0>>1] = $26;
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3KeywordCode($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_keywordCode($z,$n)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ScratchMalloc($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = HEAP32[((656 + 32|0))>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[((384 + 196|0))>>2]|0;
 $3 = ($2|0)<($n|0);
 $or$cond = $1 | $3;
 if (!($or$cond)) {
  $4 = HEAP32[((656 + 28|0))>>2]|0;
  HEAP32[$p>>2] = $4;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[((656 + 28|0))>>2] = $5;
  $6 = (($0) + -1)|0;
  HEAP32[((656 + 32|0))>>2] = $6;
  _sqlite3StatusAdd(3,1);
  _sqlite3StatusSet(8,$n);
  $14 = $4;
  STACKTOP = sp;return ($14|0);
 }
 $7 = HEAP32[384>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = HEAP32[((384 + 36|0))>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$12 & 255]($n)|0);
  HEAP32[$p>>2] = $13;
  $14 = $13;
  STACKTOP = sp;return ($14|0);
 }
 _sqlite3StatusSet(8,$n);
 $9 = (_mallocWithAlarm($n,$p)|0);
 $10 = HEAP32[$p>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 _sqlite3StatusAdd(4,$9);
 $14 = $10;
 STACKTOP = sp;return ($14|0);
}
function _sqlite3ScratchFree($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[((384 + 192|0))>>2]|0;
 $2 = ($1>>>0)<=($p>>>0);
 $3 = HEAP32[((656 + 24|0))>>2]|0;
 $4 = ($3>>>0)>($p>>>0);
 $or$cond = $2 & $4;
 if ($or$cond) {
  $5 = HEAP32[((656 + 28|0))>>2]|0;
  HEAP32[$p>>2] = $5;
  HEAP32[((656 + 28|0))>>2] = $p;
  $6 = HEAP32[((656 + 32|0))>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[((656 + 32|0))>>2] = $7;
  _sqlite3StatusAdd(3,-1);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[384>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = HEAP32[((384 + 40|0))>>2]|0;
  FUNCTION_TABLE_vi[$13 & 255]($p);
  STACKTOP = sp;return;
 } else {
  $10 = (_sqlite3MallocSize($p)|0);
  $11 = (0 - ($10))|0;
  _sqlite3StatusAdd(4,$11);
  _sqlite3StatusAdd(0,$11);
  _sqlite3StatusAdd(9,-1);
  $12 = HEAP32[((384 + 40|0))>>2]|0;
  FUNCTION_TABLE_vi[$12 & 255]($p);
  STACKTOP = sp;return;
 }
}
function _sqlite3_uri_parameter($zFilename,$zParam) {
 $zFilename = $zFilename|0;
 $zParam = $zParam|0;
 var $$0 = 0, $$012 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($zFilename|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_sqlite3Strlen30($zFilename)|0);
 $2 = (($1) + 1)|0;
 $3 = (($zFilename) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$012 = $3;
 }
 while(1) {
  $6 = (_strcmp($$012,$zParam)|0);
  $7 = (_sqlite3Strlen30($$012)|0);
  $8 = (($7) + 1)|0;
  $9 = (($$012) + ($8)|0);
  $10 = ($6|0)==(0);
  if ($10) {
   $$0 = $9;
   label = 5;
   break;
  }
  $11 = (_sqlite3Strlen30($9)|0);
  $12 = (($7) + 2)|0;
  $$sum = (($12) + ($11))|0;
  $13 = (($$012) + ($$sum)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $$012 = $13;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3_uri_boolean($zFilename,$zParam,$bDflt) {
 $zFilename = $zFilename|0;
 $zParam = $zParam|0;
 $bDflt = $bDflt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_uri_parameter($zFilename,$zParam)|0);
 $1 = ($bDflt|0)!=(0);
 $2 = $1&1;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $6 = $2;
  STACKTOP = sp;return ($6|0);
 }
 $4 = (_sqlite3GetBoolean($0,$2)|0);
 $5 = $4&255;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3GetBoolean($z,$dflt) {
 $z = $z|0;
 $dflt = $dflt|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getSafetyLevel($z,1,$dflt)|0);
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _sqlite3Atoi64($zNum,$pNum,$length,$enc) {
 $zNum = $zNum|0;
 $pNum = $pNum|0;
 $length = $length|0;
 $enc = $enc|0;
 var $$0 = 0, $$03$ph = 0, $$0318 = 0, $$1 = 0, $$2$lcssa = 0, $$213 = 0, $$lcssa = 0, $$lcssa21 = 0, $$lcssa47 = 0, $$lcssa4860 = 0, $$lcssa4861 = 0, $$off = 0, $$sum = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $brmerge = 0, $c$1752 = 0, $c$175354 = 0, $c$175355 = 0;
 var $i$0$lcssa = 0, $i$022 = 0, $i$1$lcssa = 0, $i$1$lcssa49 = 0, $i$1$lcssa5058 = 0, $i$1$lcssa5059 = 0, $i$19 = 0, $incr$0$ph = 0, $length$pn = 0, $neg$0 = 0, $nonNum$0$ph = 0, $or$cond = 0, $or$cond6 = 0, $phitmp = 0, $zEnd$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $enc&255;
 $1 = ($enc<<24>>24)==(1);
 if ($1) {
  $$03$ph = $zNum;$incr$0$ph = 1;$length$pn = $length;$nonNum$0$ph = 0;
 } else {
  $2 = (3 - ($0))|0;
  $3 = ($2|0)<($length|0);
  L3: do {
   if ($3) {
    $i$022 = $2;
    while(1) {
     $6 = (($zNum) + ($i$022)|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(0);
     $5 = (($i$022) + 2)|0;
     if (!($8)) {
      $$lcssa21 = 1;$i$0$lcssa = $i$022;
      break L3;
     }
     $4 = ($5|0)<($length|0);
     if ($4) {
      $i$022 = $5;
     } else {
      $$lcssa21 = 0;$i$0$lcssa = $5;
      break;
     }
    }
   } else {
    $$lcssa21 = 0;$i$0$lcssa = $2;
   }
  } while(0);
  $$sum = (($0) + -3)|0;
  $$sum4 = (($$sum) + ($i$0$lcssa))|0;
  $9 = $0 & 1;
  $10 = (($zNum) + ($9)|0);
  $$03$ph = $10;$incr$0$ph = 2;$length$pn = $$sum4;$nonNum$0$ph = $$lcssa21;
 }
 $zEnd$0$ph = (($zNum) + ($length$pn)|0);
 $11 = ($$03$ph>>>0)<($zEnd$0$ph>>>0);
 L9: do {
  if ($11) {
   $$0318 = $$03$ph;
   while(1) {
    $12 = HEAP8[$$0318>>0]|0;
    $13 = $12&255;
    $14 = (48 + ($13)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 & 1;
    $17 = ($16<<24>>24)==(0);
    if ($17) {
     break;
    }
    $18 = (($$0318) + ($incr$0$ph)|0);
    $19 = ($18>>>0)<($zEnd$0$ph>>>0);
    if ($19) {
     $$0318 = $18;
    } else {
     $$1 = $18;$neg$0 = 0;
     break L9;
    }
   }
   if ((($12<<24>>24) == 45)) {
    $20 = (($$0318) + ($incr$0$ph)|0);
    $$1 = $20;$neg$0 = 1;
    break;
   } else if ((($12<<24>>24) == 43)) {
    $21 = (($$0318) + ($incr$0$ph)|0);
    $$1 = $21;$neg$0 = 0;
    break;
   } else {
    $$1 = $$0318;$neg$0 = 0;
    break;
   }
  } else {
   $$1 = $$03$ph;$neg$0 = 0;
  }
 } while(0);
 $22 = ($$1>>>0)<($zEnd$0$ph>>>0);
 L18: do {
  if ($22) {
   $$213 = $$1;
   while(1) {
    $23 = HEAP8[$$213>>0]|0;
    $24 = ($23<<24>>24)==(48);
    if (!($24)) {
     $$2$lcssa = $$213;
     break L18;
    }
    $27 = (($$213) + ($incr$0$ph)|0);
    $28 = ($27>>>0)<($zEnd$0$ph>>>0);
    if ($28) {
     $$213 = $27;
    } else {
     $$2$lcssa = $27;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1;
  }
 } while(0);
 $25 = ($$2$lcssa>>>0)<($zEnd$0$ph>>>0);
 do {
  if ($25) {
   $30 = $$2$lcssa;$33 = 0;$34 = 0;$i$19 = 0;
   while(1) {
    $29 = HEAP8[$30>>0]|0;
    $31 = $29 << 24 >> 24;
    $$off = (($29) + -48)<<24>>24;
    $32 = ($$off&255)<(10);
    if (!($32)) {
     $$lcssa = 0;$48 = $34;$80 = $33;$i$1$lcssa = $i$19;
     break;
    }
    $35 = (___muldi3(($33|0),($34|0),10,0)|0);
    $36 = tempRet0;
    $37 = $29 << 24 >> 24;
    $38 = ($37|0)<(0);
    $39 = $38 << 31 >> 31;
    $40 = (_i64Add(($35|0),($36|0),-48,-1)|0);
    $41 = tempRet0;
    $42 = (_i64Add(($40|0),($41|0),($37|0),($39|0))|0);
    $43 = tempRet0;
    $44 = (($i$19) + ($incr$0$ph))|0;
    $45 = (($$2$lcssa) + ($44)|0);
    $46 = ($45>>>0)<($zEnd$0$ph>>>0);
    if ($46) {
     $30 = $45;$33 = $42;$34 = $43;$i$19 = $44;
    } else {
     $$lcssa = 1;$48 = $43;$80 = $42;$i$1$lcssa = $44;
     break;
    }
   }
   $47 = ($48|0)<(0);
   $49 = ($neg$0|0)!=(0);
   if ($47) {
    $50 = $49 ? 0 : -1;
    $51 = $49 ? -2147483648 : 2147483647;
    $52 = $pNum;
    $53 = $52;
    HEAP32[$53>>2] = $50;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP32[$55>>2] = $51;
    $phitmp = $49 ? 0 : 2;
    $$lcssa47 = $$lcssa;$81 = $phitmp;$c$1752 = $31;$i$1$lcssa49 = $i$1$lcssa;
    break;
   } else {
    if ($49) {
     $$lcssa4860 = $$lcssa;$56 = $80;$57 = $48;$c$175354 = $31;$i$1$lcssa5058 = $i$1$lcssa;
     label = 22;
     break;
    } else {
     $$lcssa4861 = $$lcssa;$66 = $80;$69 = $48;$c$175355 = $31;$i$1$lcssa5059 = $i$1$lcssa;
     label = 23;
     break;
    }
   }
  } else {
   $26 = ($neg$0|0)==(0);
   if ($26) {
    $$lcssa4861 = 1;$66 = 0;$69 = 0;$c$175355 = 0;$i$1$lcssa5059 = 0;
    label = 23;
   } else {
    $$lcssa4860 = 1;$56 = 0;$57 = 0;$c$175354 = 0;$i$1$lcssa5058 = 0;
    label = 22;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $58 = (_i64Subtract(0,0,($56|0),($57|0))|0);
  $59 = tempRet0;
  $60 = $pNum;
  $61 = $60;
  HEAP32[$61>>2] = $58;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $59;
  $$lcssa47 = $$lcssa4860;$81 = 0;$c$1752 = $c$175354;$i$1$lcssa49 = $i$1$lcssa5058;
 }
 else if ((label|0) == 23) {
  $64 = $pNum;
  $65 = $64;
  HEAP32[$65>>2] = $66;
  $67 = (($64) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $69;
  $$lcssa47 = $$lcssa4861;$81 = 2;$c$1752 = $c$175355;$i$1$lcssa49 = $i$1$lcssa5059;
 }
 $70 = ($c$1752|0)==(0);
 $brmerge = $70 | $$lcssa47;
 if (!($brmerge)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = ($i$1$lcssa49|0)==(0);
 $72 = ($$1|0)==($$2$lcssa|0);
 $or$cond = $71 & $72;
 if ($or$cond) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = ($incr$0$ph*19)|0;
 $74 = ($i$1$lcssa49|0)<=($73|0);
 $75 = ($nonNum$0$ph|0)==(0);
 $or$cond6 = $74 & $75;
 if (!($or$cond6)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = ($i$1$lcssa49|0)<($73|0);
 if ($76) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $77 = (_compare2pow63($$2$lcssa,$incr$0$ph)|0);
 $78 = ($77|0)<(0);
 if ($78) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = ($77|0)>(0);
 if ($79) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $81;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeGetFilename($p$0$1$val$0$0$val) {
 $p$0$1$val$0$0$val = $p$0$1$val$0$0$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3PagerFilename($p$0$1$val$0$0$val,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PagerIsreadonly($pPager$0$10$val) {
 $pPager$0$10$val = $pPager$0$10$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPager$0$10$val|0);
}
function _sqlite3PagerFilename($pPager,$nullIfMemDb) {
 $pPager = $pPager|0;
 $nullIfMemDb = $nullIfMemDb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nullIfMemDb|0)==(0);
 if (!($0)) {
  $1 = (($pPager) + 14|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if (!($3)) {
   $6 = 1728;
   STACKTOP = sp;return ($6|0);
  }
 }
 $4 = (($pPager) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function _compare2pow63($zNum,$incr) {
 $zNum = $zNum|0;
 $incr = $incr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$1 = 0, $i$01 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = Math_imul($i$01, $incr)|0;
  $1 = (($zNum) + ($0)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = (2008 + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($i$01) + 1)|0;
  $6 = ($2<<24>>24)==($4<<24>>24);
  $7 = ($5|0)<(18);
  $or$cond = $6 & $7;
  if ($or$cond) {
   $i$01 = $5;
  } else {
   break;
  }
 }
 $8 = $4 << 24 >> 24;
 $9 = $2 << 24 >> 24;
 $10 = (($9) - ($8))|0;
 $11 = ($10*10)|0;
 if (!($6)) {
  $c$1 = $11;
  STACKTOP = sp;return ($c$1|0);
 }
 $12 = ($incr*18)|0;
 $13 = (($zNum) + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = (($15) + -56)|0;
 $c$1 = $16;
 STACKTOP = sp;return ($c$1|0);
}
function _getSafetyLevel($z,$omitFull,$dflt) {
 $z = $z|0;
 $omitFull = $omitFull|0;
 $dflt = $dflt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$z>>0]|0;
 $1 = $0&255;
 $2 = (($1) + -48)|0;
 $3 = ($2>>>0)<(10);
 if ($3) {
  $4 = (_sqlite3Atoi($z)|0);
  $5 = $4&255;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_sqlite3Strlen30($z)|0);
 $7 = (7 - ($omitFull))|0;
 $8 = ($7|0)>(0);
 L5: do {
  if ($8) {
   $i$02 = 0;
   while(1) {
    $9 = (2064 + ($i$02)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = ($11|0)==($6|0);
    if ($12) {
     $13 = (2056 + ($i$02)|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = (2032 + ($15)|0);
     $17 = (_sqlite3_strnicmp($16,$z,$6)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      break;
     }
    }
    $21 = (($i$02) + 1)|0;
    $22 = ($21|0)<($7|0);
    if ($22) {
     $i$02 = $21;
    } else {
     break L5;
    }
   }
   $19 = (2072 + ($i$02)|0);
   $20 = HEAP8[$19>>0]|0;
   $$0 = $20;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $23 = $dflt&255;
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Atoi($z) {
 $z = $z|0;
 var $$pre = 0, $0 = 0, $1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 HEAP32[$x>>2] = 0;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $1 = 0;
 } else {
  (_sqlite3GetInt32($z,$x)|0);
  $$pre = HEAP32[$x>>2]|0;
  $1 = $$pre;
 }
 STACKTOP = sp;return ($1|0);
}
function _sqlite3GetInt32($zNum,$pValue) {
 $zNum = $zNum|0;
 $pValue = $pValue|0;
 var $$0 = 0, $$02 = 0, $$02$ph = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $neg$0$ph = 0, $phitmp = 0, $v$1$off0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$zNum>>0]|0;
 if ((($0<<24>>24) == 43)) {
  $2 = (($zNum) + 1|0);
  $$02$ph = $2;$neg$0$ph = 0;
 } else if ((($0<<24>>24) == 45)) {
  $1 = (($zNum) + 1|0);
  $$02$ph = $1;$neg$0$ph = 1;
 } else {
  $$02$ph = $zNum;$neg$0$ph = 0;
 }
 $$02 = $$02$ph;
 while(1) {
  $3 = HEAP8[$$02>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if (!($4)) {
   $13 = 0;$14 = 0;$7 = $3;$i$06 = 1;
   break;
  }
  $5 = (($$02) + 1|0);
  $$02 = $5;
 }
 while(1) {
  $6 = $7 << 24 >> 24;
  $8 = (($6) + -48)|0;
  $9 = ($8>>>0)<(10);
  if (!($9)) {
   break;
  }
  $10 = ($i$06|0)<(11);
  if (!($10)) {
   $$0 = 0;
   label = 14;
   break;
  }
  $11 = ($8|0)<(0);
  $12 = $11 << 31 >> 31;
  $15 = (___muldi3(($13|0),($14|0),10,0)|0);
  $16 = tempRet0;
  $17 = (_i64Add(($8|0),($12|0),($15|0),($16|0))|0);
  $18 = tempRet0;
  $$phi$trans$insert = (($$02) + ($i$06)|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $phitmp = (($i$06) + 1)|0;
  $13 = $17;$14 = $18;$7 = $$pre;$i$06 = $phitmp;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (_i64Subtract(($13|0),($14|0),($neg$0$ph|0),0)|0);
 $20 = tempRet0;
 $21 = ($20|0)>(0);
 $22 = ($20|0)==(0);
 $23 = ($19>>>0)>(2147483647);
 $24 = $22 & $23;
 $25 = $21 | $24;
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ($neg$0$ph|0)==(0);
 if ($26) {
  $v$1$off0 = $13;
 } else {
  $27 = (_i64Subtract(0,0,($13|0),($14|0))|0);
  $28 = tempRet0;
  $v$1$off0 = $27;
 }
 HEAP32[$pValue>>2] = $v$1$off0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3StatusSet($op,$X) {
 $op = $op|0;
 $X = $X|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (304 + ($op<<2)|0);
 HEAP32[$0>>2] = $X;
 $1 = (344 + ($op<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<($X|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$1>>2] = $X;
 STACKTOP = sp;return;
}
function _mallocWithAlarm($n,$pp) {
 $n = $n|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nFull$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((384 + 52|0))>>2]|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255]($n)|0);
 _sqlite3StatusSet(5,$n);
 $2 = HEAP32[((656 + 16|0))>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if (!($3)) {
   $4 = (_sqlite3StatusValue()|0);
   $5 = ($4|0)<(0);
   $6 = $5 << 31 >> 31;
   $7 = ((656 + 8|0));
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($1|0)<(0);
   $14 = $13 << 31 >> 31;
   $15 = (_i64Subtract(($9|0),($12|0),($1|0),($14|0))|0);
   $16 = tempRet0;
   $17 = ($6|0)<($16|0);
   $18 = ($6|0)==($16|0);
   $19 = ($4>>>0)<($15>>>0);
   $20 = $18 & $19;
   $21 = $17 | $20;
   if ($21) {
    HEAP32[((656 + 36|0))>>2] = 0;
    break;
   } else {
    HEAP32[((656 + 36|0))>>2] = 1;
    _sqlite3MallocAlarm($1);
    break;
   }
  }
 } while(0);
 $22 = HEAP32[((384 + 36|0))>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 255]($1)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $nFull$0 = $1;
  HEAP32[$pp>>2] = $23;
  STACKTOP = sp;return ($nFull$0|0);
 }
 $25 = (_sqlite3MallocSize($23)|0);
 _sqlite3StatusAdd(0,$25);
 _sqlite3StatusAdd(9,1);
 $nFull$0 = $25;
 HEAP32[$pp>>2] = $23;
 STACKTOP = sp;return ($nFull$0|0);
}
function _sqlite3StatusValue() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[304>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3MallocAlarm($nByte) {
 $nByte = $nByte|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((656 + 16|0))>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_sqlite3StatusValue()|0);
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = HEAP32[((656 + 20|0))>>2]|0;
 HEAP32[((656 + 16|0))>>2] = 0;
 FUNCTION_TABLE_viiii[$0 & 255]($5,$2,$4,$nByte);
 HEAP32[((656 + 16|0))>>2] = $0;
 HEAP32[((656 + 20|0))>>2] = $5;
 STACKTOP = sp;return;
}
function _keywordCode($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $$0 = 0, $$sink = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$04 = 0, $i$04$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(2);
 if ($0) {
  $$0 = 27;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$z>>0]|0;
 $2 = $1&255;
 $3 = (960 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 2;
 $7 = (($n) + -1)|0;
 $8 = (($z) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (960 + ($10)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13*3)|0;
 $15 = $6 ^ $n;
 $16 = $15 ^ $14;
 $17 = (($16|0) % 127)&-1;
 $18 = (2640 + ($17)|0);
 $$sink2 = HEAP8[$18>>0]|0;
 $19 = ($$sink2<<24>>24)==(0);
 if ($19) {
  $$0 = 27;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $$sink2&255;
 $i$04$in = $20;
 while(1) {
  $i$04 = (($i$04$in) + -1)|0;
  $21 = (2896 + ($i$04)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==($n|0);
  if ($24) {
   $25 = (3024 + ($i$04<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = (2080 + ($27)|0);
   $29 = (_sqlite3_strnicmp($28,$z,$n)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    break;
   }
  }
  $34 = (2768 + ($i$04)|0);
  $$sink = HEAP8[$34>>0]|0;
  $35 = $$sink&255;
  $36 = ($$sink<<24>>24)==(0);
  if ($36) {
   $$0 = 27;
   label = 8;
   break;
  } else {
   $i$04$in = $35;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (3272 + ($i$04)|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $$0 = $33;
 STACKTOP = sp;return ($$0|0);
}
function _freeTempSpace($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3PageFree($1);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3PagerSetPagesize($pPager,$pPageSize,$nReserve) {
 $pPager = $pPager|0;
 $pPageSize = $pPageSize|0;
 $nReserve = $nReserve|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nByte = 0, $not$ = 0, $or$cond = 0, $rc$2$ph8 = 0;
 var $rc$25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nByte = sp;
 $0 = HEAP32[$pPageSize>>2]|0;
 $1 = (($pPager) + 14|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (($pPager) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = (($pPager) + 204|0);
   $8 = HEAP32[$7>>2]|0;
   $$idx = (($8) + 12|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $9 = (_sqlite3PcacheRefCount($$idx$val)|0);
   $10 = ($9|0)!=(0);
   $11 = ($0|0)==(0);
   $or$cond = $10 | $11;
   if (!($or$cond)) {
    $12 = (($pPager) + 152|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($0|0)==($13|0);
    if (!($14)) {
     $15 = $nByte;
     $16 = $15;
     HEAP32[$16>>2] = 0;
     $17 = (($15) + 4)|0;
     $18 = $17;
     HEAP32[$18>>2] = 0;
     $19 = (($pPager) + 15|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      label = 8;
     } else {
      $22 = (($pPager) + 60|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if ($25) {
       label = 8;
      } else {
       $26 = (_sqlite3OsFileSize($23,$nByte)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        label = 8;
       } else {
        $rc$2$ph8 = $26;
       }
      }
     }
     if ((label|0) == 8) {
      $28 = (_sqlite3PageMalloc($0)|0);
      $not$ = ($28|0)==(0|0);
      if ($not$) {
       $rc$2$ph8 = 7;
      } else {
       _pager_reset($pPager);
       $29 = $nByte;
       $30 = $29;
       $31 = HEAP32[$30>>2]|0;
       $32 = (($29) + 4)|0;
       $33 = $32;
       $34 = HEAP32[$33>>2]|0;
       $35 = (_i64Add(($0|0),0,-1,-1)|0);
       $36 = tempRet0;
       $37 = (_i64Add(($35|0),($36|0),($31|0),($34|0))|0);
       $38 = tempRet0;
       $39 = (___divdi3(($37|0),($38|0),($0|0),0)|0);
       $40 = tempRet0;
       $41 = (($pPager) + 24|0);
       HEAP32[$41>>2] = $39;
       HEAP32[$12>>2] = $0;
       $42 = (($pPager) + 200|0);
       $43 = HEAP32[$42>>2]|0;
       _sqlite3PageFree($43);
       HEAP32[$42>>2] = $28;
       $44 = HEAP32[$7>>2]|0;
       _sqlite3PcacheSetPageSize($44,$0);
       break;
      }
     }
     $45 = HEAP32[$12>>2]|0;
     HEAP32[$pPageSize>>2] = $45;
     $rc$25 = $rc$2$ph8;
     STACKTOP = sp;return ($rc$25|0);
    }
   }
  }
 } while(0);
 $46 = (($pPager) + 152|0);
 $47 = HEAP32[$46>>2]|0;
 HEAP32[$pPageSize>>2] = $47;
 $48 = ($nReserve|0)<(0);
 $49 = (($pPager) + 142|0);
 if ($48) {
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $$0 = $51;
 } else {
  $$0 = $nReserve;
 }
 $52 = $$0&65535;
 HEAP16[$49>>1] = $52;
 $rc$25 = 0;
 STACKTOP = sp;return ($rc$25|0);
}
function _sqlite3PcacheRefCount($pCache$0$3$val) {
 $pCache$0$3$val = $pCache$0$3$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pCache$0$3$val|0);
}
function _sqlite3OsFileSize($id,$pSize) {
 $id = $id|0;
 $pSize = $pSize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($id,$pSize)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3PageMalloc($sz) {
 $sz = $sz|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pcache1Alloc($sz)|0);
 STACKTOP = sp;return ($0|0);
}
function _pager_reset($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3BackupRestart($1);
 $2 = (($pPager) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 _sqlite3PcacheClear($3);
 STACKTOP = sp;return;
}
function _sqlite3PageFree($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pcache1Free($p);
 STACKTOP = sp;return;
}
function _sqlite3PcacheSetPageSize($pCache,$szPage) {
 $pCache = $pCache|0;
 $szPage = $szPage|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[((384 + 148|0))>>2]|0;
  FUNCTION_TABLE_vi[$3 & 255]($1);
  HEAP32[$0>>2] = 0;
  $4 = (($pCache) + 44|0);
  HEAP32[$4>>2] = 0;
 }
 $5 = (($pCache) + 20|0);
 HEAP32[$5>>2] = $szPage;
 STACKTOP = sp;return;
}
function _pcache1Free($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[((3400 + 44|0))>>2]|0;
 $2 = ($1>>>0)<=($p>>>0);
 $3 = HEAP32[((3400 + 48|0))>>2]|0;
 $4 = ($3>>>0)>($p>>>0);
 $or$cond = $2 & $4;
 if ($or$cond) {
  _sqlite3StatusAdd(1,-1);
  $5 = HEAP32[((3400 + 56|0))>>2]|0;
  HEAP32[$p>>2] = $5;
  HEAP32[((3400 + 56|0))>>2] = $p;
  $6 = HEAP32[((3400 + 60|0))>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[((3400 + 60|0))>>2] = $7;
  $8 = HEAP32[((3400 + 40|0))>>2]|0;
  $9 = ($7|0)<($8|0);
  $10 = $9&1;
  HEAP32[((3400 + 64|0))>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $11 = (_sqlite3MallocSize($p)|0);
  $12 = (0 - ($11))|0;
  _sqlite3StatusAdd(2,$12);
  _sqlite3_free($p);
  STACKTOP = sp;return;
 }
}
function _sqlite3BackupRestart($pBackup) {
 $pBackup = $pBackup|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBackup|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$01 = $pBackup;
 }
 while(1) {
  $1 = (($p$01) + 16|0);
  HEAP32[$1>>2] = 1;
  $2 = (($p$01) + 44|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  } else {
   $p$01 = $3;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3PcacheClear($pCache) {
 $pCache = $pCache|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3PcacheTruncate($pCache,0);
 STACKTOP = sp;return;
}
function _sqlite3PcacheTruncate($pCache,$pgno) {
 $pCache = $pCache|0;
 $pgno = $pgno|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p$01 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$pCache>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $p$01 = $3;
  while(1) {
   $5 = (($p$01) + 32|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($p$01) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8>>>0)>($pgno>>>0);
   if ($9) {
    _sqlite3PcacheMakeClean($p$01);
   }
   $10 = ($6|0)==(0|0);
   if ($10) {
    break;
   } else {
    $p$01 = $6;
   }
  }
 }
 $11 = ($pgno|0)==(0);
 if ($11) {
  $12 = (($pCache) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = 1;
  } else {
   $15 = (($13) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($pCache) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   _memset(($16|0),0,($18|0))|0;
   $$0 = 2;
  }
 } else {
  $phitmp = (($pgno) + 1)|0;
  $$0 = $phitmp;
 }
 $19 = HEAP32[((384 + 144|0))>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vii[$19 & 255]($20,$$0);
 STACKTOP = sp;return;
}
function _sqlite3PcacheMakeClean($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 2;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 _pcacheRemoveFromDirtyList($p);
 $4 = HEAP16[$0>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 65529;
 $7 = $6&65535;
 HEAP16[$0>>1] = $7;
 $8 = (($p) + 26|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 _pcacheUnpin($p);
 STACKTOP = sp;return;
}
function _pcacheRemoveFromDirtyList($pPage) {
 $pPage = $pPage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPage$pn = 0, $pSynced$0 = 0, $pSynced$0$in = 0, $pSynced$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($pPage|0);
 if ($4) {
  $pPage$pn = $pPage;
  while(1) {
   $pSynced$0$in = (($pPage$pn) + 36|0);
   $pSynced$0 = HEAP32[$pSynced$0$in>>2]|0;
   $5 = ($pSynced$0|0)==(0|0);
   if ($5) {
    $pSynced$0$lcssa = 0;
    break;
   }
   $6 = (($pSynced$0) + 24|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 & 4;
   $9 = ($8<<16>>16)==(0);
   if ($9) {
    $pSynced$0$lcssa = $pSynced$0;
    break;
   } else {
    $pPage$pn = $pSynced$0;
   }
  }
  HEAP32[$2>>2] = $pSynced$0$lcssa;
 }
 $10 = (($pPage) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 $13 = (($pPage) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 if ($12) {
  $16 = (($1) + 4|0);
  HEAP32[$16>>2] = $14;
 } else {
  $15 = (($11) + 36|0);
  HEAP32[$15>>2] = $14;
 }
 $17 = HEAP32[$13>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = HEAP32[$10>>2]|0;
 if ($18) {
  HEAP32[$1>>2] = $19;
  $21 = ($19|0)==(0|0);
  if ($21) {
   $22 = (($1) + 28|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if (!($24)) {
    $25 = (($1) + 29|0);
    HEAP8[$25>>0] = 2;
   }
  }
 } else {
  $20 = (($17) + 32|0);
  HEAP32[$20>>2] = $19;
 }
 HEAP32[$10>>2] = 0;
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _pcacheUnpin($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($p) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = (($1) + 44|0);
  HEAP32[$8>>2] = 0;
 }
 $9 = HEAP32[((384 + 136|0))>>2]|0;
 $10 = (($1) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$p>>2]|0;
 FUNCTION_TABLE_viii[$9 & 255]($11,$12,0);
 STACKTOP = sp;return;
}
function _pcache1Alloc($nByte) {
 $nByte = $nByte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3StatusSet(7,$nByte);
 $0 = HEAP32[((3400 + 32|0))>>2]|0;
 $1 = ($0|0)<($nByte|0);
 if (!($1)) {
  $2 = HEAP32[((3400 + 56|0))>>2]|0;
  $cond = ($2|0)==(0|0);
  if (!($cond)) {
   $3 = HEAP32[$2>>2]|0;
   HEAP32[((3400 + 56|0))>>2] = $3;
   $4 = HEAP32[((3400 + 60|0))>>2]|0;
   $5 = (($4) + -1)|0;
   HEAP32[((3400 + 60|0))>>2] = $5;
   $6 = HEAP32[((3400 + 40|0))>>2]|0;
   $7 = ($4|0)<=($6|0);
   $8 = $7&1;
   HEAP32[((3400 + 64|0))>>2] = $8;
   _sqlite3StatusAdd(1,1);
   $p$1 = $2;
   STACKTOP = sp;return ($p$1|0);
  }
 }
 $9 = (_sqlite3Malloc($nByte)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $p$1 = 0;
  STACKTOP = sp;return ($p$1|0);
 }
 $11 = (_sqlite3MallocSize($9)|0);
 _sqlite3StatusAdd(2,$11);
 $p$1 = $9;
 STACKTOP = sp;return ($p$1|0);
}
function _sqlite3BitvecCreate($iSize) {
 $iSize = $iSize|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3MallocZero(512)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  HEAP32[$0>>2] = $iSize;
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BitvecSet($p,$i) {
 $p = $p|0;
 $i = $i|0;
 var $$ = 0, $$0 = 0, $$0114 = 0, $$0118 = 0, $$0217 = 0, $$029 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $h$0 = 0, $h$2 = 0, $j$03 = 0, $rc$04 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($i) + -1)|0;
 $2 = HEAP32[$p>>2]|0;
 $3 = ($2>>>0)>(4000);
 L4: do {
  if ($3) {
   $$0118 = $p;$$0217 = $1;$47 = $p;
   while(1) {
    $4 = (($$0118) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0);
    if ($6) {
     break;
    }
    $7 = (($$0217>>>0) / ($5>>>0))&-1;
    $8 = (($$0217>>>0) % ($5>>>0))&-1;
    $9 = (($$0118) + 12|0);
    $10 = (($9) + ($7<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $13 = (_sqlite3BitvecCreate($5)|0);
     HEAP32[$10>>2] = $13;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$0 = 7;
      label = 20;
      break;
     } else {
      $16 = $13;
     }
    } else {
     $16 = $11;
    }
    $15 = HEAP32[$16>>2]|0;
    $17 = ($15>>>0)>(4000);
    if ($17) {
     $$0118 = $16;$$0217 = $8;$47 = $16;
    } else {
     $$0114 = $16;$$029 = $8;
     break L4;
    }
   }
   if ((label|0) == 20) {
    STACKTOP = sp;return ($$0|0);
   }
   $27 = (($$0217) + 1)|0;
   $28 = (($$0217>>>0) % 125)&-1;
   $29 = (($$0118) + 12|0);
   $30 = ((($$0118) + ($28<<2)|0) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   do {
    if ($32) {
     $33 = (($$0118) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34>>>0)<(124);
     if ($35) {
      $59 = $34;$h$2 = $28;
      label = 19;
     }
    } else {
     $37 = $31;$h$0 = $28;
     while(1) {
      $36 = ($37|0)==($27|0);
      if ($36) {
       $$0 = 0;
       label = 20;
       break;
      }
      $38 = (($h$0) + 1)|0;
      $39 = ($38>>>0)>(124);
      $$ = $39 ? 0 : $38;
      $40 = ((($$0118) + ($$<<2)|0) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(0);
      if ($42) {
       label = 12;
       break;
      } else {
       $37 = $41;$h$0 = $$;
      }
     }
     if ((label|0) == 12) {
      $$phi$trans$insert = (($$0118) + 4|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $43 = ($$pre>>>0)>(61);
      if ($43) {
       break;
      } else {
       $59 = $$pre;$h$2 = $$;
       label = 19;
       break;
      }
     }
     else if ((label|0) == 20) {
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 19) {
    $57 = (($$0118) + 4|0);
    $58 = (($59) + 1)|0;
    HEAP32[$57>>2] = $58;
    $60 = ((($$0118) + ($h$2<<2)|0) + 12|0);
    HEAP32[$60>>2] = $27;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $44 = (_sqlite3DbMallocRaw(0,500)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   }
   _memcpy(($44|0),($29|0),500)|0;
   _memset(($29|0),0,500)|0;
   $46 = HEAP32[$47>>2]|0;
   $48 = (($46) + 124)|0;
   $49 = (($48>>>0) / 125)&-1;
   HEAP32[$4>>2] = $49;
   $50 = (_sqlite3BitvecSet($$0118,$27)|0);
   $j$03 = 0;$rc$04 = $50;
   while(1) {
    $51 = (($44) + ($j$03<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if ($53) {
     $rc$1 = $rc$04;
    } else {
     $54 = (_sqlite3BitvecSet($$0118,$52)|0);
     $55 = $54 | $rc$04;
     $rc$1 = $55;
    }
    $56 = (($j$03) + 1)|0;
    $exitcond = ($56|0)==(125);
    if ($exitcond) {
     break;
    } else {
     $j$03 = $56;$rc$04 = $rc$1;
    }
   }
   _sqlite3DbFree(0,$44);
   $$0 = $rc$1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$0114 = $p;$$029 = $1;
  }
 } while(0);
 $18 = $$029 & 7;
 $19 = 1 << $18;
 $20 = $$029 >>> 3;
 $21 = (($$0114) + 12|0);
 $22 = (($21) + ($20)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 | $19;
 $26 = $25&255;
 HEAP8[$22>>0] = $26;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BitvecClear($p,$i,$pBuf) {
 $p = $p|0;
 $i = $i|0;
 $pBuf = $pBuf|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $h$02 = 0, $j$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($i) + -1)|0;
 $$0 = $p;$$01 = $1;
 while(1) {
  $2 = (($$0) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   break;
  }
  $5 = (($$01>>>0) / ($3>>>0))&-1;
  $6 = (($$01>>>0) % ($3>>>0))&-1;
  $7 = (($$0) + 12|0);
  $8 = (($7) + ($5<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 13;
   break;
  } else {
   $$0 = $9;$$01 = $6;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$$0>>2]|0;
 $12 = ($11>>>0)<(4001);
 if ($12) {
  $13 = $$01 & 7;
  $14 = 1 << $13;
  $15 = $14 ^ 255;
  $16 = $$01 >>> 3;
  $17 = (($$0) + 12|0);
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 & $15;
  $22 = $21&255;
  HEAP8[$18>>0] = $22;
  STACKTOP = sp;return;
 }
 $23 = (($$0) + 12|0);
 _memcpy(($pBuf|0),($23|0),500)|0;
 _memset(($23|0),0,500)|0;
 $24 = (($$0) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = (($$01) + 1)|0;
 $j$03 = 0;
 while(1) {
  $26 = (($pBuf) + ($j$03<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  $29 = ($27|0)==($25|0);
  $or$cond = $28 | $29;
  if (!($or$cond)) {
   $30 = (($27) + -1)|0;
   $31 = (($30>>>0) % 125)&-1;
   $32 = HEAP32[$24>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$24>>2] = $33;
   $34 = ((($$0) + ($31<<2)|0) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$lcssa = $34;
   } else {
    $h$02 = $31;
    while(1) {
     $37 = (($h$02) + 1)|0;
     $38 = ($37>>>0)>(124);
     $$ = $38 ? 0 : $37;
     $39 = ((($$0) + ($$<<2)|0) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0);
     if ($41) {
      $$lcssa = $39;
      break;
     } else {
      $h$02 = $$;
     }
    }
   }
   $42 = HEAP32[$26>>2]|0;
   HEAP32[$$lcssa>>2] = $42;
  }
  $43 = (($j$03) + 1)|0;
  $exitcond = ($43|0)==(125);
  if ($exitcond) {
   break;
  } else {
   $j$03 = $43;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3BitvecTest($p,$i) {
 $p = $p|0;
 $i = $i|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0 = 0;
 var $h$04 = 0, $h$05 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = ($1>>>0)<($i>>>0);
 $3 = ($i|0)==(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($i) + -1)|0;
 $$02 = $4;$$03 = $p;
 while(1) {
  $5 = (($$03) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  }
  $8 = (($$02>>>0) / ($6>>>0))&-1;
  $9 = (($$02>>>0) % ($6>>>0))&-1;
  $10 = (($$03) + 12|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 0;
   label = 11;
   break;
  } else {
   $$02 = $9;$$03 = $12;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$$03>>2]|0;
 $15 = ($14>>>0)<(4001);
 if ($15) {
  $16 = $$02 >>> 3;
  $17 = (($$03) + 12|0);
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $$02 & 7;
  $22 = 1 << $21;
  $23 = $20 & $22;
  $24 = ($23|0)!=(0);
  $25 = $24&1;
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($$02) + 1)|0;
 $h$04 = (($$02>>>0) % 125)&-1;
 $27 = ((($$03) + ($h$04<<2)|0) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $35 = $28;$h$05 = $h$04;
 }
 while(1) {
  $34 = ($35|0)==($26|0);
  if ($34) {
   $$0 = 1;
   label = 11;
   break;
  }
  $30 = (($h$05) + 1)|0;
  $h$0 = (($30>>>0) % 125)&-1;
  $31 = ((($$03) + ($h$0<<2)|0) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $$0 = 0;
   label = 11;
   break;
  } else {
   $35 = $32;$h$05 = $h$0;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3BitvecSize($p$0$0$val) {
 $p$0$0$val = $p$0$0$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($p$0$0$val|0);
}
function _sqlite3BitvecDestroy($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($p) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($p) + 12|0);
  $i$01 = 0;
  while(1) {
   $5 = (($4) + ($i$01<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   _sqlite3BitvecDestroy($6);
   $7 = (($i$01) + 1)|0;
   $exitcond = ($7|0)==(125);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $7;
   }
  }
 }
 _sqlite3_free($p);
 STACKTOP = sp;return;
}
function _sqlite3FindCollSeq($db,$enc,$zName,$create) {
 $db = $db|0;
 $enc = $enc|0;
 $zName = $zName|0;
 $create = $create|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pColl$0 = 0, $pColl$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($zName|0)==(0|0);
 if ($0) {
  $2 = (($db) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $pColl$0 = $3;
 } else {
  $1 = (_findCollSeqEntry($db,$zName,$create)|0);
  $pColl$0 = $1;
 }
 $4 = ($pColl$0|0)==(0|0);
 if ($4) {
  $pColl$1 = 0;
  STACKTOP = sp;return ($pColl$1|0);
 }
 $5 = $enc&255;
 $6 = (($5) + -1)|0;
 $7 = (($pColl$0) + (($6*20)|0)|0);
 $pColl$1 = $7;
 STACKTOP = sp;return ($pColl$1|0);
}
function _invalidateCachedKeyInfo($db) {
 $db = $db|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDb$08 = 0, $k$0 = 0, $k$04 = 0, $k$05 = 0, $pDb$09 = 0, $pIdx$0 = 0;
 var $pIdx$02 = 0, $pIdx$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($db) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $29 = $1;$iDb$08 = 0;$pDb$09 = $4;
 while(1) {
  $5 = (($pDb$09) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $28 = $29;
  } else {
   $$idx$val = HEAP32[$6>>2]|0;
   $$idx1 = (($6) + 4|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   _sqlite3BtreeEnter($$idx$val,$$idx1$val);
   $8 = (($pDb$09) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 16|0);
   $k$04 = HEAP32[$10>>2]|0;
   $11 = ($k$04|0)==(0|0);
   if (!($11)) {
    $k$05 = $k$04;
    while(1) {
     $12 = (($k$05) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($13) + 8|0);
     $pIdx$02 = HEAP32[$14>>2]|0;
     $15 = ($pIdx$02|0)==(0|0);
     if (!($15)) {
      $pIdx$03 = $pIdx$02;
      while(1) {
       $16 = (($pIdx$03) + 40|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)==(0|0);
       if (!($18)) {
        $19 = (($17) + 12|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($20|0)==($db|0);
        if ($21) {
         _sqlite3KeyInfoUnref($17);
         HEAP32[$16>>2] = 0;
        }
       }
       $22 = (($pIdx$03) + 20|0);
       $pIdx$0 = HEAP32[$22>>2]|0;
       $23 = ($pIdx$0|0)==(0|0);
       if ($23) {
        break;
       } else {
        $pIdx$03 = $pIdx$0;
       }
      }
     }
     $k$0 = HEAP32[$k$05>>2]|0;
     $24 = ($k$0|0)==(0|0);
     if ($24) {
      break;
     } else {
      $k$05 = $k$0;
     }
    }
   }
   $$pre = HEAP32[$0>>2]|0;
   $28 = $$pre;
  }
  $25 = (($iDb$08) + 1)|0;
  $26 = (($pDb$09) + 16|0);
  $27 = ($25|0)<($28|0);
  if ($27) {
   $29 = $28;$iDb$08 = $25;$pDb$09 = $26;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3HashFind($pH,$pKey,$nKey) {
 $pH = $pH|0;
 $pKey = $pKey|0;
 $nKey = $nKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pH) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $h$0 = 0;
 } else {
  $3 = (_strHash($pKey,$nKey)|0);
  $4 = HEAP32[$pH>>2]|0;
  $5 = (($3>>>0) % ($4>>>0))&-1;
  $h$0 = $5;
 }
 $6 = (_findElementGivenHash($pH,$pKey,$nKey,$h$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $8 = (($6) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _strHash($z,$nKey) {
 $z = $z|0;
 $nKey = $nKey|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$lcssa = 0, $h$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nKey|0)>(0);
 if ($0) {
  $$012 = $z;$$03 = $nKey;$h$04 = 0;
 } else {
  $h$0$lcssa = 0;
  STACKTOP = sp;return ($h$0$lcssa|0);
 }
 while(1) {
  $1 = $h$04 << 3;
  $2 = $1 ^ $h$04;
  $3 = (($$012) + 1|0);
  $4 = HEAP8[$$012>>0]|0;
  $5 = $4&255;
  $6 = (960 + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $2 ^ $8;
  $10 = (($$03) + -1)|0;
  $11 = ($10|0)>(0);
  if ($11) {
   $$012 = $3;$$03 = $10;$h$04 = $9;
  } else {
   $h$0$lcssa = $9;
   break;
  }
 }
 STACKTOP = sp;return ($h$0$lcssa|0);
}
function _findElementGivenHash($pH,$pKey,$nKey,$h) {
 $pH = $pH|0;
 $pKey = $pKey|0;
 $nKey = $nKey|0;
 $h = $h|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $count$0$ph = 0, $count$0$ph$in = 0, $elem$0 = 0, $elem$0$in$ph = 0, $elem$01 = 0, $elem$03 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pH) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = (($pH) + 8|0);
  $6 = (($pH) + 4|0);
  $count$0$ph$in = $6;$elem$0$in$ph = $5;
 } else {
  $3 = ((($1) + ($h<<3)|0) + 4|0);
  $4 = (($1) + ($h<<3)|0);
  $count$0$ph$in = $4;$elem$0$in$ph = $3;
 }
 $count$0$ph = HEAP32[$count$0$ph$in>>2]|0;
 $elem$01 = HEAP32[$elem$0$in$ph>>2]|0;
 $7 = ($count$0$ph|0)==(0);
 $8 = ($elem$01|0)==(0|0);
 $or$cond2 = $7 | $8;
 if ($or$cond2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$in = $count$0$ph;$elem$03 = $elem$01;
 }
 while(1) {
  $9 = (($$in) + -1)|0;
  $10 = (($elem$03) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($nKey|0);
  if ($12) {
   $13 = (($elem$03) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_sqlite3_strnicmp($14,$pKey,$nKey)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = $elem$03;
    label = 8;
    break;
   }
  }
  $elem$0 = HEAP32[$elem$03>>2]|0;
  $17 = ($9|0)==(0);
  $18 = ($elem$0|0)==(0|0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$in = $9;$elem$03 = $elem$0;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3KeyInfoUnref($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$p>>2]|0;
  $2 = (($1) + -1)|0;
  HEAP32[$p>>2] = $2;
  $3 = ($2|0)==(0);
  if ($3) {
   _sqlite3DbFree(0,$p);
  }
 }
 STACKTOP = sp;return;
}
function _findCollSeqEntry($db,$zName,$create) {
 $db = $db|0;
 $zName = $zName|0;
 $create = $create|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $pColl$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = (($db) + 420|0);
 $2 = (_sqlite3HashFind($1,$zName,$0)|0);
 $3 = ($2|0)!=(0|0);
 $4 = ($create|0)==(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $pColl$0 = $2;
  STACKTOP = sp;return ($pColl$0|0);
 }
 $5 = (($0) + 61)|0;
 $6 = (_sqlite3DbMallocZero($db,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $pColl$0 = $6;
  STACKTOP = sp;return ($pColl$0|0);
 }
 $8 = (($6) + 60|0);
 HEAP32[$6>>2] = $8;
 $9 = (($6) + 4|0);
 HEAP8[$9>>0] = 1;
 $10 = (($6) + 20|0);
 HEAP32[$10>>2] = $8;
 $11 = (($6) + 24|0);
 HEAP8[$11>>0] = 2;
 $12 = (($6) + 40|0);
 HEAP32[$12>>2] = $8;
 $13 = (($6) + 44|0);
 HEAP8[$13>>0] = 3;
 _memcpy(($8|0),($zName|0),($0|0))|0;
 $$sum = (($0) + 60)|0;
 $14 = (($6) + ($$sum)|0);
 HEAP8[$14>>0] = 0;
 $15 = HEAP32[$6>>2]|0;
 $16 = (_sqlite3HashInsert($1,$15,$0,$6)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $pColl$0 = $6;
  STACKTOP = sp;return ($pColl$0|0);
 }
 $18 = (($db) + 64|0);
 HEAP8[$18>>0] = 1;
 _sqlite3DbFree($db,$16);
 $pColl$0 = 0;
 STACKTOP = sp;return ($pColl$0|0);
}
function _sqlite3HashInsert($pH,$pKey,$nKey,$data) {
 $pH = $pH|0;
 $pKey = $pKey|0;
 $nKey = $nKey|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0 = 0, $h$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pH>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $h$0 = 0;
 } else {
  $2 = (_strHash($pKey,$nKey)|0);
  $3 = (($2>>>0) % ($0>>>0))&-1;
  $h$0 = $3;
 }
 $4 = (_findElementGivenHash($pH,$pKey,$nKey,$h$0)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (($4) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($data|0)==(0|0);
  if ($8) {
   _removeElementGivenHash($pH,$4,$h$0);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  } else {
   HEAP32[$6>>2] = $data;
   $9 = (($4) + 12|0);
   HEAP32[$9>>2] = $pKey;
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = ($data|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_sqlite3Malloc(20)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = $data;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($11) + 12|0);
 HEAP32[$13>>2] = $pKey;
 $14 = (($11) + 16|0);
 HEAP32[$14>>2] = $nKey;
 $15 = (($11) + 8|0);
 HEAP32[$15>>2] = $data;
 $16 = (($pH) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $19 = ($18>>>0)>(9);
 if ($19) {
  $20 = HEAP32[$pH>>2]|0;
  $21 = $20 << 1;
  $22 = ($18>>>0)>($21>>>0);
  if ($22) {
   $23 = $18 << 1;
   $24 = (_rehash($pH,$23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $h$1 = $h$0;
   } else {
    $26 = (_strHash($pKey,$nKey)|0);
    $27 = HEAP32[$pH>>2]|0;
    $28 = (($26>>>0) % ($27>>>0))&-1;
    $h$1 = $28;
   }
  } else {
   $h$1 = $h$0;
  }
 } else {
  $h$1 = $h$0;
 }
 $29 = (($pH) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  _insertElement($pH,0,$11);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $32 = (($30) + ($h$1<<3)|0);
  _insertElement($pH,$32,$11);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _removeElementGivenHash($pH,$elem,$h) {
 $pH = $pH|0;
 $elem = $elem|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($elem) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = HEAP32[$elem>>2]|0;
 if ($2) {
  $4 = (($pH) + 8|0);
  HEAP32[$4>>2] = $3;
 } else {
  HEAP32[$1>>2] = $3;
 }
 $5 = HEAP32[$elem>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($5) + 4|0);
  HEAP32[$8>>2] = $7;
 }
 $9 = (($pH) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($10) + ($h<<3)|0) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($elem|0);
  if ($14) {
   $15 = HEAP32[$elem>>2]|0;
   HEAP32[$12>>2] = $15;
  }
  $16 = (($10) + ($h<<3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
 }
 _sqlite3_free($elem);
 $19 = (($pH) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -1)|0;
 HEAP32[$19>>2] = $21;
 $22 = ($21|0)==(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 _sqlite3HashClear($pH);
 STACKTOP = sp;return;
}
function _rehash($pH,$new_size) {
 $pH = $pH|0;
 $new_size = $new_size|0;
 var $$0 = 0, $$new_size = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $new_size << 3;
 $1 = ($0>>>0)>(1024);
 $$new_size = $1 ? 128 : $new_size;
 $2 = HEAP32[$pH>>2]|0;
 $3 = ($$new_size|0)==($2|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3BeginBenignMalloc();
 $4 = $$new_size << 3;
 $5 = (_sqlite3Malloc($4)|0);
 _sqlite3EndBenignMalloc();
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pH) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _sqlite3_free($8);
 HEAP32[$7>>2] = $5;
 $9 = (_sqlite3MallocSize($5)|0);
 $10 = $9 >>> 3;
 HEAP32[$pH>>2] = $10;
 $11 = $10 << 3;
 _memset(($5|0),0,($11|0))|0;
 $12 = (($pH) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$12>>2] = 0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $elem$01 = $13;
 }
 while(1) {
  $15 = (($elem$01) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($elem$01) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strHash($16,$18)|0);
  $20 = (($19>>>0) % ($10>>>0))&-1;
  $21 = HEAP32[$elem$01>>2]|0;
  $22 = (($5) + ($20<<3)|0);
  _insertElement($pH,$22,$elem$01);
  $23 = ($21|0)==(0|0);
  if ($23) {
   $$0 = 1;
   break;
  } else {
   $elem$01 = $21;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _insertElement($pH,$pEntry,$pNew) {
 $pH = $pH|0;
 $pEntry = $pEntry|0;
 $pNew = $pNew|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pEntry|0)==(0|0);
 do {
  if (!($0)) {
   $1 = HEAP32[$pEntry>>2]|0;
   $2 = ($1|0)==(0);
   if ($2) {
    HEAP32[$pEntry>>2] = 1;
    $3 = (($pEntry) + 4|0);
    HEAP32[$3>>2] = $pNew;
    break;
   }
   $4 = (($pEntry) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($1) + 1)|0;
   HEAP32[$pEntry>>2] = $6;
   HEAP32[$4>>2] = $pNew;
   $7 = ($5|0)==(0|0);
   if (!($7)) {
    HEAP32[$pNew>>2] = $5;
    $8 = (($5) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($pNew) + 4|0);
    HEAP32[$10>>2] = $9;
    $11 = HEAP32[$8>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $13 = (($pH) + 8|0);
     HEAP32[$13>>2] = $pNew;
    } else {
     HEAP32[$11>>2] = $pNew;
    }
    HEAP32[$8>>2] = $pNew;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = (($pH) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$pNew>>2] = $15;
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = (($16) + 4|0);
  HEAP32[$18>>2] = $pNew;
 }
 $19 = (($pNew) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$14>>2] = $pNew;
 STACKTOP = sp;return;
}
function _sqlite3BeginBenignMalloc() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3472>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_v[$0 & 7]();
 }
 STACKTOP = sp;return;
}
function _sqlite3EndBenignMalloc() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3480>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  FUNCTION_TABLE_v[$0 & 7]();
 }
 STACKTOP = sp;return;
}
function _sqlite3HashClear($pH) {
 $pH = $pH|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $elem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pH) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $2 = (($pH) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 _sqlite3_free($3);
 HEAP32[$2>>2] = 0;
 HEAP32[$pH>>2] = 0;
 $4 = ($1|0)==(0|0);
 if ($4) {
  $7 = (($pH) + 4|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $elem$01 = $1;
 }
 while(1) {
  $5 = HEAP32[$elem$01>>2]|0;
  _sqlite3_free($elem$01);
  $6 = ($5|0)==(0|0);
  if ($6) {
   break;
  } else {
   $elem$01 = $5;
  }
 }
 $7 = (($pH) + 4|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3HashInit($pNew) {
 $pNew = $pNew|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$pNew+0>>2]=0|0;HEAP32[$pNew+4>>2]=0|0;HEAP32[$pNew+8>>2]=0|0;HEAP32[$pNew+12>>2]=0|0;
 STACKTOP = sp;return;
}
function _binCollFunc($padFlag,$nKey1,$pKey1,$nKey2,$pKey2) {
 $padFlag = $padFlag|0;
 $nKey1 = $nKey1|0;
 $pKey1 = $pKey1|0;
 $nKey2 = $nKey2|0;
 $pKey2 = $pKey2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nKey1|0)<($nKey2|0);
 $1 = $0 ? $nKey1 : $nKey2;
 $2 = (_memcmp($pKey1,$pKey2,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $rc$0 = $2;
  STACKTOP = sp;return ($rc$0|0);
 }
 $4 = ($padFlag|0)==(0|0);
 if (!($4)) {
  $5 = (($pKey1) + ($1)|0);
  $6 = (($nKey1) - ($1))|0;
  $7 = (_allSpaces($5,$6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = (($pKey2) + ($1)|0);
   $10 = (($nKey2) - ($1))|0;
   $11 = (_allSpaces($9,$10)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $rc$0 = 0;
    STACKTOP = sp;return ($rc$0|0);
   }
  }
 }
 $13 = (($nKey1) - ($nKey2))|0;
 $rc$0 = $13;
 STACKTOP = sp;return ($rc$0|0);
}
function _nocaseCollatingFunc($NotUsed,$nKey1,$pKey1,$nKey2,$pKey2) {
 $NotUsed = $NotUsed|0;
 $nKey1 = $nKey1|0;
 $pKey1 = $pKey1|0;
 $nKey2 = $nKey2|0;
 $pKey2 = $pKey2|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nKey1|0)<($nKey2|0);
 $1 = $0 ? $nKey1 : $nKey2;
 $2 = (_sqlite3_strnicmp($pKey1,$pKey2,$1)|0);
 $3 = ($2|0)==(0);
 $4 = (($nKey1) - ($nKey2))|0;
 $$ = $3 ? $4 : $2;
 STACKTOP = sp;return ($$|0);
}
function _sqlite3ParseUri($zDefaultVfs,$zUri,$pFlags,$ppVfs,$pzFile,$pzErrMsg) {
 $zDefaultVfs = $zDefaultVfs|0;
 $zUri = $zUri|0;
 $pFlags = $pFlags|0;
 $ppVfs = $ppVfs|0;
 $pzFile = $pzFile|0;
 $pzErrMsg = $pzErrMsg|0;
 var $$0 = 0, $$old = 0, $$old14 = 0, $$old16 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$zVfs$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aMode$127$ph = 0, $c$0 = 0, $eState$0$ph70 = 0, $eState$0$ph70$ph = 0, $eState$0$ph70$phi = 0, $eState$2 = 0, $exitcond = 0, $flags$064 = 0, $flags$1 = 0, $flags$2 = 0, $flags$3$ph = 0;
 var $flags$336 = 0, $i$042 = 0, $iIn$092 = 0, $iIn$1 = 0, $iIn$3 = 0, $iIn$3$ph71 = 0, $iIn$3$ph71$ph = 0, $iIn$4 = 0, $iIn$5 = 0, $iIn$6 = 0, $iOut$0$ph$ph = 0, $iOut$2 = 0, $iOut$3 = 0, $limit$130$ph = 0, $mask$129$ph = 0, $nByte$0$lcssa = 0, $nByte$093 = 0, $or$cond = 0, $or$cond10 = 0, $rc$0$ph = 0;
 var $rc$038 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $zFile$0 = 0, $zFile$1$ph = 0, $zFile$2 = 0, $zModeType$128$ph = 0, $zOpt$062 = 0, $zVfs$063 = 0, $zVfs$1 = 0, $zVfs$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pFlags>>2]|0;
 $1 = (_sqlite3Strlen30($zUri)|0);
 $2 = $0 & 64;
 $3 = HEAP32[((384 + 12|0))>>2]|0;
 $4 = $3 | $2;
 $5 = ($4|0)!=(0);
 $6 = ($1|0)>(4);
 $or$cond = $5 & $6;
 L1: do {
  if ($or$cond) {
   $7 = (_memcmp($zUri,4808,5)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (($1) + 2)|0;
    $10 = $0 | 64;
    $11 = ($1|0)>(0);
    if ($11) {
     $iIn$092 = 0;$nByte$093 = $9;
     while(1) {
      $12 = (($zUri) + ($iIn$092)|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = ($13<<24>>24)==(38);
      $15 = $14&1;
      $16 = (($15) + ($nByte$093))|0;
      $17 = (($iIn$092) + 1)|0;
      $exitcond = ($17|0)==($1|0);
      if ($exitcond) {
       $nByte$0$lcssa = $16;
       break;
      } else {
       $iIn$092 = $17;$nByte$093 = $16;
      }
     }
    } else {
     $nByte$0$lcssa = $9;
    }
    $18 = (_sqlite3_malloc($nByte$0$lcssa)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     $$0 = 7;
     STACKTOP = sp;return ($$0|0);
    }
    $20 = (($zUri) + 5|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(47);
    do {
     if ($22) {
      $23 = (($zUri) + 6|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(47);
      if ($25) {
       $iIn$1 = 7;
       while(1) {
        $26 = (($zUri) + ($iIn$1)|0);
        $27 = HEAP8[$26>>0]|0;
        if ((($27<<24>>24) == 0) | (($27<<24>>24) == 47)) {
         break;
        }
        $28 = (($iIn$1) + 1)|0;
        $iIn$1 = $28;
       }
       if ((($iIn$1|0) == 16)) {
        $29 = (($zUri) + 7|0);
        $30 = (_memcmp(4816,$29,9)|0);
        $31 = ($30|0)==(0);
        if ($31) {
         $eState$0$ph70$ph = 0;$iIn$3$ph71$ph = 16;$iOut$0$ph$ph = 0;
         break;
        } else {
         $$pre$phiZ2D = $29;
        }
       } else if ((($iIn$1|0) == 7)) {
        $eState$0$ph70$ph = 0;$iIn$3$ph71$ph = 7;$iOut$0$ph$ph = 0;
        break;
       } else {
        $$pre = (($zUri) + 7|0);
        $$pre$phiZ2D = $$pre;
       }
       $32 = (($iIn$1) + -7)|0;
       HEAP32[$vararg_buffer>>2] = $32;
       $vararg_ptr1 = (($vararg_buffer) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $$pre$phiZ2D;
       $33 = (_sqlite3_mprintf(4832,$vararg_buffer)|0);
       HEAP32[$pzErrMsg>>2] = $33;
       $flags$3$ph = $10;$rc$0$ph = 1;$zFile$1$ph = $18;
       label = 63;
       break L1;
      } else {
       $eState$0$ph70$ph = 0;$iIn$3$ph71$ph = 5;$iOut$0$ph$ph = 0;
      }
     } else {
      $eState$0$ph70$ph = 0;$iIn$3$ph71$ph = 5;$iOut$0$ph$ph = 0;
     }
    } while(0);
    L21: while(1) {
     $84 = (($iOut$0$ph$ph) + -1)|0;
     $71 = (($18) + ($84)|0);
     $eState$0$ph70 = $eState$0$ph70$ph;$iIn$3$ph71 = $iIn$3$ph71$ph;
     L23: while(1) {
      $iIn$3 = $iIn$3$ph71;
      L25: while(1) {
       $34 = (($zUri) + ($iIn$3)|0);
       $35 = HEAP8[$34>>0]|0;
       if ((($35<<24>>24) == 35) | (($35<<24>>24) == 0)) {
        break L21;
       }
       $36 = (($iIn$3) + 1)|0;
       $37 = ($35<<24>>24)==(37);
       if ($37) {
        $38 = (($zUri) + ($36)|0);
        $39 = HEAP8[$38>>0]|0;
        $40 = $39&255;
        $41 = (48 + ($40)|0);
        $42 = HEAP8[$41>>0]|0;
        $43 = $42 & 8;
        $44 = ($43<<24>>24)==(0);
        if (!($44)) {
         $45 = (($iIn$3) + 2)|0;
         $46 = (($zUri) + ($45)|0);
         $47 = HEAP8[$46>>0]|0;
         $48 = $47&255;
         $49 = (48 + ($48)|0);
         $50 = HEAP8[$49>>0]|0;
         $51 = $50 & 8;
         $52 = ($51<<24>>24)==(0);
         if (!($52)) {
          break;
         }
        }
       }
       if ((($eState$0$ph70|0) == 0)) {
        label = 36;
        break L23;
       } else if ((($eState$0$ph70|0) == 2)) {
        label = 37;
        break L23;
       } else if (!((($eState$0$ph70|0) == 1))) {
        $c$0 = $35;$eState$2 = $eState$0$ph70;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
        break L23;
       }
       $69 = ($35<<24>>24)==(38);
       if (!((($35<<24>>24) == 38) | (($35<<24>>24) == 61))) {
        $c$0 = $35;$eState$2 = 1;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
        break L23;
       }
       $70 = HEAP8[$71>>0]|0;
       $72 = ($70<<24>>24)==(0);
       if ($72) {
        $iIn$5 = $36;
       } else {
        label = 34;
        break L23;
       }
       while(1) {
        $73 = (($zUri) + ($iIn$5)|0);
        $74 = HEAP8[$73>>0]|0;
        if ((($74<<24>>24) == 35) | (($74<<24>>24) == 0)) {
         $iIn$3 = $iIn$5;
         continue L25;
        }
        $75 = (($iIn$5) + -1)|0;
        $76 = (($zUri) + ($75)|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($77<<24>>24)==(38);
        if ($78) {
         $iIn$3 = $iIn$5;
         continue L25;
        }
        $79 = (($iIn$5) + 1)|0;
        $iIn$5 = $79;
       }
      }
      $53 = $39 << 24 >> 24;
      $54 = (_sqlite3HexToInt($53)|0);
      $55 = $54&255;
      $56 = $55 << 4;
      $57 = (($iIn$3) + 3)|0;
      $58 = $47 << 24 >> 24;
      $59 = (_sqlite3HexToInt($58)|0);
      $60 = $59&255;
      $61 = (($56) + ($60))|0;
      $62 = ($61|0)==(0);
      if (!($62)) {
       label = 27;
       break;
      }
      $63 = ($eState$0$ph70|0)==(0);
      $iIn$4 = $57;
      while(1) {
       $64 = (($zUri) + ($iIn$4)|0);
       $65 = HEAP8[$64>>0]|0;
       if ((($65<<24>>24) == 35) | (($65<<24>>24) == 0)) {
        $eState$0$ph70$phi = $eState$0$ph70;$iIn$3$ph71 = $iIn$4;$eState$0$ph70 = $eState$0$ph70$phi;
        continue L23;
       }
       $66 = ($65<<24>>24)==(63);
       $or$cond10 = $63 & $66;
       if ($or$cond10) {
        $eState$0$ph70 = 0;$iIn$3$ph71 = $iIn$4;
        continue L23;
       }
       if ((($eState$0$ph70|0) == 1)) {
        if ((($65<<24>>24) == 38) | (($65<<24>>24) == 61)) {
         $eState$0$ph70 = 1;$iIn$3$ph71 = $iIn$4;
         continue L23;
        }
       } else if ((($eState$0$ph70|0) == 2)) {
        $$old = ($65<<24>>24)==(38);
        if ($$old) {
         $eState$0$ph70 = 2;$iIn$3$ph71 = $iIn$4;
         continue L23;
        }
       }
       $67 = (($iIn$4) + 1)|0;
       $iIn$4 = $67;
      }
     }
     if ((label|0) == 27) {
      label = 0;
      $68 = $61&255;
      $c$0 = $68;$eState$2 = $eState$0$ph70;$iIn$6 = $57;$iOut$2 = $iOut$0$ph$ph;
     }
     else if ((label|0) == 34) {
      label = 0;
      if ($69) {
       $80 = (($iOut$0$ph$ph) + 1)|0;
       $81 = (($18) + ($iOut$0$ph$ph)|0);
       HEAP8[$81>>0] = 0;
       $c$0 = 0;$eState$2 = 1;$iIn$6 = $36;$iOut$2 = $80;
      } else {
       $c$0 = 0;$eState$2 = 2;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
      }
     }
     else if ((label|0) == 36) {
      label = 0;
      $$old14 = ($35<<24>>24)==(63);
      if ($$old14) {
       label = 38;
      } else {
       $c$0 = $35;$eState$2 = 0;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
      }
     }
     else if ((label|0) == 37) {
      label = 0;
      $$old16 = ($35<<24>>24)==(38);
      if ($$old16) {
       label = 38;
      } else {
       $c$0 = $35;$eState$2 = 2;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
      }
     }
     if ((label|0) == 38) {
      label = 0;
      $c$0 = 0;$eState$2 = 1;$iIn$6 = $36;$iOut$2 = $iOut$0$ph$ph;
     }
     $82 = (($iOut$2) + 1)|0;
     $83 = (($18) + ($iOut$2)|0);
     HEAP8[$83>>0] = $c$0;
     $eState$0$ph70$ph = $eState$2;$iIn$3$ph71$ph = $iIn$6;$iOut$0$ph$ph = $82;
    }
    $85 = ($eState$0$ph70|0)==(1);
    if ($85) {
     $86 = (($iOut$0$ph$ph) + 1)|0;
     $87 = (($18) + ($iOut$0$ph$ph)|0);
     HEAP8[$87>>0] = 0;
     $iOut$3 = $86;
    } else {
     $iOut$3 = $iOut$0$ph$ph;
    }
    $88 = (($iOut$3) + 1)|0;
    $89 = (($18) + ($iOut$3)|0);
    HEAP8[$89>>0] = 0;
    $90 = (($18) + ($88)|0);
    HEAP8[$90>>0] = 0;
    $91 = (_sqlite3Strlen30($18)|0);
    $92 = (($91) + 1)|0;
    $93 = (($18) + ($92)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = ($94<<24>>24)==(0);
    if ($95) {
     $flags$2 = $10;$zFile$0 = $18;$zVfs$2 = $zDefaultVfs;
     label = 61;
    } else {
     $flags$064 = $10;$zOpt$062 = $93;$zVfs$063 = $zDefaultVfs;
     L61: while(1) {
      $96 = (_sqlite3Strlen30($zOpt$062)|0);
      $97 = (($96) + 1)|0;
      $98 = (($zOpt$062) + ($97)|0);
      $99 = (_sqlite3Strlen30($98)|0);
      if ((($96|0) == 3)) {
       $100 = (_memcmp(4864,$zOpt$062,3)|0);
       $101 = ($100|0)==(0);
       $$zVfs$0 = $101 ? $98 : $zVfs$063;
       $flags$1 = $flags$064;$zVfs$1 = $$zVfs$0;
      } else if ((($96|0) == 5)) {
       $102 = (_memcmp(4872,$zOpt$062,5)|0);
       $103 = ($102|0)==(0);
       if ($103) {
        $aMode$127$ph = 4880;$limit$130$ph = 393216;$mask$129$ph = -393217;$zModeType$128$ph = 4872;
        label = 49;
       } else {
        $flags$1 = $flags$064;$zVfs$1 = $zVfs$063;
       }
      } else if ((($96|0) == 4)) {
       $104 = (_memcmp(4920,$zOpt$062,4)|0);
       $105 = ($104|0)==(0);
       if ($105) {
        $106 = $flags$064 & 135;
        $aMode$127$ph = 4928;$limit$130$ph = $106;$mask$129$ph = -136;$zModeType$128$ph = 5000;
        label = 49;
       } else {
        $flags$1 = $flags$064;$zVfs$1 = $zVfs$063;
       }
      } else {
       $flags$1 = $flags$064;$zVfs$1 = $zVfs$063;
      }
      if ((label|0) == 49) {
       label = 0;
       $107 = HEAP32[$aMode$127$ph>>2]|0;
       $108 = ($107|0)==(0|0);
       if ($108) {
        label = 54;
        break;
       } else {
        $109 = $107;$i$042 = 0;
       }
       while(1) {
        $110 = (_sqlite3Strlen30($109)|0);
        $111 = ($99|0)==($110|0);
        if ($111) {
         $112 = (_memcmp($98,$109,$99)|0);
         $113 = ($112|0)==(0);
         if ($113) {
          break;
         }
        }
        $114 = (($i$042) + 1)|0;
        $115 = (($aMode$127$ph) + ($114<<3)|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ($116|0)==(0|0);
        if ($117) {
         label = 54;
         break L61;
        } else {
         $109 = $116;$i$042 = $114;
        }
       }
       $118 = ((($aMode$127$ph) + ($i$042<<3)|0) + 4|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0);
       if ($120) {
        label = 54;
        break;
       }
       $122 = $119 & -129;
       $123 = ($122|0)>($limit$130$ph|0);
       if ($123) {
        label = 56;
        break;
       }
       $125 = $mask$129$ph & $flags$064;
       $126 = $119 | $125;
       $flags$1 = $126;$zVfs$1 = $zVfs$063;
      }
      $127 = (($99) + 1)|0;
      $$sum = (($127) + ($97))|0;
      $128 = (($zOpt$062) + ($$sum)|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = ($129<<24>>24)==(0);
      if ($130) {
       $flags$2 = $flags$1;$zFile$0 = $18;$zVfs$2 = $zVfs$1;
       label = 61;
       break L1;
      } else {
       $flags$064 = $flags$1;$zOpt$062 = $128;$zVfs$063 = $zVfs$1;
      }
     }
     if ((label|0) == 54) {
      HEAP32[$vararg_buffer2>>2] = $zModeType$128$ph;
      $vararg_ptr5 = (($vararg_buffer2) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $98;
      $121 = (_sqlite3_mprintf(5008,$vararg_buffer2)|0);
      HEAP32[$pzErrMsg>>2] = $121;
      $flags$3$ph = $flags$064;$rc$0$ph = 1;$zFile$1$ph = $18;
      label = 63;
      break;
     }
     else if ((label|0) == 56) {
      HEAP32[$vararg_buffer6>>2] = $zModeType$128$ph;
      $vararg_ptr9 = (($vararg_buffer6) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $98;
      $124 = (_sqlite3_mprintf(5032,$vararg_buffer6)|0);
      HEAP32[$pzErrMsg>>2] = $124;
      $flags$3$ph = $flags$064;$rc$0$ph = 3;$zFile$1$ph = $18;
      label = 63;
      break;
     }
    }
   } else {
    label = 59;
   }
  } else {
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   $131 = (($1) + 2)|0;
   $132 = (_sqlite3_malloc($131)|0);
   $133 = ($132|0)==(0|0);
   if ($133) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    _memcpy(($132|0),($zUri|0),($1|0))|0;
    $134 = (($132) + ($1)|0);
    HEAP8[$134>>0] = 0;
    $135 = (($1) + 1)|0;
    $136 = (($132) + ($135)|0);
    HEAP8[$136>>0] = 0;
    $137 = $0 & -65;
    $flags$2 = $137;$zFile$0 = $132;$zVfs$2 = $zDefaultVfs;
    label = 61;
    break;
   }
  }
 } while(0);
 if ((label|0) == 61) {
  $138 = (_sqlite3_vfs_find($zVfs$2)|0);
  HEAP32[$ppVfs>>2] = $138;
  $139 = ($138|0)==(0|0);
  if ($139) {
   HEAP32[$vararg_buffer10>>2] = $zVfs$2;
   $140 = (_sqlite3_mprintf(5056,$vararg_buffer10)|0);
   HEAP32[$pzErrMsg>>2] = $140;
   $flags$3$ph = $flags$2;$rc$0$ph = 1;$zFile$1$ph = $zFile$0;
   label = 63;
  } else {
   $flags$336 = $flags$2;$rc$038 = 0;$zFile$2 = $zFile$0;
  }
 }
 if ((label|0) == 63) {
  _sqlite3_free($zFile$1$ph);
  $flags$336 = $flags$3$ph;$rc$038 = $rc$0$ph;$zFile$2 = 0;
 }
 HEAP32[$pFlags>>2] = $flags$336;
 HEAP32[$pzFile>>2] = $zFile$2;
 $$0 = $rc$038;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeOpen($pVfs,$zFilename,$db,$ppBtree,$flags,$vfsFlags) {
 $pVfs = $pVfs|0;
 $zFilename = $zFilename|0;
 $db = $db|0;
 $ppBtree = $ppBtree|0;
 $flags = $flags|0;
 $vfsFlags = $vfsFlags|0;
 var $$0 = 0, $$02 = 0, $$flags = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9$val = 0, $$not = 0, $$off = 0, $$old = 0, $$old3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge6 = 0, $db$idx = 0, $db$idx$val = 0;
 var $i$029 = 0, $iDb$031 = 0, $iDb$031$in = 0, $nReserve$0 = 0, $or$cond7 = 0, $pBt$0 = 0, $pBt$035 = 0, $pBt$036 = 0, $pSib$0 = 0, $pSib$1 = 0, $rc$41848 = 0, $rc$41849 = 0, $zDbHeader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $zDbHeader = sp;
 $0 = ($zFilename|0)==(0|0);
 if ($0) {
  $178 = 0;
  label = 4;
 } else {
  $1 = HEAP8[$zFilename>>0]|0;
  $2 = ($1<<24>>24)==(0);
  $3 = (_strcmp($zFilename,4440)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $10 = 1;$103 = 1;$13 = $2;
  } else {
   if ($2) {
    $178 = 1;
    label = 4;
   } else {
    $179 = 0;$180 = 1;
    label = 5;
   }
  }
 }
 if ((label|0) == 4) {
  $db$idx = (($db) + 63|0);
  $db$idx$val = HEAP8[$db$idx>>0]|0;
  $5 = (_sqlite3TempInMemory($db$idx$val)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $179 = 1;$180 = $178;
   label = 5;
  } else {
   $10 = 1;$103 = $178;$13 = 1;
  }
 }
 if ((label|0) == 5) {
  $7 = $vfsFlags & 128;
  $8 = ($7|0)!=(0);
  $10 = $8;$103 = $180;$13 = $179;
 }
 $9 = $flags | 2;
 $$flags = $10 ? $9 : $flags;
 $11 = $vfsFlags & 256;
 $12 = ($11|0)!=(0);
 $brmerge = $10 | $13;
 $or$cond7 = $12 & $brmerge;
 if ($or$cond7) {
  $14 = $vfsFlags & -769;
  $15 = $14 | 512;
  $$02 = $15;
 } else {
  $$02 = $vfsFlags;
 }
 $16 = (_sqlite3MallocZero(44)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($16) + 8|0);
 HEAP8[$18>>0] = 0;
 HEAP32[$16>>2] = $db;
 $19 = (($16) + 28|0);
 HEAP32[$19>>2] = $16;
 $20 = (($16) + 32|0);
 HEAP32[$20>>2] = 1;
 L15: do {
  if ($13) {
   label = 31;
  } else {
   if ($10) {
    $21 = $$02 & 131136;
    $22 = ($21|0)==(131136);
    if (!($22)) {
     label = 31;
     break;
    }
   } else {
    $$old = $$02 & 131072;
    $$old3 = ($$old|0)==(0);
    if ($$old3) {
     label = 31;
     break;
    }
   }
   $23 = (($pVfs) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   $26 = (_sqlite3Malloc($25)|0);
   $27 = (($16) + 9|0);
   HEAP8[$27>>0] = 1;
   $28 = ($26|0)==(0|0);
   if ($28) {
    _sqlite3_free($16);
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   }
   if ($10) {
    $29 = (_sqlite3Strlen30($zFilename)|0);
    $30 = (($29) + 1)|0;
    _memcpy(($26|0),($zFilename|0),($30|0))|0;
   } else {
    $32 = (_sqlite3OsFullPathname($pVfs,$zFilename,$25,$26)|0);
    $33 = ($32|0)==(0);
    if (!($33)) {
     _sqlite3_free($26);
     _sqlite3_free($16);
     $$0 = $32;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $pBt$035 = HEAP32[4456>>2]|0;
   $31 = ($pBt$035|0)==(0|0);
   L31: do {
    if (!($31)) {
     $pBt$036 = $pBt$035;
     while(1) {
      $34 = HEAP32[$pBt$036>>2]|0;
      $35 = (_sqlite3PagerFilename($34,0)|0);
      $36 = (_strcmp($26,$35)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       $$idx$val = HEAP32[$34>>2]|0;
       $38 = (_sqlite3PagerVfs($$idx$val)|0);
       $39 = ($38|0)==($pVfs|0);
       if ($39) {
        break;
       }
      }
      $52 = (($pBt$036) + 68|0);
      $pBt$0 = HEAP32[$52>>2]|0;
      $53 = ($pBt$0|0)==(0|0);
      if ($53) {
       break L31;
      } else {
       $pBt$036 = $pBt$0;
      }
     }
     $40 = (($db) + 20|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)>(0);
     L38: do {
      if ($42) {
       $43 = (($db) + 16|0);
       $44 = HEAP32[$43>>2]|0;
       $iDb$031$in = $41;
       while(1) {
        $iDb$031 = (($iDb$031$in) + -1)|0;
        $45 = ((($44) + ($iDb$031<<4)|0) + 4|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($46|0)==(0|0);
        if (!($47)) {
         $49 = (($46) + 4|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($50|0)==($pBt$036|0);
         if ($51) {
          break;
         }
        }
        $48 = ($iDb$031|0)>(0);
        if ($48) {
         $iDb$031$in = $iDb$031;
        } else {
         break L38;
        }
       }
       _sqlite3_free($26);
       _sqlite3_free($16);
       $$0 = 19;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     $54 = (($16) + 4|0);
     HEAP32[$54>>2] = $pBt$036;
     $55 = (($pBt$036) + 64|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (($56) + 1)|0;
     HEAP32[$55>>2] = $57;
     _sqlite3_free($26);
     $58 = ($pBt$036|0)==(0|0);
     if ($58) {
      label = 31;
      break L15;
     } else {
      break L15;
     }
    }
   } while(0);
   _sqlite3_free($26);
   label = 31;
  }
 } while(0);
 L49: do {
  if ((label|0) == 31) {
   $59 = (_sqlite3MallocZero(84)|0);
   $60 = ($59|0)==(0|0);
   L51: do {
    if ($60) {
     $rc$41849 = 7;
    } else {
     $61 = (_sqlite3PagerOpen($pVfs,$59,$zFilename,$$flags,$$02)|0);
     $62 = ($61|0)==(0);
     do {
      if ($62) {
       $63 = HEAP32[$59>>2]|0;
       $64 = (($db) + 40|0);
       $65 = $64;
       $66 = $65;
       $67 = HEAP32[$66>>2]|0;
       $68 = (($65) + 4)|0;
       $69 = $68;
       $70 = HEAP32[$69>>2]|0;
       _sqlite3PagerSetMmapLimit($63,$67,$70);
       $71 = HEAP32[$59>>2]|0;
       $72 = (_sqlite3PagerReadFileheader($71,$zDbHeader)|0);
       $73 = ($72|0)==(0);
       if ($73) {
        $74 = $$flags&255;
        $75 = (($59) + 16|0);
        HEAP8[$75>>0] = $74;
        $76 = (($59) + 4|0);
        HEAP32[$76>>2] = $db;
        $77 = HEAP32[$59>>2]|0;
        _sqlite3PagerSetBusyhandler($77,$59);
        $78 = (($16) + 4|0);
        HEAP32[$78>>2] = $59;
        $79 = (($59) + 8|0);
        HEAP32[$79>>2] = 0;
        $80 = (($59) + 12|0);
        HEAP32[$80>>2] = 0;
        $81 = HEAP32[$59>>2]|0;
        $$idx8 = (($81) + 13|0);
        $$idx8$val = HEAP8[$$idx8>>0]|0;
        $82 = (_sqlite3PagerIsreadonly($$idx8$val)|0);
        $83 = ($82<<24>>24)==(0);
        if (!($83)) {
         $84 = (($59) + 22|0);
         $85 = HEAP16[$84>>1]|0;
         $86 = $85&65535;
         $87 = $86 | 1;
         $88 = $87&65535;
         HEAP16[$84>>1] = $88;
        }
        $89 = (($zDbHeader) + 16|0);
        $90 = HEAP8[$89>>0]|0;
        $91 = $90&255;
        $92 = $91 << 8;
        $93 = (($zDbHeader) + 17|0);
        $94 = HEAP8[$93>>0]|0;
        $95 = $94&255;
        $96 = $95 << 16;
        $97 = $96 | $92;
        $98 = (($59) + 32|0);
        HEAP32[$98>>2] = $97;
        $$off = (($97) + -512)|0;
        $99 = ($$off>>>0)>(65024);
        if ($99) {
         label = 38;
        } else {
         $100 = (($97) + 16777215)|0;
         $101 = $100 & $97;
         $102 = ($101|0)==(0);
         if ($102) {
          $106 = (($zDbHeader) + 20|0);
          $107 = HEAP8[$106>>0]|0;
          $108 = (($59) + 22|0);
          $109 = HEAP16[$108>>1]|0;
          $110 = $109&65535;
          $111 = $110 | 2;
          $112 = $111&65535;
          HEAP16[$108>>1] = $112;
          $113 = (($zDbHeader) + 52|0);
          $114 = (_sqlite3Get4byte($113)|0);
          $115 = ($114|0)!=(0);
          $116 = $115&1;
          $117 = (($59) + 17|0);
          HEAP8[$117>>0] = $116;
          $118 = (($zDbHeader) + 64|0);
          $119 = (_sqlite3Get4byte($118)|0);
          $120 = ($119|0)!=(0);
          $121 = $120&1;
          $122 = (($59) + 18|0);
          HEAP8[$122>>0] = $121;
          $nReserve$0 = $107;
         } else {
          label = 38;
         }
        }
        if ((label|0) == 38) {
         HEAP32[$98>>2] = 0;
         $$not = $103 ^ 1;
         $brmerge6 = $10 | $$not;
         if ($brmerge6) {
          $nReserve$0 = 0;
         } else {
          $104 = (($59) + 17|0);
          HEAP8[$104>>0] = 0;
          $105 = (($59) + 18|0);
          HEAP8[$105>>0] = 0;
          $nReserve$0 = 0;
         }
        }
        $123 = $nReserve$0&255;
        $124 = (_sqlite3PagerSetPagesize($81,$98,$123)|0);
        $125 = ($124|0)==(0);
        if (!($125)) {
         if ($60) {
          $rc$41849 = $124;
          break L51;
         } else {
          $rc$41848 = $124;
          break;
         }
        }
        $126 = HEAP32[$98>>2]|0;
        $127 = (($126) - ($123))|0;
        $128 = (($59) + 36|0);
        HEAP32[$128>>2] = $127;
        $129 = (($16) + 9|0);
        $130 = HEAP8[$129>>0]|0;
        $131 = ($130<<24>>24)==(0);
        if ($131) {
         break L49;
        }
        $132 = (($59) + 64|0);
        HEAP32[$132>>2] = 1;
        $133 = HEAP32[4456>>2]|0;
        $134 = (($59) + 68|0);
        HEAP32[$134>>2] = $133;
        HEAP32[4456>>2] = $59;
        break L49;
       } else {
        $rc$41848 = $72;
       }
      } else {
       $rc$41848 = $61;
      }
     } while(0);
     $174 = HEAP32[$59>>2]|0;
     $175 = ($174|0)==(0|0);
     if ($175) {
      $rc$41849 = $rc$41848;
     } else {
      _sqlite3PagerClose($174);
      $rc$41849 = $rc$41848;
     }
    }
   } while(0);
   _sqlite3_free($59);
   _sqlite3_free($16);
   HEAP32[$ppBtree>>2] = 0;
   $$0 = $rc$41849;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $135 = (($16) + 9|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = ($136<<24>>24)==(0);
 L75: do {
  if (!($137)) {
   $138 = (($db) + 20|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)>(0);
   if ($140) {
    $141 = (($db) + 16|0);
    $142 = HEAP32[$141>>2]|0;
    $i$029 = 0;
    while(1) {
     $143 = ((($142) + ($i$029<<4)|0) + 4|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($144|0)==(0|0);
     if (!($145)) {
      $146 = (($144) + 9|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = ($147<<24>>24)==(0);
      if (!($148)) {
       $pSib$0 = $144;
       break;
      }
     }
     $170 = (($i$029) + 1)|0;
     $171 = ($170|0)<($139|0);
     if ($171) {
      $i$029 = $170;
     } else {
      break L75;
     }
    }
    while(1) {
     $149 = (($pSib$0) + 24|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==(0|0);
     if ($151) {
      break;
     } else {
      $pSib$0 = $150;
     }
    }
    $152 = (($16) + 4|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($pSib$0) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($153>>>0)<($155>>>0);
    if ($156) {
     $157 = (($16) + 20|0);
     HEAP32[$157>>2] = $pSib$0;
     $158 = (($16) + 24|0);
     HEAP32[$158>>2] = 0;
     HEAP32[$149>>2] = $16;
     break;
    } else {
     $pSib$1 = $pSib$0;
    }
    while(1) {
     $159 = (($pSib$1) + 20|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if ($161) {
      label = 53;
      break;
     }
     $164 = (($160) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165>>>0)<($153>>>0);
     if ($166) {
      $pSib$1 = $160;
     } else {
      label = 55;
      break;
     }
    }
    if ((label|0) == 53) {
     $162 = (($16) + 20|0);
     HEAP32[$162>>2] = 0;
     $163 = (($16) + 24|0);
     HEAP32[$163>>2] = $pSib$1;
    }
    else if ((label|0) == 55) {
     $167 = (($16) + 20|0);
     HEAP32[$167>>2] = $160;
     $168 = (($16) + 24|0);
     HEAP32[$168>>2] = $pSib$1;
     $169 = (($160) + 24|0);
     HEAP32[$169>>2] = $16;
    }
    HEAP32[$159>>2] = $16;
   }
  }
 } while(0);
 HEAP32[$ppBtree>>2] = $16;
 $$idx9$val = HEAP32[$16>>2]|0;
 $$idx10 = (($16) + 4|0);
 $$idx10$val = HEAP32[$$idx10>>2]|0;
 $172 = (_sqlite3BtreeSchema($$idx9$val,$$idx10$val,0,0)|0);
 $173 = ($172|0)==(0|0);
 if (!($173)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $176 = HEAP32[$$idx10>>2]|0;
 $177 = HEAP32[$176>>2]|0;
 $$idx11 = (($177) + 204|0);
 $$idx11$val = HEAP32[$$idx11>>2]|0;
 _sqlite3PagerSetCachesize($$idx11$val,2000);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SchemaGet($db,$pBt) {
 $db = $db|0;
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$in = 0, $pBt$idx$val = 0, $pBt$idx1 = 0, $pBt$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBt|0)==(0|0);
 if ($0) {
  $2 = (_sqlite3DbMallocZero(0,84)|0);
  $p$0$in = $2;
 } else {
  $pBt$idx$val = HEAP32[$pBt>>2]|0;
  $pBt$idx1 = (($pBt) + 4|0);
  $pBt$idx1$val = HEAP32[$pBt$idx1>>2]|0;
  $1 = (_sqlite3BtreeSchema($pBt$idx$val,$pBt$idx1$val,84,152)|0);
  $p$0$in = $1;
 }
 $3 = ($p$0$in|0)==(0|0);
 if ($3) {
  $4 = (($db) + 64|0);
  HEAP8[$4>>0] = 1;
  STACKTOP = sp;return ($p$0$in|0);
 }
 $5 = (($p$0$in) + 76|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  STACKTOP = sp;return ($p$0$in|0);
 }
 $8 = (($p$0$in) + 8|0);
 _sqlite3HashInit($8);
 $9 = (($p$0$in) + 24|0);
 _sqlite3HashInit($9);
 $10 = (($p$0$in) + 40|0);
 _sqlite3HashInit($10);
 $11 = (($p$0$in) + 56|0);
 _sqlite3HashInit($11);
 $12 = (($p$0$in) + 77|0);
 HEAP8[$12>>0] = 1;
 STACKTOP = sp;return ($p$0$in|0);
}
function _sqlite3RegisterBuiltinFunctions($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_overload_function($db,4432,2)|0);
 $1 = ($0|0)==(7);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($db) + 64|0);
 HEAP8[$2>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3AutoLoadExtensions($db) {
 $db = $db|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $zErrmsg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $zErrmsg = sp + 4|0;
 $0 = HEAP32[1736>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $3 = $0;$i$02 = 0;
 }
 while(1) {
  $2 = ($i$02|0)<($3|0);
  if (!($2)) {
   label = 3;
   break;
  }
  $4 = HEAP32[1744>>2]|0;
  $5 = (($4) + ($i$02<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$zErrmsg>>2] = 0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = (FUNCTION_TABLE_iiii[$6 & 255]($db,$zErrmsg,3624)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    label = 6;
    break;
   }
  }
  $12 = HEAP32[$zErrmsg>>2]|0;
  _sqlite3_free($12);
  if (0) {
   label = 10;
   break;
  }
  $13 = (($i$02) + 1)|0;
  $$pre = HEAP32[1736>>2]|0;
  $3 = $$pre;$i$02 = $13;
 }
 if ((label|0) == 3) {
  HEAP32[$zErrmsg>>2] = 0;
 }
 else if ((label|0) == 6) {
  $10 = HEAP32[$zErrmsg>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _sqlite3Error($db,$8,4392,$vararg_buffer);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$zErrmsg>>2]|0;
 _sqlite3_free($11);
 STACKTOP = sp;return;
}
function _sqlite3BtreeSchema($p$0$0$val,$p$0$1$val,$nBytes,$xFree) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $nBytes = $nBytes|0;
 $xFree = $xFree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = (($p$0$1$val) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $3 = ($nBytes|0)==(0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $6 = $1;
  STACKTOP = sp;return ($6|0);
 }
 $4 = (_sqlite3DbMallocZero(0,$nBytes)|0);
 HEAP32[$0>>2] = $4;
 $5 = (($p$0$1$val) + 52|0);
 HEAP32[$5>>2] = $xFree;
 $6 = $4;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3SchemaClear($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pElem$02 = 0, $pElem$11 = 0, $temp1 = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $temp1 = sp + 16|0;
 $temp2 = sp;
 $0 = (($p) + 8|0);
 ;HEAP32[$temp1+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$temp1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$temp1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$temp1+12>>2]=HEAP32[$0+12>>2]|0;
 $1 = (($p) + 40|0);
 ;HEAP32[$temp2+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$temp2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$temp2+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$temp2+12>>2]=HEAP32[$1+12>>2]|0;
 _sqlite3HashInit($1);
 $2 = (($p) + 24|0);
 _sqlite3HashClear($2);
 $3 = (($temp2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $pElem$02 = $4;
  while(1) {
   $6 = (($pElem$02) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   _sqlite3DeleteTrigger(0,$7);
   $8 = HEAP32[$pElem$02>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    break;
   } else {
    $pElem$02 = $8;
   }
  }
 }
 _sqlite3HashClear($temp2);
 _sqlite3HashInit($0);
 $10 = (($temp1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $pElem$11 = $11;
  while(1) {
   $13 = (($pElem$11) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   _sqlite3DeleteTable(0,$14);
   $15 = HEAP32[$pElem$11>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    break;
   } else {
    $pElem$11 = $15;
   }
  }
 }
 _sqlite3HashClear($temp1);
 $17 = (($p) + 56|0);
 _sqlite3HashClear($17);
 $18 = (($p) + 72|0);
 HEAP32[$18>>2] = 0;
 $19 = (($p) + 78|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 & 1;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = (($p) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[$23>>2] = $25;
 $26 = $20&65535;
 $27 = $26 & 65534;
 $28 = $27&65535;
 HEAP16[$19>>1] = $28;
 STACKTOP = sp;return;
}
function _sqlite3TempInMemory($db$0$14$val) {
 $db$0$14$val = $db$0$14$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db$0$14$val<<24>>24)==(2);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3OsFullPathname($pVfs,$zPath,$nPathOut,$zPathOut) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $nPathOut = $nPathOut|0;
 $zPathOut = $zPathOut|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$zPathOut>>0] = 0;
 $0 = (($pVfs) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 255]($pVfs,$zPath,$nPathOut,$zPathOut)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3PagerVfs($pPager$0$0$val) {
 $pPager$0$0$val = $pPager$0$0$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPager$0$0$val|0);
}
function _sqlite3PagerOpen($pVfs,$ppPager,$zFilename,$flags,$vfsFlags) {
 $pVfs = $pVfs|0;
 $ppPager = $ppPager|0;
 $zFilename = $zFilename|0;
 $flags = $flags|0;
 $vfsFlags = $vfsFlags|0;
 var $$0 = 0, $$016 = 0, $$pre = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $factor = 0, $fout = 0, $journalFileSize$0 = 0, $memDb$05 = 0, $nPathname$1 = 0, $nUri$0 = 0, $phitmp = 0, $rc$0$ph = 0, $rc$317 = 0, $readOnly$021 = 0, $szPageDflt = 0, $tempFile$020 = 0, $z$0$lcssa = 0, $z$018 = 0, $zPathname$1 = 0, $zUri$0 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $szPageDflt = sp + 4|0;
 $fout = sp;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 HEAP32[$szPageDflt>>2] = 1024;
 $2 = (($pVfs) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(40);
 if ($4) {
  $5 = (($3) + 7)|0;
  $6 = $5 & -8;
  $journalFileSize$0 = $6;
 } else {
  $journalFileSize$0 = 40;
 }
 HEAP32[$ppPager>>2] = 0;
 $7 = $flags & 2;
 $8 = ($7|0)==(0);
 $9 = ($zFilename|0)==(0|0);
 L4: do {
  if ($8) {
   if ($9) {
    $$016 = 0;$135 = 0;$memDb$05 = 0;$nPathname$1 = 0;$nUri$0 = 0;$zPathname$1 = 0;$zUri$0 = 0;
   } else {
    $$pre = HEAP8[$zFilename>>0]|0;
    $phitmp = ($$pre<<24>>24)==(0);
    if ($phitmp) {
     $$016 = $zFilename;$135 = 1;$memDb$05 = 0;$nPathname$1 = 0;$nUri$0 = 0;$zPathname$1 = 0;$zUri$0 = 0;
    } else {
     $15 = (($pVfs) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($16) + 1)|0;
     $18 = $17 << 1;
     $19 = (_sqlite3DbMallocRaw(0,$18)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0 = 7;
      STACKTOP = sp;return ($$0|0);
     }
     HEAP8[$19>>0] = 0;
     $21 = (_sqlite3OsFullPathname($pVfs,$zFilename,$17,$19)|0);
     $22 = (_sqlite3Strlen30($19)|0);
     $23 = (_sqlite3Strlen30($zFilename)|0);
     $24 = (($23) + 1)|0;
     $25 = (($zFilename) + ($24)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $z$0$lcssa = $25;
     } else {
      $z$018 = $25;
      while(1) {
       $28 = (_sqlite3Strlen30($z$018)|0);
       $29 = (($28) + 1)|0;
       $30 = (($z$018) + ($29)|0);
       $31 = (_sqlite3Strlen30($30)|0);
       $32 = (($31) + 1)|0;
       $$sum4 = (($32) + ($29))|0;
       $33 = (($z$018) + ($$sum4)|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = ($34<<24>>24)==(0);
       if ($35) {
        $z$0$lcssa = $33;
        break;
       } else {
        $z$018 = $33;
       }
      }
     }
     $36 = ($21|0)==(0);
     do {
      if ($36) {
       $37 = (($22) + 8)|0;
       $38 = HEAP32[$15>>2]|0;
       $39 = ($37|0)>($38|0);
       if ($39) {
        _sqlite3CantopenError(44135);
        $rc$0$ph = 14;
        break;
       } else {
        $40 = (($z$0$lcssa) + 1|0);
        $41 = $40;
        $42 = $25;
        $43 = (($41) - ($42))|0;
        $$016 = $zFilename;$135 = 1;$memDb$05 = 0;$nPathname$1 = $22;$nUri$0 = $43;$zPathname$1 = $19;$zUri$0 = $25;
        break L4;
       }
      } else {
       $rc$0$ph = $21;
      }
     } while(0);
     _sqlite3DbFree(0,$19);
     $$0 = $rc$0$ph;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } else {
   if ($9) {
    $$016 = 0;$135 = 0;$memDb$05 = 1;$nPathname$1 = 0;$nUri$0 = 0;$zPathname$1 = 0;$zUri$0 = 0;
   } else {
    $10 = HEAP8[$zFilename>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$016 = $zFilename;$135 = 1;$memDb$05 = 1;$nPathname$1 = 0;$nUri$0 = 0;$zPathname$1 = 0;$zUri$0 = 0;
    } else {
     $12 = (_sqlite3DbStrDup(0,$zFilename)|0);
     $13 = ($12|0)==(0|0);
     if ($13) {
      $$0 = 7;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (_sqlite3Strlen30($12)|0);
      $$016 = 0;$135 = 0;$memDb$05 = 1;$nPathname$1 = $14;$nUri$0 = 0;$zPathname$1 = $12;$zUri$0 = 0;
      break;
     }
    }
   }
  }
 } while(0);
 $44 = HEAP32[$2>>2]|0;
 $45 = (($44) + 271)|0;
 $46 = $45 & -8;
 $47 = $journalFileSize$0 << 1;
 $factor = ($nPathname$1*3)|0;
 $48 = (($47) + 17)|0;
 $49 = (($48) + ($nUri$0))|0;
 $50 = (($49) + ($46))|0;
 $51 = (($50) + ($factor))|0;
 $52 = (_sqlite3MallocZero($51)|0);
 $53 = ($52|0)==(0|0);
 if ($53) {
  _sqlite3DbFree(0,$zPathname$1);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = (($52) + 216|0);
 $55 = (($52) + 204|0);
 HEAP32[$55>>2] = $54;
 $56 = (($52) + 264|0);
 $57 = (($52) + 60|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$2>>2]|0;
 $59 = (($58) + 271)|0;
 $$sum = $59 & -8;
 $60 = (($52) + ($$sum)|0);
 $61 = (($52) + 68|0);
 HEAP32[$61>>2] = $60;
 $$sum1 = (($$sum) + ($journalFileSize$0))|0;
 $62 = (($52) + ($$sum1)|0);
 $63 = (($52) + 64|0);
 HEAP32[$63>>2] = $62;
 $$sum2 = (($$sum1) + ($journalFileSize$0))|0;
 $64 = (($52) + ($$sum2)|0);
 $65 = (($52) + 168|0);
 HEAP32[$65>>2] = $64;
 $66 = ($zPathname$1|0)==(0|0);
 if (!($66)) {
  $67 = (($nPathname$1) + 1)|0;
  $68 = (($nUri$0) + ($67))|0;
  $$sum3 = (($68) + ($$sum2))|0;
  $69 = (($52) + ($$sum3)|0);
  $70 = (($52) + 172|0);
  HEAP32[$70>>2] = $69;
  _memcpy(($64|0),($zPathname$1|0),($nPathname$1|0))|0;
  $71 = ($nUri$0|0)==(0);
  if (!($71)) {
   $72 = HEAP32[$65>>2]|0;
   $73 = (($72) + ($67)|0);
   _memcpy(($73|0),($zUri$0|0),($nUri$0|0))|0;
  }
  $74 = HEAP32[$70>>2]|0;
  _memcpy(($74|0),($zPathname$1|0),($nPathname$1|0))|0;
  $75 = HEAP32[$70>>2]|0;
  $76 = (($75) + ($nPathname$1)|0);
  dest=$76+0|0; src=4776+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $77 = (($nPathname$1) + 9)|0;
  $78 = HEAP32[$70>>2]|0;
  $79 = (($78) + ($77)|0);
  $80 = (($52) + 212|0);
  HEAP32[$80>>2] = $79;
  _memcpy(($79|0),($zPathname$1|0),($nPathname$1|0))|0;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($nPathname$1)|0);
  ;HEAP8[$82+0>>0]=HEAP8[4792+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[4792+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[4792+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[4792+3>>0]|0;HEAP8[$82+4>>0]=HEAP8[4792+4>>0]|0;
  _sqlite3DbFree(0,$zPathname$1);
 }
 HEAP32[$52>>2] = $pVfs;
 $83 = (($52) + 144|0);
 HEAP32[$83>>2] = $vfsFlags;
 if ($135) {
  $84 = HEAP8[$$016>>0]|0;
  $85 = ($84<<24>>24)==(0);
  if ($85) {
   label = 31;
  } else {
   HEAP32[$fout>>2] = 0;
   $86 = HEAP32[$65>>2]|0;
   $87 = HEAP32[$57>>2]|0;
   $88 = (_sqlite3OsOpen($pVfs,$86,$87,$vfsFlags,$fout)|0);
   $89 = HEAP32[$fout>>2]|0;
   $90 = $89 & 1;
   $91 = $90 | $88;
   $92 = ($91|0)==(0);
   do {
    if ($92) {
     _setSectorSize($52);
     $93 = (($52) + 148|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94>>>0)>(1024);
     if ($95) {
      $96 = ($94>>>0)>(8192);
      if ($96) {
       HEAP32[$szPageDflt>>2] = 8192;
       break;
      } else {
       HEAP32[$szPageDflt>>2] = $94;
       break;
      }
     }
    }
   } while(0);
   $100 = ($88|0)==(0);
   if ($100) {
    $readOnly$021 = $90;$tempFile$020 = 0;
    label = 33;
   } else {
    $rc$317 = $88;
   }
  }
 } else {
  label = 31;
 }
 if ((label|0) == 31) {
  $97 = (($52) + 15|0);
  HEAP8[$97>>0] = 1;
  $98 = (($52) + 16|0);
  HEAP8[$98>>0] = 4;
  $99 = $vfsFlags & 1;
  $readOnly$021 = $99;$tempFile$020 = 1;
  label = 33;
 }
 if ((label|0) == 33) {
  $101 = (_sqlite3PagerSetPagesize($52,$szPageDflt,-1)|0);
  $102 = ($101|0)==(0);
  if ($102) {
   $104 = HEAP32[$szPageDflt>>2]|0;
   $105 = ($memDb$05|0)!=(0);
   $106 = $memDb$05 ^ 1;
   $107 = $105 ? 0 : 153;
   $108 = HEAP32[$55>>2]|0;
   _sqlite3PcacheOpen($104,$106,$107,$52,$108);
   $109 = $0 ^ 1;
   $110 = $109&255;
   $111 = (($52) + 6|0);
   HEAP8[$111>>0] = $110;
   $112 = (($52) + 156|0);
   HEAP32[$112>>2] = 1073741823;
   $113 = (($52) + 12|0);
   HEAP8[$113>>0] = $tempFile$020;
   $114 = (($52) + 4|0);
   HEAP8[$114>>0] = $tempFile$020;
   $115 = (($52) + 17|0);
   HEAP8[$115>>0] = $tempFile$020;
   $116 = $memDb$05&255;
   $117 = (($52) + 14|0);
   HEAP8[$117>>0] = $116;
   $118 = $readOnly$021&255;
   $119 = (($52) + 13|0);
   HEAP8[$119>>0] = $118;
   $120 = (($52) + 7|0);
   HEAP8[$120>>0] = $tempFile$020;
   $121 = ($tempFile$020<<24>>24)==(0);
   if ($121) {
    $122 = (($52) + 8|0);
    HEAP8[$122>>0] = 1;
    $123 = (($52) + 11|0);
    HEAP8[$123>>0] = 2;
    $124 = (($52) + 10|0);
    HEAP8[$124>>0] = 34;
    $125 = (($52) + 9|0);
    HEAP8[$125>>0] = 2;
   }
   $126 = (($52) + 140|0);
   HEAP16[$126>>1] = 80;
   $127 = (($52) + 160|0);
   $128 = $127;
   $129 = $128;
   HEAP32[$129>>2] = -1;
   $130 = (($128) + 4)|0;
   $131 = $130;
   HEAP32[$131>>2] = -1;
   _setSectorSize($52);
   if ($1) {
    if ($105) {
     $133 = (($52) + 5|0);
     HEAP8[$133>>0] = 4;
    }
   } else {
    $132 = (($52) + 5|0);
    HEAP8[$132>>0] = 2;
   }
   $134 = (($52) + 196|0);
   HEAP32[$134>>2] = 154;
   HEAP32[$ppPager>>2] = $52;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rc$317 = $101;
  }
 }
 $103 = HEAP32[$57>>2]|0;
 _sqlite3OsClose($103);
 _sqlite3_free($52);
 $$0 = $rc$317;
 STACKTOP = sp;return ($$0|0);
}
function _pageReinit($pData) {
 $pData = $pData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pData$idx = 0, $pData$idx$val = 0, $pData$idx1 = 0, $pData$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pData$idx = (($pData) + 8|0);
 $pData$idx$val = HEAP32[$pData$idx>>2]|0;
 $0 = (_sqlite3PagerGetExtra($pData$idx$val)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 HEAP8[$0>>0] = 0;
 $pData$idx1 = (($pData) + 26|0);
 $pData$idx1$val = HEAP16[$pData$idx1>>1]|0;
 $3 = (_sqlite3PagerPageRefcount($pData$idx1$val)|0);
 $4 = ($3|0)>(1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 (_btreeInitPage($0)|0);
 STACKTOP = sp;return;
}
function _sqlite3PagerSetMmapLimit($pPager,$0,$1) {
 $pPager = $pPager|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pPager) + 128|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 STACKTOP = sp;return;
}
function _sqlite3PagerReadFileheader($pPager,$pDest) {
 $pPager = $pPager|0;
 $pDest = $pDest|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rc$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$pDest+0|0; stop=dest+100|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = (($pPager) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $4 = (_sqlite3OsRead($1,$pDest,100,0,0)|0);
 $5 = ($4|0)==(522);
 $$ = $5 ? 0 : $4;
 $rc$0 = $$;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3PagerSetBusyhandler($pPager,$pBusyHandlerArg) {
 $pPager = $pPager|0;
 $pBusyHandlerArg = $pBusyHandlerArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 176|0);
 HEAP32[$0>>2] = 155;
 $1 = (($pPager) + 180|0);
 HEAP32[$1>>2] = $pBusyHandlerArg;
 $2 = (($pPager) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _sqlite3OsFileControlHint($3,15,$0);
 STACKTOP = sp;return;
}
function _btreeInvokeBusyHandler($pArg) {
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pArg) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 436|0);
 $3 = (_sqlite3InvokeBusyHandler($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3Get4byte($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = (($p) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = (($p) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = (($p) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _sqlite3PagerClose($pPager) {
 $pPager = $pPager|0;
 var $$idx = 0, $$idx$val = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPager$idx = 0, $pPager$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3BeginBenignMalloc();
 $pPager$idx = (($pPager) + 136|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 _pagerFreeMapHdrs($pPager$idx$val);
 $2 = (($pPager) + 4|0);
 HEAP8[$2>>0] = 0;
 $3 = (($pPager) + 208|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pPager) + 9|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($pPager) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 (_sqlite3WalClose($4,$7,$9,$1)|0);
 HEAP32[$3>>2] = 0;
 _pager_reset($pPager);
 $10 = (($pPager) + 14|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $13 = (($pPager) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = (_pagerSyncHotJournal($pPager)|0);
   (_pager_error($pPager,$17)|0);
  }
  _pagerUnlockAndRollback($pPager);
  $$pre$phiZ2D = $13;
 } else {
  _pager_unlock($pPager);
  $$pre = (($pPager) + 64|0);
  $$pre$phiZ2D = $$pre;
 }
 _sqlite3EndBenignMalloc();
 $18 = HEAP32[$$pre$phiZ2D>>2]|0;
 _sqlite3OsClose($18);
 $19 = (($pPager) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 _sqlite3OsClose($20);
 _sqlite3PageFree($1);
 $21 = (($pPager) + 204|0);
 $22 = HEAP32[$21>>2]|0;
 $$idx = (($22) + 40|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 _sqlite3PcacheClose($$idx$val);
 _sqlite3_free($pPager);
 STACKTOP = sp;return;
}
function _sqlite3PagerSetCachesize($pPager$0$54$val,$mxPage) {
 $pPager$0$54$val = $pPager$0$54$val|0;
 $mxPage = $mxPage|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3PcacheSetCachesize($pPager$0$54$val,$mxPage);
 STACKTOP = sp;return;
}
function _sqlite3PcacheSetCachesize($pCache,$mxPage) {
 $pCache = $pCache|0;
 $mxPage = $mxPage|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 16|0);
 HEAP32[$0>>2] = $mxPage;
 $1 = (($pCache) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[((384 + 124|0))>>2]|0;
 $5 = (_numberOfCachePages($pCache)|0);
 FUNCTION_TABLE_vii[$4 & 255]($2,$5);
 STACKTOP = sp;return;
}
function _numberOfCachePages($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($1|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (___muldi3(($1|0),($4|0),-1024,-1)|0);
 $6 = tempRet0;
 $7 = (($p) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($p) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8))|0;
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = (___divdi3(($5|0),($6|0),($11|0),($13|0))|0);
 $15 = tempRet0;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _pagerFreeMapHdrs($pPager$0$39$val) {
 $pPager$0$39$val = $pPager$0$39$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPager$0$39$val|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$01 = $pPager$0$39$val;
 }
 while(1) {
  $1 = (($p$01) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  _sqlite3_free($p$01);
  $3 = ($2|0)==(0|0);
  if ($3) {
   break;
  } else {
   $p$01 = $2;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3WalClose($pWal,$sync_flags,$nBuf,$zBuf) {
 $pWal = $pWal|0;
 $sync_flags = $sync_flags|0;
 $nBuf = $nBuf|0;
 $zBuf = $zBuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bPersist = 0, $isDelete$0 = 0, $rc$0 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bPersist = sp;
 $0 = ($pWal|0)==(0|0);
 if ($0) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $1 = (($pWal) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3OsLock($2,4)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (($pWal) + 43|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   HEAP8[$5>>0] = 1;
  }
  $8 = (_sqlite3WalCheckpoint($pWal,0,0,0,$sync_flags,$nBuf,$zBuf,0,0)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   HEAP32[$bPersist>>2] = -1;
   $10 = HEAP32[$1>>2]|0;
   _sqlite3OsFileControlHint($10,10,$bPersist);
   $11 = HEAP32[$bPersist>>2]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    $13 = (($pWal) + 16|0);
    $14 = $13;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)>(-1);
    $21 = ($19|0)==(-1);
    $22 = ($16>>>0)>(4294967295);
    $23 = $21 & $22;
    $24 = $20 | $23;
    if ($24) {
     _walLimitSize($pWal,0,0);
     $isDelete$0 = 0;$rc$0 = 0;
    } else {
     $isDelete$0 = 0;$rc$0 = 0;
    }
   } else {
    $isDelete$0 = 1;$rc$0 = 0;
   }
  } else {
   $isDelete$0 = 0;$rc$0 = $8;
  }
 } else {
  $isDelete$0 = 0;$rc$0 = $3;
 }
 _walIndexClose($pWal,$isDelete$0);
 $25 = (($pWal) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 _sqlite3OsClose($26);
 $27 = ($isDelete$0|0)==(0);
 if (!($27)) {
  _sqlite3BeginBenignMalloc();
  $28 = HEAP32[$pWal>>2]|0;
  $29 = (($pWal) + 100|0);
  $30 = HEAP32[$29>>2]|0;
  (_sqlite3OsDelete($28,$30,0)|0);
  _sqlite3EndBenignMalloc();
 }
 $31 = (($pWal) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 _sqlite3_free($32);
 _sqlite3_free($pWal);
 $rc$1 = $rc$0;
 STACKTOP = sp;return ($rc$1|0);
}
function _pager_unlock($pPager) {
 $pPager = $pPager|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $phitmp = 0, $phitmp1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3BitvecDestroy($1);
 HEAP32[$0>>2] = 0;
 _releaseAllSavepoints($pPager);
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $2 = (_pagerUseWal($pPager$idx$val)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = (($pPager) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $8 = (($pPager) + 60|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    label = 7;
   } else {
    $12 = (_sqlite3OsDeviceCharacteristics($9)|0);
    $phitmp = $12 & 2048;
    $phitmp1 = ($phitmp|0)==(0);
    if ($phitmp1) {
     label = 7;
    } else {
     $13 = (($pPager) + 5|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 & 5;
     $16 = ($15<<24>>24)==(1);
     if (!($16)) {
      label = 7;
     }
    }
   }
   if ((label|0) == 7) {
    $17 = (($pPager) + 64|0);
    $18 = HEAP32[$17>>2]|0;
    _sqlite3OsClose($18);
   }
   $19 = (_pagerUnlockDb($pPager,0)|0);
   $20 = ($19|0)==(0);
   $$pre = (($pPager) + 15|0);
   if (!($20)) {
    $21 = HEAP8[$$pre>>0]|0;
    $22 = ($21<<24>>24)==(6);
    if ($22) {
     $23 = (($pPager) + 16|0);
     HEAP8[$23>>0] = 5;
    }
   }
   $24 = (($pPager) + 17|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$$pre>>0] = 0;
  }
 } else {
  _sqlite3WalEndReadTransaction($pPager$idx$val);
  $4 = (($pPager) + 15|0);
  HEAP8[$4>>0] = 0;
 }
 $25 = (($pPager) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $32 = (($pPager) + 72|0);
  $33 = (($pPager) + 18|0);
  HEAP8[$33>>0] = 0;
  ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
  STACKTOP = sp;return;
 }
 _pager_reset($pPager);
 $28 = (($pPager) + 12|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (($pPager) + 17|0);
 HEAP8[$30>>0] = $29;
 $31 = (($pPager) + 15|0);
 HEAP8[$31>>0] = 0;
 HEAP32[$25>>2] = 0;
 $32 = (($pPager) + 72|0);
 $33 = (($pPager) + 18|0);
 HEAP8[$33>>0] = 0;
 ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
 STACKTOP = sp;return;
}
function _pager_error($pPager,$rc) {
 $pPager = $pPager|0;
 $rc = $rc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $rc & 255;
 if ((($0|0) == 10) | (($0|0) == 13)) {
  $1 = (($pPager) + 40|0);
  HEAP32[$1>>2] = $rc;
  $2 = (($pPager) + 15|0);
  HEAP8[$2>>0] = 6;
 }
 STACKTOP = sp;return ($rc|0);
}
function _pagerSyncHotJournal($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (($pPager) + 64|0);
 if ($2) {
  $4 = HEAP32[$3>>2]|0;
  $5 = (_sqlite3OsSync($4,2)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $rc$1 = $5;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = (($pPager) + 80|0);
 $9 = (_sqlite3OsFileSize($7,$8)|0);
 $rc$1 = $9;
 STACKTOP = sp;return ($rc$1|0);
}
function _pagerUnlockAndRollback($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 do {
  if (!((($1<<24>>24) == 0) | (($1<<24>>24) == 6))) {
   $2 = ($1&255)>(1);
   if ($2) {
    _sqlite3BeginBenignMalloc();
    (_sqlite3PagerRollback($pPager)|0);
    _sqlite3EndBenignMalloc();
    break;
   }
   $3 = (($pPager) + 4|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    (_pager_end_transaction($pPager,0,0)|0);
   }
  }
 } while(0);
 _pager_unlock($pPager);
 STACKTOP = sp;return;
}
function _sqlite3OsClose($pId) {
 $pId = $pId|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pId>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_ii[$3 & 255]($pId)|0);
 HEAP32[$pId>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3PcacheClose($pCache$0$11$val) {
 $pCache$0$11$val = $pCache$0$11$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCache$0$11$val|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[((384 + 148|0))>>2]|0;
 FUNCTION_TABLE_vi[$1 & 255]($pCache$0$11$val);
 STACKTOP = sp;return;
}
function _sqlite3PagerRollback($pPager) {
 $pPager = $pPager|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(6);
 if ($2) {
  $3 = (($pPager) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($1&255)<(2);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $6 = (_pagerUseWal($pPager$idx$val)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $14 = (($pPager) + 64|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   $18 = ($1<<24>>24)==(2);
   $or$cond1 = $17 | $18;
   if (!($or$cond1)) {
    $25 = (_pager_playback($pPager,0)|0);
    $rc$0 = $25;
    break;
   }
   $19 = (_pager_end_transaction($pPager,0,0)|0);
   $20 = (($pPager) + 14|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   $23 = ($1&255)>(2);
   $or$cond = $22 & $23;
   if ($or$cond) {
    $24 = (($pPager) + 40|0);
    HEAP32[$24>>2] = 4;
    HEAP8[$0>>0] = 6;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   } else {
    $rc$0 = $19;
   }
  } else {
   $8 = (_sqlite3PagerSavepoint($pPager,2,-1)|0);
   $9 = (($pPager) + 18|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (_pager_end_transaction($pPager,$11,0)|0);
   $13 = ($8|0)==(0);
   $$ = $13 ? $12 : $8;
   $rc$0 = $$;
  }
 } while(0);
 $26 = (_pager_error($pPager,$rc$0)|0);
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _pager_end_transaction($pPager,$hasMaster,$bCommit) {
 $pPager = $pPager|0;
 $hasMaster = $hasMaster|0;
 $bCommit = $bCommit|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $pPager$idx$val = 0, $pPager$idx4 = 0, $pPager$idx4$val = 0, $rc$0 = 0, $rc$1 = 0, $rc$2 = 0, $rc$3 = 0, $rc2$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)<(2);
 if ($2) {
  $3 = (($pPager) + 16|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4&255)<(2);
  if ($5) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _releaseAllSavepoints($pPager);
 $6 = (($pPager) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $rc$1 = 0;
  } else {
   $10 = (_sqlite3IsMemJournal($8)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    _sqlite3OsClose($7);
    $rc$1 = 0;
    break;
   }
   $12 = (($pPager) + 5|0);
   $13 = HEAP8[$12>>0]|0;
   if ((($13<<24>>24) == 3)) {
    $14 = (($pPager) + 72|0);
    $15 = $14;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + 4)|0;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($17|0)==(0);
    $22 = ($20|0)==(0);
    $23 = $21 & $22;
    if ($23) {
     $rc$0 = 0;
    } else {
     $24 = (_sqlite3OsTruncate($7,0,0)|0);
     $rc$0 = $24;
    }
    $25 = $14;
    $26 = $25;
    HEAP32[$26>>2] = 0;
    $27 = (($25) + 4)|0;
    $28 = $27;
    HEAP32[$28>>2] = 0;
    $rc$1 = $rc$0;
    break;
   } else if (!((($13<<24>>24) == 1))) {
    $29 = (($pPager) + 4|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(0);
    $32 = ($13<<24>>24)==(5);
    $or$cond = $31 | $32;
    if ($or$cond) {
     $39 = (($pPager) + 12|0);
     $40 = HEAP8[$39>>0]|0;
     $not$ = ($40<<24>>24)==(0);
     _sqlite3OsClose($7);
     if (!($not$)) {
      $rc$1 = 0;
      break;
     }
     $41 = HEAP32[$pPager>>2]|0;
     $42 = (($pPager) + 172|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_sqlite3OsDelete($41,$43,0)|0);
     $rc$1 = $44;
     break;
    }
   }
   $33 = (_zeroJournalHdr($pPager,$hasMaster)|0);
   $34 = (($pPager) + 72|0);
   $35 = $34;
   $36 = $35;
   HEAP32[$36>>2] = 0;
   $37 = (($35) + 4)|0;
   $38 = $37;
   HEAP32[$38>>2] = 0;
   $rc$1 = $33;
  }
 } while(0);
 $45 = (($pPager) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 _sqlite3BitvecDestroy($46);
 HEAP32[$45>>2] = 0;
 $47 = (($pPager) + 44|0);
 HEAP32[$47>>2] = 0;
 $48 = (($pPager) + 204|0);
 $49 = HEAP32[$48>>2]|0;
 _sqlite3PcacheCleanAll($49);
 $50 = HEAP32[$48>>2]|0;
 $51 = (($pPager) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 _sqlite3PcacheTruncate($50,$52);
 $pPager$idx4 = (($pPager) + 208|0);
 $pPager$idx4$val = HEAP32[$pPager$idx4>>2]|0;
 $53 = (_pagerUseWal($pPager$idx4$val)|0);
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = ($rc$1|0)!=(0);
  $56 = ($bCommit|0)==(0);
  $or$cond2 = $55 | $56;
  if ($or$cond2) {
   $rc$2 = $rc$1;
  } else {
   $57 = (($pPager) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$51>>2]|0;
   $60 = ($58>>>0)>($59>>>0);
   if ($60) {
    $61 = (_pager_truncate($pPager,$59)|0);
    $rc$2 = $61;
   } else {
    $rc$2 = 0;
   }
  }
 } else {
  _sqlite3WalEndWriteTransaction($pPager$idx4$val);
  $rc$2 = $rc$1;
 }
 $62 = ($rc$2|0)!=(0);
 $63 = ($bCommit|0)==(0);
 $or$cond3 = $62 | $63;
 if ($or$cond3) {
  $rc$3 = $rc$2;
 } else {
  $64 = (($pPager) + 60|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   $rc$3 = 0;
  } else {
   $68 = (_sqlite3OsFileControl($65,22,0)|0);
   $69 = ($68|0)==(12);
   $$1 = $69 ? 0 : $68;
   $rc$3 = $$1;
  }
 }
 $70 = (($pPager) + 4|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = ($71<<24>>24)==(0);
 do {
  if ($72) {
   $pPager$idx$val = HEAP32[$pPager$idx4>>2]|0;
   $73 = (_pagerUseWal($pPager$idx$val)|0);
   $74 = ($73|0)==(0);
   if (!($74)) {
    $75 = (_sqlite3WalExclusiveMode($pPager$idx$val,0)|0);
    $76 = ($75|0)==(0);
    if ($76) {
     $rc2$1 = 0;
     break;
    }
   }
   $77 = (_pagerUnlockDb($pPager,1)|0);
   $78 = (($pPager) + 17|0);
   HEAP8[$78>>0] = 0;
   $rc2$1 = $77;
  } else {
   $rc2$1 = 0;
  }
 } while(0);
 HEAP8[$0>>0] = 1;
 $79 = (($pPager) + 18|0);
 HEAP8[$79>>0] = 0;
 $80 = ($rc$3|0)==(0);
 $81 = $80 ? $rc2$1 : $rc$3;
 $$0 = $81;
 STACKTOP = sp;return ($$0|0);
}
function _releaseAllSavepoints($pPager) {
 $pPager = $pPager|0;
 var $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ii$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($pPager) + 92|0);
  $ii$01 = 0;
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4) + (($ii$01*48)|0)|0) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   _sqlite3BitvecDestroy($6);
   $7 = (($ii$01) + 1)|0;
   $8 = HEAP32[$0>>2]|0;
   $9 = ($7|0)<($8|0);
   if ($9) {
    $ii$01 = $7;
   } else {
    break;
   }
  }
 }
 $10 = (($pPager) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 $$phi$trans$insert = (($pPager) + 68|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($12) {
  label = 6;
 } else {
  $$idx$val = HEAP32[$$pre>>2]|0;
  $13 = (_sqlite3IsMemJournal($$idx$val)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  _sqlite3OsClose($$pre);
 }
 $15 = (($pPager) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 _sqlite3_free($16);
 HEAP32[$15>>2] = 0;
 HEAP32[$0>>2] = 0;
 $17 = (($pPager) + 52|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3IsMemJournal($pJfd$0$0$val) {
 $pJfd$0$0$val = $pJfd$0$0$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pJfd$0$0$val|0)==(4496|0);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3OsTruncate($id,$0,$1) {
 $id = $id|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$id>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiii[$4 & 255]($id,$0,$1)|0);
 STACKTOP = sp;return ($5|0);
}
function _zeroJournalHdr($pPager,$doTruncate) {
 $pPager = $pPager|0;
 $doTruncate = $doTruncate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond3 = 0;
 var $rc$0 = 0, $rc$1 = 0, $rc$2 = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sz = sp;
 $0 = (($pPager) + 72|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)==(0);
 $8 = ($6|0)==(0);
 $9 = $7 & $8;
 if ($9) {
  $rc$2 = 0;
  STACKTOP = sp;return ($rc$2|0);
 }
 $10 = (($pPager) + 160|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($doTruncate|0)!=(0);
 $18 = ($13|0)==(0);
 $19 = ($16|0)==(0);
 $20 = $18 & $19;
 $or$cond = $17 | $20;
 $21 = (($pPager) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 if ($or$cond) {
  $23 = (_sqlite3OsTruncate($22,0,0)|0);
  $rc$0 = $23;
 } else {
  $24 = (_sqlite3OsWrite($22,4464,28,0,0)|0);
  $rc$0 = $24;
 }
 $25 = ($rc$0|0)==(0);
 if (!($25)) {
  $rc$2 = $rc$0;
  STACKTOP = sp;return ($rc$2|0);
 }
 $26 = (($pPager) + 7|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $29 = HEAP32[$21>>2]|0;
  $30 = (($pPager) + 11|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 | 16;
  $34 = (_sqlite3OsSync($29,$33)|0);
  $rc$1 = $34;
 } else {
  $rc$1 = 0;
 }
 $35 = ($rc$1|0)==(0);
 $36 = ($16|0)>(0);
 $37 = ($16|0)==(0);
 $38 = ($13>>>0)>(0);
 $39 = $37 & $38;
 $40 = $36 | $39;
 $or$cond1 = $35 & $40;
 if (!($or$cond1)) {
  $rc$2 = $rc$1;
  STACKTOP = sp;return ($rc$2|0);
 }
 $41 = HEAP32[$21>>2]|0;
 $42 = (_sqlite3OsFileSize($41,$sz)|0);
 $43 = ($42|0)==(0);
 $44 = $sz;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)>($16|0);
 $51 = ($49|0)==($16|0);
 $52 = ($46>>>0)>($13>>>0);
 $53 = $51 & $52;
 $54 = $50 | $53;
 $or$cond3 = $43 & $54;
 if (!($or$cond3)) {
  $rc$2 = $42;
  STACKTOP = sp;return ($rc$2|0);
 }
 $55 = HEAP32[$21>>2]|0;
 $56 = (_sqlite3OsTruncate($55,$13,$16)|0);
 $rc$2 = $56;
 STACKTOP = sp;return ($rc$2|0);
}
function _sqlite3OsDelete($pVfs,$zPath,$dirSync) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $dirSync = $dirSync|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiii[$1 & 255]($pVfs,$zPath,$dirSync)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3PcacheCleanAll($pCache) {
 $pCache = $pCache|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pCache>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $2 = $0;
 }
 while(1) {
  _sqlite3PcacheMakeClean($2);
  $3 = HEAP32[$pCache>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  } else {
   $2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function _pagerUseWal($pPager$0$55$val) {
 $pPager$0$55$val = $pPager$0$55$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPager$0$55$val|0)!=(0|0);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3WalEndWriteTransaction($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _walUnlockExclusive($pWal,0,1);
 HEAP8[$0>>0] = 0;
 $3 = (($pWal) + 47|0);
 HEAP8[$3>>0] = 0;
 STACKTOP = sp;return;
}
function _pager_truncate($pPager,$nPage) {
 $pPager = $pPager|0;
 $nPage = $nPage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $currentSize = 0, $or$cond = 0, $rc$0 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $currentSize = sp;
 $0 = (($pPager) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $4 = (($pPager) + 15|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255)>(3);
 $7 = ($5<<24>>24)==(0);
 $or$cond = $6 | $7;
 if (!($or$cond)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $8 = (($pPager) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3OsFileSize($1,$currentSize)|0);
 $11 = ($9|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = (___muldi3(($9|0),($12|0),($nPage|0),0)|0);
 $14 = tempRet0;
 $15 = ($10|0)==(0);
 if (!($15)) {
  $rc$1 = $10;
  STACKTOP = sp;return ($rc$1|0);
 }
 $16 = $currentSize;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)==($13|0);
 $23 = ($21|0)==($14|0);
 $24 = $22 & $23;
 if ($24) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $25 = ($21|0)>($14|0);
 $26 = ($21|0)==($14|0);
 $27 = ($18>>>0)>($13>>>0);
 $28 = $26 & $27;
 $29 = $25 | $28;
 if ($29) {
  $30 = HEAP32[$0>>2]|0;
  $31 = (_sqlite3OsTruncate($30,$13,$14)|0);
  $rc$0 = $31;
  label = 9;
 } else {
  $32 = (_i64Add(($18|0),($21|0),($9|0),($12|0))|0);
  $33 = tempRet0;
  $34 = ($33|0)>($14|0);
  $35 = ($33|0)==($14|0);
  $36 = ($32>>>0)>($13>>>0);
  $37 = $35 & $36;
  $38 = $34 | $37;
  if (!($38)) {
   $39 = (($pPager) + 200|0);
   $40 = HEAP32[$39>>2]|0;
   _memset(($40|0),0,($9|0))|0;
   $41 = HEAP32[$0>>2]|0;
   $42 = (_i64Subtract(($13|0),($14|0),($9|0),($12|0))|0);
   $43 = tempRet0;
   $44 = (_sqlite3OsWrite($41,$40,$9,$42,$43)|0);
   $rc$0 = $44;
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $45 = ($rc$0|0)==(0);
  if (!($45)) {
   $rc$1 = $rc$0;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $46 = (($pPager) + 32|0);
 HEAP32[$46>>2] = $nPage;
 $rc$1 = 0;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3WalExclusiveMode($pWal,$op) {
 $pWal = $pWal|0;
 $op = $op|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($op|0)==(0);
 if (!($0)) {
  $12 = ($op|0)>(0);
  if ($12) {
   $13 = (($pWal) + 40|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = (($15) + 3)|0;
   _walUnlockShared($pWal,$16);
   $17 = (($pWal) + 43|0);
   HEAP8[$17>>0] = 1;
   $rc$0 = 1;
   STACKTOP = sp;return ($rc$0|0);
  } else {
   $18 = (($pWal) + 43|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   $21 = $20&1;
   $rc$0 = $21;
   STACKTOP = sp;return ($rc$0|0);
  }
 }
 $1 = (($pWal) + 43|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 HEAP8[$1>>0] = 0;
 $4 = (($pWal) + 40|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($6) + 3)|0;
 $8 = (_walLockShared($pWal,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = HEAP8[$1>>0]|0;
  $phitmp = ($$pre<<24>>24)==(0);
  $11 = $phitmp;
 } else {
  HEAP8[$1>>0] = 1;
  $11 = 0;
 }
 $10 = $11&1;
 $rc$0 = $10;
 STACKTOP = sp;return ($rc$0|0);
}
function _pagerUnlockDb($pPager,$eLock) {
 $pPager = $pPager|0;
 $eLock = $eLock|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $rc$0 = 0;
 } else {
  $4 = (_sqlite3OsUnlock($1,$eLock)|0);
  $5 = (($pPager) + 16|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(5);
  if ($7) {
   $rc$0 = $4;
  } else {
   $8 = $eLock&255;
   HEAP8[$5>>0] = $8;
   $rc$0 = $4;
  }
 }
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3OsUnlock($id,$lockType) {
 $id = $id|0;
 $lockType = $lockType|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($id,$lockType)|0);
 STACKTOP = sp;return ($3|0);
}
function _walLockShared($pWal,$lockIdx) {
 $pWal = $pWal|0;
 $lockIdx = $lockIdx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pWal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3OsShmLock($4,$lockIdx,1,6)|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _walUnlockShared($pWal,$lockIdx) {
 $pWal = $pWal|0;
 $lockIdx = $lockIdx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pWal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (_sqlite3OsShmLock($4,$lockIdx,1,5)|0);
 STACKTOP = sp;return;
}
function _sqlite3OsShmLock($id,$offset,$n,$flags) {
 $id = $id|0;
 $offset = $offset|0;
 $n = $n|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiii[$2 & 255]($id,$offset,$n,$flags)|0);
 STACKTOP = sp;return ($3|0);
}
function _walUnlockExclusive($pWal,$lockIdx,$n) {
 $pWal = $pWal|0;
 $lockIdx = $lockIdx|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pWal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (_sqlite3OsShmLock($4,$lockIdx,$n,9)|0);
 STACKTOP = sp;return;
}
function _sqlite3OsSync($id,$flags) {
 $id = $id|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($id,$flags)|0);
 STACKTOP = sp;return ($3|0);
}
function _memjrnlClose($pJfd) {
 $pJfd = $pJfd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_memjrnlTruncate($pJfd,0,0)|0);
 STACKTOP = sp;return 0;
}
function _memjrnlRead($pJfd,$zBuf,$iAmt,$0,$1) {
 $pJfd = $pJfd|0;
 $zBuf = $zBuf|0;
 $iAmt = $iAmt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iChunkOffset$0 = 0, $nRead$0 = 0, $nRead$0$ = 0, $or$cond = 0, $or$cond4 = 0, $or$cond47 = 0, $or$cond5 = 0, $pChunk$0 = 0;
 var $pChunk$06 = 0, $pChunk$09 = 0, $pChunk$1 = 0, $pChunk$2 = 0, $pChunk$3 = 0, $zOut$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pJfd) + 24|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)!=($0|0);
 $10 = ($8|0)!=($1|0);
 $11 = $9 | $10;
 $12 = ($0|0)==(0);
 $13 = ($1|0)==(0);
 $14 = $12 & $13;
 $or$cond = $11 | $14;
 if ($or$cond) {
  $15 = (($pJfd) + 4|0);
  $pChunk$06 = HEAP32[$15>>2]|0;
  $16 = ($pChunk$06|0)==(0|0);
  $17 = ($1|0)<(0);
  $18 = ($1|0)==(0);
  $19 = ($0>>>0)<(1020);
  $20 = $18 & $19;
  $21 = $17 | $20;
  $or$cond47 = $16 | $21;
  if ($or$cond47) {
   $pChunk$1 = $pChunk$06;
  } else {
   $22 = 1020;$23 = 0;$pChunk$09 = $pChunk$06;
   while(1) {
    $24 = (_i64Add(($22|0),($23|0),1020,0)|0);
    $25 = tempRet0;
    $pChunk$0 = HEAP32[$pChunk$09>>2]|0;
    $26 = ($pChunk$0|0)==(0|0);
    $27 = ($25|0)>($1|0);
    $28 = ($25|0)==($1|0);
    $29 = ($24>>>0)>($0>>>0);
    $30 = $28 & $29;
    $31 = $27 | $30;
    $or$cond4 = $26 | $31;
    if ($or$cond4) {
     $pChunk$1 = $pChunk$0;
     break;
    } else {
     $22 = $24;$23 = $25;$pChunk$09 = $pChunk$0;
    }
   }
  }
 } else {
  $32 = (($pJfd) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $pChunk$1 = $33;
 }
 $34 = (___remdi3(($0|0),($1|0),1020,0)|0);
 $35 = tempRet0;
 $iChunkOffset$0 = $34;$nRead$0 = $iAmt;$pChunk$2 = $pChunk$1;$zOut$0 = $zBuf;
 while(1) {
  $36 = (1020 - ($iChunkOffset$0))|0;
  $37 = ($nRead$0|0)<($36|0);
  $nRead$0$ = $37 ? $nRead$0 : $36;
  $38 = ((($pChunk$2) + ($iChunkOffset$0)|0) + 4|0);
  _memcpy(($zOut$0|0),($38|0),($nRead$0$|0))|0;
  $39 = (($nRead$0) - ($36))|0;
  $40 = ($39|0)>(-1);
  if (!($40)) {
   $pChunk$3 = $pChunk$2;
   label = 8;
   break;
  }
  $41 = (($zOut$0) + ($nRead$0$)|0);
  $42 = HEAP32[$pChunk$2>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = ($39|0)>(0);
  $or$cond5 = $43 & $44;
  if ($or$cond5) {
   $iChunkOffset$0 = 0;$nRead$0 = $39;$pChunk$2 = $42;$zOut$0 = $41;
  } else {
   $pChunk$3 = $42;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $45 = ($iAmt|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = (_i64Add(($iAmt|0),($46|0),($0|0),($1|0))|0);
  $48 = tempRet0;
  $49 = $2;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = (($pJfd) + 32|0);
  HEAP32[$53>>2] = $pChunk$3;
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _memjrnlWrite($pJfd,$zBuf,$iAmt,$0,$1) {
 $pJfd = $pJfd|0;
 $zBuf = $zBuf|0;
 $iAmt = $iAmt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$c1$pre$phiZZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $nWrite$0$ = 0, $nWrite$03 = 0, $zWrite$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($iAmt|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pJfd) + 8|0);
 $4 = (($pJfd) + 16|0);
 $5 = (($pJfd) + 4|0);
 $6 = $3;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $13 = $8;$14 = $11;$nWrite$03 = $iAmt;$zWrite$02 = $zBuf;
 while(1) {
  $12 = HEAP32[$4>>2]|0;
  $15 = (___remdi3(($13|0),($14|0),1020,0)|0);
  $16 = tempRet0;
  $17 = (1020 - ($15))|0;
  $18 = ($nWrite$03|0)<($17|0);
  $nWrite$0$ = $18 ? $nWrite$03 : $17;
  $19 = ($15|0)==(0);
  if ($19) {
   $20 = (_sqlite3_malloc(1024)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$0 = 3082;
    label = 10;
    break;
   }
   HEAP32[$20>>2] = 0;
   $22 = ($12|0)==(0|0);
   if ($22) {
    HEAP32[$5>>2] = $20;
    $$c1$pre$phiZZ2D = $20;
   } else {
    HEAP32[$12>>2] = $20;
    $$c1$pre$phiZZ2D = $20;
   }
   HEAP32[$4>>2] = $$c1$pre$phiZZ2D;
   $24 = $$c1$pre$phiZZ2D;
  } else {
   $24 = $12;
  }
  $23 = ((($24) + ($15)|0) + 4|0);
  _memcpy(($23|0),($zWrite$02|0),($nWrite$0$|0))|0;
  $25 = (($zWrite$02) + ($nWrite$0$)|0);
  $26 = (($nWrite$03) - ($nWrite$0$))|0;
  $27 = ($nWrite$0$|0)<(0);
  $28 = $27 << 31 >> 31;
  $29 = $3;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (_i64Add(($31|0),($34|0),($nWrite$0$|0),($28|0))|0);
  $36 = tempRet0;
  $37 = $3;
  $38 = $37;
  HEAP32[$38>>2] = $35;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = ($26|0)>(0);
  if ($41) {
   $13 = $35;$14 = $36;$nWrite$03 = $26;$zWrite$02 = $25;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _memjrnlTruncate($pJfd,$0,$1) {
 $pJfd = $pJfd|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pChunk$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pJfd) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $pChunk$01 = $3;
  while(1) {
   $5 = HEAP32[$pChunk$01>>2]|0;
   _sqlite3_free($pChunk$01);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $pChunk$01 = $5;
   }
  }
 }
 _sqlite3MemJournalOpen($pJfd);
 STACKTOP = sp;return 0;
}
function _memjrnlSync($NotUsed,$NotUsed2) {
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _memjrnlFileSize($pJfd,$pSize) {
 $pJfd = $pJfd|0;
 $pSize = $pSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pJfd) + 8|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $pSize;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return 0;
}
function _sqlite3MemJournalOpen($pJfd) {
 $pJfd = $pJfd|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$pJfd+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$pJfd>>2] = 4496;
 STACKTOP = sp;return;
}
function _sqlite3PagerSavepoint($pPager,$op,$iSavepoint) {
 $pPager = $pPager|0;
 $op = $op|0;
 $iSavepoint = $iSavepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ii$01 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $rc$0 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $rc$1 = $1;
  STACKTOP = sp;return ($rc$1|0);
 }
 $3 = (($pPager) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>($iSavepoint|0);
 if (!($5)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $6 = ($op|0)==(1);
 $7 = $6&1;
 $8 = $7 ^ 1;
 $9 = (($8) + ($iSavepoint))|0;
 $10 = ($9|0)<($4|0);
 if ($10) {
  $11 = (($pPager) + 92|0);
  $ii$01 = $9;
  while(1) {
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12) + (($ii$01*48)|0)|0) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   _sqlite3BitvecDestroy($14);
   $15 = (($ii$01) + 1)|0;
   $16 = HEAP32[$3>>2]|0;
   $17 = ($15|0)<($16|0);
   if ($17) {
    $ii$01 = $15;
   } else {
    break;
   }
  }
 }
 HEAP32[$3>>2] = $9;
 if (!($6)) {
  $pPager$idx = (($pPager) + 208|0);
  $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
  $27 = (_pagerUseWal($pPager$idx$val)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = (($pPager) + 64|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $rc$1 = 0;
    STACKTOP = sp;return ($rc$1|0);
   }
  }
  $33 = ($9|0)==(0);
  if ($33) {
   $38 = 0;
  } else {
   $34 = (($9) + -1)|0;
   $35 = (($pPager) + 92|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + (($34*48)|0)|0);
   $38 = $37;
  }
  $39 = (_pagerPlaybackSavepoint($pPager,$38)|0);
  $rc$1 = $39;
  STACKTOP = sp;return ($rc$1|0);
 }
 $18 = ($9|0)==(0);
 if (!($18)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $19 = (($pPager) + 68|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $23 = (_sqlite3IsMemJournal($21)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $rc$0 = 0;
 } else {
  $25 = (_sqlite3OsTruncate($20,0,0)|0);
  $rc$0 = $25;
 }
 $26 = (($pPager) + 52|0);
 HEAP32[$26>>2] = 0;
 $rc$1 = $rc$0;
 STACKTOP = sp;return ($rc$1|0);
}
function _pager_playback($pPager,$isHot) {
 $pPager = $pPager|0;
 $isHot = $isHot|0;
 var $$pre66 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $mxPg = 0;
 var $nPlayback$0 = 0, $nPlayback$0$phi = 0, $nPlayback$135 = 0, $nPlayback$2 = 0, $nPlayback$2$ph = 0, $nPlayback$2$ph9 = 0, $nPlayback$211 = 0, $nPlayback$27131823 = 0, $nRec = 0, $needPagerReset$0 = 0, $needPagerReset$0$phi = 0, $needPagerReset$134 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $pPager$idx$val = 0, $rc$0 = 0, $rc$1 = 0, $rc$1$ph = 0, $rc$5 = 0;
 var $res = 0, $szJ = 0, $u$033 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $szJ = sp;
 $nRec = sp + 24|0;
 $mxPg = sp + 20|0;
 $res = sp + 16|0;
 $0 = HEAP32[$pPager>>2]|0;
 HEAP32[$mxPg>>2] = 0;
 HEAP32[$res>>2] = 1;
 $1 = (($pPager) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3OsFileSize($2,$szJ)|0);
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = (($pPager) + 200|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$pPager>>2]|0;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1)|0;
   $12 = (_readMasterJournal($7,$6,$11)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = HEAP8[$6>>0]|0;
    $15 = ($14<<24>>24)==(0);
    if ($15) {
     $rc$0 = 0;
    } else {
     $16 = (_sqlite3OsAccess($0,$6,0,$res)|0);
     $rc$0 = $16;
    }
    $17 = ($rc$0|0)!=(0);
    $18 = HEAP32[$res>>2]|0;
    $19 = ($18|0)==(0);
    $or$cond = $17 | $19;
    L7: do {
     if ($or$cond) {
      $nPlayback$2 = 0;$rc$1 = $rc$0;
      label = 25;
     } else {
      $20 = (($pPager) + 72|0);
      $21 = $20;
      $22 = $21;
      HEAP32[$22>>2] = 0;
      $23 = (($21) + 4)|0;
      $24 = $23;
      HEAP32[$24>>2] = 0;
      $25 = (($pPager) + 148|0);
      $26 = (($pPager) + 152|0);
      $27 = (($pPager) + 80|0);
      $28 = (($pPager) + 24|0);
      $nPlayback$0 = 0;$needPagerReset$0 = $isHot;
      L9: while(1) {
       $29 = $szJ;
       $30 = $29;
       $31 = HEAP32[$30>>2]|0;
       $32 = (($29) + 4)|0;
       $33 = $32;
       $34 = HEAP32[$33>>2]|0;
       $35 = (_readJournalHdr($pPager,$isHot,$31,$34,$nRec,$mxPg)|0);
       if ((($35|0) == 101)) {
        $nPlayback$2$ph9 = $nPlayback$0;
        break;
       } else if (!((($35|0) == 0))) {
        $nPlayback$2 = $nPlayback$0;$rc$1 = $35;
        label = 25;
        break L7;
       }
       $36 = HEAP32[$nRec>>2]|0;
       $37 = ($36|0)==(-1);
       if ($37) {
        $38 = $szJ;
        $39 = $38;
        $40 = HEAP32[$39>>2]|0;
        $41 = (($38) + 4)|0;
        $42 = $41;
        $43 = HEAP32[$42>>2]|0;
        $44 = HEAP32[$25>>2]|0;
        $45 = (_i64Subtract(($40|0),($43|0),($44|0),0)|0);
        $46 = tempRet0;
        $47 = HEAP32[$26>>2]|0;
        $48 = (($47) + 8)|0;
        $49 = ($48|0)<(0);
        $50 = $49 << 31 >> 31;
        $51 = (___divdi3(($45|0),($46|0),($48|0),($50|0))|0);
        $52 = tempRet0;
        HEAP32[$nRec>>2] = $51;
        $54 = $51;
       } else {
        $54 = $36;
       }
       $53 = $54 | $isHot;
       $55 = ($53|0)==(0);
       if ($55) {
        $62 = $27;
        $63 = $62;
        $64 = HEAP32[$63>>2]|0;
        $65 = (($62) + 4)|0;
        $66 = $65;
        $67 = HEAP32[$66>>2]|0;
        $68 = HEAP32[$25>>2]|0;
        $69 = (_i64Add(($68|0),0,($64|0),($67|0))|0);
        $70 = tempRet0;
        $71 = $20;
        $72 = $71;
        $73 = HEAP32[$72>>2]|0;
        $74 = (($71) + 4)|0;
        $75 = $74;
        $76 = HEAP32[$75>>2]|0;
        $77 = ($69|0)==($73|0);
        $78 = ($70|0)==($76|0);
        $79 = $77 & $78;
        if ($79) {
         $80 = $szJ;
         $81 = $80;
         $82 = HEAP32[$81>>2]|0;
         $83 = (($80) + 4)|0;
         $84 = $83;
         $85 = HEAP32[$84>>2]|0;
         $86 = (_i64Subtract(($82|0),($85|0),($69|0),($70|0))|0);
         $87 = tempRet0;
         $88 = HEAP32[$26>>2]|0;
         $89 = (($88) + 8)|0;
         $90 = ($89|0)<(0);
         $91 = $90 << 31 >> 31;
         $92 = (___divdi3(($86|0),($87|0),($89|0),($91|0))|0);
         $93 = tempRet0;
         HEAP32[$nRec>>2] = $92;
         $104 = $92;$95 = $69;$96 = $68;$98 = $70;
        } else {
         $104 = $54;$95 = $73;$96 = $68;$98 = $76;
        }
       } else {
        $56 = $20;
        $57 = $56;
        $58 = HEAP32[$57>>2]|0;
        $59 = (($56) + 4)|0;
        $60 = $59;
        $61 = HEAP32[$60>>2]|0;
        $$pre66 = HEAP32[$25>>2]|0;
        $104 = $54;$95 = $58;$96 = $$pre66;$98 = $61;
       }
       $94 = ($95|0)==($96|0);
       $97 = ($98|0)==(0);
       $99 = $94 & $97;
       if ($99) {
        $100 = HEAP32[$mxPg>>2]|0;
        $101 = (_pager_truncate($pPager,$100)|0);
        $102 = ($101|0)==(0);
        if (!($102)) {
         $nPlayback$2$ph = $nPlayback$0;$rc$1$ph = $101;
         label = 23;
         break L1;
        }
        HEAP32[$28>>2] = $100;
       }
       $103 = ($104|0)==(0);
       if ($103) {
        $needPagerReset$0$phi = $needPagerReset$0;$nPlayback$0$phi = $nPlayback$0;$needPagerReset$0 = $needPagerReset$0$phi;$nPlayback$0 = $nPlayback$0$phi;
        continue;
       } else {
        $nPlayback$135 = $nPlayback$0;$needPagerReset$134 = $needPagerReset$0;$u$033 = 0;
       }
       while(1) {
        $105 = ($needPagerReset$134|0)==(0);
        if (!($105)) {
         _pager_reset($pPager);
        }
        $106 = (_pager_playback_one_page($pPager,$20,0,1,0)|0);
        if ((($106|0) == 522)) {
         $nPlayback$2$ph9 = $nPlayback$135;
         break L9;
        } else if ((($106|0) == 101)) {
         break;
        } else if (!((($106|0) == 0))) {
         $nPlayback$2 = $nPlayback$135;$rc$1 = $106;
         label = 25;
         break L7;
        }
        $107 = (($nPlayback$135) + 1)|0;
        $108 = (($u$033) + 1)|0;
        $109 = ($108>>>0)<($104>>>0);
        if ($109) {
         $nPlayback$135 = $107;$needPagerReset$134 = 0;$u$033 = $108;
        } else {
         $nPlayback$0 = $107;$needPagerReset$0 = 0;
         continue L9;
        }
       }
       $110 = $szJ;
       $111 = $110;
       $112 = HEAP32[$111>>2]|0;
       $113 = (($110) + 4)|0;
       $114 = $113;
       $115 = HEAP32[$114>>2]|0;
       $116 = $20;
       $117 = $116;
       HEAP32[$117>>2] = $112;
       $118 = (($116) + 4)|0;
       $119 = $118;
       HEAP32[$119>>2] = $115;
       $nPlayback$0 = $nPlayback$135;$needPagerReset$0 = 0;
      }
      $123 = (($pPager) + 12|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = (($pPager) + 17|0);
      HEAP8[$125>>0] = $124;
      $nPlayback$211 = $nPlayback$2$ph9;
     }
    } while(0);
    if ((label|0) == 25) {
     $126 = (($pPager) + 12|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = (($pPager) + 17|0);
     HEAP8[$128>>0] = $127;
     $129 = ($rc$1|0)==(0);
     if ($129) {
      $nPlayback$211 = $nPlayback$2;
     } else {
      $nPlayback$27131823 = $nPlayback$2;$rc$5 = $rc$1;
      break;
     }
    }
    $130 = HEAP32[$5>>2]|0;
    $131 = HEAP32[$1>>2]|0;
    $132 = HEAP32[$pPager>>2]|0;
    $133 = (($132) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + 1)|0;
    $136 = (_readMasterJournal($131,$130,$135)|0);
    $137 = ($136|0)==(0);
    if ($137) {
     $138 = (($pPager) + 15|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = ($139&255)>(3);
     $141 = ($139<<24>>24)==(0);
     $or$cond3 = $140 | $141;
     if ($or$cond3) {
      $142 = (_sqlite3PagerSync($pPager,0)|0);
      $143 = ($142|0)==(0);
      if (!($143)) {
       $nPlayback$27131823 = $nPlayback$211;$rc$5 = $142;
       break;
      }
     }
     $144 = HEAP8[$130>>0]|0;
     $145 = ($144<<24>>24)!=(0);
     $146 = $145&1;
     $147 = (_pager_end_transaction($pPager,$146,0)|0);
     $148 = ($147|0)==(0);
     if ($148) {
      $149 = HEAP8[$130>>0]|0;
      $150 = ($149<<24>>24)==(0);
      if ($150) {
       $nPlayback$27131823 = $nPlayback$211;$rc$5 = 0;
      } else {
       $151 = HEAP32[$res>>2]|0;
       $152 = ($151|0)==(0);
       if ($152) {
        $nPlayback$27131823 = $nPlayback$211;$rc$5 = 0;
       } else {
        $pPager$idx$val = HEAP32[$pPager>>2]|0;
        $153 = (_pager_delmaster($pPager$idx$val,$130)|0);
        $nPlayback$27131823 = $nPlayback$211;$rc$5 = $153;
       }
      }
     } else {
      $nPlayback$27131823 = $nPlayback$211;$rc$5 = $147;
     }
    } else {
     $nPlayback$27131823 = $nPlayback$211;$rc$5 = $136;
    }
   } else {
    $nPlayback$2$ph = 0;$rc$1$ph = $12;
    label = 23;
   }
  } else {
   $nPlayback$2$ph = 0;$rc$1$ph = $3;
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  $120 = (($pPager) + 12|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = (($pPager) + 17|0);
  HEAP8[$122>>0] = $121;
  $nPlayback$27131823 = $nPlayback$2$ph;$rc$5 = $rc$1$ph;
 }
 $154 = ($isHot|0)==(0);
 $155 = ($nPlayback$27131823|0)==(0);
 $or$cond4 = $154 | $155;
 if ($or$cond4) {
  _setSectorSize($pPager);
  STACKTOP = sp;return ($rc$5|0);
 }
 $156 = (($pPager) + 172|0);
 $157 = HEAP32[$156>>2]|0;
 HEAP32[$vararg_buffer>>2] = $nPlayback$27131823;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $157;
 _sqlite3_log(539,4576,$vararg_buffer);
 _setSectorSize($pPager);
 STACKTOP = sp;return ($rc$5|0);
}
function _readMasterJournal($pJrnl,$zMaster,$nMaster) {
 $pJrnl = $pJrnl|0;
 $zMaster = $zMaster|0;
 $nMaster = $nMaster|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $aMagic = 0, $cksum = 0, $cksum$promoted = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0, $szJ = 0, $u$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $len = sp + 12|0;
 $szJ = sp;
 $cksum = sp + 8|0;
 $aMagic = sp + 16|0;
 HEAP8[$zMaster>>0] = 0;
 $0 = (_sqlite3OsFileSize($pJrnl,$szJ)|0);
 $1 = ($0|0)!=(0);
 $2 = $szJ;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(0);
 $9 = ($7|0)==(0);
 $10 = ($4>>>0)<(16);
 $11 = $9 & $10;
 $12 = $8 | $11;
 $or$cond = $1 | $12;
 if ($or$cond) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_i64Add(($4|0),($7|0),-16,-1)|0);
 $14 = tempRet0;
 $15 = (_read32bits($pJrnl,$13,$14,$len)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$len>>2]|0;
 $18 = ($17>>>0)>=($nMaster>>>0);
 $19 = ($17|0)==(0);
 $or$cond3 = $18 | $19;
 if ($or$cond3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $szJ;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (_i64Add(($22|0),($25|0),-12,-1)|0);
 $27 = tempRet0;
 $28 = (_read32bits($pJrnl,$26,$27,$cksum)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = $szJ;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Add(($32|0),($35|0),-8,-1)|0);
 $37 = tempRet0;
 $38 = (_sqlite3OsRead($pJrnl,$aMagic,8,$36,$37)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (_memcmp($aMagic,4608,8)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = $szJ;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_i64Add(($44|0),($47|0),-16,-1)|0);
 $49 = tempRet0;
 $50 = (_i64Subtract(($48|0),($49|0),($17|0),0)|0);
 $51 = tempRet0;
 $52 = (_sqlite3OsRead($pJrnl,$zMaster,$17,$50,$51)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $$0 = $52;
  STACKTOP = sp;return ($$0|0);
 }
 $cksum$promoted = HEAP32[$cksum>>2]|0;
 $58 = $cksum$promoted;$u$04 = 0;
 while(1) {
  $54 = (($zMaster) + ($u$04)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = (($58) - ($56))|0;
  $59 = (($u$04) + 1)|0;
  $60 = ($59>>>0)<($17>>>0);
  if ($60) {
   $58 = $57;$u$04 = $59;
  } else {
   break;
  }
 }
 HEAP32[$cksum>>2] = $57;
 $phitmp = ($58|0)==($56|0);
 if ($phitmp) {
  $62 = $17;
 } else {
  HEAP32[$len>>2] = 0;
  $62 = 0;
 }
 $61 = (($zMaster) + ($62)|0);
 HEAP8[$61>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsAccess($pVfs,$zPath,$flags,$pResOut) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $flags = $flags|0;
 $pResOut = $pResOut|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 255]($pVfs,$zPath,$flags,$pResOut)|0);
 STACKTOP = sp;return ($2|0);
}
function _readJournalHdr($pPager,$isHot,$0,$1,$pNRec,$pDbSize) {
 $pPager = $pPager|0;
 $isHot = $isHot|0;
 $0 = $0|0;
 $1 = $1|0;
 $pNRec = $pNRec|0;
 $pDbSize = $pDbSize|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre4 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aMagic = 0, $iPageSize = 0, $iSectorSize = 0, $or$cond = 0, $or$cond1 = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aMagic = sp + 8|0;
 $iPageSize = sp + 4|0;
 $iSectorSize = sp;
 $2 = (_journalHdrOffset($pPager)|0);
 $3 = tempRet0;
 $4 = (($pPager) + 72|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $2;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($pPager) + 148|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_i64Add(($10|0),0,($2|0),($3|0))|0);
 $12 = tempRet0;
 $13 = ($12|0)>($1|0);
 $14 = ($12|0)==($1|0);
 $15 = ($11>>>0)>($0>>>0);
 $16 = $14 & $15;
 $17 = $13 | $16;
 if ($17) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ($isHot|0)==(0);
 if ($18) {
  $19 = (($pPager) + 80|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($2|0)==($22|0);
  $27 = ($3|0)==($25|0);
  $28 = $26 & $27;
  if ($28) {
   $$pre4 = (($pPager) + 64|0);
   $$pre$phiZ2D = $$pre4;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $29 = (($pPager) + 64|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_sqlite3OsRead($30,$aMagic,8,$2,$3)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   STACKTOP = sp;return ($$0|0);
  }
  $33 = (_memcmp($aMagic,4608,8)|0);
  $34 = ($33|0)==(0);
  if ($34) {
   $$pre$phiZ2D = $29;
  } else {
   $$0 = 101;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = (_i64Add(($2|0),($3|0),8,0)|0);
 $37 = tempRet0;
 $38 = (_read32bits($35,$36,$37,$pNRec)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = HEAP32[$$pre$phiZ2D>>2]|0;
 $41 = (_i64Add(($2|0),($3|0),12,0)|0);
 $42 = tempRet0;
 $43 = (($pPager) + 48|0);
 $44 = (_read32bits($40,$41,$42,$43)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[$$pre$phiZ2D>>2]|0;
 $47 = (_i64Add(($2|0),($3|0),16,0)|0);
 $48 = tempRet0;
 $49 = (_read32bits($46,$47,$48,$pDbSize)|0);
 $50 = ($49|0)==(0);
 if (!($50)) {
  $$0 = $49;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = $4;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = ($53|0)==(0);
 $58 = ($56|0)==(0);
 $59 = $57 & $58;
 do {
  if ($59) {
   $60 = HEAP32[$$pre$phiZ2D>>2]|0;
   $61 = (_i64Add(($2|0),($3|0),20,0)|0);
   $62 = tempRet0;
   $63 = (_read32bits($60,$61,$62,$iSectorSize)|0);
   $64 = ($63|0)==(0);
   if (!($64)) {
    $$0 = $63;
    STACKTOP = sp;return ($$0|0);
   }
   $65 = HEAP32[$$pre$phiZ2D>>2]|0;
   $66 = (_i64Add(($2|0),($3|0),24,0)|0);
   $67 = tempRet0;
   $68 = (_read32bits($65,$66,$67,$iPageSize)|0);
   $69 = ($68|0)==(0);
   if (!($69)) {
    $$0 = $68;
    STACKTOP = sp;return ($$0|0);
   }
   $70 = HEAP32[$iPageSize>>2]|0;
   $71 = ($70|0)==(0);
   if ($71) {
    $72 = (($pPager) + 152|0);
    $73 = HEAP32[$72>>2]|0;
    HEAP32[$iPageSize>>2] = $73;
    $75 = $73;
   } else {
    $75 = $70;
   }
   $74 = ($75>>>0)<(512);
   if ($74) {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   }
   $76 = HEAP32[$iSectorSize>>2]|0;
   $77 = ($76>>>0)<(32);
   $78 = ($75>>>0)>(65536);
   $or$cond = $77 | $78;
   $79 = ($76>>>0)>(65536);
   $or$cond1 = $or$cond | $79;
   if ($or$cond1) {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   }
   $80 = (($75) + -1)|0;
   $81 = $80 & $75;
   $82 = ($81|0)==(0);
   if (!($82)) {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   }
   $83 = (($76) + -1)|0;
   $84 = $83 & $76;
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = (_sqlite3PagerSetPagesize($pPager,$iPageSize,-1)|0);
    HEAP32[$9>>2] = $76;
    $87 = $4;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = (($87) + 4)|0;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;$94 = $92;$95 = $76;$rc$2 = $86;
    break;
   } else {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$pre2 = HEAP32[$9>>2]|0;
   $93 = $53;$94 = $56;$95 = $$pre2;$rc$2 = 0;
  }
 } while(0);
 $96 = (_i64Add(($93|0),($94|0),($95|0),0)|0);
 $97 = tempRet0;
 $98 = $4;
 $99 = $98;
 HEAP32[$99>>2] = $96;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $97;
 $$0 = $rc$2;
 STACKTOP = sp;return ($$0|0);
}
function _pager_playback_one_page($pPager,$pOffset,$pDone,$isMainJrnl,$isSavepnt) {
 $pPager = $pPager|0;
 $pOffset = $pOffset|0;
 $pDone = $pDone|0;
 $isMainJrnl = $isMainJrnl|0;
 $isSavepnt = $isSavepnt|0;
 var $$0 = 0, $$in = 0, $$pr = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cksum = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond1 = 0;
 var $pPager$idx = 0, $pPager$idx$val = 0, $pPager$idx2 = 0, $pPager$idx2$val = 0, $pPager$idx3$val = 0, $pPager$idx4 = 0, $pPager$idx4$val = 0, $pPg = 0, $pgno = 0, $rc$2$ph = 0, $rc$25 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPg = sp + 8|0;
 $pgno = sp + 4|0;
 $cksum = sp;
 $0 = (($pPager) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($isMainJrnl|0)!=(0);
 $3 = (($pPager) + 64|0);
 $4 = (($pPager) + 68|0);
 $$in = $2 ? $3 : $4;
 $5 = HEAP32[$$in>>2]|0;
 $6 = $pOffset;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_read32bits($5,$8,$11,$pgno)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($pPager) + 152|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $pOffset;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_i64Add(($18|0),($21|0),4,0)|0);
 $23 = tempRet0;
 $24 = (_sqlite3OsRead($5,$1,$15,$22,$23)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$14>>2]|0;
 $27 = $isMainJrnl << 2;
 $28 = (($27) + 4)|0;
 $29 = (($28) + ($26))|0;
 $30 = ($29|0)<(0);
 $31 = $30 << 31 >> 31;
 $32 = $pOffset;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (_i64Add(($29|0),($31|0),($34|0),($37|0))|0);
 $39 = tempRet0;
 $40 = $pOffset;
 $41 = $40;
 HEAP32[$41>>2] = $38;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = HEAP32[$pgno>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[1648>>2]|0;
 $47 = (($46|0) / ($26|0))&-1;
 $48 = (($47) + 1)|0;
 $49 = ($44|0)==($48|0);
 if ($49) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (($pPager) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($44>>>0)>($51>>>0);
 if ($52) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (_sqlite3BitvecTest($pDone,$44)|0);
 $54 = ($53|0)==(0);
 if (!($54)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($2) {
  $55 = (_i64Add(($38|0),($39|0),-4,-1)|0);
  $56 = tempRet0;
  $57 = (_read32bits($5,$55,$56,$cksum)|0);
  $58 = ($57|0)==(0);
  if (!($58)) {
   $$0 = $57;
   STACKTOP = sp;return ($$0|0);
  }
  $59 = ($isSavepnt|0)==(0);
  if ($59) {
   $pPager$idx2 = (($pPager) + 48|0);
   $pPager$idx2$val = HEAP32[$pPager$idx2>>2]|0;
   $pPager$idx3$val = HEAP32[$14>>2]|0;
   $60 = (_pager_cksum($pPager$idx2$val,$pPager$idx3$val,$1)|0);
   $61 = HEAP32[$cksum>>2]|0;
   $62 = ($60|0)==($61|0);
   if (!($62)) {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $63 = ($pDone|0)==(0|0);
 if (!($63)) {
  $64 = (_sqlite3BitvecSet($pDone,$44)|0);
  $65 = ($64|0)==(0);
  if (!($65)) {
   $$0 = $64;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $66 = ($44|0)==(1);
 if ($66) {
  $67 = (($pPager) + 142|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($1) + 20|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = ($69|0)==($72|0);
  if (!($73)) {
   $74 = $71&255;
   HEAP16[$67>>1] = $74;
  }
 }
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $75 = (_pagerUseWal($pPager$idx$val)|0);
 $76 = ($75|0)==(0);
 if ($76) {
  $pPager$idx4 = (($pPager) + 204|0);
  $pPager$idx4$val = HEAP32[$pPager$idx4>>2]|0;
  $77 = (_pager_lookup($pPager$idx4$val,$44)|0);
  $78 = $77;
 } else {
  $78 = 0;
 }
 HEAP32[$pPg>>2] = $78;
 if ($2) {
  $79 = (($pPager) + 7|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)==(0);
  if ($81) {
   $82 = $pOffset;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (($pPager) + 80|0);
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = ($87|0)<($94|0);
   $96 = ($87|0)==($94|0);
   $97 = ($84>>>0)<=($91>>>0);
   $98 = $96 & $97;
   $99 = $95 | $98;
   $$sink = $99;
  } else {
   $$sink = 1;
  }
 } else {
  $100 = ($78|0)==(0|0);
  if ($100) {
   $$sink = 1;
  } else {
   $101 = (($78) + 24|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 & 4;
   $104 = ($103<<16>>16)==(0);
   $$sink = $104;
  }
 }
 $105 = (($pPager) + 60|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0|0);
 if ($108) {
  label = 29;
 } else {
  $109 = (($pPager) + 15|0);
  $110 = HEAP8[$109>>0]|0;
  $notlhs = ($110&255)<(4);
  $notrhs = ($110<<24>>24)!=(0);
  $or$cond$not = $notrhs & $notlhs;
  $111 = $$sink ^ 1;
  $or$cond1 = $or$cond$not | $111;
  if ($or$cond1) {
   label = 29;
  } else {
   $112 = (($44) + -1)|0;
   $113 = HEAP32[$14>>2]|0;
   $114 = ($113|0)<(0);
   $115 = $114 << 31 >> 31;
   $116 = (___muldi3(($112|0),0,($113|0),($115|0))|0);
   $117 = tempRet0;
   $118 = (_sqlite3OsWrite($106,$1,$113,$116,$117)|0);
   $119 = (($pPager) + 32|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($44>>>0)>($120>>>0);
   if ($121) {
    HEAP32[$119>>2] = $44;
   }
   $122 = (($pPager) + 88|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)==(0|0);
   if ($124) {
    $$pr = $78;$rc$2$ph = $118;
    label = 33;
   } else {
    _sqlite3BackupUpdate($123,$44,$1);
    $$pr = $78;$rc$2$ph = $118;
    label = 33;
   }
  }
 }
 do {
  if ((label|0) == 29) {
   if ($2) {
    $$pr = $78;$rc$2$ph = 0;
    label = 33;
   } else {
    $125 = ($78|0)==(0|0);
    if ($125) {
     $126 = (($pPager) + 19|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = $128 | 2;
     $130 = $129&255;
     HEAP8[$126>>0] = $130;
     $131 = (_sqlite3PagerAcquire($pPager,$44,$pPg,1)|0);
     $132 = HEAP8[$126>>0]|0;
     $133 = $132&255;
     $134 = $133 & 253;
     $135 = $134&255;
     HEAP8[$126>>0] = $135;
     $136 = ($131|0)==(0);
     if ($136) {
      $137 = HEAP32[$pPg>>2]|0;
      $138 = (($137) + 24|0);
      $139 = HEAP16[$138>>1]|0;
      $140 = $139&65535;
      $141 = $140 & 65527;
      $142 = $141&65535;
      HEAP16[$138>>1] = $142;
      _sqlite3PcacheMakeDirty($137);
      $$pr = $137;$rc$2$ph = 0;
      label = 33;
      break;
     } else {
      $$0 = $131;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $145 = $78;$rc$25 = 0;
    }
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $143 = ($$pr|0)==(0|0);
  if ($143) {
   $$0 = $rc$2$ph;
   STACKTOP = sp;return ($$0|0);
  } else {
   $145 = $$pr;$rc$25 = $rc$2$ph;
  }
 }
 $144 = (($145) + 4|0);
 $146 = HEAP32[$144>>2]|0;
 $147 = HEAP32[$14>>2]|0;
 _memcpy(($146|0),($1|0),($147|0))|0;
 $148 = (($pPager) + 196|0);
 $149 = HEAP32[$148>>2]|0;
 FUNCTION_TABLE_vi[$149 & 255]($145);
 do {
  if ($2) {
   $150 = ($isSavepnt|0)==(0);
   if (!($150)) {
    $151 = $pOffset;
    $152 = $151;
    $153 = HEAP32[$152>>2]|0;
    $154 = (($151) + 4)|0;
    $155 = $154;
    $156 = HEAP32[$155>>2]|0;
    $157 = (($pPager) + 80|0);
    $158 = $157;
    $159 = $158;
    $160 = HEAP32[$159>>2]|0;
    $161 = (($158) + 4)|0;
    $162 = $161;
    $163 = HEAP32[$162>>2]|0;
    $164 = ($156|0)>($163|0);
    $165 = ($156|0)==($163|0);
    $166 = ($153>>>0)>($160>>>0);
    $167 = $165 & $166;
    $168 = $164 | $167;
    if ($168) {
     break;
    }
   }
   _sqlite3PcacheMakeClean($145);
  }
 } while(0);
 if ($66) {
  $169 = (($pPager) + 100|0);
  $170 = (($146) + 24|0);
  dest=$169+0|0; src=$170+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 _sqlite3PcacheRelease($145);
 $$0 = $rc$25;
 STACKTOP = sp;return ($$0|0);
}
function _pager_delmaster($pPager$0$0$val,$zMaster) {
 $pPager$0$0$val = $pPager$0$0$val|0;
 $zMaster = $zMaster|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $exists = 0, $nMasterJournal = 0, $rc$1 = 0, $rc$12 = 0, $rc$13 = 0, $zJournal$05 = 0, $zMasterJournal$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nMasterJournal = sp;
 $exists = sp + 8|0;
 $0 = (($pPager$0$0$val) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 1;
 $3 = (_sqlite3MallocZero($2)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) + ($4)|0);
 $6 = ($3|0)==(0|0);
 if ($6) {
  _sqlite3_free(0);
  $rc$12 = 7;
  STACKTOP = sp;return ($rc$12|0);
 }
 $7 = (_sqlite3OsOpen($pPager$0$0$val,$zMaster,$3,16385,0)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (_sqlite3OsFileSize($3,$nMasterJournal)|0);
  $10 = ($9|0)==(0);
  L7: do {
   if ($10) {
    $11 = (($pPager$0$0$val) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 1)|0;
    $14 = $nMasterJournal;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($12) + 2)|0;
    $21 = (($20) + ($16))|0;
    $22 = (_sqlite3Malloc($21)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     $rc$1 = 7;$zMasterJournal$0 = 0;
    } else {
     $24 = $nMasterJournal;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $27 = (($24) + 4)|0;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (_i64Add(($26|0),($29|0),1,0)|0);
     $31 = tempRet0;
     $32 = (($22) + ($30)|0);
     $33 = (_sqlite3OsRead($3,$22,$26,0,0)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $nMasterJournal;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = (($35) + 4)|0;
      $39 = $38;
      $40 = HEAP32[$39>>2]|0;
      $41 = (($22) + ($37)|0);
      HEAP8[$41>>0] = 0;
      $42 = $22;
      $43 = $nMasterJournal;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $46 = (($43) + 4)|0;
      $47 = $46;
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)>(0);
      $50 = ($48|0)==(0);
      $51 = ($45>>>0)>(0);
      $52 = $50 & $51;
      $53 = $49 | $52;
      if ($53) {
       $zJournal$05 = $22;
       while(1) {
        $54 = (_sqlite3OsAccess($pPager$0$0$val,$zJournal$05,0,$exists)|0);
        $55 = ($54|0)==(0);
        if (!($55)) {
         $rc$1 = $54;$zMasterJournal$0 = $22;
         break L7;
        }
        $56 = HEAP32[$exists>>2]|0;
        $57 = ($56|0)==(0);
        if (!($57)) {
         $58 = (_sqlite3OsOpen($pPager$0$0$val,$zJournal$05,$5,2049,0)|0);
         $59 = ($58|0)==(0);
         if (!($59)) {
          $rc$1 = $58;$zMasterJournal$0 = $22;
          break L7;
         }
         $60 = (_readMasterJournal($5,$32,$13)|0);
         _sqlite3OsClose($5);
         $61 = ($60|0)==(0);
         if (!($61)) {
          $rc$1 = $60;$zMasterJournal$0 = $22;
          break L7;
         }
         $62 = HEAP8[$32>>0]|0;
         $63 = ($62<<24>>24)==(0);
         if (!($63)) {
          $64 = (_strcmp($32,$zMaster)|0);
          $65 = ($64|0)==(0);
          if ($65) {
           $rc$1 = 0;$zMasterJournal$0 = $22;
           break L7;
          }
         }
        }
        $66 = (_sqlite3Strlen30($zJournal$05)|0);
        $67 = (($66) + 1)|0;
        $68 = (($zJournal$05) + ($67)|0);
        $69 = $68;
        $70 = (($69) - ($42))|0;
        $71 = ($70|0)<(0);
        $72 = $71 << 31 >> 31;
        $73 = $nMasterJournal;
        $74 = $73;
        $75 = HEAP32[$74>>2]|0;
        $76 = (($73) + 4)|0;
        $77 = $76;
        $78 = HEAP32[$77>>2]|0;
        $79 = ($72|0)<($78|0);
        $80 = ($72|0)==($78|0);
        $81 = ($70>>>0)<($75>>>0);
        $82 = $80 & $81;
        $83 = $79 | $82;
        if ($83) {
         $zJournal$05 = $68;
        } else {
         break;
        }
       }
      }
      _sqlite3OsClose($3);
      $84 = (_sqlite3OsDelete($pPager$0$0$val,$zMaster,0)|0);
      $rc$1 = $84;$zMasterJournal$0 = $22;
     } else {
      $rc$1 = $33;$zMasterJournal$0 = $22;
     }
    }
   } else {
    $rc$1 = $9;$zMasterJournal$0 = 0;
   }
  } while(0);
  _sqlite3_free($zMasterJournal$0);
  $rc$13 = $rc$1;
 } else {
  _sqlite3_free(0);
  $rc$13 = $7;
 }
 _sqlite3OsClose($3);
 _sqlite3_free($3);
 $rc$12 = $rc$13;
 STACKTOP = sp;return ($rc$12|0);
}
function _setSectorSize($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($pPager) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_sqlite3OsDeviceCharacteristics($4)|0);
  $6 = $5 & 4096;
  $7 = ($6|0)==(0);
  if ($7) {
   $9 = HEAP32[$3>>2]|0;
   $10 = (_sqlite3SectorSize($9)|0);
   $11 = (($pPager) + 148|0);
   HEAP32[$11>>2] = $10;
   STACKTOP = sp;return;
  }
 }
 $8 = (($pPager) + 148|0);
 HEAP32[$8>>2] = 512;
 STACKTOP = sp;return;
}
function _sqlite3OsDeviceCharacteristics($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 255]($id)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3SectorSize($pFile) {
 $pFile = $pFile|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3OsSectorSize($pFile)|0);
 $1 = ($0|0)<(32);
 if ($1) {
  STACKTOP = sp;return 512;
 } else {
  $2 = ($0|0)>(65536);
  $$ = $2 ? 65536 : $0;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _sqlite3OsSectorSize($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = 4096;
  STACKTOP = sp;return ($5|0);
 }
 $4 = (FUNCTION_TABLE_ii[$2 & 255]($id)|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function _sqlite3OsOpen($pVfs,$zPath,$pFile,$flags,$pFlagsOut) {
 $pVfs = $pVfs|0;
 $zPath = $zPath|0;
 $pFile = $pFile|0;
 $flags = $flags|0;
 $pFlagsOut = $pFlagsOut|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $flags & 556927;
 $3 = (FUNCTION_TABLE_iiiiii[$1 & 255]($pVfs,$zPath,$pFile,$2,$pFlagsOut)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3OsRead($id,$pBuf,$amt,$0,$1) {
 $id = $id|0;
 $pBuf = $pBuf|0;
 $amt = $amt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$id>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiiiii[$4 & 255]($id,$pBuf,$amt,$0,$1)|0);
 STACKTOP = sp;return ($5|0);
}
function _read32bits($fd,$0,$1,$pRes) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $pRes = $pRes|0;
 var $2 = 0, $3 = 0, $4 = 0, $ac = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ac = sp;
 $2 = (_sqlite3OsRead($fd,$ac,4,$0,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return ($2|0);
 }
 $4 = (_sqlite3Get4byte($ac)|0);
 HEAP32[$pRes>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function _pager_cksum($pPager$0$24$val,$pPager$0$44$val,$aData) {
 $pPager$0$24$val = $pPager$0$24$val|0;
 $pPager$0$44$val = $pPager$0$44$val|0;
 $aData = $aData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cksum$0$lcssa = 0, $cksum$02 = 0, $i$0 = 0, $i$01 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = (($pPager$0$44$val) + -200)|0;
 $0 = ($i$01|0)>(0);
 if ($0) {
  $cksum$02 = $pPager$0$24$val;$i$03 = $i$01;
 } else {
  $cksum$0$lcssa = $pPager$0$24$val;
  STACKTOP = sp;return ($cksum$0$lcssa|0);
 }
 while(1) {
  $1 = (($aData) + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = (($3) + ($cksum$02))|0;
  $i$0 = (($i$03) + -200)|0;
  $5 = ($i$0|0)>(0);
  if ($5) {
   $cksum$02 = $4;$i$03 = $i$0;
  } else {
   $cksum$0$lcssa = $4;
   break;
  }
 }
 STACKTOP = sp;return ($cksum$0$lcssa|0);
}
function _pager_lookup($pPager$0$54$val,$pgno) {
 $pPager$0$54$val = $pPager$0$54$val|0;
 $pgno = $pgno|0;
 var $0 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 HEAP32[$p>>2] = 0;
 (_sqlite3PcacheFetch($pPager$0$54$val,$pgno,0,$p)|0);
 $0 = HEAP32[$p>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BackupUpdate($pBackup,$iPage,$aData) {
 $pBackup = $pBackup|0;
 $iPage = $iPage|0;
 $aData = $aData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBackup|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$01 = $pBackup;
 }
 while(1) {
  $1 = (($p$01) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_isFatalError($2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = (($p$01) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6>>>0)>($iPage>>>0);
   if ($7) {
    $8 = (_backupOnePage($p$01,$iPage,$aData,1)|0);
    $9 = ($8|0)==(0);
    if (!($9)) {
     HEAP32[$1>>2] = $8;
    }
   }
  }
  $10 = (($p$01) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $p$01 = $11;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3PcacheMakeDirty($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 65503;
 $4 = $3&65535;
 HEAP16[$0>>1] = $4;
 $5 = $2 & 2;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $3 | 2;
 $8 = $7&65535;
 HEAP16[$0>>1] = $8;
 _pcacheAddToDirtyList($p);
 STACKTOP = sp;return;
}
function _sqlite3PcacheRelease($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 26|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + -1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($p) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = (($p) + 24|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & 2;
 $12 = ($11<<16>>16)==(0);
 if ($12) {
  _pcacheUnpin($p);
  STACKTOP = sp;return;
 } else {
  _pcacheRemoveFromDirtyList($p);
  _pcacheAddToDirtyList($p);
  STACKTOP = sp;return;
 }
}
function _pcacheAddToDirtyList($pPage) {
 $pPage = $pPage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pPage) + 32|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $6 = (($1) + 28|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (($1) + 29|0);
   HEAP8[$9>>0] = 1;
  }
 } else {
  $5 = (($2) + 36|0);
  HEAP32[$5>>2] = $pPage;
 }
 HEAP32[$1>>2] = $pPage;
 $10 = (($1) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = $pPage;
 }
 $13 = (($1) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = (($pPage) + 24|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & 4;
 $19 = ($18<<16>>16)==(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 HEAP32[$13>>2] = $pPage;
 STACKTOP = sp;return;
}
function _sqlite3PcacheFetch($pCache,$pgno,$createFlag,$ppPage) {
 $pCache = $pCache|0;
 $pgno = $pgno|0;
 $createFlag = $createFlag|0;
 $ppPage = $ppPage|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi2325Z2D = 0, $$pre$phi2326Z2D = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $8 = 0, $9 = 0, $or$cond4 = 0, $pPage$0 = 0, $pPg$0 = 0, $pPg$013 = 0, $pPg$014 = 0, $pPg$1 = 0, $pPg$110 = 0, $pPg$19 = 0, $pPg$2$ph = 0, $phitmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = ($createFlag|0)==(0);
   if ($3) {
    HEAP32[$ppPage>>2] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $4 = HEAP32[((384 + 120|0))>>2]|0;
   $5 = (($pCache) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($pCache) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + 40)|0;
   $10 = (($pCache) + 28|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iiii[$4 & 255]($6,$9,$12)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    $15 = HEAP32[((384 + 124|0))>>2]|0;
    $16 = (_numberOfCachePages($pCache)|0);
    FUNCTION_TABLE_vii[$15 & 255]($13,$16);
    HEAP32[$0>>2] = $13;
    $22 = $13;
    break;
   }
  } else {
   $22 = $1;
  }
 } while(0);
 $17 = ($createFlag|0)==(0);
 if ($17) {
  $23 = 0;
 } else {
  $18 = (($pCache) + 29|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $23 = $20;
 }
 $21 = HEAP32[((384 + 132|0))>>2]|0;
 $24 = (FUNCTION_TABLE_iiii[$21 & 255]($22,$pgno,$23)|0);
 $25 = ($24|0)==(0|0);
 $26 = ($23|0)==(1);
 $or$cond4 = $25 & $26;
 if ($or$cond4) {
  $27 = (($pCache) + 8|0);
  $pPg$013 = HEAP32[$27>>2]|0;
  $28 = ($pPg$013|0)==(0|0);
  L16: do {
   if ($28) {
    label = 14;
   } else {
    $pPg$014 = $pPg$013;
    while(1) {
     $29 = (($pPg$014) + 26|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = ($30<<16>>16)==(0);
     if ($31) {
      $32 = (($pPg$014) + 24|0);
      $33 = HEAP16[$32>>1]|0;
      $34 = $33 & 4;
      $35 = ($34<<16>>16)==(0);
      if ($35) {
       break;
      }
     }
     $36 = (($pPg$014) + 36|0);
     $pPg$0 = HEAP32[$36>>2]|0;
     $37 = ($pPg$0|0)==(0|0);
     if ($37) {
      label = 14;
      break L16;
     } else {
      $pPg$014 = $pPg$0;
     }
    }
    HEAP32[$27>>2] = $pPg$014;
    $pPg$2$ph = $pPg$014;
    label = 17;
   }
  } while(0);
  L23: do {
   if ((label|0) == 14) {
    HEAP32[$27>>2] = 0;
    $38 = (($pCache) + 4|0);
    $pPg$19 = HEAP32[$38>>2]|0;
    $39 = ($pPg$19|0)==(0|0);
    if (!($39)) {
     $pPg$110 = $pPg$19;
     while(1) {
      $42 = (($pPg$110) + 26|0);
      $43 = HEAP16[$42>>1]|0;
      $44 = ($43<<16>>16)==(0);
      if ($44) {
       $pPg$2$ph = $pPg$110;
       label = 17;
       break L23;
      }
      $40 = (($pPg$110) + 36|0);
      $pPg$1 = HEAP32[$40>>2]|0;
      $41 = ($pPg$1|0)==(0|0);
      if ($41) {
       break;
      } else {
       $pPg$110 = $pPg$1;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $45 = (($pCache) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($pCache) + 36|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iii[$46 & 255]($48,$pPg$2$ph)|0);
   if (!((($49|0) == 0) | (($49|0) == 5))) {
    $$0 = $49;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $50 = HEAP32[((384 + 132|0))>>2]|0;
  $51 = HEAP32[$0>>2]|0;
  $52 = (FUNCTION_TABLE_iiii[$50 & 255]($51,$pgno,2)|0);
  $pPage$0 = $52;
 } else {
  $pPage$0 = $24;
 }
 $53 = ($pPage$0|0)==(0|0);
 if ($53) {
  HEAP32[$ppPage>>2] = 0;
 } else {
  $54 = (($pPage$0) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   dest=$55+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$55>>2] = $pPage$0;
   $58 = HEAP32[$pPage$0>>2]|0;
   $59 = (($55) + 4|0);
   HEAP32[$59>>2] = $58;
   $60 = (($55) + 40|0);
   $61 = (($55) + 8|0);
   HEAP32[$61>>2] = $60;
   $62 = (($pCache) + 24|0);
   $63 = HEAP32[$62>>2]|0;
   _memset(($60|0),0,($63|0))|0;
   $64 = (($55) + 28|0);
   HEAP32[$64>>2] = $pCache;
   $65 = (($55) + 20|0);
   HEAP32[$65>>2] = $pgno;
   $$pre21 = (($55) + 26|0);
   $$pre$phi2326Z2D = $$pre21;
   label = 24;
  } else {
   $$phi$trans$insert = (($55) + 26|0);
   $$pre = HEAP16[$$phi$trans$insert>>1]|0;
   $66 = ($$pre<<16>>16)==(0);
   if ($66) {
    $$pre$phi2326Z2D = $$phi$trans$insert;
    label = 24;
   } else {
    $$pre$phi2325Z2D = $$phi$trans$insert;$71 = $$pre;
   }
  }
  if ((label|0) == 24) {
   $67 = (($pCache) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$67>>2] = $69;
   $$pre$phi2325Z2D = $$pre$phi2326Z2D;$71 = 0;
  }
  $70 = (($71) + 1)<<16>>16;
  HEAP16[$$pre$phi2325Z2D>>1] = $70;
  $72 = ($pgno|0)==(1);
  if ($72) {
   $73 = (($pCache) + 44|0);
   HEAP32[$73>>2] = $55;
  }
  HEAP32[$ppPage>>2] = $55;
  $74 = ($55|0)==(0|0);
  if (!($74)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $75 = ($23|0)!=(0);
 $phitmp = $75 ? 7 : 0;
 $$0 = $phitmp;
 STACKTOP = sp;return ($$0|0);
}
function _journalHdrOffset($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 72|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)==(0);
 $8 = ($6|0)==(0);
 $9 = $7 & $8;
 if ($9) {
  $20 = 0;$21 = 0;
  tempRet0 = $20;
  STACKTOP = sp;return ($21|0);
 }
 $10 = (_i64Add(($3|0),($6|0),-1,-1)|0);
 $11 = tempRet0;
 $12 = (($pPager) + 148|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (___divdi3(($10|0),($11|0),($13|0),0)|0);
 $15 = tempRet0;
 $16 = (_i64Add(($14|0),($15|0),1,0)|0);
 $17 = tempRet0;
 $18 = (___muldi3(($16|0),($17|0),($13|0),0)|0);
 $19 = tempRet0;
 $20 = $19;$21 = $18;
 tempRet0 = $20;
 STACKTOP = sp;return ($21|0);
}
function _pagerPlaybackSavepoint($pPager,$pSavepoint) {
 $pPager = $pPager|0;
 $pSavepoint = $pSavepoint|0;
 var $$0 = 0, $$in = 0, $$ph17$ph = 0, $$ph1729 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dummy = 0, $ii$014 = 0, $ii1$011 = 0, $nJRec = 0, $offset = 0, $or$cond = 0, $or$cond12 = 0;
 var $pDone$0 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $pPager$idx6 = 0, $pPager$idx6$val = 0, $pPager$idx7 = 0, $pPager$idx7$val = 0, $phitmp = 0, $rc$1$lcssa = 0, $rc$2$lcssa = 0, $rc$4$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nJRec = sp + 12|0;
 $dummy = sp + 8|0;
 $offset = sp;
 $0 = ($pSavepoint|0)!=(0|0);
 $1 = (($pSavepoint) + 20|0);
 if ($0) {
  $2 = HEAP32[$1>>2]|0;
  $3 = (_sqlite3BitvecCreate($2)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  } else {
   $pDone$0 = $3;
  }
 } else {
  $pDone$0 = 0;
 }
 $5 = (($pPager) + 28|0);
 $$in = $0 ? $1 : $5;
 $6 = HEAP32[$$in>>2]|0;
 $7 = (($pPager) + 24|0);
 HEAP32[$7>>2] = $6;
 $8 = (($pPager) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($pPager) + 17|0);
 HEAP8[$10>>0] = $9;
 L5: do {
  if ($0) {
   $21 = (($pPager) + 72|0);
   $22 = $21;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $pPager$idx6 = (($pPager) + 208|0);
   $pPager$idx6$val = HEAP32[$pPager$idx6>>2]|0;
   $28 = (_pagerUseWal($pPager$idx6$val)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = (($pSavepoint) + 8|0);
    $31 = $30;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($33|0)==(0);
    $38 = ($36|0)==(0);
    $39 = $37 & $38;
    $40 = $39 ? $24 : $33;
    $41 = $39 ? $27 : $36;
    $42 = $pSavepoint;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = $21;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    $50 = (($48) + 4)|0;
    $51 = $50;
    HEAP32[$51>>2] = $47;
    $53 = $47;$56 = $44;
    while(1) {
     $52 = ($53|0)<($41|0);
     $54 = ($53|0)==($41|0);
     $55 = ($56>>>0)<($40>>>0);
     $57 = $54 & $55;
     $58 = $52 | $57;
     if (!($58)) {
      $$ph17$ph = $21;$83 = $27;$86 = $24;
      label = 13;
      break L5;
     }
     $59 = (_pager_playback_one_page($pPager,$21,$pDone$0,1,1)|0);
     $60 = ($59|0)==(0);
     if (!($60)) {
      $$ph1729 = $21;$163 = $24;$166 = $27;$rc$1$lcssa = $59;
      break L5;
     }
     $61 = $21;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($61) + 4)|0;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $53 = $66;$56 = $63;
    }
   } else {
    $167 = $24;$168 = $27;$68 = $21;
    label = 12;
   }
  } else {
   $pPager$idx7 = (($pPager) + 208|0);
   $pPager$idx7$val = HEAP32[$pPager$idx7>>2]|0;
   $11 = (_pagerUseWal($pPager$idx7$val)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $14 = (($pPager) + 72|0);
    $15 = $14;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + 4)|0;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $167 = $17;$168 = $20;$68 = $14;
    label = 12;
    break;
   }
   $13 = (_pagerRollbackWal($pPager)|0);
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 12) {
  $67 = $68;
  $69 = $67;
  HEAP32[$69>>2] = 0;
  $70 = (($67) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = 0;
  $$ph17$ph = $68;$83 = $168;$86 = $167;
  label = 13;
 }
 L19: do {
  if ((label|0) == 13) {
   $72 = (($pPager) + 80|0);
   $73 = (($pPager) + 148|0);
   $74 = (($pPager) + 152|0);
   L21: while(1) {
    $76 = $$ph17$ph;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($76) + 4)|0;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<($83|0);
    $84 = ($81|0)==($83|0);
    $85 = ($78>>>0)<($86>>>0);
    $87 = $84 & $85;
    $88 = $82 | $87;
    if (!($88)) {
     $$ph1729 = $$ph17$ph;$163 = $86;$166 = $83;$rc$1$lcssa = 0;
     break L19;
    }
    HEAP32[$nJRec>>2] = 0;
    $89 = (_readJournalHdr($pPager,0,$86,$83,$nJRec,$dummy)|0);
    $90 = HEAP32[$nJRec>>2]|0;
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = $72;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = HEAP32[$73>>2]|0;
     $99 = (_i64Add(($98|0),0,($94|0),($97|0))|0);
     $100 = tempRet0;
     $101 = $$ph17$ph;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($101) + 4)|0;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $107 = ($99|0)==($103|0);
     $108 = ($100|0)==($106|0);
     $109 = $107 & $108;
     if ($109) {
      $110 = (_i64Subtract(($86|0),($83|0),($99|0),($100|0))|0);
      $111 = tempRet0;
      $112 = HEAP32[$74>>2]|0;
      $113 = (($112) + 8)|0;
      $114 = ($113|0)<(0);
      $115 = $114 << 31 >> 31;
      $116 = (___divdi3(($110|0),($111|0),($113|0),($115|0))|0);
      $117 = tempRet0;
      HEAP32[$nJRec>>2] = $116;
      $120 = $116;
      label = 19;
     } else {
      $rc$2$lcssa = $89;
     }
    } else {
     $120 = $90;
     label = 19;
    }
    L27: do {
     if ((label|0) == 19) {
      label = 0;
      $118 = ($89|0)==(0);
      $119 = ($120|0)!=(0);
      $or$cond12 = $118 & $119;
      if ($or$cond12) {
       $ii$014 = 1;
       while(1) {
        $121 = $$ph17$ph;
        $122 = $121;
        $123 = HEAP32[$122>>2]|0;
        $124 = (($121) + 4)|0;
        $125 = $124;
        $126 = HEAP32[$125>>2]|0;
        $127 = ($126|0)<($83|0);
        $128 = ($126|0)==($83|0);
        $129 = ($123>>>0)<($86>>>0);
        $130 = $128 & $129;
        $131 = $127 | $130;
        if (!($131)) {
         continue L21;
        }
        $132 = (_pager_playback_one_page($pPager,$$ph17$ph,$pDone$0,1,1)|0);
        $133 = ($132|0)==(0);
        $134 = HEAP32[$nJRec>>2]|0;
        $135 = ($ii$014>>>0)<($134>>>0);
        $or$cond = $133 & $135;
        if (!($or$cond)) {
         $rc$2$lcssa = $132;
         break L27;
        }
        $phitmp = (($ii$014) + 1)|0;
        $ii$014 = $phitmp;
       }
      } else {
       $rc$2$lcssa = $89;
      }
     }
    } while(0);
    $75 = ($rc$2$lcssa|0)==(0);
    if (!($75)) {
     $$ph1729 = $$ph17$ph;$163 = $86;$166 = $83;$rc$1$lcssa = $rc$2$lcssa;
     break;
    }
   }
  }
 } while(0);
 L35: do {
  if ($0) {
   $136 = (($pSavepoint) + 24|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($pPager) + 152|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + 4)|0;
   $141 = ($140|0)<(0);
   $142 = $141 << 31 >> 31;
   $143 = (___muldi3(($140|0),($142|0),($137|0),0)|0);
   $144 = tempRet0;
   $145 = $offset;
   $146 = $145;
   HEAP32[$146>>2] = $143;
   $147 = (($145) + 4)|0;
   $148 = $147;
   HEAP32[$148>>2] = $144;
   $pPager$idx = (($pPager) + 208|0);
   $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
   $149 = (_pagerUseWal($pPager$idx$val)|0);
   $150 = ($149|0)==(0);
   if ($150) {
    $152 = ($rc$1$lcssa|0)==(0);
    if ($152) {
     label = 27;
    } else {
     $rc$4$lcssa = $rc$1$lcssa;
    }
   } else {
    $151 = (($pSavepoint) + 28|0);
    _sqlite3WalSavepointUndo($pPager$idx$val,$151);
    label = 27;
   }
   L40: do {
    if ((label|0) == 27) {
     $153 = HEAP32[$136>>2]|0;
     $154 = (($pPager) + 52|0);
     $ii1$011 = $153;
     while(1) {
      $155 = HEAP32[$154>>2]|0;
      $156 = ($ii1$011>>>0)<($155>>>0);
      if (!($156)) {
       break;
      }
      $157 = (_pager_playback_one_page($pPager,$offset,$pDone$0,0,1)|0);
      $158 = (($ii1$011) + 1)|0;
      $159 = ($157|0)==(0);
      if ($159) {
       $ii1$011 = $158;
      } else {
       $rc$4$lcssa = $157;
       break L40;
      }
     }
     _sqlite3BitvecDestroy($pDone$0);
     break L35;
    }
   } while(0);
   _sqlite3BitvecDestroy($pDone$0);
   $$0 = $rc$4$lcssa;
   STACKTOP = sp;return ($$0|0);
  } else {
   _sqlite3BitvecDestroy($pDone$0);
   $160 = ($rc$1$lcssa|0)==(0);
   if (!($160)) {
    $$0 = $rc$1$lcssa;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $161 = $$ph1729;
 $162 = $161;
 HEAP32[$162>>2] = $163;
 $164 = (($161) + 4)|0;
 $165 = $164;
 HEAP32[$165>>2] = $166;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pagerRollbackWal($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0;
 var $pList$02 = 0, $rc$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPager) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = (($pPager) + 208|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3WalUndo($4,$pPager)|0);
 $6 = (($pPager) + 204|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3PcacheDirtyList($7)|0);
 $9 = ($8|0)!=(0|0);
 $10 = ($5|0)==(0);
 $or$cond1 = $9 & $10;
 if ($or$cond1) {
  $pList$02 = $8;
 } else {
  $rc$0$lcssa = $5;
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 while(1) {
  $11 = (($pList$02) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($pList$02) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_pagerUndoCallback($pPager,$14)|0);
  $16 = ($12|0)!=(0|0);
  $17 = ($15|0)==(0);
  $or$cond = $16 & $17;
  if ($or$cond) {
   $pList$02 = $12;
  } else {
   $rc$0$lcssa = $15;
   break;
  }
 }
 STACKTOP = sp;return ($rc$0$lcssa|0);
}
function _sqlite3WalSavepointUndo($pWal,$aWalData) {
 $pWal = $pWal|0;
 $aWalData = $aWalData|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($aWalData) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pWal) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $$pre = HEAP32[$aWalData>>2]|0;
  $9 = $$pre;
 } else {
  HEAP32[$aWalData>>2] = 0;
  $5 = HEAP32[$2>>2]|0;
  HEAP32[$0>>2] = $5;
  $9 = 0;
 }
 $6 = (($pWal) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($9>>>0)<($7>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $9;
 $10 = (($aWalData) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pWal) + 76|0);
 HEAP32[$12>>2] = $11;
 $13 = (($aWalData) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($pWal) + 80|0);
 HEAP32[$15>>2] = $14;
 _walCleanupHash($pWal);
 STACKTOP = sp;return;
}
function _walCleanupHash($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aHash = 0;
 var $aPgno = 0, $exitcond = 0, $i$01 = 0, $iZero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aHash = sp + 8|0;
 $aPgno = sp + 4|0;
 $iZero = sp;
 HEAP32[$aHash>>2] = 0;
 HEAP32[$aPgno>>2] = 0;
 HEAP32[$iZero>>2] = 0;
 $0 = (($pWal) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (_walFramePage($1)|0);
 (_walHashGet($pWal,$3,$aHash,$aPgno,$iZero)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$iZero>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = HEAP32[$aHash>>2]|0;
 $i$01 = 0;
 while(1) {
  $8 = (($7) + ($i$01<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($10|0)>($6|0);
  if ($11) {
   HEAP16[$8>>1] = 0;
  }
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==(8192);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 $13 = (($6) + 1)|0;
 $14 = HEAP32[$aPgno>>2]|0;
 $15 = (($14) + ($13<<2)|0);
 $16 = $7;
 $17 = $15;
 $18 = (($16) - ($17))|0;
 _memset(($15|0),0,($18|0))|0;
 STACKTOP = sp;return;
}
function _walHashGet($pWal,$iHash,$paHash,$paPgno,$piZero) {
 $pWal = $pWal|0;
 $iHash = $iHash|0;
 $paHash = $paHash|0;
 $paPgno = $paPgno|0;
 $piZero = $piZero|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aPgno = 0, $iZero$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aPgno = sp;
 $0 = (_walIndexPage($pWal,$iHash,$aPgno)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = HEAP32[$aPgno>>2]|0;
 $3 = (($2) + 16384|0);
 $4 = ($iHash|0)==(0);
 if ($4) {
  $5 = (($2) + 136|0);
  HEAP32[$aPgno>>2] = $5;
  $9 = $5;$iZero$0 = 0;
 } else {
  $6 = $iHash << 12;
  $7 = (($6) + -34)|0;
  $9 = $2;$iZero$0 = $7;
 }
 $8 = (($9) + -4|0);
 HEAP32[$paPgno>>2] = $8;
 HEAP32[$paHash>>2] = $3;
 HEAP32[$piZero>>2] = $iZero$0;
 STACKTOP = sp;return ($0|0);
}
function _walFramePage($iFrame) {
 $iFrame = $iFrame|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iFrame) + 33)|0;
 $1 = $0 >>> 12;
 STACKTOP = sp;return ($1|0);
}
function _walIndexPage($pWal,$iPage,$ppPage) {
 $pWal = $pWal|0;
 $iPage = $iPage|0;
 $ppPage = $ppPage|0;
 var $$ = 0, $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($iPage|0);
 do {
  if ($2) {
   $$phi$trans$insert = (($pWal) + 32|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $15 = $$pre;
  } else {
   $3 = (($iPage) + 1)|0;
   $4 = $3 << 2;
   $5 = (($pWal) + 32|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_sqlite3_realloc($6,$4)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 7;$storemerge = 0;
    HEAP32[$ppPage>>2] = $storemerge;
    STACKTOP = sp;return ($$0|0);
   } else {
    $9 = HEAP32[$0>>2]|0;
    $10 = (($7) + ($9<<2)|0);
    $11 = (($3) - ($9))|0;
    $12 = $11 << 2;
    _memset(($10|0),0,($12|0))|0;
    HEAP32[$5>>2] = $7;
    HEAP32[$0>>2] = $3;
    $15 = $7;
    break;
   }
  }
 } while(0);
 $13 = (($pWal) + 32|0);
 $14 = (($15) + ($iPage<<2)|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 do {
  if ($17) {
   $18 = (($pWal) + 43|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(2);
   if ($20) {
    $21 = (_sqlite3MallocZero(32768)|0);
    $22 = HEAP32[$13>>2]|0;
    $23 = (($22) + ($iPage<<2)|0);
    HEAP32[$23>>2] = $21;
    $24 = HEAP32[$13>>2]|0;
    $25 = (($24) + ($iPage<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? 7 : 0;
    $rc$0 = $$;
    break;
   }
   $28 = (($pWal) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($pWal) + 44|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (_sqlite3OsShmMap($29,$iPage,$32,$14)|0);
   $34 = ($33|0)==(8);
   if ($34) {
    $35 = (($pWal) + 46|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 | 2;
    $39 = $38&255;
    HEAP8[$35>>0] = $39;
    $rc$0 = 0;
   } else {
    $rc$0 = $33;
   }
  } else {
   $rc$0 = 0;
  }
 } while(0);
 $40 = HEAP32[$13>>2]|0;
 $41 = (($40) + ($iPage<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $$0 = $rc$0;$storemerge = $42;
 HEAP32[$ppPage>>2] = $storemerge;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsShmMap($id,$iPage,$bExtend,$pp) {
 $id = $id|0;
 $iPage = $iPage|0;
 $bExtend = $bExtend|0;
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiiii[$2 & 255]($id,$iPage,32768,$bExtend,$pp)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3WalUndo($pWal,$pUndoCtx) {
 $pWal = $pWal|0;
 $pUndoCtx = $pUndoCtx|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iFrame$0 = 0, $iFrame$01 = 0, $iFrame$02 = 0, $or$cond = 0;
 var $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, $rc$0$lcssa = 0, $rc$1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $3 = (($pWal) + 52|0);
 $4 = (($pWal) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $pWal$idx = (($pWal) + 32|0);
 $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
 $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
 $6 = (_walIndexHdr($pWal$idx$val$val)|0);
 dest=$3+0|0; src=$6+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[$4>>2]|0;
 $iFrame$01 = (($7) + 1)|0;
 $8 = ($iFrame$01>>>0)>($5>>>0);
 if ($8) {
  $14 = $7;$rc$0$lcssa = 0;
 } else {
  $iFrame$02 = $iFrame$01;
  while(1) {
   $9 = (_walFramePgno($pWal,$iFrame$02)|0);
   $10 = (_pagerUndoCallback($pUndoCtx,$9)|0);
   $iFrame$0 = (($iFrame$02) + 1)|0;
   $11 = ($10|0)!=(0);
   $12 = ($iFrame$0>>>0)>($5>>>0);
   $or$cond = $11 | $12;
   if ($or$cond) {
    break;
   } else {
    $iFrame$02 = $iFrame$0;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $14 = $$pre;$rc$0$lcssa = $10;
 }
 $13 = ($5|0)==($14|0);
 if ($13) {
  $rc$1 = $rc$0$lcssa;
  STACKTOP = sp;return ($rc$1|0);
 }
 _walCleanupHash($pWal);
 $rc$1 = $rc$0$lcssa;
 STACKTOP = sp;return ($rc$1|0);
}
function _pagerUndoCallback($pCtx,$iPg) {
 $pCtx = $pCtx|0;
 $iPg = $iPg|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $iFrame = 0, $rc$02 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iFrame = sp;
 $$idx = (($pCtx) + 204|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $0 = (_sqlite3PagerLookup($$idx$val,$iPg)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $rc$1 = 0;
  } else {
   $$idx1 = (($0) + 26|0);
   $$idx1$val = HEAP16[$$idx1>>1]|0;
   $2 = (_sqlite3PcachePageRefcount($$idx1$val)|0);
   $3 = ($2|0)==(1);
   if ($3) {
    _sqlite3PcacheDrop($0);
    $rc$1 = 0;
    break;
   }
   HEAP32[$iFrame>>2] = 0;
   $4 = (($pCtx) + 208|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($0) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_sqlite3WalFindFrame($5,$7,$iFrame)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = HEAP32[$iFrame>>2]|0;
    $11 = (_readDbPage($0,$10)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = (($pCtx) + 196|0);
     $14 = HEAP32[$13>>2]|0;
     FUNCTION_TABLE_vi[$14 & 255]($0);
     $rc$02 = 0;
    } else {
     $rc$02 = $11;
    }
   } else {
    $rc$02 = $8;
   }
   _sqlite3PagerUnrefNotNull($0);
   $rc$1 = $rc$02;
  }
 } while(0);
 $15 = (($pCtx) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 _sqlite3BackupRestart($16);
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3PcacheDirtyList($pCache) {
 $pCache = $pCache|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$01 = HEAP32[$pCache>>2]|0;
 $0 = ($p$01|0)==(0|0);
 if ($0) {
  $5 = 0;
 } else {
  $p$02 = $p$01;
  while(1) {
   $1 = (($p$02) + 32|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($p$02) + 12|0);
   HEAP32[$3>>2] = $2;
   $4 = ($2|0)==(0|0);
   if ($4) {
    break;
   } else {
    $p$02 = $2;
   }
  }
  $$pre = HEAP32[$pCache>>2]|0;
  $5 = $$pre;
 }
 $6 = (_pcacheSortDirtyList($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pcacheSortDirtyList($pIn) {
 $pIn = $pIn|0;
 var $$09 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $exitcond = 0, $i$06 = 0, $i$08 = 0, $i$12 = 0, $p$04 = 0, $p$07 = 0, $p$11 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $a = sp;
 dest=$a+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($pIn|0)==(0|0);
 if ($0) {
  $i$12 = 1;$p$11 = 0;
 } else {
  $$09 = $pIn;
  while(1) {
   $1 = (($$09) + 12|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $i$08 = 0;$p$07 = $$09;
   while(1) {
    $3 = (($a) + ($i$08<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     label = 4;
     break;
    }
    $6 = (_pcacheMergeDirtyList($4,$p$07)|0);
    HEAP32[$3>>2] = 0;
    $7 = (($i$08) + 1)|0;
    $8 = ($7|0)<(31);
    if ($8) {
     $i$08 = $7;$p$07 = $6;
    } else {
     $i$06 = $7;$p$04 = $6;
     break;
    }
   }
   if ((label|0) == 4) {
    label = 0;
    HEAP32[$3>>2] = $p$07;
    $i$06 = $i$08;$p$04 = $p$07;
   }
   $9 = ($i$06|0)==(31);
   if ($9) {
    $10 = (($a) + 124|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_pcacheMergeDirtyList($11,$p$04)|0);
    HEAP32[$10>>2] = $12;
   }
   $13 = ($2|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$09 = $2;
   }
  }
  $$pre = HEAP32[$a>>2]|0;
  $i$12 = 1;$p$11 = $$pre;
 }
 while(1) {
  $14 = (($a) + ($i$12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_pcacheMergeDirtyList($p$11,$15)|0);
  $17 = (($i$12) + 1)|0;
  $exitcond = ($17|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $i$12 = $17;$p$11 = $16;
  }
 }
 STACKTOP = sp;return ($16|0);
}
function _pcacheMergeDirtyList($pA,$pB) {
 $pA = $pA|0;
 $pB = $pB|0;
 var $$0$lcssa = 0, $$0$ph25 = 0, $$01$ph13 = 0, $$01$ph1344 = 0, $$01$ph23 = 0, $$08$us = 0, $$6 = 0, $$622 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pTail$0$lcssa = 0, $pTail$0$lcssa45 = 0, $pTail$0$ph24 = 0, $pTail$0$ph24$phi = 0, $pTail$07$us = 0, $pTail$07$us$phi = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $result = sp;
 $0 = ($pA|0)!=(0|0);
 $1 = ($pB|0)!=(0|0);
 $$622 = $0 & $1;
 L1: do {
  if ($$622) {
   $$0$ph25 = $pA;$$01$ph23 = $pB;$pTail$0$ph24 = $result;
   while(1) {
    $2 = (($$01$ph23) + 20|0);
    $3 = HEAP32[$2>>2]|0;
    $$08$us = $$0$ph25;$pTail$07$us = $pTail$0$ph24;
    while(1) {
     $4 = (($$08$us) + 20|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ($5>>>0)<($3>>>0);
     $7 = (($pTail$07$us) + 12|0);
     if (!($6)) {
      break;
     }
     HEAP32[$7>>2] = $$08$us;
     $8 = (($$08$us) + 12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $$01$ph1344 = $$01$ph23;$pTail$0$lcssa45 = $$08$us;
      label = 8;
      break L1;
     } else {
      $pTail$07$us$phi = $$08$us;$$08$us = $9;$pTail$07$us = $pTail$07$us$phi;
     }
    }
    HEAP32[$7>>2] = $$01$ph23;
    $11 = (($$01$ph23) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($$08$us|0)!=(0|0);
    $14 = ($12|0)!=(0|0);
    $$6 = $13 & $14;
    if ($$6) {
     $pTail$0$ph24$phi = $$01$ph23;$$0$ph25 = $$08$us;$$01$ph23 = $12;$pTail$0$ph24 = $pTail$0$ph24$phi;
    } else {
     $$0$lcssa = $$08$us;$$01$ph13 = $12;$$lcssa = $13;$pTail$0$lcssa = $$01$ph23;
     label = 6;
     break;
    }
   }
  } else {
   $$0$lcssa = $pA;$$01$ph13 = $pB;$$lcssa = $0;$pTail$0$lcssa = $result;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $15 = (($pTail$0$lcssa) + 12|0);
   HEAP32[$15>>2] = $$0$lcssa;
  } else {
   $$01$ph1344 = $$01$ph13;$pTail$0$lcssa45 = $pTail$0$lcssa;
   label = 8;
  }
 }
 do {
  if ((label|0) == 8) {
   $16 = ($$01$ph1344|0)==(0|0);
   $17 = (($pTail$0$lcssa45) + 12|0);
   if ($16) {
    HEAP32[$17>>2] = 0;
    break;
   } else {
    HEAP32[$17>>2] = $$01$ph1344;
    break;
   }
  }
 } while(0);
 $18 = (($result) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _sqlite3PagerLookup($pPager$0$54$val,$pgno) {
 $pPager$0$54$val = $pPager$0$54$val|0;
 $pgno = $pgno|0;
 var $0 = 0, $pPg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPg = sp;
 HEAP32[$pPg>>2] = 0;
 (_sqlite3PcacheFetch($pPager$0$54$val,$pgno,0,$pPg)|0);
 $0 = HEAP32[$pPg>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PcachePageRefcount($p$0$7$val) {
 $p$0$7$val = $p$0$7$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p$0$7$val << 16 >> 16;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PcacheDrop($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 2;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  _pcacheRemoveFromDirtyList($p);
 }
 $4 = (($p) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = (($p) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(1);
 if ($11) {
  $12 = (($5) + 44|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = HEAP32[((384 + 136|0))>>2]|0;
 $14 = (($5) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$p>>2]|0;
 FUNCTION_TABLE_viii[$13 & 255]($15,$16,1);
 STACKTOP = sp;return;
}
function _sqlite3WalFindFrame($pWal,$pgno,$piRead) {
 $pWal = $pWal|0;
 $pgno = $pgno|0;
 $piRead = $piRead|0;
 var $$0 = 0, $$iRead$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aHash = 0;
 var $aPgno = 0, $iHash$08 = 0, $iKey$02 = 0, $iRead$0$lcssa = 0, $iRead$1$lcssa = 0, $iRead$14 = 0, $iRead$2 = 0, $iZero = 0, $nCollide$03 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aHash = sp + 8|0;
 $aPgno = sp + 4|0;
 $iZero = sp;
 $0 = (($pWal) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($pWal) + 40|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = ($4<<16>>16)==(0);
  if (!($5)) {
   $6 = (_walFramePage($1)|0);
   $7 = ($6|0)>(-1);
   L4: do {
    if ($7) {
     $iHash$08 = $6;
     L5: while(1) {
      $8 = (_walHashGet($pWal,$iHash$08,$aHash,$aPgno,$iZero)|0);
      $9 = ($8|0)==(0);
      if (!($9)) {
       $$0 = $8;
       label = 15;
       break;
      }
      $10 = (_walHash($pgno)|0);
      $11 = HEAP32[$aHash>>2]|0;
      $12 = (($11) + ($10<<1)|0);
      $13 = HEAP16[$12>>1]|0;
      $14 = ($13<<16>>16)==(0);
      if ($14) {
       $iRead$1$lcssa = 0;
      } else {
       $15 = HEAP32[$iZero>>2]|0;
       $16 = HEAP32[$aHash>>2]|0;
       $17 = HEAP32[$aPgno>>2]|0;
       $19 = $12;$iKey$02 = $10;$iRead$14 = 0;$nCollide$03 = 8192;
       while(1) {
        $18 = HEAP16[$19>>1]|0;
        $20 = $18&65535;
        $21 = (($20) + ($15))|0;
        $22 = ($21>>>0)>($1>>>0);
        if ($22) {
         $iRead$2 = $iRead$14;
        } else {
         $23 = HEAP16[$19>>1]|0;
         $24 = $23&65535;
         $25 = (($17) + ($24<<2)|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==($pgno|0);
         $$iRead$1 = $27 ? $21 : $iRead$14;
         $iRead$2 = $$iRead$1;
        }
        $28 = ($nCollide$03|0)==(0);
        if ($28) {
         break L5;
        }
        $29 = (($nCollide$03) + -1)|0;
        $30 = (_walNextHash($iKey$02)|0);
        $31 = (($16) + ($30<<1)|0);
        $32 = HEAP16[$31>>1]|0;
        $33 = ($32<<16>>16)==(0);
        if ($33) {
         $iRead$1$lcssa = $iRead$2;
         break;
        } else {
         $19 = $31;$iKey$02 = $30;$iRead$14 = $iRead$2;$nCollide$03 = $29;
        }
       }
      }
      $34 = (($iHash$08) + -1)|0;
      $35 = ($iHash$08|0)>(0);
      $36 = ($iRead$1$lcssa|0)==(0);
      $or$cond = $35 & $36;
      if ($or$cond) {
       $iHash$08 = $34;
      } else {
       $iRead$0$lcssa = $iRead$1$lcssa;
       break L4;
      }
     }
     if ((label|0) == 15) {
      STACKTOP = sp;return ($$0|0);
     }
     _sqlite3CorruptError(49129);
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $iRead$0$lcssa = 0;
    }
   } while(0);
   HEAP32[$piRead>>2] = $iRead$0$lcssa;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$piRead>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _readDbPage($pPg,$iFrame) {
 $pPg = $pPg|0;
 $iFrame = $iFrame|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPg) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 152|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($iFrame|0)==(0);
 if ($6) {
  $12 = (($3) + -1)|0;
  $13 = ($5|0)<(0);
  $14 = $13 << 31 >> 31;
  $15 = (___muldi3(($12|0),0,($5|0),($14|0))|0);
  $16 = tempRet0;
  $17 = (($1) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($pPg) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_sqlite3OsRead($18,$20,$5,$15,$16)|0);
  $22 = ($21|0)==(522);
  $$ = $22 ? 0 : $21;
  $rc$0 = $$;
 } else {
  $7 = (($1) + 208|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($pPg) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $$idx = (($8) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx1 = (($8) + 66|0);
  $$idx1$val = HEAP16[$$idx1>>1]|0;
  $11 = (_sqlite3WalReadFrame($$idx$val,$$idx1$val,$iFrame,$5,$10)|0);
  $rc$0 = $11;
 }
 $23 = ($3|0)==(1);
 if (!($23)) {
  STACKTOP = sp;return ($rc$0|0);
 }
 $24 = ($rc$0|0)==(0);
 if ($24) {
  $26 = (($pPg) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 24|0);
  $29 = (($1) + 100|0);
  dest=$29+0|0; src=$28+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return ($rc$0|0);
 } else {
  $25 = (($1) + 100|0);
  dest=$25+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return ($rc$0|0);
 }
 return 0|0;
}
function _sqlite3PagerUnrefNotNull($pPg) {
 $pPg = $pPg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPg) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 64;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  _sqlite3PcacheRelease($pPg);
 } else {
  _pagerReleaseMapPage($pPg);
 }
 _pagerUnlockIfUnused($1);
 STACKTOP = sp;return;
}
function _pagerReleaseMapPage($pPg) {
 $pPg = $pPg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = (($1) + 136|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pPg) + 12|0);
 HEAP32[$7>>2] = $6;
 HEAP32[$5>>2] = $pPg;
 STACKTOP = sp;return;
}
function _pagerUnlockIfUnused($pPager) {
 $pPager = $pPager|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 120|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pPager) + 204|0);
 $4 = HEAP32[$3>>2]|0;
 $$idx = (($4) + 12|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $5 = (_sqlite3PcacheRefCount($$idx$val)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 _pagerUnlockAndRollback($pPager);
 STACKTOP = sp;return;
}
function _sqlite3WalReadFrame($pWal$0$2$val,$pWal$0$18$5$val,$iRead,$nOut,$pOut) {
 $pWal$0$2$val = $pWal$0$2$val|0;
 $pWal$0$18$5$val = $pWal$0$18$5$val|0;
 $iRead = $iRead|0;
 $nOut = $nOut|0;
 $pOut = $pOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pWal$0$18$5$val&65535;
 $1 = $0 & 65024;
 $2 = $0 << 16;
 $3 = $2 & 65536;
 $4 = $3 | $1;
 $5 = (($iRead) + -1)|0;
 $6 = $4 | 24;
 $7 = (___muldi3(($6|0),0,($5|0),0)|0);
 $8 = tempRet0;
 $9 = (_i64Add(($7|0),($8|0),56,0)|0);
 $10 = tempRet0;
 $11 = ($4|0)<($nOut|0);
 $12 = $11 ? $4 : $nOut;
 $13 = (_sqlite3OsRead($pWal$0$2$val,$pOut,$12,$9,$10)|0);
 STACKTOP = sp;return ($13|0);
}
function _walHash($iPage) {
 $iPage = $iPage|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iPage*383)|0;
 $1 = $0 & 8191;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3CorruptError($lineno) {
 $lineno = $lineno|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $lineno;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = ((1768 + 20|0));
 _sqlite3_log(11,4616,$vararg_buffer);
 STACKTOP = sp;return;
}
function _walNextHash($iPriorHash) {
 $iPriorHash = $iPriorHash|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iPriorHash) + 1)|0;
 $1 = $0 & 8191;
 STACKTOP = sp;return ($1|0);
}
function _walIndexHdr($pWal$0$7$val$val) {
 $pWal$0$7$val$val = $pWal$0$7$val$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pWal$0$7$val$val|0);
}
function _walFramePgno($pWal,$iFrame) {
 $pWal = $pWal|0;
 $iFrame = $iFrame|0;
 var $$0 = 0, $$0$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_walFramePage($iFrame)|0);
 $1 = ($0|0)==(0);
 $2 = (($iFrame) + 33)|0;
 if ($1) {
  $3 = (($pWal) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $$0$in = $6;
  $$0 = HEAP32[$$0$in>>2]|0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = $2 & 4095;
  $8 = (($pWal) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $$0$in = $12;
  $$0 = HEAP32[$$0$in>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3WalEndReadTransaction($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3WalEndWriteTransaction($pWal);
 $0 = (($pWal) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)>(-1);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $1 << 16 >> 16;
 $4 = (($3) + 3)|0;
 _walUnlockShared($pWal,$4);
 HEAP16[$0>>1] = -1;
 STACKTOP = sp;return;
}
function _sqlite3OsLock($id,$lockType) {
 $id = $id|0;
 $lockType = $lockType|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($id,$lockType)|0);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3WalCheckpoint($pWal,$eMode,$xBusy,$pBusyArg,$sync_flags,$nBuf,$zBuf,$pnLog,$pnCkpt) {
 $pWal = $pWal|0;
 $eMode = $eMode|0;
 $xBusy = $xBusy|0;
 $pBusyArg = $pBusyArg|0;
 $sync_flags = $sync_flags|0;
 $nBuf = $nBuf|0;
 $zBuf = $zBuf|0;
 $pnLog = $pnLog|0;
 $pnCkpt = $pnCkpt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eMode2$03 = 0, $eMode2$04 = 0, $isChanged = 0, $or$cond = 0, $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, $pWal$idx2 = 0, $pWal$idx2$val = 0, $rc$1 = 0, $rc$3 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isChanged = sp;
 HEAP32[$isChanged>>2] = 0;
 $0 = (($pWal) + 46|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_walLockExclusive($pWal,1,1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pWal) + 45|0);
 HEAP8[$5>>0] = 1;
 $6 = ($eMode|0)==(0);
 do {
  if ($6) {
   $eMode2$04 = 0;
   label = 6;
  } else {
   $7 = (_walBusyLock($pWal,$xBusy,$pBusyArg,0,1)|0);
   if ((($7|0) == 5)) {
    $eMode2$04 = 0;
    label = 6;
    break;
   } else if (!((($7|0) == 0))) {
    $eMode2$03 = $eMode;$rc$1 = $7;
    break;
   }
   $8 = (($pWal) + 44|0);
   HEAP8[$8>>0] = 1;
   $eMode2$04 = $eMode;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = (_walIndexReadHdr($pWal,$isChanged)|0);
  $eMode2$03 = $eMode2$04;$rc$1 = $9;
 }
 $10 = ($rc$1|0)==(0);
 do {
  if ($10) {
   $11 = (($pWal) + 68|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $pWal$idx2 = (($pWal) + 66|0);
    $pWal$idx2$val = HEAP16[$pWal$idx2>>1]|0;
    $14 = (_walPagesize($pWal$idx2$val)|0);
    $15 = ($14|0)==($nBuf|0);
    if (!($15)) {
     _sqlite3CorruptError(49730);
     $rc$3 = 11;
     break;
    }
   }
   $16 = (_walCheckpoint($pWal,$eMode2$03,$xBusy,$pBusyArg,$sync_flags,$zBuf)|0);
   if ((($16|0) == 0) | (($16|0) == 5)) {
    $17 = ($pnLog|0)==(0|0);
    if (!($17)) {
     $18 = HEAP32[$11>>2]|0;
     HEAP32[$pnLog>>2] = $18;
    }
    $19 = ($pnCkpt|0)==(0|0);
    if ($19) {
     $rc$3 = $16;
    } else {
     $pWal$idx = (($pWal) + 32|0);
     $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
     $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
     $20 = (_walCkptInfo($pWal$idx$val$val)|0);
     $21 = HEAP32[$20>>2]|0;
     HEAP32[$pnCkpt>>2] = $21;
     $rc$3 = $16;
    }
   } else {
    $rc$3 = $16;
   }
  } else {
   $rc$3 = $rc$1;
  }
 } while(0);
 $22 = HEAP32[$isChanged>>2]|0;
 $23 = ($22|0)==(0);
 if (!($23)) {
  $24 = (($pWal) + 52|0);
  dest=$24+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 }
 _sqlite3WalEndWriteTransaction($pWal);
 _walUnlockExclusive($pWal,1,1);
 HEAP8[$5>>0] = 0;
 $25 = ($rc$3|0)!=(0);
 $26 = ($eMode2$03|0)==($eMode|0);
 $or$cond = $25 | $26;
 $27 = $or$cond ? $rc$3 : 5;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsFileControlHint($id,$op,$pArg) {
 $id = $id|0;
 $op = $op|0;
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_iiii[$2 & 255]($id,$op,$pArg)|0);
 STACKTOP = sp;return;
}
function _walLimitSize($pWal,$0,$1) {
 $pWal = $pWal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $rx$0 = 0, $sz = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp + 8|0;
 $sz = sp;
 _sqlite3BeginBenignMalloc();
 $2 = (($pWal) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3OsFileSize($3,$sz)|0);
 $5 = ($4|0)==(0);
 $6 = $sz;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>($1|0);
 $13 = ($11|0)==($1|0);
 $14 = ($8>>>0)>($0>>>0);
 $15 = $13 & $14;
 $16 = $12 | $15;
 $or$cond = $5 & $16;
 if ($or$cond) {
  $17 = HEAP32[$2>>2]|0;
  $18 = (_sqlite3OsTruncate($17,$0,$1)|0);
  $rx$0 = $18;
 } else {
  $rx$0 = $4;
 }
 _sqlite3EndBenignMalloc();
 $19 = ($rx$0|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = (($pWal) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer>>2] = $21;
 _sqlite3_log($rx$0,4664,$vararg_buffer);
 STACKTOP = sp;return;
}
function _walIndexClose($pWal,$isDelete) {
 $pWal = $pWal|0;
 $isDelete = $isDelete|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  $15 = (($pWal) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  _sqlite3OsShmUnmap($16,$isDelete);
  STACKTOP = sp;return;
 }
 $3 = (($pWal) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($pWal) + 32|0);
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($i$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  _sqlite3_free($9);
  $10 = HEAP32[$6>>2]|0;
  $11 = (($10) + ($i$01<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = (($i$01) + 1)|0;
  $13 = HEAP32[$3>>2]|0;
  $14 = ($12|0)<($13|0);
  if ($14) {
   $i$01 = $12;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3OsShmUnmap($id,$deleteFlag) {
 $id = $id|0;
 $deleteFlag = $deleteFlag|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_iii[$2 & 255]($id,$deleteFlag)|0);
 STACKTOP = sp;return;
}
function _walLockExclusive($pWal,$lockIdx,$n) {
 $pWal = $pWal|0;
 $lockIdx = $lockIdx|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pWal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3OsShmLock($4,$lockIdx,$n,10)|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _walBusyLock($pWal,$xBusy,$pBusyArg,$lockIdx,$n) {
 $pWal = $pWal|0;
 $xBusy = $xBusy|0;
 $pBusyArg = $pBusyArg|0;
 $lockIdx = $lockIdx|0;
 $n = $n|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($xBusy|0)==(0|0);
 L1: do {
  if ($0) {
   $5 = (_walLockExclusive($pWal,$lockIdx,$n)|0);
   $$lcssa = $5;
  } else {
   while(1) {
    $1 = (_walLockExclusive($pWal,$lockIdx,$n)|0);
    $2 = ($1|0)==(5);
    if (!($2)) {
     $$lcssa = $1;
     break L1;
    }
    $3 = (FUNCTION_TABLE_ii[$xBusy & 255]($pBusyArg)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $$lcssa = 5;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$lcssa|0);
}
function _walIndexReadHdr($pWal,$pChanged) {
 $pWal = $pWal|0;
 $pChanged = $pChanged|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $badHdr$0 = 0, $badHdr$1 = 0, $page0 = 0, $rc$0 = 0, $rc$1 = 0, $rc$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $page0 = sp;
 $0 = (_walIndexPage($pWal,0,$page0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$page0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $24 = 1;
  label = 4;
 } else {
  $4 = (_walIndexTryHdr($pWal,$pChanged)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $rc$12 = 0;
  } else {
   $24 = $4;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = (($pWal) + 46|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 & 2;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $12 = (_walLockExclusive($pWal,0,1)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
   }
   $14 = (($pWal) + 44|0);
   HEAP8[$14>>0] = 1;
   $15 = (_walIndexPage($pWal,0,$page0)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (_walIndexTryHdr($pWal,$pChanged)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $badHdr$0 = 0;$rc$0 = 0;
    } else {
     $19 = (_walIndexRecover($pWal)|0);
     HEAP32[$pChanged>>2] = 1;
     $badHdr$0 = $17;$rc$0 = $19;
    }
   } else {
    $badHdr$0 = $24;$rc$0 = $15;
   }
   HEAP8[$14>>0] = 0;
   _walUnlockExclusive($pWal,0,1);
   $badHdr$1 = $badHdr$0;$rc$1 = $rc$0;
  } else {
   $10 = (_walLockShared($pWal,0)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    _walUnlockShared($pWal,0);
    $badHdr$1 = $24;$rc$1 = 264;
   } else {
    $badHdr$1 = $24;$rc$1 = $10;
   }
  }
  $20 = ($badHdr$1|0)==(0);
  if ($20) {
   $rc$12 = $rc$1;
  } else {
   $$0 = $rc$1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $21 = (($pWal) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(3007000);
 if ($23) {
  $$0 = $rc$12;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3CantopenError(48776);
 $$0 = 14;
 STACKTOP = sp;return ($$0|0);
}
function _walPagesize($pWal$0$18$5$val) {
 $pWal$0$18$5$val = $pWal$0$18$5$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pWal$0$18$5$val&65535;
 $1 = $0 & 65024;
 $2 = $0 << 16;
 $3 = $2 & 65536;
 $4 = $3 | $1;
 STACKTOP = sp;return ($4|0);
}
function _walCheckpoint($pWal,$eMode,$xBusyCall,$pBusyArg,$sync_flags,$zBuf) {
 $pWal = $pWal|0;
 $eMode = $eMode|0;
 $xBusyCall = $xBusyCall|0;
 $pBusyArg = $pBusyArg|0;
 $sync_flags = $sync_flags|0;
 $zBuf = $zBuf|0;
 var $$0 = 0, $$not = 0, $$not2 = 0, $$not3 = 0, $$not4 = 0, $$rc$8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge5 = 0, $i$021 = 0, $iDbpage = 0;
 var $iFrame = 0, $mxSafeFrame$023 = 0, $mxSafeFrame$1 = 0, $nReq = 0, $nSize = 0, $or$cond = 0, $pIter = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, $pWal$idx6 = 0, $pWal$idx6$val = 0, $pWal$idx6$val$val = 0, $pWal$idx7 = 0, $pWal$idx7$val = 0, $rc$024 = 0, $rc$1 = 0, $rc$10 = 0, $rc$6 = 0, $rc$7 = 0, $rc$8 = 0;
 var $xBusy$122 = 0, $xBusy$2 = 0, $xBusyCall$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pIter = sp + 24|0;
 $iDbpage = sp + 20|0;
 $iFrame = sp + 16|0;
 $nSize = sp + 8|0;
 $nReq = sp;
 HEAP32[$pIter>>2] = 0;
 HEAP32[$iDbpage>>2] = 0;
 HEAP32[$iFrame>>2] = 0;
 $pWal$idx7 = (($pWal) + 66|0);
 $pWal$idx7$val = HEAP16[$pWal$idx7>>1]|0;
 $0 = (_walPagesize($pWal$idx7$val)|0);
 $pWal$idx6 = (($pWal) + 32|0);
 $pWal$idx6$val = HEAP32[$pWal$idx6>>2]|0;
 $pWal$idx6$val$val = HEAP32[$pWal$idx6$val>>2]|0;
 $1 = (_walCkptInfo($pWal$idx6$val$val)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pWal) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_walIteratorInit($pWal,$pIter)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($eMode|0)!=(0);
 $xBusyCall$ = $8 ? $xBusyCall : 0;
 $9 = HEAP32[$3>>2]|0;
 $10 = (($pWal) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $i$021 = 1;$mxSafeFrame$023 = $9;$rc$024 = 0;$xBusy$122 = $xBusyCall$;
 L7: while(1) {
  $12 = ((($1) + ($i$021<<2)|0) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($mxSafeFrame$023>>>0)>($13>>>0);
  do {
   if ($14) {
    $15 = (($i$021) + 3)|0;
    $16 = (_walBusyLock($pWal,$xBusy$122,$pBusyArg,$15,1)|0);
    if ((($16|0) == 5)) {
     $mxSafeFrame$1 = $13;$rc$1 = 5;$xBusy$2 = 0;
     break;
    } else if (!((($16|0) == 0))) {
     $rc$10 = $16;
     break L7;
    }
    $17 = ($i$021|0)==(1);
    $18 = $17 ? $mxSafeFrame$023 : -1;
    HEAP32[$12>>2] = $18;
    _walUnlockExclusive($pWal,$15,1);
    $mxSafeFrame$1 = $mxSafeFrame$023;$rc$1 = 0;$xBusy$2 = $xBusy$122;
   } else {
    $mxSafeFrame$1 = $mxSafeFrame$023;$rc$1 = $rc$024;$xBusy$2 = $xBusy$122;
   }
  } while(0);
  $19 = (($i$021) + 1)|0;
  $20 = ($19|0)<(5);
  if ($20) {
   $i$021 = $19;$mxSafeFrame$023 = $mxSafeFrame$1;$rc$024 = $rc$1;$xBusy$122 = $xBusy$2;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$1>>2]|0;
  $22 = ($21>>>0)<($mxSafeFrame$1>>>0);
  if ($22) {
   $23 = (_walBusyLock($pWal,$xBusy$2,$pBusyArg,3,1)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = HEAP32[$1>>2]|0;
    $26 = ($sync_flags|0)!=(0);
    if ($26) {
     $27 = (($pWal) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_sqlite3OsSync($28,$sync_flags)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      label = 12;
     } else {
      $rc$7 = $29;
     }
    } else {
     label = 12;
    }
    L20: do {
     if ((label|0) == 12) {
      $31 = ($0|0)<(0);
      $32 = $31 << 31 >> 31;
      $33 = (___muldi3(($11|0),0,($0|0),($32|0))|0);
      $34 = tempRet0;
      $35 = $nReq;
      $36 = $35;
      HEAP32[$36>>2] = $33;
      $37 = (($35) + 4)|0;
      $38 = $37;
      HEAP32[$38>>2] = $34;
      $39 = (($pWal) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (_sqlite3OsFileSize($40,$nSize)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $43 = $nSize;
       $44 = $43;
       $45 = HEAP32[$44>>2]|0;
       $46 = (($43) + 4)|0;
       $47 = $46;
       $48 = HEAP32[$47>>2]|0;
       $49 = $nReq;
       $50 = $49;
       $51 = HEAP32[$50>>2]|0;
       $52 = (($49) + 4)|0;
       $53 = $52;
       $54 = HEAP32[$53>>2]|0;
       $55 = ($48|0)<($54|0);
       $56 = ($48|0)==($54|0);
       $57 = ($45>>>0)<($51>>>0);
       $58 = $56 & $57;
       $59 = $55 | $58;
       if ($59) {
        $60 = HEAP32[$39>>2]|0;
        _sqlite3OsFileControlHint($60,5,$nReq);
       }
       $61 = HEAP32[$pIter>>2]|0;
       $62 = (($0) + 24)|0;
       $63 = ($62|0)<(0);
       $64 = $63 << 31 >> 31;
       $65 = (($pWal) + 8|0);
       $66 = ($0|0)<(0);
       $67 = $66 << 31 >> 31;
       $68 = (($pWal) + 4|0);
       while(1) {
        $69 = (_walIteratorNext($61,$iDbpage,$iFrame)|0);
        $70 = ($69|0)==(0);
        if (!($70)) {
         break;
        }
        $71 = HEAP32[$iFrame>>2]|0;
        $72 = ($71>>>0)<=($25>>>0);
        $73 = ($71>>>0)>($mxSafeFrame$1>>>0);
        $or$cond = $72 | $73;
        if ($or$cond) {
         continue;
        }
        $74 = HEAP32[$iDbpage>>2]|0;
        $75 = ($74>>>0)>($11>>>0);
        if ($75) {
         continue;
        }
        $76 = (($71) + -1)|0;
        $77 = (___muldi3(($76|0),0,($62|0),($64|0))|0);
        $78 = tempRet0;
        $79 = (_i64Add(($77|0),($78|0),56,0)|0);
        $80 = tempRet0;
        $81 = HEAP32[$65>>2]|0;
        $82 = (_sqlite3OsRead($81,$zBuf,$0,$79,$80)|0);
        $83 = ($82|0)==(0);
        if (!($83)) {
         $rc$7 = $82;
         break L20;
        }
        $84 = (($74) + -1)|0;
        $85 = (___muldi3(($84|0),0,($0|0),($67|0))|0);
        $86 = tempRet0;
        $87 = HEAP32[$68>>2]|0;
        $88 = (_sqlite3OsWrite($87,$zBuf,$0,$85,$86)|0);
        $89 = ($88|0)==(0);
        if (!($89)) {
         $rc$7 = $88;
         break L20;
        }
       }
       $pWal$idx$val = HEAP32[$pWal$idx6>>2]|0;
       $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
       $90 = (_walIndexHdr($pWal$idx$val$val)|0);
       $91 = (($90) + 16|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($mxSafeFrame$1|0)==($92|0);
       if ($93) {
        $94 = HEAP32[$10>>2]|0;
        $95 = (___muldi3(($94|0),0,($0|0),($67|0))|0);
        $96 = tempRet0;
        $97 = HEAP32[$68>>2]|0;
        $98 = (_sqlite3OsTruncate($97,$95,$96)|0);
        $$not = ($98|0)!=(0);
        $$not2 = $26 ^ 1;
        $brmerge = $$not | $$not2;
        if ($brmerge) {
         $rc$6 = $98;
        } else {
         $99 = HEAP32[$68>>2]|0;
         $100 = (_sqlite3OsSync($99,$sync_flags)|0);
         $rc$6 = $100;
        }
        $101 = ($rc$6|0)==(0);
        if (!($101)) {
         $rc$7 = $rc$6;
         break;
        }
       }
       HEAP32[$1>>2] = $mxSafeFrame$1;
       $rc$7 = 0;
      } else {
       $rc$7 = $41;
      }
     }
    } while(0);
    _walUnlockExclusive($pWal,3,1);
    $rc$8 = $rc$7;
   } else {
    $rc$8 = $23;
   }
  } else {
   $rc$8 = $rc$1;
  }
  $102 = ($rc$8|0)==(5);
  $$rc$8 = $102 ? 0 : $rc$8;
  $$not3 = ($$rc$8|0)!=(0);
  $$not4 = $8 ^ 1;
  $brmerge5 = $$not3 | $$not4;
  if ($brmerge5) {
   $rc$10 = $$rc$8;
  } else {
   $103 = HEAP32[$1>>2]|0;
   $104 = HEAP32[$3>>2]|0;
   $105 = ($103>>>0)<($104>>>0);
   if ($105) {
    $rc$10 = 5;
   } else {
    $106 = ($eMode|0)==(2);
    if ($106) {
     $107 = (_walBusyLock($pWal,$xBusy$2,$pBusyArg,4,4)|0);
     $108 = ($107|0)==(0);
     if ($108) {
      _walUnlockExclusive($pWal,4,4);
      $rc$10 = 0;
     } else {
      $rc$10 = $107;
     }
    } else {
     $rc$10 = 0;
    }
   }
  }
 }
 $109 = HEAP32[$pIter>>2]|0;
 _walIteratorFree($109);
 $$0 = $rc$10;
 STACKTOP = sp;return ($$0|0);
}
function _walCkptInfo($pWal$0$7$val$val) {
 $pWal$0$7$val$val = $pWal$0$7$val$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal$0$7$val$val) + 96|0);
 STACKTOP = sp;return ($0|0);
}
function _walIteratorInit($pWal,$pp) {
 $pWal = $pWal|0;
 $pp = $pp|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aHash = 0, $aPgno = 0, $i$03 = 0, $iZero = 0, $j$01 = 0, $nEntry = 0, $not$ = 0, $or$cond = 0;
 var $or$cond2 = 0, $rc$1$lcssa = 0, $rc$1$lcssa11 = 0, $rc$1$lcssa12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aHash = sp + 12|0;
 $iZero = sp + 8|0;
 $aPgno = sp + 4|0;
 $nEntry = sp;
 $0 = (($pWal) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_walFramePage($1)|0);
 $3 = (($2) + 1)|0;
 $4 = ($2*20)|0;
 $5 = $1 << 1;
 $6 = (($5) + 28)|0;
 $7 = (($6) + ($4))|0;
 $8 = (_sqlite3ScratchMalloc($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($8|0),0,($7|0))|0;
 $10 = (($8) + 4|0);
 HEAP32[$10>>2] = $3;
 $11 = ($1>>>0)>(4096);
 $12 = $11 ? 8192 : $5;
 $13 = (_sqlite3ScratchMalloc($12)|0);
 $14 = ($13|0)==(0|0);
 $$ = $14 ? 7 : 0;
 $not$ = $14 ^ 1;
 $15 = ($2|0)>(-1);
 $or$cond2 = $15 & $not$;
 L4: do {
  if ($or$cond2) {
   $16 = (($8) + 8|0);
   $i$03 = 0;
   while(1) {
    $17 = (_walHashGet($pWal,$i$03,$aHash,$aPgno,$iZero)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     break;
    }
    $19 = HEAP32[$aPgno>>2]|0;
    $20 = (($19) + 4|0);
    HEAP32[$aPgno>>2] = $20;
    $21 = ($i$03|0)==($2|0);
    if ($21) {
     $22 = HEAP32[$iZero>>2]|0;
     $23 = (($1) - ($22))|0;
     $29 = $23;$33 = $22;
    } else {
     $24 = HEAP32[$aHash>>2]|0;
     $25 = $24;
     $26 = $20;
     $27 = (($25) - ($26))|0;
     $28 = $27 >> 2;
     $$pre = HEAP32[$iZero>>2]|0;
     $29 = $28;$33 = $$pre;
    }
    HEAP32[$nEntry>>2] = $29;
    $30 = HEAP32[$10>>2]|0;
    $31 = (($16) + (($30*20)|0)|0);
    $32 = (($31) + ($33<<1)|0);
    $34 = (($33) + 1)|0;
    HEAP32[$iZero>>2] = $34;
    $35 = ($29|0)>(0);
    if ($35) {
     $j$01 = 0;
     while(1) {
      $36 = $j$01&65535;
      $$sum = (($j$01) + ($33))|0;
      $37 = (($31) + ($$sum<<1)|0);
      HEAP16[$37>>1] = $36;
      $38 = (($j$01) + 1)|0;
      $39 = ($38|0)<($29|0);
      if ($39) {
       $j$01 = $38;
      } else {
       break;
      }
     }
    }
    _walMergesort($20,$13,$32,$nEntry);
    $40 = ((($16) + (($i$03*20)|0)|0) + 16|0);
    HEAP32[$40>>2] = $34;
    $41 = HEAP32[$nEntry>>2]|0;
    $42 = ((($16) + (($i$03*20)|0)|0) + 12|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($16) + (($i$03*20)|0)|0) + 4|0);
    HEAP32[$43>>2] = $32;
    $44 = ((($16) + (($i$03*20)|0)|0) + 8|0);
    HEAP32[$44>>2] = $20;
    $45 = (($i$03) + 1)|0;
    $46 = ($45|0)<($3|0);
    $or$cond = $18 & $46;
    if ($or$cond) {
     $i$03 = $45;
    } else {
     $$lcssa = $18;$rc$1$lcssa = $17;
     label = 12;
     break L4;
    }
   }
   _sqlite3ScratchFree($13);
   $rc$1$lcssa11 = $17;
   label = 13;
  } else {
   $$lcssa = $not$;$rc$1$lcssa = $$;
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  _sqlite3ScratchFree($13);
  if ($$lcssa) {
   $rc$1$lcssa12 = $rc$1$lcssa;
  } else {
   $rc$1$lcssa11 = $rc$1$lcssa;
   label = 13;
  }
 }
 if ((label|0) == 13) {
  _walIteratorFree($8);
  $rc$1$lcssa12 = $rc$1$lcssa11;
 }
 HEAP32[$pp>>2] = $8;
 $$0 = $rc$1$lcssa12;
 STACKTOP = sp;return ($$0|0);
}
function _walIteratorNext($p,$piPage,$piFrame) {
 $p = $p|0;
 $piPage = $piPage|0;
 $piFrame = $piFrame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0310$in = 0, $i$04 = 0, $i$04$in = 0, $iRet$0$ph7 = 0, $iRet$0$ph9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 L1: do {
  if ($3) {
   $i$0310$in = $2;$iRet$0$ph9 = -1;
   while(1) {
    $i$04$in = $i$0310$in;
    L4: while(1) {
     $i$04 = (($i$04$in) + -1)|0;
     $4 = ((($p) + (($i$04*20)|0)|0) + 8|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ((($p) + (($i$04*20)|0)|0) + 20|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($5|0)<($7|0);
     L6: do {
      if ($8) {
       $9 = ((($p) + (($i$04*20)|0)|0) + 12|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ((($p) + (($i$04*20)|0)|0) + 16|0);
       $12 = HEAP32[$11>>2]|0;
       $14 = $5;
       while(1) {
        $13 = (($10) + ($14<<1)|0);
        $15 = HEAP16[$13>>1]|0;
        $16 = $15&65535;
        $17 = (($12) + ($16<<2)|0);
        $18 = HEAP32[$17>>2]|0;
        $19 = ($18>>>0)>($0>>>0);
        if ($19) {
         break;
        }
        $26 = (($14) + 1)|0;
        HEAP32[$4>>2] = $26;
        $27 = ($26|0)<($7|0);
        if ($27) {
         $14 = $26;
        } else {
         break L6;
        }
       }
       $20 = ($18>>>0)<($iRet$0$ph9>>>0);
       if ($20) {
        break L4;
       }
      }
     } while(0);
     $21 = ($i$04|0)>(0);
     if ($21) {
      $i$04$in = $i$04;
     } else {
      $iRet$0$ph7 = $iRet$0$ph9;
      break L1;
     }
    }
    $22 = ((($p) + (($i$04*20)|0)|0) + 24|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + ($16))|0;
    HEAP32[$piFrame>>2] = $24;
    $25 = ($i$04|0)>(0);
    if ($25) {
     $i$0310$in = $i$04;$iRet$0$ph9 = $18;
    } else {
     $iRet$0$ph7 = $18;
     break;
    }
   }
  } else {
   $iRet$0$ph7 = -1;
  }
 } while(0);
 HEAP32[$p>>2] = $iRet$0$ph7;
 HEAP32[$piPage>>2] = $iRet$0$ph7;
 $28 = ($iRet$0$ph7|0)==(-1);
 $29 = $28&1;
 STACKTOP = sp;return ($29|0);
}
function _walIteratorFree($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3ScratchFree($p);
 STACKTOP = sp;return;
}
function _walMergesort($aContent,$aBuffer,$aList,$pnList) {
 $aContent = $aContent|0;
 $aBuffer = $aBuffer|0;
 $aList = $aList|0;
 $pnList = $pnList|0;
 var $$pre = 0, $$pre13 = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aMerge = 0, $aSub = 0, $exitcond = 0, $exitcond12 = 0, $iList$07 = 0, $iSub$1$lcssa = 0, $iSub$13 = 0, $iSub$2 = 0, $iSub$21 = 0, $iSub$22 = 0;
 var $nMerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $nMerge = sp + 108|0;
 $aMerge = sp + 104|0;
 $aSub = sp;
 $0 = HEAP32[$pnList>>2]|0;
 HEAP32[$nMerge>>2] = 0;
 HEAP32[$aMerge>>2] = 0;
 dest=$aSub+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = ($0|0)>(0);
 if ($1) {
  $iList$07 = 0;
  while(1) {
   HEAP32[$nMerge>>2] = 1;
   $3 = (($aList) + ($iList$07<<1)|0);
   HEAP32[$aMerge>>2] = $3;
   $4 = $iList$07 & 1;
   $5 = ($4|0)==(0);
   if ($5) {
    $15 = $3;$17 = 1;$iSub$1$lcssa = 0;
   } else {
    $iSub$13 = 0;
    while(1) {
     $6 = ((($aSub) + ($iSub$13<<3)|0) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = (($aSub) + ($iSub$13<<3)|0);
     $9 = HEAP32[$8>>2]|0;
     _walMerge($aContent,$7,$9,$aMerge,$nMerge,$aBuffer);
     $10 = (($iSub$13) + 1)|0;
     $11 = 1 << $10;
     $12 = $11 & $iList$07;
     $13 = ($12|0)==(0);
     if ($13) {
      break;
     } else {
      $iSub$13 = $10;
     }
    }
    $$pre13 = HEAP32[$aMerge>>2]|0;
    $$pre14 = HEAP32[$nMerge>>2]|0;
    $15 = $$pre13;$17 = $$pre14;$iSub$1$lcssa = $10;
   }
   $14 = ((($aSub) + ($iSub$1$lcssa<<3)|0) + 4|0);
   HEAP32[$14>>2] = $15;
   $16 = (($aSub) + ($iSub$1$lcssa<<3)|0);
   HEAP32[$16>>2] = $17;
   $18 = (($iList$07) + 1)|0;
   $exitcond12 = ($18|0)==($0|0);
   if ($exitcond12) {
    break;
   } else {
    $iList$07 = $18;
   }
  }
  $iSub$21 = (($iSub$1$lcssa) + 1)|0;
  $2 = ($iSub$21|0)<(13);
  if ($2) {
   $iSub$22 = $iSub$21;
  } else {
   $26 = $17;
   HEAP32[$pnList>>2] = $26;
   STACKTOP = sp;return;
  }
 } else {
  $iSub$22 = 1;
 }
 while(1) {
  $19 = 1 << $iSub$22;
  $20 = $19 & $0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   $22 = ((($aSub) + ($iSub$22<<3)|0) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($aSub) + ($iSub$22<<3)|0);
   $25 = HEAP32[$24>>2]|0;
   _walMerge($aContent,$23,$25,$aMerge,$nMerge,$aBuffer);
  }
  $iSub$2 = (($iSub$22) + 1)|0;
  $exitcond = ($iSub$2|0)==(13);
  if ($exitcond) {
   break;
  } else {
   $iSub$22 = $iSub$2;
  }
 }
 $$pre = HEAP32[$nMerge>>2]|0;
 $26 = $$pre;
 HEAP32[$pnList>>2] = $26;
 STACKTOP = sp;return;
}
function _walMerge($aContent,$aLeft,$nLeft,$paRight,$pnRight,$aTmp) {
 $aContent = $aContent|0;
 $aLeft = $aLeft|0;
 $nLeft = $nLeft|0;
 $paRight = $paRight|0;
 $pnRight = $pnRight|0;
 $aTmp = $aTmp|0;
 var $$iLeft$1 = 0, $$pre$phi7Z2D = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iLeft$0$be = 0, $iLeft$04 = 0;
 var $iLeft$1 = 0, $iOut$0$lcssa = 0, $iOut$02 = 0, $iRight$03 = 0, $iRight$1 = 0, $logpage$0 = 0, $logpage$0$in = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pnRight>>2]|0;
 $1 = HEAP32[$paRight>>2]|0;
 $2 = ($0|0)>(0);
 $3 = ($nLeft|0)>(0);
 $or$cond1 = $2 | $3;
 if ($or$cond1) {
  $33 = $3;$34 = $2;$iLeft$04 = 0;$iOut$02 = 0;$iRight$03 = 0;
 } else {
  $iOut$0$lcssa = 0;
  HEAP32[$paRight>>2] = $aLeft;
  HEAP32[$pnRight>>2] = $iOut$0$lcssa;
  $32 = $iOut$0$lcssa << 1;
  _memcpy(($aLeft|0),($aTmp|0),($32|0))|0;
  STACKTOP = sp;return;
 }
 while(1) {
  do {
   if ($33) {
    $4 = (($aLeft) + ($iLeft$04<<1)|0);
    if ($34) {
     $5 = HEAP16[$4>>1]|0;
     $6 = $5&65535;
     $7 = (($aContent) + ($6<<2)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($1) + ($iRight$03<<1)|0);
     $10 = HEAP16[$9>>1]|0;
     $11 = $10&65535;
     $12 = (($aContent) + ($11<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($8>>>0)<($13>>>0);
     if (!($14)) {
      $$pre$phi7Z2D = $9;
      label = 7;
      break;
     }
    }
    $15 = (($iLeft$04) + 1)|0;
    $iLeft$1 = $15;$iRight$1 = $iRight$03;$logpage$0$in = $4;
   } else {
    $$pre6 = (($1) + ($iRight$03<<1)|0);
    $$pre$phi7Z2D = $$pre6;
    label = 7;
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $16 = (($iRight$03) + 1)|0;
   $iLeft$1 = $iLeft$04;$iRight$1 = $16;$logpage$0$in = $$pre$phi7Z2D;
  }
  $logpage$0 = HEAP16[$logpage$0$in>>1]|0;
  $17 = $logpage$0&65535;
  $18 = (($aContent) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($iOut$02) + 1)|0;
  $21 = (($aTmp) + ($iOut$02<<1)|0);
  HEAP16[$21>>1] = $logpage$0;
  $22 = ($iLeft$1|0)<($nLeft|0);
  if ($22) {
   $25 = (($aLeft) + ($iLeft$1<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = (($aContent) + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==($19|0);
   $31 = $30&1;
   $$iLeft$1 = (($31) + ($iLeft$1))|0;
   $iLeft$0$be = $$iLeft$1;
  } else {
   $iLeft$0$be = $iLeft$1;
  }
  $23 = ($iRight$1|0)<($0|0);
  $24 = ($iLeft$0$be|0)<($nLeft|0);
  $or$cond = $23 | $24;
  if ($or$cond) {
   $33 = $24;$34 = $23;$iLeft$04 = $iLeft$0$be;$iOut$02 = $20;$iRight$03 = $iRight$1;
  } else {
   $iOut$0$lcssa = $20;
   break;
  }
 }
 HEAP32[$paRight>>2] = $aLeft;
 HEAP32[$pnRight>>2] = $iOut$0$lcssa;
 $32 = $iOut$0$lcssa << 1;
 _memcpy(($aLeft|0),($aTmp|0),($32|0))|0;
 STACKTOP = sp;return;
}
function _walIndexTryHdr($pWal,$pChanged) {
 $pWal = $pWal|0;
 $pChanged = $pChanged|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aCksum = 0, $h1 = 0, $h2 = 0, $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $aCksum = sp + 96|0;
 $h1 = sp + 48|0;
 $h2 = sp;
 $pWal$idx = (($pWal) + 32|0);
 $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
 $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
 $0 = (_walIndexHdr($pWal$idx$val$val)|0);
 dest=$h1+0|0; src=$0+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _walShmBarrier($pWal);
 $1 = (($0) + 48|0);
 dest=$h2+0|0; src=$1+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $2 = (_memcmp($h1,$h2,48)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($h1) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _walChecksumBytes(1,$h1,40,0,$aCksum);
 $7 = HEAP32[$aCksum>>2]|0;
 $8 = (($h1) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if (!($10)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($aCksum) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($h1) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 if (!($15)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($pWal) + 52|0);
 $17 = (_memcmp($16,$h1,48)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pChanged>>2] = 1;
 dest=$16+0|0; src=$h1+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = (($pWal) + 66|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $21 & 65024;
 $23 = $21 << 16;
 $24 = $23 & 65536;
 $25 = $24 | $22;
 $26 = (($pWal) + 36|0);
 HEAP32[$26>>2] = $25;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _walIndexRecover($pWal) {
 $pWal = $pWal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $96$phi = 0;
 var $97 = 0, $97$phi = 0, $98 = 0, $99 = 0, $aBuf = 0, $aFrameCksum$sroa$0$0$lcssa = 0, $aFrameCksum$sroa$0$020 = 0, $aFrameCksum$sroa$0$1 = 0, $aFrameCksum$sroa$0$24 = 0, $aFrameCksum$sroa$1$0$lcssa = 0, $aFrameCksum$sroa$1$021 = 0, $aFrameCksum$sroa$1$1 = 0, $aFrameCksum$sroa$1$25 = 0, $iFrame$018 = 0, $nSize = 0, $nTruncate = 0, $or$cond = 0, $or$cond3 = 0, $pWal$idx = 0, $pWal$idx$val = 0;
 var $pWal$idx$val$val = 0, $pgno = 0, $phitmp = 0, $rc$1$ph = 0, $rc$3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 8|0;
 $nSize = sp;
 $aBuf = sp + 24|0;
 $pgno = sp + 20|0;
 $nTruncate = sp + 16|0;
 $0 = (($pWal) + 45|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 1)|0;
 $4 = (7 - ($2))|0;
 $5 = (_walLockExclusive($pWal,$3,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pWal) + 52|0);
 dest=$7+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (($pWal) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3OsFileSize($9,$nSize)|0);
 $11 = ($10|0)==(0);
 L4: do {
  if ($11) {
   $12 = $nSize;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)>(0);
   $19 = ($17|0)==(0);
   $20 = ($14>>>0)>(32);
   $21 = $19 & $20;
   $22 = $18 | $21;
   L6: do {
    if ($22) {
     $23 = HEAP32[$8>>2]|0;
     $24 = (_sqlite3OsRead($23,$aBuf,32,0,0)|0);
     $25 = ($24|0)==(0);
     if (!($25)) {
      $rc$3 = $24;
      break L4;
     }
     $26 = (_sqlite3Get4byte($aBuf)|0);
     $27 = (($aBuf) + 8|0);
     $28 = (_sqlite3Get4byte($27)|0);
     $29 = $26 & -2;
     $30 = ($29|0)==(931071618);
     if ($30) {
      $31 = (($28) + -1)|0;
      $32 = $31 & $28;
      $33 = ($32|0)!=(0);
      $34 = ($28|0)>(65536);
      $or$cond = $33 | $34;
      $35 = ($28|0)<(512);
      $or$cond3 = $or$cond | $35;
      if ($or$cond3) {
       $aFrameCksum$sroa$0$24 = 0;$aFrameCksum$sroa$1$25 = 0;
      } else {
       $36 = $26 & 1;
       $37 = $36&255;
       $38 = (($pWal) + 65|0);
       HEAP8[$38>>0] = $37;
       $39 = (($pWal) + 36|0);
       HEAP32[$39>>2] = $28;
       $40 = (($aBuf) + 12|0);
       $41 = (_sqlite3Get4byte($40)|0);
       $42 = (($pWal) + 104|0);
       HEAP32[$42>>2] = $41;
       $43 = (($pWal) + 84|0);
       $44 = (($aBuf) + 16|0);
       $45 = $44;
       $46 = $45;
       $47 = HEAPU8[$46>>0]|(HEAPU8[$46+1>>0]<<8)|(HEAPU8[$46+2>>0]<<16)|(HEAPU8[$46+3>>0]<<24);
       $48 = (($45) + 4)|0;
       $49 = $48;
       $50 = HEAPU8[$49>>0]|(HEAPU8[$49+1>>0]<<8)|(HEAPU8[$49+2>>0]<<16)|(HEAPU8[$49+3>>0]<<24);
       $51 = $43;
       $52 = $51;
       HEAP8[$52>>0]=$47&255;HEAP8[$52+1>>0]=($47>>8)&255;HEAP8[$52+2>>0]=($47>>16)&255;HEAP8[$52+3>>0]=$47>>24;
       $53 = (($51) + 4)|0;
       $54 = $53;
       HEAP8[$54>>0]=$50&255;HEAP8[$54+1>>0]=($50>>8)&255;HEAP8[$54+2>>0]=($50>>16)&255;HEAP8[$54+3>>0]=$50>>24;
       $55 = $36 ^ 1;
       $56 = (($pWal) + 76|0);
       _walChecksumBytes($55,$aBuf,24,0,$56);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($aBuf) + 24|0);
       $59 = (_sqlite3Get4byte($58)|0);
       $60 = ($57|0)==($59|0);
       if ($60) {
        $61 = (($pWal) + 80|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = (($aBuf) + 28|0);
        $64 = (_sqlite3Get4byte($63)|0);
        $65 = ($62|0)==($64|0);
        if ($65) {
         $66 = (($aBuf) + 4|0);
         $67 = (_sqlite3Get4byte($66)|0);
         $68 = ($67|0)==(3007000);
         if (!($68)) {
          _sqlite3CantopenError(47905);
          $rc$3 = 14;
          break L4;
         }
         $69 = (($28) + 24)|0;
         $70 = (_sqlite3_malloc($69)|0);
         $71 = ($70|0)==(0|0);
         if ($71) {
          $rc$3 = 7;
          break L4;
         }
         $72 = (($70) + 24|0);
         $73 = ($69|0)<(0);
         $74 = $73 << 31 >> 31;
         $75 = (_i64Add(($69|0),($74|0),32,0)|0);
         $76 = tempRet0;
         $77 = $nSize;
         $78 = $77;
         $79 = HEAP32[$78>>2]|0;
         $80 = (($77) + 4)|0;
         $81 = $80;
         $82 = HEAP32[$81>>2]|0;
         $83 = ($76|0)>($82|0);
         $84 = ($76|0)==($82|0);
         $85 = ($75>>>0)>($79>>>0);
         $86 = $84 & $85;
         $87 = $83 | $86;
         L17: do {
          if ($87) {
           $aFrameCksum$sroa$0$0$lcssa = 0;$aFrameCksum$sroa$1$0$lcssa = 0;
          } else {
           $88 = (($pWal) + 68|0);
           $89 = (($pWal) + 72|0);
           $90 = $28 & 65280;
           $91 = $28 >>> 16;
           $92 = $90 | $91;
           $93 = $92&65535;
           $94 = (($pWal) + 66|0);
           $109 = $75;$110 = $76;$96 = 32;$97 = 0;$aFrameCksum$sroa$0$020 = 0;$aFrameCksum$sroa$1$021 = 0;$iFrame$018 = 1;
           while(1) {
            $95 = HEAP32[$8>>2]|0;
            $98 = (_sqlite3OsRead($95,$70,$69,$96,$97)|0);
            $99 = ($98|0)==(0);
            if (!($99)) {
             $rc$1$ph = $98;
             label = 21;
             break;
            }
            $100 = (_walDecodeFrame($pWal,$pgno,$nTruncate,$72,$70)|0);
            $101 = ($100|0)==(0);
            if ($101) {
             label = 16;
             break;
            }
            $102 = HEAP32[$pgno>>2]|0;
            $103 = (_walIndexAppend($pWal,$iFrame$018,$102)|0);
            $104 = ($103|0)==(0);
            if (!($104)) {
             $rc$1$ph = $103;
             label = 21;
             break;
            }
            $105 = HEAP32[$nTruncate>>2]|0;
            $106 = ($105|0)==(0);
            if ($106) {
             $aFrameCksum$sroa$0$1 = $aFrameCksum$sroa$0$020;$aFrameCksum$sroa$1$1 = $aFrameCksum$sroa$1$021;
            } else {
             HEAP32[$88>>2] = $iFrame$018;
             HEAP32[$89>>2] = $105;
             HEAP16[$94>>1] = $93;
             $107 = HEAP32[$56>>2]|0;
             $108 = HEAP32[$61>>2]|0;
             $aFrameCksum$sroa$0$1 = $107;$aFrameCksum$sroa$1$1 = $108;
            }
            $phitmp = (($iFrame$018) + 1)|0;
            $111 = (_i64Add(($109|0),($110|0),($69|0),($74|0))|0);
            $112 = tempRet0;
            $113 = $nSize;
            $114 = $113;
            $115 = HEAP32[$114>>2]|0;
            $116 = (($113) + 4)|0;
            $117 = $116;
            $118 = HEAP32[$117>>2]|0;
            $119 = ($112|0)>($118|0);
            $120 = ($112|0)==($118|0);
            $121 = ($111>>>0)>($115>>>0);
            $122 = $120 & $121;
            $123 = $119 | $122;
            if ($123) {
             $aFrameCksum$sroa$0$0$lcssa = $aFrameCksum$sroa$0$1;$aFrameCksum$sroa$1$0$lcssa = $aFrameCksum$sroa$1$1;
             break L17;
            } else {
             $97$phi = $110;$96$phi = $109;$109 = $111;$110 = $112;$aFrameCksum$sroa$0$020 = $aFrameCksum$sroa$0$1;$aFrameCksum$sroa$1$021 = $aFrameCksum$sroa$1$1;$iFrame$018 = $phitmp;$97 = $97$phi;$96 = $96$phi;
            }
           }
           if ((label|0) == 16) {
            _sqlite3_free($70);
            $aFrameCksum$sroa$0$24 = $aFrameCksum$sroa$0$020;$aFrameCksum$sroa$1$25 = $aFrameCksum$sroa$1$021;
            break L6;
           }
           else if ((label|0) == 21) {
            _sqlite3_free($70);
            $rc$3 = $rc$1$ph;
            break L4;
           }
          }
         } while(0);
         _sqlite3_free($70);
         $aFrameCksum$sroa$0$24 = $aFrameCksum$sroa$0$0$lcssa;$aFrameCksum$sroa$1$25 = $aFrameCksum$sroa$1$0$lcssa;
        } else {
         $aFrameCksum$sroa$0$24 = 0;$aFrameCksum$sroa$1$25 = 0;
        }
       } else {
        $aFrameCksum$sroa$0$24 = 0;$aFrameCksum$sroa$1$25 = 0;
       }
      }
     } else {
      $aFrameCksum$sroa$0$24 = 0;$aFrameCksum$sroa$1$25 = 0;
     }
    } else {
     $aFrameCksum$sroa$0$24 = 0;$aFrameCksum$sroa$1$25 = 0;
    }
   } while(0);
   $124 = (($pWal) + 76|0);
   HEAP32[$124>>2] = $aFrameCksum$sroa$0$24;
   $125 = (($pWal) + 80|0);
   HEAP32[$125>>2] = $aFrameCksum$sroa$1$25;
   _walIndexWriteHdr($pWal);
   $pWal$idx = (($pWal) + 32|0);
   $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
   $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
   $126 = (_walCkptInfo($pWal$idx$val$val)|0);
   HEAP32[$126>>2] = 0;
   $127 = (($126) + 4|0);
   HEAP32[$127>>2] = 0;
   $128 = (($126) + 8|0);
   HEAP32[$128>>2] = -1;
   $129 = (($126) + 12|0);
   HEAP32[$129>>2] = -1;
   $130 = (($126) + 16|0);
   HEAP32[$130>>2] = -1;
   $131 = (($126) + 20|0);
   HEAP32[$131>>2] = -1;
   $132 = (($pWal) + 68|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(0);
   if (!($134)) {
    HEAP32[$128>>2] = $133;
   }
   $135 = (($pWal) + 72|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = ($136|0)==(0);
   if ($137) {
    $rc$3 = 0;
   } else {
    $138 = HEAP32[$132>>2]|0;
    $139 = (($pWal) + 100|0);
    $140 = HEAP32[$139>>2]|0;
    HEAP32[$vararg_buffer>>2] = $138;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $140;
    _sqlite3_log(283,4736,$vararg_buffer);
    $rc$3 = 0;
   }
  } else {
   $rc$3 = $10;
  }
 } while(0);
 _walUnlockExclusive($pWal,$3,$4);
 $$0 = $rc$3;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3CantopenError($lineno) {
 $lineno = $lineno|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $lineno;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = ((1768 + 20|0));
 _sqlite3_log(14,4696,$vararg_buffer);
 STACKTOP = sp;return;
}
function _walChecksumBytes($nativeCksum,$a,$nByte,$aIn,$aOut) {
 $nativeCksum = $nativeCksum|0;
 $a = $a|0;
 $nByte = $nByte|0;
 $aIn = $aIn|0;
 $aOut = $aOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aData$0 = 0, $aData$1 = 0, $s1$0 = 0, $s1$1 = 0, $s1$2 = 0, $s1$3 = 0, $s2$0 = 0, $s2$1 = 0, $s2$2 = 0, $s2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + ($nByte)|0);
 $1 = ($aIn|0)==(0|0);
 if ($1) {
  $s1$0 = 0;$s2$0 = 0;
 } else {
  $2 = HEAP32[$aIn>>2]|0;
  $3 = (($aIn) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $s1$0 = $2;$s2$0 = $4;
 }
 $5 = ($nativeCksum|0)==(0);
 if ($5) {
  $aData$1 = $a;$s1$2 = $s1$0;$s2$2 = $s2$0;
  while(1) {
   $15 = HEAP32[$aData$1>>2]|0;
   $16 = (_llvm_bswap_i32(($15|0))|0);
   $17 = (($s1$2) + ($s2$2))|0;
   $18 = (($17) + ($16))|0;
   $19 = (($aData$1) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_llvm_bswap_i32(($20|0))|0);
   $22 = (($18) + ($s2$2))|0;
   $23 = (($22) + ($21))|0;
   $24 = (($aData$1) + 8|0);
   $25 = ($24>>>0)<($0>>>0);
   if ($25) {
    $aData$1 = $24;$s1$2 = $18;$s2$2 = $23;
   } else {
    $s1$3 = $18;$s2$3 = $23;
    break;
   }
  }
  HEAP32[$aOut>>2] = $s1$3;
  $26 = (($aOut) + 4|0);
  HEAP32[$26>>2] = $s2$3;
  STACKTOP = sp;return;
 } else {
  $aData$0 = $a;$s1$1 = $s1$0;$s2$1 = $s2$0;
  while(1) {
   $6 = (($aData$0) + 4|0);
   $7 = HEAP32[$aData$0>>2]|0;
   $8 = (($s1$1) + ($s2$1))|0;
   $9 = (($8) + ($7))|0;
   $10 = (($aData$0) + 8|0);
   $11 = HEAP32[$6>>2]|0;
   $12 = (($9) + ($s2$1))|0;
   $13 = (($12) + ($11))|0;
   $14 = ($10>>>0)<($0>>>0);
   if ($14) {
    $aData$0 = $10;$s1$1 = $9;$s2$1 = $13;
   } else {
    $s1$3 = $9;$s2$3 = $13;
    break;
   }
  }
  HEAP32[$aOut>>2] = $s1$3;
  $26 = (($aOut) + 4|0);
  HEAP32[$26>>2] = $s2$3;
  STACKTOP = sp;return;
 }
}
function _walDecodeFrame($pWal,$piPage,$pnTruncate,$aData,$aFrame) {
 $pWal = $pWal|0;
 $piPage = $piPage|0;
 $pnTruncate = $pnTruncate|0;
 $aData = $aData|0;
 $aFrame = $aFrame|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 76|0);
 $1 = (($pWal) + 84|0);
 $2 = (($aFrame) + 8|0);
 $3 = (_memcmp($1,$2,8)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_sqlite3Get4byte($aFrame)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pWal) + 65|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $10 = $9&1;
 _walChecksumBytes($10,$aFrame,8,$0,$0);
 $11 = (($pWal) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 _walChecksumBytes($10,$aData,$12,$0,$0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (($aFrame) + 16|0);
 $15 = (_sqlite3Get4byte($14)|0);
 $16 = ($13|0)==($15|0);
 if (!($16)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($pWal) + 80|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($aFrame) + 20|0);
 $20 = (_sqlite3Get4byte($19)|0);
 $21 = ($18|0)==($20|0);
 if (!($21)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$piPage>>2] = $5;
 $22 = (($aFrame) + 4|0);
 $23 = (_sqlite3Get4byte($22)|0);
 HEAP32[$pnTruncate>>2] = $23;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _walIndexAppend($pWal,$iFrame,$iPage) {
 $pWal = $pWal|0;
 $iFrame = $iFrame|0;
 $iPage = $iPage|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aHash = 0, $aPgno = 0, $iKey$0$lcssa = 0, $iKey$02 = 0;
 var $iZero = 0, $nCollide$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iZero = sp + 8|0;
 $aPgno = sp + 4|0;
 $aHash = sp;
 HEAP32[$iZero>>2] = 0;
 HEAP32[$aPgno>>2] = 0;
 HEAP32[$aHash>>2] = 0;
 $0 = (_walFramePage($iFrame)|0);
 $1 = (_walHashGet($pWal,$0,$aHash,$aPgno,$iZero)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$iZero>>2]|0;
 $4 = (($iFrame) - ($3))|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = HEAP32[$aHash>>2]|0;
  $7 = (($6) + 16384|0);
  $8 = HEAP32[$aPgno>>2]|0;
  $9 = (($8) + 4|0);
  $10 = $7;
  $11 = $9;
  $12 = (($10) - ($11))|0;
  _memset(($9|0),0,($12|0))|0;
  $14 = $8;
 } else {
  $$pre = HEAP32[$aPgno>>2]|0;
  $14 = $$pre;
 }
 $13 = (($14) + ($4<<2)|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  _walCleanupHash($pWal);
 }
 $17 = (_walHash($iPage)|0);
 $18 = HEAP32[$aHash>>2]|0;
 $19 = (($18) + ($17<<1)|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20<<16>>16)==(0);
 L11: do {
  if ($21) {
   $iKey$0$lcssa = $17;
  } else {
   $22 = HEAP32[$aHash>>2]|0;
   $iKey$02 = $17;$nCollide$03 = $4;
   while(1) {
    $23 = ($nCollide$03|0)==(0);
    if ($23) {
     break;
    }
    $24 = (($nCollide$03) + -1)|0;
    $25 = (_walNextHash($iKey$02)|0);
    $26 = (($22) + ($25<<1)|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)==(0);
    if ($28) {
     $iKey$0$lcssa = $25;
     break L11;
    } else {
     $iKey$02 = $25;$nCollide$03 = $24;
    }
   }
   _sqlite3CorruptError(47774);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $29 = HEAP32[$aPgno>>2]|0;
 $30 = (($29) + ($4<<2)|0);
 HEAP32[$30>>2] = $iPage;
 $31 = $4&65535;
 $32 = HEAP32[$aHash>>2]|0;
 $33 = (($32) + ($iKey$0$lcssa<<1)|0);
 HEAP16[$33>>1] = $31;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _walIndexWriteHdr($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $pWal$idx = (($pWal) + 32|0);
 $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
 $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
 $0 = (_walIndexHdr($pWal$idx$val$val)|0);
 $1 = (($pWal) + 52|0);
 $2 = (($pWal) + 64|0);
 HEAP8[$2>>0] = 1;
 HEAP32[$1>>2] = 3007000;
 $3 = (($pWal) + 92|0);
 _walChecksumBytes(1,$1,40,0,$3);
 $4 = (($0) + 48|0);
 dest=$4+0|0; src=$1+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _walShmBarrier($pWal);
 dest=$0+0|0; src=$1+0|0; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _walShmBarrier($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 43|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pWal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3OsShmBarrier($4);
 STACKTOP = sp;return;
}
function _sqlite3OsShmBarrier($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 255]($id);
 STACKTOP = sp;return;
}
function _sqlite3InvokeBusyHandler($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = HEAP32[$p>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (($p) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)<(0);
   if ($5) {
    $$0 = 0;
   } else {
    $6 = (($p) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (FUNCTION_TABLE_iii[$1 & 255]($7,$4)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $storemerge = -1;
    } else {
     $10 = HEAP32[$3>>2]|0;
     $11 = (($10) + 1)|0;
     $storemerge = $11;
    }
    HEAP32[$3>>2] = $storemerge;
    $$0 = $8;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerGetExtra($pPg$0$2$val) {
 $pPg$0$2$val = $pPg$0$2$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPg$0$2$val|0);
}
function _sqlite3PagerPageRefcount($pPage$0$7$val) {
 $pPage$0$7$val = $pPage$0$7$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3PcachePageRefcount($pPage$0$7$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _btreeInitPage($pPage) {
 $pPage = $pPage|0;
 var $$0 = 0, $$old = 0, $$old5 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nFree$0$lcssa = 0, $nFree$09 = 0;
 var $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pPage>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pPage) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pPage) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($pPage) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5&255;
 $9 = (($7) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (_decodeFlags($pPage,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  _sqlite3CorruptError(52260);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($3) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 65535)|0;
 $17 = $16&65535;
 $18 = (($pPage) + 18|0);
 HEAP16[$18>>1] = $17;
 $19 = (($pPage) + 1|0);
 HEAP8[$19>>0] = 0;
 $20 = (($3) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($8) + 12)|0;
 $23 = (($pPage) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 2;
 $27 = (($22) - ($26))|0;
 $28 = $27&65535;
 $29 = (($pPage) + 12|0);
 HEAP16[$29>>1] = $28;
 $30 = (($7) + ($21)|0);
 $31 = (($pPage) + 60|0);
 HEAP32[$31>>2] = $30;
 $32 = $27 & 65535;
 $33 = (($7) + ($32)|0);
 $34 = (($pPage) + 64|0);
 HEAP32[$34>>2] = $33;
 $35 = (($8) + 5)|0;
 $36 = (($7) + ($35)|0);
 $37 = HEAP8[$36>>0]|0;
 $$sum = (($8) + 6)|0;
 $38 = (($7) + ($$sum)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = (($8) + 3)|0;
 $41 = (($7) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 8;
 $$sum1 = (($8) + 4)|0;
 $45 = (($7) + ($$sum1)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $44 | $47;
 $49 = $48&65535;
 $50 = (($pPage) + 16|0);
 HEAP16[$50>>1] = $49;
 $51 = HEAP32[$14>>2]|0;
 $52 = (($51) + -8)|0;
 $53 = (($52>>>0) / 6)&-1;
 $54 = ($48>>>0)>($53>>>0);
 if ($54) {
  _sqlite3CorruptError(52272);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = $37&255;
 $56 = $39&255;
 $57 = $55 << 8;
 $58 = $57 | $56;
 $59 = (($58) + 65535)|0;
 $60 = $59 & 65535;
 $61 = (($60) + 1)|0;
 $62 = $48 << 1;
 $63 = (($62) + ($32))|0;
 $64 = (($21) + -4)|0;
 $65 = (($8) + 1)|0;
 $66 = (($7) + ($65)|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 << 8;
 $$sum2 = (($8) + 2)|0;
 $70 = (($7) + ($$sum2)|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $69 | $72;
 $74 = (($8) + 7)|0;
 $75 = (($7) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (($61) + ($77))|0;
 $79 = ($73|0)==(0);
 do {
  if ($79) {
   $nFree$0$lcssa = $78;
  } else {
   $81 = $73;$nFree$09 = $78;
   while(1) {
    $80 = ($81|0)<($63|0);
    $82 = ($81|0)>($64|0);
    $or$cond = $80 | $82;
    if ($or$cond) {
     label = 8;
     break;
    }
    $83 = (($7) + ($81)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = $85 << 8;
    $$sum3 = (($81) + 1)|0;
    $87 = (($7) + ($$sum3)|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = $86 | $89;
    $91 = (($81) + 2)|0;
    $92 = (($7) + ($91)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $94 << 8;
    $$sum4 = (($81) + 3)|0;
    $96 = (($7) + ($$sum4)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $95 | $98;
    $100 = ($90|0)==(0);
    $$old = (($99) + ($81))|0;
    if ($100) {
     label = 12;
     break;
    }
    $101 = (($$old) + 3)|0;
    $102 = ($90|0)<=($101|0);
    $103 = ($$old|0)>($21|0);
    $or$cond6 = $102 | $103;
    if ($or$cond6) {
     break;
    }
    $104 = (($99) + ($nFree$09))|0;
    $81 = $90;$nFree$09 = $104;
   }
   if ((label|0) == 8) {
    _sqlite3CorruptError(52315);
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    $$old5 = ($$old|0)>($21|0);
    if (!($$old5)) {
     $105 = (($99) + ($nFree$09))|0;
     $nFree$0$lcssa = $105;
     break;
    }
   }
   _sqlite3CorruptError(52322);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $106 = ($nFree$0$lcssa|0)>($21|0);
 if ($106) {
  _sqlite3CorruptError(52336);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 } else {
  $107 = (($nFree$0$lcssa) - ($63))|0;
  $108 = $107&65535;
  $109 = (($pPage) + 14|0);
  HEAP16[$109>>1] = $108;
  HEAP8[$pPage>>0] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _decodeFlags($pPage,$flagByte) {
 $pPage = $pPage|0;
 $flagByte = $flagByte|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flagByte >>> 3;
 $1 = $0&255;
 $2 = (($pPage) + 3|0);
 HEAP8[$2>>0] = $1;
 $3 = $flagByte & -9;
 $4 = $0 << 2;
 $5 = (4 - ($4))|0;
 $6 = $5&255;
 $7 = (($pPage) + 6|0);
 HEAP8[$7>>0] = $6;
 $8 = (($pPage) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 if ((($3|0) == 5)) {
  $10 = (($pPage) + 2|0);
  HEAP8[$10>>0] = 1;
  $11 = (($pPage) + 4|0);
  HEAP8[$11>>0] = $1;
  $12 = (($9) + 28|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = (($pPage) + 8|0);
  HEAP16[$14>>1] = $13;
  $15 = (($9) + 30|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (($pPage) + 10|0);
  HEAP16[$17>>1] = $16;
 } else if ((($3|0) == 2)) {
  $18 = (($pPage) + 2|0);
  HEAP8[$18>>0] = 0;
  $19 = (($pPage) + 4|0);
  HEAP8[$19>>0] = 0;
  $20 = (($9) + 24|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = (($pPage) + 8|0);
  HEAP16[$22>>1] = $21;
  $23 = (($9) + 26|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = (($pPage) + 10|0);
  HEAP16[$25>>1] = $24;
 } else {
  _sqlite3CorruptError(52221);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($9) + 21|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = (($pPage) + 7|0);
 HEAP8[$28>>0] = $27;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PcacheOpen($szPage,$bPurgeable,$xStress,$pStress,$p) {
 $szPage = $szPage|0;
 $bPurgeable = $bPurgeable|0;
 $xStress = $xStress|0;
 $pStress = $pStress|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$p+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($p) + 20|0);
 HEAP32[$0>>2] = $szPage;
 $1 = (($p) + 24|0);
 HEAP32[$1>>2] = 80;
 $2 = $bPurgeable&255;
 $3 = (($p) + 28|0);
 HEAP8[$3>>0] = $2;
 $4 = (($p) + 29|0);
 HEAP8[$4>>0] = 2;
 $5 = (($p) + 32|0);
 HEAP32[$5>>2] = $xStress;
 $6 = (($p) + 36|0);
 HEAP32[$6>>2] = $pStress;
 $7 = (($p) + 16|0);
 HEAP32[$7>>2] = 100;
 STACKTOP = sp;return;
}
function _pagerStress($p,$pPg) {
 $p = $p|0;
 $pPg = $pPg|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPg$idx = 0, $pPg$idx$val = 0, $pPg$idx2 = 0, $pPg$idx2$val = 0, $pPg$idx3 = 0, $pPg$idx3$val = 0, $rc$3 = 0, $rc$39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($p) + 19|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = $4 & 3;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $8 = (($pPg) + 24|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & 4;
  $11 = ($10<<16>>16)==(0);
  if (!($11)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = (($pPg) + 12|0);
 HEAP32[$12>>2] = 0;
 $$idx = (($p) + 208|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $13 = (_pagerUseWal($$idx$val)|0);
 $14 = ($13|0)==(0);
 do {
  if ($14) {
   $20 = (($pPg) + 24|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 & 4;
   $23 = ($22<<16>>16)==(0);
   if ($23) {
    $24 = (($p) + 15|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(3);
    if ($26) {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    $27 = (_syncJournal($p,1)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     $rc$39 = $27;
     break;
    }
   }
   $29 = (($pPg) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($p) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30>>>0)>($32>>>0);
   if ($33) {
    $pPg$idx = (($pPg) + 16|0);
    $pPg$idx$val = HEAP32[$pPg$idx>>2]|0;
    $34 = (_subjRequiresPage($pPg$idx$val,$30)|0);
    $35 = ($34|0)==(0);
    if (!($35)) {
     $36 = (_subjournalPage($pPg)|0);
     $37 = ($36|0)==(0);
     if (!($37)) {
      $rc$39 = $36;
      break;
     }
    }
   }
   $38 = (_pager_write_pagelist($p,$pPg)|0);
   $rc$3 = $38;
   label = 16;
  } else {
   $pPg$idx2 = (($pPg) + 16|0);
   $pPg$idx2$val = HEAP32[$pPg$idx2>>2]|0;
   $pPg$idx3 = (($pPg) + 20|0);
   $pPg$idx3$val = HEAP32[$pPg$idx3>>2]|0;
   $15 = (_subjRequiresPage($pPg$idx2$val,$pPg$idx3$val)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (_subjournalPage($pPg)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     $rc$39 = $17;
     break;
    }
   }
   $19 = (_pagerWalFrames($p,$pPg,0,0)|0);
   $rc$3 = $19;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = ($rc$3|0)==(0);
  if ($39) {
   _sqlite3PcacheMakeClean($pPg);
   $rc$39 = 0;
  } else {
   $rc$39 = $rc$3;
  }
 }
 $40 = (_pager_error($p,$rc$39)|0);
 $$0 = $40;
 STACKTOP = sp;return ($$0|0);
}
function _subjRequiresPage($pPg$0$4$val,$pPg$0$5$val) {
 $pPg$0$4$val = $pPg$0$4$val|0;
 $pPg$0$5$val = $pPg$0$5$val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg$0$4$val) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPg$0$4$val) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $i$01 = 0;
 while(1) {
  $5 = ((($4) + (($i$01*48)|0)|0) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)<($pPg$0$5$val>>>0);
  if (!($7)) {
   $8 = ((($4) + (($i$01*48)|0)|0) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_sqlite3BitvecTest($9,$pPg$0$5$val)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = 1;
    label = 6;
    break;
   }
  }
  $12 = (($i$01) + 1)|0;
  $13 = ($12|0)<($1|0);
  if ($13) {
   $i$01 = $12;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _subjournalPage($pPg) {
 $pPg = $pPg|0;
 var $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 if ($4) {
  $$pre = (($1) + 52|0);
  $$pre2 = (($pPg) + 20|0);
  $$pre$phi3Z2D = $$pre2;$$pre$phiZ2D = $$pre;
 } else {
  $5 = (_openSubJournal($1)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $rc$1 = $5;
   STACKTOP = sp;return ($rc$1|0);
  }
  $7 = (($pPg) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($1) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($1) + 152|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 4)|0;
  $14 = ($13|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (___muldi3(($13|0),($15|0),($10|0),0)|0);
  $17 = tempRet0;
  $18 = (($1) + 68|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($pPg) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_write32bits($19,$16,$17,$21)|0);
  $23 = ($22|0)==(0);
  if (!($23)) {
   $rc$1 = $22;
   STACKTOP = sp;return ($rc$1|0);
  }
  $24 = HEAP32[$18>>2]|0;
  $25 = HEAP32[$11>>2]|0;
  $26 = (_i64Add(($16|0),($17|0),4,0)|0);
  $27 = tempRet0;
  $28 = (_sqlite3OsWrite($24,$8,$25,$26,$27)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $$pre$phi3Z2D = $20;$$pre$phiZ2D = $9;
  } else {
   $rc$1 = $28;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $30 = HEAP32[$$pre$phiZ2D>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $31;
 $32 = HEAP32[$$pre$phi3Z2D>>2]|0;
 $33 = (_addToSavepointBitvecs($1,$32)|0);
 $rc$1 = $33;
 STACKTOP = sp;return ($rc$1|0);
}
function _pagerWalFrames($pPager,$pList,$nTruncate,$isCommit) {
 $pPager = $pPager|0;
 $pList = $pList|0;
 $nTruncate = $nTruncate|0;
 $isCommit = $isCommit|0;
 var $$pre$pre = 0, $$pre10 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $nList$03 = 0, $nList$1 = 0, $nList$2 = 0, $or$cond = 0, $p$04 = 0, $ppNext$05 = 0, $ppNext$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $pList;
 $1 = ($isCommit|0)==(0);
 if ($1) {
  $14 = $pList;$nList$2 = 1;
 } else {
  HEAP32[$0>>2] = $pList;
  $2 = ($pList|0)==(0|0);
  if ($2) {
   $14 = 0;$nList$2 = 0;
  } else {
   $nList$03 = 0;$p$04 = $pList;$ppNext$05 = $0;
   while(1) {
    $3 = (($p$04) + 20|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4>>>0)>($nTruncate>>>0);
    $$pre10 = (($p$04) + 12|0);
    $6 = $5&1;
    $7 = $6 ^ 1;
    $nList$1 = (($nList$03) + ($7))|0;
    $ppNext$1 = $5 ? $ppNext$05 : $$pre10;
    $8 = HEAP32[$$pre10>>2]|0;
    HEAP32[$ppNext$1>>2] = $8;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break;
    } else {
     $nList$03 = $nList$1;$p$04 = $8;$ppNext$05 = $ppNext$1;
    }
   }
   $$pre$pre = HEAP32[$0>>2]|0;
   $14 = $$pre$pre;$nList$2 = $nList$1;
  }
 }
 $10 = (($pPager) + 192|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($nList$2))|0;
 HEAP32[$10>>2] = $12;
 $13 = (($14) + 20|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = ($15|0)==(1);
 if ($16) {
  _pager_write_changecounter($14);
 }
 $17 = (($pPager) + 208|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($pPager) + 152|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($pPager) + 10|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (_sqlite3WalFrames($18,$20,$14,$nTruncate,$isCommit,$23)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  STACKTOP = sp;return ($24|0);
 }
 $26 = (($pPager) + 88|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 $29 = ($14|0)==(0|0);
 $or$cond = $28 | $29;
 if ($or$cond) {
  STACKTOP = sp;return ($24|0);
 } else {
  $31 = $14;$35 = $27;
 }
 while(1) {
  $30 = (($31) + 20|0);
  $32 = HEAP32[$30>>2]|0;
  $33 = (($31) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  _sqlite3BackupUpdate($35,$32,$34);
  $36 = (($31) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   break;
  }
  $$pre8 = HEAP32[$26>>2]|0;
  $31 = $37;$35 = $$pre8;
 }
 STACKTOP = sp;return ($24|0);
}
function _syncJournal($pPager,$newHdr) {
 $pPager = $pPager|0;
 $newHdr = $newHdr|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $aMagic = 0, $brmerge = 0;
 var $rc$0 = 0, $zHeader = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $aMagic = sp + 16|0;
 $zHeader = sp;
 $0 = (_sqlite3PagerExclusiveLock($pPager)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pPager) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (($pPager) + 64|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = (($pPager) + 5|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(4);
    if (!($11)) {
     $12 = (($pPager) + 60|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (_sqlite3OsDeviceCharacteristics($13)|0);
     $15 = $14 & 512;
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = $zHeader;
      $18 = $17;
      HEAP32[$18>>2] = -117058087;
      $19 = (($17) + 4)|0;
      $20 = $19;
      HEAP32[$20>>2] = -681336544;
      $21 = (($zHeader) + 8|0);
      $22 = (($pPager) + 44|0);
      $23 = HEAP32[$22>>2]|0;
      _sqlite3Put4byte($21,$23);
      $24 = (_journalHdrOffset($pPager)|0);
      $25 = tempRet0;
      $26 = HEAP32[$5>>2]|0;
      $27 = (_sqlite3OsRead($26,$aMagic,8,$24,$25)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $29 = (_memcmp($aMagic,4608,8)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $31 = HEAP32[$5>>2]|0;
        $32 = (_sqlite3OsWrite($31,4800,1,$24,$25)|0);
        $rc$0 = $32;
        label = 9;
       }
      } else {
       $rc$0 = $27;
       label = 9;
      }
      if ((label|0) == 9) {
       if (!((($rc$0|0) == 0) | (($rc$0|0) == 522))) {
        $$0 = $rc$0;
        STACKTOP = sp;return ($$0|0);
       }
      }
      $33 = (($pPager) + 8|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if (!($35)) {
       $36 = $14 & 1024;
       $37 = ($36|0)==(0);
       if ($37) {
        $38 = HEAP32[$5>>2]|0;
        $39 = (($pPager) + 11|0);
        $40 = HEAP8[$39>>0]|0;
        $41 = $40&255;
        $42 = (_sqlite3OsSync($38,$41)|0);
        $43 = ($42|0)==(0);
        if (!($43)) {
         $$0 = $42;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
      $44 = HEAP32[$5>>2]|0;
      $45 = (($pPager) + 80|0);
      $46 = $45;
      $47 = $46;
      $48 = HEAP32[$47>>2]|0;
      $49 = (($46) + 4)|0;
      $50 = $49;
      $51 = HEAP32[$50>>2]|0;
      $52 = (_sqlite3OsWrite($44,$zHeader,12,$48,$51)|0);
      $53 = ($52|0)==(0);
      if (!($53)) {
       $$0 = $52;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $54 = $14 & 1024;
     $55 = ($54|0)==(0);
     if ($55) {
      $56 = HEAP32[$5>>2]|0;
      $57 = (($pPager) + 11|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $58&255;
      $60 = ($58<<24>>24)==(3);
      $61 = $60 ? 16 : 0;
      $62 = $61 | $59;
      $63 = (_sqlite3OsSync($56,$62)|0);
      $64 = ($63|0)==(0);
      if (!($64)) {
       $$0 = $63;
       STACKTOP = sp;return ($$0|0);
      }
     }
     $65 = (($pPager) + 72|0);
     $66 = $65;
     $67 = $66;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($66) + 4)|0;
     $70 = $69;
     $71 = HEAP32[$70>>2]|0;
     $72 = (($pPager) + 80|0);
     $73 = $72;
     $74 = $73;
     HEAP32[$74>>2] = $68;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = $71;
     $77 = ($newHdr|0)==(0);
     $$not = $16 ^ 1;
     $brmerge = $77 | $$not;
     if ($brmerge) {
      break;
     }
     $78 = (($pPager) + 44|0);
     HEAP32[$78>>2] = 0;
     $79 = (_writeJournalHdr($pPager)|0);
     $80 = ($79|0)==(0);
     if ($80) {
      break;
     } else {
      $$0 = $79;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
   $81 = (($pPager) + 72|0);
   $82 = $81;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (($pPager) + 80|0);
   $89 = $88;
   $90 = $89;
   HEAP32[$90>>2] = $84;
   $91 = (($89) + 4)|0;
   $92 = $91;
   HEAP32[$92>>2] = $87;
  }
 } while(0);
 $93 = (($pPager) + 204|0);
 $94 = HEAP32[$93>>2]|0;
 _sqlite3PcacheClearSyncFlags($94);
 $95 = (($pPager) + 15|0);
 HEAP8[$95>>0] = 4;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pager_write_pagelist($pPager,$pList) {
 $pPager = $pPager|0;
 $pList = $pList|0;
 var $$04 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pPager$idx$val = 0, $rc$1$lcssa = 0, $rc$2 = 0, $szFile = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $szFile = sp;
 $0 = (($pPager) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (($pPager) + 144|0);
  $5 = HEAP32[$4>>2]|0;
  $pPager$idx$val = HEAP32[$pPager>>2]|0;
  $6 = (_pagerOpentemp($pPager$idx$val,$1,$5)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $rc$1$lcssa = $6;
   STACKTOP = sp;return ($rc$1$lcssa|0);
  }
 }
 $8 = (($pPager) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pPager) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 do {
  if ($12) {
   $13 = (($pList) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = (($pList) + 20|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17>>>0)>($9>>>0);
    if (!($18)) {
     break;
    }
   }
   $19 = (($pPager) + 152|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)<(0);
   $22 = $21 << 31 >> 31;
   $23 = (___muldi3(($11|0),0,($20|0),($22|0))|0);
   $24 = tempRet0;
   $25 = $szFile;
   $26 = $25;
   HEAP32[$26>>2] = $23;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP32[$28>>2] = $24;
   $29 = HEAP32[$0>>2]|0;
   _sqlite3OsFileControlHint($29,5,$szFile);
   $30 = HEAP32[$10>>2]|0;
   HEAP32[$8>>2] = $30;
  }
 } while(0);
 $31 = ($pList|0)==(0|0);
 if ($31) {
  $rc$1$lcssa = 0;
  STACKTOP = sp;return ($rc$1$lcssa|0);
 }
 $32 = (($pPager) + 24|0);
 $33 = (($pPager) + 152|0);
 $34 = (($pPager) + 100|0);
 $35 = (($pPager) + 32|0);
 $36 = (($pPager) + 192|0);
 $37 = (($pPager) + 88|0);
 $$04 = $pList;
 while(1) {
  $38 = (($$04) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$32>>2]|0;
  $41 = ($39>>>0)>($40>>>0);
  if ($41) {
   $rc$2 = 0;
  } else {
   $42 = (($$04) + 24|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 & 32;
   $45 = ($44<<16>>16)==(0);
   if ($45) {
    $46 = (($39) + -1)|0;
    $47 = HEAP32[$33>>2]|0;
    $48 = ($47|0)<(0);
    $49 = $48 << 31 >> 31;
    $50 = (___muldi3(($47|0),($49|0),($46|0),0)|0);
    $51 = tempRet0;
    $52 = ($39|0)==(1);
    if ($52) {
     _pager_write_changecounter($$04);
     $$pre = HEAP32[$33>>2]|0;
     $56 = $$pre;
    } else {
     $56 = $47;
    }
    $53 = (($$04) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$0>>2]|0;
    $57 = (_sqlite3OsWrite($55,$54,$56,$50,$51)|0);
    if ($52) {
     $58 = (($54) + 24|0);
     dest=$34+0|0; src=$58+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    }
    $59 = HEAP32[$35>>2]|0;
    $60 = ($39>>>0)>($59>>>0);
    if ($60) {
     HEAP32[$35>>2] = $39;
    }
    $61 = HEAP32[$36>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$36>>2] = $62;
    $63 = HEAP32[$37>>2]|0;
    $64 = HEAP32[$53>>2]|0;
    _sqlite3BackupUpdate($63,$39,$64);
    $rc$2 = $57;
   } else {
    $rc$2 = 0;
   }
  }
  $65 = (($$04) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($rc$2|0)!=(0);
  $68 = ($66|0)==(0|0);
  $or$cond = $67 | $68;
  if ($or$cond) {
   $rc$1$lcssa = $rc$2;
   break;
  } else {
   $$04 = $66;
  }
 }
 STACKTOP = sp;return ($rc$1$lcssa|0);
}
function _pagerOpentemp($pPager$0$0$val,$pFile,$vfsFlags) {
 $pPager$0$0$val = $pPager$0$0$val|0;
 $pFile = $pFile|0;
 $vfsFlags = $vfsFlags|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $vfsFlags | 30;
 $1 = (_sqlite3OsOpen($pPager$0$0$val,0,$pFile,$0,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _pager_write_changecounter($pPg) {
 $pPg = $pPg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 100|0);
 $3 = (_sqlite3Get4byte($2)|0);
 $4 = (($3) + 1)|0;
 $5 = (($pPg) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 24|0);
 _sqlite3Put4byte($7,$4);
 $8 = HEAP32[$5>>2]|0;
 $9 = (($8) + 92|0);
 _sqlite3Put4byte($9,$4);
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + 96|0);
 _sqlite3Put4byte($11,3008004);
 STACKTOP = sp;return;
}
function _sqlite3Put4byte($p,$v) {
 $p = $p|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $v >>> 24;
 $1 = $0&255;
 HEAP8[$p>>0] = $1;
 $2 = $v >>> 16;
 $3 = $2&255;
 $4 = (($p) + 1|0);
 HEAP8[$4>>0] = $3;
 $5 = $v >>> 8;
 $6 = $5&255;
 $7 = (($p) + 2|0);
 HEAP8[$7>>0] = $6;
 $8 = $v&255;
 $9 = (($p) + 3|0);
 HEAP8[$9>>0] = $8;
 STACKTOP = sp;return;
}
function _sqlite3PagerExclusiveLock($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $0 = (_pagerUseWal($pPager$idx$val)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $2 = (_pager_wait_on_lock($pPager,4)|0);
 $rc$0 = $2;
 STACKTOP = sp;return ($rc$0|0);
}
function _writeJournalHdr($pPager) {
 $pPager = $pPager|0;
 var $$ = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $ii$03 = 0, $nWrite$02 = 0, $rc$0$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPager) + 152|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pPager) + 148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 $$ = $6 ? $5 : $3;
 $7 = (($pPager) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = (($pPager) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($pPager) + 72|0);
  $ii$03 = 0;
  while(1) {
   $13 = ((($11) + (($ii$03*48)|0)|0) + 8|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16|0)==(0);
   $21 = ($19|0)==(0);
   $22 = $20 & $21;
   if ($22) {
    $23 = $12;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = $13;
    $30 = $29;
    HEAP32[$30>>2] = $25;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = $28;
   }
   $33 = (($ii$03) + 1)|0;
   $34 = ($33|0)<($8|0);
   if ($34) {
    $ii$03 = $33;
   } else {
    $$pre$phiZ2D = $12;
    break;
   }
  }
 } else {
  $$pre = (($pPager) + 72|0);
  $$pre$phiZ2D = $$pre;
 }
 $35 = (_journalHdrOffset($pPager)|0);
 $36 = tempRet0;
 $37 = $$pre$phiZ2D;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($pPager) + 80|0);
 $42 = $41;
 $43 = $42;
 HEAP32[$43>>2] = $35;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $36;
 $46 = (($pPager) + 7|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $49 = (($pPager) + 5|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)==(4);
  if ($51) {
   label = 10;
  } else {
   $52 = (($pPager) + 60|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_sqlite3OsDeviceCharacteristics($53)|0);
   $55 = $54 & 512;
   $56 = ($55|0)==(0);
   if ($56) {
    dest=$1+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   } else {
    label = 10;
   }
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $57 = $1;
  $58 = $57;
  HEAP8[$58>>0]=-117058087&255;HEAP8[$58+1>>0]=(-117058087>>8)&255;HEAP8[$58+2>>0]=(-117058087>>16)&255;HEAP8[$58+3>>0]=-117058087>>24;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP8[$60>>0]=-681336544&255;HEAP8[$60+1>>0]=(-681336544>>8)&255;HEAP8[$60+2>>0]=(-681336544>>16)&255;HEAP8[$60+3>>0]=-681336544>>24;
  $61 = (($1) + 8|0);
  _sqlite3Put4byte($61,-1);
 }
 $62 = (($pPager) + 48|0);
 _sqlite3_randomness(4,$62);
 $63 = (($1) + 12|0);
 $64 = HEAP32[$62>>2]|0;
 _sqlite3Put4byte($63,$64);
 $65 = (($1) + 16|0);
 $66 = (($pPager) + 28|0);
 $67 = HEAP32[$66>>2]|0;
 _sqlite3Put4byte($65,$67);
 $68 = (($1) + 20|0);
 $69 = HEAP32[$4>>2]|0;
 _sqlite3Put4byte($68,$69);
 $70 = (($1) + 24|0);
 $71 = HEAP32[$2>>2]|0;
 _sqlite3Put4byte($70,$71);
 $72 = (($1) + 28|0);
 $73 = (($$) + -28)|0;
 _memset(($72|0),0,($73|0))|0;
 $74 = (($pPager) + 64|0);
 $nWrite$02 = 0;
 while(1) {
  $75 = HEAP32[$4>>2]|0;
  $76 = ($nWrite$02>>>0)<($75>>>0);
  if (!($76)) {
   $rc$0$lcssa = 0;
   label = 15;
   break;
  }
  $77 = HEAP32[$74>>2]|0;
  $78 = $$pre$phiZ2D;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (_sqlite3OsWrite($77,$1,$$,$80,$83)|0);
  $85 = $$pre$phiZ2D;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (_i64Add(($87|0),($90|0),($$|0),0)|0);
  $92 = tempRet0;
  $93 = $$pre$phiZ2D;
  $94 = $93;
  HEAP32[$94>>2] = $91;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
  $97 = (($nWrite$02) + ($$))|0;
  $98 = ($84|0)==(0);
  if ($98) {
   $nWrite$02 = $97;
  } else {
   $rc$0$lcssa = $84;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 return 0|0;
}
function _sqlite3PcacheClearSyncFlags($pCache) {
 $pCache = $pCache|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$01 = HEAP32[$pCache>>2]|0;
 $0 = ($p$01|0)==(0|0);
 if (!($0)) {
  $p$02 = $p$01;
  while(1) {
   $1 = (($p$02) + 24|0);
   $2 = HEAP16[$1>>1]|0;
   $3 = $2&65535;
   $4 = $3 & 65531;
   $5 = $4&65535;
   HEAP16[$1>>1] = $5;
   $6 = (($p$02) + 32|0);
   $p$0 = HEAP32[$6>>2]|0;
   $7 = ($p$0|0)==(0|0);
   if ($7) {
    break;
   } else {
    $p$02 = $p$0;
   }
  }
 }
 $8 = (($pCache) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pCache) + 8|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _pager_wait_on_lock($pPager,$locktype) {
 $pPager = $pPager|0;
 $locktype = $locktype|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 176|0);
 $1 = (($pPager) + 180|0);
 while(1) {
  $2 = (_pagerLockDb($pPager,$locktype)|0);
  $3 = ($2|0)==(5);
  if (!($3)) {
   $$lcssa = $2;
   label = 4;
   break;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$4 & 255]($5)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$lcssa = 5;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function _pagerLockDb($pPager,$eLock) {
 $pPager = $pPager|0;
 $eLock = $eLock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ($2|0)<($eLock|0);
 $4 = ($1<<24>>24)==(5);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $5 = (($pPager) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_sqlite3OsLock($6,$eLock)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)!=(5);
   $11 = ($eLock|0)==(4);
   $or$cond1 = $10 | $11;
   if ($or$cond1) {
    $12 = $eLock&255;
    HEAP8[$0>>0] = $12;
    $rc$0 = 0;
   } else {
    $rc$0 = 0;
   }
  } else {
   $rc$0 = $7;
  }
 } else {
  $rc$0 = 0;
 }
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3WalFrames($pWal,$szPage,$pList,$nTruncate,$isCommit,$sync_flags) {
 $pWal = $pWal|0;
 $szPage = $szPage|0;
 $pList = $pList|0;
 $nTruncate = $nTruncate|0;
 $isCommit = $isCommit|0;
 $sync_flags = $sync_flags|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aCksum = 0, $aWalHdr = 0, $iFrame$0$lcssa = 0, $iFrame$036 = 0, $iFrame$1$lcssa = 0, $iFrame$120 = 0, $iFrame$2$lcssa = 0, $iFrame$215 = 0, $nExtra$026 = 0;
 var $nExtra$18 = 0, $nExtra$19 = 0, $nExtra$214 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond4 = 0, $or$cond413 = 0, $p$0$idx = 0, $p$0$idx$val = 0, $p$0$idx7 = 0, $p$0$idx7$val = 0, $p$035 = 0, $p$119 = 0, $pLast$0$idx = 0, $pLast$0$idx$val = 0, $pLast$0$idx6 = 0, $pLast$0$idx6$val = 0, $pLast$0$lcssa = 0, $rc$310 = 0;
 var $rc$311 = 0, $rc$4$lcssa = 0, $rc$5$lcssa = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $w = sp;
 $aWalHdr = sp + 32|0;
 $aCksum = sp + 24|0;
 $0 = (_walRestartLog($pWal)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pWal) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _sqlite3Put4byte($aWalHdr,931071618);
  $5 = (($aWalHdr) + 4|0);
  _sqlite3Put4byte($5,3007000);
  $6 = (($aWalHdr) + 8|0);
  _sqlite3Put4byte($6,$szPage);
  $7 = (($aWalHdr) + 12|0);
  $8 = (($pWal) + 104|0);
  $9 = HEAP32[$8>>2]|0;
  _sqlite3Put4byte($7,$9);
  $10 = HEAP32[$8>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = (($pWal) + 84|0);
   _sqlite3_randomness(8,$12);
  }
  $13 = (($aWalHdr) + 16|0);
  $14 = (($pWal) + 84|0);
  $15 = $14;
  $16 = $15;
  $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8)|(HEAPU8[$19+2>>0]<<16)|(HEAPU8[$19+3>>0]<<24);
  $21 = $13;
  $22 = $21;
  HEAP8[$22>>0]=$17&255;HEAP8[$22+1>>0]=($17>>8)&255;HEAP8[$22+2>>0]=($17>>16)&255;HEAP8[$22+3>>0]=$17>>24;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP8[$24>>0]=$20&255;HEAP8[$24+1>>0]=($20>>8)&255;HEAP8[$24+2>>0]=($20>>16)&255;HEAP8[$24+3>>0]=$20>>24;
  _walChecksumBytes(1,$aWalHdr,24,0,$aCksum);
  $25 = (($aWalHdr) + 24|0);
  $26 = HEAP32[$aCksum>>2]|0;
  _sqlite3Put4byte($25,$26);
  $27 = (($aWalHdr) + 28|0);
  $28 = (($aCksum) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  _sqlite3Put4byte($27,$29);
  $30 = (($pWal) + 36|0);
  HEAP32[$30>>2] = $szPage;
  $31 = (($pWal) + 65|0);
  HEAP8[$31>>0] = 0;
  $32 = (($pWal) + 76|0);
  HEAP32[$32>>2] = $26;
  $33 = (($pWal) + 80|0);
  HEAP32[$33>>2] = $29;
  $34 = (($pWal) + 47|0);
  HEAP8[$34>>0] = 1;
  $35 = (($pWal) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_sqlite3OsWrite($36,$aWalHdr,32,0,0)|0);
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
  $39 = (($pWal) + 48|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(0);
  $42 = ($sync_flags|0)==(0);
  $or$cond = $41 | $42;
  if ($or$cond) {
   $$pre$phiZ2D = $35;
  } else {
   $43 = HEAP32[$35>>2]|0;
   $44 = $sync_flags & 19;
   $45 = (_sqlite3OsSync($43,$44)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $$pre$phiZ2D = $35;
   } else {
    $$0 = $45;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $$pre = (($pWal) + 8|0);
  $$pre$phiZ2D = $$pre;
 }
 HEAP32[$w>>2] = $pWal;
 $47 = HEAP32[$$pre$phiZ2D>>2]|0;
 $48 = (($w) + 4|0);
 HEAP32[$48>>2] = $47;
 $49 = (($w) + 8|0);
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = 0;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = (($w) + 16|0);
 HEAP32[$54>>2] = $sync_flags;
 $55 = (($w) + 20|0);
 HEAP32[$55>>2] = $szPage;
 $56 = (($szPage) + 24)|0;
 $57 = ($56|0)<(0);
 $58 = $57 << 31 >> 31;
 $59 = (___muldi3(($3|0),0,($56|0),($58|0))|0);
 $60 = tempRet0;
 $61 = (_i64Add(($59|0),($60|0),32,0)|0);
 $62 = tempRet0;
 $63 = ($pList|0)==(0|0);
 L16: do {
  if ($63) {
   $89 = $61;$90 = $62;$iFrame$0$lcssa = $3;$pLast$0$lcssa = 0;
  } else {
   $64 = ($isCommit|0)==(0);
   $70 = $61;$71 = $62;$iFrame$036 = $3;$p$035 = $pList;
   while(1) {
    $65 = (($iFrame$036) + 1)|0;
    if ($64) {
     $69 = 0;
    } else {
     $66 = (($p$035) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     $$ = $68 ? $nTruncate : 0;
     $69 = $$;
    }
    $p$0$idx = (($p$035) + 4|0);
    $p$0$idx$val = HEAP32[$p$0$idx>>2]|0;
    $p$0$idx7 = (($p$035) + 20|0);
    $p$0$idx7$val = HEAP32[$p$0$idx7>>2]|0;
    $72 = (_walWriteOneFrame($w,$p$0$idx$val,$p$0$idx7$val,$69,$70,$71)|0);
    $73 = ($72|0)==(0);
    if (!($73)) {
     $$0 = $72;
     break;
    }
    $74 = (_i64Add(($70|0),($71|0),($56|0),($58|0))|0);
    $75 = tempRet0;
    $76 = (($p$035) + 12|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if ($78) {
     $89 = $74;$90 = $75;$iFrame$0$lcssa = $65;$pLast$0$lcssa = $p$035;
     break L16;
    } else {
     $70 = $74;$71 = $75;$iFrame$036 = $65;$p$035 = $77;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $79 = ($isCommit|0)!=(0);
 if ($79) {
  $80 = $sync_flags & 32;
  $81 = ($80|0)==(0);
  L28: do {
   if ($81) {
    $nExtra$18 = 0;$rc$311 = 0;
   } else {
    $82 = (($pWal) + 49|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = ($83<<24>>24)==(0);
    if ($84) {
     $126 = HEAP32[$48>>2]|0;
     $127 = $sync_flags & 19;
     $128 = (_sqlite3OsSync($126,$127)|0);
     $nExtra$18 = 0;$rc$311 = $128;
     break;
    }
    $85 = HEAP32[$$pre$phiZ2D>>2]|0;
    $86 = (_sqlite3SectorSize($85)|0);
    $87 = ($86|0)<(0);
    $88 = $87 << 31 >> 31;
    $91 = (_i64Add(($89|0),($90|0),-1,-1)|0);
    $92 = tempRet0;
    $93 = (_i64Add(($91|0),($92|0),($86|0),($88|0))|0);
    $94 = tempRet0;
    $95 = (___remdi3(($93|0),($94|0),($86|0),($88|0))|0);
    $96 = tempRet0;
    $97 = (_i64Subtract(($93|0),($94|0),($95|0),($96|0))|0);
    $98 = tempRet0;
    $99 = $49;
    $100 = $99;
    HEAP32[$100>>2] = $97;
    $101 = (($99) + 4)|0;
    $102 = $101;
    HEAP32[$102>>2] = $98;
    $103 = ($90|0)<($98|0);
    $104 = ($90|0)==($98|0);
    $105 = ($89>>>0)<($97>>>0);
    $106 = $104 & $105;
    $107 = $103 | $106;
    if ($107) {
     $pLast$0$idx = (($pLast$0$lcssa) + 4|0);
     $pLast$0$idx6 = (($pLast$0$lcssa) + 20|0);
     $108 = $89;$109 = $90;$nExtra$026 = 0;
     while(1) {
      $pLast$0$idx$val = HEAP32[$pLast$0$idx>>2]|0;
      $pLast$0$idx6$val = HEAP32[$pLast$0$idx6>>2]|0;
      $110 = (_walWriteOneFrame($w,$pLast$0$idx$val,$pLast$0$idx6$val,$nTruncate,$108,$109)|0);
      $111 = ($110|0)==(0);
      if (!($111)) {
       $$0 = $110;
       break;
      }
      $112 = (_i64Add(($108|0),($109|0),($56|0),($58|0))|0);
      $113 = tempRet0;
      $114 = (($nExtra$026) + 1)|0;
      $115 = $49;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 4)|0;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = ($113|0)<($120|0);
      $122 = ($113|0)==($120|0);
      $123 = ($112>>>0)<($117>>>0);
      $124 = $122 & $123;
      $125 = $121 | $124;
      if ($125) {
       $108 = $112;$109 = $113;$nExtra$026 = $114;
      } else {
       $nExtra$18 = $114;$rc$311 = 0;
       break L28;
      }
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     $nExtra$18 = 0;$rc$311 = 0;
    }
   }
  } while(0);
  $129 = (($pWal) + 47|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $nExtra$19 = $nExtra$18;$rc$310 = $rc$311;
  } else {
   $132 = (($pWal) + 16|0);
   $133 = $132;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)>(-1);
   $140 = ($138|0)==(-1);
   $141 = ($135>>>0)>(4294967295);
   $142 = $140 & $141;
   $143 = $139 | $142;
   if ($143) {
    $144 = (($nExtra$18) + ($iFrame$0$lcssa))|0;
    $145 = (___muldi3(($144|0),0,($56|0),($58|0))|0);
    $146 = tempRet0;
    $147 = (_i64Add(($145|0),($146|0),32,0)|0);
    $148 = tempRet0;
    $149 = ($148|0)>($138|0);
    $150 = ($148|0)==($138|0);
    $151 = ($147>>>0)>($135>>>0);
    $152 = $150 & $151;
    $153 = $149 | $152;
    $154 = $153 ? $147 : $135;
    $155 = $153 ? $148 : $138;
    _walLimitSize($pWal,$154,$155);
    HEAP8[$129>>0] = 0;
    $nExtra$19 = $nExtra$18;$rc$310 = $rc$311;
   } else {
    $nExtra$19 = $nExtra$18;$rc$310 = $rc$311;
   }
  }
 } else {
  $nExtra$19 = 0;$rc$310 = 0;
 }
 $156 = HEAP32[$2>>2]|0;
 $157 = ($pList|0)!=(0|0);
 $158 = ($rc$310|0)==(0);
 $or$cond318 = $157 & $158;
 if ($or$cond318) {
  $iFrame$120 = $156;$p$119 = $pList;
  while(1) {
   $162 = (($iFrame$120) + 1)|0;
   $163 = (($p$119) + 20|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (_walIndexAppend($pWal,$162,$164)|0);
   $166 = (($p$119) + 12|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)!=(0|0);
   $169 = ($165|0)==(0);
   $or$cond3 = $168 & $169;
   if ($or$cond3) {
    $iFrame$120 = $162;$p$119 = $167;
   } else {
    $iFrame$1$lcssa = $162;$rc$4$lcssa = $165;
    break;
   }
  }
 } else {
  $iFrame$1$lcssa = $156;$rc$4$lcssa = $rc$310;
 }
 $159 = ($rc$4$lcssa|0)==(0);
 $160 = ($nExtra$19|0)>(0);
 $or$cond413 = $159 & $160;
 if ($or$cond413) {
  $161 = (($pLast$0$lcssa) + 20|0);
  $iFrame$215 = $iFrame$1$lcssa;$nExtra$214 = $nExtra$19;
  while(1) {
   $170 = (($iFrame$215) + 1)|0;
   $171 = (($nExtra$214) + -1)|0;
   $172 = HEAP32[$161>>2]|0;
   $173 = (_walIndexAppend($pWal,$170,$172)|0);
   $174 = ($173|0)==(0);
   $175 = ($171|0)>(0);
   $or$cond4 = $174 & $175;
   if ($or$cond4) {
    $iFrame$215 = $170;$nExtra$214 = $171;
   } else {
    $$lcssa = $174;$iFrame$2$lcssa = $170;$rc$5$lcssa = $173;
    break;
   }
  }
 } else {
  $$lcssa = $159;$iFrame$2$lcssa = $iFrame$1$lcssa;$rc$5$lcssa = $rc$4$lcssa;
 }
 if (!($$lcssa)) {
  $$0 = $rc$5$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $176 = $szPage & 65280;
 $177 = $szPage >>> 16;
 $178 = $176 | $177;
 $179 = $178&65535;
 $180 = (($pWal) + 66|0);
 HEAP16[$180>>1] = $179;
 HEAP32[$2>>2] = $iFrame$2$lcssa;
 if (!($79)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $181 = (($pWal) + 60|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + 1)|0;
 HEAP32[$181>>2] = $183;
 $184 = (($pWal) + 72|0);
 HEAP32[$184>>2] = $nTruncate;
 _walIndexWriteHdr($pWal);
 $185 = (($pWal) + 12|0);
 HEAP32[$185>>2] = $iFrame$2$lcssa;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _walRestartLog($pWal) {
 $pWal = $pWal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $notUsed = 0, $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, $salt1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $salt1 = sp + 4|0;
 $notUsed = sp;
 $0 = (($pWal) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $pWal$idx = (($pWal) + 32|0);
 $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
 $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
 $3 = (_walCkptInfo($pWal$idx$val$val)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   _sqlite3_randomness(4,$salt1);
   $6 = (_walLockExclusive($pWal,4,4)|0);
   if ((($6|0) == 5)) {
    break;
   } else if ((($6|0) == 0)) {
    $7 = (($pWal) + 84|0);
    $8 = (($pWal) + 104|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 1)|0;
    HEAP32[$8>>2] = $10;
    $11 = (($pWal) + 68|0);
    HEAP32[$11>>2] = 0;
    $12 = (_sqlite3Get4byte($7)|0);
    $13 = (($12) + 1)|0;
    _sqlite3Put4byte($7,$13);
    $14 = HEAP32[$salt1>>2]|0;
    $15 = (($pWal) + 88|0);
    HEAP32[$15>>2] = $14;
    _walIndexWriteHdr($pWal);
    HEAP32[$3>>2] = 0;
    $16 = (($3) + 8|0);
    HEAP32[$16>>2] = 0;
    $17 = (($3) + 12|0);
    HEAP32[$17>>2] = -1;
    $18 = (($3) + 16|0);
    HEAP32[$18>>2] = -1;
    $19 = (($3) + 20|0);
    HEAP32[$19>>2] = -1;
    _walUnlockExclusive($pWal,4,4);
    break;
   } else {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 _walUnlockShared($pWal,3);
 HEAP16[$0>>1] = -1;
 $cnt$0 = 0;
 while(1) {
  $20 = (($cnt$0) + 1)|0;
  $21 = (_walTryBeginRead($pWal,$notUsed,1,$20)|0);
  $22 = ($21|0)==(-1);
  if ($22) {
   $cnt$0 = $20;
  } else {
   $$0 = $21;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _walWriteOneFrame($p,$pPage$0$1$val,$pPage$0$5$val,$nTruncate,$0,$1) {
 $p = $p|0;
 $pPage$0$1$val = $pPage$0$1$val|0;
 $pPage$0$5$val = $pPage$0$5$val|0;
 $nTruncate = $nTruncate|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aFrame = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $aFrame = sp;
 $2 = HEAP32[$p>>2]|0;
 _walEncodeFrame($2,$pPage$0$5$val,$nTruncate,$pPage$0$1$val,$aFrame);
 $3 = (_walWriteToLog($p,$aFrame,24,$0,$1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($p) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_i64Add(($0|0),($1|0),24,0)|0);
 $8 = tempRet0;
 $9 = (_walWriteToLog($p,$pPage$0$1$val,$6,$7,$8)|0);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _walEncodeFrame($pWal,$iPage,$nTruncate,$aData,$aFrame) {
 $pWal = $pWal|0;
 $iPage = $iPage|0;
 $nTruncate = $nTruncate|0;
 $aData = $aData|0;
 $aFrame = $aFrame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 76|0);
 _sqlite3Put4byte($aFrame,$iPage);
 $1 = (($aFrame) + 4|0);
 _sqlite3Put4byte($1,$nTruncate);
 $2 = (($aFrame) + 8|0);
 $3 = (($pWal) + 84|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = $2;
 $11 = $10;
 HEAP8[$11>>0]=$6&255;HEAP8[$11+1>>0]=($6>>8)&255;HEAP8[$11+2>>0]=($6>>16)&255;HEAP8[$11+3>>0]=$6>>24;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP8[$13>>0]=$9&255;HEAP8[$13+1>>0]=($9>>8)&255;HEAP8[$13+2>>0]=($9>>16)&255;HEAP8[$13+3>>0]=$9>>24;
 $14 = (($pWal) + 65|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 $17 = $16&1;
 _walChecksumBytes($17,$aFrame,8,$0,$0);
 $18 = (($pWal) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 _walChecksumBytes($17,$aData,$19,$0,$0);
 $20 = (($aFrame) + 16|0);
 $21 = HEAP32[$0>>2]|0;
 _sqlite3Put4byte($20,$21);
 $22 = (($aFrame) + 20|0);
 $23 = (($pWal) + 80|0);
 $24 = HEAP32[$23>>2]|0;
 _sqlite3Put4byte($22,$24);
 STACKTOP = sp;return;
}
function _walWriteToLog($p,$pContent,$iAmt,$0,$1) {
 $p = $p|0;
 $pContent = $pContent|0;
 $iAmt = $iAmt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($p) + 8|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>($1|0);
 $10 = ($8|0)==($1|0);
 $11 = ($5>>>0)>($0>>>0);
 $12 = $10 & $11;
 $13 = $9 | $12;
 if ($13) {
  $14 = ($iAmt|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (_i64Add(($iAmt|0),($15|0),($0|0),($1|0))|0);
  $17 = tempRet0;
  $18 = ($17|0)<($8|0);
  $19 = ($17|0)==($8|0);
  $20 = ($16>>>0)<($5>>>0);
  $21 = $19 & $20;
  $22 = $18 | $21;
  if ($22) {
   $$02 = $iAmt;$$03 = $pContent;$44 = $0;$45 = $1;
  } else {
   $23 = (_i64Subtract(($5|0),($8|0),($0|0),($1|0))|0);
   $24 = tempRet0;
   $25 = (($p) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_sqlite3OsWrite($26,$pContent,$23,$0,$1)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $$0 = $27;
    STACKTOP = sp;return ($$0|0);
   }
   $29 = HEAP32[$25>>2]|0;
   $30 = (($p) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 19;
   $33 = (_sqlite3OsSync($29,$32)|0);
   $34 = ($23|0)==($iAmt|0);
   if ($34) {
    $$0 = $33;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = ($23|0)<(0);
   $36 = $35 << 31 >> 31;
   $37 = (($iAmt) - ($23))|0;
   $38 = (($pContent) + ($23)|0);
   $39 = (_i64Add(($23|0),($36|0),($0|0),($1|0))|0);
   $40 = tempRet0;
   $41 = ($33|0)==(0);
   if ($41) {
    $$02 = $37;$$03 = $38;$44 = $39;$45 = $40;
   } else {
    $$0 = $33;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $$02 = $iAmt;$$03 = $pContent;$44 = $0;$45 = $1;
 }
 $42 = (($p) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $46 = (_sqlite3OsWrite($43,$$03,$$02,$44,$45)|0);
 $$0 = $46;
 STACKTOP = sp;return ($$0|0);
}
function _walTryBeginRead($pWal,$pChanged,$useWal,$cnt) {
 $pWal = $pWal|0;
 $pChanged = $pChanged|0;
 $useWal = $useWal|0;
 $cnt = $cnt|0;
 var $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $i$19 = 0;
 var $mxI$0$i$0 = 0, $mxI$0$i$0$1 = 0, $mxI$0$i$0$2 = 0, $mxI$0$i$0$3 = 0, $mxI$1$1 = 0, $mxI$1$2 = 0, $mxI$1$3 = 0, $mxI$2 = 0, $mxReadMark$0$ = 0, $mxReadMark$0$$1 = 0, $mxReadMark$0$$2 = 0, $mxReadMark$0$$3 = 0, $mxReadMark$1$1 = 0, $mxReadMark$1$2 = 0, $mxReadMark$1$3 = 0, $mxReadMark$2 = 0, $nDelay$0 = 0, $or$cond = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0;
 var $pWal$idx1$val = 0, $pWal$idx1$val$val = 0, $pWal$idx2 = 0, $pWal$idx2$val = 0, $pWal$idx2$val$val = 0, $rc$0 = 0, $rc$2 = 0, $rc$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cnt|0)>(5);
 if ($0) {
  $1 = ($cnt|0)>(100);
  if ($1) {
   $$0 = 15;
   STACKTOP = sp;return ($$0|0);
  }
  $2 = ($cnt|0)>(9);
  if ($2) {
   $3 = ($cnt*238)|0;
   $4 = (($3) + -2142)|0;
   $nDelay$0 = $4;
  } else {
   $nDelay$0 = 1;
  }
  $5 = HEAP32[$pWal>>2]|0;
  (_sqlite3OsSleep($5,$nDelay$0)|0);
 }
 $6 = ($useWal|0)!=(0);
 if (!($6)) {
  $7 = (_walIndexReadHdr($pWal,$pChanged)|0);
  $8 = ($7|0)==(5);
  do {
   if ($8) {
    $9 = (($pWal) + 32|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $13 = (_walLockShared($pWal,2)|0);
    if ((($13|0) == 5)) {
     $$0 = 261;
     STACKTOP = sp;return ($$0|0);
    } else if (!((($13|0) == 0))) {
     $rc$0 = $13;
     break;
    }
    _walUnlockShared($pWal,2);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $rc$0 = $7;
   }
  } while(0);
  $14 = ($rc$0|0)==(0);
  if (!($14)) {
   $$0 = $rc$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $pWal$idx2 = (($pWal) + 32|0);
 $pWal$idx2$val = HEAP32[$pWal$idx2>>2]|0;
 $pWal$idx2$val$val = HEAP32[$pWal$idx2$val>>2]|0;
 $15 = (_walCkptInfo($pWal$idx2$val$val)|0);
 do {
  if ($6) {
   $$pre = (($pWal) + 68|0);
   $$pre$phiZ2D = $$pre;$rc$2 = 0;
  } else {
   $16 = HEAP32[$15>>2]|0;
   $17 = (($pWal) + 52|0);
   $18 = (($pWal) + 68|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $21 = (_walLockShared($pWal,3)|0);
    _walShmBarrier($pWal);
    if ((($21|0) == 5)) {
     $$pre$phiZ2D = $18;$rc$2 = 5;
     break;
    } else if (!((($21|0) == 0))) {
     $$0 = $21;
     STACKTOP = sp;return ($$0|0);
    }
    $pWal$idx1$val = HEAP32[$pWal$idx2>>2]|0;
    $pWal$idx1$val$val = HEAP32[$pWal$idx1$val>>2]|0;
    $22 = (_walIndexHdr($pWal$idx1$val$val)|0);
    $23 = (_memcmp($22,$17,48)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = (($pWal) + 40|0);
     HEAP16[$25>>1] = 0;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     _walUnlockShared($pWal,3);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$pre$phiZ2D = $18;$rc$2 = 0;
   }
  }
 } while(0);
 $26 = (($15) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$$pre$phiZ2D>>2]|0;
 $29 = ($27>>>0)>($28>>>0);
 $mxReadMark$0$ = $29 ? 0 : $27;
 $30 = $29&1;
 $mxI$0$i$0 = $30 ^ 1;
 $31 = (($15) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($mxReadMark$0$>>>0)>($32>>>0);
 if ($33) {
  $mxI$1$1 = $mxI$0$i$0;$mxReadMark$1$1 = $mxReadMark$0$;
 } else {
  $60 = HEAP32[$$pre$phiZ2D>>2]|0;
  $61 = ($32>>>0)>($60>>>0);
  $mxReadMark$0$$1 = $61 ? $mxReadMark$0$ : $32;
  $mxI$0$i$0$1 = $61 ? $mxI$0$i$0 : 2;
  $mxI$1$1 = $mxI$0$i$0$1;$mxReadMark$1$1 = $mxReadMark$0$$1;
 }
 $62 = (($15) + 16|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($mxReadMark$1$1>>>0)>($63>>>0);
 if ($64) {
  $mxI$1$2 = $mxI$1$1;$mxReadMark$1$2 = $mxReadMark$1$1;
 } else {
  $65 = HEAP32[$$pre$phiZ2D>>2]|0;
  $66 = ($63>>>0)>($65>>>0);
  $mxReadMark$0$$2 = $66 ? $mxReadMark$1$1 : $63;
  $mxI$0$i$0$2 = $66 ? $mxI$1$1 : 3;
  $mxI$1$2 = $mxI$0$i$0$2;$mxReadMark$1$2 = $mxReadMark$0$$2;
 }
 $67 = (($15) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($mxReadMark$1$2>>>0)>($68>>>0);
 if ($69) {
  $mxI$1$3 = $mxI$1$2;$mxReadMark$1$3 = $mxReadMark$1$2;
 } else {
  $70 = HEAP32[$$pre$phiZ2D>>2]|0;
  $71 = ($68>>>0)>($70>>>0);
  $mxReadMark$0$$3 = $71 ? $mxReadMark$1$2 : $68;
  $mxI$0$i$0$3 = $71 ? $mxI$1$2 : 4;
  $mxI$1$3 = $mxI$0$i$0$3;$mxReadMark$1$3 = $mxReadMark$0$$3;
 }
 $72 = (($pWal) + 46|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73 & 2;
 $75 = ($74<<24>>24)==(0);
 L46: do {
  if ($75) {
   $34 = HEAP32[$$pre$phiZ2D>>2]|0;
   $35 = ($mxReadMark$1$3>>>0)<($34>>>0);
   $36 = ($mxI$1$3|0)==(0);
   $or$cond = $35 | $36;
   if ($or$cond) {
    $i$19 = 1;
    while(1) {
     $37 = (($i$19) + 3)|0;
     $38 = (_walLockExclusive($pWal,$37,1)|0);
     if ((($38|0) == 0)) {
      label = 22;
      break;
     } else if (!((($38|0) == 5))) {
      $$0 = $38;
      label = 32;
      break;
     }
     $41 = (($i$19) + 1)|0;
     $42 = ($41|0)<(5);
     if ($42) {
      $i$19 = $41;
     } else {
      $mxI$2 = $mxI$1$3;$mxReadMark$2 = $mxReadMark$1$3;$rc$4 = 5;
      break L46;
     }
    }
    if ((label|0) == 22) {
     $39 = HEAP32[$$pre$phiZ2D>>2]|0;
     $40 = ((($15) + ($i$19<<2)|0) + 4|0);
     HEAP32[$40>>2] = $39;
     _walUnlockExclusive($pWal,$37,1);
     $mxI$2 = $i$19;$mxReadMark$2 = $39;$rc$4 = 0;
     break;
    }
    else if ((label|0) == 32) {
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $mxI$2 = $mxI$1$3;$mxReadMark$2 = $mxReadMark$1$3;$rc$4 = $rc$2;
   }
  } else {
   $mxI$2 = $mxI$1$3;$mxReadMark$2 = $mxReadMark$1$3;$rc$4 = $rc$2;
  }
 } while(0);
 $43 = ($mxI$2|0)==(0);
 if ($43) {
  $44 = ($rc$4|0)==(5);
  $45 = $44 ? -1 : 520;
  $$0 = $45;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = (($mxI$2) + 3)|0;
 $47 = (_walLockShared($pWal,$46)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  $49 = ($47|0)==(5);
  $50 = $49 ? -1 : $47;
  $$0 = $50;
  STACKTOP = sp;return ($$0|0);
 }
 _walShmBarrier($pWal);
 $51 = ((($15) + ($mxI$2<<2)|0) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==($mxReadMark$2|0);
 if ($53) {
  $pWal$idx$val = HEAP32[$pWal$idx2>>2]|0;
  $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
  $54 = (_walIndexHdr($pWal$idx$val$val)|0);
  $55 = (($pWal) + 52|0);
  $56 = (_memcmp($54,$55,48)|0);
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $mxI$2&65535;
   $59 = (($pWal) + 40|0);
   HEAP16[$59>>1] = $58;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _walUnlockShared($pWal,$46);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _openSubJournal($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPager$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $4 = (($pPager) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(4);
 if (!($6)) {
  $7 = (($pPager) + 20|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $pPager$idx$val = HEAP32[$pPager>>2]|0;
   $10 = (_pagerOpentemp($pPager$idx$val,$1,8192)|0);
   $rc$0 = $10;
   STACKTOP = sp;return ($rc$0|0);
  }
 }
 _sqlite3MemJournalOpen($1);
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _write32bits($fd,$0,$1,$val) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $val = $val|0;
 var $2 = 0, $ac = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ac = sp;
 _sqlite3Put4byte($ac,$val);
 $2 = (_sqlite3OsWrite($fd,$ac,4,$0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _addToSavepointBitvecs($pPager,$pgno) {
 $pPager = $pPager|0;
 $pgno = $pgno|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ii$02 = 0, $rc$0$lcssa = 0, $rc$01 = 0;
 var $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $rc$0$lcssa = 0;
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 $3 = (($pPager) + 92|0);
 $15 = $1;$ii$02 = 0;$rc$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + (($ii$02*48)|0)|0) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)<($pgno>>>0);
  if ($7) {
   $14 = $15;$rc$1 = $rc$01;
  } else {
   $8 = ((($4) + (($ii$02*48)|0)|0) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_sqlite3BitvecSet($9,$pgno)|0);
   $11 = $10 | $rc$01;
   $$pre = HEAP32[$0>>2]|0;
   $14 = $$pre;$rc$1 = $11;
  }
  $12 = (($ii$02) + 1)|0;
  $13 = ($12|0)<($14|0);
  if ($13) {
   $15 = $14;$ii$02 = $12;$rc$01 = $rc$1;
  } else {
   $rc$0$lcssa = $rc$1;
   break;
  }
 }
 STACKTOP = sp;return ($rc$0$lcssa|0);
}
function _sqlite3HexToInt($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $h >>> 6;
 $1 = $0 & 1;
 $2 = (0 - ($1))|0;
 $3 = $2 & 9;
 $4 = (($3) + ($h))|0;
 $5 = $4 & 15;
 $6 = $5&255;
 STACKTOP = sp;return ($6|0);
}
function _allSpaces($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $n;
 while(1) {
  $0 = ($$0|0)>(0);
  if (!($0)) {
   break;
  }
  $1 = (($$0) + -1)|0;
  $2 = (($z) + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(32);
  if ($4) {
   $$0 = $1;
  } else {
   break;
  }
 }
 $5 = ($$0|0)==(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _logBadConnection($zType) {
 $zType = $zType|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $zType;
 _sqlite3_log(21,5080,$vararg_buffer);
 STACKTOP = sp;return;
}
function _sqlite3BtreeCheckpoint($p,$eMode,$pnLog,$pnCkpt) {
 $p = $p|0;
 $eMode = $eMode|0;
 $pnLog = $pnLog|0;
 $pnCkpt = $pnCkpt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $rc$0 = 0;
 } else {
  $1 = (($p) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $p$idx$val = HEAP32[$p>>2]|0;
  _sqlite3BtreeEnter($p$idx$val,$2);
  $3 = (($2) + 20|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $6 = HEAP32[$2>>2]|0;
   $7 = (_sqlite3PagerCheckpoint($6,$eMode,$pnLog,$pnCkpt)|0);
   $rc$0 = $7;
  } else {
   $rc$0 = 6;
  }
 }
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3PagerCheckpoint($pPager,$eMode,$pnLog,$pnCkpt) {
 $pPager = $pPager|0;
 $eMode = $eMode|0;
 $pnLog = $pnLog|0;
 $pnCkpt = $pnCkpt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 208|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $3 = (($pPager) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pPager) + 180|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pPager) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($pPager) + 152|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pPager) + 200|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_sqlite3WalCheckpoint($1,$eMode,$4,$6,$9,$11,$13,$pnLog,$pnCkpt)|0);
 $rc$0 = $14;
 STACKTOP = sp;return ($rc$0|0);
}
function _functionSearch($pHash,$h,$zFunc,$nFunc) {
 $pHash = $pHash|0;
 $h = $h|0;
 $zFunc = $zFunc|0;
 $nFunc = $nFunc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pHash) + ($h<<2)|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$02 = $p$01;
 }
 while(1) {
  $2 = (($p$02) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_sqlite3_strnicmp($3,$zFunc,$nFunc)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (($3) + ($nFunc)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $$0 = $p$02;
    label = 5;
    break;
   }
  }
  $9 = (($p$02) + 28|0);
  $p$0 = HEAP32[$9>>2]|0;
  $10 = ($p$0|0)==(0|0);
  if ($10) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _matchQuality($p,$nArg,$enc) {
 $p = $p|0;
 $nArg = $nArg|0;
 $enc = $enc|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nArg|0)==(-2);
 if ($0) {
  $1 = (($p) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  }
  $4 = (($p) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $phitmp = $6 ? 0 : 6;
  $$0 = $phitmp;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP16[$p>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ($8|0)!=($nArg|0);
 $10 = ($7<<16>>16)>(-1);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($8|0)==($nArg|0);
 $$ = $11 ? 4 : 1;
 $12 = $enc&255;
 $13 = (($p) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = $15 & 3;
 $17 = ($12|0)==($16|0);
 if (!($17)) {
  $19 = $15 & $12;
  $20 = $19 >>> 1;
  $$lobit = $20 & 1;
  $$$ = (($$lobit) + ($$))|0;
  STACKTOP = sp;return ($$$|0);
 }
 $18 = $$ | 2;
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FuncDefInsert($pHash,$pDef) {
 $pHash = $pHash|0;
 $pDef = $pDef|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pDef) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3Strlen30($1)|0);
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (960 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + ($2))|0;
 $9 = (($8|0) % 23)&-1;
 $10 = (_functionSearch($pHash,$9,$1,$2)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $15 = (($pDef) + 8|0);
  HEAP32[$15>>2] = 0;
  $16 = (($pHash) + ($9<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($pDef) + 28|0);
  HEAP32[$18>>2] = $17;
  HEAP32[$16>>2] = $pDef;
  STACKTOP = sp;return;
 } else {
  $12 = (($10) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($pDef) + 8|0);
  HEAP32[$14>>2] = $13;
  HEAP32[$12>>2] = $pDef;
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeChangeEncoding($pMem,$desiredEnc) {
 $pMem = $pMem|0;
 $desiredEnc = $desiredEnc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 2;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (($pMem) + 30|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)==($desiredEnc|0);
  if ($7) {
   $$0 = 0;
  } else {
   $8 = $desiredEnc&255;
   $9 = (_sqlite3VdbeMemTranslate($pMem,$8)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeMemTranslate($pMem,$desiredEnc) {
 $pMem = $pMem|0;
 $desiredEnc = $desiredEnc|0;
 var $$0 = 0, $$c$0 = 0, $$c$2 = 0, $$masked = 0, $$masked5 = 0, $$off = 0, $$off4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0$lcssa = 0, $c$024 = 0, $c$117 = 0, $c$2$lcssa = 0, $c$237 = 0, $c$320 = 0, $c$4 = 0, $c$5 = 0, $len$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $z$0$be = 0, $z$033 = 0, $z$1$be = 0, $z$148 = 0, $z$2 = 0, $z$3$be = 0, $z$355 = 0, $z$4$be = 0, $z$422 = 0, $z$5 = 0, $z$6 = 0, $zIn$059 = 0, $zIn$1$be = 0, $zIn$10 = 0, $zIn$134 = 0, $zIn$2$lcssa = 0, $zIn$225 = 0, $zIn$318 = 0, $zIn$4$be = 0, $zIn$449 = 0;
 var $zIn$5$lcssa = 0, $zIn$538 = 0, $zIn$621 = 0, $zIn$756 = 0, $zIn$8 = 0, $zIn$923 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 30|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 $3 = ($desiredEnc<<24>>24)==(1);
 $or$cond = $2 | $3;
 if (!($or$cond)) {
  $4 = (_sqlite3VdbeMemMakeWriteable($pMem)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
  $6 = (($pMem) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($pMem) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & -2;
  $11 = (($7) + ($10)|0);
  $12 = ($10|0)>(0);
  if ($12) {
   $zIn$059 = $7;
   while(1) {
    $13 = HEAP8[$zIn$059>>0]|0;
    $14 = (($zIn$059) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    HEAP8[$zIn$059>>0] = $15;
    $16 = (($zIn$059) + 2|0);
    HEAP8[$14>>0] = $13;
    $17 = ($16>>>0)<($11>>>0);
    if ($17) {
     $zIn$059 = $16;
    } else {
     break;
    }
   }
  }
  HEAP8[$0>>0] = $desiredEnc;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($pMem) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 if ($3) {
  $20 = $19 & -2;
  HEAP32[$18>>2] = $20;
  $21 = $20 << 1;
  $22 = $21 | 1;
  $28 = $20;$len$0 = $22;
 } else {
  $23 = $19 << 1;
  $24 = (($23) + 2)|0;
  $28 = $19;$len$0 = $24;
 }
 $25 = (($pMem) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($28)|0);
 $29 = HEAP32[$pMem>>2]|0;
 $30 = (_sqlite3DbMallocRaw($29,$len$0)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP8[$0>>0]|0;
 if ((($32<<24>>24) == 1)) {
  $35 = ($desiredEnc<<24>>24)==(2);
  $36 = ($28|0)>(0);
  if ($35) {
   if ($36) {
    $z$033 = $30;$zIn$134 = $26;
    while(1) {
     $37 = (($zIn$134) + 1|0);
     $38 = HEAP8[$zIn$134>>0]|0;
     $39 = $38&255;
     $40 = ($38&255)>(191);
     if ($40) {
      $41 = (($39) + -192)|0;
      $42 = (5184 + ($41)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = ($37|0)==($27|0);
      L43: do {
       if ($45) {
        $c$0$lcssa = $44;$zIn$2$lcssa = $27;
       } else {
        $c$024 = $44;$zIn$225 = $37;
        while(1) {
         $46 = HEAP8[$zIn$225>>0]|0;
         $47 = $46 & -64;
         $48 = ($47<<24>>24)==(-128);
         if (!($48)) {
          $c$0$lcssa = $c$024;$zIn$2$lcssa = $zIn$225;
          break L43;
         }
         $49 = $c$024 << 6;
         $50 = (($zIn$225) + 1|0);
         $51 = $46&255;
         $52 = $51 & 63;
         $53 = $52 | $49;
         $54 = ($50|0)==($27|0);
         if ($54) {
          $c$0$lcssa = $53;$zIn$2$lcssa = $27;
          break;
         } else {
          $c$024 = $53;$zIn$225 = $50;
         }
        }
       }
      } while(0);
      $55 = ($c$0$lcssa>>>0)<(128);
      $56 = $c$0$lcssa & -2048;
      $57 = ($56|0)==(55296);
      $or$cond7 = $55 | $57;
      $58 = $c$0$lcssa & -2;
      $59 = ($58|0)==(65534);
      $or$cond9 = $or$cond7 | $59;
      $$c$0 = $or$cond9 ? 65533 : $c$0$lcssa;
      $60 = ($$c$0>>>0)<(65536);
      if ($60) {
       $c$117 = $$c$0;$zIn$318 = $zIn$2$lcssa;
       label = 21;
      } else {
       $66 = $$c$0 >>> 10;
       $67 = $66 & 63;
       $68 = (($$c$0) + -65536)|0;
       $69 = $68 >>> 10;
       $70 = $69 & 192;
       $71 = $70 | $67;
       $72 = $71&255;
       $73 = (($z$033) + 1|0);
       HEAP8[$z$033>>0] = $72;
       $74 = $68 >>> 18;
       $75 = $74 & 3;
       $76 = $75 | 216;
       $77 = $76&255;
       $78 = (($z$033) + 2|0);
       HEAP8[$73>>0] = $77;
       $79 = $$c$0&255;
       $80 = (($z$033) + 3|0);
       HEAP8[$78>>0] = $79;
       $81 = $$c$0 >>> 8;
       $82 = $81 & 3;
       $83 = $82 | 220;
       $84 = $83&255;
       $85 = (($z$033) + 4|0);
       HEAP8[$80>>0] = $84;
       $z$0$be = $85;$zIn$1$be = $zIn$2$lcssa;
      }
     } else {
      $c$117 = $39;$zIn$318 = $37;
      label = 21;
     }
     if ((label|0) == 21) {
      label = 0;
      $61 = $c$117&255;
      $62 = (($z$033) + 1|0);
      HEAP8[$z$033>>0] = $61;
      $63 = $c$117 >>> 8;
      $64 = $63&255;
      $65 = (($z$033) + 2|0);
      HEAP8[$62>>0] = $64;
      $z$0$be = $65;$zIn$1$be = $zIn$318;
     }
     $86 = ($zIn$1$be>>>0)<($27>>>0);
     if ($86) {
      $z$033 = $z$0$be;$zIn$134 = $zIn$1$be;
     } else {
      $z$2 = $z$0$be;
      break;
     }
    }
   } else {
    $z$2 = $30;
   }
  } else {
   if ($36) {
    $z$148 = $30;$zIn$449 = $26;
    while(1) {
     $87 = (($zIn$449) + 1|0);
     $88 = HEAP8[$zIn$449>>0]|0;
     $89 = $88&255;
     $90 = ($88&255)>(191);
     if ($90) {
      $91 = (($89) + -192)|0;
      $92 = (5184 + ($91)|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = $93&255;
      $95 = ($87|0)==($27|0);
      L57: do {
       if ($95) {
        $c$2$lcssa = $94;$zIn$5$lcssa = $27;
       } else {
        $c$237 = $94;$zIn$538 = $87;
        while(1) {
         $96 = HEAP8[$zIn$538>>0]|0;
         $97 = $96 & -64;
         $98 = ($97<<24>>24)==(-128);
         if (!($98)) {
          $c$2$lcssa = $c$237;$zIn$5$lcssa = $zIn$538;
          break L57;
         }
         $99 = $c$237 << 6;
         $100 = (($zIn$538) + 1|0);
         $101 = $96&255;
         $102 = $101 & 63;
         $103 = $102 | $99;
         $104 = ($100|0)==($27|0);
         if ($104) {
          $c$2$lcssa = $103;$zIn$5$lcssa = $27;
          break;
         } else {
          $c$237 = $103;$zIn$538 = $100;
         }
        }
       }
      } while(0);
      $105 = ($c$2$lcssa>>>0)<(128);
      $106 = $c$2$lcssa & -2048;
      $107 = ($106|0)==(55296);
      $or$cond12 = $105 | $107;
      $108 = $c$2$lcssa & -2;
      $109 = ($108|0)==(65534);
      $or$cond14 = $or$cond12 | $109;
      $$c$2 = $or$cond14 ? 65533 : $c$2$lcssa;
      $110 = ($$c$2>>>0)<(65536);
      if ($110) {
       $c$320 = $$c$2;$zIn$621 = $zIn$5$lcssa;
       label = 29;
      } else {
       $116 = (($$c$2) + -65536)|0;
       $117 = $116 >>> 18;
       $118 = $117 & 3;
       $119 = $118 | 216;
       $120 = $119&255;
       $121 = (($z$148) + 1|0);
       HEAP8[$z$148>>0] = $120;
       $122 = $$c$2 >>> 10;
       $123 = $122 & 63;
       $124 = $116 >>> 10;
       $125 = $124 & 192;
       $126 = $125 | $123;
       $127 = $126&255;
       $128 = (($z$148) + 2|0);
       HEAP8[$121>>0] = $127;
       $129 = $$c$2 >>> 8;
       $130 = $129 & 3;
       $131 = $130 | 220;
       $132 = $131&255;
       $133 = (($z$148) + 3|0);
       HEAP8[$128>>0] = $132;
       $134 = $$c$2&255;
       $135 = (($z$148) + 4|0);
       HEAP8[$133>>0] = $134;
       $z$1$be = $135;$zIn$4$be = $zIn$5$lcssa;
      }
     } else {
      $c$320 = $89;$zIn$621 = $87;
      label = 29;
     }
     if ((label|0) == 29) {
      label = 0;
      $111 = $c$320 >>> 8;
      $112 = $111&255;
      $113 = (($z$148) + 1|0);
      HEAP8[$z$148>>0] = $112;
      $114 = $c$320&255;
      $115 = (($z$148) + 2|0);
      HEAP8[$113>>0] = $114;
      $z$1$be = $115;$zIn$4$be = $zIn$621;
     }
     $136 = ($zIn$4$be>>>0)<($27>>>0);
     if ($136) {
      $z$148 = $z$1$be;$zIn$449 = $zIn$4$be;
     } else {
      $z$2 = $z$1$be;
      break;
     }
    }
   } else {
    $z$2 = $30;
   }
  }
  $137 = $z$2;
  $138 = $30;
  $139 = (($137) - ($138))|0;
  HEAP32[$18>>2] = $139;
  $140 = (($z$2) + 1|0);
  HEAP8[$z$2>>0] = 0;
  $z$6 = $140;
 } else if ((($32<<24>>24) == 2)) {
  $33 = ($28|0)>(0);
  if ($33) {
   $z$355 = $30;$zIn$756 = $26;
   while(1) {
    $141 = (($zIn$756) + 1|0);
    $142 = HEAP8[$zIn$756>>0]|0;
    $143 = $142&255;
    $144 = (($zIn$756) + 2|0);
    $145 = HEAP8[$141>>0]|0;
    $146 = $145&255;
    $147 = $146 << 8;
    $148 = $147 | $143;
    $$off4 = (($148) + -55296)|0;
    $149 = ($$off4>>>0)<(2048);
    $150 = ($144>>>0)<($27>>>0);
    $or$cond15 = $149 & $150;
    if ($or$cond15) {
     $151 = (($zIn$756) + 3|0);
     $152 = HEAP8[$144>>0]|0;
     $153 = $152&255;
     $154 = (($zIn$756) + 4|0);
     $155 = HEAP8[$151>>0]|0;
     $156 = $155&255;
     $157 = $156 << 8;
     $$masked5 = $157 & 768;
     $158 = $143 << 10;
     $159 = $158 & 64512;
     $160 = $148 << 10;
     $161 = $160 & 983040;
     $162 = (($161) + 65536)|0;
     $163 = $162 | $159;
     $164 = $163 | $153;
     $165 = $164 | $$masked5;
     $c$4 = $165;$zIn$8 = $154;
    } else {
     $c$4 = $148;$zIn$8 = $144;
    }
    $166 = ($c$4>>>0)<(128);
    do {
     if ($166) {
      $167 = $c$4&255;
      $168 = (($z$355) + 1|0);
      HEAP8[$z$355>>0] = $167;
      $z$3$be = $168;
     } else {
      $169 = ($c$4>>>0)<(2048);
      if ($169) {
       $170 = $c$4 >>> 6;
       $171 = $170 & 31;
       $172 = $171 | 192;
       $173 = $172&255;
       $174 = (($z$355) + 1|0);
       HEAP8[$z$355>>0] = $173;
       $175 = $c$4 & 63;
       $176 = $175 | 128;
       $177 = $176&255;
       $178 = (($z$355) + 2|0);
       HEAP8[$174>>0] = $177;
       $z$3$be = $178;
       break;
      }
      $180 = ($c$4>>>0)<(65536);
      if ($180) {
       $181 = $c$4 >>> 12;
       $182 = $181 & 15;
       $183 = $182 | 224;
       $184 = $183&255;
       $185 = (($z$355) + 1|0);
       HEAP8[$z$355>>0] = $184;
       $186 = $c$4 >>> 6;
       $187 = $186 & 63;
       $188 = $187 | 128;
       $189 = $188&255;
       $190 = (($z$355) + 2|0);
       HEAP8[$185>>0] = $189;
       $191 = $c$4 & 63;
       $192 = $191 | 128;
       $193 = $192&255;
       $194 = (($z$355) + 3|0);
       HEAP8[$190>>0] = $193;
       $z$3$be = $194;
       break;
      } else {
       $195 = $c$4 >>> 18;
       $196 = $195 & 7;
       $197 = $196 | 240;
       $198 = $197&255;
       $199 = (($z$355) + 1|0);
       HEAP8[$z$355>>0] = $198;
       $200 = $c$4 >>> 12;
       $201 = $200 & 63;
       $202 = $201 | 128;
       $203 = $202&255;
       $204 = (($z$355) + 2|0);
       HEAP8[$199>>0] = $203;
       $205 = $c$4 >>> 6;
       $206 = $205 & 63;
       $207 = $206 | 128;
       $208 = $207&255;
       $209 = (($z$355) + 3|0);
       HEAP8[$204>>0] = $208;
       $210 = $c$4 & 63;
       $211 = $210 | 128;
       $212 = $211&255;
       $213 = (($z$355) + 4|0);
       HEAP8[$209>>0] = $212;
       $z$3$be = $213;
       break;
      }
     }
    } while(0);
    $179 = ($zIn$8>>>0)<($27>>>0);
    if ($179) {
     $z$355 = $z$3$be;$zIn$756 = $zIn$8;
    } else {
     $z$5 = $z$3$be;
     label = 53;
     break;
    }
   }
  } else {
   $z$5 = $30;
   label = 53;
  }
 } else {
  $34 = ($28|0)>(0);
  if ($34) {
   $z$422 = $30;$zIn$923 = $26;
   while(1) {
    $214 = (($zIn$923) + 1|0);
    $215 = HEAP8[$zIn$923>>0]|0;
    $216 = $215&255;
    $217 = $216 << 8;
    $218 = (($zIn$923) + 2|0);
    $219 = HEAP8[$214>>0]|0;
    $220 = $219&255;
    $221 = $217 | $220;
    $$off = (($221) + -55296)|0;
    $222 = ($$off>>>0)<(2048);
    $223 = ($218>>>0)<($27>>>0);
    $or$cond16 = $222 & $223;
    if ($or$cond16) {
     $224 = (($zIn$923) + 3|0);
     $225 = HEAP8[$218>>0]|0;
     $226 = $225&255;
     $227 = $226 << 8;
     $228 = (($zIn$923) + 4|0);
     $229 = HEAP8[$224>>0]|0;
     $230 = $229&255;
     $$masked = $227 & 768;
     $231 = $220 << 10;
     $232 = $231 & 64512;
     $233 = $221 << 10;
     $234 = $233 & 983040;
     $235 = (($234) + 65536)|0;
     $236 = $235 | $232;
     $237 = $236 | $230;
     $238 = $237 | $$masked;
     $c$5 = $238;$zIn$10 = $228;
    } else {
     $c$5 = $221;$zIn$10 = $218;
    }
    $239 = ($c$5>>>0)<(128);
    do {
     if ($239) {
      $240 = $c$5&255;
      $241 = (($z$422) + 1|0);
      HEAP8[$z$422>>0] = $240;
      $z$4$be = $241;
     } else {
      $242 = ($c$5>>>0)<(2048);
      if ($242) {
       $243 = $c$5 >>> 6;
       $244 = $243 & 31;
       $245 = $244 | 192;
       $246 = $245&255;
       $247 = (($z$422) + 1|0);
       HEAP8[$z$422>>0] = $246;
       $248 = $c$5 & 63;
       $249 = $248 | 128;
       $250 = $249&255;
       $251 = (($z$422) + 2|0);
       HEAP8[$247>>0] = $250;
       $z$4$be = $251;
       break;
      }
      $253 = ($c$5>>>0)<(65536);
      if ($253) {
       $254 = $c$5 >>> 12;
       $255 = $254 & 15;
       $256 = $255 | 224;
       $257 = $256&255;
       $258 = (($z$422) + 1|0);
       HEAP8[$z$422>>0] = $257;
       $259 = $c$5 >>> 6;
       $260 = $259 & 63;
       $261 = $260 | 128;
       $262 = $261&255;
       $263 = (($z$422) + 2|0);
       HEAP8[$258>>0] = $262;
       $264 = $c$5 & 63;
       $265 = $264 | 128;
       $266 = $265&255;
       $267 = (($z$422) + 3|0);
       HEAP8[$263>>0] = $266;
       $z$4$be = $267;
       break;
      } else {
       $268 = $c$5 >>> 18;
       $269 = $268 & 7;
       $270 = $269 | 240;
       $271 = $270&255;
       $272 = (($z$422) + 1|0);
       HEAP8[$z$422>>0] = $271;
       $273 = $c$5 >>> 12;
       $274 = $273 & 63;
       $275 = $274 | 128;
       $276 = $275&255;
       $277 = (($z$422) + 2|0);
       HEAP8[$272>>0] = $276;
       $278 = $c$5 >>> 6;
       $279 = $278 & 63;
       $280 = $279 | 128;
       $281 = $280&255;
       $282 = (($z$422) + 3|0);
       HEAP8[$277>>0] = $281;
       $283 = $c$5 & 63;
       $284 = $283 | 128;
       $285 = $284&255;
       $286 = (($z$422) + 4|0);
       HEAP8[$282>>0] = $285;
       $z$4$be = $286;
       break;
      }
     }
    } while(0);
    $252 = ($zIn$10>>>0)<($27>>>0);
    if ($252) {
     $z$422 = $z$4$be;$zIn$923 = $zIn$10;
    } else {
     $z$5 = $z$4$be;
     label = 53;
     break;
    }
   }
  } else {
   $z$5 = $30;
   label = 53;
  }
 }
 if ((label|0) == 53) {
  $287 = $z$5;
  $288 = $30;
  $289 = (($287) - ($288))|0;
  HEAP32[$18>>2] = $289;
  $z$6 = $z$5;
 }
 HEAP8[$z$6>>0] = 0;
 _sqlite3VdbeMemRelease($pMem);
 $290 = (($pMem) + 28|0);
 $291 = HEAP16[$290>>1]|0;
 $292 = $291&65535;
 $293 = $292 & 57855;
 HEAP8[$0>>0] = $desiredEnc;
 $294 = $293 | 512;
 $295 = $294&65535;
 HEAP16[$290>>1] = $295;
 HEAP32[$25>>2] = $30;
 $296 = (($pMem) + 36|0);
 HEAP32[$296>>2] = $30;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeMemMakeWriteable($pMem) {
 $pMem = $pMem|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 16384;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $5 = $1;
 } else {
  (_sqlite3VdbeMemExpandBlob($pMem)|0);
  $$pre = HEAP16[$0>>1]|0;
  $5 = $$pre;
 }
 $4 = $5 & 18;
 $6 = ($4<<16>>16)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pMem) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pMem) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($pMem) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 2)|0;
 $15 = (_sqlite3VdbeMemGrow($pMem,$14,1)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$12>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = (($18) + ($17)|0);
 HEAP8[$19>>0] = 0;
 $20 = HEAP32[$12>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = HEAP32[$7>>2]|0;
 $23 = (($22) + ($21)|0);
 HEAP8[$23>>0] = 0;
 $24 = HEAP16[$0>>1]|0;
 $25 = $24&65535;
 $26 = $25 | 512;
 $27 = $26&65535;
 HEAP16[$0>>1] = $27;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _functionDestroy($db,$p$0$9$val) {
 $db = $db|0;
 $p$0$9$val = $p$0$9$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p$0$9$val|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p$0$9$val>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$p$0$9$val>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($p$0$9$val) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p$0$9$val) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($7);
 _sqlite3DbFree($db,$p$0$9$val);
 STACKTOP = sp;return;
}
function _connectionIsBusy($db) {
 $db = $db|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = (($db) + 20|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(0);
   if ($5) {
    $6 = (($db) + 16|0);
    $7 = HEAP32[$6>>2]|0;
    $j$01 = 0;
    while(1) {
     $8 = ((($7) + ($j$01<<4)|0) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0|0);
     if (!($10)) {
      $$idx = (($9) + 16|0);
      $$idx$val = HEAP32[$$idx>>2]|0;
      $11 = (_sqlite3BtreeIsInBackup($$idx$val)|0);
      $12 = ($11|0)==(0);
      if (!($12)) {
       $$0 = 1;
       break L1;
      }
     }
     $13 = (($j$01) + 1)|0;
     $14 = ($13|0)<($4|0);
     if ($14) {
      $j$01 = $13;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3RollbackAll($db,$tripCode) {
 $db = $db|0;
 $tripCode = $tripCode|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $inTrans$0$ = 0, $inTrans$0$lcssa = 0, $inTrans$01 = 0, $inTrans$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BeginBenignMalloc();
 _sqlite3BtreeEnterAll($db);
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($db) + 16|0);
  $32 = $1;$i$02 = 0;$inTrans$01 = 0;
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4) + ($i$02<<4)|0) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $12 = $32;$inTrans$2 = $inTrans$01;
   } else {
    $8 = (_sqlite3BtreeIsInTrans($6)|0);
    $9 = ($8|0)==(0);
    $inTrans$0$ = $9 ? $inTrans$01 : 1;
    _sqlite3BtreeRollback($6,$tripCode);
    $$pre3 = HEAP32[$0>>2]|0;
    $12 = $$pre3;$inTrans$2 = $inTrans$0$;
   }
   $10 = (($i$02) + 1)|0;
   $11 = ($10|0)<($12|0);
   if ($11) {
    $32 = $12;$i$02 = $10;$inTrans$01 = $inTrans$2;
   } else {
    $inTrans$0$lcssa = $inTrans$2;
    break;
   }
  }
 } else {
  $inTrans$0$lcssa = 0;
 }
 _sqlite3VtabRollback($db);
 _sqlite3EndBenignMalloc();
 $13 = (($db) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 2;
 $16 = ($15|0)==(0);
 if ($16) {
  $22 = $14;
 } else {
  $17 = (($db) + 137|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if ($19) {
   _sqlite3ExpirePreparedStatements($db);
   _sqlite3ResetAllSchemasOfConnection($db);
   $$pre = HEAP32[$13>>2]|0;
   $22 = $$pre;
  } else {
   $22 = $14;
  }
 }
 $20 = (($db) + 496|0);
 $21 = $22 & -16777217;
 ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP32[$13>>2] = $21;
 $23 = (($db) + 192|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($inTrans$0$lcssa|0)==(0);
 if ($26) {
  $27 = (($db) + 62|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if (!($29)) {
   STACKTOP = sp;return;
  }
 }
 $30 = (($db) + 188|0);
 $31 = HEAP32[$30>>2]|0;
 FUNCTION_TABLE_vi[$24 & 255]($31);
 STACKTOP = sp;return;
}
function _sqlite3CloseSavepoints($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 480|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $4 = $1;
  while(1) {
   $3 = (($4) + 24|0);
   $5 = HEAP32[$3>>2]|0;
   HEAP32[$0>>2] = $5;
   _sqlite3DbFree($db,$4);
   $6 = HEAP32[$0>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    break;
   } else {
    $4 = $6;
   }
  }
 }
 $8 = (($db) + 488|0);
 HEAP32[$8>>2] = 0;
 $9 = (($db) + 492|0);
 HEAP32[$9>>2] = 0;
 $10 = (($db) + 69|0);
 HEAP8[$10>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3BtreeClose($p) {
 $p = $p|0;
 var $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$idx$val = 0, $pCur$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$1);
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $pCur$02 = $3;
  while(1) {
   $5 = (($pCur$02) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$pCur$02>>2]|0;
   $8 = ($7|0)==($p|0);
   if ($8) {
    _sqlite3BtreeCloseCursor($pCur$02);
   }
   $9 = ($6|0)==(0|0);
   if ($9) {
    break;
   } else {
    $pCur$02 = $6;
   }
  }
 }
 _sqlite3BtreeRollback($p,0);
 $10 = (($p) + 9|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  label = 7;
 } else {
  $13 = (_removeFromSharingList($1)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = HEAP32[$1>>2]|0;
  _sqlite3PagerClose($15);
  $16 = (($1) + 52|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  $$pre = (($1) + 48|0);
  if (!($18)) {
   $19 = HEAP32[$$pre>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    FUNCTION_TABLE_vi[$17 & 255]($19);
   }
  }
  $21 = HEAP32[$$pre>>2]|0;
  _sqlite3DbFree(0,$21);
  _freeTempSpace($1);
  _sqlite3_free($1);
 }
 $22 = (($p) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 $$pre5 = (($p) + 20|0);
 if (!($24)) {
  $25 = HEAP32[$$pre5>>2]|0;
  $26 = (($23) + 20|0);
  HEAP32[$26>>2] = $25;
 }
 $27 = HEAP32[$$pre5>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  _sqlite3_free($p);
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$22>>2]|0;
 $30 = (($27) + 24|0);
 HEAP32[$30>>2] = $29;
 _sqlite3_free($p);
 STACKTOP = sp;return;
}
function _sqlite3VtabUnlockList($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 324|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _sqlite3ExpirePreparedStatements($db);
 $p$0 = $1;
 while(1) {
  $3 = (($p$0) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  _sqlite3VtabUnlock($p$0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $p$0 = $4;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3CollapseDatabaseArray($db) {
 $db = $db|0;
 var $$lcssa1 = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $j$0$lcssa = 0, $j$04 = 0, $j$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(2);
 $3 = (($db) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $6 = $4;$i$05 = 2;$j$04 = 2;
  while(1) {
   $5 = (($6) + ($i$05<<4)|0);
   $7 = ((($6) + ($i$05<<4)|0) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $10 = HEAP32[$5>>2]|0;
    _sqlite3DbFree($db,$10);
    HEAP32[$5>>2] = 0;
    $j$1 = $j$04;
   } else {
    $11 = ($j$04|0)<($i$05|0);
    if ($11) {
     $12 = (($6) + ($j$04<<4)|0);
     ;HEAP32[$12+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$5+12>>2]|0;
    }
    $13 = (($j$04) + 1)|0;
    $j$1 = $13;
   }
   $14 = (($i$05) + 1)|0;
   $15 = HEAP32[$0>>2]|0;
   $16 = ($14|0)<($15|0);
   $17 = HEAP32[$3>>2]|0;
   if ($16) {
    $6 = $17;$i$05 = $14;$j$04 = $j$1;
   } else {
    $$lcssa1 = $15;$$lcssa3 = $17;$j$0$lcssa = $j$1;
    break;
   }
  }
 } else {
  $$lcssa1 = $1;$$lcssa3 = $4;$j$0$lcssa = 2;
 }
 $18 = (($$lcssa3) + ($j$0$lcssa<<4)|0);
 $19 = (($$lcssa1) - ($j$0$lcssa))|0;
 $20 = $19 << 4;
 _memset(($18|0),0,($20|0))|0;
 HEAP32[$0>>2] = $j$0$lcssa;
 $21 = ($j$0$lcssa|0)<(3);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = (($db) + 448|0);
 $24 = ($22|0)==($23|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$23+0>>2]=HEAP32[$22+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$22+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$22+16>>2]|0;HEAP32[$23+20>>2]=HEAP32[$22+20>>2]|0;HEAP32[$23+24>>2]=HEAP32[$22+24>>2]|0;HEAP32[$23+28>>2]=HEAP32[$22+28>>2]|0;
 _sqlite3DbFree($db,$22);
 HEAP32[$3>>2] = $23;
 STACKTOP = sp;return;
}
function _sqlite3VtabUnlock($pVTab) {
 $pVTab = $pVTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pVTab>>2]|0;
 $1 = (($pVTab) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($pVTab) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$6>>2]|0;
  $9 = (($8) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  (FUNCTION_TABLE_ii[$10 & 255]($6)|0);
 }
 _sqlite3DbFree($0,$pVTab);
 STACKTOP = sp;return;
}
function _sqlite3BtreeCloseCursor($pCur) {
 $pCur = $pCur|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pCur>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($pCur) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $$idx$val = HEAP32[$0>>2]|0;
 $$idx1 = (($0) + 4|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 _sqlite3BtreeEnter($$idx$val,$$idx1$val);
 _sqlite3BtreeClearCursor($pCur);
 $4 = (($pCur) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = (($pCur) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $10 = (($3) + 8|0);
  HEAP32[$10>>2] = $8;
 } else {
  $9 = (($5) + 8|0);
  HEAP32[$9>>2] = $8;
 }
 $11 = HEAP32[$7>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[$4>>2]|0;
  $14 = (($11) + 12|0);
  HEAP32[$14>>2] = $13;
 }
 $15 = (($pCur) + 86|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)<(0);
 if (!($17)) {
  $i$02 = 0;
  while(1) {
   $18 = ((($pCur) + ($i$02<<2)|0) + 128|0);
   $19 = HEAP32[$18>>2]|0;
   _releasePage($19);
   $20 = (($i$02) + 1)|0;
   $21 = HEAP16[$15>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($i$02|0)<($22|0);
   if ($23) {
    $i$02 = $20;
   } else {
    break;
   }
  }
 }
 _unlockBtreeIfUnused($3);
 _invalidateOverflowCache($pCur);
 STACKTOP = sp;return;
}
function _removeFromSharingList($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pList$0 = 0, $removed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($1|0)<(2);
 L1: do {
  if ($3) {
   $4 = HEAP32[4456>>2]|0;
   $5 = ($4|0)==($pBt|0);
   if ($5) {
    $6 = (($pBt) + 68|0);
    $7 = HEAP32[$6>>2]|0;
    HEAP32[4456>>2] = $7;
    $removed$0 = 1;
    break;
   } else {
    $pList$0 = $4;
   }
   while(1) {
    $8 = ($pList$0|0)==(0|0);
    if ($8) {
     $removed$0 = 1;
     break L1;
    }
    $9 = (($pList$0) + 68|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==($pBt|0);
    if ($11) {
     break;
    } else {
     $pList$0 = $10;
    }
   }
   $12 = (($pBt) + 68|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$9>>2] = $13;
   $removed$0 = 1;
  } else {
   $removed$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($removed$0|0);
}
function _sqlite3BtreeClearCursor($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3_free($1);
 HEAP32[$0>>2] = 0;
 $2 = (($pCur) + 83|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function _releasePage($pPage) {
 $pPage = $pPage|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPage|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pPage) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3PagerUnrefNotNull($2);
 STACKTOP = sp;return;
}
function _unlockBtreeIfUnused($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 20|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($pBt) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _releasePage($4);
   HEAP32[$3>>2] = 0;
  }
 }
 STACKTOP = sp;return;
}
function _invalidateOverflowCache($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3_free($1);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3BtreeIsInTrans($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $5 = 0;
 } else {
  $1 = (($p) + 8|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(2);
  $5 = $3;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _sqlite3VtabRollback($db) {
 $db = $db|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _callFinaliser($db,68);
 STACKTOP = sp;return;
}
function _callFinaliser($db,$offset) {
 $db = $db|0;
 $offset = $offset|0;
 var $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 320|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($db) + 296|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $7 = $1;$i$02 = 0;
  while(1) {
   $6 = (($7) + ($i$02<<2)|0);
   $8 = HEAP32[$6>>2]|0;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($offset)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     (FUNCTION_TABLE_ii[$14 & 255]($10)|0);
    }
   }
   $16 = (($8) + 20|0);
   HEAP32[$16>>2] = 0;
   _sqlite3VtabUnlock($8);
   $17 = (($i$02) + 1)|0;
   $18 = HEAP32[$3>>2]|0;
   $19 = ($17|0)<($18|0);
   $20 = HEAP32[$0>>2]|0;
   if ($19) {
    $7 = $20;$i$02 = $17;
   } else {
    $$lcssa1 = $20;
    break;
   }
  }
 } else {
  $$lcssa1 = $1;
 }
 _sqlite3DbFree($db,$$lcssa1);
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3BtreeIsInBackup($p$0$6$val) {
 $p$0$6$val = $p$0$6$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p$0$6$val|0)!=(0);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _disconnectAllVtab($db) {
 $db = $db|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$03 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnterAll($db);
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($db) + 16|0);
 $20 = $1;$i$03 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($i$03<<4)|0) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $19 = $20;
  } else {
   $8 = (($6) + 16|0);
   $p$01 = HEAP32[$8>>2]|0;
   $9 = ($p$01|0)==(0|0);
   if ($9) {
    $19 = $20;
   } else {
    $p$02 = $p$01;
    while(1) {
     $10 = (($p$02) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + 44|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13 & 16;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      _sqlite3VtabDisconnect($db,$11);
     }
     $p$0 = HEAP32[$p$02>>2]|0;
     $16 = ($p$0|0)==(0|0);
     if ($16) {
      break;
     } else {
      $p$02 = $p$0;
     }
    }
    $$pre$pre = HEAP32[$0>>2]|0;
    $19 = $$pre$pre;
   }
  }
  $17 = (($i$03) + 1)|0;
  $18 = ($17|0)<($19|0);
  if ($18) {
   $20 = $19;$i$03 = $17;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VtabDisconnect($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ppVTab$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 60|0);
 $ppVTab$0 = $0;
 while(1) {
  $1 = HEAP32[$ppVTab$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   label = 5;
   break;
  }
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==($db|0);
  $5 = (($1) + 24|0);
  if ($4) {
   break;
  } else {
   $ppVTab$0 = $5;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$ppVTab$0>>2] = $6;
 _sqlite3VtabUnlock($1);
 STACKTOP = sp;return;
}
function _sqlite3PcacheShrink($pCache$0$11$val) {
 $pCache$0$11$val = $pCache$0$11$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCache$0$11$val|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[((384 + 152|0))>>2]|0;
 FUNCTION_TABLE_vi[$1 & 255]($pCache$0$11$val);
 STACKTOP = sp;return;
}
function _pcache1Init($NotUsed) {
 $NotUsed = $NotUsed|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=3400+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[((384 + 4|0))>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[3400>>2] = (8);
  HEAP32[((3400 + 52|0))>>2] = (8);
 }
 HEAP32[((3400 + 12|0))>>2] = 10;
 HEAP32[((3400 + 28|0))>>2] = 1;
 STACKTOP = sp;return 0;
}
function _pcache1Shutdown($NotUsed) {
 $NotUsed = $NotUsed|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=3400+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _pcache1Create($szPage,$szExtra,$bPurgeable) {
 $szPage = $szPage|0;
 $szExtra = $szExtra|0;
 $bPurgeable = $bPurgeable|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3MallocZero(48)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 HEAP32[$0>>2] = 3400;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = $szPage;
 $3 = (($0) + 8|0);
 HEAP32[$3>>2] = $szExtra;
 $4 = ($bPurgeable|0)!=(0);
 $5 = $4&1;
 $6 = (($0) + 12|0);
 HEAP32[$6>>2] = $5;
 if (!($4)) {
  STACKTOP = sp;return ($0|0);
 }
 $7 = (($0) + 16|0);
 HEAP32[$7>>2] = 10;
 $8 = HEAP32[((3400 + 8|0))>>2]|0;
 $9 = (($8) + 10)|0;
 HEAP32[((3400 + 8|0))>>2] = $9;
 $10 = HEAP32[((3400 + 4|0))>>2]|0;
 $11 = (($10) + 10)|0;
 $$neg = (-10 - ($8))|0;
 $12 = (($11) + ($$neg))|0;
 HEAP32[((3400 + 12|0))>>2] = $12;
 STACKTOP = sp;return ($0|0);
}
function _pcache1Cachesize($p,$nMax) {
 $p = $p|0;
 $nMax = $nMax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = (($p) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($nMax) - ($5))|0;
 $7 = (($3) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 HEAP32[$7>>2] = $9;
 $10 = (($9) + 10)|0;
 $11 = (($3) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($3) + 12|0);
 HEAP32[$14>>2] = $13;
 HEAP32[$4>>2] = $nMax;
 $15 = ($nMax*9)|0;
 $16 = (($15>>>0) / 10)&-1;
 $17 = (($p) + 24|0);
 HEAP32[$17>>2] = $16;
 _pcache1EnforceMaxPage($3);
 STACKTOP = sp;return;
}
function _pcache1Pagecount($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _pcache1Fetch($p,$iKey,$createFlag) {
 $p = $p|0;
 $iKey = $iKey|0;
 $createFlag = $createFlag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $pPage$0 = 0;
 var $pPage$013 = 0, $pPage$014 = 0, $pPage$3 = 0, $pPage$36 = 0, $pPage$411 = 0, $pPage$48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   label = 7;
  } else {
   $3 = (($iKey>>>0) % ($1>>>0))&-1;
   $4 = (($p) + 44|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($3<<2)|0);
   $pPage$013 = HEAP32[$6>>2]|0;
   $7 = ($pPage$013|0)==(0|0);
   if ($7) {
    label = 7;
   } else {
    $pPage$014 = $pPage$013;
    while(1) {
     $10 = (($pPage$014) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==($iKey|0);
     if ($12) {
      break;
     }
     $8 = (($pPage$014) + 16|0);
     $pPage$0 = HEAP32[$8>>2]|0;
     $9 = ($pPage$0|0)==(0|0);
     if ($9) {
      label = 7;
      break L1;
     } else {
      $pPage$014 = $pPage$0;
     }
    }
    $13 = (($pPage$014) + 12|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    if ($15) {
     _pcache1PinPage($pPage$014);
     $pPage$411 = $pPage$014;
    } else {
     $pPage$411 = $pPage$014;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $16 = ($createFlag|0)==(0);
  if ($16) {
   $pPage$48 = 0;
   STACKTOP = sp;return ($pPage$48|0);
  }
  $17 = HEAP32[$p>>2]|0;
  $18 = (($p) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($p) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = ($createFlag|0)==(1);
  if ($23) {
   $24 = (($17) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22>>>0)<($25>>>0);
   if (!($26)) {
    $pPage$48 = 0;
    STACKTOP = sp;return ($pPage$48|0);
   }
   $27 = (($p) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($22>>>0)<($28>>>0);
   if (!($29)) {
    $pPage$48 = 0;
    STACKTOP = sp;return ($pPage$48|0);
   }
   $30 = (_pcache1UnderMemoryPressure($p)|0);
   $31 = ($30|0)==(0);
   if (!($31)) {
    $pPage$48 = 0;
    STACKTOP = sp;return ($pPage$48|0);
   }
  }
  $32 = ($19>>>0)<($1>>>0);
  if (!($32)) {
   $33 = (_pcache1ResizeHash($p)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    $pPage$48 = 0;
    STACKTOP = sp;return ($pPage$48|0);
   }
  }
  $35 = (($p) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  do {
   if ($37) {
    label = 22;
   } else {
    $38 = (($17) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     label = 22;
    } else {
     $41 = HEAP32[$18>>2]|0;
     $42 = (($41) + 1)|0;
     $43 = (($p) + 20|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42>>>0)<($44>>>0);
     if ($45) {
      $46 = (($17) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (($17) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($47>>>0)<($49>>>0);
      if ($50) {
       $51 = (_pcache1UnderMemoryPressure($p)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        label = 22;
        break;
       }
      }
     }
     _pcache1RemoveFromHash($39);
     _pcache1PinPage($39);
     $53 = (($39) + 20|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (($54) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + ($56))|0;
     $60 = (($p) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($p) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($61))|0;
     $65 = ($59|0)==($64|0);
     if ($65) {
      $66 = (($54) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = HEAP32[$35>>2]|0;
      $69 = (($17) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($68) - ($67))|0;
      $72 = (($71) + ($70))|0;
      HEAP32[$69>>2] = $72;
      $73 = ($39|0)==(0|0);
      if ($73) {
       label = 22;
       break;
      } else {
       $pPage$36 = $39;
       break;
      }
     } else {
      _pcache1FreePage($39);
      label = 22;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   if ($23) {
    _sqlite3BeginBenignMalloc();
    $75 = (_pcache1AllocPage($p)|0);
    _sqlite3EndBenignMalloc();
    $pPage$3 = $75;
   } else {
    $74 = (_pcache1AllocPage($p)|0);
    $pPage$3 = $74;
   }
   $76 = ($pPage$3|0)==(0|0);
   if ($76) {
    $pPage$48 = 0;
    STACKTOP = sp;return ($pPage$48|0);
   } else {
    $pPage$36 = $pPage$3;
   }
  }
  $77 = HEAP32[$0>>2]|0;
  $78 = (($iKey>>>0) % ($77>>>0))&-1;
  $79 = HEAP32[$18>>2]|0;
  $80 = (($79) + 1)|0;
  HEAP32[$18>>2] = $80;
  $81 = (($pPage$36) + 8|0);
  HEAP32[$81>>2] = $iKey;
  $82 = (($p) + 44|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($78<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($pPage$36) + 16|0);
  HEAP32[$86>>2] = $85;
  $87 = (($pPage$36) + 20|0);
  HEAP32[$87>>2] = $p;
  $88 = (($pPage$36) + 28|0);
  HEAP32[$88>>2] = 0;
  $89 = (($pPage$36) + 24|0);
  HEAP32[$89>>2] = 0;
  $90 = (($pPage$36) + 12|0);
  HEAP8[$90>>0] = 1;
  $91 = (($pPage$36) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  HEAP32[$92>>2] = 0;
  $93 = HEAP32[$82>>2]|0;
  $94 = (($93) + ($78<<2)|0);
  HEAP32[$94>>2] = $pPage$36;
  $95 = ($pPage$36|0)==(0|0);
  if ($95) {
   $pPage$48 = 0;
   STACKTOP = sp;return ($pPage$48|0);
  } else {
   $pPage$411 = $pPage$36;
  }
 }
 $96 = (($p) + 28|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97>>>0)<($iKey>>>0);
 if (!($98)) {
  $pPage$48 = $pPage$411;
  STACKTOP = sp;return ($pPage$48|0);
 }
 HEAP32[$96>>2] = $iKey;
 $pPage$48 = $pPage$411;
 STACKTOP = sp;return ($pPage$48|0);
}
function _pcache1Unpin($p,$pPg,$reuseUnlikely) {
 $p = $p|0;
 $pPg = $pPg|0;
 $reuseUnlikely = $reuseUnlikely|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ($reuseUnlikely|0)==(0);
 if ($1) {
  $2 = (($0) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($0) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3>>>0)>($5>>>0);
  if (!($6)) {
   $7 = (($0) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $13 = (($0) + 24|0);
    HEAP32[$13>>2] = $pPg;
   } else {
    $10 = (($8) + 28|0);
    HEAP32[$10>>2] = $pPg;
    $11 = HEAP32[$7>>2]|0;
    $12 = (($pPg) + 24|0);
    HEAP32[$12>>2] = $11;
   }
   HEAP32[$7>>2] = $pPg;
   $14 = (($p) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$14>>2] = $16;
   $17 = (($pPg) + 12|0);
   HEAP8[$17>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 _pcache1RemoveFromHash($pPg);
 _pcache1FreePage($pPg);
 STACKTOP = sp;return;
}
function _pcache1Rekey($p,$pPg,$iOld,$iNew) {
 $p = $p|0;
 $pPg = $pPg|0;
 $iOld = $iOld|0;
 $iNew = $iNew|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $iNew$c = 0, $pp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($iOld>>>0) % ($1>>>0))&-1;
 $3 = (($p) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $pp$0 = $5;
 while(1) {
  $6 = HEAP32[$pp$0>>2]|0;
  $7 = ($6|0)==($pPg|0);
  $8 = (($6) + 16|0);
  if ($7) {
   break;
  } else {
   $pp$0 = $8;
  }
 }
 $9 = (($pPg) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$pp$0>>2] = $10;
 $11 = (($iNew>>>0) % ($1>>>0))&-1;
 $12 = (($pPg) + 8|0);
 $iNew$c = $iNew;
 HEAP32[$12>>2] = $iNew$c;
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) + ($11<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) + ($11<<2)|0);
 HEAP32[$17>>2] = $pPg;
 $18 = (($p) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)<($iNew>>>0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 HEAP32[$18>>2] = $iNew;
 STACKTOP = sp;return;
}
function _pcache1Truncate($p,$iLimit) {
 $p = $p|0;
 $iLimit = $iLimit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($iLimit>>>0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _pcache1TruncateUnsafe($p,$iLimit);
 $3 = (($iLimit) + -1)|0;
 HEAP32[$0>>2] = $3;
 STACKTOP = sp;return;
}
function _pcache1Destroy($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 _pcache1TruncateUnsafe($p,0);
 $1 = (($p) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($2))|0;
 HEAP32[$3>>2] = $5;
 $6 = (($p) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($7))|0;
 HEAP32[$8>>2] = $10;
 $11 = (($5) + 10)|0;
 $12 = (($11) - ($10))|0;
 $13 = (($0) + 12|0);
 HEAP32[$13>>2] = $12;
 _pcache1EnforceMaxPage($0);
 $14 = (($p) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 _sqlite3_free($15);
 _sqlite3_free($p);
 STACKTOP = sp;return;
}
function _pcache1Shrink($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 _pcache1EnforceMaxPage($3);
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function _pcache1EnforceMaxPage($pGroup) {
 $pGroup = $pGroup|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pGroup) + 24|0);
 $1 = (($pGroup) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pGroup) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 4;
   break;
  }
  _pcache1PinPage($6);
  _pcache1RemoveFromHash($6);
  _pcache1FreePage($6);
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = ($8>>>0)>($9>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _pcache1PinPage($pPage) {
 $pPage = $pPage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pPage) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = (($pPage) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $9 = (($2) + 20|0);
  HEAP32[$9>>2] = $7;
 } else {
  $8 = (($4) + 24|0);
  HEAP32[$8>>2] = $7;
 }
 $10 = HEAP32[$6>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = HEAP32[$3>>2]|0;
 if ($11) {
  $14 = (($2) + 24|0);
  HEAP32[$14>>2] = $12;
 } else {
  $13 = (($10) + 28|0);
  HEAP32[$13>>2] = $12;
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$3>>2] = 0;
 $15 = (($pPage) + 12|0);
 HEAP8[$15>>0] = 1;
 $16 = (($1) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _pcache1RemoveFromHash($pPage) {
 $pPage = $pPage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3>>>0) % ($5>>>0))&-1;
 $7 = (($1) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<2)|0);
 $pp$0 = $9;
 while(1) {
  $10 = HEAP32[$pp$0>>2]|0;
  $11 = ($10|0)==($pPage|0);
  $12 = (($10) + 16|0);
  if ($11) {
   break;
  } else {
   $pp$0 = $12;
  }
 }
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$pp$0>>2] = $13;
 $14 = (($1) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function _pcache1FreePage($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($p) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$p>>2]|0;
 _pcache1Free($3);
 $4 = (($2) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function _pcache1TruncateUnsafe($pCache,$iLimit) {
 $pCache = $pCache|0;
 $iLimit = $iLimit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$03 = 0, $pp$0$ph2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pCache) + 44|0);
 $4 = (($pCache) + 36|0);
 $h$03 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + ($h$03<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  L6: do {
   if (!($8)) {
    $28 = $7;$pp$0$ph2 = $6;
    while(1) {
     $10 = $28;
     while(1) {
      $9 = (($10) + 8|0);
      $11 = HEAP32[$9>>2]|0;
      $12 = ($11>>>0)<($iLimit>>>0);
      if ($12) {
       break;
      }
      $13 = HEAP32[$4>>2]|0;
      $14 = (($13) + -1)|0;
      HEAP32[$4>>2] = $14;
      $15 = (($10) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      HEAP32[$pp$0$ph2>>2] = $16;
      $17 = (($10) + 12|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       _pcache1PinPage($10);
      }
      _pcache1FreePage($10);
      $20 = HEAP32[$pp$0$ph2>>2]|0;
      $21 = ($20|0)==(0|0);
      if ($21) {
       break L6;
      } else {
       $10 = $20;
      }
     }
     $22 = (($10) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     } else {
      $28 = $23;$pp$0$ph2 = $22;
     }
    }
   }
  } while(0);
  $25 = (($h$03) + 1)|0;
  $26 = HEAP32[$0>>2]|0;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   $h$03 = $25;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _pcache1UnderMemoryPressure($pCache) {
 $pCache = $pCache|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((3400 + 36|0))>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (($pCache) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($pCache) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($3))|0;
  $7 = HEAP32[((3400 + 32|0))>>2]|0;
  $8 = ($6|0)>($7|0);
  if (!($8)) {
   $9 = HEAP32[((3400 + 64|0))>>2]|0;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = (_sqlite3HeapNearlyFull()|0);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _pcache1ResizeHash($p) {
 $p = $p|0;
 var $$ = 0, $$lcssa2 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $pNext$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 << 1;
 $3 = ($2>>>0)<(256);
 $$ = $3 ? 256 : $2;
 $4 = ($1|0)==(0);
 if (!($4)) {
  _sqlite3BeginBenignMalloc();
 }
 $5 = $$ << 2;
 $6 = (_sqlite3MallocZero($5)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _sqlite3EndBenignMalloc();
 }
 $9 = ($6|0)==(0|0);
 if ($9) {
  $$phi$trans$insert = (($p) + 44|0);
  $$pre8 = HEAP32[$$phi$trans$insert>>2]|0;
  $29 = $$pre8;
  $28 = ($29|0)!=(0|0);
  $30 = $28 ? 0 : 7;
  STACKTOP = sp;return ($30|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0);
 $12 = (($p) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 if ($11) {
  $$lcssa2 = $13;
 } else {
  $15 = $13;$i$03 = 0;
  while(1) {
   $14 = (($15) + ($i$03<<2)|0);
   $16 = HEAP32[$14>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $31 = $15;
   } else {
    $pNext$01 = $16;
    while(1) {
     $18 = (($pNext$01) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19>>>0) % ($$>>>0))&-1;
     $21 = (($pNext$01) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($6) + ($20<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$21>>2] = $24;
     HEAP32[$23>>2] = $pNext$01;
     $25 = ($22|0)==(0|0);
     if ($25) {
      break;
     } else {
      $pNext$01 = $22;
     }
    }
    $$pre = HEAP32[$12>>2]|0;
    $31 = $$pre;
   }
   $26 = (($i$03) + 1)|0;
   $27 = ($26>>>0)<($10>>>0);
   if ($27) {
    $15 = $31;$i$03 = $26;
   } else {
    $$lcssa2 = $31;
    break;
   }
  }
 }
 _sqlite3_free($$lcssa2);
 HEAP32[$12>>2] = $6;
 HEAP32[$0>>2] = $$;
 $29 = $6;
 $28 = ($29|0)!=(0|0);
 $30 = $28 ? 0 : 7;
 STACKTOP = sp;return ($30|0);
}
function _pcache1AllocPage($pCache) {
 $pCache = $pCache|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCache) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32)|0;
 $3 = (($pCache) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4))|0;
 $6 = (_pcache1Alloc($5)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) + ($7)|0);
 $9 = ($6|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$8>>2] = $6;
 $$sum = (($7) + 32)|0;
 $10 = (($6) + ($$sum)|0);
 $$sum1 = (($7) + 4)|0;
 $11 = (($6) + ($$sum1)|0);
 HEAP32[$11>>2] = $10;
 $12 = (($pCache) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$pCache>>2]|0;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3HeapNearlyFull() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((656 + 36|0))>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3MemMalloc($nByte) {
 $nByte = $nByte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($nByte) + 7)|0;
 $1 = $0 & -8;
 $2 = (($1) + 8)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $1;
  _sqlite3_log(7,6392,$vararg_buffer);
  $p$0 = $3;
  STACKTOP = sp;return ($p$0|0);
 } else {
  $5 = ($1|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = $3;
  $8 = $7;
  HEAP32[$8>>2] = $1;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = $6;
  $11 = (($3) + 8|0);
  $p$0 = $11;
  STACKTOP = sp;return ($p$0|0);
 }
 return 0|0;
}
function _sqlite3MemFree($pPrior) {
 $pPrior = $pPrior|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPrior) + -8|0);
 _free($0);
 STACKTOP = sp;return;
}
function _sqlite3MemRealloc($pPrior,$nByte) {
 $pPrior = $pPrior|0;
 $nByte = $nByte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pPrior) + -8|0);
 $1 = (($nByte) + 8)|0;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $11 = (_sqlite3MemSize($pPrior)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $nByte;
  _sqlite3_log(7,6352,$vararg_buffer);
  $p$0 = $2;
  STACKTOP = sp;return ($p$0|0);
 } else {
  $4 = ($nByte|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = $2;
  $7 = $6;
  HEAP32[$7>>2] = $nByte;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  $10 = (($2) + 8|0);
  $p$0 = $10;
  STACKTOP = sp;return ($p$0|0);
 }
 return 0|0;
}
function _sqlite3MemSize($pPrior) {
 $pPrior = $pPrior|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPrior|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pPrior) + -8|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3MemRoundup($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 7)|0;
 $1 = $0 & -8;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3MemInit($NotUsed) {
 $NotUsed = $NotUsed|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _sqlite3MemShutdown($NotUsed) {
 $NotUsed = $NotUsed|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _trimFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $aLen$02 = 0, $azChar$04 = 0, $i$024 = 0, $i$113 = 0, $nChar$046 = 0, $nChar$139 = 0, $nChar$27 = 0, $nIn$034 = 0, $nIn$1 = 0, $nIn$219 = 0;
 var $nIn$3 = 0, $nIn$4 = 0, $or$cond = 0, $or$cond77 = 0, $z$047 = 0, $z$1 = 0, $z$2 = 0, $z$4 = 0, $z$5 = 0, $zCharSet$01 = 0, $zIn$035 = 0, $zIn$1 = 0, $zIn$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 $2 = ($1|0)==(5);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (_sqlite3_value_text($0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$argv>>2]|0;
 $6 = (_sqlite3_value_bytes($5)|0);
 $7 = ($argc|0)==(1);
 if ($7) {
  $aLen$02 = 10048;$azChar$04 = 10056;$nChar$27 = 1;$zCharSet$01 = 0;
  label = 17;
 } else {
  $8 = (($argv) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_sqlite3_value_text($9)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   STACKTOP = sp;return;
  }
  $12 = HEAP8[$10>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $nIn$4 = $6;$zIn$2 = $3;
  } else {
   $16 = $12;$nChar$046 = 0;$z$047 = $10;
   while(1) {
    $14 = (($z$047) + 1|0);
    $15 = ($16&255)>(191);
    if ($15) {
     $z$1 = $14;
     while(1) {
      $17 = HEAP8[$z$1>>0]|0;
      $18 = $17 & -64;
      $19 = ($18<<24>>24)==(-128);
      $20 = (($z$1) + 1|0);
      if ($19) {
       $z$1 = $20;
      } else {
       $23 = $17;$z$2 = $z$1;
       break;
      }
     }
    } else {
     $$pre = HEAP8[$14>>0]|0;
     $23 = $$pre;$z$2 = $14;
    }
    $21 = (($nChar$046) + 1)|0;
    $22 = ($23<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $16 = $23;$nChar$046 = $21;$z$047 = $z$2;
    }
   }
   $24 = ($nChar$046|0)>(-1);
   if ($24) {
    $25 = ($21|0)<(0);
    $26 = $25 << 31 >> 31;
    $27 = (___muldi3(($21|0),($26|0),5,0)|0);
    $28 = tempRet0;
    $29 = (_contextMalloc($context,$27,$28)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     STACKTOP = sp;return;
    }
    $31 = (($29) + ($21<<2)|0);
    $32 = HEAP8[$10>>0]|0;
    $33 = ($32<<24>>24)==(0);
    if ($33) {
     $nIn$4 = $6;$zIn$2 = $3;
    } else {
     $35 = $10;$nChar$139 = 0;
     while(1) {
      $34 = (($29) + ($nChar$139<<2)|0);
      HEAP32[$34>>2] = $35;
      $36 = (($35) + 1|0);
      $37 = HEAP8[$35>>0]|0;
      $38 = ($37&255)>(191);
      if ($38) {
       $z$4 = $36;
       while(1) {
        $39 = HEAP8[$z$4>>0]|0;
        $40 = $39 & -64;
        $41 = ($40<<24>>24)==(-128);
        $42 = (($z$4) + 1|0);
        if ($41) {
         $z$4 = $42;
        } else {
         $z$5 = $z$4;
         break;
        }
       }
      } else {
       $z$5 = $36;
      }
      $43 = $z$5;
      $44 = $35;
      $45 = (($43) - ($44))|0;
      $46 = $45&255;
      $47 = (($31) + ($nChar$139)|0);
      HEAP8[$47>>0] = $46;
      $48 = (($nChar$139) + 1)|0;
      $49 = HEAP8[$z$5>>0]|0;
      $50 = ($49<<24>>24)==(0);
      if ($50) {
       break;
      } else {
       $35 = $z$5;$nChar$139 = $48;
      }
     }
     $51 = ($nChar$139|0)>(-1);
     if ($51) {
      $aLen$02 = $31;$azChar$04 = $29;$nChar$27 = $48;$zCharSet$01 = $10;
      label = 17;
     } else {
      $nIn$4 = $6;$zIn$2 = $3;
     }
    }
   } else {
    $nIn$4 = $6;$zIn$2 = $3;
   }
  }
 }
 if ((label|0) == 17) {
  $52 = (_sqlite3_user_data($context)|0);
  $53 = $52;
  $54 = $53 & 1;
  $55 = ($54|0)!=(0);
  $56 = ($6|0)>(0);
  $or$cond = $55 & $56;
  L33: do {
   if ($or$cond) {
    $57 = ($nChar$27|0)>(0);
    $nIn$034 = $6;$zIn$035 = $3;
    while(1) {
     if ($57) {
      $i$024 = 0;
     } else {
      $nIn$1 = $nIn$034;$zIn$1 = $zIn$035;
      break L33;
     }
     while(1) {
      $58 = (($aLen$02) + ($i$024)|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = $59&255;
      $61 = ($60|0)>($nIn$034|0);
      if (!($61)) {
       $62 = (($azChar$04) + ($i$024<<2)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (_memcmp($zIn$035,$63,$60)|0);
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       }
      }
      $66 = (($i$024) + 1)|0;
      $67 = ($66|0)<($nChar$27|0);
      if ($67) {
       $i$024 = $66;
      } else {
       $nIn$1 = $nIn$034;$zIn$1 = $zIn$035;
       break L33;
      }
     }
     $68 = (($zIn$035) + ($60)|0);
     $69 = (($nIn$034) - ($60))|0;
     $70 = ($69|0)>(0);
     if ($70) {
      $nIn$034 = $69;$zIn$035 = $68;
     } else {
      $nIn$1 = $69;$zIn$1 = $68;
      break;
     }
    }
   } else {
    $nIn$1 = $6;$zIn$1 = $3;
   }
  } while(0);
  $71 = $53 & 2;
  $72 = ($71|0)!=(0);
  $73 = ($nIn$1|0)>(0);
  $or$cond77 = $72 & $73;
  L44: do {
   if ($or$cond77) {
    $74 = ($nChar$27|0)>(0);
    $nIn$219 = $nIn$1;
    while(1) {
     if ($74) {
      $i$113 = 0;
     } else {
      $nIn$3 = $nIn$219;
      break L44;
     }
     while(1) {
      $77 = (($aLen$02) + ($i$113)|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = $78&255;
      $80 = ($79|0)>($nIn$219|0);
      if (!($80)) {
       $76 = (($nIn$219) - ($79))|0;
       $81 = (($zIn$1) + ($76)|0);
       $82 = (($azChar$04) + ($i$113<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (_memcmp($81,$83,$79)|0);
       $85 = ($84|0)==(0);
       if ($85) {
        break;
       }
      }
      $86 = (($i$113) + 1)|0;
      $87 = ($86|0)<($nChar$27|0);
      if ($87) {
       $i$113 = $86;
      } else {
       $nIn$3 = $nIn$219;
       break L44;
      }
     }
     $75 = ($76|0)>(0);
     if ($75) {
      $nIn$219 = $76;
     } else {
      $nIn$3 = $76;
      break;
     }
    }
   } else {
    $nIn$3 = $nIn$1;
   }
  } while(0);
  $88 = ($zCharSet$01|0)==(0|0);
  if ($88) {
   $nIn$4 = $nIn$3;$zIn$2 = $zIn$1;
  } else {
   _sqlite3_free($azChar$04);
   $nIn$4 = $nIn$3;$zIn$2 = $zIn$1;
  }
 }
 _sqlite3_result_text($context,$zIn$2,$nIn$4,(-1));
 STACKTOP = sp;return;
}
function _minmaxFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $context$idx = 0, $context$idx$val = 0, $i$0$iBest$0 = 0, $i$03 = 0, $iBest$02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_user_data($context)|0);
 $not$ = ($0|0)!=(0|0);
 $1 = $not$ << 31 >> 31;
 $context$idx = (($context) + 52|0);
 $context$idx$val = HEAP32[$context$idx>>2]|0;
 $2 = (_sqlite3GetFuncCollSeq($context$idx$val)|0);
 $3 = HEAP32[$argv>>2]|0;
 $4 = (_sqlite3_value_type($3)|0);
 $5 = ($4|0)==(5);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ($argc|0)>(1);
 do {
  if ($6) {
   $i$03 = 1;$iBest$02 = 0;
   while(1) {
    $7 = (($argv) + ($i$03<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_sqlite3_value_type($8)|0);
    $10 = ($9|0)==(5);
    if ($10) {
     label = 7;
     break;
    }
    $11 = (($argv) + ($iBest$02<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_sqlite3MemCompare($12,$8,$2)|0);
    $14 = $13 ^ $1;
    $15 = ($14|0)>(-1);
    $i$0$iBest$0 = $15 ? $i$03 : $iBest$02;
    $16 = (($i$03) + 1)|0;
    $17 = ($16|0)<($argc|0);
    if ($17) {
     $i$03 = $16;$iBest$02 = $i$0$iBest$0;
    } else {
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$phi$trans$insert = (($argv) + ($i$0$iBest$0<<2)|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $18 = $$pre;
    break;
   }
   else if ((label|0) == 7) {
    STACKTOP = sp;return;
   }
  } else {
   $18 = $3;
  }
 } while(0);
 _sqlite3_result_value($context,$18);
 STACKTOP = sp;return;
}
function _minmaxStep($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $context$idx = 0, $context$idx$val = 0, $or$cond = 0, $or$cond1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_aggregate_context($context,40)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$argv>>2]|0;
 $4 = (_sqlite3_value_type($3)|0);
 $5 = ($4|0)==(5);
 $6 = (($1) + 28|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)!=(0);
 if ($5) {
  if (!($8)) {
   STACKTOP = sp;return;
  }
  _sqlite3SkipAccumulatorLoad($context);
  STACKTOP = sp;return;
 }
 if (!($8)) {
  _sqlite3VdbeMemCopy($1,$0);
  STACKTOP = sp;return;
 }
 $context$idx = (($context) + 52|0);
 $context$idx$val = HEAP32[$context$idx>>2]|0;
 $9 = (_sqlite3GetFuncCollSeq($context$idx$val)|0);
 $10 = (_sqlite3_user_data($context)|0);
 $11 = ($10|0)!=(0|0);
 $12 = (_sqlite3MemCompare($1,$0,$9)|0);
 $13 = ($12|0)<(0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  $$not = $11 ^ 1;
  $14 = ($12|0)>(0);
  $or$cond1 = $14 & $$not;
  if (!($or$cond1)) {
   _sqlite3SkipAccumulatorLoad($context);
   STACKTOP = sp;return;
  }
 }
 _sqlite3VdbeMemCopy($1,$0);
 STACKTOP = sp;return;
}
function _minMaxFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($0) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  _sqlite3_result_value($context,$0);
 }
 _sqlite3VdbeMemRelease($0);
 STACKTOP = sp;return;
}
function _typeofFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 if ((($1|0) == 2)) {
  $z$0 = 10024;
 } else if ((($1|0) == 4)) {
  $z$0 = 10032;
 } else if ((($1|0) == 3)) {
  $z$0 = 10016;
 } else if ((($1|0) == 1)) {
  $z$0 = 10008;
 } else {
  $z$0 = 10040;
 }
 _sqlite3_result_text($context,$z$0,-1,0);
 STACKTOP = sp;return;
}
function _lengthFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$0$lcssa = 0, $len$02 = 0;
 var $z$0$be = 0, $z$03 = 0, $z$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 if ((($1|0) == 3)) {
  $3 = (_sqlite3_value_text($0)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP8[$3>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $len$0$lcssa = 0;
  } else {
   $10 = $5;$len$02 = 0;$z$03 = $3;
   while(1) {
    $7 = (($len$02) + 1)|0;
    $8 = (($z$03) + 1|0);
    $9 = ($10&255)>(191);
    if ($9) {
     $z$1 = $8;
     while(1) {
      $13 = HEAP8[$z$1>>0]|0;
      $14 = $13 & -64;
      $15 = ($14<<24>>24)==(-128);
      $16 = (($z$1) + 1|0);
      if ($15) {
       $z$1 = $16;
      } else {
       $12 = $13;$z$0$be = $z$1;
       break;
      }
     }
    } else {
     $$pre = HEAP8[$8>>0]|0;
     $12 = $$pre;$z$0$be = $8;
    }
    $11 = ($12<<24>>24)==(0);
    if ($11) {
     $len$0$lcssa = $7;
     break;
    } else {
     $10 = $12;$len$02 = $7;$z$03 = $z$0$be;
    }
   }
  }
  _sqlite3_result_int($context,$len$0$lcssa);
  STACKTOP = sp;return;
 } else if ((($1|0) == 2) | (($1|0) == 1) | (($1|0) == 4)) {
  $2 = (_sqlite3_value_bytes($0)|0);
  _sqlite3_result_int($context,$2);
  STACKTOP = sp;return;
 } else {
  _sqlite3_result_null($context);
  STACKTOP = sp;return;
 }
}
function _instrFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$lcssa5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $N$08 = 0, $isText$0$ph = 0, $isText$0$ph4 = 0, $isText$09 = 0, $nHaystack$06 = 0, $nHaystack$1 = 0, $or$cond = 0, $or$cond2 = 0, $zHaystack$0$ph = 0;
 var $zHaystack$07 = 0, $zHaystack$1 = 0, $zNeedle$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3_value_type($3)|0);
 $5 = ($1|0)==(5);
 $6 = ($4|0)==(5);
 $or$cond = $5 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $7 = (_sqlite3_value_bytes($0)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = (_sqlite3_value_bytes($8)|0);
 $10 = ($1|0)==(4);
 $11 = ($4|0)==(4);
 $or$cond2 = $10 & $11;
 $12 = HEAP32[$argv>>2]|0;
 if ($or$cond2) {
  $13 = (_sqlite3_value_blob($12)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (_sqlite3_value_blob($14)|0);
  $isText$0$ph4 = 0;$zHaystack$0$ph = $13;$zNeedle$0$ph = $15;
 } else {
  $16 = (_sqlite3_value_text($12)|0);
  $17 = HEAP32[$2>>2]|0;
  $18 = (_sqlite3_value_text($17)|0);
  $isText$0$ph4 = 1;$zHaystack$0$ph = $16;$zNeedle$0$ph = $18;
 }
 $19 = ($9|0)>($7|0);
 L8: do {
  if ($19) {
   $$lcssa5 = 0;
  } else {
   $N$08 = 1;$isText$09 = $isText$0$ph4;$nHaystack$06 = $7;$zHaystack$07 = $zHaystack$0$ph;
   while(1) {
    $22 = (_memcmp($zHaystack$07,$zNeedle$0$ph,$9)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$lcssa5 = $N$08;
     break L8;
    }
    $24 = (($N$08) + 1)|0;
    $25 = ($isText$09|0)==(0);
    $nHaystack$1 = $nHaystack$06;$zHaystack$1 = $zHaystack$07;
    while(1) {
     $21 = (($nHaystack$1) + -1)|0;
     $26 = (($zHaystack$1) + 1|0);
     if ($25) {
      $isText$0$ph = 0;
      break;
     }
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 & -64;
     $29 = ($28<<24>>24)==(-128);
     if ($29) {
      $nHaystack$1 = $21;$zHaystack$1 = $26;
     } else {
      $isText$0$ph = $isText$09;
      break;
     }
    }
    $20 = ($9|0)>($21|0);
    if ($20) {
     $$lcssa5 = 0;
     break;
    } else {
     $N$08 = $24;$isText$09 = $isText$0$ph;$nHaystack$06 = $21;$zHaystack$07 = $26;
    }
   }
  }
 } while(0);
 _sqlite3_result_int($context,$$lcssa5);
 STACKTOP = sp;return;
}
function _substrFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$6 = 0, $$615 = 0, $$lobit = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $len$025 = 0, $len$1 = 0, $negP2$0 = 0, $not$ = 0, $not$14 = 0;
 var $or$cond = 0, $or$cond8 = 0, $p2$4$off0 = 0, $z$0 = 0, $z$1$lcssa = 0, $z$116 = 0, $z$2 = 0, $z$3 = 0, $z2$024 = 0, $z2$1 = 0, $z2$2 = 0, $z2$3$lcssa = 0, $z2$39 = 0, $z2$4 = 0, $z2$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($argv) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3_value_type($1)|0);
 $3 = ($2|0)==(5);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ($argc|0)==(3);
 if ($4) {
  $5 = (($argv) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_sqlite3_value_type($6)|0);
  $8 = ($7|0)==(5);
  if ($8) {
   STACKTOP = sp;return;
  }
 }
 $9 = HEAP32[$argv>>2]|0;
 $10 = (_sqlite3_value_type($9)|0);
 $11 = (_sqlite3_value_int($1)|0);
 $12 = ($11|0)<(0);
 $13 = $12 << 31 >> 31;
 $14 = ($10|0)==(4);
 $15 = HEAP32[$argv>>2]|0;
 if ($14) {
  $16 = (_sqlite3_value_bytes($15)|0);
  $17 = HEAP32[$argv>>2]|0;
  $18 = (_sqlite3_value_blob($17)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   STACKTOP = sp;return;
  } else {
   $len$1 = $16;$z$0 = $18;
  }
 } else {
  $20 = (_sqlite3_value_text($15)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   STACKTOP = sp;return;
  }
  $22 = ($11|0)<(0);
  if ($22) {
   $23 = HEAP8[$20>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $len$1 = 0;$z$0 = $20;
   } else {
    $27 = $23;$len$025 = 0;$z2$024 = $20;
    while(1) {
     $25 = (($z2$024) + 1|0);
     $26 = ($27&255)>(191);
     if ($26) {
      $z2$1 = $25;
      while(1) {
       $28 = HEAP8[$z2$1>>0]|0;
       $29 = $28 & -64;
       $30 = ($29<<24>>24)==(-128);
       $31 = (($z2$1) + 1|0);
       if ($30) {
        $z2$1 = $31;
       } else {
        $34 = $28;$z2$2 = $z2$1;
        break;
       }
      }
     } else {
      $$pre31 = HEAP8[$25>>0]|0;
      $34 = $$pre31;$z2$2 = $25;
     }
     $32 = (($len$025) + 1)|0;
     $33 = ($34<<24>>24)==(0);
     if ($33) {
      $len$1 = $32;$z$0 = $20;
      break;
     } else {
      $27 = $34;$len$025 = $32;$z2$024 = $z2$2;
     }
    }
   }
  } else {
   $len$1 = 0;$z$0 = $20;
  }
 }
 if ($4) {
  $35 = (($argv) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_sqlite3_value_int($36)|0);
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = ($37|0)<(0);
  $41 = (_i64Subtract(0,0,($37|0),($39|0))|0);
  $42 = tempRet0;
  $43 = $40 ? $41 : $37;
  $44 = $40 ? $42 : $39;
  $$lobit = $37 >>> 31;
  $56 = $43;$57 = $44;$negP2$0 = $$lobit;
 } else {
  $45 = (_sqlite3_context_db_handle($context)|0);
  $46 = (($45) + 88|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)<(0);
  $49 = $48 << 31 >> 31;
  $56 = $47;$57 = $49;$negP2$0 = 0;
 }
 $50 = ($11|0)<(0);
 do {
  if ($50) {
   $51 = ($len$1|0)<(0);
   $52 = $51 << 31 >> 31;
   $53 = (_i64Add(($len$1|0),($52|0),($11|0),($13|0))|0);
   $54 = tempRet0;
   $55 = ($54|0)<(0);
   if ($55) {
    $58 = (_i64Add(($56|0),($57|0),($53|0),($54|0))|0);
    $59 = tempRet0;
    $60 = ($59|0)<(0);
    $61 = $60 ? 0 : $58;
    $62 = $60 ? 0 : $59;
    $77 = 0;$78 = 0;$79 = $61;$80 = $62;
   } else {
    $77 = $53;$78 = $54;$79 = $56;$80 = $57;
   }
  } else {
   $63 = ($11|0)>(0);
   if ($63) {
    $64 = (_i64Add(($11|0),($13|0),-1,-1)|0);
    $65 = tempRet0;
    $77 = $64;$78 = $65;$79 = $56;$80 = $57;
    break;
   } else {
    $66 = ($57|0)>(0);
    $67 = ($57|0)==(0);
    $68 = ($56>>>0)>(0);
    $69 = $67 & $68;
    $70 = $66 | $69;
    $71 = $70 << 31 >> 31;
    $72 = ($71|0)<(0);
    $73 = $72 << 31 >> 31;
    $74 = (_i64Add(($71|0),($73|0),($56|0),($57|0))|0);
    $75 = tempRet0;
    $77 = $11;$78 = $13;$79 = $74;$80 = $75;
    break;
   }
  }
 } while(0);
 $76 = ($negP2$0|0)==(0);
 if ($76) {
  $90 = $77;$92 = $78;$97 = $79;$99 = $80;
 } else {
  $81 = (_i64Subtract(($77|0),($78|0),($79|0),($80|0))|0);
  $82 = tempRet0;
  $83 = ($82|0)<(0);
  $84 = $83 ? 0 : $81;
  $85 = $83 ? 0 : $82;
  $86 = $83 ? $77 : $79;
  $87 = $83 ? $78 : $80;
  $90 = $84;$92 = $85;$97 = $86;$99 = $87;
 }
 if ($14) {
  $135 = (_i64Add(($97|0),($99|0),($90|0),($92|0))|0);
  $136 = tempRet0;
  $137 = ($len$1|0)<(0);
  $138 = $137 << 31 >> 31;
  $139 = ($136|0)>($138|0);
  $140 = ($136|0)==($138|0);
  $141 = ($135>>>0)>($len$1>>>0);
  $142 = $140 & $141;
  $143 = $139 | $142;
  if ($143) {
   $144 = (_i64Subtract(($len$1|0),($138|0),($90|0),($92|0))|0);
   $145 = tempRet0;
   $146 = ($145|0)<(0);
   $extract$t = $146 ? 0 : $144;
   $p2$4$off0 = $extract$t;
  } else {
   $p2$4$off0 = $97;
  }
  $147 = (($z$0) + ($90)|0);
  _sqlite3_result_blob($context,$147,$p2$4$off0,(-1));
  STACKTOP = sp;return;
 }
 $88 = HEAP8[$z$0>>0]|0;
 $89 = ($90|0)!=(0);
 $91 = ($92|0)!=(0);
 $93 = $89 | $91;
 $not$14 = ($88<<24>>24)!=(0);
 $$615 = $93 & $not$14;
 if ($$615) {
  $103 = $88;$108 = $90;$109 = $92;$z$116 = $z$0;
  while(1) {
   $101 = (($z$116) + 1|0);
   $102 = ($103&255)>(191);
   if ($102) {
    $z$2 = $101;
    while(1) {
     $104 = HEAP8[$z$2>>0]|0;
     $105 = $104 & -64;
     $106 = ($105<<24>>24)==(-128);
     $107 = (($z$2) + 1|0);
     if ($106) {
      $z$2 = $107;
     } else {
      $115 = $104;$z$3 = $z$2;
      break;
     }
    }
   } else {
    $$pre30 = HEAP8[$101>>0]|0;
    $115 = $$pre30;$z$3 = $101;
   }
   $110 = (_i64Add(($108|0),($109|0),-1,-1)|0);
   $111 = tempRet0;
   $112 = ($110|0)!=(0);
   $113 = ($111|0)!=(0);
   $114 = $112 | $113;
   $not$ = ($115<<24>>24)!=(0);
   $$6 = $114 & $not$;
   if ($$6) {
    $103 = $115;$108 = $110;$109 = $111;$z$116 = $z$3;
   } else {
    $95 = $115;$z$1$lcssa = $z$3;
    break;
   }
  }
 } else {
  $95 = $88;$z$1$lcssa = $z$0;
 }
 $94 = ($95<<24>>24)==(0);
 $96 = ($97|0)==(0);
 $98 = ($99|0)==(0);
 $100 = $96 & $98;
 $or$cond8 = $94 | $100;
 if ($or$cond8) {
  $z2$3$lcssa = $z$1$lcssa;
 } else {
  $118 = $95;$123 = $97;$124 = $99;$z2$39 = $z$1$lcssa;
  while(1) {
   $116 = (($z2$39) + 1|0);
   $117 = ($118&255)>(191);
   if ($117) {
    $z2$4 = $116;
    while(1) {
     $119 = HEAP8[$z2$4>>0]|0;
     $120 = $119 & -64;
     $121 = ($120<<24>>24)==(-128);
     $122 = (($z2$4) + 1|0);
     if ($121) {
      $z2$4 = $122;
     } else {
      $128 = $119;$z2$5 = $z2$4;
      break;
     }
    }
   } else {
    $$pre = HEAP8[$116>>0]|0;
    $128 = $$pre;$z2$5 = $116;
   }
   $125 = (_i64Add(($123|0),($124|0),-1,-1)|0);
   $126 = tempRet0;
   $127 = ($128<<24>>24)==(0);
   $129 = ($125|0)==(0);
   $130 = ($126|0)==(0);
   $131 = $129 & $130;
   $or$cond = $127 | $131;
   if ($or$cond) {
    $z2$3$lcssa = $z2$5;
    break;
   } else {
    $118 = $128;$123 = $125;$124 = $126;$z2$39 = $z2$5;
   }
  }
 }
 $132 = $z2$3$lcssa;
 $133 = $z$1$lcssa;
 $134 = (($132) - ($133))|0;
 _sqlite3_result_text($context,$z$1$lcssa,$134,(-1));
 STACKTOP = sp;return;
}
function _printfFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $vararg_buffer = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $x = sp + 32|0;
 $str = sp + 4|0;
 $0 = ($argc|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_text($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($argc) + -1)|0;
 HEAP32[$x>>2] = $4;
 $5 = (($x) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = (($argv) + 4|0);
 $7 = (($x) + 8|0);
 HEAP32[$7>>2] = $6;
 _sqlite3StrAccumInit($str,0,0,1000000000);
 $8 = (_sqlite3_context_db_handle($context)|0);
 HEAP32[$str>>2] = $8;
 HEAP32[$vararg_buffer>>2] = $x;
 _sqlite3XPrintf($str,2,$2,$vararg_buffer);
 $9 = (($str) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_sqlite3StrAccumFinish($str)|0);
 _sqlite3_result_text($context,$11,$10,145);
 STACKTOP = sp;return;
}
function _unicodeFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $z = sp;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 HEAP32[$z>>2] = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (_sqlite3Utf8Read($z)|0);
 _sqlite3_result_int($context,$5);
 STACKTOP = sp;return;
}
function _charFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $zOut$0$lcssa = 0, $zOut$03 = 0, $zOut$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $argc << 2;
 $1 = $0 | 1;
 $2 = (_sqlite3_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _sqlite3_result_error_nomem($context);
  STACKTOP = sp;return;
 }
 $4 = ($argc|0)>(0);
 if ($4) {
  $i$02 = 0;$zOut$03 = $2;
  while(1) {
   $5 = (($argv) + ($i$02<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_sqlite3_value_int64($6)|0);
   $8 = tempRet0;
   $9 = ($8>>>0)>(0);
   $10 = ($8|0)==(0);
   $11 = ($7>>>0)>(1114111);
   $12 = $10 & $11;
   $13 = $9 | $12;
   $14 = $7 & 2097151;
   $15 = $13 ? 65533 : $14;
   $16 = ($15>>>0)<(128);
   do {
    if ($16) {
     $17 = $15&255;
     $18 = (($zOut$03) + 1|0);
     HEAP8[$zOut$03>>0] = $17;
     $zOut$1 = $18;
    } else {
     $19 = ($15>>>0)<(2048);
     if ($19) {
      $20 = $15 >>> 6;
      $21 = $20 & 31;
      $22 = $21 | 192;
      $23 = $22&255;
      $24 = (($zOut$03) + 1|0);
      HEAP8[$zOut$03>>0] = $23;
      $25 = $15 & 63;
      $26 = $25 | 128;
      $27 = $26&255;
      $28 = (($zOut$03) + 2|0);
      HEAP8[$24>>0] = $27;
      $zOut$1 = $28;
      break;
     }
     $29 = ($15>>>0)<(65536);
     if ($29) {
      $30 = $15 >>> 12;
      $31 = $30 & 15;
      $32 = $31 | 224;
      $33 = $32&255;
      $34 = (($zOut$03) + 1|0);
      HEAP8[$zOut$03>>0] = $33;
      $35 = $15 >>> 6;
      $36 = $35 & 63;
      $37 = $36 | 128;
      $38 = $37&255;
      $39 = (($zOut$03) + 2|0);
      HEAP8[$34>>0] = $38;
      $40 = $15 & 63;
      $41 = $40 | 128;
      $42 = $41&255;
      $43 = (($zOut$03) + 3|0);
      HEAP8[$39>>0] = $42;
      $zOut$1 = $43;
      break;
     } else {
      $44 = $15 >>> 18;
      $45 = $44 | 240;
      $46 = $45&255;
      $47 = (($zOut$03) + 1|0);
      HEAP8[$zOut$03>>0] = $46;
      $48 = $15 >>> 12;
      $49 = $48 & 63;
      $50 = $49 | 128;
      $51 = $50&255;
      $52 = (($zOut$03) + 2|0);
      HEAP8[$47>>0] = $51;
      $53 = $15 >>> 6;
      $54 = $53 & 63;
      $55 = $54 | 128;
      $56 = $55&255;
      $57 = (($zOut$03) + 3|0);
      HEAP8[$52>>0] = $56;
      $58 = $15 & 63;
      $59 = $58 | 128;
      $60 = $59&255;
      $61 = (($zOut$03) + 4|0);
      HEAP8[$57>>0] = $60;
      $zOut$1 = $61;
      break;
     }
    }
   } while(0);
   $62 = (($i$02) + 1)|0;
   $exitcond = ($62|0)==($argc|0);
   if ($exitcond) {
    $zOut$0$lcssa = $zOut$1;
    break;
   } else {
    $i$02 = $62;$zOut$03 = $zOut$1;
   }
  }
 } else {
  $zOut$0$lcssa = $2;
 }
 $63 = $zOut$0$lcssa;
 $64 = $2;
 $65 = (($63) - ($64))|0;
 _sqlite3_result_text($context,$2,$65,156);
 STACKTOP = sp;return;
}
function _absFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rVal$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 if ((($1|0) == 1)) {
  $2 = (_sqlite3_value_int64($0)|0);
  $3 = tempRet0;
  $4 = ($3|0)<(0);
  do {
   if ($4) {
    $5 = ($2|0)==(0);
    $6 = ($3|0)==(-2147483648);
    $7 = $5 & $6;
    if (!($7)) {
     $8 = (_i64Subtract(0,0,($2|0),($3|0))|0);
     $9 = tempRet0;
     $10 = $8;$11 = $9;
     break;
    }
    _sqlite3_result_error($context,9936,-1);
    STACKTOP = sp;return;
   } else {
    $10 = $2;$11 = $3;
   }
  } while(0);
  _sqlite3_result_int64($context,$10,$11);
  STACKTOP = sp;return;
 } else if ((($1|0) == 5)) {
  _sqlite3_result_null($context);
  STACKTOP = sp;return;
 } else {
  $12 = (+_sqlite3_value_double($0));
  $13 = $12 < 0.0;
  if ($13) {
   $14 = -$12;
   $rVal$0 = $14;
  } else {
   $rVal$0 = $12;
  }
  _sqlite3_result_double($context,$rVal$0);
  STACKTOP = sp;return;
 }
}
function _roundFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $$$ = 0, $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $or$cond = 0, $or$cond2 = 0, $r = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $r = sp;
 $0 = ($argc|0)==(2);
 do {
  if ($0) {
   $1 = (($argv) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (_sqlite3_value_type($2)|0);
   $4 = ($3|0)==(5);
   if ($4) {
    STACKTOP = sp;return;
   } else {
    $5 = (_sqlite3_value_int($2)|0);
    $6 = ($5|0)>(30);
    $$ = $6 ? 30 : $5;
    $7 = ($$|0)<(0);
    $$$ = $7 ? 0 : $$;
    $n$0 = $$$;
    break;
   }
  } else {
   $n$0 = 0;
  }
 } while(0);
 $8 = HEAP32[$argv>>2]|0;
 $9 = (_sqlite3_value_type($8)|0);
 $10 = ($9|0)==(5);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (+_sqlite3_value_double($8));
 HEAPF64[$r>>3] = $11;
 $12 = ($n$0|0)==(0);
 do {
  if ($12) {
   $13 = $11 >= 0.0;
   $14 = $11 < 9223372036854775808.0;
   $or$cond = $13 & $14;
   if ($or$cond) {
    $15 = $11 + 0.5;
    $16 = (~~$15)>>>0;
    $17 = +Math_abs($15) >= 1.0 ? $15 > 0.0 ? (Math_min(+Math_floor($15 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($15 - +(~~$15 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $18 = (+($16>>>0)) + (4294967296.0*(+($17|0)));
    HEAPF64[$r>>3] = $18;
    $29 = $18;
    break;
   }
   $19 = $11 < 0.0;
   $20 = $11 > -9223372036854775808.0;
   $or$cond2 = $19 & $20;
   if ($or$cond2) {
    $21 = 0.5 - $11;
    $22 = (~~$21)>>>0;
    $23 = +Math_abs($21) >= 1.0 ? $21 > 0.0 ? (Math_min(+Math_floor($21 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($21 - +(~~$21 >>> 0)) / 4294967296.0) >>> 0 : 0;
    $24 = (+($22>>>0)) + (4294967296.0*(+($23|0)));
    $25 = -$24;
    HEAPF64[$r>>3] = $25;
    $29 = $25;
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   HEAP32[$vararg_buffer>>2] = $n$0;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $26 = (_sqlite3_mprintf(10000,$vararg_buffer)|0);
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    $28 = (_sqlite3Strlen30($26)|0);
    (_sqlite3AtoF($26,$r,$28,1)|0);
    _sqlite3_free($26);
    $$pre = +HEAPF64[$r>>3];
    $29 = $$pre;
    break;
   }
   _sqlite3_result_error_nomem($context);
   STACKTOP = sp;return;
  }
 } while(0);
 _sqlite3_result_double($context,$29);
 STACKTOP = sp;return;
}
function _upperFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = HEAP32[$argv>>2]|0;
 $3 = (_sqlite3_value_bytes($2)|0);
 $4 = ($1|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ($3|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = (_i64Add(($3|0),($6|0),1,0)|0);
 $8 = tempRet0;
 $9 = (_contextMalloc($context,$7,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($3|0)>(0);
 if ($11) {
  $i$01 = 0;
  while(1) {
   $12 = (($1) + ($i$01)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (48 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $$not = $17 | 223;
   $18 = $$not ^ 32;
   $19 = $18 & $14;
   $20 = $19&255;
   $21 = (($9) + ($i$01)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($i$01) + 1)|0;
   $exitcond = ($22|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $22;
   }
  }
 }
 _sqlite3_result_text($context,$9,$3,156);
 STACKTOP = sp;return;
}
function _lowerFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = HEAP32[$argv>>2]|0;
 $3 = (_sqlite3_value_bytes($2)|0);
 $4 = ($1|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ($3|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = (_i64Add(($3|0),($6|0),1,0)|0);
 $8 = tempRet0;
 $9 = (_contextMalloc($context,$7,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($3|0)>(0);
 if ($11) {
  $i$01 = 0;
  while(1) {
   $12 = (($1) + ($i$01)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = (960 + ($14)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = (($9) + ($i$01)|0);
   HEAP8[$17>>0] = $16;
   $18 = (($i$01) + 1)|0;
   $exitcond = ($18|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $18;
   }
  }
 }
 _sqlite3_result_text($context,$9,$3,156);
 STACKTOP = sp;return;
}
function _versionFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3_result_text($context,8,-1,0);
 STACKTOP = sp;return;
}
function _hexFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $pBlob$01 = 0, $scevgep = 0, $z$0$lcssa = 0, $z$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_blob($0)|0);
 $2 = HEAP32[$argv>>2]|0;
 $3 = (_sqlite3_value_bytes($2)|0);
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 $6 = (_bitshift64Shl(($3|0),($5|0),1)|0);
 $7 = tempRet0;
 $8 = $6 | 1;
 $9 = (_contextMalloc($context,$8,$7)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($3|0)>(0);
 if ($11) {
  $12 = $3 << 1;
  $i$03 = 0;$pBlob$01 = $1;$z$02 = $9;
  while(1) {
   $13 = HEAP8[$pBlob$01>>0]|0;
   $14 = $13&255;
   $15 = $14 >>> 4;
   $16 = (9976 + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = (($z$02) + 1|0);
   HEAP8[$z$02>>0] = $17;
   $19 = $14 & 15;
   $20 = (9976 + ($19)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = (($z$02) + 2|0);
   HEAP8[$18>>0] = $21;
   $23 = (($i$03) + 1)|0;
   $24 = (($pBlob$01) + 1|0);
   $exitcond = ($23|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $23;$pBlob$01 = $24;$z$02 = $22;
   }
  }
  $scevgep = (($9) + ($12)|0);
  $z$0$lcssa = $scevgep;
 } else {
  $z$0$lcssa = $9;
 }
 HEAP8[$z$0$lcssa>>0] = 0;
 $25 = $3 << 1;
 _sqlite3_result_text($context,$9,$25,156);
 STACKTOP = sp;return;
}
function _randomFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 _sqlite3_randomness(8,$r);
 $0 = $r;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(0);
 if (!($6)) {
  $14 = $2;$15 = $5;
  _sqlite3_result_int64($context,$14,$15);
  STACKTOP = sp;return;
 }
 $7 = $5 & 2147483647;
 $8 = (_i64Subtract(0,0,($2|0),($7|0))|0);
 $9 = tempRet0;
 $10 = $r;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = $8;$15 = $9;
 _sqlite3_result_int64($context,$14,$15);
 STACKTOP = sp;return;
}
function _randomBlob($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_int($0)|0);
 $2 = ($1|0)<(1);
 $$ = $2 ? 1 : $1;
 $3 = ($$|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (_contextMalloc($context,$$,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 _sqlite3_randomness($$,$5);
 _sqlite3_result_blob($context,$5,$$,156);
 STACKTOP = sp;return;
}
function _nullifFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $context$idx = 0, $context$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $context$idx = (($context) + 52|0);
 $context$idx$val = HEAP32[$context$idx>>2]|0;
 $0 = (_sqlite3GetFuncCollSeq($context$idx$val)|0);
 $1 = HEAP32[$argv>>2]|0;
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3MemCompare($1,$3,$0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$argv>>2]|0;
 _sqlite3_result_value($context,$6);
 STACKTOP = sp;return;
}
function _sourceidFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3_result_text($context,1768,-1,0);
 STACKTOP = sp;return;
}
function _errlogFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_int($0)|0);
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3_value_text($3)|0);
 HEAP32[$vararg_buffer>>2] = $4;
 _sqlite3_log($1,1712,$vararg_buffer);
 STACKTOP = sp;return;
}
function _compileoptionusedFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (_sqlite3_compileoption_used($1)|0);
 _sqlite3_result_int($context,$3);
 STACKTOP = sp;return;
}
function _compileoptiongetFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_int($0)|0);
 $2 = (_sqlite3_compileoption_get($1)|0);
 _sqlite3_result_text($context,$2,-1,0);
 STACKTOP = sp;return;
}
function _quoteFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, $i1$0 = 0, $i1$13 = 0, $j$04 = 0, $j$1 = 0, $r2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $r2 = sp;
 $zBuf = sp + 24|0;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 if ((($1|0) == 1)) {
  _sqlite3_result_value($context,$0);
  STACKTOP = sp;return;
 } else if ((($1|0) == 3)) {
  $40 = (_sqlite3_value_text($0)|0);
  $41 = ($40|0)==(0|0);
  if ($41) {
   STACKTOP = sp;return;
  } else {
   $44 = 0;$45 = 0;$i1$0 = 0;
  }
  while(1) {
   $42 = (($40) + ($i1$0)|0);
   $43 = HEAP8[$42>>0]|0;
   if ((($43<<24>>24) == 0)) {
    break;
   } else if ((($43<<24>>24) == 39)) {
    $46 = (_i64Add(($44|0),($45|0),1,0)|0);
    $47 = tempRet0;
    $75 = $46;$76 = $47;
   } else {
    $75 = $44;$76 = $45;
   }
   $48 = (($i1$0) + 1)|0;
   $44 = $75;$45 = $76;$i1$0 = $48;
  }
  $49 = ($i1$0|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (_i64Add(($44|0),($45|0),3,0)|0);
  $52 = tempRet0;
  $53 = (_i64Add(($51|0),($52|0),($i1$0|0),($50|0))|0);
  $54 = tempRet0;
  $55 = (_contextMalloc($context,$53,$54)|0);
  $56 = ($55|0)==(0|0);
  if ($56) {
   STACKTOP = sp;return;
  }
  HEAP8[$55>>0] = 39;
  $57 = HEAP8[$40>>0]|0;
  $58 = ($57<<24>>24)==(0);
  $59 = (($55) + 1|0);
  if ($58) {
   $$lcssa = 2;$$lcssa2 = $59;
  } else {
   $60 = $57;$61 = $59;$63 = $40;$67 = 2;$i1$13 = 0;$j$04 = 1;
   while(1) {
    HEAP8[$61>>0] = $60;
    $62 = HEAP8[$63>>0]|0;
    $64 = ($62<<24>>24)==(39);
    if ($64) {
     $65 = (($j$04) + 2)|0;
     $66 = (($55) + ($67)|0);
     HEAP8[$66>>0] = 39;
     $j$1 = $65;
    } else {
     $j$1 = $67;
    }
    $68 = (($i1$13) + 1)|0;
    $69 = (($40) + ($68)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = ($70<<24>>24)==(0);
    $72 = (($j$1) + 1)|0;
    $73 = (($55) + ($j$1)|0);
    if ($71) {
     $$lcssa = $72;$$lcssa2 = $73;
     break;
    } else {
     $60 = $70;$61 = $73;$63 = $69;$67 = $72;$i1$13 = $68;$j$04 = $j$1;
    }
   }
  }
  HEAP8[$$lcssa2>>0] = 39;
  $74 = (($55) + ($$lcssa)|0);
  HEAP8[$74>>0] = 0;
  _sqlite3_result_text($context,$55,$$lcssa,156);
  STACKTOP = sp;return;
 } else if ((($1|0) == 2)) {
  $2 = (+_sqlite3_value_double($0));
  HEAPF64[tempDoublePtr>>3]=$2;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sqlite3_snprintf(50,$zBuf,9960,$vararg_buffer)|0);
  (_sqlite3AtoF($zBuf,$r2,20,1)|0);
  $3 = +HEAPF64[$r2>>3];
  $4 = $2 != $3;
  if ($4) {
   HEAPF64[tempDoublePtr>>3]=$2;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sqlite3_snprintf(50,$zBuf,9968,$vararg_buffer1)|0);
  }
  _sqlite3_result_text($context,$zBuf,-1,(-1));
  STACKTOP = sp;return;
 } else if ((($1|0) == 4)) {
  $5 = (_sqlite3_value_blob($0)|0);
  $6 = HEAP32[$argv>>2]|0;
  $7 = (_sqlite3_value_bytes($6)|0);
  $8 = ($7|0)<(0);
  $9 = $8 << 31 >> 31;
  $10 = (_bitshift64Shl(($7|0),($9|0),1)|0);
  $11 = tempRet0;
  $12 = (_i64Add(($10|0),($11|0),4,0)|0);
  $13 = tempRet0;
  $14 = (_contextMalloc($context,$12,$13)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   STACKTOP = sp;return;
  }
  $16 = ($7|0)>(0);
  if ($16) {
   $i$01 = 0;
   while(1) {
    $17 = (($5) + ($i$01)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 >>> 4;
    $21 = (9976 + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $i$01 << 1;
    $24 = (($23) + 2)|0;
    $25 = (($14) + ($24)|0);
    HEAP8[$25>>0] = $22;
    $26 = HEAP8[$17>>0]|0;
    $27 = $26&255;
    $28 = $27 & 15;
    $29 = (9976 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = (($23) + 3)|0;
    $32 = (($14) + ($31)|0);
    HEAP8[$32>>0] = $30;
    $33 = (($i$01) + 1)|0;
    $exitcond = ($33|0)==($7|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $33;
    }
   }
  }
  $34 = $7 << 1;
  $35 = (($34) + 2)|0;
  $36 = (($14) + ($35)|0);
  HEAP8[$36>>0] = 39;
  $37 = (($34) + 3)|0;
  $38 = (($14) + ($37)|0);
  HEAP8[$38>>0] = 0;
  HEAP8[$14>>0] = 88;
  $39 = (($14) + 1|0);
  HEAP8[$39>>0] = 39;
  _sqlite3_result_text($context,$14,-1,(-1));
  _sqlite3_free($14);
  STACKTOP = sp;return;
 } else {
  _sqlite3_result_text($context,9992,4,0);
  STACKTOP = sp;return;
 }
}
function _last_insert_rowid($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = (_sqlite3_last_insert_rowid($0)|0);
 $2 = tempRet0;
 _sqlite3_result_int64($context,$1,$2);
 STACKTOP = sp;return;
}
function _changes($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = (_sqlite3_changes($0)|0);
 _sqlite3_result_int($context,$1);
 STACKTOP = sp;return;
}
function _total_changes($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = (_sqlite3_total_changes($0)|0);
 _sqlite3_result_int($context,$1);
 STACKTOP = sp;return;
}
function _replaceFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$07 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$08 = 0, $j$1 = 0, $zOut$0$lcssa = 0, $zOut$010 = 0, $zOut$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$argv>>2]|0;
 $4 = (_sqlite3_value_bytes($3)|0);
 $5 = (($argv) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3_value_text($6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP8[$7>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $11 = HEAP32[$argv>>2]|0;
  _sqlite3_result_value($context,$11);
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$5>>2]|0;
 $13 = (_sqlite3_value_bytes($12)|0);
 $14 = (($argv) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_sqlite3_value_text($15)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$14>>2]|0;
 $19 = (_sqlite3_value_bytes($18)|0);
 $20 = (($4) + 1)|0;
 $21 = ($20|0)<(0);
 $22 = $21 << 31 >> 31;
 $23 = (_contextMalloc($context,$20,$22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = (($4) - ($13))|0;
 $26 = ($25|0)<(0);
 L17: do {
  if ($26) {
   $i$0$lcssa = 0;$j$0$lcssa = 0;$zOut$0$lcssa = $23;
  } else {
   $27 = (($19) - ($13))|0;
   $28 = ($27|0)<(0);
   $29 = $28 << 31 >> 31;
   $30 = (($13) + -1)|0;
   $40 = $20;$41 = $22;$i$07 = 0;$j$08 = 0;$zOut$010 = $23;
   while(1) {
    $31 = (($1) + ($i$07)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = HEAP8[$7>>0]|0;
    $34 = ($32<<24>>24)==($33<<24>>24);
    if ($34) {
     $35 = (_memcmp($31,$7,$13)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $39 = (_sqlite3_context_db_handle($context)|0);
      $42 = (_i64Add(($40|0),($41|0),($27|0),($29|0))|0);
      $43 = tempRet0;
      $44 = (_i64Add(($42|0),($43|0),-1,-1)|0);
      $45 = tempRet0;
      $46 = (($39) + 88|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)<(0);
      $49 = $48 << 31 >> 31;
      $50 = ($45|0)>($49|0);
      $51 = ($45|0)==($49|0);
      $52 = ($44>>>0)>($47>>>0);
      $53 = $51 & $52;
      $54 = $50 | $53;
      if ($54) {
       label = 13;
       break;
      }
      $55 = (_sqlite3_realloc($zOut$010,$42)|0);
      $56 = ($55|0)==(0|0);
      if ($56) {
       label = 15;
       break;
      }
      $57 = (($55) + ($j$08)|0);
      _memcpy(($57|0),($16|0),($19|0))|0;
      $58 = (($j$08) + ($19))|0;
      $59 = (($30) + ($i$07))|0;
      $67 = $42;$68 = $43;$i$1 = $59;$j$1 = $58;$zOut$1 = $55;
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
    if ((label|0) == 11) {
     label = 0;
     $37 = (($j$08) + 1)|0;
     $38 = (($zOut$010) + ($j$08)|0);
     HEAP8[$38>>0] = $32;
     $67 = $40;$68 = $41;$i$1 = $i$07;$j$1 = $37;$zOut$1 = $zOut$010;
    }
    $60 = (($i$1) + 1)|0;
    $61 = ($i$1|0)<($25|0);
    if ($61) {
     $40 = $67;$41 = $68;$i$07 = $60;$j$08 = $j$1;$zOut$010 = $zOut$1;
    } else {
     $i$0$lcssa = $60;$j$0$lcssa = $j$1;$zOut$0$lcssa = $zOut$1;
     break L17;
    }
   }
   if ((label|0) == 13) {
    _sqlite3_result_error_toobig($context);
    _sqlite3_free($zOut$010);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 15) {
    _sqlite3_result_error_nomem($context);
    _sqlite3_free($zOut$010);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $62 = (($zOut$0$lcssa) + ($j$0$lcssa)|0);
 $63 = (($1) + ($i$0$lcssa)|0);
 $64 = (($4) - ($i$0$lcssa))|0;
 _memcpy(($62|0),($63|0),($64|0))|0;
 $65 = (($j$0$lcssa) + ($64))|0;
 $66 = (($zOut$0$lcssa) + ($65)|0);
 HEAP8[$66>>0] = 0;
 _sqlite3_result_text($context,$zOut$0$lcssa,$65,156);
 STACKTOP = sp;return;
}
function _zeroblobFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_int64($1)|0);
 $3 = tempRet0;
 $4 = (($0) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 $8 = ($3|0)>($7|0);
 $9 = ($3|0)==($7|0);
 $10 = ($2>>>0)>($5>>>0);
 $11 = $9 & $10;
 $12 = $8 | $11;
 if ($12) {
  _sqlite3_result_error_toobig($context);
  STACKTOP = sp;return;
 } else {
  _sqlite3_result_zeroblob($context,$2);
  STACKTOP = sp;return;
 }
}
function _sumStep($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,32)|0);
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_numeric_type($1)|0);
 $3 = ($0|0)==(0|0);
 $4 = ($2|0)==(5);
 $or$cond = $3 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $5 = (($0) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_i64Add(($8|0),($11|0),1,0)|0);
 $13 = tempRet0;
 $14 = $5;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = ($2|0)==(1);
 $19 = HEAP32[$argv>>2]|0;
 if (!($18)) {
  $34 = (+_sqlite3_value_double($19));
  $35 = +HEAPF64[$0>>3];
  $36 = $34 + $35;
  HEAPF64[$0>>3] = $36;
  $37 = (($0) + 25|0);
  HEAP8[$37>>0] = 1;
  STACKTOP = sp;return;
 }
 $20 = (_sqlite3_value_int64($19)|0);
 $21 = tempRet0;
 $22 = (+($20>>>0)) + (4294967296.0*(+($21|0)));
 $23 = +HEAPF64[$0>>3];
 $24 = $23 + $22;
 HEAPF64[$0>>3] = $24;
 $25 = (($0) + 25|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = (($0) + 24|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 | $26;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = (($0) + 8|0);
 $32 = (_sqlite3AddInt64($31,$20,$21)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 HEAP8[$27>>0] = 1;
 STACKTOP = sp;return;
}
function _sumFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($0) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($8|0)==(0);
 $11 = ($5>>>0)>(0);
 $12 = $10 & $11;
 $13 = $9 | $12;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($0) + 24|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  _sqlite3_result_error($context,9936,-1);
  STACKTOP = sp;return;
 }
 $17 = (($0) + 25|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = (($0) + 8|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  _sqlite3_result_int64($context,$24,$27);
  STACKTOP = sp;return;
 } else {
  $20 = +HEAPF64[$0>>3];
  _sqlite3_result_double($context,$20);
  STACKTOP = sp;return;
 }
}
function _totalFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0.0;
 } else {
  $2 = +HEAPF64[$0>>3];
  $3 = $2;
 }
 _sqlite3_result_double($context,$3);
 STACKTOP = sp;return;
}
function _avgFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($0) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = ($8|0)==(0);
 $11 = ($5>>>0)>(0);
 $12 = $10 & $11;
 $13 = $9 | $12;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = +HEAPF64[$0>>3];
 $15 = (+($5>>>0)) + (4294967296.0*(+($8|0)));
 $16 = $14 / $15;
 _sqlite3_result_double($context,$16);
 STACKTOP = sp;return;
}
function _countStep($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $$old = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,8)|0);
 $1 = ($argc|0)==(0);
 if ($1) {
  $$old = ($0|0)==(0|0);
  if ($$old) {
   STACKTOP = sp;return;
  }
 } else {
  $2 = HEAP32[$argv>>2]|0;
  $3 = (_sqlite3_value_type($2)|0);
  $4 = ($3|0)==(5);
  $5 = ($0|0)==(0|0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   STACKTOP = sp;return;
  }
 }
 $6 = $0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_i64Add(($8|0),($11|0),1,0)|0);
 $13 = tempRet0;
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 STACKTOP = sp;return;
}
function _countFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $8 = 0;$9 = 0;
 } else {
  $2 = $0;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = $4;$9 = $7;
 }
 _sqlite3_result_int64($context,$8,$9);
 STACKTOP = sp;return;
}
function _groupConcatStep($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nSep$01 = 0, $zSep$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_type($0)|0);
 $2 = ($1|0)==(5);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (_sqlite3_aggregate_context($context,28)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (_sqlite3_context_db_handle($context)|0);
 $6 = (($3) + 24|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 HEAP8[$6>>0] = 2;
 $9 = (($5) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + 20|0);
 HEAP32[$11>>2] = $10;
 do {
  if (!($8)) {
   $12 = ($argc|0)==(2);
   if ($12) {
    $13 = (($argv) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_sqlite3_value_text($14)|0);
    $16 = HEAP32[$13>>2]|0;
    $17 = (_sqlite3_value_bytes($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    } else {
     $nSep$01 = $17;$zSep$02 = $15;
    }
   } else {
    $nSep$01 = 1;$zSep$02 = 9928;
   }
   _sqlite3StrAccumAppend($3,$zSep$02,$nSep$01);
  }
 } while(0);
 $19 = HEAP32[$argv>>2]|0;
 $20 = (_sqlite3_value_text($19)|0);
 $21 = HEAP32[$argv>>2]|0;
 $22 = (_sqlite3_value_bytes($21)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 _sqlite3StrAccumAppend($3,$20,$22);
 STACKTOP = sp;return;
}
function _groupConcatFinalize($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_aggregate_context($context,0)|0);
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = (($0) + 25|0);
   $3 = HEAP8[$2>>0]|0;
   if ((($3<<24>>24) == 2)) {
    _sqlite3_result_error_toobig($context);
    break;
   } else if ((($3<<24>>24) == 1)) {
    _sqlite3_result_error_nomem($context);
    break;
   } else {
    $4 = (_sqlite3StrAccumFinish($0)|0);
    _sqlite3_result_text($context,$4,-1,156);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _likeFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $escape$0 = 0, $or$cond = 0, $zEsc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $zEsc = sp;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_text($1)|0);
 $3 = (($argv) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3_value_text($4)|0);
 $6 = HEAP32[$argv>>2]|0;
 $7 = (_sqlite3_value_bytes($6)|0);
 $8 = (($0) + 120|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)>($9|0);
 if ($10) {
  _sqlite3_result_error($context,9840,-1);
  STACKTOP = sp;return;
 }
 $11 = ($argc|0)==(3);
 do {
  if ($11) {
   $12 = (($argv) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_sqlite3_value_text($13)|0);
   HEAP32[$zEsc>>2] = $14;
   $15 = ($14|0)==(0|0);
   if ($15) {
    STACKTOP = sp;return;
   }
   $16 = (_sqlite3Utf8CharLen($14,-1)|0);
   $17 = ($16|0)==(1);
   if ($17) {
    $18 = (_sqlite3Utf8Read($zEsc)|0);
    $escape$0 = $18;
    break;
   }
   _sqlite3_result_error($context,9880,-1);
   STACKTOP = sp;return;
  } else {
   $escape$0 = 0;
  }
 } while(0);
 $19 = ($5|0)==(0|0);
 $20 = ($2|0)==(0|0);
 $or$cond = $19 | $20;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $21 = (_sqlite3_user_data($context)|0);
 $22 = (_patternCompare($2,$5,$21,$escape$0)|0);
 _sqlite3_result_int($context,$22);
 STACKTOP = sp;return;
}
function _sqlite3RegisterDateTimeFunctions() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3FuncDefInsert(1840,9168);
 _sqlite3FuncDefInsert(1840,((9168 + 36|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 72|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 108|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 144|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 180|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 216|0)));
 _sqlite3FuncDefInsert(1840,((9168 + 252|0)));
 STACKTOP = sp;return;
}
function _sqlite3AlterFunctions() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3FuncDefInsert(1840,8944);
 _sqlite3FuncDefInsert(1840,((8944 + 36|0)));
 _sqlite3FuncDefInsert(1840,((8944 + 72|0)));
 STACKTOP = sp;return;
}
function _renameTableFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$09 = 0;
 var $len$1 = 0, $token = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $zCsr$010 = 0, $zCsr$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $token = sp + 16|0;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3_value_text($3)|0);
 $5 = (_sqlite3_context_db_handle($context)|0);
 $6 = ($1|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP8[$1>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 } else {
  $len$09 = 0;$zCsr$010 = $1;
 }
 L6: while(1) {
  $len$1 = $len$09;$zCsr$1 = $zCsr$010;
  while(1) {
   $10 = (($zCsr$1) + ($len$1)|0);
   $12 = (_sqlite3GetToken($10,$token)|0);
   $13 = HEAP32[$token>>2]|0;
   if ((($13|0) == 22) | (($13|0) == 125)) {
    break L6;
   } else if ((($13|0) == 151)) {
    $len$1 = $12;$zCsr$1 = $10;
   } else {
    break;
   }
  }
  $9 = HEAP8[$10>>0]|0;
  $11 = ($9<<24>>24)==(0);
  if ($11) {
   label = 7;
   break;
  } else {
   $len$09 = $12;$zCsr$010 = $10;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $14 = $zCsr$010;
 $15 = $1;
 $16 = (($14) - ($15))|0;
 $17 = (($zCsr$010) + ($len$09)|0);
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $17;
 $18 = (_sqlite3MPrintf($5,9152,$vararg_buffer)|0);
 _sqlite3_result_text($context,$18,-1,145);
 STACKTOP = sp;return;
}
function _renameTriggerFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist$0$be = 0, $dist$013 = 0, $len$011 = 0, $len$1 = 0, $or$cond = 0, $token = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $zCsr$012 = 0, $zCsr$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $token = sp + 16|0;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3_value_text($3)|0);
 $5 = (_sqlite3_context_db_handle($context)|0);
 $6 = ($1|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP8[$1>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 } else {
  $dist$013 = 3;$len$011 = 0;$zCsr$012 = $1;
 }
 while(1) {
  $len$1 = $len$011;$zCsr$1 = $zCsr$012;
  while(1) {
   $9 = (($zCsr$1) + ($len$1)|0);
   $10 = (_sqlite3GetToken($9,$token)|0);
   $11 = HEAP32[$token>>2]|0;
   $12 = ($11|0)==(151);
   if ($12) {
    $len$1 = $10;$zCsr$1 = $9;
   } else {
    break;
   }
  }
  $13 = (($dist$013) + 1)|0;
  $14 = ($11|0)==(122);
  $15 = ($11|0)==(107);
  $or$cond = $14 | $15;
  $$ = $or$cond ? 0 : $13;
  $16 = ($$|0)==(2);
  if ($16) {
   if ((($11|0) == 5) | (($11|0) == 46) | (($11|0) == 137)) {
    break;
   } else {
    $dist$0$be = 2;
   }
  } else {
   $dist$0$be = $$;
  }
  $17 = HEAP8[$9>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   label = 9;
   break;
  } else {
   $dist$013 = $dist$0$be;$len$011 = $10;$zCsr$012 = $9;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $19 = $zCsr$012;
 $20 = $1;
 $21 = (($19) - ($20))|0;
 $22 = (($zCsr$012) + ($len$011)|0);
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $22;
 $23 = (_sqlite3MPrintf($5,9152,$vararg_buffer)|0);
 _sqlite3_result_text($context,$23,-1,145);
 STACKTOP = sp;return;
}
function _renameParentFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, $token = 0, $vararg_buffer = 0;
 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $z$02 = 0, $z$1 = 0, $z$2 = 0, $zInput$0$lcssa = 0, $zInput$03 = 0, $zInput$1 = 0, $zInput$2 = 0, $zOutput$0$lcssa = 0, $zOutput$04 = 0, $zOutput$1 = 0, $zOutput$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $token = sp + 24|0;
 $0 = (_sqlite3_context_db_handle($context)|0);
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_text($1)|0);
 $3 = (($argv) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3_value_text($4)|0);
 $6 = (($argv) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3_value_text($7)|0);
 $9 = HEAP8[$2>>0]|0;
 $10 = ($9<<24>>24)==(0);
 L1: do {
  if ($10) {
   $zInput$0$lcssa = $2;$zOutput$0$lcssa = 0;
  } else {
   $z$02 = $2;$zInput$03 = $2;$zOutput$04 = 0;
   while(1) {
    $11 = (_sqlite3GetToken($z$02,$token)|0);
    $12 = HEAP32[$token>>2]|0;
    $13 = ($12|0)==(105);
    if ($13) {
     $n$0 = $11;$z$1 = $z$02;
     while(1) {
      $14 = (($z$1) + ($n$0)|0);
      $15 = (_sqlite3GetToken($14,$token)|0);
      $16 = HEAP32[$token>>2]|0;
      $17 = ($16|0)==(151);
      if ($17) {
       $n$0 = $15;$z$1 = $14;
      } else {
       break;
      }
     }
     $18 = (_sqlite3DbStrNDup($0,$14,$15)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      $zInput$0$lcssa = $zInput$03;$zOutput$0$lcssa = $zOutput$04;
      break L1;
     }
     _sqlite3Dequote($18);
     $20 = (_sqlite3_stricmp($5,$18)|0);
     $21 = ($20|0)==(0);
     if ($21) {
      $22 = ($zOutput$04|0)!=(0|0);
      $23 = $22 ? $zOutput$04 : 1728;
      $24 = $14;
      $25 = $zInput$03;
      $26 = (($24) - ($25))|0;
      HEAP32[$vararg_buffer>>2] = $23;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $26;
      $vararg_ptr2 = (($vararg_buffer) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $zInput$03;
      $vararg_ptr3 = (($vararg_buffer) + 12|0);
      HEAP32[$vararg_ptr3>>2] = $8;
      $27 = (_sqlite3MPrintf($0,9128,$vararg_buffer)|0);
      _sqlite3DbFree($0,$zOutput$04);
      $$sum = (($15) + ($n$0))|0;
      $28 = (($z$1) + ($$sum)|0);
      $zInput$1 = $28;$zOutput$1 = $27;
     } else {
      $zInput$1 = $zInput$03;$zOutput$1 = $zOutput$04;
     }
     _sqlite3DbFree($0,$18);
     $n$1 = $15;$z$2 = $14;$zInput$2 = $zInput$1;$zOutput$2 = $zOutput$1;
    } else {
     $n$1 = $11;$z$2 = $z$02;$zInput$2 = $zInput$03;$zOutput$2 = $zOutput$04;
    }
    $29 = (($z$2) + ($n$1)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(0);
    if ($31) {
     $zInput$0$lcssa = $zInput$2;$zOutput$0$lcssa = $zOutput$2;
     break;
    } else {
     $z$02 = $29;$zInput$03 = $zInput$2;$zOutput$04 = $zOutput$2;
    }
   }
  }
 } while(0);
 $32 = ($zOutput$0$lcssa|0)!=(0|0);
 $33 = $32 ? $zOutput$0$lcssa : 1728;
 HEAP32[$vararg_buffer4>>2] = $33;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $zInput$0$lcssa;
 $34 = (_sqlite3MPrintf($0,9144,$vararg_buffer4)|0);
 _sqlite3_result_text($context,$34,-1,145);
 _sqlite3DbFree($0,$zOutput$0$lcssa);
 STACKTOP = sp;return;
}
function _sqlite3GetToken($z,$tokenType) {
 $z = $z|0;
 $tokenType = $tokenType|0;
 var $$0 = 0, $$pre = 0, $$pre59 = 0, $$pre66 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$3 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$10$ph = 0, $i$1019 = 0, $i$11$lcssa = 0, $i$1124 = 0;
 var $i$12 = 0, $i$1336 = 0, $i$14 = 0, $i$15 = 0, $i$16 = 0, $i$1668 = 0, $i$17 = 0, $i$18 = 0, $i$19 = 0, $i$19$ = 0, $i$2 = 0, $i$2$ = 0, $i$21 = 0, $i$4$lcssa = 0, $i$417 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$7$in = 0, $i$8 = 0;
 var $i$9 = 0, $n$035 = 0, $n$037 = 0, $n$1 = 0, $not$10 = 0, $or$cond = 0, $or$cond6 = 0, $or$cond69 = 0, $or$cond8 = 0, $phitmp = 0, $phitmp67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$z>>0]|0;
 $1 = $0&255;
 do {
  switch ($1|0) {
  case 60:  {
   $35 = (($z) + 1|0);
   $36 = HEAP8[$35>>0]|0;
   if ((($36<<24>>24) == 60)) {
    HEAP32[$tokenType>>2] = 87;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else if ((($36<<24>>24) == 62)) {
    HEAP32[$tokenType>>2] = 78;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else if ((($36<<24>>24) == 61)) {
    HEAP32[$tokenType>>2] = 81;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$tokenType>>2] = 82;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 59:  {
   HEAP32[$tokenType>>2] = 1;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 42:  {
   HEAP32[$tokenType>>2] = 91;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 40:  {
   HEAP32[$tokenType>>2] = 22;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 13: case 12: case 10: case 9: case 32:  {
   $i$0 = 1;
   while(1) {
    $2 = (($z) + ($i$0)|0);
    $3 = HEAP8[$2>>0]|0;
    $4 = $3&255;
    $5 = (48 + ($4)|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6 & 1;
    $8 = ($7<<24>>24)==(0);
    $9 = (($i$0) + 1)|0;
    if ($8) {
     break;
    } else {
     $i$0 = $9;
    }
   }
   HEAP32[$tokenType>>2] = 151;
   $$0 = $i$0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 91:  {
   $i$1124 = 1;
   while(1) {
    $108 = (($z) + ($i$1124)|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = ($109<<24>>24)==(0);
    if ($111) {
     $c$3 = $110;$i$11$lcssa = $i$1124;
     break;
    }
    $112 = (($i$1124) + 1)|0;
    $phitmp = ($109<<24>>24)==(93);
    if ($phitmp) {
     $c$3 = 93;$i$11$lcssa = $112;
     break;
    } else {
     $i$1124 = $112;
    }
   }
   $113 = ($c$3|0)==(93);
   $114 = $113 ? 27 : 150;
   HEAP32[$tokenType>>2] = $114;
   $$0 = $i$11$lcssa;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 63:  {
   HEAP32[$tokenType>>2] = 135;
   $i$12 = 1;
   while(1) {
    $115 = (($z) + ($i$12)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = (($117) + -48)|0;
    $119 = ($118>>>0)<(10);
    $120 = (($i$12) + 1)|0;
    if ($119) {
     $i$12 = $120;
    } else {
     $$0 = $i$12;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
   break;
  }
  case 124:  {
   $42 = (($z) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(124);
   if ($44) {
    HEAP32[$tokenType>>2] = 94;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$tokenType>>2] = 86;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 88: case 120:  {
   $153 = (($z) + 1|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = ($154<<24>>24)==(39);
   if ($155) {
    HEAP32[$tokenType>>2] = 134;
    $i$17 = 2;
    while(1) {
     $156 = (($z) + ($i$17)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $159 = (48 + ($158)|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160 & 8;
     $162 = ($161<<24>>24)==(0);
     $163 = (($i$17) + 1)|0;
     if ($162) {
      break;
     } else {
      $i$17 = $163;
     }
    }
    $164 = ($157<<24>>24)==(39);
    $165 = $i$17 & 1;
    $166 = ($165|0)==(0);
    $or$cond8 = $164 & $166;
    if ($or$cond8) {
     $171 = 1;$i$19 = $i$17;
    } else {
     HEAP32[$tokenType>>2] = 150;
     $i$18 = $i$17;
     while(1) {
      $167 = (($z) + ($i$18)|0);
      $168 = HEAP8[$167>>0]|0;
      if ((($168<<24>>24) == 39) | (($168<<24>>24) == 0)) {
       break;
      }
      $169 = (($i$18) + 1)|0;
      $i$18 = $169;
     }
     $phitmp67 = ($168<<24>>24)!=(0);
     $171 = $phitmp67;$i$19 = $i$18;
    }
    $170 = $171&1;
    $i$19$ = (($170) + ($i$19))|0;
    $$0 = $i$19$;
    STACKTOP = sp;return ($$0|0);
   } else {
    label = 93;
   }
   break;
  }
  case 126:  {
   HEAP32[$tokenType>>2] = 96;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 33:  {
   $39 = (($z) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(61);
   if ($41) {
    HEAP32[$tokenType>>2] = 78;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$tokenType>>2] = 150;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 47:  {
   $16 = (($z) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(42);
   if ($18) {
    $19 = (($z) + 2|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if (!($21)) {
     $22 = $20&255;
     $c$0 = $22;$i$2 = 3;
     while(1) {
      $23 = ($c$0|0)==(42);
      $24 = (($z) + ($i$2)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(47);
      $or$cond69 = $23 & $26;
      if ($or$cond69) {
       $c$1 = 42;
       break;
      }
      $27 = $25&255;
      $28 = ($25<<24>>24)==(0);
      $29 = (($i$2) + 1)|0;
      if ($28) {
       $c$1 = $27;
       break;
      } else {
       $c$0 = $27;$i$2 = $29;
      }
     }
     $not$10 = ($c$1|0)!=(0);
     $30 = $not$10&1;
     $i$2$ = (($30) + ($i$2))|0;
     HEAP32[$tokenType>>2] = 151;
     $$0 = $i$2$;
     STACKTOP = sp;return ($$0|0);
    }
   }
   HEAP32[$tokenType>>2] = 92;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 34: case 39: case 96:  {
   $45 = (($z) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(0);
   L70: do {
    if ($47) {
     $i$4$lcssa = 1;
    } else {
     $49 = $46;$i$417 = 1;
     while(1) {
      $48 = ($49<<24>>24)==($0<<24>>24);
      if ($48) {
       $50 = (($i$417) + 1)|0;
       $51 = (($z) + ($50)|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = ($52<<24>>24)==($0<<24>>24);
       if ($53) {
        $i$5 = $50;
       } else {
        break;
       }
      } else {
       $i$5 = $i$417;
      }
      $54 = (($i$5) + 1)|0;
      $55 = (($z) + ($54)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $i$4$lcssa = $54;
       break L70;
      } else {
       $49 = $56;$i$417 = $54;
      }
     }
     $58 = ($0<<24>>24)==(39);
     if ($58) {
      HEAP32[$tokenType>>2] = 97;
      $$0 = $50;
      STACKTOP = sp;return ($$0|0);
     } else {
      HEAP32[$tokenType>>2] = 27;
      $$0 = $50;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   HEAP32[$tokenType>>2] = 150;
   $$0 = $i$4$lcssa;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 43:  {
   HEAP32[$tokenType>>2] = 89;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 44:  {
   HEAP32[$tokenType>>2] = 26;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 61:  {
   HEAP32[$tokenType>>2] = 79;
   $31 = (($z) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(61);
   $34 = $33 ? 2 : 1;
   $$0 = $34;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45:  {
   $10 = (($z) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(45);
   if ($12) {
    $i$1 = 2;
   } else {
    HEAP32[$tokenType>>2] = 90;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $13 = (($z) + ($i$1)|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 10) | (($14<<24>>24) == 0)) {
     break;
    }
    $15 = (($i$1) + 1)|0;
    $i$1 = $15;
   }
   HEAP32[$tokenType>>2] = 151;
   $$0 = $i$1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 58: case 35: case 64: case 36:  {
   HEAP32[$tokenType>>2] = 135;
   $121 = (($z) + 1|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122<<24>>24)==(0);
   if ($123) {
    $i$1668 = 1;
   } else {
    $125 = $122;$i$1336 = 1;$n$037 = 0;
    while(1) {
     $124 = $125&255;
     $126 = (48 + ($124)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127 & 70;
     $129 = ($128<<24>>24)==(0);
     if ($129) {
      $131 = ($125<<24>>24)==(40);
      $132 = ($n$037|0)>(0);
      $or$cond = $131 & $132;
      if ($or$cond) {
       $i$14 = $i$1336;
       label = 74;
       break;
      }
      $143 = ($125<<24>>24)==(58);
      if (!($143)) {
       $i$16 = $i$1336;$n$035 = $n$037;
       break;
      }
      $144 = (($i$1336) + 1)|0;
      $145 = (($z) + ($144)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = ($146<<24>>24)==(58);
      if ($147) {
       $i$15 = $144;$n$1 = $n$037;
      } else {
       $i$16 = $i$1336;$n$035 = $n$037;
       break;
      }
     } else {
      $130 = (($n$037) + 1)|0;
      $i$15 = $i$1336;$n$1 = $130;
     }
     $148 = (($i$15) + 1)|0;
     $149 = (($z) + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = ($150<<24>>24)==(0);
     if ($151) {
      $i$16 = $148;$n$035 = $n$1;
      break;
     } else {
      $125 = $150;$i$1336 = $148;$n$037 = $n$1;
     }
    }
    do {
     if ((label|0) == 74) {
      while(1) {
       label = 0;
       $133 = (($i$14) + 1)|0;
       $134 = (($z) + ($133)|0);
       $135 = HEAP8[$134>>0]|0;
       $cond = ($135<<24>>24)==(0);
       if ($cond) {
        break;
       }
       $136 = $135&255;
       $137 = (48 + ($136)|0);
       $138 = HEAP8[$137>>0]|0;
       $139 = $138 & 1;
       $140 = ($139<<24>>24)!=(0);
       $141 = ($135<<24>>24)==(41);
       $or$cond6 = $140 | $141;
       if ($or$cond6) {
        label = 76;
        break;
       } else {
        $i$14 = $133;
        label = 74;
       }
      }
      if ((label|0) == 76) {
       if ($141) {
        $142 = (($i$14) + 2)|0;
        $i$16 = $142;$n$035 = $n$037;
        break;
       }
      }
      HEAP32[$tokenType>>2] = 150;
      $i$16 = $133;$n$035 = $n$037;
     }
    } while(0);
    $152 = ($n$035|0)==(0);
    if ($152) {
     $i$1668 = $i$16;
    } else {
     $$0 = $i$16;
     STACKTOP = sp;return ($$0|0);
    }
   }
   HEAP32[$tokenType>>2] = 150;
   $$0 = $i$1668;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 62:  {
   $37 = (($z) + 1|0);
   $38 = HEAP8[$37>>0]|0;
   if ((($38<<24>>24) == 61)) {
    HEAP32[$tokenType>>2] = 83;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else if ((($38<<24>>24) == 62)) {
    HEAP32[$tokenType>>2] = 88;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$tokenType>>2] = 80;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 46:  {
   $59 = (($z) + 1|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = (($61) + -48)|0;
   $63 = ($62>>>0)<(10);
   if (!($63)) {
    HEAP32[$tokenType>>2] = 122;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 37:  {
   HEAP32[$tokenType>>2] = 93;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 41:  {
   HEAP32[$tokenType>>2] = 23;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 38:  {
   HEAP32[$tokenType>>2] = 85;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   label = 93;
  }
  }
 } while(0);
 if ((label|0) == 93) {
  $172 = (48 + ($1)|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173 & 70;
  $175 = ($174<<24>>24)==(0);
  if ($175) {
   HEAP32[$tokenType>>2] = 150;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$21 = 1;
  }
  while(1) {
   $176 = (($z) + ($i$21)|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = (48 + ($178)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180 & 70;
   $182 = ($181<<24>>24)==(0);
   if ($182) {
    break;
   }
   $183 = (($i$21) + 1)|0;
   $i$21 = $183;
  }
  $184 = (_keywordCode($z,$i$21)|0);
  HEAP32[$tokenType>>2] = $184;
  $$0 = $i$21;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$tokenType>>2] = 132;
 $i$6 = 0;
 while(1) {
  $64 = (($z) + ($i$6)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = (($66) + -48)|0;
  $68 = ($67>>>0)<(10);
  $69 = (($i$6) + 1)|0;
  if ($68) {
   $i$6 = $69;
  } else {
   break;
  }
 }
 $70 = ($65<<24>>24)==(46);
 if ($70) {
  $i$7$in = $i$6;
  while(1) {
   $i$7 = (($i$7$in) + 1)|0;
   $71 = (($z) + ($i$7)|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = (($73) + -48)|0;
   $75 = ($74>>>0)<(10);
   if ($75) {
    $i$7$in = $i$7;
   } else {
    break;
   }
  }
  HEAP32[$tokenType>>2] = 133;
  $$pre = HEAP8[$71>>0]|0;
  $185 = $$pre;$i$8 = $i$7;
 } else {
  $185 = $65;$i$8 = $i$6;
 }
 do {
  if ((($185<<24>>24) == 69) | (($185<<24>>24) == 101)) {
   $76 = (($i$8) + 1)|0;
   $77 = (($z) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($79) + -48)|0;
   $81 = ($80>>>0)<(10);
   if ($81) {
    $$pre66 = (($i$8) + 2)|0;
    $i$9 = $$pre66;
   } else {
    if (!((($78<<24>>24) == 45) | (($78<<24>>24) == 43))) {
     $95 = $185;$i$10$ph = $i$8;
     break;
    }
    $82 = (($i$8) + 2)|0;
    $83 = (($z) + ($82)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($85) + -48)|0;
    $87 = ($86>>>0)<(10);
    if ($87) {
     $i$9 = $82;
    } else {
     $95 = $185;$i$10$ph = $i$8;
     break;
    }
   }
   while(1) {
    $88 = (($z) + ($i$9)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = (($90) + -48)|0;
    $92 = ($91>>>0)<(10);
    $93 = (($i$9) + 1)|0;
    if ($92) {
     $i$9 = $93;
    } else {
     break;
    }
   }
   HEAP32[$tokenType>>2] = 133;
   $$pre59 = HEAP8[$88>>0]|0;
   $95 = $$pre59;$i$10$ph = $i$9;
  } else {
   $95 = $185;$i$10$ph = $i$8;
  }
 } while(0);
 $94 = $95&255;
 $96 = (48 + ($94)|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97 & 70;
 $99 = ($98<<24>>24)==(0);
 if ($99) {
  $$0 = $i$10$ph;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$1019 = $i$10$ph;
 }
 while(1) {
  HEAP32[$tokenType>>2] = 150;
  $100 = (($i$1019) + 1)|0;
  $101 = (($z) + ($100)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = (48 + ($103)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105 & 70;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $$0 = $100;
   break;
  } else {
   $i$1019 = $100;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3DbStrNDup($db,$z,$n) {
 $db = $db|0;
 $z = $z|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($n) + 1)|0;
  $2 = (_sqlite3DbMallocRaw($db,$1)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   _memcpy(($2|0),($z|0),($n|0))|0;
   $4 = (($2) + ($n)|0);
   HEAP8[$4>>0] = 0;
   $$0 = $2;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3Dequote($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $quote$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$z>>0]|0;
 $2 = $1 << 24 >> 24;
 if ((($2|0) == 96) | (($2|0) == 34) | (($2|0) == 39)) {
  $quote$0 = $1;
 } else if ((($2|0) == 91)) {
  $quote$0 = 93;
 } else {
  STACKTOP = sp;return;
 }
 $i$0 = 1;$j$0 = 0;
 while(1) {
  $3 = (($z) + ($i$0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($quote$0<<24>>24);
  if ($5) {
   $6 = (($i$0) + 1)|0;
   $7 = (($z) + ($6)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==($quote$0<<24>>24);
   $10 = (($z) + ($j$0)|0);
   if (!($9)) {
    break;
   }
   HEAP8[$10>>0] = $quote$0;
   $i$1 = $6;
  } else {
   $11 = (($z) + ($j$0)|0);
   HEAP8[$11>>0] = $4;
   $i$1 = $i$0;
  }
  $j$1 = (($j$0) + 1)|0;
  $12 = (($i$1) + 1)|0;
  $i$0 = $12;$j$0 = $j$1;
 }
 HEAP8[$10>>0] = 0;
 STACKTOP = sp;return;
}
function _juliandayFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $x = sp;
 $0 = (_isDate($context,$argc,$argv,$x)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _computeJD($x);
 $2 = $x;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($4>>>0)) + (4294967296.0*(+($7|0)));
 $9 = $8 / 8.64E+7;
 _sqlite3_result_double($context,$9);
 STACKTOP = sp;return;
}
function _dateFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x = 0, $zBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer = sp + 48|0;
 $x = sp;
 $zBuf = sp + 60|0;
 $0 = (_isDate($context,$argc,$argv,$x)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _computeYMD($x);
 $2 = (($x) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($x) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($x) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 (_sqlite3_snprintf(100,$zBuf,9824,$vararg_buffer)|0);
 _sqlite3_result_text($context,$zBuf,-1,(-1));
 STACKTOP = sp;return;
}
function _timeFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x = 0, $zBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer = sp + 48|0;
 $x = sp;
 $zBuf = sp + 60|0;
 $0 = (_isDate($context,$argc,$argv,$x)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _computeHMS($x);
 $2 = (($x) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($x) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($x) + 32|0);
 $7 = +HEAPF64[$6>>3];
 $8 = (~~(($7)));
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 (_sqlite3_snprintf(100,$zBuf,9808,$vararg_buffer)|0);
 _sqlite3_result_text($context,$zBuf,-1,(-1));
 STACKTOP = sp;return;
}
function _datetimeFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $x = 0, $zBuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer = sp + 48|0;
 $x = sp;
 $zBuf = sp + 72|0;
 $0 = (_isDate($context,$argc,$argv,$x)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _computeYMD_HMS($x);
 $2 = (($x) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($x) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($x) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($x) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($x) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($x) + 32|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (~~(($13)));
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $9;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $11;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $14;
 (_sqlite3_snprintf(100,$zBuf,9776,$vararg_buffer)|0);
 _sqlite3_result_text($context,$zBuf,-1,(-1));
 STACKTOP = sp;return;
}
function _strftimeFunc($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $j$0 = 0, $j$2 = 0, $s$0 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $x = 0, $y = 0, $z$0 = 0, $zBuf = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer28 = sp + 176|0;
 $vararg_buffer25 = sp + 168|0;
 $vararg_buffer22 = sp + 160|0;
 $vararg_buffer19 = sp + 152|0;
 $vararg_buffer16 = sp + 144|0;
 $vararg_buffer13 = sp + 136|0;
 $vararg_buffer10 = sp + 128|0;
 $vararg_buffer7 = sp + 120|0;
 $vararg_buffer4 = sp + 112|0;
 $vararg_buffer1 = sp + 104|0;
 $vararg_buffer = sp + 96|0;
 $x = sp + 48|0;
 $zBuf = sp + 180|0;
 $y = sp;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($argc) + -1)|0;
 $4 = (($argv) + 4|0);
 $5 = (_isDate($context,$3,$4,$x)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (_sqlite3_context_db_handle($context)|0);
 $14 = 1;$15 = 0;$i$0 = 0;
 L7: while(1) {
  $8 = (($1) + ($i$0)|0);
  $9 = HEAP8[$8>>0]|0;
  L9: do {
   if ((($9<<24>>24) == 0)) {
    break L7;
   } else if ((($9<<24>>24) == 37)) {
    $10 = (($i$0) + 1)|0;
    $11 = (($1) + ($10)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    switch ($13|0) {
    case 74: case 115:  {
     $24 = (_i64Add(($14|0),($15|0),50,0)|0);
     $25 = tempRet0;
     $27 = $24;$28 = $25;$i$1 = $10;
     break L9;
     break;
    }
    case 106:  {
     $20 = (_i64Add(($14|0),($15|0),3,0)|0);
     $21 = tempRet0;
     $27 = $20;$28 = $21;$i$1 = $10;
     break L9;
     break;
    }
    case 102:  {
     $18 = (_i64Add(($14|0),($15|0),8,0)|0);
     $19 = tempRet0;
     $27 = $18;$28 = $19;$i$1 = $10;
     break L9;
     break;
    }
    case 37: case 119:  {
     $27 = $14;$28 = $15;$i$1 = $10;
     break L9;
     break;
    }
    case 87: case 83: case 77: case 109: case 72: case 100:  {
     $16 = (_i64Add(($14|0),($15|0),1,0)|0);
     $17 = tempRet0;
     $27 = $16;$28 = $17;$i$1 = $10;
     break L9;
     break;
    }
    case 89:  {
     $22 = (_i64Add(($14|0),($15|0),8,0)|0);
     $23 = tempRet0;
     $27 = $22;$28 = $23;$i$1 = $10;
     break L9;
     break;
    }
    default: {
     label = 37;
     break L7;
    }
    }
   } else {
    $27 = $14;$28 = $15;$i$1 = $i$0;
   }
  } while(0);
  $26 = (($i$1) + 1)|0;
  $29 = (_i64Add(($27|0),($28|0),1,0)|0);
  $30 = tempRet0;
  $14 = $29;$15 = $30;$i$0 = $26;
 }
 if ((label|0) == 37) {
  STACKTOP = sp;return;
 }
 $31 = ($15>>>0)<(0);
 $32 = ($15|0)==(0);
 $33 = ($14>>>0)<(100);
 $34 = $32 & $33;
 $35 = $31 | $34;
 if ($35) {
  $z$0 = $zBuf;
 } else {
  $36 = (($7) + 88|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = ($15>>>0)>($39>>>0);
  $41 = ($15|0)==($39|0);
  $42 = ($14>>>0)>($37>>>0);
  $43 = $41 & $42;
  $44 = $40 | $43;
  if ($44) {
   _sqlite3_result_error_toobig($context);
   STACKTOP = sp;return;
  }
  $45 = (_sqlite3DbMallocRaw($7,$14)|0);
  $46 = ($45|0)==(0|0);
  if ($46) {
   _sqlite3_result_error_nomem($context);
   STACKTOP = sp;return;
  } else {
   $z$0 = $45;
  }
 }
 _computeJD($x);
 _computeYMD_HMS($x);
 $47 = (($x) + 16|0);
 $48 = (($x) + 32|0);
 $49 = (($x) + 20|0);
 $50 = (($y) + 42|0);
 $51 = (($y) + 12|0);
 $52 = (($y) + 16|0);
 $53 = (($x) + 12|0);
 $54 = (($x) + 24|0);
 $55 = (($x) + 8|0);
 $i$2 = 0;$j$0 = 0;
 L30: while(1) {
  $56 = (($1) + ($i$2)|0);
  $57 = HEAP8[$56>>0]|0;
  L32: do {
   if ((($57<<24>>24) == 0)) {
    break L30;
   } else if ((($57<<24>>24) == 37)) {
    $60 = (($i$2) + 1)|0;
    $61 = (($1) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    do {
     switch ($63|0) {
     case 119:  {
      $145 = $x;
      $146 = $145;
      $147 = HEAP32[$146>>2]|0;
      $148 = (($145) + 4)|0;
      $149 = $148;
      $150 = HEAP32[$149>>2]|0;
      $151 = (_i64Add(($147|0),($150|0),129600000,0)|0);
      $152 = tempRet0;
      $153 = (___divdi3(($151|0),($152|0),86400000,0)|0);
      $154 = tempRet0;
      $155 = (___remdi3(($153|0),($154|0),7,0)|0);
      $156 = tempRet0;
      $157 = (($155) + 48)|0;
      $158 = $157&255;
      $159 = (($j$0) + 1)|0;
      $160 = (($z$0) + ($j$0)|0);
      HEAP8[$160>>0] = $158;
      $i$3 = $60;$j$2 = $159;
      break L32;
      break;
     }
     case 89:  {
      $161 = (($z$0) + ($j$0)|0);
      $162 = HEAP32[$55>>2]|0;
      HEAP32[$vararg_buffer28>>2] = $162;
      (_sqlite3_snprintf(5,$161,9616,$vararg_buffer28)|0);
      $163 = (_sqlite3Strlen30($161)|0);
      $164 = (($163) + ($j$0))|0;
      $i$3 = $60;$j$2 = $164;
      break L32;
      break;
     }
     case 106: case 87:  {
      dest=$y+0|0; src=$x+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      HEAP8[$50>>0] = 0;
      HEAP32[$51>>2] = 1;
      HEAP32[$52>>2] = 1;
      _computeJD($y);
      $75 = $x;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = $y;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = (_i64Add(($77|0),($80|0),43200000,0)|0);
      $88 = tempRet0;
      $89 = (_i64Subtract(($87|0),($88|0),($83|0),($86|0))|0);
      $90 = tempRet0;
      $91 = (___divdi3(($89|0),($90|0),86400000,0)|0);
      $92 = tempRet0;
      $93 = HEAP8[$61>>0]|0;
      $94 = ($93<<24>>24)==(87);
      if ($94) {
       $95 = (___divdi3(($87|0),($88|0),86400000,0)|0);
       $96 = tempRet0;
       $97 = (___remdi3(($95|0),($96|0),7,0)|0);
       $98 = tempRet0;
       $99 = (($z$0) + ($j$0)|0);
       $100 = (($91) + 7)|0;
       $101 = (($100) - ($97))|0;
       $102 = (($101|0) / 7)&-1;
       HEAP32[$vararg_buffer7>>2] = $102;
       (_sqlite3_snprintf(3,$99,9576,$vararg_buffer7)|0);
       $103 = (($j$0) + 2)|0;
       $i$3 = $60;$j$2 = $103;
       break L32;
      } else {
       $104 = (($z$0) + ($j$0)|0);
       $105 = (($91) + 1)|0;
       HEAP32[$vararg_buffer10>>2] = $105;
       (_sqlite3_snprintf(4,$104,9592,$vararg_buffer10)|0);
       $106 = (($j$0) + 3)|0;
       $i$3 = $60;$j$2 = $106;
       break L32;
      }
      break;
     }
     case 83:  {
      $141 = (($z$0) + ($j$0)|0);
      $142 = +HEAPF64[$48>>3];
      $143 = (~~(($142)));
      HEAP32[$vararg_buffer25>>2] = $143;
      (_sqlite3_snprintf(3,$141,9576,$vararg_buffer25)|0);
      $144 = (($j$0) + 2)|0;
      $i$3 = $60;$j$2 = $144;
      break L32;
      break;
     }
     case 115:  {
      $124 = (($z$0) + ($j$0)|0);
      $125 = $x;
      $126 = $125;
      $127 = HEAP32[$126>>2]|0;
      $128 = (($125) + 4)|0;
      $129 = $128;
      $130 = HEAP32[$129>>2]|0;
      $131 = (___divdi3(($127|0),($130|0),1000,0)|0);
      $132 = tempRet0;
      $133 = (_i64Add(($131|0),($132|0),-413362496,-50)|0);
      $134 = tempRet0;
      $135 = $vararg_buffer22;
      $136 = $135;
      HEAP32[$136>>2] = $133;
      $137 = (($135) + 4)|0;
      $138 = $137;
      HEAP32[$138>>2] = $134;
      (_sqlite3_snprintf(30,$124,9608,$vararg_buffer22)|0);
      $139 = (_sqlite3Strlen30($124)|0);
      $140 = (($139) + ($j$0))|0;
      $i$3 = $60;$j$2 = $140;
      break L32;
      break;
     }
     case 109:  {
      $118 = (($z$0) + ($j$0)|0);
      $119 = HEAP32[$53>>2]|0;
      HEAP32[$vararg_buffer16>>2] = $119;
      (_sqlite3_snprintf(3,$118,9576,$vararg_buffer16)|0);
      $120 = (($j$0) + 2)|0;
      $i$3 = $60;$j$2 = $120;
      break L32;
      break;
     }
     case 102:  {
      $67 = +HEAPF64[$48>>3];
      $68 = $67 > 59.9990000000000023306;
      $s$0 = $68 ? 59.9990000000000023306 : $67;
      $69 = (($z$0) + ($j$0)|0);
      HEAPF64[tempDoublePtr>>3]=$s$0;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_sqlite3_snprintf(7,$69,9584,$vararg_buffer1)|0);
      $70 = (_sqlite3Strlen30($69)|0);
      $71 = (($70) + ($j$0))|0;
      $i$3 = $60;$j$2 = $71;
      break L32;
      break;
     }
     case 74:  {
      $107 = (($z$0) + ($j$0)|0);
      $108 = $x;
      $109 = $108;
      $110 = HEAP32[$109>>2]|0;
      $111 = (($108) + 4)|0;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (+($110>>>0)) + (4294967296.0*(+($113|0)));
      $115 = $114 / 8.64E+7;
      HEAPF64[tempDoublePtr>>3]=$115;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
      (_sqlite3_snprintf(20,$107,9600,$vararg_buffer13)|0);
      $116 = (_sqlite3Strlen30($107)|0);
      $117 = (($116) + ($j$0))|0;
      $i$3 = $60;$j$2 = $117;
      break L32;
      break;
     }
     case 100:  {
      $64 = (($z$0) + ($j$0)|0);
      $65 = HEAP32[$47>>2]|0;
      HEAP32[$vararg_buffer>>2] = $65;
      (_sqlite3_snprintf(3,$64,9576,$vararg_buffer)|0);
      $66 = (($j$0) + 2)|0;
      $i$3 = $60;$j$2 = $66;
      break L32;
      break;
     }
     case 77:  {
      $121 = (($z$0) + ($j$0)|0);
      $122 = HEAP32[$54>>2]|0;
      HEAP32[$vararg_buffer19>>2] = $122;
      (_sqlite3_snprintf(3,$121,9576,$vararg_buffer19)|0);
      $123 = (($j$0) + 2)|0;
      $i$3 = $60;$j$2 = $123;
      break L32;
      break;
     }
     case 72:  {
      $72 = (($z$0) + ($j$0)|0);
      $73 = HEAP32[$49>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $73;
      (_sqlite3_snprintf(3,$72,9576,$vararg_buffer4)|0);
      $74 = (($j$0) + 2)|0;
      $i$3 = $60;$j$2 = $74;
      break L32;
      break;
     }
     default: {
      $165 = (($j$0) + 1)|0;
      $166 = (($z$0) + ($j$0)|0);
      HEAP8[$166>>0] = 37;
      $i$3 = $60;$j$2 = $165;
      break L32;
     }
     }
    } while(0);
   } else {
    $58 = (($j$0) + 1)|0;
    $59 = (($z$0) + ($j$0)|0);
    HEAP8[$59>>0] = $57;
    $i$3 = $i$2;$j$2 = $58;
   }
  } while(0);
  $167 = (($i$3) + 1)|0;
  $i$2 = $167;$j$0 = $j$2;
 }
 $168 = (($z$0) + ($j$0)|0);
 HEAP8[$168>>0] = 0;
 $169 = ($z$0|0)==($zBuf|0);
 $170 = $169 ? (-1) : 145;
 _sqlite3_result_text($context,$z$0,-1,$170);
 STACKTOP = sp;return;
}
function _ctimeFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _timeFunc($context,0,0);
 STACKTOP = sp;return;
}
function _ctimestampFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _datetimeFunc($context,0,0);
 STACKTOP = sp;return;
}
function _cdateFunc($context,$NotUsed,$NotUsed2) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _dateFunc($context,0,0);
 STACKTOP = sp;return;
}
function _isDate($context,$argc,$argv,$p) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $p = $p|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $switch = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$p+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($argc|0)==(0);
 if ($0) {
  $1 = (_setDateTimeToCurrent($context,$p)|0);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$argv>>2]|0;
 $3 = (_sqlite3_value_type($2)|0);
 $$off = (($3) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $4 = (+_sqlite3_value_double($2));
  $5 = $4 * 8.64E+7;
  $6 = $5 + 0.5;
  $7 = (~~$6)>>>0;
  $8 = +Math_abs($6) >= 1.0 ? $6 > 0.0 ? (Math_min(+Math_floor($6 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($6 - +(~~$6 >>> 0)) / 4294967296.0) >>> 0 : 0;
  $9 = $p;
  $10 = $9;
  HEAP32[$10>>2] = $7;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $13 = (($p) + 42|0);
  HEAP8[$13>>0] = 1;
 } else {
  $14 = (_sqlite3_value_text($2)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = (_parseDateOrTime($context,$14,$p)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = ($argc|0)>(1);
 if ($18) {
  $i$01 = 1;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $21 = (($argv) + ($i$01<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_sqlite3_value_text($22)|0);
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$0 = 1;
   label = 11;
   break;
  }
  $25 = (_parseModifier($context,$23,$p)|0);
  $26 = ($25|0)==(0);
  $20 = (($i$01) + 1)|0;
  if (!($26)) {
   $$0 = 1;
   label = 11;
   break;
  }
  $19 = ($20|0)<($argc|0);
  if ($19) {
   $i$01 = $20;
  } else {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _computeJD($p) {
 $p = $p|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $D$01 = 0, $D$02 = 0, $M$03 = 0, $M$1 = 0;
 var $Y$04 = 0, $Y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 42|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 40|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $D$02 = 1;$M$03 = 1;$Y$04 = 2000;
  label = 4;
 } else {
  $6 = (($p) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($p) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($p) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<(3);
  if ($12) {
   $D$02 = $11;$M$03 = $9;$Y$04 = $7;
   label = 4;
  } else {
   $D$01 = $11;$M$1 = $9;$Y$1 = $7;
  }
 }
 if ((label|0) == 4) {
  $13 = (($Y$04) + -1)|0;
  $14 = (($M$03) + 12)|0;
  $D$01 = $D$02;$M$1 = $14;$Y$1 = $13;
 }
 $$neg = (($Y$1|0) / -100)&-1;
 $15 = (($Y$1|0) / 400)&-1;
 $16 = ($Y$1*36525)|0;
 $17 = (($16) + 172251900)|0;
 $18 = (($17|0) / 100)&-1;
 $19 = ($M$1*306001)|0;
 $20 = (($19) + 306001)|0;
 $21 = (($20|0) / 10000)&-1;
 $22 = (($D$01) + 2)|0;
 $23 = (($22) + ($$neg))|0;
 $24 = (($23) + ($15))|0;
 $25 = (($24) + ($18))|0;
 $26 = (($25) + ($21))|0;
 $27 = (+($26|0));
 $28 = $27 + -1524.5;
 $29 = $28 * 8.64E+7;
 $30 = (~~$29)>>>0;
 $31 = +Math_abs($29) >= 1.0 ? $29 > 0.0 ? (Math_min(+Math_floor($29 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($29 - +(~~$29 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $32 = $p;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 HEAP8[$0>>0] = 1;
 $36 = (($p) + 41|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = (($p) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($40, 3600000)|0;
 $42 = (($p) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43*60000)|0;
 $45 = (($44) + ($41))|0;
 $46 = ($45|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($p) + 32|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $49 * 1000.0;
 $51 = (~~$50)>>>0;
 $52 = +Math_abs($50) >= 1.0 ? $50 > 0.0 ? (Math_min(+Math_floor($50 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($50 - +(~~$50 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $53 = (_i64Add(($51|0),($52|0),($30|0),($31|0))|0);
 $54 = tempRet0;
 $55 = (_i64Add(($53|0),($54|0),($45|0),($47|0))|0);
 $56 = tempRet0;
 $57 = $p;
 $58 = $57;
 HEAP32[$58>>2] = $55;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = $56;
 $61 = (($p) + 43|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = (($p) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65*60000)|0;
 $67 = ($66|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = (_i64Subtract(($55|0),($56|0),($66|0),($68|0))|0);
 $70 = tempRet0;
 $71 = $p;
 $72 = $71;
 HEAP32[$72>>2] = $69;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = $70;
 HEAP8[$3>>0] = 0;
 HEAP8[$36>>0] = 0;
 HEAP8[$61>>0] = 0;
 STACKTOP = sp;return;
}
function _computeYMD_HMS($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _computeYMD($p);
 _computeHMS($p);
 STACKTOP = sp;return;
}
function _computeYMD($p) {
 $p = $p|0;
 var $$neg = 0, $$v = 0, $$v1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 42|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (($p) + 8|0);
  HEAP32[$6>>2] = 2000;
  $7 = (($p) + 12|0);
  HEAP32[$7>>2] = 1;
  $8 = (($p) + 16|0);
  HEAP32[$8>>2] = 1;
 } else {
  $9 = $p;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_i64Add(($11|0),($14|0),43200000,0)|0);
  $16 = tempRet0;
  $17 = (___divdi3(($15|0),($16|0),86400000,0)|0);
  $18 = tempRet0;
  $19 = (+($17|0));
  $20 = $19 + -1867216.25;
  $21 = $20 / 36524.25;
  $22 = (~~(($21)));
  $$neg = (($22|0) / -4)&-1;
  $23 = (($17) + 1525)|0;
  $24 = (($23) + ($22))|0;
  $25 = (($24) + ($$neg))|0;
  $26 = (+($25|0));
  $27 = $26 + -122.099999999999994316;
  $28 = $27 / 365.25;
  $29 = (~~(($28)));
  $30 = ($29*36525)|0;
  $31 = (($30|0) / 100)&-1;
  $32 = (($25) - ($31))|0;
  $33 = (+($32|0));
  $34 = $33 / 30.600100000000001188;
  $35 = (~~(($34)));
  $36 = (+($35|0));
  $37 = $36 * 30.600100000000001188;
  $38 = (~~(($37)));
  $39 = (($32) - ($38))|0;
  $40 = (($p) + 16|0);
  HEAP32[$40>>2] = $39;
  $41 = ($35|0)<(14);
  $$v = $41 ? -1 : -13;
  $42 = (($$v) + ($35))|0;
  $43 = (($p) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = ($42|0)>(2);
  $$v1 = $44 ? -4716 : -4715;
  $45 = (($$v1) + ($29))|0;
  $46 = (($p) + 8|0);
  HEAP32[$46>>2] = $45;
 }
 HEAP8[$0>>0] = 1;
 STACKTOP = sp;return;
}
function _computeHMS($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 41|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _computeJD($p);
 $3 = $p;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_i64Add(($5|0),($8|0),43200000,0)|0);
 $10 = tempRet0;
 $11 = (___remdi3(($9|0),($10|0),86400000,0)|0);
 $12 = tempRet0;
 $13 = (+($11|0));
 $14 = $13 / 1000.0;
 $15 = (($p) + 32|0);
 $16 = (~~(($14)));
 $17 = (+($16|0));
 $18 = $14 - $17;
 $19 = (($16|0) / 3600)&-1;
 $20 = (($p) + 20|0);
 HEAP32[$20>>2] = $19;
 $21 = Math_imul($19, -3600)|0;
 $22 = (($21) + ($16))|0;
 $23 = (($22|0) / 60)&-1;
 $24 = (($p) + 24|0);
 HEAP32[$24>>2] = $23;
 $25 = Math_imul($23, -60)|0;
 $26 = (($22) + ($25))|0;
 $27 = (+($26|0));
 $28 = $18 + $27;
 HEAPF64[$15>>3] = $28;
 HEAP8[$0>>0] = 1;
 STACKTOP = sp;return;
}
function _setDateTimeToCurrent($context,$p) {
 $context = $context|0;
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3StmtCurrentTime($context)|0);
 $1 = tempRet0;
 $2 = $p;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = ($1|0)>(0);
 $7 = ($1|0)==(0);
 $8 = ($0>>>0)>(0);
 $9 = $7 & $8;
 $10 = $6 | $9;
 if (!($10)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($p) + 42|0);
 HEAP8[$11>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _parseDateOrTime($context,$zDate,$p) {
 $context = $context|0;
 $zDate = $zDate|0;
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 $0 = (_parseYyyyMmDd($zDate,$p)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_parseHhMmSs($zDate,$p)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_sqlite3_stricmp($zDate,9768)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_setDateTimeToCurrent($context,$p)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_sqlite3Strlen30($zDate)|0);
 $8 = (_sqlite3AtoF($zDate,$r,$7,1)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = +HEAPF64[$r>>3];
 $11 = $10 * 8.64E+7;
 $12 = $11 + 0.5;
 $13 = (~~$12)>>>0;
 $14 = +Math_abs($12) >= 1.0 ? $12 > 0.0 ? (Math_min(+Math_floor($12 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($12 - +(~~$12 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $15 = $p;
 $16 = $15;
 HEAP32[$16>>2] = $13;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = (($p) + 42|0);
 HEAP8[$19>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _parseModifier($pCtx,$zMod,$p) {
 $pCtx = $pCtx|0;
 $zMod = $zMod|0;
 $p = $p|0;
 var $$5 = 0, $$off = 0, $$pre = 0, $$sink = 0, $$sink$v = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0;
 var $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0$lcssa = 0, $n$010 = 0;
 var $n$1 = 0, $n$2 = 0, $or$cond = 0, $or$cond4 = 0, $r = 0, $rc = 0, $tx = 0, $z$0 = 0, $zBuf = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $rc = sp + 56|0;
 $r = sp + 48|0;
 $zBuf = sp + 60|0;
 $tx = sp;
 HEAP32[$rc>>2] = 1;
 $n$010 = 0;
 while(1) {
  $0 = (($zMod) + ($n$010)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $n$0$lcssa = $n$010;
   break;
  }
  $3 = $1&255;
  $4 = (960 + ($3)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = (($zBuf) + ($n$010)|0);
  HEAP8[$6>>0] = $5;
  $7 = (($n$010) + 1)|0;
  $8 = ($7|0)<(29);
  if ($8) {
   $n$010 = $7;
  } else {
   $n$0$lcssa = $7;
   break;
  }
 }
 $9 = (($zBuf) + ($n$0$lcssa)|0);
 HEAP8[$9>>0] = 0;
 $10 = HEAP8[$zBuf>>0]|0;
 $11 = $10 << 24 >> 24;
 switch ($11|0) {
 case 119:  {
  $83 = (_strncmp($zBuf,9664,8)|0);
  $84 = ($83|0)==(0);
  if (!($84)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $85 = (($zBuf) + 8|0);
  $86 = (_sqlite3Strlen30($85)|0);
  $87 = (_sqlite3AtoF($85,$r,$86,1)|0);
  $88 = ($87|0)==(0);
  if ($88) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $89 = +HEAPF64[$r>>3];
  $90 = (~~(($89)));
  $91 = (+($90|0));
  $92 = $91 == $89;
  $93 = ($90|0)>(-1);
  $or$cond = $92 & $93;
  $94 = $89 < 7.0;
  $or$cond4 = $or$cond & $94;
  if (!($or$cond4)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  _computeYMD_HMS($p);
  $95 = (($p) + 43|0);
  HEAP8[$95>>0] = 0;
  $96 = (($p) + 42|0);
  HEAP8[$96>>0] = 0;
  _computeJD($p);
  $97 = $p;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = (_i64Add(($99|0),($102|0),129600000,0)|0);
  $104 = tempRet0;
  $105 = (___divdi3(($103|0),($104|0),86400000,0)|0);
  $106 = tempRet0;
  $107 = (___remdi3(($105|0),($106|0),7,0)|0);
  $108 = tempRet0;
  $109 = ($90|0)<(0);
  $110 = $109 << 31 >> 31;
  $111 = ($108|0)>($110|0);
  $112 = ($108|0)==($110|0);
  $113 = ($107>>>0)>($90>>>0);
  $114 = $112 & $113;
  $115 = $111 | $114;
  $116 = (_i64Add(($107|0),($108|0),-7,-1)|0);
  $117 = tempRet0;
  $118 = $115 ? $116 : $107;
  $119 = $115 ? $117 : $108;
  $120 = (_i64Subtract(($90|0),($110|0),($118|0),($119|0))|0);
  $121 = tempRet0;
  $122 = (___muldi3(($120|0),($121|0),86400000,0)|0);
  $123 = tempRet0;
  $124 = (_i64Add(($122|0),($123|0),($99|0),($102|0))|0);
  $125 = tempRet0;
  $126 = $p;
  $127 = $126;
  HEAP32[$127>>2] = $124;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $125;
  _clearYMD_HMS_TZ($p);
  HEAP32[$rc>>2] = 0;
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
  break;
 }
 case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48: case 45: case 43:  {
  $n$1 = 1;
  while(1) {
   $148 = (($zBuf) + ($n$1)|0);
   $149 = HEAP8[$148>>0]|0;
   if ((($149<<24>>24) == 58) | (($149<<24>>24) == 0)) {
    break;
   }
   $150 = $149&255;
   $151 = (48 + ($150)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152 & 1;
   $154 = ($153<<24>>24)==(0);
   $155 = (($n$1) + 1)|0;
   if ($154) {
    $n$1 = $155;
   } else {
    break;
   }
  }
  $156 = (_sqlite3AtoF($zBuf,$r,$n$1,1)|0);
  $157 = ($156|0)==(0);
  if ($157) {
   HEAP32[$rc>>2] = 1;
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $158 = HEAP8[$148>>0]|0;
  $159 = ($158<<24>>24)==(58);
  if ($159) {
   $160 = HEAP8[$zBuf>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -48)|0;
   $163 = ($162>>>0)<(10);
   $164 = (($zBuf) + 1|0);
   $$5 = $163 ? $zBuf : $164;
   dest=$tx+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $165 = (_parseHhMmSs($$5,$tx)|0);
   $166 = ($165|0)==(0);
   if (!($166)) {
    $352 = HEAP32[$rc>>2]|0;
    STACKTOP = sp;return ($352|0);
   }
   _computeJD($tx);
   $167 = $tx;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($167) + 4)|0;
   $171 = $170;
   $172 = HEAP32[$171>>2]|0;
   $173 = (_i64Add(($169|0),($172|0),-43200000,-1)|0);
   $174 = tempRet0;
   $175 = (___remdi3(($173|0),($174|0),86400000,0)|0);
   $176 = tempRet0;
   $177 = $tx;
   $178 = $177;
   HEAP32[$178>>2] = $175;
   $179 = (($177) + 4)|0;
   $180 = $179;
   HEAP32[$180>>2] = $176;
   $181 = HEAP8[$zBuf>>0]|0;
   $182 = ($181<<24>>24)==(45);
   if ($182) {
    $183 = (_i64Subtract(0,0,($175|0),($176|0))|0);
    $184 = tempRet0;
    $185 = $tx;
    $186 = $185;
    HEAP32[$186>>2] = $183;
    $187 = (($185) + 4)|0;
    $188 = $187;
    HEAP32[$188>>2] = $184;
    $195 = $183;$196 = $184;
   } else {
    $195 = $175;$196 = $176;
   }
   _computeJD($p);
   _clearYMD_HMS_TZ($p);
   $189 = $p;
   $190 = $189;
   $191 = HEAP32[$190>>2]|0;
   $192 = (($189) + 4)|0;
   $193 = $192;
   $194 = HEAP32[$193>>2]|0;
   $197 = (_i64Add(($191|0),($194|0),($195|0),($196|0))|0);
   $198 = tempRet0;
   $199 = $p;
   $200 = $199;
   HEAP32[$200>>2] = $197;
   $201 = (($199) + 4)|0;
   $202 = $201;
   HEAP32[$202>>2] = $198;
   HEAP32[$rc>>2] = 0;
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  } else {
   $204 = $158;$z$0 = $148;
  }
  while(1) {
   $203 = $204&255;
   $205 = (48 + ($203)|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206 & 1;
   $208 = ($207<<24>>24)==(0);
   $209 = (($z$0) + 1|0);
   if ($208) {
    break;
   }
   $$pre = HEAP8[$209>>0]|0;
   $204 = $$pre;$z$0 = $209;
  }
  $210 = (_sqlite3Strlen30($z$0)|0);
  $$off = (($210) + -3)|0;
  $211 = ($$off>>>0)>(7);
  if ($211) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $212 = (($210) + -1)|0;
  $213 = (($z$0) + ($212)|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = ($214<<24>>24)==(115);
  if ($215) {
   HEAP8[$213>>0] = 0;
   $n$2 = $212;
  } else {
   $n$2 = $210;
  }
  _computeJD($p);
  HEAP32[$rc>>2] = 0;
  $216 = +HEAPF64[$r>>3];
  $217 = $216 < 0.0;
  $218 = $217 ? -0.5 : 0.5;
  do {
   if ((($n$2|0) == 4)) {
    $237 = (_strcmp($z$0,9720)|0);
    $238 = ($237|0)==(0);
    if ($238) {
     $239 = $216 * 3.6E+6;
     $240 = $218 + $239;
     $241 = (~~$240)>>>0;
     $242 = +Math_abs($240) >= 1.0 ? $240 > 0.0 ? (Math_min(+Math_floor($240 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($240 - +(~~$240 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $243 = $p;
     $244 = $243;
     $245 = HEAP32[$244>>2]|0;
     $246 = (($243) + 4)|0;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     $249 = (_i64Add(($241|0),($242|0),($245|0),($248|0))|0);
     $250 = tempRet0;
     $251 = $p;
     $252 = $251;
     HEAP32[$252>>2] = $249;
     $253 = (($251) + 4)|0;
     $254 = $253;
     HEAP32[$254>>2] = $250;
     break;
    }
    $325 = (_strcmp($z$0,9704)|0);
    $326 = ($325|0)==(0);
    if ($326) {
     $327 = (~~(($216)));
     _computeYMD_HMS($p);
     $328 = (($p) + 8|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + ($327))|0;
     HEAP32[$328>>2] = $330;
     $331 = (($p) + 42|0);
     HEAP8[$331>>0] = 0;
     _computeJD($p);
     $332 = (+($327|0));
     $333 = $332 != $216;
     if ($333) {
      $334 = $216 - $332;
      $335 = $334 * 365.0;
      $336 = $335 * 8.64E+7;
      $337 = $218 + $336;
      $338 = (~~$337)>>>0;
      $339 = +Math_abs($337) >= 1.0 ? $337 > 0.0 ? (Math_min(+Math_floor($337 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($337 - +(~~$337 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $340 = $p;
      $341 = $340;
      $342 = HEAP32[$341>>2]|0;
      $343 = (($340) + 4)|0;
      $344 = $343;
      $345 = HEAP32[$344>>2]|0;
      $346 = (_i64Add(($342|0),($345|0),($338|0),($339|0))|0);
      $347 = tempRet0;
      $348 = $p;
      $349 = $348;
      HEAP32[$349>>2] = $346;
      $350 = (($348) + 4)|0;
      $351 = $350;
      HEAP32[$351>>2] = $347;
     }
    } else {
     label = 53;
    }
   } else if ((($n$2|0) == 5)) {
    $291 = (_strcmp($z$0,9696)|0);
    $292 = ($291|0)==(0);
    if ($292) {
     _computeYMD_HMS($p);
     $293 = (~~(($216)));
     $294 = (($p) + 12|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = (($295) + ($293))|0;
     $297 = ($296|0)>(0);
     $$sink$v = $297 ? -1 : -12;
     $$sink = (($$sink$v) + ($296))|0;
     $298 = (($$sink|0) / 12)&-1;
     $299 = (($p) + 8|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = (($300) + ($298))|0;
     HEAP32[$299>>2] = $301;
     $302 = Math_imul($298, -12)|0;
     $303 = (($296) + ($302))|0;
     HEAP32[$294>>2] = $303;
     $304 = (($p) + 42|0);
     HEAP8[$304>>0] = 0;
     _computeJD($p);
     $305 = (+($293|0));
     $306 = $305 != $216;
     if ($306) {
      $307 = $216 - $305;
      $308 = $307 * 30.0;
      $309 = $308 * 8.64E+7;
      $310 = $218 + $309;
      $311 = (~~$310)>>>0;
      $312 = +Math_abs($310) >= 1.0 ? $310 > 0.0 ? (Math_min(+Math_floor($310 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($310 - +(~~$310 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $313 = $p;
      $314 = $313;
      $315 = HEAP32[$314>>2]|0;
      $316 = (($313) + 4)|0;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (_i64Add(($315|0),($318|0),($311|0),($312|0))|0);
      $320 = tempRet0;
      $321 = $p;
      $322 = $321;
      HEAP32[$322>>2] = $319;
      $323 = (($321) + 4)|0;
      $324 = $323;
      HEAP32[$324>>2] = $320;
     }
    } else {
     label = 53;
    }
   } else if ((($n$2|0) == 3)) {
    $219 = (_strcmp($z$0,9712)|0);
    $220 = ($219|0)==(0);
    if ($220) {
     $221 = $216 * 8.64E+7;
     $222 = $221 + $218;
     $223 = (~~$222)>>>0;
     $224 = +Math_abs($222) >= 1.0 ? $222 > 0.0 ? (Math_min(+Math_floor($222 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($222 - +(~~$222 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $225 = $p;
     $226 = $225;
     $227 = HEAP32[$226>>2]|0;
     $228 = (($225) + 4)|0;
     $229 = $228;
     $230 = HEAP32[$229>>2]|0;
     $231 = (_i64Add(($227|0),($230|0),($223|0),($224|0))|0);
     $232 = tempRet0;
     $233 = $p;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
    } else {
     label = 53;
    }
   } else if ((($n$2|0) == 6)) {
    $255 = (_strcmp($z$0,9728)|0);
    $256 = ($255|0)==(0);
    if ($256) {
     $257 = $216 * 6.0E+4;
     $258 = $218 + $257;
     $259 = (~~$258)>>>0;
     $260 = +Math_abs($258) >= 1.0 ? $258 > 0.0 ? (Math_min(+Math_floor($258 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($258 - +(~~$258 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $261 = $p;
     $262 = $261;
     $263 = HEAP32[$262>>2]|0;
     $264 = (($261) + 4)|0;
     $265 = $264;
     $266 = HEAP32[$265>>2]|0;
     $267 = (_i64Add(($259|0),($260|0),($263|0),($266|0))|0);
     $268 = tempRet0;
     $269 = $p;
     $270 = $269;
     HEAP32[$270>>2] = $267;
     $271 = (($269) + 4)|0;
     $272 = $271;
     HEAP32[$272>>2] = $268;
     break;
    }
    $273 = (_strcmp($z$0,9736)|0);
    $274 = ($273|0)==(0);
    if ($274) {
     $275 = $216 * 1000.0;
     $276 = $218 + $275;
     $277 = (~~$276)>>>0;
     $278 = +Math_abs($276) >= 1.0 ? $276 > 0.0 ? (Math_min(+Math_floor($276 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($276 - +(~~$276 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $279 = $p;
     $280 = $279;
     $281 = HEAP32[$280>>2]|0;
     $282 = (($279) + 4)|0;
     $283 = $282;
     $284 = HEAP32[$283>>2]|0;
     $285 = (_i64Add(($277|0),($278|0),($281|0),($284|0))|0);
     $286 = tempRet0;
     $287 = $p;
     $288 = $287;
     HEAP32[$288>>2] = $285;
     $289 = (($287) + 4)|0;
     $290 = $289;
     HEAP32[$290>>2] = $286;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } while(0);
  if ((label|0) == 53) {
   HEAP32[$rc>>2] = 1;
  }
  _clearYMD_HMS_TZ($p);
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
  break;
 }
 case 115:  {
  $130 = (_strncmp($zBuf,9680,9)|0);
  $131 = ($130|0)==(0);
  if (!($131)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $132 = (($zBuf) + 9|0);
  _computeYMD($p);
  $133 = (($p) + 41|0);
  HEAP8[$133>>0] = 1;
  $134 = (($p) + 24|0);
  HEAP32[$134>>2] = 0;
  $135 = (($p) + 20|0);
  HEAP32[$135>>2] = 0;
  $136 = (($p) + 32|0);
  HEAPF64[$136>>3] = 0.0;
  $137 = (($p) + 43|0);
  HEAP8[$137>>0] = 0;
  $138 = (($p) + 42|0);
  HEAP8[$138>>0] = 0;
  $139 = (_strcmp($132,9696)|0);
  $140 = ($139|0)==(0);
  if ($140) {
   $141 = (($p) + 16|0);
   HEAP32[$141>>2] = 1;
   HEAP32[$rc>>2] = 0;
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $142 = (_strcmp($132,9704)|0);
  $143 = ($142|0)==(0);
  if ($143) {
   _computeYMD($p);
   $144 = (($p) + 12|0);
   HEAP32[$144>>2] = 1;
   $145 = (($p) + 16|0);
   HEAP32[$145>>2] = 1;
   HEAP32[$rc>>2] = 0;
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $146 = (_strcmp($132,9712)|0);
  $147 = ($146|0)==(0);
  if (!($147)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  HEAP32[$rc>>2] = 0;
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
  break;
 }
 case 117:  {
  $28 = (_strcmp($zBuf,9640)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = (($p) + 42|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if (!($32)) {
    $33 = $p;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Add(($35|0),($38|0),43200,0)|0);
    $40 = tempRet0;
    $41 = (___divdi3(($39|0),($40|0),86400,0)|0);
    $42 = tempRet0;
    $43 = (_i64Add(($41|0),($42|0),1045635584,49096)|0);
    $44 = tempRet0;
    $45 = $p;
    $46 = $45;
    HEAP32[$46>>2] = $43;
    $47 = (($45) + 4)|0;
    $48 = $47;
    HEAP32[$48>>2] = $44;
    _clearYMD_HMS_TZ($p);
    HEAP32[$rc>>2] = 0;
    $352 = HEAP32[$rc>>2]|0;
    STACKTOP = sp;return ($352|0);
   }
  }
  $49 = (_strcmp($zBuf,9656)|0);
  $50 = ($49|0)==(0);
  if (!($50)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  _computeJD($p);
  $51 = (_localtimeOffset($p,$pCtx,$rc)|0);
  $52 = tempRet0;
  $53 = HEAP32[$rc>>2]|0;
  $54 = ($53|0)==(0);
  if (!($54)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  $55 = $p;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (_i64Subtract(($57|0),($60|0),($51|0),($52|0))|0);
  $62 = tempRet0;
  $63 = $p;
  $64 = $63;
  HEAP32[$64>>2] = $61;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $62;
  _clearYMD_HMS_TZ($p);
  $67 = (_localtimeOffset($p,$pCtx,$rc)|0);
  $68 = tempRet0;
  $69 = (_i64Subtract(($51|0),($52|0),($67|0),($68|0))|0);
  $70 = tempRet0;
  $71 = $p;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (_i64Add(($69|0),($70|0),($73|0),($76|0))|0);
  $78 = tempRet0;
  $79 = $p;
  $80 = $79;
  HEAP32[$80>>2] = $77;
  $81 = (($79) + 4)|0;
  $82 = $81;
  HEAP32[$82>>2] = $78;
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
  break;
 }
 case 108:  {
  $12 = (_strcmp($zBuf,9624)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $352 = HEAP32[$rc>>2]|0;
   STACKTOP = sp;return ($352|0);
  }
  _computeJD($p);
  $14 = (_localtimeOffset($p,$pCtx,$rc)|0);
  $15 = tempRet0;
  $16 = $p;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (_i64Add(($18|0),($21|0),($14|0),($15|0))|0);
  $23 = tempRet0;
  $24 = $p;
  $25 = $24;
  HEAP32[$25>>2] = $22;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  _clearYMD_HMS_TZ($p);
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
  break;
 }
 default: {
  $352 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($352|0);
 }
 }
 return 0|0;
}
function _localtimeOffset($p,$pCtx,$pRc) {
 $p = $p|0;
 $pCtx = $pCtx|0;
 $pRc = $pRc|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $sLocal = 0, $t = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $x = sp + 48|0;
 $y = sp;
 $t = sp + 140|0;
 $sLocal = sp + 96|0;
 dest=$sLocal+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$x+0|0; src=$p+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _computeYMD_HMS($x);
 $0 = (($x) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -1971)|0;
 $2 = ($$off>>>0)>(66);
 if ($2) {
  HEAP32[$0>>2] = 2000;
  $3 = (($x) + 12|0);
  HEAP32[$3>>2] = 1;
  $4 = (($x) + 16|0);
  HEAP32[$4>>2] = 1;
  $5 = (($x) + 20|0);
  HEAP32[$5>>2] = 0;
  $6 = (($x) + 24|0);
  HEAP32[$6>>2] = 0;
  $7 = (($x) + 32|0);
  HEAPF64[$7>>3] = 0.0;
 } else {
  $8 = (($x) + 32|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 + 0.5;
  $11 = (~~(($10)));
  $12 = (+($11|0));
  HEAPF64[$8>>3] = $12;
 }
 $13 = (($x) + 28|0);
 HEAP32[$13>>2] = 0;
 $14 = (($x) + 42|0);
 HEAP8[$14>>0] = 0;
 _computeJD($x);
 $15 = $x;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (___divdi3(($17|0),($20|0),1000,0)|0);
 $22 = tempRet0;
 $23 = (_i64Add(($21|0),($22|0),-413362496,0)|0);
 $24 = tempRet0;
 HEAP32[$t>>2] = $23;
 $25 = (_osLocaltime($t,$sLocal)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = (($sLocal) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1900)|0;
  $30 = (($y) + 8|0);
  HEAP32[$30>>2] = $29;
  $31 = (($sLocal) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  $34 = (($y) + 12|0);
  HEAP32[$34>>2] = $33;
  $35 = (($sLocal) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($y) + 16|0);
  HEAP32[$37>>2] = $36;
  $38 = (($sLocal) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($y) + 20|0);
  HEAP32[$40>>2] = $39;
  $41 = (($sLocal) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($y) + 24|0);
  HEAP32[$43>>2] = $42;
  $44 = HEAP32[$sLocal>>2]|0;
  $45 = (+($44|0));
  $46 = (($y) + 32|0);
  HEAPF64[$46>>3] = $45;
  $47 = (($y) + 40|0);
  HEAP8[$47>>0] = 1;
  $48 = (($y) + 41|0);
  HEAP8[$48>>0] = 1;
  $49 = (($y) + 42|0);
  HEAP8[$49>>0] = 0;
  $50 = (($y) + 43|0);
  HEAP8[$50>>0] = 0;
  _computeJD($y);
  HEAP32[$pRc>>2] = 0;
  $51 = $y;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (_i64Subtract(($53|0),($56|0),($17|0),($20|0))|0);
  $58 = tempRet0;
  $59 = $58;$60 = $57;
  tempRet0 = $59;
  STACKTOP = sp;return ($60|0);
 } else {
  _sqlite3_result_error($pCtx,9744,-1);
  HEAP32[$pRc>>2] = 1;
  $59 = 0;$60 = 0;
  tempRet0 = $59;
  STACKTOP = sp;return ($60|0);
 }
 return 0|0;
}
function _clearYMD_HMS_TZ($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 HEAP8[$0>>0] = 0;
 $1 = (($p) + 41|0);
 HEAP8[$1>>0] = 0;
 $2 = (($p) + 43|0);
 HEAP8[$2>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3AtoF($z,$pResult,$length,$enc) {
 $z = $z|0;
 $pResult = $pResult|0;
 $length = $length|0;
 $enc = $enc|0;
 var $$ = 0, $$0 = 0, $$014$ph = 0, $$014109 = 0, $$1$lcssa = 0, $$1$ph = 0, $$10 = 0, $$1102 = 0, $$2$lcssa = 0, $$294 = 0, $$387 = 0, $$4 = 0, $$4$lcssa = 0, $$473 = 0, $$477 = 0, $$567 = 0, $$6 = 0, $$7$ph = 0, $$760 = 0, $$8 = 0;
 var $$956 = 0, $$lcssa = 0, $$sum = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $d$088 = 0, $d$1$lcssa = 0, $d$175 = 0, $d$2 = 0, $d$3 = 0, $e$061 = 0, $e$1 = 0, $e$2 = 0, $e$3 = 0, $e$443 = 0, $e$551 = 0, $e$6 = 0, $e$6$off = 0, $e$726 = 0, $e$8$lcssa = 0, $e$835 = 0, $e$929 = 0, $eValid$062 = 0;
 var $eValid$1 = 0, $eValid$2 = 0, $esign$0$ph = 0, $esign$1 = 0, $esign$2 = 0, $i$0$lcssa = 0, $i$0111 = 0, $incr$0$ph = 0, $length$pn = 0, $nDigits$0$lcssa = 0, $nDigits$0103 = 0, $nDigits$1$lcssa = 0, $nDigits$196 = 0, $nDigits$289 = 0, $nDigits$3$lcssa = 0, $nDigits$376 = 0, $nDigits$468 = 0, $nDigits$5 = 0, $nDigits$6 = 0, $nonNum$0$ph = 0;
 var $not$or$cond23 = 0, $notlhs = 0, $notlhs171 = 0, $notrhs = 0, $notrhs172 = 0, $or$cond = 0, $or$cond170 = 0, $or$cond18 = 0, $or$cond19$not = 0, $or$cond20 = 0, $or$cond2041 = 0, $or$cond21 = 0, $or$cond2149 = 0, $or$cond22$not = 0, $or$cond23 = 0, $phitmp = 0.0, $result$0 = 0.0, $scale$0$lcssa = 0.0, $scale$027 = 0.0, $scale$1$lcssa = 0.0;
 var $scale$136 = 0.0, $scale$2$lcssa = 0.0, $scale$230 = 0.0, $sign$0$ph = 0, $zEnd$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$pResult>>3] = 0.0;
 $0 = $enc&255;
 $1 = ($enc<<24>>24)==(1);
 if ($1) {
  $$014$ph = $z;$incr$0$ph = 1;$length$pn = $length;$nonNum$0$ph = 0;
 } else {
  $2 = (3 - ($0))|0;
  $3 = ($2|0)<($length|0);
  L3: do {
   if ($3) {
    $i$0111 = $2;
    while(1) {
     $6 = (($z) + ($i$0111)|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(0);
     $5 = (($i$0111) + 2)|0;
     if (!($8)) {
      $$lcssa = 1;$i$0$lcssa = $i$0111;
      break L3;
     }
     $4 = ($5|0)<($length|0);
     if ($4) {
      $i$0111 = $5;
     } else {
      $$lcssa = 0;$i$0$lcssa = $5;
      break;
     }
    }
   } else {
    $$lcssa = 0;$i$0$lcssa = $2;
   }
  } while(0);
  $$sum = (($0) + -3)|0;
  $$sum15 = (($$sum) + ($i$0$lcssa))|0;
  $9 = $0 & 1;
  $10 = (($z) + ($9)|0);
  $$014$ph = $10;$incr$0$ph = 2;$length$pn = $$sum15;$nonNum$0$ph = $$lcssa;
 }
 $zEnd$0$ph = (($z) + ($length$pn)|0);
 $11 = ($$014$ph>>>0)<($zEnd$0$ph>>>0);
 if ($11) {
  $$014109 = $$014$ph;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $12 = HEAP8[$$014109>>0]|0;
  $13 = $12&255;
  $14 = (48 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 & 1;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   break;
  }
  $18 = (($$014109) + ($incr$0$ph)|0);
  $19 = ($18>>>0)<($zEnd$0$ph>>>0);
  if ($19) {
   $$014109 = $18;
  } else {
   $$0 = 0;
   label = 70;
   break;
  }
 }
 if ((label|0) == 70) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((($12<<24>>24) == 45)) {
  $20 = (($$014109) + ($incr$0$ph)|0);
  $$1$ph = $20;$sign$0$ph = -1;
 } else if ((($12<<24>>24) == 43)) {
  $21 = (($$014109) + ($incr$0$ph)|0);
  $$1$ph = $21;$sign$0$ph = 1;
 } else {
  $$1$ph = $$014109;$sign$0$ph = 1;
 }
 $22 = ($$1$ph>>>0)<($zEnd$0$ph>>>0);
 L21: do {
  if ($22) {
   $$1102 = $$1$ph;$nDigits$0103 = 0;
   while(1) {
    $23 = HEAP8[$$1102>>0]|0;
    $24 = ($23<<24>>24)==(48);
    if (!($24)) {
     $$1$lcssa = $$1102;$nDigits$0$lcssa = $nDigits$0103;
     break L21;
    }
    $26 = (($$1102) + ($incr$0$ph)|0);
    $27 = (($nDigits$0103) + 1)|0;
    $28 = ($26>>>0)<($zEnd$0$ph>>>0);
    if ($28) {
     $$1102 = $26;$nDigits$0103 = $27;
    } else {
     $$1$lcssa = $26;$nDigits$0$lcssa = $27;
     break;
    }
   }
  } else {
   $$1$lcssa = $$1$ph;$nDigits$0$lcssa = 0;
  }
 } while(0);
 $25 = ($$1$lcssa>>>0)<($zEnd$0$ph>>>0);
 L26: do {
  if ($25) {
   $$294 = $$1$lcssa;$34 = 0;$37 = 0;$nDigits$196 = $nDigits$0$lcssa;
   while(1) {
    $29 = HEAP8[$$294>>0]|0;
    $30 = $29&255;
    $31 = (($30) + -48)|0;
    $32 = ($31>>>0)<(10);
    $33 = ($34|0)<(214748364);
    $35 = ($34|0)==(214748364);
    $36 = ($37>>>0)<(3435973835);
    $38 = $35 & $36;
    $39 = $33 | $38;
    $or$cond = $32 & $39;
    if (!($or$cond)) {
     $$2$lcssa = $$294;$209 = $37;$210 = $34;$nDigits$1$lcssa = $nDigits$196;
     break L26;
    }
    $41 = (___muldi3(($37|0),($34|0),10,0)|0);
    $42 = tempRet0;
    $43 = $29 << 24 >> 24;
    $44 = (($43) + -48)|0;
    $45 = ($44|0)<(0);
    $46 = $45 << 31 >> 31;
    $47 = (_i64Add(($44|0),($46|0),($41|0),($42|0))|0);
    $48 = tempRet0;
    $49 = (($$294) + ($incr$0$ph)|0);
    $50 = (($nDigits$196) + 1)|0;
    $51 = ($49>>>0)<($zEnd$0$ph>>>0);
    if ($51) {
     $$294 = $49;$34 = $48;$37 = $47;$nDigits$196 = $50;
    } else {
     $$2$lcssa = $49;$209 = $47;$210 = $48;$nDigits$1$lcssa = $50;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$lcssa;$209 = 0;$210 = 0;$nDigits$1$lcssa = $nDigits$0$lcssa;
  }
 } while(0);
 $40 = ($$2$lcssa>>>0)<($zEnd$0$ph>>>0);
 L31: do {
  if ($40) {
   $$387 = $$2$lcssa;$d$088 = 0;$nDigits$289 = $nDigits$1$lcssa;
   while(1) {
    $52 = HEAP8[$$387>>0]|0;
    $53 = $52&255;
    $54 = (($53) + -48)|0;
    $55 = ($54>>>0)<(10);
    if (!($55)) {
     break;
    }
    $56 = (($$387) + ($incr$0$ph)|0);
    $57 = (($nDigits$289) + 1)|0;
    $58 = (($d$088) + 1)|0;
    $59 = ($56>>>0)<($zEnd$0$ph>>>0);
    if ($59) {
     $$387 = $56;$d$088 = $58;$nDigits$289 = $57;
    } else {
     $$10 = $56;$125 = $209;$127 = $210;$d$3 = $58;$e$2 = 0;$eValid$2 = 1;$esign$2 = 1;$nDigits$6 = $57;
     break L31;
    }
   }
   $60 = ($52<<24>>24)==(46);
   L36: do {
    if ($60) {
     $$473 = (($$387) + ($incr$0$ph)|0);
     $61 = ($$473>>>0)<($zEnd$0$ph>>>0);
     L38: do {
      if ($61) {
       $$477 = $$473;$67 = $210;$70 = $209;$d$175 = $d$088;$nDigits$376 = $nDigits$289;
       while(1) {
        $62 = HEAP8[$$477>>0]|0;
        $63 = $62&255;
        $64 = (($63) + -48)|0;
        $65 = ($64>>>0)<(10);
        $66 = ($67|0)<(214748364);
        $68 = ($67|0)==(214748364);
        $69 = ($70>>>0)<(3435973835);
        $71 = $68 & $69;
        $72 = $66 | $71;
        $or$cond18 = $65 & $72;
        if (!($or$cond18)) {
         $$4$lcssa = $$477;$213 = $70;$214 = $67;$d$1$lcssa = $d$175;$nDigits$3$lcssa = $nDigits$376;
         break L38;
        }
        $74 = (___muldi3(($70|0),($67|0),10,0)|0);
        $75 = tempRet0;
        $76 = $62 << 24 >> 24;
        $77 = (($76) + -48)|0;
        $78 = ($77|0)<(0);
        $79 = $78 << 31 >> 31;
        $80 = (_i64Add(($77|0),($79|0),($74|0),($75|0))|0);
        $81 = tempRet0;
        $82 = (($nDigits$376) + 1)|0;
        $83 = (($d$175) + -1)|0;
        $$4 = (($$477) + ($incr$0$ph)|0);
        $84 = ($$4>>>0)<($zEnd$0$ph>>>0);
        if ($84) {
         $$477 = $$4;$67 = $81;$70 = $80;$d$175 = $83;$nDigits$376 = $82;
        } else {
         $$4$lcssa = $$4;$213 = $80;$214 = $81;$d$1$lcssa = $83;$nDigits$3$lcssa = $82;
         break;
        }
       }
      } else {
       $$4$lcssa = $$473;$213 = $209;$214 = $210;$d$1$lcssa = $d$088;$nDigits$3$lcssa = $nDigits$289;
      }
     } while(0);
     $73 = ($$4$lcssa>>>0)<($zEnd$0$ph>>>0);
     if ($73) {
      $$567 = $$4$lcssa;$nDigits$468 = $nDigits$3$lcssa;
      while(1) {
       $85 = HEAP8[$$567>>0]|0;
       $86 = $85&255;
       $87 = (($86) + -48)|0;
       $88 = ($87>>>0)<(10);
       if (!($88)) {
        $$6 = $$567;$211 = $213;$212 = $214;$d$2 = $d$1$lcssa;$nDigits$5 = $nDigits$468;
        break L36;
       }
       $89 = (($$567) + ($incr$0$ph)|0);
       $90 = (($nDigits$468) + 1)|0;
       $91 = ($89>>>0)<($zEnd$0$ph>>>0);
       if ($91) {
        $$567 = $89;$nDigits$468 = $90;
       } else {
        $$6 = $89;$211 = $213;$212 = $214;$d$2 = $d$1$lcssa;$nDigits$5 = $90;
        break;
       }
      }
     } else {
      $$6 = $$4$lcssa;$211 = $213;$212 = $214;$d$2 = $d$1$lcssa;$nDigits$5 = $nDigits$3$lcssa;
     }
    } else {
     $$6 = $$387;$211 = $209;$212 = $210;$d$2 = $d$088;$nDigits$5 = $nDigits$289;
    }
   } while(0);
   $92 = ($$6>>>0)<($zEnd$0$ph>>>0);
   if ($92) {
    $93 = HEAP8[$$6>>0]|0;
    L48: do {
     if ((($93<<24>>24) == 69) | (($93<<24>>24) == 101)) {
      $94 = (($$6) + ($incr$0$ph)|0);
      $95 = ($94>>>0)<($zEnd$0$ph>>>0);
      if (!($95)) {
       $$10 = $94;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = 0;$eValid$2 = 0;$esign$2 = 1;$nDigits$6 = $nDigits$5;
       break L31;
      }
      $96 = HEAP8[$94>>0]|0;
      if ((($96<<24>>24) == 43)) {
       $$sum16 = $incr$0$ph << 1;
       $98 = (($$6) + ($$sum16)|0);
       $$7$ph = $98;$esign$0$ph = 1;
      } else if ((($96<<24>>24) == 45)) {
       $$sum17 = $incr$0$ph << 1;
       $97 = (($$6) + ($$sum17)|0);
       $$7$ph = $97;$esign$0$ph = -1;
      } else {
       $$7$ph = $94;$esign$0$ph = 1;
      }
      $99 = ($$7$ph>>>0)<($zEnd$0$ph>>>0);
      if ($99) {
       $$760 = $$7$ph;$e$061 = 0;$eValid$062 = 0;
      } else {
       $$10 = $$7$ph;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = 0;$eValid$2 = 0;$esign$2 = $esign$0$ph;$nDigits$6 = $nDigits$5;
       break L31;
      }
      while(1) {
       $100 = HEAP8[$$760>>0]|0;
       $101 = $100&255;
       $102 = (($101) + -48)|0;
       $103 = ($102>>>0)<(10);
       if (!($103)) {
        $$8 = $$760;$e$1 = $e$061;$eValid$1 = $eValid$062;$esign$1 = $esign$0$ph;
        break L48;
       }
       $104 = ($e$061|0)<(10000);
       if ($104) {
        $105 = ($e$061*10)|0;
        $106 = $100 << 24 >> 24;
        $107 = (($105) + -48)|0;
        $108 = (($107) + ($106))|0;
        $215 = $108;
       } else {
        $215 = 10000;
       }
       $109 = (($$760) + ($incr$0$ph)|0);
       $110 = ($109>>>0)<($zEnd$0$ph>>>0);
       if ($110) {
        $$760 = $109;$e$061 = $215;$eValid$062 = 1;
       } else {
        $$8 = $109;$e$1 = $215;$eValid$1 = 1;$esign$1 = $esign$0$ph;
        break;
       }
      }
     } else {
      $$8 = $$6;$e$1 = 0;$eValid$1 = 1;$esign$1 = 1;
     }
    } while(0);
    $notlhs171 = ($nDigits$5|0)!=(0);
    $notrhs172 = ($eValid$1|0)!=(0);
    $or$cond19$not = $notrhs172 & $notlhs171;
    $111 = ($$8>>>0)<($zEnd$0$ph>>>0);
    $or$cond170 = $or$cond19$not & $111;
    if ($or$cond170) {
     $$956 = $$8;
     while(1) {
      $112 = HEAP8[$$956>>0]|0;
      $113 = $112&255;
      $114 = (48 + ($113)|0);
      $115 = HEAP8[$114>>0]|0;
      $116 = $115 & 1;
      $117 = ($116<<24>>24)==(0);
      if ($117) {
       $$10 = $$956;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = $e$1;$eValid$2 = $eValid$1;$esign$2 = $esign$1;$nDigits$6 = $nDigits$5;
       break L31;
      }
      $118 = (($$956) + ($incr$0$ph)|0);
      $119 = ($118>>>0)<($zEnd$0$ph>>>0);
      if ($119) {
       $$956 = $118;
      } else {
       $$10 = $118;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = $e$1;$eValid$2 = $eValid$1;$esign$2 = $esign$1;$nDigits$6 = $nDigits$5;
       break;
      }
     }
    } else {
     $$10 = $$8;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = $e$1;$eValid$2 = $eValid$1;$esign$2 = $esign$1;$nDigits$6 = $nDigits$5;
    }
   } else {
    $$10 = $$6;$125 = $211;$127 = $212;$d$3 = $d$2;$e$2 = 0;$eValid$2 = 1;$esign$2 = 1;$nDigits$6 = $nDigits$5;
   }
  } else {
   $$10 = $$2$lcssa;$125 = $209;$127 = $210;$d$3 = 0;$e$2 = 0;$eValid$2 = 1;$esign$2 = 1;$nDigits$6 = $nDigits$1$lcssa;
  }
 } while(0);
 $120 = Math_imul($e$2, $esign$2)|0;
 $121 = (($120) + ($d$3))|0;
 $122 = ($121|0)<(0);
 $123 = (0 - ($121))|0;
 $e$3 = $122 ? $123 : $121;
 $124 = ($125|0)==(0);
 $126 = ($127|0)==(0);
 $128 = $124 & $126;
 do {
  if ($128) {
   $129 = ($sign$0$ph|0)<(0);
   if ($129) {
    $130 = ($nDigits$6|0)!=(0);
    $phitmp = $130 ? -0.0 : 0.0;
    $result$0 = $phitmp;
   } else {
    $result$0 = 0.0;
   }
  } else {
   $131 = $121 >> 31;
   $132 = $131 | 1;
   $133 = ($132|0)>(0);
   if ($133) {
    $140 = ($127|0)<(214748364);
    $141 = ($127|0)==(214748364);
    $142 = ($125>>>0)<(3435973836);
    $143 = $141 & $142;
    $144 = $140 | $143;
    $145 = ($e$3|0)>(0);
    $or$cond2041 = $144 & $145;
    if ($or$cond2041) {
     $147 = $125;$148 = $127;$e$443 = $e$3;
     while(1) {
      $146 = (($e$443) + -1)|0;
      $149 = (___muldi3(($147|0),($148|0),10,0)|0);
      $150 = tempRet0;
      $151 = ($150|0)<(214748364);
      $152 = ($150|0)==(214748364);
      $153 = ($149>>>0)<(3435973836);
      $154 = $152 & $153;
      $155 = $151 | $154;
      $156 = ($146|0)>(0);
      $or$cond20 = $155 & $156;
      if ($or$cond20) {
       $147 = $149;$148 = $150;$e$443 = $146;
      } else {
       $169 = $149;$170 = $150;$e$6 = $146;
       break;
      }
     }
    } else {
     $169 = $125;$170 = $127;$e$6 = $e$3;
    }
   } else {
    $134 = (___remdi3(($125|0),($127|0),10,0)|0);
    $135 = tempRet0;
    $136 = ($134|0)==(0);
    $137 = ($135|0)==(0);
    $138 = $136 & $137;
    $139 = ($e$3|0)>(0);
    $or$cond2149 = $138 & $139;
    if ($or$cond2149) {
     $158 = $125;$159 = $127;$e$551 = $e$3;
     while(1) {
      $157 = (($e$551) + -1)|0;
      $160 = (___divdi3(($158|0),($159|0),10,0)|0);
      $161 = tempRet0;
      $162 = (___remdi3(($160|0),($161|0),10,0)|0);
      $163 = tempRet0;
      $164 = ($162|0)==(0);
      $165 = ($163|0)==(0);
      $166 = $164 & $165;
      $167 = ($157|0)>(0);
      $or$cond21 = $166 & $167;
      if ($or$cond21) {
       $158 = $160;$159 = $161;$e$551 = $157;
      } else {
       $169 = $160;$170 = $161;$e$6 = $157;
       break;
      }
     }
    } else {
     $169 = $125;$170 = $127;$e$6 = $e$3;
    }
   }
   $168 = ($sign$0$ph|0)<(0);
   $171 = (_i64Subtract(0,0,($169|0),($170|0))|0);
   $172 = tempRet0;
   $173 = $168 ? $171 : $169;
   $174 = $168 ? $172 : $170;
   $175 = ($e$6|0)==(0);
   if ($175) {
    $205 = (+($173>>>0)) + (4294967296.0*(+($174|0)));
    $result$0 = $205;
    break;
   }
   $e$6$off = (($e$6) + -308)|0;
   $176 = ($e$6$off>>>0)<(34);
   if ($176) {
    $177 = (($e$6|0) % 308)&-1;
    $178 = ($177|0)==(0);
    if ($178) {
     $scale$0$lcssa = 1.0;
    } else {
     $e$726 = $e$6;$scale$027 = 1.0;
     while(1) {
      $179 = $scale$027 * 10.0;
      $180 = (($e$726) + -1)|0;
      $181 = (($180|0) % 308)&-1;
      $182 = ($181|0)==(0);
      if ($182) {
       $scale$0$lcssa = $179;
       break;
      } else {
       $e$726 = $180;$scale$027 = $179;
      }
     }
    }
    $183 = (+($173>>>0)) + (4294967296.0*(+($174|0)));
    if ($122) {
     $184 = $183 / $scale$0$lcssa;
     $185 = $184 / 1.00000000000000001098E+308;
     $result$0 = $185;
     break;
    } else {
     $186 = $183 * $scale$0$lcssa;
     $187 = $186 * 1.00000000000000001098E+308;
     $result$0 = $187;
     break;
    }
   }
   $188 = ($e$6|0)>(341);
   if ($188) {
    $191 = (+($173>>>0)) + (4294967296.0*(+($174|0)));
    if ($122) {
     $192 = $191 * 0.0;
     $result$0 = $192;
     break;
    } else {
     $193 = $191 * inf;
     $result$0 = $193;
     break;
    }
   }
   $189 = (($e$6|0) % 22)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $e$8$lcssa = $e$6;$scale$1$lcssa = 1.0;
   } else {
    $e$835 = $e$6;$scale$136 = 1.0;
    while(1) {
     $195 = $scale$136 * 10.0;
     $196 = (($e$835) + -1)|0;
     $197 = (($196|0) % 22)&-1;
     $198 = ($197|0)==(0);
     if ($198) {
      $e$8$lcssa = $196;$scale$1$lcssa = $195;
      break;
     } else {
      $e$835 = $196;$scale$136 = $195;
     }
    }
   }
   $194 = ($e$8$lcssa|0)>(0);
   if ($194) {
    $e$929 = $e$8$lcssa;$scale$230 = $scale$1$lcssa;
    while(1) {
     $199 = $scale$230 * 1.0E+22;
     $200 = (($e$929) + -22)|0;
     $201 = ($200|0)>(0);
     if ($201) {
      $e$929 = $200;$scale$230 = $199;
     } else {
      $scale$2$lcssa = $199;
      break;
     }
    }
   } else {
    $scale$2$lcssa = $scale$1$lcssa;
   }
   $202 = (+($173>>>0)) + (4294967296.0*(+($174|0)));
   if ($122) {
    $203 = $202 / $scale$2$lcssa;
    $result$0 = $203;
    break;
   } else {
    $204 = $202 * $scale$2$lcssa;
    $result$0 = $204;
    break;
   }
  }
 } while(0);
 HEAPF64[$pResult>>3] = $result$0;
 $notlhs = ($$10>>>0)<($zEnd$0$ph>>>0);
 $notrhs = ($nDigits$6|0)<(1);
 $or$cond22$not = $notrhs | $notlhs;
 $206 = ($eValid$2|0)==(0);
 $or$cond23 = $or$cond22$not | $206;
 $207 = ($nonNum$0$ph|0)==(0);
 $not$or$cond23 = $or$cond23 ^ 1;
 $$ = $207 & $not$or$cond23;
 $208 = $$&1;
 $$0 = $208;
 STACKTOP = sp;return ($$0|0);
}
function _parseHhMmSs($zDate,$p) {
 $zDate = $zDate|0;
 $p = $p|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $m = 0, $ms$03 = 0.0, $ms$1 = 0.0, $rScale$04 = 0.0, $s = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer = sp;
 $h = sp + 68|0;
 $m = sp + 64|0;
 $s = sp + 60|0;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 24;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 58;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $h;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 2;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = 0;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = 59;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 0;
 $vararg_ptr9 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $m;
 $0 = (_getDigits($zDate,$vararg_buffer)|0);
 $1 = ($0|0)==(2);
 if (!($1)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($zDate) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(58);
 if ($4) {
  $5 = (($zDate) + 6|0);
  HEAP32[$vararg_buffer10>>2] = 2;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 0;
  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 59;
  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
  HEAP32[$vararg_ptr15>>2] = 0;
  $vararg_ptr16 = (($vararg_buffer10) + 16|0);
  HEAP32[$vararg_ptr16>>2] = $s;
  $6 = (_getDigits($5,$vararg_buffer10)|0);
  $7 = ($6|0)==(1);
  if (!($7)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $8 = (($zDate) + 8|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(46);
  if ($10) {
   $11 = (($zDate) + 9|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = (($13) + -48)|0;
   $15 = ($14>>>0)<(10);
   if ($15) {
    $$012 = $11;$18 = $12;$ms$03 = 0.0;$rScale$04 = 1.0;
    while(1) {
     $16 = $ms$03 * 10.0;
     $17 = (+($18<<24>>24));
     $19 = $16 + $17;
     $20 = $19 + -48.0;
     $21 = $rScale$04 * 10.0;
     $22 = (($$012) + 1|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = (($24) + -48)|0;
     $26 = ($25>>>0)<(10);
     if ($26) {
      $$012 = $22;$18 = $23;$ms$03 = $20;$rScale$04 = $21;
     } else {
      break;
     }
    }
    $27 = $20 / $21;
    $$1 = $22;$ms$1 = $27;
   } else {
    $$1 = $8;$ms$1 = 0.0;
   }
  } else {
   $$1 = $8;$ms$1 = 0.0;
  }
 } else {
  HEAP32[$s>>2] = 0;
  $$1 = $2;$ms$1 = 0.0;
 }
 $28 = (($p) + 42|0);
 HEAP8[$28>>0] = 0;
 $29 = (($p) + 41|0);
 HEAP8[$29>>0] = 1;
 $30 = HEAP32[$h>>2]|0;
 $31 = (($p) + 20|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$m>>2]|0;
 $33 = (($p) + 24|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$s>>2]|0;
 $35 = (+($34|0));
 $36 = $ms$1 + $35;
 $37 = (($p) + 32|0);
 HEAPF64[$37>>3] = $36;
 $38 = (_parseTimezone($$1,$p)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = (($p) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = $42&1;
 $44 = (($p) + 43|0);
 HEAP8[$44>>0] = $43;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _getDigits($zDate,$varargs) {
 $zDate = $zDate|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$1$lcssa = 0, $$14 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next3 = 0, $arglist_next6 = 0;
 var $arglist_next9 = 0, $cnt$0 = 0, $cnt$1 = 0, $or$cond = 0, $val$0$lcssa = 0, $val$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $$0 = $zDate;$cnt$0 = 0;
 L1: while(1) {
  $arglist_current = HEAP32[$ap>>2]|0;
  $0 = HEAP32[$arglist_current>>2]|0;
  $arglist_next = (($arglist_current) + 4|0);
  HEAP32[$ap>>2] = $arglist_next;
  $arglist_current2 = HEAP32[$ap>>2]|0;
  $1 = HEAP32[$arglist_current2>>2]|0;
  $arglist_next3 = (($arglist_current2) + 4|0);
  HEAP32[$ap>>2] = $arglist_next3;
  $arglist_current5 = HEAP32[$ap>>2]|0;
  $2 = HEAP32[$arglist_current5>>2]|0;
  $arglist_next6 = (($arglist_current5) + 4|0);
  HEAP32[$ap>>2] = $arglist_next6;
  $arglist_current8 = HEAP32[$ap>>2]|0;
  $3 = HEAP32[$arglist_current8>>2]|0;
  $arglist_next9 = (($arglist_current8) + 4|0);
  HEAP32[$ap>>2] = $arglist_next9;
  $arglist_current11 = HEAP32[$ap>>2]|0;
  $4 = HEAP32[$arglist_current11>>2]|0;
  $arglist_next12 = (($arglist_current11) + 4|0);
  HEAP32[$ap>>2] = $arglist_next12;
  $5 = ($0|0)==(0);
  if ($5) {
   $$1$lcssa = $$0;$val$0$lcssa = 0;
  } else {
   $$14 = $$0;$$in = $0;$val$03 = 0;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = HEAP8[$$14>>0]|0;
    $8 = $7&255;
    $9 = (($8) + -48)|0;
    $10 = ($9>>>0)<(10);
    if (!($10)) {
     $cnt$1 = $cnt$0;
     label = 10;
     break L1;
    }
    $11 = ($val$03*10)|0;
    $12 = $7 << 24 >> 24;
    $13 = (($11) + -48)|0;
    $14 = (($13) + ($12))|0;
    $15 = (($$14) + 1|0);
    $16 = ($6|0)==(0);
    if ($16) {
     $$1$lcssa = $15;$val$0$lcssa = $14;
     break;
    } else {
     $$14 = $15;$$in = $6;$val$03 = $14;
    }
   }
  }
  $17 = ($val$0$lcssa|0)<($1|0);
  $18 = ($val$0$lcssa|0)>($2|0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $cnt$1 = $cnt$0;
   label = 10;
   break;
  }
  $19 = ($3|0)==(0);
  if ($19) {
   label = 9;
   break;
  }
  $20 = HEAP8[$$1$lcssa>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($3|0)==($21|0);
  if (!($22)) {
   $cnt$1 = $cnt$0;
   label = 10;
   break;
  }
  HEAP32[$4>>2] = $val$0$lcssa;
  $23 = (($$1$lcssa) + 1|0);
  $24 = (($cnt$0) + 1)|0;
  $$0 = $23;$cnt$0 = $24;
 }
 if ((label|0) == 9) {
  HEAP32[$4>>2] = $val$0$lcssa;
  $25 = (($cnt$0) + 1)|0;
  $cnt$1 = $25;
  STACKTOP = sp;return ($cnt$1|0);
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($cnt$1|0);
 }
 return 0|0;
}
function _parseTimezone($zDate,$p) {
 $zDate = $zDate|0;
 $p = $p|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nHr = 0, $nMn = 0, $sgn$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $nHr = sp + 44|0;
 $nMn = sp + 40|0;
 $$02 = $zDate;
 while(1) {
  $0 = HEAP8[$$02>>0]|0;
  $1 = $0&255;
  $2 = (48 + ($1)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 & 1;
  $5 = ($4<<24>>24)==(0);
  $6 = (($$02) + 1|0);
  if ($5) {
   break;
  } else {
   $$02 = $6;
  }
 }
 $7 = (($p) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP8[$$02>>0]|0;
 if ((($8<<24>>24) == 45)) {
  $sgn$0 = -1;
  label = 7;
 } else if ((($8<<24>>24) == 43)) {
  $sgn$0 = 1;
  label = 7;
 } else {
  $9 = $8 & -33;
  $10 = ($9<<24>>24)==(90);
  if ($10) {
   $$1 = $6;
  } else {
   $11 = ($8<<24>>24)!=(0);
   $12 = $11&1;
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
 }
 do {
  if ((label|0) == 7) {
   HEAP32[$vararg_buffer>>2] = 2;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 0;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 14;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 58;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $nHr;
   $vararg_ptr5 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr5>>2] = 2;
   $vararg_ptr6 = (($vararg_buffer) + 24|0);
   HEAP32[$vararg_ptr6>>2] = 0;
   $vararg_ptr7 = (($vararg_buffer) + 28|0);
   HEAP32[$vararg_ptr7>>2] = 59;
   $vararg_ptr8 = (($vararg_buffer) + 32|0);
   HEAP32[$vararg_ptr8>>2] = 0;
   $vararg_ptr9 = (($vararg_buffer) + 36|0);
   HEAP32[$vararg_ptr9>>2] = $nMn;
   $13 = (_getDigits($6,$vararg_buffer)|0);
   $14 = ($13|0)==(2);
   if ($14) {
    $15 = (($$02) + 6|0);
    $16 = HEAP32[$nMn>>2]|0;
    $17 = HEAP32[$nHr>>2]|0;
    $18 = ($17*60)|0;
    $19 = (($18) + ($16))|0;
    $20 = Math_imul($19, $sgn$0)|0;
    HEAP32[$7>>2] = $20;
    $$1 = $15;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 while(1) {
  $21 = HEAP8[$$1>>0]|0;
  $22 = $21&255;
  $23 = (48 + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 & 1;
  $26 = ($25<<24>>24)==(0);
  $27 = (($$1) + 1|0);
  if ($26) {
   break;
  } else {
   $$1 = $27;
  }
 }
 $28 = ($21<<24>>24)!=(0);
 $29 = $28&1;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _osLocaltime($t,$pTm) {
 $t = $t|0;
 $pTm = $pTm|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_localtime(($t|0))|0);
 $1 = HEAP32[((384 + 260|0))>>2]|0;
 $2 = ($1|0)!=(0);
 $$ = $2 ? 0 : $0;
 $3 = ($$|0)==(0|0);
 if ($3) {
  $4 = $3&1;
  STACKTOP = sp;return ($4|0);
 }
 dest=$pTm+0|0; src=$$+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _parseYyyyMmDd($zDate,$p) {
 $zDate = $zDate|0;
 $p = $p|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $D = 0, $M = 0, $Y = 0, $not$ = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $Y = sp + 68|0;
 $M = sp + 64|0;
 $D = sp + 60|0;
 $0 = HEAP8[$zDate>>0]|0;
 $1 = ($0<<24>>24)==(45);
 $2 = (($zDate) + 1|0);
 $$01 = $1 ? $2 : $zDate;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 9999;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 45;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $Y;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 2;
 $vararg_ptr6 = (($vararg_buffer) + 24|0);
 HEAP32[$vararg_ptr6>>2] = 1;
 $vararg_ptr7 = (($vararg_buffer) + 28|0);
 HEAP32[$vararg_ptr7>>2] = 12;
 $vararg_ptr8 = (($vararg_buffer) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 45;
 $vararg_ptr9 = (($vararg_buffer) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $M;
 $vararg_ptr10 = (($vararg_buffer) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 2;
 $vararg_ptr11 = (($vararg_buffer) + 44|0);
 HEAP32[$vararg_ptr11>>2] = 1;
 $vararg_ptr12 = (($vararg_buffer) + 48|0);
 HEAP32[$vararg_ptr12>>2] = 31;
 $vararg_ptr13 = (($vararg_buffer) + 52|0);
 HEAP32[$vararg_ptr13>>2] = 0;
 $vararg_ptr14 = (($vararg_buffer) + 56|0);
 HEAP32[$vararg_ptr14>>2] = $D;
 $3 = (_getDigits($$01,$vararg_buffer)|0);
 $4 = ($3|0)==(3);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($$01) + 10|0);
 $$1 = $5;
 while(1) {
  $6 = HEAP8[$$1>>0]|0;
  $7 = $6&255;
  $8 = (48 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 & 1;
  $11 = ($6<<24>>24)==(84);
  $not$ = ($10<<24>>24)!=(0);
  $$ = $11 | $not$;
  $12 = (($$1) + 1|0);
  if ($$) {
   $$1 = $12;
  } else {
   break;
  }
 }
 $13 = (_parseHhMmSs($$1,$p)|0);
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = HEAP8[$$1>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $17 = (($p) + 41|0);
    HEAP8[$17>>0] = 0;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $18 = (($p) + 42|0);
 HEAP8[$18>>0] = 0;
 $19 = (($p) + 40|0);
 HEAP8[$19>>0] = 1;
 $20 = HEAP32[$Y>>2]|0;
 $21 = (0 - ($20))|0;
 $22 = $1 ? $21 : $20;
 $23 = (($p) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$M>>2]|0;
 $25 = (($p) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$D>>2]|0;
 $27 = (($p) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = (($p) + 43|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _computeJD($p);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3StmtCurrentTime($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 136|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==(0);
 $10 = ($8|0)==(0);
 $11 = $9 & $10;
 if (!($11)) {
  $27 = $8;$28 = $5;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $12 = (($p) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_sqlite3OsCurrentTimeInt64($14,$2)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $2;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $27 = $22;$28 = $19;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 } else {
  $23 = $2;
  $24 = $23;
  HEAP32[$24>>2] = 0;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function _sqlite3OsCurrentTimeInt64($pVfs,$pTimeOut) {
 $pVfs = $pVfs|0;
 $pTimeOut = $pTimeOut|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $r = 0, $rc$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 $0 = HEAP32[$pVfs>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  $2 = (($pVfs) + 72|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (FUNCTION_TABLE_iii[$3 & 255]($pVfs,$pTimeOut)|0);
   $rc$0 = $5;
   STACKTOP = sp;return ($rc$0|0);
  }
 }
 $6 = (($pVfs) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 255]($pVfs,$r)|0);
 $9 = +HEAPF64[$r>>3];
 $10 = $9 * 8.64E+7;
 $11 = (~~$10)>>>0;
 $12 = +Math_abs($10) >= 1.0 ? $10 > 0.0 ? (Math_min(+Math_floor($10 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($10 - +(~~$10 >>> 0)) / 4294967296.0) >>> 0 : 0;
 $13 = $pTimeOut;
 $14 = $13;
 HEAP32[$14>>2] = $11;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $rc$0 = $8;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3Utf8CharLen($zIn,$nByte) {
 $zIn = $zIn|0;
 $nByte = $nByte|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $r$0$lcssa = 0;
 var $r$03 = 0, $z$04 = 0, $z$1 = 0, $z$2 = 0, $zTerm$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nByte|0)>(-1);
 if ($0) {
  $1 = (($zIn) + ($nByte)|0);
  $zTerm$0$ph = $1;
 } else {
  $zTerm$0$ph = (-1);
 }
 $2 = HEAP8[$zIn>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = ($zTerm$0$ph>>>0)>($zIn>>>0);
 $or$cond2 = $3 & $4;
 if ($or$cond2) {
  $7 = $2;$r$03 = 0;$z$04 = $zIn;
 } else {
  $r$0$lcssa = 0;
  STACKTOP = sp;return ($r$0$lcssa|0);
 }
 while(1) {
  $5 = (($z$04) + 1|0);
  $6 = ($7&255)>(191);
  if ($6) {
   $z$1 = $5;
   while(1) {
    $8 = HEAP8[$z$1>>0]|0;
    $9 = $8 & -64;
    $10 = ($9<<24>>24)==(-128);
    $11 = (($z$1) + 1|0);
    if ($10) {
     $z$1 = $11;
    } else {
     $14 = $8;$z$2 = $z$1;
     break;
    }
   }
  } else {
   $$pre = HEAP8[$5>>0]|0;
   $14 = $$pre;$z$2 = $5;
  }
  $12 = (($r$03) + 1)|0;
  $13 = ($14<<24>>24)!=(0);
  $15 = ($z$2>>>0)<($zTerm$0$ph>>>0);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $7 = $14;$r$03 = $12;$z$04 = $z$2;
  } else {
   $r$0$lcssa = $12;
   break;
  }
 }
 STACKTOP = sp;return ($r$0$lcssa|0);
}
function _sqlite3Utf8Read($pz) {
 $pz = $pz|0;
 var $$c$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0$lcssa = 0, $c$04 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pz>>2]|0;
 $1 = (($0) + 1|0);
 HEAP32[$pz>>2] = $1;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(191);
 if (!($4)) {
  STACKTOP = sp;return ($3|0);
 }
 $5 = (($3) + -192)|0;
 $6 = (5184 + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = HEAP8[$1>>0]|0;
 $10 = $9 & -64;
 $11 = ($10<<24>>24)==(-128);
 if ($11) {
  $14 = $1;$c$04 = $8;
  while(1) {
   $12 = $c$04 << 6;
   $13 = (($14) + 1|0);
   HEAP32[$pz>>2] = $13;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 & 63;
   $18 = $17 | $12;
   $19 = HEAP8[$13>>0]|0;
   $20 = $19 & -64;
   $21 = ($20<<24>>24)==(-128);
   if ($21) {
    $14 = $13;$c$04 = $18;
   } else {
    $c$0$lcssa = $18;
    break;
   }
  }
 } else {
  $c$0$lcssa = $8;
 }
 $22 = ($c$0$lcssa>>>0)<(128);
 $23 = $c$0$lcssa & -2048;
 $24 = ($23|0)==(55296);
 $or$cond = $22 | $24;
 $25 = $c$0$lcssa & -2;
 $26 = ($25|0)==(65534);
 $or$cond3 = $or$cond | $26;
 $$c$0 = $or$cond3 ? 65533 : $c$0$lcssa;
 STACKTOP = sp;return ($$c$0|0);
}
function _sqlite3StrAccumAppend($p,$z,$N) {
 $p = $p|0;
 $z = $z|0;
 $N = $N|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zNew$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($N))|0;
 $3 = (($p) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 do {
  if ($5) {
   $$0 = $N;
  } else {
   $6 = (($p) + 25|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if (!($8)) {
    STACKTOP = sp;return;
   }
   $9 = (($p) + 24|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $12 = (($4) - ($1))|0;
    _setStrAccumError($p,2);
    $13 = ($12|0)<(2);
    if ($13) {
     STACKTOP = sp;return;
    } else {
     $14 = (($12) + -1)|0;
     $$0 = $14;
     break;
    }
   }
   $15 = (($p) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($p) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   $$ = $19 ? 0 : $16;
   $20 = ($1|0)<(0);
   $21 = $20 << 31 >> 31;
   $22 = (($N) + 1)|0;
   $23 = ($22|0)<(0);
   $24 = $23 << 31 >> 31;
   $25 = (_i64Add(($1|0),($21|0),($22|0),($24|0))|0);
   $26 = tempRet0;
   $27 = (($p) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)<(0);
   $30 = $29 << 31 >> 31;
   $31 = ($26|0)>($30|0);
   $32 = ($26|0)==($30|0);
   $33 = ($25>>>0)>($28>>>0);
   $34 = $32 & $33;
   $35 = $31 | $34;
   if ($35) {
    _sqlite3StrAccumReset($p);
    _setStrAccumError($p,2);
    STACKTOP = sp;return;
   }
   HEAP32[$3>>2] = $25;
   $36 = ($10<<24>>24)==(1);
   if ($36) {
    $37 = HEAP32[$p>>2]|0;
    $38 = (_sqlite3DbRealloc($37,$$,$25)|0);
    $zNew$0 = $38;
   } else {
    $39 = (_sqlite3_realloc($$,$25)|0);
    $zNew$0 = $39;
   }
   $40 = ($zNew$0|0)==(0|0);
   if ($40) {
    _sqlite3StrAccumReset($p);
    _setStrAccumError($p,1);
    STACKTOP = sp;return;
   }
   $41 = ($$|0)==(0|0);
   if ($41) {
    $42 = HEAP32[$0>>2]|0;
    $43 = ($42|0)>(0);
    if ($43) {
     $44 = HEAP32[$15>>2]|0;
     _memcpy(($zNew$0|0),($44|0),($42|0))|0;
    }
   }
   HEAP32[$15>>2] = $zNew$0;
   $$0 = $N;
  }
 } while(0);
 $45 = HEAP32[$0>>2]|0;
 $46 = (($p) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($45)|0);
 _memcpy(($48|0),($z|0),($$0|0))|0;
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + ($$0))|0;
 HEAP32[$0>>2] = $50;
 STACKTOP = sp;return;
}
function _setStrAccumError($p,$eError) {
 $p = $p|0;
 $eError = $eError|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 25|0);
 HEAP8[$0>>0] = $eError;
 $1 = (($p) + 16|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3StrAccumReset($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 do {
  if (!($4)) {
   $5 = (($p) + 24|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(1);
   if ($7) {
    $8 = HEAP32[$p>>2]|0;
    _sqlite3DbFree($8,$1);
    break;
   } else {
    _sqlite3_free($1);
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3DbRealloc($db,$p,$n) {
 $db = $db|0;
 $p = $p|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 64|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = ($p|0)==(0|0);
   if ($3) {
    $4 = (_sqlite3DbMallocRaw($db,$n)|0);
    $$0 = $4;
    break;
   }
   $5 = (_isLookaside($db,$p)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $15 = (_sqlite3_realloc($p,$n)|0);
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $$0 = $15;
     break;
    }
    HEAP8[$0>>0] = 1;
    $$0 = 0;
    break;
   }
   $7 = (($db) + 240|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $10 = ($9|0)<($n|0);
   if ($10) {
    $11 = (_sqlite3DbMallocRaw($db,$n)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0 = 0;
    } else {
     $13 = HEAP16[$7>>1]|0;
     $14 = $13&65535;
     _memcpy(($11|0),($p|0),($14|0))|0;
     _sqlite3DbFree($db,$p);
     $$0 = $11;
    }
   } else {
    $$0 = $p;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _isLookaside($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 268|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($p>>>0);
 if ($2) {
  $7 = 0;
 } else {
  $3 = (($db) + 272|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4>>>0)>($p>>>0);
  $7 = $5;
 }
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3AddInt64($pA,$0,$1) {
 $pA = $pA|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $pA;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($1|0)>(-1);
 $9 = ($1|0)==(-1);
 $10 = ($0>>>0)>(4294967295);
 $11 = $9 & $10;
 $12 = $8 | $11;
 if ($12) {
  $13 = ($7|0)>(0);
  $14 = ($7|0)==(0);
  $15 = ($4>>>0)>(0);
  $16 = $14 & $15;
  $17 = $13 | $16;
  $18 = (_i64Subtract(-1,2147483647,($4|0),($7|0))|0);
  $19 = tempRet0;
  $20 = ($19|0)<($1|0);
  $21 = ($19|0)==($1|0);
  $22 = ($18>>>0)<($0>>>0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  $or$cond = $17 & $24;
  if ($or$cond) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $25 = ($7|0)<(0);
  if ($25) {
   $26 = (_i64Subtract(1,-2147483648,($4|0),($7|0))|0);
   $27 = tempRet0;
   $28 = (_i64Add(($0|0),($1|0),1,0)|0);
   $29 = tempRet0;
   $30 = ($27|0)>($29|0);
   $31 = ($27|0)==($29|0);
   $32 = ($26>>>0)>($28>>>0);
   $33 = $31 & $32;
   $34 = $30 | $33;
   if ($34) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $35 = (_i64Add(($4|0),($7|0),($0|0),($1|0))|0);
 $36 = tempRet0;
 $37 = $pA;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _contextMalloc($context,$0,$1) {
 $context = $context|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_sqlite3_context_db_handle($context)|0);
 $3 = (($2) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = ($6|0)<($1|0);
 $8 = ($6|0)==($1|0);
 $9 = ($4>>>0)<($0>>>0);
 $10 = $8 & $9;
 $11 = $7 | $10;
 if ($11) {
  _sqlite3_result_error_toobig($context);
  $z$0 = 0;
  STACKTOP = sp;return ($z$0|0);
 }
 $12 = (_sqlite3Malloc($0)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $z$0 = $12;
  STACKTOP = sp;return ($z$0|0);
 }
 _sqlite3_result_error_nomem($context);
 $z$0 = 0;
 STACKTOP = sp;return ($z$0|0);
}
function _sqlite3GetFuncCollSeq($context$0$3$val) {
 $context$0$3$val = $context$0$3$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($context$0$3$val|0);
}
function _sqlite3MemCompare($pMem1,$pMem2,$pColl) {
 $pMem1 = $pMem1|0;
 $pMem2 = $pMem2|0;
 $pColl = $pColl|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $r1$0 = 0.0, $r2$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pMem1) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($pMem2) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $4 | $1;
 $7 = $6&65535;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = $5 & 1;
  $11 = $2 & 1;
  $12 = (($10) - ($11))|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $7 & 12;
 $14 = ($13|0)==(0);
 if ($14) {
  $72 = $7 & 2;
  $73 = ($72|0)==(0);
  if ($73) {
   $80 = (($pMem1) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($pMem2) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($pMem1) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($pMem2) + 24|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)>($87|0);
   $$2 = $88 ? $87 : $85;
   $89 = (_memcmp($81,$83,$$2)|0);
   $90 = ($89|0)==(0);
   $91 = (($85) - ($87))|0;
   $$3 = $90 ? $91 : $89;
   STACKTOP = sp;return ($$3|0);
  }
  $74 = $2 & 2;
  $75 = ($74|0)==(0);
  if ($75) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $76 = $5 & 2;
  $77 = ($76|0)==(0);
  if ($77) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $78 = ($pColl|0)==(0|0);
  if ($78) {
   $80 = (($pMem1) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($pMem2) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($pMem1) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($pMem2) + 24|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)>($87|0);
   $$2 = $88 ? $87 : $85;
   $89 = (_memcmp($81,$83,$$2)|0);
   $90 = ($89|0)==(0);
   $91 = (($85) - ($87))|0;
   $$3 = $90 ? $91 : $89;
   STACKTOP = sp;return ($$3|0);
  }
  $79 = (_vdbeCompareMemString($pMem1,$pMem2,$pColl)|0);
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = $1 & 4;
 $16 = $15 & $4;
 $17 = ($16<<16>>16)==(0);
 if (!($17)) {
  $18 = (($pMem1) + 16|0);
  $19 = $18;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($pMem2) + 16|0);
  $26 = $25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($24|0)<($31|0);
  $33 = ($24|0)==($31|0);
  $34 = ($21>>>0)<($28>>>0);
  $35 = $33 & $34;
  $36 = $32 | $35;
  if ($36) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $37 = ($24|0)>($31|0);
  $38 = ($24|0)==($31|0);
  $39 = ($21>>>0)>($28>>>0);
  $40 = $38 & $39;
  $41 = $37 | $40;
  $$ = $41&1;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = $2 & 8;
 $43 = ($42|0)==(0);
 do {
  if ($43) {
   $46 = $2 & 4;
   $47 = ($46|0)==(0);
   if ($47) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $48 = (($pMem1) + 16|0);
    $49 = $48;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (+($51>>>0)) + (4294967296.0*(+($54|0)));
    $r1$0 = $55;
    break;
   }
  } else {
   $44 = (($pMem1) + 8|0);
   $45 = +HEAPF64[$44>>3];
   $r1$0 = $45;
  }
 } while(0);
 $56 = $5 & 8;
 $57 = ($56|0)==(0);
 do {
  if ($57) {
   $60 = $5 & 4;
   $61 = ($60|0)==(0);
   if ($61) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $62 = (($pMem2) + 16|0);
    $63 = $62;
    $64 = $63;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($63) + 4)|0;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (+($65>>>0)) + (4294967296.0*(+($68|0)));
    $r2$0 = $69;
    break;
   }
  } else {
   $58 = (($pMem2) + 8|0);
   $59 = +HEAPF64[$58>>3];
   $r2$0 = $59;
  }
 } while(0);
 $70 = $r1$0 < $r2$0;
 if ($70) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = $r1$0 > $r2$0;
 $$1 = $71&1;
 $$0 = $$1;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeCompareMemString($pMem1,$pMem2,$pColl) {
 $pMem1 = $pMem1|0;
 $pMem2 = $pMem2|0;
 $pColl = $pColl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $c2 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $c1 = sp + 40|0;
 $c2 = sp;
 $0 = (($pMem1) + 30|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (($pColl) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)==($3<<24>>24);
 if ($4) {
  $5 = (($pColl) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($pColl) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($pMem1) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($pMem1) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($pMem2) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($pMem2) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$6 & 255]($8,$10,$12,$14,$16)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$c1+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$c2+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _sqlite3VdbeMemShallowCopy($c1,$pMem1,4096);
 _sqlite3VdbeMemShallowCopy($c2,$pMem2,4096);
 $18 = HEAP8[$2>>0]|0;
 $19 = (_sqlite3ValueText($c1,$18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $32 = 0;
 } else {
  $21 = (($c1) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $32 = $22;
 }
 $23 = HEAP8[$2>>0]|0;
 $24 = (_sqlite3ValueText($c2,$23)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  $33 = 0;
 } else {
  $26 = (($c2) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $33 = $27;
 }
 $28 = (($pColl) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($pColl) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $34 = (FUNCTION_TABLE_iiiiii[$29 & 255]($31,$32,$19,$33,$24)|0);
 _sqlite3VdbeMemRelease($c1);
 _sqlite3VdbeMemRelease($c2);
 $$0 = $34;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeMemShallowCopy($pTo,$pFrom,$srcType) {
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 $srcType = $srcType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTo) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 9312;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  _sqlite3VdbeMemReleaseExternal($pTo);
 }
 ;HEAP32[$pTo+0>>2]=HEAP32[$pFrom+0>>2]|0;HEAP32[$pTo+4>>2]=HEAP32[$pFrom+4>>2]|0;HEAP32[$pTo+8>>2]=HEAP32[$pFrom+8>>2]|0;HEAP32[$pTo+12>>2]=HEAP32[$pFrom+12>>2]|0;HEAP32[$pTo+16>>2]=HEAP32[$pFrom+16>>2]|0;HEAP32[$pTo+20>>2]=HEAP32[$pFrom+20>>2]|0;HEAP32[$pTo+24>>2]=HEAP32[$pFrom+24>>2]|0;HEAP32[$pTo+28>>2]=HEAP32[$pFrom+28>>2]|0;
 $4 = (($pTo) + 32|0);
 HEAP32[$4>>2] = 0;
 $5 = (($pFrom) + 28|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 2048;
 $8 = ($7<<16>>16)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP16[$0>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 58367;
 $12 = $11 | $srcType;
 $13 = $12&65535;
 HEAP16[$0>>1] = $13;
 STACKTOP = sp;return;
}
function _sqlite3XPrintf($p,$bFlags,$zFormat,$varargs) {
 $p = $p|0;
 $bFlags = $bFlags|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 _sqlite3VXPrintf($p,$bFlags,$zFormat,$ap);
 STACKTOP = sp;return;
}
function _sqlite3SkipAccumulatorLoad($context) {
 $context = $context|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($context) + 68|0);
 HEAP8[$0>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3ParserAlloc() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Malloc(1612)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  HEAP32[$0>>2] = -1;
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3Parser($yyp,$yymajor,$yyminor$0,$yyminor$1,$pParse) {
 $yyp = $yyp|0;
 $yymajor = $yymajor|0;
 $yyminor$0 = $yyminor$0|0;
 $yyminor$1 = $yyminor$1|0;
 $pParse = $pParse|0;
 var $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $yyminorunion = 0, $yyminorunion$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $yyminorunion$byval_copy = sp + 12|0;
 $yyminorunion = sp;
 $0 = HEAP32[$yyp>>2]|0;
 $1 = ($0|0)<(0);
 if ($1) {
  HEAP32[$yyp>>2] = 0;
  $2 = (($yyp) + 4|0);
  HEAP32[$2>>2] = -1;
  $3 = (($yyp) + 12|0);
  HEAP16[$3>>1] = 0;
  $4 = (($yyp) + 14|0);
  HEAP8[$4>>0] = 0;
 }
 $5 = $yyminor$0;
 $6 = $yyminorunion;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $yyminor$1;
 $10 = (($yyp) + 8|0);
 HEAP32[$10>>2] = $pParse;
 $11 = $yymajor&255;
 $12 = ($yymajor|0)==(254);
 while(1) {
  $13 = (_yy_find_shift_action($yyp,$11)|0);
  $14 = ($13|0)<(642);
  if ($14) {
   label = 5;
   break;
  }
  $18 = ($13|0)<(969);
  if (!($18)) {
   label = 7;
   break;
  }
  $19 = (($13) + -642)|0;
  _yy_reduce($yyp,$19);
  if ($12) {
   label = 10;
   break;
  }
  $20 = HEAP32[$yyp>>2]|0;
  $21 = ($20|0)>(-1);
  if (!($21)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 5) {
  _yy_shift($yyp,$13,$yymajor,$yyminorunion);
  $15 = (($yyp) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -1)|0;
  HEAP32[$15>>2] = $17;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  ;HEAP32[$yyminorunion$byval_copy+0>>2]=HEAP32[$yyminorunion+0>>2]|0;HEAP32[$yyminorunion$byval_copy+4>>2]=HEAP32[$yyminorunion+4>>2]|0;HEAP32[$yyminorunion$byval_copy+8>>2]=HEAP32[$yyminorunion+8>>2]|0;
  _yy_syntax_error($yyp,$yyminorunion$byval_copy);
  $$idx$val = HEAP32[$10>>2]|0;
  _yy_destructor($$idx$val,$11,$yyminorunion);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function _sqlite3ParserFree($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  while(1) {
   _yy_pop_parser_stack($p);
   $3 = HEAP32[$p>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    break;
   }
  }
 }
 _sqlite3_free($p);
 STACKTOP = sp;return;
}
function _sqlite3SetString($pz,$db,$zFormat,$varargs) {
 $pz = $pz|0;
 $db = $db|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_sqlite3VMPrintf($db,$zFormat,$ap)|0);
 $1 = HEAP32[$pz>>2]|0;
 _sqlite3DbFree($db,$1);
 HEAP32[$pz>>2] = $0;
 STACKTOP = sp;return;
}
function _sqlite3VdbeDelete($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 _sqlite3VdbeClearObject($1,$p);
 $2 = (($p) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = (($p) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $8 = (($1) + 4|0);
  HEAP32[$8>>2] = $6;
 } else {
  $7 = (($3) + 52|0);
  HEAP32[$7>>2] = $6;
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = HEAP32[$2>>2]|0;
  $12 = (($9) + 48|0);
  HEAP32[$12>>2] = $11;
 }
 $13 = (($p) + 40|0);
 HEAP32[$13>>2] = -1241070648;
 HEAP32[$p>>2] = 0;
 _sqlite3DbFree($1,$p);
 STACKTOP = sp;return;
}
function _sqlite3WithDelete($db,$pWith) {
 $db = $db|0;
 $pWith = $pWith|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWith|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pWith>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $i$01 = 0;
  while(1) {
   $3 = ((($pWith) + ($i$01<<4)|0) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   _sqlite3ExprListDelete($db,$4);
   $5 = ((($pWith) + ($i$01<<4)|0) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   _sqlite3SelectDelete($db,$6);
   $7 = ((($pWith) + ($i$01<<4)|0) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   _sqlite3DbFree($db,$8);
   $9 = (($i$01) + 1)|0;
   $10 = HEAP32[$pWith>>2]|0;
   $11 = ($9|0)<($10|0);
   if ($11) {
    $i$01 = $9;
   } else {
    break;
   }
  }
 }
 _sqlite3DbFree($db,$pWith);
 STACKTOP = sp;return;
}
function _sqlite3ExprListDelete($db,$pList) {
 $db = $db|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pList) + 8|0);
 $2 = HEAP32[$pList>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $i$01 = 0;$pItem$02 = $4;
  while(1) {
   $5 = HEAP32[$pItem$02>>2]|0;
   _sqlite3ExprDelete($db,$5);
   $6 = (($pItem$02) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   _sqlite3DbFree($db,$7);
   $8 = (($pItem$02) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   _sqlite3DbFree($db,$9);
   $10 = (($i$01) + 1)|0;
   $11 = (($pItem$02) + 20|0);
   $12 = HEAP32[$pList>>2]|0;
   $13 = ($10|0)<($12|0);
   if ($13) {
    $i$01 = $10;$pItem$02 = $11;
   } else {
    break;
   }
  }
 }
 $14 = HEAP32[$1>>2]|0;
 _sqlite3DbFree($db,$14);
 _sqlite3DbFree($db,$pList);
 STACKTOP = sp;return;
}
function _sqlite3SelectDelete($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  _clearSelect($db,$p);
  _sqlite3DbFree($db,$p);
 }
 STACKTOP = sp;return;
}
function _clearSelect($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 _sqlite3ExprListDelete($db,$0);
 $1 = (($p) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3SrcListDelete($db,$2);
 $3 = (($p) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3ExprDelete($db,$4);
 $5 = (($p) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 _sqlite3ExprListDelete($db,$6);
 $7 = (($p) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 _sqlite3ExprDelete($db,$8);
 $9 = (($p) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 _sqlite3ExprListDelete($db,$10);
 $11 = (($p) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 _sqlite3SelectDelete($db,$12);
 $13 = (($p) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 _sqlite3ExprDelete($db,$14);
 $15 = (($p) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 _sqlite3ExprDelete($db,$16);
 $17 = (($p) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 _sqlite3WithDelete($db,$18);
 STACKTOP = sp;return;
}
function _sqlite3SrcListDelete($db,$pList) {
 $db = $db|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($pList) + 8|0);
  $i$01 = 0;$pItem$02 = $3;
  while(1) {
   $4 = (($pItem$02) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   _sqlite3DbFree($db,$5);
   $6 = (($pItem$02) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   _sqlite3DbFree($db,$7);
   $8 = (($pItem$02) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   _sqlite3DbFree($db,$9);
   $10 = (($pItem$02) + 64|0);
   $11 = HEAP32[$10>>2]|0;
   _sqlite3DbFree($db,$11);
   $12 = (($pItem$02) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   _sqlite3DeleteTable($db,$13);
   $14 = (($pItem$02) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   _sqlite3SelectDelete($db,$15);
   $16 = (($pItem$02) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   _sqlite3ExprDelete($db,$17);
   $18 = (($pItem$02) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   _sqlite3IdListDelete($db,$19);
   $20 = (($i$01) + 1)|0;
   $21 = (($pItem$02) + 72|0);
   $22 = HEAP32[$pList>>2]|0;
   $23 = ($20|0)<($22|0);
   if ($23) {
    $i$01 = $20;$pItem$02 = $21;
   } else {
    break;
   }
  }
 }
 _sqlite3DbFree($db,$pList);
 STACKTOP = sp;return;
}
function _sqlite3ExprDelete($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 16384;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = (($p) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   _sqlite3ExprDelete($db,$6);
   $7 = (($p) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   _sqlite3ExprDelete($db,$8);
   $9 = HEAP32[$1>>2]|0;
   $10 = $9 & 65536;
   $11 = ($10|0)==(0);
   if ($11) {
    $15 = $9;
   } else {
    $12 = (($p) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    _sqlite3DbFree($db,$13);
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
   }
   $14 = $15 & 2048;
   $16 = ($14|0)==(0);
   $17 = (($p) + 20|0);
   if ($16) {
    $19 = HEAP32[$17>>2]|0;
    _sqlite3ExprListDelete($db,$19);
    break;
   } else {
    $18 = HEAP32[$17>>2]|0;
    _sqlite3SelectDelete($db,$18);
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = $20 & 32768;
 $22 = ($21|0)==(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 _sqlite3DbFree($db,$p);
 STACKTOP = sp;return;
}
function _sqlite3IdListDelete($db,$pList) {
 $db = $db|0;
 $pList = $pList|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pList) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = HEAP32[$pList>>2]|0;
 if ($3) {
  $6 = $4;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<3)|0);
   $7 = HEAP32[$5>>2]|0;
   _sqlite3DbFree($db,$7);
   $8 = (($i$01) + 1)|0;
   $9 = HEAP32[$1>>2]|0;
   $10 = ($8|0)<($9|0);
   $11 = HEAP32[$pList>>2]|0;
   if ($10) {
    $6 = $11;$i$01 = $8;
   } else {
    $$lcssa = $11;
    break;
   }
  }
 } else {
  $$lcssa = $4;
 }
 _sqlite3DbFree($db,$$lcssa);
 _sqlite3DbFree($db,$pList);
 STACKTOP = sp;return;
}
function _sqlite3VMPrintf($db,$zFormat,$ap) {
 $db = $db|0;
 $zFormat = $zFormat|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $acc = 0, $zBase = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $zBase = sp + 28|0;
 $acc = sp;
 $0 = (($db) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3StrAccumInit($acc,$zBase,70,$1);
 HEAP32[$acc>>2] = $db;
 _sqlite3VXPrintf($acc,1,$zFormat,$ap);
 $2 = (_sqlite3StrAccumFinish($acc)|0);
 $3 = (($acc) + 25|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(1);
 if (!($5)) {
  STACKTOP = sp;return ($2|0);
 }
 $6 = (($db) + 64|0);
 HEAP8[$6>>0] = 1;
 STACKTOP = sp;return ($2|0);
}
function _yy_pop_parser_stack($pParser) {
 $pParser = $pParser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pParser$idx = 0, $pParser$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParser>>2]|0;
 $1 = ($0|0)<(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($pParser) + ($0<<4)|0) + 14|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($pParser) + ($0<<4)|0) + 16|0);
 $pParser$idx = (($pParser) + 8|0);
 $pParser$idx$val = HEAP32[$pParser$idx>>2]|0;
 _yy_destructor($pParser$idx$val,$3,$4);
 $5 = HEAP32[$pParser>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$pParser>>2] = $6;
 STACKTOP = sp;return;
}
function _yy_destructor($yypParser$0$2$val,$yymajor,$yypminor) {
 $yypParser$0$2$val = $yypParser$0$2$val|0;
 $yymajor = $yymajor|0;
 $yypminor = $yypminor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $yymajor&255;
 switch ($0|0) {
 case 252: case 197:  {
  $9 = HEAP32[$yypParser$0$2$val>>2]|0;
  $10 = HEAP32[$yypminor>>2]|0;
  _sqlite3WithDelete($9,$10);
  break;
 }
 case 213: case 212: case 201: case 194:  {
  $7 = HEAP32[$yypParser$0$2$val>>2]|0;
  $8 = HEAP32[$yypminor>>2]|0;
  _sqlite3SrcListDelete($7,$8);
  break;
 }
 case 207: case 196: case 195: case 163:  {
  $1 = HEAP32[$yypParser$0$2$val>>2]|0;
  $2 = HEAP32[$yypminor>>2]|0;
  _sqlite3SelectDelete($1,$2);
  break;
 }
 case 223: case 219: case 217:  {
  $13 = HEAP32[$yypParser$0$2$val>>2]|0;
  $14 = HEAP32[$yypminor>>2]|0;
  _sqlite3IdListDelete($13,$14);
  break;
 }
 case 239: case 234:  {
  $15 = HEAP32[$yypParser$0$2$val>>2]|0;
  $16 = HEAP32[$yypminor>>2]|0;
  _sqlite3DeleteTriggerStep($15,$16);
  break;
 }
 case 175: case 174:  {
  $3 = HEAP32[$yypParser$0$2$val>>2]|0;
  $4 = HEAP32[$yypminor>>2]|0;
  _sqlite3ExprDelete($3,$4);
  break;
 }
 case 243: case 238: case 229: case 227: case 216: case 204: case 202:  {
  $11 = HEAP32[$yypParser$0$2$val>>2]|0;
  $12 = HEAP32[$yypminor>>2]|0;
  _sqlite3ExprDelete($11,$12);
  break;
 }
 case 228: case 221: case 220: case 210: case 209: case 208: case 205: case 203: case 200: case 188: case 179:  {
  $5 = HEAP32[$yypParser$0$2$val>>2]|0;
  $6 = HEAP32[$yypminor>>2]|0;
  _sqlite3ExprListDelete($5,$6);
  break;
 }
 case 236:  {
  $17 = HEAP32[$yypParser$0$2$val>>2]|0;
  $18 = (($yypminor) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _sqlite3IdListDelete($17,$19);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _sqlite3DeleteTriggerStep($db,$pTriggerStep) {
 $db = $db|0;
 $pTriggerStep = $pTriggerStep|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pTriggerStep|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $$01 = $pTriggerStep;
 }
 while(1) {
  $1 = (($$01) + 32|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($$01) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  _sqlite3ExprDelete($db,$4);
  $5 = (($$01) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  _sqlite3ExprListDelete($db,$6);
  $7 = (($$01) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _sqlite3SelectDelete($db,$8);
  $9 = (($$01) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  _sqlite3IdListDelete($db,$10);
  _sqlite3DbFree($db,$$01);
  $11 = ($2|0)==(0|0);
  if ($11) {
   break;
  } else {
   $$01 = $2;
  }
 }
 STACKTOP = sp;return;
}
function _yy_find_shift_action($pParser,$iLookAhead) {
 $pParser = $pParser|0;
 $iLookAhead = $iLookAhead|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iLookAhead$tr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParser>>2]|0;
 $1 = ((($pParser) + ($0<<4)|0) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ($2&65535)>(429);
 $5 = (27200 + ($3<<1)|0);
 $iLookAhead$tr = $iLookAhead;
 while(1) {
  if ($4) {
   label = 4;
   break;
  }
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($6<<16>>16)==(-86);
  if ($8) {
   label = 4;
   break;
  }
  $12 = $iLookAhead$tr&255;
  $13 = (($7) + ($12))|0;
  $14 = ($13>>>0)>(1496);
  if (!($14)) {
   $15 = (29352 + ($13)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==($iLookAhead$tr<<24>>24);
   if ($17) {
    label = 14;
    break;
   }
  }
  $18 = ($iLookAhead$tr<<24>>24)==(0);
  if ($18) {
   break;
  }
  $19 = ($iLookAhead$tr&255)<(70);
  if (!($19)) {
   label = 10;
   break;
  }
  $20 = (30856 + ($12)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 10;
   break;
  } else {
   $iLookAhead$tr = $21;
  }
 }
 if ((label|0) == 4) {
  $9 = (28064 + ($3<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 10) {
  $23 = (($7) + 70)|0;
  $24 = ($23|0)>(-1);
  if ($24) {
   $25 = (29352 + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(70);
   if ($27) {
    $28 = (11872 + ($23<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $$0 = $30;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 else if ((label|0) == 14) {
  $34 = (11872 + ($13<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (28064 + ($3<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $$0 = $33;
 STACKTOP = sp;return ($$0|0);
}
function _yy_shift($yypParser,$yyNewState,$yyMajor,$yypMinor) {
 $yypParser = $yypParser|0;
 $yyNewState = $yyNewState|0;
 $yyMajor = $yyMajor|0;
 $yypMinor = $yypMinor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$yypParser>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[$yypParser>>2] = $1;
 $2 = ($0|0)>(98);
 if ($2) {
  _yyStackOverflow($yypParser);
  STACKTOP = sp;return;
 } else {
  $3 = $yyNewState&65535;
  $4 = ((($yypParser) + ($1<<4)|0) + 12|0);
  HEAP16[$4>>1] = $3;
  $5 = $yyMajor&255;
  $6 = ((($yypParser) + ($1<<4)|0) + 14|0);
  HEAP8[$6>>0] = $5;
  $7 = ((($yypParser) + ($1<<4)|0) + 16|0);
  ;HEAP32[$7+0>>2]=HEAP32[$yypMinor+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$yypMinor+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$yypMinor+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function _yy_reduce($yypParser,$yyruleno) {
 $yypParser = $yypParser|0;
 $yyruleno = $yyruleno|0;
 var $$c100 = 0, $$c107 = 0, $$c108 = 0, $$c115 = 0, $$c116 = 0, $$c123 = 0, $$c124 = 0, $$c131 = 0, $$c132 = 0, $$c140 = 0, $$c141 = 0, $$c150 = 0, $$c151 = 0, $$c164 = 0, $$c165 = 0, $$c170 = 0, $$c171 = 0, $$c189 = 0, $$c190 = 0, $$c225 = 0;
 var $$c229 = 0, $$c23 = 0, $$c24 = 0, $$c243 = 0, $$c246 = 0, $$c248 = 0, $$c28 = 0, $$c29 = 0, $$c327 = 0, $$c328 = 0, $$c329 = 0, $$c331 = 0, $$c348 = 0, $$c47 = 0, $$c48 = 0, $$c99 = 0, $$idx$val = 0, $$idx350$val = 0, $$idx351$val = 0, $$idx352$val = 0;
 var $$idx353$val = 0, $$idx354$val = 0, $$idx355$val = 0, $$idx356$val = 0, $$idx357$val = 0, $$idx358$val = 0, $$idx359$val = 0, $$idx360$val = 0, $$idx361$val = 0, $$idx362$val = 0, $$idx363$val = 0, $$idx364$val = 0, $$idx365$val = 0, $$idx366$val = 0, $$idx367$val = 0, $$idx368$val = 0, $$idx369$val = 0, $$idx370$val = 0, $$idx371$val = 0, $$idx372 = 0;
 var $$idx372$val = 0, $$idx373 = 0, $$idx373$val = 0, $$idx374 = 0, $$idx374$val = 0, $$idx375$val = 0, $$idx376$val = 0, $$idx377$val = 0, $$idx378$val = 0, $$idx379 = 0, $$idx379$val = 0, $$idx380$val = 0, $$idx381$val = 0, $$idx382$val = 0, $$idx383 = 0, $$idx383$val = 0, $$idx384$val = 0, $$idx385$val = 0, $$phi$trans$insert400 = 0, $$pre = 0;
 var $$pre395 = 0, $$pre396 = 0, $$pre401 = 0, $$sum = 0, $$sum1 = 0, $$sum101 = 0, $$sum102 = 0, $$sum105 = 0, $$sum106 = 0, $$sum109 = 0, $$sum11 = 0, $$sum111 = 0, $$sum112 = 0, $$sum114 = 0, $$sum119 = 0, $$sum12 = 0, $$sum121 = 0, $$sum122 = 0, $$sum126 = 0, $$sum129 = 0;
 var $$sum13 = 0, $$sum130 = 0, $$sum133 = 0, $$sum135 = 0, $$sum136 = 0, $$sum138 = 0, $$sum139 = 0, $$sum14 = 0, $$sum143 = 0, $$sum145 = 0, $$sum146 = 0, $$sum147 = 0, $$sum149 = 0, $$sum15 = 0, $$sum153 = 0, $$sum154 = 0, $$sum155 = 0, $$sum156 = 0, $$sum157 = 0, $$sum158 = 0;
 var $$sum159 = 0, $$sum16 = 0, $$sum160 = 0, $$sum161 = 0, $$sum162 = 0, $$sum167 = 0, $$sum168 = 0, $$sum17 = 0, $$sum173 = 0, $$sum174 = 0, $$sum176 = 0, $$sum178 = 0, $$sum179 = 0, $$sum18 = 0, $$sum181 = 0, $$sum182 = 0, $$sum183 = 0, $$sum184 = 0, $$sum186 = 0, $$sum187 = 0;
 var $$sum19 = 0, $$sum192 = 0, $$sum193 = 0, $$sum195 = 0, $$sum197 = 0, $$sum199 = 0, $$sum2 = 0, $$sum20 = 0, $$sum201 = 0, $$sum203 = 0, $$sum204 = 0, $$sum205 = 0, $$sum206 = 0, $$sum207 = 0, $$sum208 = 0, $$sum209 = 0, $$sum210 = 0, $$sum212 = 0, $$sum213 = 0, $$sum215 = 0;
 var $$sum216 = 0, $$sum217 = 0, $$sum218 = 0, $$sum219 = 0, $$sum22 = 0, $$sum220 = 0, $$sum221 = 0, $$sum222 = 0, $$sum223 = 0, $$sum224 = 0, $$sum227 = 0, $$sum231 = 0, $$sum233 = 0, $$sum234 = 0, $$sum237 = 0, $$sum240 = 0, $$sum241 = 0, $$sum242 = 0, $$sum244 = 0, $$sum245 = 0;
 var $$sum247 = 0, $$sum249 = 0, $$sum25 = 0, $$sum251 = 0, $$sum252 = 0, $$sum253 = 0, $$sum254 = 0, $$sum256 = 0, $$sum257 = 0, $$sum259 = 0, $$sum260 = 0, $$sum261 = 0, $$sum263 = 0, $$sum264 = 0, $$sum265 = 0, $$sum266 = 0, $$sum268 = 0, $$sum269 = 0, $$sum27 = 0, $$sum270 = 0;
 var $$sum271 = 0, $$sum272 = 0, $$sum274 = 0, $$sum275 = 0, $$sum279 = 0, $$sum280 = 0, $$sum282 = 0, $$sum284 = 0, $$sum285 = 0, $$sum287 = 0, $$sum289 = 0, $$sum290 = 0, $$sum292 = 0, $$sum294 = 0, $$sum296 = 0, $$sum297 = 0, $$sum298 = 0, $$sum299 = 0, $$sum3 = 0, $$sum300 = 0;
 var $$sum301 = 0, $$sum302 = 0, $$sum304 = 0, $$sum305 = 0, $$sum306 = 0, $$sum308 = 0, $$sum31 = 0, $$sum310 = 0, $$sum311 = 0, $$sum312 = 0, $$sum313 = 0, $$sum314 = 0, $$sum315 = 0, $$sum316 = 0, $$sum317 = 0, $$sum318 = 0, $$sum319 = 0, $$sum320 = 0, $$sum321 = 0, $$sum322 = 0;
 var $$sum323 = 0, $$sum324 = 0, $$sum325 = 0, $$sum326 = 0, $$sum33 = 0, $$sum330 = 0, $$sum332 = 0, $$sum333 = 0, $$sum334 = 0, $$sum335 = 0, $$sum336 = 0, $$sum337 = 0, $$sum338 = 0, $$sum339 = 0, $$sum34 = 0, $$sum340 = 0, $$sum341 = 0, $$sum342 = 0, $$sum343 = 0, $$sum344 = 0;
 var $$sum345 = 0, $$sum346 = 0, $$sum347 = 0, $$sum349 = 0, $$sum35 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum4 = 0, $$sum41 = 0, $$sum43 = 0, $$sum44 = 0, $$sum49 = 0, $$sum5 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0;
 var $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0, $$sum6 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum72 = 0, $$sum73 = 0, $$sum74 = 0;
 var $$sum76 = 0, $$sum77 = 0, $$sum78 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0, $$sum81 = 0, $$sum82 = 0, $$sum83 = 0, $$sum85 = 0, $$sum87 = 0, $$sum90 = 0, $$sum91 = 0, $$sum94 = 0, $$sum96 = 0, $$sum97 = 0, $$sum98 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $all = 0, $cnt$0392 = 0, $dest = 0;
 var $or$cond = 0, $pLoop$0393 = 0, $pLoop$0393$phi = 0, $pNext$0394 = 0, $pNext$0394$phi = 0, $pRhs$0386 = 0, $pRhs$0389 = 0, $phitmp = 0, $v = 0, $v1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $x = 0, $yygotominor = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer14 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $yygotominor = sp;
 $v = sp + 120|0;
 $v1 = sp + 108|0;
 $dest = sp + 88|0;
 $x = sp + 80|0;
 $all = sp + 72|0;
 $0 = (($yypParser) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$yypParser>>2]|0;
 ;HEAP32[$yygotominor+0>>2]=HEAP32[27160+0>>2]|0;HEAP32[$yygotominor+4>>2]=HEAP32[27160+4>>2]|0;HEAP32[$yygotominor+8>>2]=HEAP32[27160+8>>2]|0;
 L1: do {
  switch ($yyruleno|0) {
  case 221: case 218: case 108: case 97: case 85: case 83: case 81: case 68: case 31: case 28:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 74:  {
   $167 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $168 = HEAP32[$167>>2]|0;
   $$c329 = $168;
   HEAP32[$yygotominor>>2] = $$c329;
   $169 = (($yygotominor) + 4|0);
   HEAP32[$169>>2] = 255;
   break;
  }
  case 93:  {
   $$sum324 = (($2) + -3)|0;
   $189 = ((($yypParser) + ($$sum324<<4)|0) + 16|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $192 = HEAP32[$191>>2]|0;
   $$sum325 = (($2) + -2)|0;
   $193 = ((($yypParser) + ($$sum325<<4)|0) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   _sqlite3AddPrimaryKey($1,$190,$192,$194,0);
   break;
  }
  case 66:  {
   $154 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $$idx374 = (($1) + 488|0);
   $$idx374$val = HEAP32[$$idx374>>2]|0;
   _sqlite3DeferForeignKey($$idx374$val,$155);
   break;
  }
  case 67:  {
   $156 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AddCollateType($1,$156);
   break;
  }
  case 105:  {
   HEAP32[$yygotominor>>2] = (5);
   break;
  }
  case 106:  {
   $213 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $$sum317 = (($2) + -1)|0;
   $215 = ((($yypParser) + ($$sum317<<4)|0) + 16|0);
   $216 = HEAP32[$215>>2]|0;
   _sqlite3DropTable($1,$214,0,$216);
   break;
  }
  case 56:  {
   $$sum338 = (($2) + -1)|0;
   $126 = ((($yypParser) + ($$sum338<<4)|0) + 16|0);
   _sqlite3AddDefaultValue($1,$126);
   break;
  }
  case 34:  {
   HEAP8[$yygotominor>>0] = 0;
   break;
  }
  case 92: case 54:  {
   $113 = (($1) + 324|0);
   $114 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $115 = $114;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = (($115) + 4)|0;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = $113;
   $122 = $121;
   HEAP32[$122>>2] = $117;
   $123 = (($121) + 4)|0;
   $124 = $123;
   HEAP32[$124>>2] = $120;
   break;
  }
  case 61:  {
   $137 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $138 = HEAP32[$137>>2]|0;
   $$idx372 = (($1) + 488|0);
   $$idx372$val = HEAP32[$$idx372>>2]|0;
   _sqlite3AddNotNull($$idx372$val,$138);
   break;
  }
  case 44:  {
   $79 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AddColumnType($1,$79);
   break;
  }
  case 119: case 113:  {
   $259 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $260 = HEAP32[$259>>2]|0;
   HEAP32[$yygotominor>>2] = $260;
   break;
  }
  case 114:  {
   $261 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = ($262|0)==(0|0);
   do {
    if ($263) {
     label = 85;
    } else {
     $264 = (($262) + 60|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = ($265|0)==(0|0);
     if ($266) {
      $pRhs$0389 = $262;
     } else {
      $267 = (($x) + 4|0);
      HEAP32[$267>>2] = 0;
      $268 = (_sqlite3SrcListAppendFromTerm($1,0,0,0,$x,$262,0,0)|0);
      $269 = (_sqlite3SelectNew($1,0,$268,0,0,0,0,0,0,0)|0);
      $270 = ($269|0)==(0|0);
      if ($270) {
       label = 85;
       break;
      } else {
       $pRhs$0389 = $269;
      }
     }
     $$sum305 = (($2) + -1)|0;
     $271 = ((($yypParser) + ($$sum305<<4)|0) + 16|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = $272&255;
     $274 = (($pRhs$0389) + 4|0);
     HEAP8[$274>>0] = $273;
     $$sum306 = (($2) + -2)|0;
     $275 = ((($yypParser) + ($$sum306<<4)|0) + 16|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = (($pRhs$0389) + 60|0);
     HEAP32[$277>>2] = $276;
     $278 = HEAP32[$271>>2]|0;
     $279 = ($278|0)==(116);
     if ($279) {
      $pRhs$0386 = $pRhs$0389;
     } else {
      $280 = (($1) + 24|0);
      HEAP8[$280>>0] = 1;
      $pRhs$0386 = $pRhs$0389;
     }
    }
   } while(0);
   if ((label|0) == 85) {
    $281 = HEAP32[$1>>2]|0;
    $$sum304 = (($2) + -2)|0;
    $282 = ((($yypParser) + ($$sum304<<4)|0) + 16|0);
    $283 = HEAP32[$282>>2]|0;
    _sqlite3SelectDelete($281,$283);
    $pRhs$0386 = 0;
   }
   HEAP32[$yygotominor>>2] = $pRhs$0386;
   break;
  }
  case 27:  {
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 242|0);
   HEAP8[$18>>0] = 0;
   $19 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $20 = $19;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = $yygotominor;
   $27 = $26;
   HEAP32[$27>>2] = $22;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = $25;
   break;
  }
  case 70:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 73: case 72:  {
   HEAP32[$yygotominor>>2] = 0;
   $166 = (($yygotominor) + 4|0);
   HEAP32[$166>>2] = 0;
   break;
  }
  case 121:  {
   $$sum289 = (($2) + -1)|0;
   $306 = ((($yypParser) + ($$sum289<<4)|0) + 16|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (_sqlite3SelectNew($1,$307,0,0,0,0,0,128,0,0)|0);
   $309 = ($308|0)==(0|0);
   if ($309) {
    $$sum290 = (($2) + -4)|0;
    $314 = ((($yypParser) + ($$sum290<<4)|0) + 16|0);
    $315 = HEAP32[$314>>2]|0;
    HEAP32[$yygotominor>>2] = $315;
    break L1;
   } else {
    $310 = (($308) + 4|0);
    HEAP8[$310>>0] = 116;
    $$sum292 = (($2) + -4)|0;
    $311 = ((($yypParser) + ($$sum292<<4)|0) + 16|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = (($308) + 60|0);
    HEAP32[$313>>2] = $312;
    HEAP32[$yygotominor>>2] = $308;
    break L1;
   }
   break;
  }
  case 122:  {
   HEAP16[$yygotominor>>1] = 1;
   break;
  }
  case 124: case 123:  {
   HEAP16[$yygotominor>>1] = 0;
   break;
  }
  case 137:  {
   $$sum268 = (($2) + -6)|0;
   $356 = ((($yypParser) + ($$sum268<<4)|0) + 16|0);
   $357 = HEAP32[$356>>2]|0;
   $$sum269 = (($2) + -5)|0;
   $358 = ((($yypParser) + ($$sum269<<4)|0) + 16|0);
   $$sum270 = (($2) + -4)|0;
   $359 = ((($yypParser) + ($$sum270<<4)|0) + 16|0);
   $$sum271 = (($2) + -3)|0;
   $360 = ((($yypParser) + ($$sum271<<4)|0) + 16|0);
   $$sum272 = (($2) + -1)|0;
   $361 = ((($yypParser) + ($$sum272<<4)|0) + 16|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (_sqlite3SrcListAppendFromTerm($1,$357,$358,$359,$360,0,$362,$364)|0);
   HEAP32[$yygotominor>>2] = $365;
   $$sum274 = (($2) + -2)|0;
   $366 = ((($yypParser) + ($$sum274<<4)|0) + 16|0);
   _sqlite3SrcListIndexedBy($1,$365,$366);
   break;
  }
  case 138:  {
   $$sum263 = (($2) + -6)|0;
   $367 = ((($yypParser) + ($$sum263<<4)|0) + 16|0);
   $368 = HEAP32[$367>>2]|0;
   $$sum264 = (($2) + -2)|0;
   $369 = ((($yypParser) + ($$sum264<<4)|0) + 16|0);
   $$sum265 = (($2) + -4)|0;
   $370 = ((($yypParser) + ($$sum265<<4)|0) + 16|0);
   $371 = HEAP32[$370>>2]|0;
   $$sum266 = (($2) + -1)|0;
   $372 = ((($yypParser) + ($$sum266<<4)|0) + 16|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (_sqlite3SrcListAppendFromTerm($1,$368,0,0,$369,$371,$373,$375)|0);
   HEAP32[$yygotominor>>2] = $376;
   break;
  }
  case 132:  {
   $341 = (($yygotominor) + 4|0);
   HEAP32[$341>>2] = 0;
   break;
  }
  case 128:  {
   $328 = HEAP32[$1>>2]|0;
   $329 = (_sqlite3Expr($328,116,0)|0);
   $$sum282 = (($2) + -1)|0;
   $330 = ((($yypParser) + ($$sum282<<4)|0) + 16|0);
   $331 = HEAP32[$330>>2]|0;
   $$idx370$val = HEAP32[$1>>2]|0;
   $332 = (_sqlite3ExprListAppend($$idx370$val,$331,$329)|0);
   HEAP32[$yygotominor>>2] = $332;
   break;
  }
  case 129:  {
   $333 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $334 = (_sqlite3PExpr($1,116,0,0,$333)|0);
   $$sum279 = (($2) + -2)|0;
   $335 = ((($yypParser) + ($$sum279<<4)|0) + 16|0);
   $336 = (_sqlite3PExpr($1,27,0,0,$335)|0);
   $337 = (_sqlite3PExpr($1,122,$336,$334,0)|0);
   $$sum280 = (($2) + -3)|0;
   $338 = ((($yypParser) + ($$sum280<<4)|0) + 16|0);
   $339 = HEAP32[$338>>2]|0;
   $$idx369$val = HEAP32[$1>>2]|0;
   $340 = (_sqlite3ExprListAppend($$idx369$val,$339,$337)|0);
   HEAP32[$yygotominor>>2] = $340;
   break;
  }
  case 133:  {
   $342 = HEAP32[$1>>2]|0;
   $343 = (_sqlite3DbMallocZero($342,80)|0);
   HEAP32[$yygotominor>>2] = $343;
   break;
  }
  case 134:  {
   $344 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $345 = HEAP32[$344>>2]|0;
   HEAP32[$yygotominor>>2] = $345;
   _sqlite3SrcListShiftJoinType($345);
   break;
  }
  case 135:  {
   $$sum275 = (($2) + -1)|0;
   $346 = ((($yypParser) + ($$sum275<<4)|0) + 16|0);
   $347 = HEAP32[$346>>2]|0;
   HEAP32[$yygotominor>>2] = $347;
   $348 = ($347|0)==(0|0);
   if (!($348)) {
    $349 = HEAP32[$347>>2]|0;
    $350 = ($349|0)>(0);
    if ($350) {
     $351 = ((($yypParser) + ($2<<4)|0) + 16|0);
     $352 = HEAP32[$351>>2]|0;
     $353 = $352&255;
     $354 = (($349) + -1)|0;
     $355 = ((($347) + (($354*72)|0)|0) + 44|0);
     HEAP8[$355>>0] = $353;
    }
   }
   break;
  }
  case 136:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 120:  {
   $$sum294 = (($2) + -1)|0;
   $303 = ((($yypParser) + ($$sum294<<4)|0) + 16|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (_sqlite3SelectNew($1,$304,0,0,0,0,0,128,0,0)|0);
   HEAP32[$yygotominor>>2] = $305;
   break;
  }
  case 118:  {
   $$sum296 = (($2) + -6)|0;
   $284 = ((($yypParser) + ($$sum296<<4)|0) + 16|0);
   $285 = HEAP32[$284>>2]|0;
   $$sum297 = (($2) + -5)|0;
   $286 = ((($yypParser) + ($$sum297<<4)|0) + 16|0);
   $287 = HEAP32[$286>>2]|0;
   $$sum298 = (($2) + -4)|0;
   $288 = ((($yypParser) + ($$sum298<<4)|0) + 16|0);
   $289 = HEAP32[$288>>2]|0;
   $$sum299 = (($2) + -3)|0;
   $290 = ((($yypParser) + ($$sum299<<4)|0) + 16|0);
   $291 = HEAP32[$290>>2]|0;
   $$sum300 = (($2) + -2)|0;
   $292 = ((($yypParser) + ($$sum300<<4)|0) + 16|0);
   $293 = HEAP32[$292>>2]|0;
   $$sum301 = (($2) + -1)|0;
   $294 = ((($yypParser) + ($$sum301<<4)|0) + 16|0);
   $295 = HEAP32[$294>>2]|0;
   $$sum302 = (($2) + -7)|0;
   $296 = ((($yypParser) + ($$sum302<<4)|0) + 16|0);
   $297 = HEAP16[$296>>1]|0;
   $298 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = (_sqlite3SelectNew($1,$285,$287,$289,$291,$293,$295,$297,$299,$301)|0);
   HEAP32[$yygotominor>>2] = $302;
   break;
  }
  case 242: case 236: case 161: case 154: case 126:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 243: case 125:  {
   $$sum287 = (($2) + -1)|0;
   $316 = ((($yypParser) + ($$sum287<<4)|0) + 16|0);
   $317 = HEAP32[$316>>2]|0;
   HEAP32[$yygotominor>>2] = $317;
   break;
  }
  case 127:  {
   $$sum284 = (($2) + -2)|0;
   $318 = ((($yypParser) + ($$sum284<<4)|0) + 16|0);
   $319 = HEAP32[$318>>2]|0;
   $$sum285 = (($2) + -1)|0;
   $320 = ((($yypParser) + ($$sum285<<4)|0) + 16|0);
   $321 = HEAP32[$320>>2]|0;
   $$idx371$val = HEAP32[$1>>2]|0;
   $322 = (_sqlite3ExprListAppend($$idx371$val,$319,$321)|0);
   HEAP32[$yygotominor>>2] = $322;
   $323 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = ($324|0)==(0);
   if ($325) {
    $327 = $322;
   } else {
    $326 = ((($yypParser) + ($2<<4)|0) + 16|0);
    _sqlite3ExprListSetName($1,$322,$326,1);
    $$pre = HEAP32[$yygotominor>>2]|0;
    $327 = $$pre;
   }
   $$idx375$val = HEAP32[$1>>2]|0;
   _sqlite3ExprListSetSpan($$idx375$val,$327,$320);
   break;
  }
  case 116:  {
   HEAP32[$yygotominor>>2] = (116);
   break;
  }
  case 109:  {
   $$sum312 = (($2) + -7)|0;
   $217 = ((($yypParser) + ($$sum312<<4)|0) + 16|0);
   $$sum313 = (($2) + -3)|0;
   $218 = ((($yypParser) + ($$sum313<<4)|0) + 16|0);
   $$sum314 = (($2) + -2)|0;
   $219 = ((($yypParser) + ($$sum314<<4)|0) + 16|0);
   $220 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $221 = HEAP32[$220>>2]|0;
   $$sum315 = (($2) + -6)|0;
   $222 = ((($yypParser) + ($$sum315<<4)|0) + 16|0);
   $223 = HEAP32[$222>>2]|0;
   $$sum316 = (($2) + -4)|0;
   $224 = ((($yypParser) + ($$sum316<<4)|0) + 16|0);
   $225 = HEAP32[$224>>2]|0;
   _sqlite3CreateView($1,$217,$218,$219,$221,$223,$225);
   break;
  }
  case 110:  {
   $226 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $227 = HEAP32[$226>>2]|0;
   $$sum311 = (($2) + -1)|0;
   $228 = ((($yypParser) + ($$sum311<<4)|0) + 16|0);
   $229 = HEAP32[$228>>2]|0;
   _sqlite3DropTable($1,$227,1,$229);
   break;
  }
  case 46:  {
   $$sum341 = (($2) + -3)|0;
   $80 = ((($yypParser) + ($$sum341<<4)|0) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP32[$yygotominor>>2] = $81;
   $82 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + ($83)|0);
   $87 = $86;
   $88 = $81;
   $89 = (($87) - ($88))|0;
   $90 = (($yygotominor) + 4|0);
   HEAP32[$90>>2] = $89;
   break;
  }
  case 23:  {
   $9 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Savepoint($1,1,$9);
   break;
  }
  case 5:  {
   _sqlite3BeginParse($1,0);
   break;
  }
  case 19:  {
   _sqlite3RollbackTransaction($1);
   break;
  }
  case 64:  {
   $$sum334 = (($2) + -1)|0;
   $147 = ((($yypParser) + ($$sum334<<4)|0) + 16|0);
   $148 = HEAP32[$147>>2]|0;
   _sqlite3AddCheckConstraint($1,$148);
   break;
  }
  case 103: case 100: case 98: case 82:  {
   $174 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $175 = HEAP32[$174>>2]|0;
   $$c327 = $175;
   HEAP32[$yygotominor>>2] = $$c327;
   break;
  }
  case 86:  {
   $176 = (($yygotominor) + 4|0);
   HEAP32[$176>>2] = 0;
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 90:  {
   $188 = (($1) + 328|0);
   HEAP32[$188>>2] = 0;
   break;
  }
  case 101:  {
   HEAP8[$yygotominor>>0] = 10;
   break;
  }
  case 96:  {
   $$sum318 = (($2) + -6)|0;
   $201 = ((($yypParser) + ($$sum318<<4)|0) + 16|0);
   $202 = HEAP32[$201>>2]|0;
   $$sum319 = (($2) + -3)|0;
   $203 = ((($yypParser) + ($$sum319<<4)|0) + 16|0);
   $$sum320 = (($2) + -2)|0;
   $204 = ((($yypParser) + ($$sum320<<4)|0) + 16|0);
   $205 = HEAP32[$204>>2]|0;
   $$sum321 = (($2) + -1)|0;
   $206 = ((($yypParser) + ($$sum321<<4)|0) + 16|0);
   $207 = HEAP32[$206>>2]|0;
   _sqlite3CreateForeignKey($1,$202,$203,$205,$207);
   $208 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $209 = HEAP32[$208>>2]|0;
   $$idx373 = (($1) + 488|0);
   $$idx373$val = HEAP32[$$idx373>>2]|0;
   _sqlite3DeferForeignKey($$idx373$val,$209);
   break;
  }
  case 104:  {
   HEAP32[$yygotominor>>2] = (4);
   break;
  }
  case 102:  {
   $210 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $211&255;
   HEAP8[$yygotominor>>0] = $212;
   break;
  }
  case 65:  {
   $$sum332 = (($2) + -2)|0;
   $149 = ((($yypParser) + ($$sum332<<4)|0) + 16|0);
   $$sum333 = (($2) + -1)|0;
   $150 = ((($yypParser) + ($$sum333<<4)|0) + 16|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $153 = HEAP32[$152>>2]|0;
   _sqlite3CreateForeignKey($1,0,$149,$151,$153);
   break;
  }
  case 58:  {
   $127 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (_sqlite3PExpr($1,157,$128,0,0)|0);
   HEAP32[$v>>2] = $129;
   $$sum337 = (($2) + -1)|0;
   $130 = ((($yypParser) + ($$sum337<<4)|0) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($v) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = ((($yypParser) + ($2<<4)|0) + 24|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($v) + 8|0);
   HEAP32[$135>>2] = $134;
   _sqlite3AddDefaultValue($1,$v);
   break;
  }
  case 59:  {
   $136 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanExpr($v1,$1,97,$136);
   _sqlite3AddDefaultValue($1,$v1);
   break;
  }
  case 18: case 17:  {
   _sqlite3CommitTransaction($1);
   break;
  }
  case 111:  {
   ;HEAP32[$dest+0>>2]=HEAP32[10184+0>>2]|0;HEAP32[$dest+4>>2]=HEAP32[10184+4>>2]|0;HEAP32[$dest+8>>2]=HEAP32[10184+8>>2]|0;HEAP32[$dest+12>>2]=HEAP32[10184+12>>2]|0;HEAP32[$dest+16>>2]=HEAP32[10184+16>>2]|0;
   $230 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $231 = HEAP32[$230>>2]|0;
   (_sqlite3Select($1,$231,$dest)|0);
   $232 = HEAP32[$1>>2]|0;
   $233 = HEAP32[$230>>2]|0;
   _sqlite3SelectDelete($232,$233);
   break;
  }
  case 112:  {
   $234 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ($235|0)==(0|0);
   if ($236) {
    $256 = HEAP32[$1>>2]|0;
    $$sum308 = (($2) + -1)|0;
    $257 = ((($yypParser) + ($$sum308<<4)|0) + 16|0);
    $258 = HEAP32[$257>>2]|0;
    _sqlite3WithDelete($256,$258);
   } else {
    $$sum310 = (($2) + -1)|0;
    $237 = ((($yypParser) + ($$sum310<<4)|0) + 16|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = (($235) + 76|0);
    HEAP32[$239>>2] = $238;
    $240 = (($235) + 60|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = ($241|0)==(0|0);
    if (!($242)) {
     $250 = $241;$cnt$0392 = 1;$pLoop$0393 = $235;$pNext$0394 = 0;
     while(1) {
      $243 = (($pLoop$0393) + 64|0);
      HEAP32[$243>>2] = $pNext$0394;
      $244 = (($pLoop$0393) + 6|0);
      $245 = HEAP16[$244>>1]|0;
      $246 = $245&65535;
      $247 = $246 | 4096;
      $248 = $247&65535;
      HEAP16[$244>>1] = $248;
      $249 = ($250|0)==(0|0);
      if ($249) {
       break;
      }
      $$phi$trans$insert400 = (($250) + 60|0);
      $$pre401 = HEAP32[$$phi$trans$insert400>>2]|0;
      $phitmp = (($cnt$0392) + 1)|0;
      $pNext$0394$phi = $pLoop$0393;$pLoop$0393$phi = $250;$250 = $$pre401;$cnt$0392 = $phitmp;$pNext$0394 = $pNext$0394$phi;$pLoop$0393 = $pLoop$0393$phi;
     }
     $251 = HEAP32[$1>>2]|0;
     $252 = (($251) + 104|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ($253|0)!=(0);
     $255 = ($cnt$0392|0)>($253|0);
     $or$cond = $254 & $255;
     if ($or$cond) {
      _sqlite3ErrorMsg($1,10208,$vararg_buffer2);
     }
    }
   }
   HEAP32[$yygotominor>>2] = $235;
   break;
  }
  case 62:  {
   $$sum335 = (($2) + -1)|0;
   $139 = ((($yypParser) + ($$sum335<<4)|0) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $$sum336 = (($2) + -2)|0;
   $143 = ((($yypParser) + ($$sum336<<4)|0) + 16|0);
   $144 = HEAP32[$143>>2]|0;
   _sqlite3AddPrimaryKey($1,0,$140,$142,$144);
   break;
  }
  case 63:  {
   $145 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $146 = HEAP32[$145>>2]|0;
   (_sqlite3CreateIndex($1,0,0,0,0,$146,0,0,0,0)|0);
   break;
  }
  case 94:  {
   $$sum323 = (($2) + -2)|0;
   $195 = ((($yypParser) + ($$sum323<<4)|0) + 16|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $198 = HEAP32[$197>>2]|0;
   (_sqlite3CreateIndex($1,0,0,0,$196,$198,0,0,0,0)|0);
   break;
  }
  case 95:  {
   $$sum322 = (($2) + -2)|0;
   $199 = ((($yypParser) + ($$sum322<<4)|0) + 16|0);
   $200 = HEAP32[$199>>2]|0;
   _sqlite3AddCheckConstraint($1,$200);
   break;
  }
  case 99:  {
   HEAP32[$yygotominor>>2] = (10);
   break;
  }
  case 38:  {
   $$sum342 = (($2) + -2)|0;
   $45 = ((($yypParser) + ($$sum342<<4)|0) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$yygotominor>>2] = $46;
   $47 = (($1) + 508|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48;
   $50 = $46;
   $51 = (($49) - ($50))|0;
   $52 = (($1) + 512|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + ($53))|0;
   $55 = (($yygotominor) + 4|0);
   HEAP32[$55>>2] = $54;
   break;
  }
  case 26:  {
   $$sum345 = (($2) + -1)|0;
   $11 = ((($yypParser) + ($$sum345<<4)|0) + 16|0);
   $12 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$sum346 = (($2) + -4)|0;
   $13 = ((($yypParser) + ($$sum346<<4)|0) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $$sum347 = (($2) + -2)|0;
   $15 = ((($yypParser) + ($$sum347<<4)|0) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   _sqlite3StartTable($1,$11,$12,$14,0,0,$16);
   break;
  }
  case 222: case 219: case 107: case 84: case 69: case 30: case 29:  {
   HEAP32[$yygotominor>>2] = (1);
   break;
  }
  case 47:  {
   $$sum340 = (($2) + -5)|0;
   $91 = ((($yypParser) + ($$sum340<<4)|0) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP32[$yygotominor>>2] = $92;
   $93 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($94)|0);
   $98 = $97;
   $99 = $92;
   $100 = (($98) - ($99))|0;
   $101 = (($yygotominor) + 4|0);
   HEAP32[$101>>2] = $100;
   break;
  }
  case 49:  {
   $$sum339 = (($2) + -1)|0;
   $102 = ((($yypParser) + ($$sum339<<4)|0) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP32[$yygotominor>>2] = $103;
   $104 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107;
   $109 = $103;
   $110 = (($108) + ($105))|0;
   $111 = (($110) - ($109))|0;
   $112 = (($yygotominor) + 4|0);
   HEAP32[$112>>2] = $111;
   break;
  }
  case 76:  {
   HEAP32[$yygotominor>>2] = (7);
   break;
  }
  case 75:  {
   $170 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $171 << 8;
   $$c328 = $172;
   HEAP32[$yygotominor>>2] = $$c328;
   $173 = (($yygotominor) + 4|0);
   HEAP32[$173>>2] = 65280;
   break;
  }
  case 77:  {
   HEAP32[$yygotominor>>2] = (8);
   break;
  }
  case 78:  {
   HEAP32[$yygotominor>>2] = (9);
   break;
  }
  case 79:  {
   HEAP32[$yygotominor>>2] = (6);
   break;
  }
  case 80:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 39:  {
   $56 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AddColumn($1,$56);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = $yygotominor;
   $64 = $63;
   HEAP32[$64>>2] = $59;
   $65 = (($63) + 4)|0;
   $66 = $65;
   HEAP32[$66>>2] = $62;
   $67 = (($1) + 328|0);
   HEAP32[$67>>2] = 0;
   break;
  }
  case 9:  {
   $$sum349 = (($2) + -1)|0;
   $3 = ((($yypParser) + ($$sum349<<4)|0) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   _sqlite3BeginTransaction($1,$4);
   break;
  }
  case 33:  {
   $34 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $35 = HEAP32[$34>>2]|0;
   _sqlite3EndTable($1,0,0,0,$35);
   $36 = HEAP32[$1>>2]|0;
   $37 = HEAP32[$34>>2]|0;
   _sqlite3SelectDelete($36,$37);
   break;
  }
  case 8:  {
   _sqlite3FinishCoding($1);
   break;
  }
  case 32:  {
   $$sum343 = (($2) + -2)|0;
   $30 = ((($yypParser) + ($$sum343<<4)|0) + 16|0);
   $$sum344 = (($2) + -1)|0;
   $31 = ((($yypParser) + ($$sum344<<4)|0) + 16|0);
   $32 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $33 = HEAP8[$32>>0]|0;
   _sqlite3EndTable($1,$30,$31,$33,0);
   break;
  }
  case 279: case 263: case 262: case 261: case 260: case 259: case 258: case 257: case 256: case 247: case 150: case 141: case 131: case 130: case 48: case 45: case 42: case 41: case 40:  {
   $68 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $69 = $68;
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $75 = $yygotominor;
   $76 = $75;
   HEAP32[$76>>2] = $71;
   $77 = (($75) + 4)|0;
   $78 = $77;
   HEAP32[$78>>2] = $74;
   break;
  }
  case 117: case 115: case 16: case 15: case 14:  {
   $5 = ((($yypParser) + ($2<<4)|0) + 14|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $$c348 = $7;
   HEAP32[$yygotominor>>2] = $$c348;
   break;
  }
  case 7:  {
   _sqlite3BeginParse($1,2);
   break;
  }
  case 87:  {
   $$sum326 = (($2) + -1)|0;
   $177 = ((($yypParser) + ($$sum326<<4)|0) + 16|0);
   $178 = $177;
   $179 = $178;
   $180 = HEAP32[$179>>2]|0;
   $181 = (($178) + 4)|0;
   $182 = $181;
   $183 = HEAP32[$182>>2]|0;
   $184 = $yygotominor;
   $185 = $184;
   HEAP32[$185>>2] = $180;
   $186 = (($184) + 4)|0;
   $187 = $186;
   HEAP32[$187>>2] = $183;
   break;
  }
  case 24:  {
   $10 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Savepoint($1,2,$10);
   break;
  }
  case 6:  {
   _sqlite3BeginParse($1,1);
   break;
  }
  case 22:  {
   $8 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Savepoint($1,0,$8);
   break;
  }
  case 71:  {
   $$sum330 = (($2) + -1)|0;
   $157 = ((($yypParser) + ($$sum330<<4)|0) + 16|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $160 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161 ^ -1;
   $163 = $158 & $162;
   $164 = HEAP32[$159>>2]|0;
   $165 = $163 | $164;
   $$c331 = $165;
   HEAP32[$yygotominor>>2] = $$c331;
   break;
  }
  case 13:  {
   HEAP32[$yygotominor>>2] = (7);
   break;
  }
  case 57: case 55:  {
   $125 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AddDefaultValue($1,$125);
   break;
  }
  case 35:  {
   $38 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(5);
   $41 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   if ($40) {
    $43 = (_sqlite3_strnicmp($42,10144,5)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     HEAP8[$yygotominor>>0] = 32;
     break L1;
    }
   }
   HEAP8[$yygotominor>>0] = 0;
   HEAP32[$vararg_buffer>>2] = $39;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $42;
   _sqlite3ErrorMsg($1,10152,$vararg_buffer);
   break;
  }
  case 139:  {
   $$sum251 = (($2) + -6)|0;
   $377 = ((($yypParser) + ($$sum251<<4)|0) + 16|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ($378|0)==(0|0);
   if ($379) {
    $$sum259 = (($2) + -2)|0;
    $380 = ((($yypParser) + ($$sum259<<4)|0) + 20|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = ($381|0)==(0);
    if ($382) {
     $$sum260 = (($2) + -1)|0;
     $383 = ((($yypParser) + ($$sum260<<4)|0) + 16|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = ($384|0)==(0|0);
     if ($385) {
      $386 = ((($yypParser) + ($2<<4)|0) + 16|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = ($387|0)==(0|0);
      if ($388) {
       $$sum261 = (($2) + -4)|0;
       $389 = ((($yypParser) + ($$sum261<<4)|0) + 16|0);
       $390 = HEAP32[$389>>2]|0;
       HEAP32[$yygotominor>>2] = $390;
       break L1;
      }
     }
    }
   }
   $$sum252 = (($2) + -4)|0;
   $391 = ((($yypParser) + ($$sum252<<4)|0) + 16|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = HEAP32[$392>>2]|0;
   $394 = ($393|0)==(1);
   if (!($394)) {
    _sqlite3SrcListShiftJoinType($392);
    $416 = HEAP32[$391>>2]|0;
    $417 = (_sqlite3SelectNew($1,0,$416,0,0,0,0,512,0,0)|0);
    $418 = HEAP32[$377>>2]|0;
    $$sum253 = (($2) + -2)|0;
    $419 = ((($yypParser) + ($$sum253<<4)|0) + 16|0);
    $$sum254 = (($2) + -1)|0;
    $420 = ((($yypParser) + ($$sum254<<4)|0) + 16|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = ((($yypParser) + ($2<<4)|0) + 16|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = (_sqlite3SrcListAppendFromTerm($1,$418,0,0,$419,$417,$421,$423)|0);
    HEAP32[$yygotominor>>2] = $424;
    break L1;
   }
   $$sum256 = (($2) + -2)|0;
   $395 = ((($yypParser) + ($$sum256<<4)|0) + 16|0);
   $$sum257 = (($2) + -1)|0;
   $396 = ((($yypParser) + ($$sum257<<4)|0) + 16|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = (_sqlite3SrcListAppendFromTerm($1,$378,0,0,$395,0,$397,$399)|0);
   HEAP32[$yygotominor>>2] = $400;
   $401 = ($400|0)==(0|0);
   if (!($401)) {
    $402 = HEAP32[$400>>2]|0;
    $403 = (($402) + -1)|0;
    $404 = HEAP32[$391>>2]|0;
    $405 = (($404) + 16|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = ((($400) + (($403*72)|0)|0) + 16|0);
    HEAP32[$407>>2] = $406;
    $408 = (($404) + 12|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = ((($400) + (($403*72)|0)|0) + 12|0);
    HEAP32[$410>>2] = $409;
    $411 = (($404) + 28|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ((($400) + (($403*72)|0)|0) + 28|0);
    HEAP32[$413>>2] = $412;
    HEAP32[$408>>2] = 0;
    HEAP32[$405>>2] = 0;
    HEAP32[$411>>2] = 0;
   }
   $414 = HEAP32[$1>>2]|0;
   $415 = HEAP32[$391>>2]|0;
   _sqlite3SrcListDelete($414,$415);
   break;
  }
  case 149: case 140:  {
   HEAP32[$yygotominor>>2] = 0;
   $425 = (($yygotominor) + 4|0);
   HEAP32[$425>>2] = 0;
   break;
  }
  case 143:  {
   HEAP32[$yygotominor>>2] = (1);
   break;
  }
  case 142:  {
   $426 = HEAP32[$1>>2]|0;
   $$sum249 = (($2) + -1)|0;
   $427 = ((($yypParser) + ($$sum249<<4)|0) + 16|0);
   $428 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $429 = (_sqlite3SrcListAppend($426,0,$427,$428)|0);
   HEAP32[$yygotominor>>2] = $429;
   break;
  }
  case 144:  {
   $$sum247 = (($2) + -1)|0;
   $430 = ((($yypParser) + ($$sum247<<4)|0) + 16|0);
   $431 = (_sqlite3JoinType($1,$430,0,0)|0);
   $$c248 = $431;
   HEAP32[$yygotominor>>2] = $$c248;
   break;
  }
  case 179: case 153:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 180: case 152:  {
   $$sum237 = (($2) + -1)|0;
   $442 = ((($yypParser) + ($$sum237<<4)|0) + 16|0);
   $443 = HEAP32[$442>>2]|0;
   HEAP32[$yygotominor>>2] = $443;
   break;
  }
  case 235: case 162: case 155:  {
   $444 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $445 = HEAP32[$444>>2]|0;
   HEAP32[$yygotominor>>2] = $445;
   break;
  }
  case 156:  {
   $$sum233 = (($2) + -3)|0;
   $446 = ((($yypParser) + ($$sum233<<4)|0) + 16|0);
   $447 = HEAP32[$446>>2]|0;
   $$sum234 = (($2) + -1)|0;
   $448 = ((($yypParser) + ($$sum234<<4)|0) + 16|0);
   $449 = HEAP32[$448>>2]|0;
   $$idx368$val = HEAP32[$1>>2]|0;
   $450 = (_sqlite3ExprListAppend($$idx368$val,$447,$449)|0);
   HEAP32[$yygotominor>>2] = $450;
   $451 = ($450|0)==(0|0);
   if (!($451)) {
    $452 = ((($yypParser) + ($2<<4)|0) + 16|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = $453&255;
    $455 = HEAP32[$450>>2]|0;
    $456 = (($455) + -1)|0;
    $457 = (($450) + 8|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ((($458) + (($456*20)|0)|0) + 12|0);
    HEAP8[$459>>0] = $454;
   }
   break;
  }
  case 145:  {
   $$sum244 = (($2) + -2)|0;
   $432 = ((($yypParser) + ($$sum244<<4)|0) + 16|0);
   $$sum245 = (($2) + -1)|0;
   $433 = ((($yypParser) + ($$sum245<<4)|0) + 16|0);
   $434 = (_sqlite3JoinType($1,$432,$433,0)|0);
   $$c246 = $434;
   HEAP32[$yygotominor>>2] = $$c246;
   break;
  }
  case 146:  {
   $$sum240 = (($2) + -3)|0;
   $435 = ((($yypParser) + ($$sum240<<4)|0) + 16|0);
   $$sum241 = (($2) + -2)|0;
   $436 = ((($yypParser) + ($$sum241<<4)|0) + 16|0);
   $$sum242 = (($2) + -1)|0;
   $437 = ((($yypParser) + ($$sum242<<4)|0) + 16|0);
   $438 = (_sqlite3JoinType($1,$435,$436,$437)|0);
   $$c243 = $438;
   HEAP32[$yygotominor>>2] = $$c243;
   break;
  }
  case 233: case 231: case 171: case 164: case 147:  {
   $439 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $440 = HEAP32[$439>>2]|0;
   HEAP32[$yygotominor>>2] = $440;
   break;
  }
  case 234: case 232: case 170: case 163: case 148:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 151:  {
   HEAP32[$yygotominor>>2] = 0;
   $441 = (($yygotominor) + 4|0);
   HEAP32[$441>>2] = 1;
   break;
  }
  case 160: case 158:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 159:  {
   HEAP32[$yygotominor>>2] = (1);
   break;
  }
  case 165:  {
   HEAP32[$yygotominor>>2] = 0;
   $471 = (($yygotominor) + 4|0);
   HEAP32[$471>>2] = 0;
   break;
  }
  case 166:  {
   $472 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $473 = HEAP32[$472>>2]|0;
   HEAP32[$yygotominor>>2] = $473;
   $474 = (($yygotominor) + 4|0);
   HEAP32[$474>>2] = 0;
   break;
  }
  case 167:  {
   $$sum227 = (($2) + -2)|0;
   $475 = ((($yypParser) + ($$sum227<<4)|0) + 16|0);
   $476 = HEAP32[$475>>2]|0;
   HEAP32[$yygotominor>>2] = $476;
   $477 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = (($yygotominor) + 4|0);
   $$c229 = $478;
   HEAP32[$479>>2] = $$c229;
   break;
  }
  case 157:  {
   $$sum231 = (($2) + -1)|0;
   $460 = ((($yypParser) + ($$sum231<<4)|0) + 16|0);
   $461 = HEAP32[$460>>2]|0;
   $$idx367$val = HEAP32[$1>>2]|0;
   $462 = (_sqlite3ExprListAppend($$idx367$val,0,$461)|0);
   HEAP32[$yygotominor>>2] = $462;
   $463 = ($462|0)==(0|0);
   if (!($463)) {
    $464 = (($462) + 8|0);
    $465 = HEAP32[$464>>2]|0;
    $466 = ($465|0)==(0|0);
    if (!($466)) {
     $467 = ((($yypParser) + ($2<<4)|0) + 16|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = $468&255;
     $470 = (($465) + 12|0);
     HEAP8[$470>>0] = $469;
    }
   }
   break;
  }
  case 181:  {
   $539 = HEAP32[$1>>2]|0;
   $$sum201 = (($2) + -2)|0;
   $540 = ((($yypParser) + ($$sum201<<4)|0) + 16|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $543 = (_sqlite3IdListAppend($539,$541,$542)|0);
   HEAP32[$yygotominor>>2] = $543;
   break;
  }
  case 182:  {
   $544 = HEAP32[$1>>2]|0;
   $545 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $546 = (_sqlite3IdListAppend($544,0,$545)|0);
   HEAP32[$yygotominor>>2] = $546;
   break;
  }
  case 183:  {
   $547 = ((($yypParser) + ($2<<4)|0) + 16|0);
   ;HEAP32[$yygotominor+0>>2]=HEAP32[$547+0>>2]|0;HEAP32[$yygotominor+4>>2]=HEAP32[$547+4>>2]|0;HEAP32[$yygotominor+8>>2]=HEAP32[$547+8>>2]|0;
   break;
  }
  case 184:  {
   $$sum197 = (($2) + -1)|0;
   $548 = ((($yypParser) + ($$sum197<<4)|0) + 16|0);
   $549 = HEAP32[$548>>2]|0;
   HEAP32[$yygotominor>>2] = $549;
   $$sum199 = (($2) + -2)|0;
   $550 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$idx383 = ((($yypParser) + ($$sum199<<4)|0) + 16|0);
   $$idx383$val = HEAP32[$$idx383>>2]|0;
   _spanSet($yygotominor,$$idx383$val,$550);
   break;
  }
  case 191: case 190: case 185:  {
   $551 = ((($yypParser) + ($2<<4)|0) + 14|0);
   $552 = HEAP8[$551>>0]|0;
   $553 = $552&255;
   $554 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanExpr($yygotominor,$1,$553,$554);
   break;
  }
  case 168:  {
   $$sum224 = (($2) + -2)|0;
   $480 = ((($yypParser) + ($$sum224<<4)|0) + 16|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = (($yygotominor) + 4|0);
   $$c225 = $481;
   HEAP32[$482>>2] = $$c225;
   $483 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $484 = HEAP32[$483>>2]|0;
   HEAP32[$yygotominor>>2] = $484;
   break;
  }
  case 169:  {
   $$sum221 = (($2) + -5)|0;
   $485 = ((($yypParser) + ($$sum221<<4)|0) + 16|0);
   $486 = HEAP32[$485>>2]|0;
   _sqlite3WithPush($1,$486,1);
   $$sum222 = (($2) + -2)|0;
   $487 = ((($yypParser) + ($$sum222<<4)|0) + 16|0);
   $488 = HEAP32[$487>>2]|0;
   $$sum223 = (($2) + -1)|0;
   $489 = ((($yypParser) + ($$sum223<<4)|0) + 16|0);
   _sqlite3SrcListIndexedBy($1,$488,$489);
   $490 = HEAP32[$487>>2]|0;
   $491 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $492 = HEAP32[$491>>2]|0;
   _sqlite3DeleteFrom($1,$490,$492);
   break;
  }
  case 172:  {
   $$sum216 = (($2) + -7)|0;
   $493 = ((($yypParser) + ($$sum216<<4)|0) + 16|0);
   $494 = HEAP32[$493>>2]|0;
   _sqlite3WithPush($1,$494,1);
   $$sum217 = (($2) + -4)|0;
   $495 = ((($yypParser) + ($$sum217<<4)|0) + 16|0);
   $496 = HEAP32[$495>>2]|0;
   $$sum218 = (($2) + -3)|0;
   $497 = ((($yypParser) + ($$sum218<<4)|0) + 16|0);
   _sqlite3SrcListIndexedBy($1,$496,$497);
   $$sum219 = (($2) + -1)|0;
   $498 = ((($yypParser) + ($$sum219<<4)|0) + 16|0);
   $499 = HEAP32[$498>>2]|0;
   _sqlite3ExprListCheckLength($1,$499,10248);
   $500 = HEAP32[$495>>2]|0;
   $501 = HEAP32[$498>>2]|0;
   $502 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $503 = HEAP32[$502>>2]|0;
   $$sum220 = (($2) + -5)|0;
   $504 = ((($yypParser) + ($$sum220<<4)|0) + 16|0);
   $505 = HEAP8[$504>>0]|0;
   $506 = $505&255;
   _sqlite3Update($1,$500,$501,$503,$506);
   break;
  }
  case 173:  {
   $$sum213 = (($2) + -4)|0;
   $507 = ((($yypParser) + ($$sum213<<4)|0) + 16|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $510 = HEAP32[$509>>2]|0;
   $$idx366$val = HEAP32[$1>>2]|0;
   $511 = (_sqlite3ExprListAppend($$idx366$val,$508,$510)|0);
   HEAP32[$yygotominor>>2] = $511;
   $$sum215 = (($2) + -2)|0;
   $512 = ((($yypParser) + ($$sum215<<4)|0) + 16|0);
   _sqlite3ExprListSetName($1,$511,$512,1);
   break;
  }
  case 174:  {
   $513 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $514 = HEAP32[$513>>2]|0;
   $$idx365$val = HEAP32[$1>>2]|0;
   $515 = (_sqlite3ExprListAppend($$idx365$val,0,$514)|0);
   HEAP32[$yygotominor>>2] = $515;
   $$sum212 = (($2) + -2)|0;
   $516 = ((($yypParser) + ($$sum212<<4)|0) + 16|0);
   _sqlite3ExprListSetName($1,$515,$516,1);
   break;
  }
  case 175:  {
   $$sum207 = (($2) + -5)|0;
   $517 = ((($yypParser) + ($$sum207<<4)|0) + 16|0);
   $518 = HEAP32[$517>>2]|0;
   _sqlite3WithPush($1,$518,1);
   $$sum208 = (($2) + -2)|0;
   $519 = ((($yypParser) + ($$sum208<<4)|0) + 16|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $522 = HEAP32[$521>>2]|0;
   $$sum209 = (($2) + -1)|0;
   $523 = ((($yypParser) + ($$sum209<<4)|0) + 16|0);
   $524 = HEAP32[$523>>2]|0;
   $$sum210 = (($2) + -4)|0;
   $525 = ((($yypParser) + ($$sum210<<4)|0) + 16|0);
   $526 = HEAP8[$525>>0]|0;
   $527 = $526&255;
   _sqlite3Insert($1,$520,$522,$524,$527);
   break;
  }
  case 176:  {
   $$sum203 = (($2) + -6)|0;
   $528 = ((($yypParser) + ($$sum203<<4)|0) + 16|0);
   $529 = HEAP32[$528>>2]|0;
   _sqlite3WithPush($1,$529,1);
   $$sum204 = (($2) + -3)|0;
   $530 = ((($yypParser) + ($$sum204<<4)|0) + 16|0);
   $531 = HEAP32[$530>>2]|0;
   $$sum205 = (($2) + -2)|0;
   $532 = ((($yypParser) + ($$sum205<<4)|0) + 16|0);
   $533 = HEAP32[$532>>2]|0;
   $$sum206 = (($2) + -5)|0;
   $534 = ((($yypParser) + ($$sum206<<4)|0) + 16|0);
   $535 = HEAP8[$534>>0]|0;
   $536 = $535&255;
   _sqlite3Insert($1,$531,0,$533,$536);
   break;
  }
  case 177:  {
   $537 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $538 = HEAP8[$537>>0]|0;
   HEAP8[$yygotominor>>0] = $538;
   break;
  }
  case 178:  {
   HEAP8[$yygotominor>>0] = 5;
   break;
  }
  case 187: case 186:  {
   $555 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanExpr($yygotominor,$1,27,$555);
   break;
  }
  case 188:  {
   $$sum195 = (($2) + -2)|0;
   $556 = ((($yypParser) + ($$sum195<<4)|0) + 16|0);
   $557 = (_sqlite3PExpr($1,27,0,0,$556)|0);
   $558 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $559 = (_sqlite3PExpr($1,27,0,0,$558)|0);
   $560 = (_sqlite3PExpr($1,122,$557,$559,0)|0);
   HEAP32[$yygotominor>>2] = $560;
   $$idx382$val = HEAP32[$556>>2]|0;
   _spanSet($yygotominor,$$idx382$val,$558);
   break;
  }
  case 189:  {
   $$sum192 = (($2) + -4)|0;
   $561 = ((($yypParser) + ($$sum192<<4)|0) + 16|0);
   $562 = (_sqlite3PExpr($1,27,0,0,$561)|0);
   $$sum193 = (($2) + -2)|0;
   $563 = ((($yypParser) + ($$sum193<<4)|0) + 16|0);
   $564 = (_sqlite3PExpr($1,27,0,0,$563)|0);
   $565 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $566 = (_sqlite3PExpr($1,27,0,0,$565)|0);
   $567 = (_sqlite3PExpr($1,122,$564,$566,0)|0);
   $568 = (_sqlite3PExpr($1,122,$562,$567,0)|0);
   HEAP32[$yygotominor>>2] = $568;
   $$idx381$val = HEAP32[$561>>2]|0;
   _spanSet($yygotominor,$$idx381$val,$565);
   break;
  }
  case 192:  {
   $569 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $570 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $571 = HEAP32[$570>>2]|0;
   $572 = ($571>>>0)>(1);
   do {
    if ($572) {
     $573 = HEAP32[$569>>2]|0;
     $574 = HEAP8[$573>>0]|0;
     $575 = ($574<<24>>24)==(35);
     if ($575) {
      $576 = (($573) + 1|0);
      $577 = HEAP8[$576>>0]|0;
      $578 = $577&255;
      $579 = (($578) + -48)|0;
      $580 = ($579>>>0)<(10);
      if ($580) {
       $581 = (($1) + 18|0);
       $582 = HEAP8[$581>>0]|0;
       $583 = ($582<<24>>24)==(0);
       if ($583) {
        HEAP32[$vararg_buffer4>>2] = $569;
        _sqlite3ErrorMsg($1,10120,$vararg_buffer4);
        HEAP32[$yygotominor>>2] = 0;
        break;
       }
       $584 = (_sqlite3PExpr($1,159,0,0,$569)|0);
       HEAP32[$yygotominor>>2] = $584;
       $585 = ($584|0)==(0|0);
       if (!($585)) {
        $586 = HEAP32[$569>>2]|0;
        $587 = (($586) + 1|0);
        $588 = (($584) + 28|0);
        (_sqlite3GetInt32($587,$588)|0);
       }
      } else {
       label = 167;
      }
     } else {
      label = 167;
     }
    } else {
     label = 167;
    }
   } while(0);
   if ((label|0) == 167) {
    _spanExpr($yygotominor,$1,135,$569);
    $589 = HEAP32[$yygotominor>>2]|0;
    _sqlite3ExprAssignVarNumber($1,$589);
   }
   $$idx380$val = HEAP32[$569>>2]|0;
   _spanSet($yygotominor,$$idx380$val,$569);
   break;
  }
  case 193:  {
   $$sum187 = (($2) + -2)|0;
   $590 = ((($yypParser) + ($$sum187<<4)|0) + 16|0);
   $591 = HEAP32[$590>>2]|0;
   $592 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $593 = (_sqlite3ExprAddCollateToken($1,$591,$592)|0);
   HEAP32[$yygotominor>>2] = $593;
   $594 = ((($yypParser) + ($$sum187<<4)|0) + 20|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = (($yygotominor) + 4|0);
   $$c189 = $595;
   HEAP32[$596>>2] = $$c189;
   $597 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = HEAP32[$592>>2]|0;
   $600 = (($599) + ($598)|0);
   $601 = (($yygotominor) + 8|0);
   $$c190 = $600;
   HEAP32[$601>>2] = $$c190;
   break;
  }
  case 194:  {
   $$sum183 = (($2) + -3)|0;
   $602 = ((($yypParser) + ($$sum183<<4)|0) + 16|0);
   $603 = HEAP32[$602>>2]|0;
   $$sum184 = (($2) + -1)|0;
   $604 = ((($yypParser) + ($$sum184<<4)|0) + 16|0);
   $605 = (_sqlite3PExpr($1,38,$603,0,$604)|0);
   HEAP32[$yygotominor>>2] = $605;
   $$sum186 = (($2) + -5)|0;
   $606 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$idx379 = ((($yypParser) + ($$sum186<<4)|0) + 16|0);
   $$idx379$val = HEAP32[$$idx379>>2]|0;
   _spanSet($yygotominor,$$idx379$val,$606);
   break;
  }
  case 195:  {
   $$sum178 = (($2) + -1)|0;
   $607 = ((($yypParser) + ($$sum178<<4)|0) + 16|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = ($608|0)==(0|0);
   if ($609) {
    $617 = 0;
   } else {
    $610 = HEAP32[$608>>2]|0;
    $611 = HEAP32[$1>>2]|0;
    $612 = (($611) + 112|0);
    $613 = HEAP32[$612>>2]|0;
    $614 = ($610|0)>($613|0);
    if ($614) {
     $$sum182 = (($2) + -4)|0;
     $615 = ((($yypParser) + ($$sum182<<4)|0) + 16|0);
     HEAP32[$vararg_buffer7>>2] = $615;
     _sqlite3ErrorMsg($1,10264,$vararg_buffer7);
     $$pre395 = HEAP32[$607>>2]|0;
     $617 = $$pre395;
    } else {
     $617 = $608;
    }
   }
   $$sum179 = (($2) + -4)|0;
   $616 = ((($yypParser) + ($$sum179<<4)|0) + 16|0);
   $618 = (_sqlite3ExprFunction($1,$617,$616)|0);
   HEAP32[$yygotominor>>2] = $618;
   $619 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$idx378$val = HEAP32[$616>>2]|0;
   _spanSet($yygotominor,$$idx378$val,$619);
   $$sum181 = (($2) + -2)|0;
   $620 = ((($yypParser) + ($$sum181<<4)|0) + 16|0);
   $621 = HEAP16[$620>>1]|0;
   $622 = ($621<<16>>16)==(0);
   if (!($622)) {
    $623 = HEAP32[$yygotominor>>2]|0;
    $624 = ($623|0)==(0|0);
    if (!($624)) {
     $625 = (($623) + 4|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626 | 16;
     HEAP32[$625>>2] = $627;
    }
   }
   break;
  }
  case 209:  {
   $$sum160 = (($2) + -2)|0;
   $685 = ((($yypParser) + ($$sum160<<4)|0) + 16|0);
   $686 = HEAP32[$685>>2]|0;
   $$idx362$val = HEAP32[$1>>2]|0;
   $687 = (_sqlite3ExprListAppend($$idx362$val,0,$686)|0);
   $$sum161 = (($2) + -4)|0;
   $688 = ((($yypParser) + ($$sum161<<4)|0) + 16|0);
   $689 = HEAP32[$688>>2]|0;
   $$idx361$val = HEAP32[$1>>2]|0;
   $690 = (_sqlite3ExprListAppend($$idx361$val,$687,$689)|0);
   $691 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $692 = HEAP32[$691>>2]|0;
   $$idx360$val = HEAP32[$1>>2]|0;
   $693 = (_sqlite3ExprListAppend($$idx360$val,$690,$692)|0);
   $$sum162 = (($2) + -3)|0;
   $694 = ((($yypParser) + ($$sum162<<4)|0) + 16|0);
   $695 = (_sqlite3ExprFunction($1,$693,$694)|0);
   HEAP32[$yygotominor>>2] = $695;
   $696 = ((($yypParser) + ($$sum162<<4)|0) + 24|0);
   $697 = HEAP32[$696>>2]|0;
   $698 = ($697|0)==(0);
   if ($698) {
    $707 = $695;
   } else {
    $699 = (_sqlite3PExpr($1,19,$695,0,0)|0);
    HEAP32[$yygotominor>>2] = $699;
    $707 = $699;
   }
   $700 = ((($yypParser) + ($$sum161<<4)|0) + 20|0);
   $701 = HEAP32[$700>>2]|0;
   $702 = (($yygotominor) + 4|0);
   $$c164 = $701;
   HEAP32[$702>>2] = $$c164;
   $703 = ((($yypParser) + ($2<<4)|0) + 24|0);
   $704 = HEAP32[$703>>2]|0;
   $705 = (($yygotominor) + 8|0);
   $$c165 = $704;
   HEAP32[$705>>2] = $$c165;
   $706 = ($707|0)==(0|0);
   if (!($706)) {
    $708 = (($707) + 4|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = $709 | 128;
    HEAP32[$708>>2] = $710;
   }
   break;
  }
  case 196:  {
   $$sum176 = (($2) + -3)|0;
   $628 = ((($yypParser) + ($$sum176<<4)|0) + 16|0);
   $629 = (_sqlite3ExprFunction($1,0,$628)|0);
   HEAP32[$yygotominor>>2] = $629;
   $630 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$idx377$val = HEAP32[$628>>2]|0;
   _spanSet($yygotominor,$$idx377$val,$630);
   break;
  }
  case 197:  {
   $631 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $632 = (_sqlite3ExprFunction($1,0,$631)|0);
   HEAP32[$yygotominor>>2] = $632;
   $$idx376$val = HEAP32[$631>>2]|0;
   _spanSet($yygotominor,$$idx376$val,$631);
   break;
  }
  case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 198:  {
   $$sum173 = (($2) + -1)|0;
   $633 = ((($yypParser) + ($$sum173<<4)|0) + 14|0);
   $634 = HEAP8[$633>>0]|0;
   $635 = $634&255;
   $$sum174 = (($2) + -2)|0;
   $636 = ((($yypParser) + ($$sum174<<4)|0) + 16|0);
   $637 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanBinaryExpr($yygotominor,$1,$635,$636,$637);
   break;
  }
  case 206:  {
   $638 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $639 = $638;
   $640 = $639;
   $641 = HEAP32[$640>>2]|0;
   $642 = (($639) + 4)|0;
   $643 = $642;
   $644 = HEAP32[$643>>2]|0;
   $645 = $yygotominor;
   $646 = $645;
   HEAP32[$646>>2] = $641;
   $647 = (($645) + 4)|0;
   $648 = $647;
   HEAP32[$648>>2] = $644;
   $649 = (($yygotominor) + 8|0);
   HEAP32[$649>>2] = 0;
   break;
  }
  case 207:  {
   $650 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $651 = $650;
   $652 = $651;
   $653 = HEAP32[$652>>2]|0;
   $654 = (($651) + 4)|0;
   $655 = $654;
   $656 = HEAP32[$655>>2]|0;
   $657 = $yygotominor;
   $658 = $657;
   HEAP32[$658>>2] = $653;
   $659 = (($657) + 4)|0;
   $660 = $659;
   HEAP32[$660>>2] = $656;
   $661 = (($yygotominor) + 8|0);
   HEAP32[$661>>2] = 1;
   break;
  }
  case 208:  {
   $662 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $663 = HEAP32[$662>>2]|0;
   $$idx364$val = HEAP32[$1>>2]|0;
   $664 = (_sqlite3ExprListAppend($$idx364$val,0,$663)|0);
   $$sum167 = (($2) + -2)|0;
   $665 = ((($yypParser) + ($$sum167<<4)|0) + 16|0);
   $666 = HEAP32[$665>>2]|0;
   $$idx363$val = HEAP32[$1>>2]|0;
   $667 = (_sqlite3ExprListAppend($$idx363$val,$664,$666)|0);
   $$sum168 = (($2) + -1)|0;
   $668 = ((($yypParser) + ($$sum168<<4)|0) + 16|0);
   $669 = (_sqlite3ExprFunction($1,$667,$668)|0);
   HEAP32[$yygotominor>>2] = $669;
   $670 = ((($yypParser) + ($$sum168<<4)|0) + 24|0);
   $671 = HEAP32[$670>>2]|0;
   $672 = ($671|0)==(0);
   if ($672) {
    $681 = $669;
   } else {
    $673 = (_sqlite3PExpr($1,19,$669,0,0)|0);
    HEAP32[$yygotominor>>2] = $673;
    $681 = $673;
   }
   $674 = ((($yypParser) + ($$sum167<<4)|0) + 20|0);
   $675 = HEAP32[$674>>2]|0;
   $676 = (($yygotominor) + 4|0);
   $$c170 = $675;
   HEAP32[$676>>2] = $$c170;
   $677 = ((($yypParser) + ($2<<4)|0) + 24|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = (($yygotominor) + 8|0);
   $$c171 = $678;
   HEAP32[$679>>2] = $$c171;
   $680 = ($681|0)==(0|0);
   if (!($680)) {
    $682 = (($681) + 4|0);
    $683 = HEAP32[$682>>2]|0;
    $684 = $683 | 128;
    HEAP32[$682>>2] = $684;
   }
   break;
  }
  case 210:  {
   $711 = ((($yypParser) + ($2<<4)|0) + 14|0);
   $712 = HEAP8[$711>>0]|0;
   $713 = $712&255;
   $$sum159 = (($2) + -1)|0;
   $714 = ((($yypParser) + ($$sum159<<4)|0) + 16|0);
   $715 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanUnaryPostfix($yygotominor,$1,$713,$714,$715);
   break;
  }
  case 211:  {
   $$sum158 = (($2) + -2)|0;
   $716 = ((($yypParser) + ($$sum158<<4)|0) + 16|0);
   $717 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanUnaryPostfix($yygotominor,$1,77,$716,$717);
   break;
  }
  case 212:  {
   $$sum157 = (($2) + -2)|0;
   $718 = ((($yypParser) + ($$sum157<<4)|0) + 16|0);
   $719 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanBinaryExpr($yygotominor,$1,73,$718,$719);
   $720 = HEAP32[$719>>2]|0;
   $721 = HEAP32[$yygotominor>>2]|0;
   $$idx385$val = HEAP32[$1>>2]|0;
   _binaryToUnaryIfNull($$idx385$val,$720,$721,76);
   break;
  }
  case 223:  {
   $$sum135 = (($2) + -1)|0;
   $758 = ((($yypParser) + ($$sum135<<4)|0) + 16|0);
   $759 = HEAP32[$758>>2]|0;
   $760 = ($759|0)==(0|0);
   if ($760) {
    $$sum143 = (($2) + -3)|0;
    $761 = ((($yypParser) + ($$sum143<<4)|0) + 16|0);
    $762 = HEAP32[$761>>2]|0;
    $763 = (10304 + ($762<<3)|0);
    $764 = (_sqlite3PExpr($1,132,0,0,$763)|0);
    HEAP32[$yygotominor>>2] = $764;
    $765 = HEAP32[$1>>2]|0;
    $$sum145 = (($2) + -4)|0;
    $766 = ((($yypParser) + ($$sum145<<4)|0) + 16|0);
    $767 = HEAP32[$766>>2]|0;
    _sqlite3ExprDelete($765,$767);
   } else {
    $$sum136 = (($2) + -4)|0;
    $768 = ((($yypParser) + ($$sum136<<4)|0) + 16|0);
    $769 = HEAP32[$768>>2]|0;
    $770 = (_sqlite3PExpr($1,75,$769,0,0)|0);
    HEAP32[$yygotominor>>2] = $770;
    $771 = ($770|0)==(0|0);
    if ($771) {
     $775 = HEAP32[$1>>2]|0;
     $776 = HEAP32[$758>>2]|0;
     _sqlite3ExprListDelete($775,$776);
    } else {
     $772 = HEAP32[$758>>2]|0;
     $773 = (($770) + 20|0);
     HEAP32[$773>>2] = $772;
     $774 = HEAP32[$yygotominor>>2]|0;
     _sqlite3ExprSetHeight($1,$774);
    }
    $$sum138 = (($2) + -3)|0;
    $777 = ((($yypParser) + ($$sum138<<4)|0) + 16|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = ($778|0)==(0);
    if (!($779)) {
     $780 = HEAP32[$yygotominor>>2]|0;
     $781 = (_sqlite3PExpr($1,19,$780,0,0)|0);
     HEAP32[$yygotominor>>2] = $781;
    }
   }
   $$sum139 = (($2) + -4)|0;
   $782 = ((($yypParser) + ($$sum139<<4)|0) + 20|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = (($yygotominor) + 4|0);
   $$c140 = $783;
   HEAP32[$784>>2] = $$c140;
   $785 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $788 = HEAP32[$787>>2]|0;
   $789 = (($788) + ($786)|0);
   $790 = (($yygotominor) + 8|0);
   $$c141 = $789;
   HEAP32[$790>>2] = $$c141;
   break;
  }
  case 213:  {
   $$sum156 = (($2) + -3)|0;
   $722 = ((($yypParser) + ($$sum156<<4)|0) + 16|0);
   $723 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _spanBinaryExpr($yygotominor,$1,148,$722,$723);
   $724 = HEAP32[$723>>2]|0;
   $725 = HEAP32[$yygotominor>>2]|0;
   $$idx384$val = HEAP32[$1>>2]|0;
   _binaryToUnaryIfNull($$idx384$val,$724,$725,77);
   break;
  }
  case 215: case 214:  {
   $$sum155 = (($2) + -1)|0;
   $726 = ((($yypParser) + ($$sum155<<4)|0) + 14|0);
   $727 = HEAP8[$726>>0]|0;
   $728 = $727&255;
   $729 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $730 = ((($yypParser) + ($$sum155<<4)|0) + 16|0);
   _spanUnaryPrefix($yygotominor,$1,$728,$729,$730);
   break;
  }
  case 216:  {
   $731 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$sum154 = (($2) + -1)|0;
   $732 = ((($yypParser) + ($$sum154<<4)|0) + 16|0);
   _spanUnaryPrefix($yygotominor,$1,157,$731,$732);
   break;
  }
  case 217:  {
   $733 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$sum153 = (($2) + -1)|0;
   $734 = ((($yypParser) + ($$sum153<<4)|0) + 16|0);
   _spanUnaryPrefix($yygotominor,$1,158,$733,$734);
   break;
  }
  case 220:  {
   $$sum146 = (($2) + -2)|0;
   $735 = ((($yypParser) + ($$sum146<<4)|0) + 16|0);
   $736 = HEAP32[$735>>2]|0;
   $$idx359$val = HEAP32[$1>>2]|0;
   $737 = (_sqlite3ExprListAppend($$idx359$val,0,$736)|0);
   $738 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $739 = HEAP32[$738>>2]|0;
   $$idx358$val = HEAP32[$1>>2]|0;
   $740 = (_sqlite3ExprListAppend($$idx358$val,$737,$739)|0);
   $$sum147 = (($2) + -4)|0;
   $741 = ((($yypParser) + ($$sum147<<4)|0) + 16|0);
   $742 = HEAP32[$741>>2]|0;
   $743 = (_sqlite3PExpr($1,74,$742,0,0)|0);
   HEAP32[$yygotominor>>2] = $743;
   $744 = ($743|0)==(0|0);
   if ($744) {
    $746 = HEAP32[$1>>2]|0;
    _sqlite3ExprListDelete($746,$740);
   } else {
    $745 = (($743) + 20|0);
    HEAP32[$745>>2] = $740;
   }
   $$sum149 = (($2) + -3)|0;
   $747 = ((($yypParser) + ($$sum149<<4)|0) + 16|0);
   $748 = HEAP32[$747>>2]|0;
   $749 = ($748|0)==(0);
   if (!($749)) {
    $750 = HEAP32[$yygotominor>>2]|0;
    $751 = (_sqlite3PExpr($1,19,$750,0,0)|0);
    HEAP32[$yygotominor>>2] = $751;
   }
   $752 = ((($yypParser) + ($$sum147<<4)|0) + 20|0);
   $753 = HEAP32[$752>>2]|0;
   $754 = (($yygotominor) + 4|0);
   $$c150 = $753;
   HEAP32[$754>>2] = $$c150;
   $755 = ((($yypParser) + ($2<<4)|0) + 24|0);
   $756 = HEAP32[$755>>2]|0;
   $757 = (($yygotominor) + 8|0);
   $$c151 = $756;
   HEAP32[$757>>2] = $$c151;
   break;
  }
  case 226:  {
   $840 = HEAP32[$1>>2]|0;
   $$sum111 = (($2) + -1)|0;
   $841 = ((($yypParser) + ($$sum111<<4)|0) + 16|0);
   $842 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $843 = (_sqlite3SrcListAppend($840,0,$841,$842)|0);
   $$sum112 = (($2) + -3)|0;
   $844 = ((($yypParser) + ($$sum112<<4)|0) + 16|0);
   $845 = HEAP32[$844>>2]|0;
   $846 = (_sqlite3PExpr($1,75,$845,0,0)|0);
   HEAP32[$yygotominor>>2] = $846;
   $847 = ($846|0)==(0|0);
   if ($847) {
    $855 = HEAP32[$1>>2]|0;
    _sqlite3SrcListDelete($855,$843);
   } else {
    $848 = (_sqlite3SelectNew($1,0,$843,0,0,0,0,0,0,0)|0);
    $849 = HEAP32[$yygotominor>>2]|0;
    $850 = (($849) + 20|0);
    HEAP32[$850>>2] = $848;
    $851 = HEAP32[$yygotominor>>2]|0;
    $852 = (($851) + 4|0);
    $853 = HEAP32[$852>>2]|0;
    $854 = $853 | 2048;
    HEAP32[$852>>2] = $854;
    _sqlite3ExprSetHeight($1,$851);
   }
   $$sum114 = (($2) + -2)|0;
   $856 = ((($yypParser) + ($$sum114<<4)|0) + 16|0);
   $857 = HEAP32[$856>>2]|0;
   $858 = ($857|0)==(0);
   if (!($858)) {
    $859 = HEAP32[$yygotominor>>2]|0;
    $860 = (_sqlite3PExpr($1,19,$859,0,0)|0);
    HEAP32[$yygotominor>>2] = $860;
   }
   $861 = ((($yypParser) + ($$sum112<<4)|0) + 20|0);
   $862 = HEAP32[$861>>2]|0;
   $863 = (($yygotominor) + 4|0);
   $$c115 = $862;
   HEAP32[$863>>2] = $$c115;
   $864 = HEAP32[$842>>2]|0;
   $865 = ($864|0)==(0|0);
   if ($865) {
    $869 = ((($yypParser) + ($$sum111<<4)|0) + 20|0);
    $870 = HEAP32[$869>>2]|0;
    $871 = HEAP32[$841>>2]|0;
    $872 = (($871) + ($870)|0);
    $874 = $872;
   } else {
    $866 = ((($yypParser) + ($2<<4)|0) + 20|0);
    $867 = HEAP32[$866>>2]|0;
    $868 = (($864) + ($867)|0);
    $874 = $868;
   }
   $873 = (($yygotominor) + 8|0);
   $$c116 = $874;
   HEAP32[$873>>2] = $$c116;
   break;
  }
  case 224:  {
   $791 = (_sqlite3PExpr($1,119,0,0,0)|0);
   HEAP32[$yygotominor>>2] = $791;
   $792 = ($791|0)==(0|0);
   if ($792) {
    $800 = HEAP32[$1>>2]|0;
    $$sum129 = (($2) + -1)|0;
    $801 = ((($yypParser) + ($$sum129<<4)|0) + 16|0);
    $802 = HEAP32[$801>>2]|0;
    _sqlite3SelectDelete($800,$802);
   } else {
    $$sum133 = (($2) + -1)|0;
    $793 = ((($yypParser) + ($$sum133<<4)|0) + 16|0);
    $794 = HEAP32[$793>>2]|0;
    $795 = (($791) + 20|0);
    HEAP32[$795>>2] = $794;
    $796 = HEAP32[$yygotominor>>2]|0;
    $797 = (($796) + 4|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = $798 | 2048;
    HEAP32[$797>>2] = $799;
    _sqlite3ExprSetHeight($1,$796);
   }
   $$sum130 = (($2) + -2)|0;
   $803 = ((($yypParser) + ($$sum130<<4)|0) + 16|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = (($yygotominor) + 4|0);
   $$c131 = $804;
   HEAP32[$805>>2] = $$c131;
   $806 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $807 = HEAP32[$806>>2]|0;
   $808 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $809 = HEAP32[$808>>2]|0;
   $810 = (($809) + ($807)|0);
   $811 = (($yygotominor) + 8|0);
   $$c132 = $810;
   HEAP32[$811>>2] = $$c132;
   break;
  }
  case 225:  {
   $$sum119 = (($2) + -4)|0;
   $812 = ((($yypParser) + ($$sum119<<4)|0) + 16|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = (_sqlite3PExpr($1,75,$813,0,0)|0);
   HEAP32[$yygotominor>>2] = $814;
   $815 = ($814|0)==(0|0);
   if ($815) {
    $823 = HEAP32[$1>>2]|0;
    $$sum121 = (($2) + -1)|0;
    $824 = ((($yypParser) + ($$sum121<<4)|0) + 16|0);
    $825 = HEAP32[$824>>2]|0;
    _sqlite3SelectDelete($823,$825);
   } else {
    $$sum126 = (($2) + -1)|0;
    $816 = ((($yypParser) + ($$sum126<<4)|0) + 16|0);
    $817 = HEAP32[$816>>2]|0;
    $818 = (($814) + 20|0);
    HEAP32[$818>>2] = $817;
    $819 = HEAP32[$yygotominor>>2]|0;
    $820 = (($819) + 4|0);
    $821 = HEAP32[$820>>2]|0;
    $822 = $821 | 2048;
    HEAP32[$820>>2] = $822;
    _sqlite3ExprSetHeight($1,$819);
   }
   $$sum122 = (($2) + -3)|0;
   $826 = ((($yypParser) + ($$sum122<<4)|0) + 16|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = ($827|0)==(0);
   if (!($828)) {
    $829 = HEAP32[$yygotominor>>2]|0;
    $830 = (_sqlite3PExpr($1,19,$829,0,0)|0);
    HEAP32[$yygotominor>>2] = $830;
   }
   $831 = ((($yypParser) + ($$sum119<<4)|0) + 20|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = (($yygotominor) + 4|0);
   $$c123 = $832;
   HEAP32[$833>>2] = $$c123;
   $834 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $837 = HEAP32[$836>>2]|0;
   $838 = (($837) + ($835)|0);
   $839 = (($yygotominor) + 8|0);
   $$c124 = $838;
   HEAP32[$839>>2] = $$c124;
   break;
  }
  case 227:  {
   $875 = (_sqlite3PExpr($1,20,0,0,0)|0);
   HEAP32[$yygotominor>>2] = $875;
   $876 = ($875|0)==(0|0);
   if ($876) {
    $883 = HEAP32[$1>>2]|0;
    $$sum105 = (($2) + -1)|0;
    $884 = ((($yypParser) + ($$sum105<<4)|0) + 16|0);
    $885 = HEAP32[$884>>2]|0;
    _sqlite3SelectDelete($883,$885);
   } else {
    $$sum109 = (($2) + -1)|0;
    $877 = ((($yypParser) + ($$sum109<<4)|0) + 16|0);
    $878 = HEAP32[$877>>2]|0;
    $879 = (($875) + 20|0);
    HEAP32[$879>>2] = $878;
    $880 = (($875) + 4|0);
    $881 = HEAP32[$880>>2]|0;
    $882 = $881 | 2048;
    HEAP32[$880>>2] = $882;
    _sqlite3ExprSetHeight($1,$875);
   }
   $$sum106 = (($2) + -3)|0;
   $886 = ((($yypParser) + ($$sum106<<4)|0) + 16|0);
   $887 = HEAP32[$886>>2]|0;
   $888 = (($yygotominor) + 4|0);
   $$c107 = $887;
   HEAP32[$888>>2] = $$c107;
   $889 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $890 = HEAP32[$889>>2]|0;
   $891 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = (($892) + ($890)|0);
   $894 = (($yygotominor) + 8|0);
   $$c108 = $893;
   HEAP32[$894>>2] = $$c108;
   break;
  }
  case 228:  {
   $$sum94 = (($2) + -3)|0;
   $895 = ((($yypParser) + ($$sum94<<4)|0) + 16|0);
   $896 = HEAP32[$895>>2]|0;
   $897 = (_sqlite3PExpr($1,136,$896,0,0)|0);
   HEAP32[$yygotominor>>2] = $897;
   $898 = ($897|0)==(0|0);
   if ($898) {
    $909 = HEAP32[$1>>2]|0;
    $$sum96 = (($2) + -2)|0;
    $910 = ((($yypParser) + ($$sum96<<4)|0) + 16|0);
    $911 = HEAP32[$910>>2]|0;
    _sqlite3ExprListDelete($909,$911);
    $912 = HEAP32[$1>>2]|0;
    $$sum97 = (($2) + -1)|0;
    $913 = ((($yypParser) + ($$sum97<<4)|0) + 16|0);
    $914 = HEAP32[$913>>2]|0;
    _sqlite3ExprDelete($912,$914);
   } else {
    $$sum101 = (($2) + -1)|0;
    $899 = ((($yypParser) + ($$sum101<<4)|0) + 16|0);
    $900 = HEAP32[$899>>2]|0;
    $901 = ($900|0)==(0|0);
    $$sum102 = (($2) + -2)|0;
    $902 = ((($yypParser) + ($$sum102<<4)|0) + 16|0);
    $903 = HEAP32[$902>>2]|0;
    if ($901) {
     $906 = $897;$907 = $903;
    } else {
     $$idx357$val = HEAP32[$1>>2]|0;
     $904 = (_sqlite3ExprListAppend($$idx357$val,$903,$900)|0);
     $$pre396 = HEAP32[$yygotominor>>2]|0;
     $906 = $$pre396;$907 = $904;
    }
    $905 = (($906) + 20|0);
    HEAP32[$905>>2] = $907;
    $908 = HEAP32[$yygotominor>>2]|0;
    _sqlite3ExprSetHeight($1,$908);
   }
   $$sum98 = (($2) + -4)|0;
   $915 = ((($yypParser) + ($$sum98<<4)|0) + 16|0);
   $916 = HEAP32[$915>>2]|0;
   $917 = (($yygotominor) + 4|0);
   $$c99 = $916;
   HEAP32[$917>>2] = $$c99;
   $918 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $919 = HEAP32[$918>>2]|0;
   $920 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $921 = HEAP32[$920>>2]|0;
   $922 = (($921) + ($919)|0);
   $923 = (($yygotominor) + 8|0);
   $$c100 = $922;
   HEAP32[$923>>2] = $$c100;
   break;
  }
  case 271: case 270:  {
   $1063 = ((($yypParser) + ($2<<4)|0) + 14|0);
   $1064 = HEAP8[$1063>>0]|0;
   $1065 = $1064&255;
   $$c48 = $1065;
   HEAP32[$yygotominor>>2] = $$c48;
   $1066 = (($yygotominor) + 4|0);
   HEAP32[$1066>>2] = 0;
   break;
  }
  case 296: case 275:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 272:  {
   HEAP32[$yygotominor>>2] = (110);
   $1067 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1068 = HEAP32[$1067>>2]|0;
   $1069 = (($yygotominor) + 4|0);
   $$c47 = $1068;
   HEAP32[$1069>>2] = $$c47;
   break;
  }
  case 297: case 276:  {
   $1070 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1071 = HEAP32[$1070>>2]|0;
   HEAP32[$yygotominor>>2] = $1071;
   break;
  }
  case 277:  {
   $$sum43 = (($2) + -1)|0;
   $1072 = ((($yypParser) + ($$sum43<<4)|0) + 16|0);
   $1073 = HEAP32[$1072>>2]|0;
   $$sum44 = (($2) + -2)|0;
   $1074 = ((($yypParser) + ($$sum44<<4)|0) + 16|0);
   $1075 = HEAP32[$1074>>2]|0;
   $1076 = (($1075) + 36|0);
   $1077 = HEAP32[$1076>>2]|0;
   $1078 = (($1077) + 32|0);
   HEAP32[$1078>>2] = $1073;
   $1079 = HEAP32[$1072>>2]|0;
   $1080 = HEAP32[$1074>>2]|0;
   $1081 = (($1080) + 36|0);
   HEAP32[$1081>>2] = $1079;
   $1082 = HEAP32[$1074>>2]|0;
   HEAP32[$yygotominor>>2] = $1082;
   break;
  }
  case 229:  {
   $$sum90 = (($2) + -4)|0;
   $924 = ((($yypParser) + ($$sum90<<4)|0) + 16|0);
   $925 = HEAP32[$924>>2]|0;
   $$sum91 = (($2) + -2)|0;
   $926 = ((($yypParser) + ($$sum91<<4)|0) + 16|0);
   $927 = HEAP32[$926>>2]|0;
   $$idx356$val = HEAP32[$1>>2]|0;
   $928 = (_sqlite3ExprListAppend($$idx356$val,$925,$927)|0);
   HEAP32[$yygotominor>>2] = $928;
   $929 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $930 = HEAP32[$929>>2]|0;
   $$idx355$val = HEAP32[$1>>2]|0;
   $931 = (_sqlite3ExprListAppend($$idx355$val,$928,$930)|0);
   HEAP32[$yygotominor>>2] = $931;
   break;
  }
  case 230:  {
   $$sum87 = (($2) + -2)|0;
   $932 = ((($yypParser) + ($$sum87<<4)|0) + 16|0);
   $933 = HEAP32[$932>>2]|0;
   $$idx354$val = HEAP32[$1>>2]|0;
   $934 = (_sqlite3ExprListAppend($$idx354$val,0,$933)|0);
   HEAP32[$yygotominor>>2] = $934;
   $935 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $936 = HEAP32[$935>>2]|0;
   $$idx353$val = HEAP32[$1>>2]|0;
   $937 = (_sqlite3ExprListAppend($$idx353$val,$934,$936)|0);
   HEAP32[$yygotominor>>2] = $937;
   break;
  }
  case 237:  {
   $$sum85 = (($2) + -2)|0;
   $938 = ((($yypParser) + ($$sum85<<4)|0) + 16|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $941 = HEAP32[$940>>2]|0;
   $$idx352$val = HEAP32[$1>>2]|0;
   $942 = (_sqlite3ExprListAppend($$idx352$val,$939,$941)|0);
   HEAP32[$yygotominor>>2] = $942;
   break;
  }
  case 238:  {
   $943 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $944 = HEAP32[$943>>2]|0;
   $$idx351$val = HEAP32[$1>>2]|0;
   $945 = (_sqlite3ExprListAppend($$idx351$val,0,$944)|0);
   HEAP32[$yygotominor>>2] = $945;
   break;
  }
  case 291: case 240:  {
   HEAP32[$yygotominor>>2] = (2);
   break;
  }
  case 241:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 239:  {
   $$sum77 = (($2) + -7)|0;
   $946 = ((($yypParser) + ($$sum77<<4)|0) + 16|0);
   $$sum78 = (($2) + -6)|0;
   $947 = ((($yypParser) + ($$sum78<<4)|0) + 16|0);
   $948 = HEAP32[$1>>2]|0;
   $$sum79 = (($2) + -4)|0;
   $949 = ((($yypParser) + ($$sum79<<4)|0) + 16|0);
   $950 = (_sqlite3SrcListAppend($948,0,$949,0)|0);
   $$sum80 = (($2) + -2)|0;
   $951 = ((($yypParser) + ($$sum80<<4)|0) + 16|0);
   $952 = HEAP32[$951>>2]|0;
   $$sum81 = (($2) + -10)|0;
   $953 = ((($yypParser) + ($$sum81<<4)|0) + 16|0);
   $954 = HEAP32[$953>>2]|0;
   $$sum82 = (($2) + -11)|0;
   $955 = ((($yypParser) + ($$sum82<<4)|0) + 16|0);
   $956 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $957 = HEAP32[$956>>2]|0;
   $$sum83 = (($2) + -8)|0;
   $958 = ((($yypParser) + ($$sum83<<4)|0) + 16|0);
   $959 = HEAP32[$958>>2]|0;
   (_sqlite3CreateIndex($1,$946,$947,$950,$952,$954,$955,$957,0,$959)|0);
   break;
  }
  case 244:  {
   $$sum73 = (($2) + -1)|0;
   $960 = ((($yypParser) + ($$sum73<<4)|0) + 16|0);
   $961 = (_sqlite3ExprAddCollateToken($1,0,$960)|0);
   $$sum74 = (($2) + -4)|0;
   $962 = ((($yypParser) + ($$sum74<<4)|0) + 16|0);
   $963 = HEAP32[$962>>2]|0;
   $$idx350$val = HEAP32[$1>>2]|0;
   $964 = (_sqlite3ExprListAppend($$idx350$val,$963,$961)|0);
   HEAP32[$yygotominor>>2] = $964;
   $$sum76 = (($2) + -2)|0;
   $965 = ((($yypParser) + ($$sum76<<4)|0) + 16|0);
   _sqlite3ExprListSetName($1,$964,$965,1);
   $966 = HEAP32[$yygotominor>>2]|0;
   _sqlite3ExprListCheckLength($1,$966,10320);
   $967 = HEAP32[$yygotominor>>2]|0;
   $968 = ($967|0)==(0|0);
   if (!($968)) {
    $969 = ((($yypParser) + ($2<<4)|0) + 16|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = $970&255;
    $972 = HEAP32[$967>>2]|0;
    $973 = (($972) + -1)|0;
    $974 = (($967) + 8|0);
    $975 = HEAP32[$974>>2]|0;
    $976 = ((($975) + (($973*20)|0)|0) + 12|0);
    HEAP8[$976>>0] = $971;
   }
   break;
  }
  case 245:  {
   $$sum70 = (($2) + -1)|0;
   $977 = ((($yypParser) + ($$sum70<<4)|0) + 16|0);
   $978 = (_sqlite3ExprAddCollateToken($1,0,$977)|0);
   $$idx$val = HEAP32[$1>>2]|0;
   $979 = (_sqlite3ExprListAppend($$idx$val,0,$978)|0);
   HEAP32[$yygotominor>>2] = $979;
   $$sum72 = (($2) + -2)|0;
   $980 = ((($yypParser) + ($$sum72<<4)|0) + 16|0);
   _sqlite3ExprListSetName($1,$979,$980,1);
   $981 = HEAP32[$yygotominor>>2]|0;
   _sqlite3ExprListCheckLength($1,$981,10320);
   $982 = HEAP32[$yygotominor>>2]|0;
   $983 = ($982|0)==(0|0);
   if (!($983)) {
    $984 = ((($yypParser) + ($2<<4)|0) + 16|0);
    $985 = HEAP32[$984>>2]|0;
    $986 = $985&255;
    $987 = HEAP32[$982>>2]|0;
    $988 = (($987) + -1)|0;
    $989 = (($982) + 8|0);
    $990 = HEAP32[$989>>2]|0;
    $991 = ((($990) + (($988*20)|0)|0) + 12|0);
    HEAP8[$991>>0] = $986;
   }
   break;
  }
  case 246:  {
   HEAP32[$yygotominor>>2] = 0;
   $992 = (($yygotominor) + 4|0);
   HEAP32[$992>>2] = 0;
   break;
  }
  case 250: case 249:  {
   _sqlite3Vacuum($1);
   break;
  }
  case 248:  {
   $993 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $994 = HEAP32[$993>>2]|0;
   $$sum69 = (($2) + -1)|0;
   $995 = ((($yypParser) + ($$sum69<<4)|0) + 16|0);
   $996 = HEAP32[$995>>2]|0;
   _sqlite3DropIndex($1,$994,$996);
   break;
  }
  case 251:  {
   $$sum68 = (($2) + -1)|0;
   $997 = ((($yypParser) + ($$sum68<<4)|0) + 16|0);
   $998 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Pragma($1,$997,$998,0,0);
   break;
  }
  case 252:  {
   $$sum66 = (($2) + -3)|0;
   $999 = ((($yypParser) + ($$sum66<<4)|0) + 16|0);
   $$sum67 = (($2) + -2)|0;
   $1000 = ((($yypParser) + ($$sum67<<4)|0) + 16|0);
   $1001 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Pragma($1,$999,$1000,$1001,0);
   break;
  }
  case 253:  {
   $$sum63 = (($2) + -4)|0;
   $1002 = ((($yypParser) + ($$sum63<<4)|0) + 16|0);
   $$sum64 = (($2) + -3)|0;
   $1003 = ((($yypParser) + ($$sum64<<4)|0) + 16|0);
   $$sum65 = (($2) + -1)|0;
   $1004 = ((($yypParser) + ($$sum65<<4)|0) + 16|0);
   _sqlite3Pragma($1,$1002,$1003,$1004,0);
   break;
  }
  case 254:  {
   $$sum61 = (($2) + -3)|0;
   $1005 = ((($yypParser) + ($$sum61<<4)|0) + 16|0);
   $$sum62 = (($2) + -2)|0;
   $1006 = ((($yypParser) + ($$sum62<<4)|0) + 16|0);
   $1007 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Pragma($1,$1005,$1006,$1007,1);
   break;
  }
  case 255:  {
   $$sum58 = (($2) + -4)|0;
   $1008 = ((($yypParser) + ($$sum58<<4)|0) + 16|0);
   $$sum59 = (($2) + -3)|0;
   $1009 = ((($yypParser) + ($$sum59<<4)|0) + 16|0);
   $$sum60 = (($2) + -1)|0;
   $1010 = ((($yypParser) + ($$sum60<<4)|0) + 16|0);
   _sqlite3Pragma($1,$1008,$1009,$1010,1);
   break;
  }
  case 264:  {
   $$sum56 = (($2) + -3)|0;
   $1011 = ((($yypParser) + ($$sum56<<4)|0) + 16|0);
   $1012 = HEAP32[$1011>>2]|0;
   HEAP32[$all>>2] = $1012;
   $1013 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1014 = HEAP32[$1013>>2]|0;
   $1015 = $1014;
   $1016 = $1012;
   $1017 = (($1015) - ($1016))|0;
   $1018 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $1019 = HEAP32[$1018>>2]|0;
   $1020 = (($1017) + ($1019))|0;
   $1021 = (($all) + 4|0);
   HEAP32[$1021>>2] = $1020;
   $$sum57 = (($2) + -1)|0;
   $1022 = ((($yypParser) + ($$sum57<<4)|0) + 16|0);
   $1023 = HEAP32[$1022>>2]|0;
   _sqlite3FinishTrigger($1,$1023,$all);
   break;
  }
  case 265:  {
   $$sum49 = (($2) + -7)|0;
   $1024 = ((($yypParser) + ($$sum49<<4)|0) + 16|0);
   $$sum50 = (($2) + -6)|0;
   $1025 = ((($yypParser) + ($$sum50<<4)|0) + 16|0);
   $$sum51 = (($2) + -5)|0;
   $1026 = ((($yypParser) + ($$sum51<<4)|0) + 16|0);
   $1027 = HEAP32[$1026>>2]|0;
   $$sum52 = (($2) + -4)|0;
   $1028 = ((($yypParser) + ($$sum52<<4)|0) + 16|0);
   $1029 = HEAP32[$1028>>2]|0;
   $1030 = ((($yypParser) + ($$sum52<<4)|0) + 20|0);
   $1031 = HEAP32[$1030>>2]|0;
   $$sum53 = (($2) + -2)|0;
   $1032 = ((($yypParser) + ($$sum53<<4)|0) + 16|0);
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1035 = HEAP32[$1034>>2]|0;
   $$sum54 = (($2) + -10)|0;
   $1036 = ((($yypParser) + ($$sum54<<4)|0) + 16|0);
   $1037 = HEAP32[$1036>>2]|0;
   $$sum55 = (($2) + -8)|0;
   $1038 = ((($yypParser) + ($$sum55<<4)|0) + 16|0);
   $1039 = HEAP32[$1038>>2]|0;
   _sqlite3BeginTrigger($1,$1024,$1025,$1027,$1029,$1031,$1033,$1035,$1037,$1039);
   $1040 = ((($yypParser) + ($$sum50<<4)|0) + 20|0);
   $1041 = HEAP32[$1040>>2]|0;
   $1042 = ($1041|0)==(0);
   if ($1042) {
    $1043 = $1024;
    $1044 = $1043;
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = (($1043) + 4)|0;
    $1047 = $1046;
    $1048 = HEAP32[$1047>>2]|0;
    $1049 = $yygotominor;
    $1050 = $1049;
    HEAP32[$1050>>2] = $1045;
    $1051 = (($1049) + 4)|0;
    $1052 = $1051;
    HEAP32[$1052>>2] = $1048;
    break L1;
   } else {
    $1053 = $1025;
    $1054 = $1053;
    $1055 = HEAP32[$1054>>2]|0;
    $1056 = (($1053) + 4)|0;
    $1057 = $1056;
    $1058 = HEAP32[$1057>>2]|0;
    $1059 = $yygotominor;
    $1060 = $1059;
    HEAP32[$1060>>2] = $1055;
    $1061 = (($1059) + 4)|0;
    $1062 = $1061;
    HEAP32[$1062>>2] = $1058;
    break L1;
   }
   break;
  }
  case 269: case 266:  {
   HEAP32[$yygotominor>>2] = (35);
   break;
  }
  case 267:  {
   HEAP32[$yygotominor>>2] = (31);
   break;
  }
  case 268:  {
   HEAP32[$yygotominor>>2] = (49);
   break;
  }
  case 284:  {
   $1098 = HEAP32[$1>>2]|0;
   $$sum37 = (($2) + -4)|0;
   $1099 = ((($yypParser) + ($$sum37<<4)|0) + 16|0);
   $$sum38 = (($2) + -1)|0;
   $1100 = ((($yypParser) + ($$sum38<<4)|0) + 16|0);
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1103 = HEAP32[$1102>>2]|0;
   $$sum39 = (($2) + -5)|0;
   $1104 = ((($yypParser) + ($$sum39<<4)|0) + 16|0);
   $1105 = HEAP8[$1104>>0]|0;
   $1106 = (_sqlite3TriggerUpdateStep($1098,$1099,$1101,$1103,$1105)|0);
   HEAP32[$yygotominor>>2] = $1106;
   break;
  }
  case 285:  {
   $1107 = HEAP32[$1>>2]|0;
   $$sum33 = (($2) + -2)|0;
   $1108 = ((($yypParser) + ($$sum33<<4)|0) + 16|0);
   $$sum34 = (($2) + -1)|0;
   $1109 = ((($yypParser) + ($$sum34<<4)|0) + 16|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1112 = HEAP32[$1111>>2]|0;
   $$sum35 = (($2) + -4)|0;
   $1113 = ((($yypParser) + ($$sum35<<4)|0) + 16|0);
   $1114 = HEAP8[$1113>>0]|0;
   $1115 = (_sqlite3TriggerInsertStep($1107,$1108,$1110,$1112,$1114)|0);
   HEAP32[$yygotominor>>2] = $1115;
   break;
  }
  case 278:  {
   $$sum41 = (($2) + -1)|0;
   $1083 = ((($yypParser) + ($$sum41<<4)|0) + 16|0);
   $1084 = HEAP32[$1083>>2]|0;
   $1085 = (($1084) + 36|0);
   HEAP32[$1085>>2] = $1084;
   $1086 = HEAP32[$1083>>2]|0;
   HEAP32[$yygotominor>>2] = $1086;
   break;
  }
  case 282:  {
   _sqlite3ErrorMsg($1,10424,$vararg_buffer12);
   break;
  }
  case 280:  {
   $1087 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1088 = $1087;
   $1089 = $1088;
   $1090 = HEAP32[$1089>>2]|0;
   $1091 = (($1088) + 4)|0;
   $1092 = $1091;
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = $yygotominor;
   $1095 = $1094;
   HEAP32[$1095>>2] = $1090;
   $1096 = (($1094) + 4)|0;
   $1097 = $1096;
   HEAP32[$1097>>2] = $1093;
   _sqlite3ErrorMsg($1,10328,$vararg_buffer10);
   break;
  }
  case 283:  {
   _sqlite3ErrorMsg($1,10512,$vararg_buffer14);
   break;
  }
  case 288:  {
   $1125 = (_sqlite3PExpr($1,57,0,0,0)|0);
   HEAP32[$yygotominor>>2] = $1125;
   $1126 = ($1125|0)==(0|0);
   if (!($1126)) {
    $1127 = (($1125) + 1|0);
    HEAP8[$1127>>0] = 4;
   }
   $$sum27 = (($2) + -3)|0;
   $1128 = ((($yypParser) + ($$sum27<<4)|0) + 16|0);
   $1129 = HEAP32[$1128>>2]|0;
   $1130 = (($yygotominor) + 4|0);
   $$c28 = $1129;
   HEAP32[$1130>>2] = $$c28;
   $1131 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $1132 = HEAP32[$1131>>2]|0;
   $1133 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1134 = HEAP32[$1133>>2]|0;
   $1135 = (($1134) + ($1132)|0);
   $1136 = (($yygotominor) + 8|0);
   $$c29 = $1135;
   HEAP32[$1136>>2] = $$c29;
   break;
  }
  case 289:  {
   $$sum20 = (($2) + -1)|0;
   $1137 = ((($yypParser) + ($$sum20<<4)|0) + 16|0);
   $1138 = (_sqlite3PExpr($1,57,0,0,$1137)|0);
   HEAP32[$yygotominor>>2] = $1138;
   $1139 = ($1138|0)==(0|0);
   if (!($1139)) {
    $$sum25 = (($2) + -3)|0;
    $1140 = ((($yypParser) + ($$sum25<<4)|0) + 16|0);
    $1141 = HEAP32[$1140>>2]|0;
    $1142 = $1141&255;
    $1143 = (($1138) + 1|0);
    HEAP8[$1143>>0] = $1142;
   }
   $$sum22 = (($2) + -5)|0;
   $1144 = ((($yypParser) + ($$sum22<<4)|0) + 16|0);
   $1145 = HEAP32[$1144>>2]|0;
   $1146 = (($yygotominor) + 4|0);
   $$c23 = $1145;
   HEAP32[$1146>>2] = $$c23;
   $1147 = ((($yypParser) + ($2<<4)|0) + 20|0);
   $1148 = HEAP32[$1147>>2]|0;
   $1149 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1150 = HEAP32[$1149>>2]|0;
   $1151 = (($1150) + ($1148)|0);
   $1152 = (($yygotominor) + 8|0);
   $$c24 = $1151;
   HEAP32[$1152>>2] = $$c24;
   break;
  }
  case 286:  {
   $1116 = HEAP32[$1>>2]|0;
   $$sum31 = (($2) + -2)|0;
   $1117 = ((($yypParser) + ($$sum31<<4)|0) + 16|0);
   $1118 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1119 = HEAP32[$1118>>2]|0;
   $1120 = (_sqlite3TriggerDeleteStep($1116,$1117,$1119)|0);
   HEAP32[$yygotominor>>2] = $1120;
   break;
  }
  case 287:  {
   $1121 = HEAP32[$1>>2]|0;
   $1122 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1123 = HEAP32[$1122>>2]|0;
   $1124 = (_sqlite3TriggerSelectStep($1121,$1123)|0);
   HEAP32[$yygotominor>>2] = $1124;
   break;
  }
  case 293:  {
   $1153 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1154 = HEAP32[$1153>>2]|0;
   $$sum19 = (($2) + -1)|0;
   $1155 = ((($yypParser) + ($$sum19<<4)|0) + 16|0);
   $1156 = HEAP32[$1155>>2]|0;
   _sqlite3DropTrigger($1,$1154,$1156);
   break;
  }
  case 300:  {
   _sqlite3Reindex($1,0,0);
   break;
  }
  case 294:  {
   $$sum17 = (($2) + -3)|0;
   $1157 = ((($yypParser) + ($$sum17<<4)|0) + 16|0);
   $1158 = HEAP32[$1157>>2]|0;
   $$sum18 = (($2) + -1)|0;
   $1159 = ((($yypParser) + ($$sum18<<4)|0) + 16|0);
   $1160 = HEAP32[$1159>>2]|0;
   $1161 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1162 = HEAP32[$1161>>2]|0;
   _sqlite3Attach($1,$1158,$1160,$1162);
   break;
  }
  case 295:  {
   $1163 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1164 = HEAP32[$1163>>2]|0;
   _sqlite3Detach($1,$1164);
   break;
  }
  case 302:  {
   _sqlite3Analyze($1,0,0);
   break;
  }
  case 301:  {
   $$sum16 = (($2) + -1)|0;
   $1165 = ((($yypParser) + ($$sum16<<4)|0) + 16|0);
   $1166 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Reindex($1,$1165,$1166);
   break;
  }
  case 290:  {
   HEAP32[$yygotominor>>2] = (1);
   break;
  }
  case 292:  {
   HEAP32[$yygotominor>>2] = (3);
   break;
  }
  case 306:  {
   $1173 = HEAP32[$1>>2]|0;
   $1174 = (($1173) + 242|0);
   HEAP8[$1174>>0] = 0;
   $1175 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1176 = HEAP32[$1175>>2]|0;
   _sqlite3AlterBeginAddColumn($1,$1176);
   break;
  }
  case 309:  {
   _sqlite3VtabFinishParse($1,0);
   break;
  }
  case 310:  {
   $1177 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3VtabFinishParse($1,$1177);
   break;
  }
  case 322:  {
   HEAP32[$yygotominor>>2] = 0;
   break;
  }
  case 311:  {
   $$sum11 = (($2) + -3)|0;
   $1178 = ((($yypParser) + ($$sum11<<4)|0) + 16|0);
   $$sum12 = (($2) + -2)|0;
   $1179 = ((($yypParser) + ($$sum12<<4)|0) + 16|0);
   $1180 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $$sum13 = (($2) + -4)|0;
   $1181 = ((($yypParser) + ($$sum13<<4)|0) + 16|0);
   $1182 = HEAP32[$1181>>2]|0;
   _sqlite3VtabBeginParse($1,$1178,$1179,$1180,$1182);
   break;
  }
  case 314:  {
   _sqlite3VtabArgInit($1);
   break;
  }
  case 318: case 317: case 316:  {
   $1183 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3VtabArgExtend($1,$1183);
   break;
  }
  case 324: case 323:  {
   $1184 = ((($yypParser) + ($2<<4)|0) + 16|0);
   $1185 = HEAP32[$1184>>2]|0;
   HEAP32[$yygotominor>>2] = $1185;
   break;
  }
  case 303:  {
   $$sum15 = (($2) + -1)|0;
   $1167 = ((($yypParser) + ($$sum15<<4)|0) + 16|0);
   $1168 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3Analyze($1,$1167,$1168);
   break;
  }
  case 304:  {
   $$sum14 = (($2) + -3)|0;
   $1169 = ((($yypParser) + ($$sum14<<4)|0) + 16|0);
   $1170 = HEAP32[$1169>>2]|0;
   $1171 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AlterRenameTable($1,$1170,$1171);
   break;
  }
  case 305:  {
   $1172 = ((($yypParser) + ($2<<4)|0) + 16|0);
   _sqlite3AlterFinishAddColumn($1,$1172);
   break;
  }
  case 325:  {
   $$sum6 = (($2) + -5)|0;
   $1186 = ((($yypParser) + ($$sum6<<4)|0) + 16|0);
   $$sum7 = (($2) + -4)|0;
   $1187 = ((($yypParser) + ($$sum7<<4)|0) + 16|0);
   $1188 = HEAP32[$1187>>2]|0;
   $$sum8 = (($2) + -1)|0;
   $1189 = ((($yypParser) + ($$sum8<<4)|0) + 16|0);
   $1190 = HEAP32[$1189>>2]|0;
   $1191 = (_sqlite3WithAdd($1,0,$1186,$1188,$1190)|0);
   HEAP32[$yygotominor>>2] = $1191;
   break;
  }
  case 326:  {
   $$sum = (($2) + -7)|0;
   $1192 = ((($yypParser) + ($$sum<<4)|0) + 16|0);
   $1193 = HEAP32[$1192>>2]|0;
   $$sum1 = (($2) + -5)|0;
   $1194 = ((($yypParser) + ($$sum1<<4)|0) + 16|0);
   $$sum2 = (($2) + -4)|0;
   $1195 = ((($yypParser) + ($$sum2<<4)|0) + 16|0);
   $1196 = HEAP32[$1195>>2]|0;
   $$sum3 = (($2) + -1)|0;
   $1197 = ((($yypParser) + ($$sum3<<4)|0) + 16|0);
   $1198 = HEAP32[$1197>>2]|0;
   $1199 = (_sqlite3WithAdd($1,$1193,$1194,$1196,$1198)|0);
   HEAP32[$yygotominor>>2] = $1199;
   break;
  }
  default: {
  }
  }
 } while(0);
 $1200 = (10600 + ($yyruleno<<1)|0);
 $1201 = HEAP8[$1200>>0]|0;
 $1202 = $1201&255;
 $1203 = ((10600 + ($yyruleno<<1)|0) + 1|0);
 $1204 = HEAP8[$1203>>0]|0;
 $1205 = $1204&255;
 $1206 = HEAP32[$yypParser>>2]|0;
 $1207 = (($1206) - ($1205))|0;
 HEAP32[$yypParser>>2] = $1207;
 $$sum4 = (($2) - ($1205))|0;
 $1208 = ((($yypParser) + ($$sum4<<4)|0) + 12|0);
 $1209 = HEAP16[$1208>>1]|0;
 $1210 = $1209&65535;
 $1211 = (_yy_find_reduce_action($1210,$1201)|0);
 $1212 = ($1211|0)<(642);
 if (!($1212)) {
  _yy_accept($yypParser);
  STACKTOP = sp;return;
 }
 $1213 = ($1204<<24>>24)==(0);
 if ($1213) {
  _yy_shift($yypParser,$1211,$1202,$yygotominor);
  STACKTOP = sp;return;
 } else {
  $1214 = (($1207) + 1)|0;
  HEAP32[$yypParser>>2] = $1214;
  $1215 = (1 - ($1205))|0;
  $$sum5 = (($1215) + ($2))|0;
  $1216 = $1211&65535;
  $1217 = ((($yypParser) + ($$sum5<<4)|0) + 12|0);
  HEAP16[$1217>>1] = $1216;
  $1218 = ((($yypParser) + ($$sum5<<4)|0) + 14|0);
  HEAP8[$1218>>0] = $1201;
  $1219 = ((($yypParser) + ($$sum5<<4)|0) + 16|0);
  ;HEAP32[$1219+0>>2]=HEAP32[$yygotominor+0>>2]|0;HEAP32[$1219+4>>2]=HEAP32[$yygotominor+4>>2]|0;HEAP32[$1219+8>>2]=HEAP32[$yygotominor+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function _yy_syntax_error($yypParser,$yyminor) {
 $yypParser = $yypParser|0;
 $yyminor = $yyminor|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($yypParser) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $yyminor;
 _sqlite3ErrorMsg($1,10120,$vararg_buffer);
 HEAP32[$0>>2] = $1;
 STACKTOP = sp;return;
}
function _sqlite3BeginParse($pParse,$explainFlag) {
 $pParse = $pParse|0;
 $explainFlag = $explainFlag|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $explainFlag&255;
 $1 = (($pParse) + 454|0);
 HEAP8[$1>>0] = $0;
 $2 = (($pParse) + 444|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3FinishCoding($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $i$02 = 0, $i$11 = 0, $iDb$04 = 0, $mask$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($pParse) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($pParse) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (_sqlite3GetVdbe($pParse)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  label = 30;
 } else {
  while(1) {
   $12 = (_sqlite3VdbeDeletePriorOpcode($10,58)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    break;
   }
  }
  (_sqlite3VdbeAddOp0($10,24)|0);
  $14 = HEAP8[$1>>0]|0;
  $15 = ($14<<24>>24)==(0);
  do {
   if ($15) {
    $16 = (($pParse) + 336|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = (($pParse) + 320|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      break;
     }
    }
    _sqlite3VdbeJumpHere($10,0);
    $22 = (($0) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)>(0);
    L19: do {
     if ($24) {
      $25 = (($pParse) + 332|0);
      $26 = (($0) + 16|0);
      $27 = (($0) + 137|0);
      $iDb$04 = 0;$mask$05 = 1;
      while(1) {
       $32 = HEAP32[$16>>2]|0;
       $33 = $32 & $mask$05;
       $34 = ($33|0)==(0);
       if (!($34)) {
        _sqlite3VdbeUsesBtree($10,$iDb$04);
        $35 = HEAP32[$25>>2]|0;
        $36 = $35 & $mask$05;
        $37 = ($36|0)!=(0);
        $38 = $37&1;
        $39 = ((($pParse) + ($iDb$04<<2)|0) + 340|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = HEAP32[$26>>2]|0;
        $42 = ((($41) + ($iDb$04<<4)|0) + 12|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = (($43) + 4|0);
        $45 = HEAP32[$44>>2]|0;
        (_sqlite3VdbeAddOp4Int($10,4,$iDb$04,$38,$40,$45)|0);
        $46 = HEAP8[$27>>0]|0;
        $47 = ($46<<24>>24)==(0);
        if ($47) {
         _sqlite3VdbeChangeP5($10,1);
        }
       }
       $48 = (($iDb$04) + 1)|0;
       $49 = HEAP32[$22>>2]|0;
       $50 = ($48|0)<($49|0);
       if (!($50)) {
        break L19;
       }
       $51 = $mask$05 << 1;
       $iDb$04 = $48;$mask$05 = $51;
      }
     }
    } while(0);
    $28 = (($pParse) + 456|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)>(0);
    if ($30) {
     $31 = (($pParse) + 524|0);
     $i$02 = 0;
     while(1) {
      $52 = HEAP32[$31>>2]|0;
      $53 = (($52) + ($i$02<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (_sqlite3GetVTable($0,$54)|0);
      (_sqlite3VdbeAddOp4($10,140,0,0,0,$55,-10)|0);
      $56 = (($i$02) + 1)|0;
      $57 = HEAP32[$28>>2]|0;
      $58 = ($56|0)<($57|0);
      if ($58) {
       $i$02 = $56;
      } else {
       break;
      }
     }
    }
    HEAP32[$28>>2] = 0;
    _codeTableLocks($pParse);
    _sqlite3AutoincrementBegin($pParse);
    $59 = (($pParse) + 320|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if (!($61)) {
     $62 = (($pParse) + 25|0);
     HEAP8[$62>>0] = 0;
     $63 = HEAP32[$60>>2]|0;
     $64 = ($63|0)>(0);
     if ($64) {
      $65 = (($60) + 8|0);
      $i$11 = 0;
      while(1) {
       $66 = HEAP32[$65>>2]|0;
       $67 = (($66) + (($i$11*20)|0)|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($66) + (($i$11*20)|0)|0) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       _sqlite3ExprCode($pParse,$68,$70);
       $71 = (($i$11) + 1)|0;
       $72 = HEAP32[$60>>2]|0;
       $73 = ($71|0)<($72|0);
       if ($73) {
        $i$11 = $71;
       } else {
        break;
       }
      }
     }
    }
    (_sqlite3VdbeAddOp2($10,16,0,1)|0);
   }
  } while(0);
  $74 = HEAP32[$7>>2]|0;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = HEAP8[$1>>0]|0;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $78 = (($pParse) + 408|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     $81 = (($pParse) + 72|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==(0);
     if ($83) {
      HEAP32[$81>>2] = 1;
     }
    }
    _sqlite3VdbeMakeReady($10,$pParse);
    $84 = (($pParse) + 12|0);
    HEAP32[$84>>2] = 101;
    $85 = (($pParse) + 16|0);
    HEAP8[$85>>0] = 0;
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
 }
 if ((label|0) == 30) {
  $86 = (($pParse) + 12|0);
  HEAP32[$86>>2] = 1;
 }
 $87 = (($pParse) + 72|0);
 HEAP32[$87>>2] = 0;
 $88 = (($pParse) + 76|0);
 HEAP32[$88>>2] = 0;
 $89 = (($pParse) + 80|0);
 HEAP32[$89>>2] = 0;
 $90 = (($pParse) + 444|0);
 HEAP32[$90>>2] = 0;
 $91 = (($pParse) + 336|0);
 HEAP32[$91>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3BeginTransaction($pParse,$type) {
 $pParse = $pParse|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3AuthCheck($pParse,22,27120,0,0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (_sqlite3GetVdbe($pParse)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ($type|0)==(7);
 if (!($5)) {
  $6 = (($0) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = ($type|0)==(9);
   $10 = $9 ? 2 : 1;
   $i$01 = 0;
   while(1) {
    (_sqlite3VdbeAddOp2($3,4,$i$01,$10)|0);
    _sqlite3VdbeUsesBtree($3,$i$01);
    $11 = (($i$01) + 1)|0;
    $12 = HEAP32[$6>>2]|0;
    $13 = ($11|0)<($12|0);
    if ($13) {
     $i$01 = $11;
    } else {
     break;
    }
   }
  }
 }
 (_sqlite3VdbeAddOp2($3,3,0,0)|0);
 STACKTOP = sp;return;
}
function _sqlite3CommitTransaction($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3AuthCheck($pParse,22,27152,0,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_sqlite3GetVdbe($pParse)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   (_sqlite3VdbeAddOp2($2,3,1,0)|0);
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3RollbackTransaction($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3AuthCheck($pParse,22,27136,0,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_sqlite3GetVdbe($pParse)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   (_sqlite3VdbeAddOp2($2,3,1,1)|0);
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3Savepoint($pParse,$op,$pName) {
 $pParse = $pParse|0;
 $op = $op|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3NameFromToken($0,$pName)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (_sqlite3GetVdbe($pParse)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (27104 + ($op<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_sqlite3AuthCheck($pParse,32,$6,$1,0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   (_sqlite3VdbeAddOp4($3,2,$op,0,0,$1,-1)|0);
   STACKTOP = sp;return;
  }
 }
 $9 = HEAP32[$pParse>>2]|0;
 _sqlite3DbFree($9,$1);
 STACKTOP = sp;return;
}
function _sqlite3StartTable($pParse,$pName1,$pName2,$isTemp,$isView,$isVirtual,$noErr) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $isTemp = $isTemp|0;
 $isView = $isView|0;
 $isVirtual = $isVirtual|0;
 $noErr = $noErr|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$isTemp = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code$0 = 0, $or$cond = 0, $pName = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pName = sp + 20|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pName)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($isTemp|0)!=(0);
 if ($3) {
  $4 = (($pName2) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  $7 = ($1|0)==(1);
  $or$cond = $6 | $7;
  if (!($or$cond)) {
   _sqlite3ErrorMsg($pParse,26992,$vararg_buffer);
   STACKTOP = sp;return;
  }
 }
 $$ = $3 ? 1 : $1;
 $8 = (($pParse) + 500|0);
 $9 = HEAP32[$pName>>2]|0;
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = (_sqlite3NameFromToken($0,$9)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (_sqlite3CheckObjectName($pParse,$20)|0);
 $23 = ($22|0)==(0);
 L12: do {
  if ($23) {
   $24 = (($0) + 136|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(1);
   $$isTemp = $26 ? 1 : $isTemp;
   $27 = (($0) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($$<<4)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($$isTemp|0)==(1);
   $32 = $31 ? 15056 : 15080;
   $33 = (_sqlite3AuthCheck($pParse,18,$32,0,$30)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ($isView|0)==(0);
    $36 = ($$isTemp|0)!=(0);
    if ($35) {
     $$2 = $36 ? 4 : 2;
     $code$0 = $$2;
    } else {
     $$1 = $36 ? 6 : 8;
     $code$0 = $$1;
    }
    $37 = ($isVirtual|0)!=(0);
    if (!($37)) {
     $38 = (_sqlite3AuthCheck($pParse,$code$0,$20,0,$30)|0);
     $39 = ($38|0)==(0);
     if (!($39)) {
      break;
     }
    }
    $40 = (($pParse) + 455|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)==(0);
    do {
     if ($42) {
      $43 = HEAP32[$27>>2]|0;
      $44 = (($43) + ($$<<4)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (_sqlite3ReadSchema($pParse)|0);
      $47 = ($46|0)==(0);
      if (!($47)) {
       break L12;
      }
      $48 = (_sqlite3FindTable($0,$20,$45)|0);
      $49 = ($48|0)==(0|0);
      if ($49) {
       $51 = (_sqlite3FindIndex($0,$20,$45)|0);
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       }
       HEAP32[$vararg_buffer3>>2] = $20;
       _sqlite3ErrorMsg($pParse,27064,$vararg_buffer3);
       break L12;
      }
      $50 = ($noErr|0)==(0);
      if ($50) {
       HEAP32[$vararg_buffer1>>2] = $9;
       _sqlite3ErrorMsg($pParse,27040,$vararg_buffer1);
       break L12;
      } else {
       _sqlite3CodeVerifySchema($pParse,$$);
       break L12;
      }
     }
    } while(0);
    $53 = (_sqlite3DbMallocZero($0,76)|0);
    $54 = ($53|0)==(0|0);
    if ($54) {
     $55 = (($0) + 64|0);
     HEAP8[$55>>0] = 1;
     $56 = (($pParse) + 12|0);
     HEAP32[$56>>2] = 7;
     $57 = (($pParse) + 68|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + 1)|0;
     HEAP32[$57>>2] = $59;
     break;
    }
    HEAP32[$53>>2] = $20;
    $60 = (($53) + 36|0);
    HEAP16[$60>>1] = -1;
    $61 = HEAP32[$27>>2]|0;
    $62 = ((($61) + ($$<<4)|0) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($53) + 68|0);
    HEAP32[$64>>2] = $63;
    $65 = (($53) + 40|0);
    HEAP16[$65>>1] = 1;
    $66 = (($53) + 28|0);
    HEAP32[$66>>2] = 1048576;
    $67 = (($pParse) + 488|0);
    HEAP32[$67>>2] = $53;
    $68 = (($pParse) + 18|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = ($69<<24>>24)==(0);
    if ($70) {
     $71 = (_strcmp($20,16304)|0);
     $72 = ($71|0)==(0);
     if ($72) {
      $73 = HEAP32[$64>>2]|0;
      $74 = (($73) + 72|0);
      HEAP32[$74>>2] = $53;
     }
    }
    $75 = (($0) + 137|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($76<<24>>24)==(0);
    if (!($77)) {
     STACKTOP = sp;return;
    }
    $78 = (_sqlite3GetVdbe($pParse)|0);
    $79 = ($78|0)==(0|0);
    if ($79) {
     STACKTOP = sp;return;
    }
    _sqlite3BeginWriteOperation($pParse,0,$$);
    if ($37) {
     (_sqlite3VdbeAddOp0($78,140)|0);
    }
    $80 = (($pParse) + 76|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + 1)|0;
    $83 = (($pParse) + 388|0);
    HEAP32[$83>>2] = $82;
    $84 = (($81) + 2)|0;
    $85 = (($pParse) + 392|0);
    HEAP32[$85>>2] = $84;
    $86 = (($81) + 3)|0;
    HEAP32[$80>>2] = $86;
    (_sqlite3VdbeAddOp3($78,50,$$,$86,2)|0);
    _sqlite3VdbeUsesBtree($78,$$);
    $87 = (_sqlite3VdbeAddOp1($78,44,$86)|0);
    $88 = (($0) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $89 & 32768;
    $91 = ($90|0)!=(0);
    $92 = $91 ? 1 : 4;
    (_sqlite3VdbeAddOp2($78,25,$92,$86)|0);
    (_sqlite3VdbeAddOp3($78,51,$$,2,$86)|0);
    $93 = HEAP32[$27>>2]|0;
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + 77|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    (_sqlite3VdbeAddOp2($78,25,$98,$86)|0);
    (_sqlite3VdbeAddOp3($78,51,$$,5,$86)|0);
    _sqlite3VdbeJumpHere($78,$87);
    $99 = $isVirtual | $isView;
    $100 = ($99|0)==(0);
    if ($100) {
     $101 = (_sqlite3VdbeAddOp2($78,117,$$,$84)|0);
     $102 = (($pParse) + 420|0);
     HEAP32[$102>>2] = $101;
    } else {
     (_sqlite3VdbeAddOp2($78,25,0,$84)|0);
    }
    _sqlite3OpenMasterTable($pParse,$$);
    (_sqlite3VdbeAddOp2($78,69,0,$82)|0);
    (_sqlite3VdbeAddOp2($78,28,0,$86)|0);
    (_sqlite3VdbeAddOp3($78,70,0,$86,$82)|0);
    _sqlite3VdbeChangeP5($78,8);
    (_sqlite3VdbeAddOp0($78,58)|0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 _sqlite3DbFree($0,$20);
 STACKTOP = sp;return;
}
function _sqlite3EndTable($pParse,$pCons,$pEnd,$tabOpts,$pSelect) {
 $pParse = $pParse|0;
 $pCons = $pCons|0;
 $pEnd = $pEnd|0;
 $tabOpts = $tabOpts|0;
 $pSelect = $pSelect|0;
 var $$ = 0, $$1 = 0, $$pr = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dest = 0, $n$0 = 0, $or$cond = 0, $pEnd$pCons = 0, $pIdx$0 = 0, $pIdx$03 = 0, $pIdx$04 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $zStmt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dest = sp + 76|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pEnd|0)==(0|0);
 $2 = ($pSelect|0)==(0|0);
 $or$cond = $1 & $2;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $3 = (($0) + 64|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 488|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($0) + 137|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = (($0) + 132|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($7) + 32|0);
  HEAP32[$14>>2] = $13;
 }
 $15 = $tabOpts & 32;
 $16 = ($15<<24>>24)==(0);
 do {
  if (!($16)) {
   $17 = (($7) + 44|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 & 8;
   $21 = ($20|0)==(0);
   if (!($21)) {
    _sqlite3ErrorMsg($pParse,26600,$vararg_buffer);
    STACKTOP = sp;return;
   }
   $22 = $19 & 4;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = HEAP32[$7>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $24;
    _sqlite3ErrorMsg($pParse,26656,$vararg_buffer1);
    break;
   } else {
    $25 = $19 | 32;
    $26 = $25&255;
    HEAP8[$17>>0] = $26;
    _convertToWithoutRowidTable($pParse,$7);
    break;
   }
  }
 } while(0);
 $27 = (($7) + 68|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_sqlite3SchemaToIndex($0,$28)|0);
 $30 = (($7) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  _sqlite3ResolveSelfReference($pParse,$7,4,0,$31);
 }
 _estimateTableWidth($7);
 $33 = (($7) + 8|0);
 $pIdx$03 = HEAP32[$33>>2]|0;
 $34 = ($pIdx$03|0)==(0|0);
 if (!($34)) {
  $pIdx$04 = $pIdx$03;
  while(1) {
   _estimateIndexWidth($pIdx$04);
   $35 = (($pIdx$04) + 20|0);
   $pIdx$0 = HEAP32[$35>>2]|0;
   $36 = ($pIdx$0|0)==(0|0);
   if ($36) {
    break;
   } else {
    $pIdx$04 = $pIdx$0;
   }
  }
 }
 $37 = HEAP8[$9>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $39 = (_sqlite3GetVdbe($pParse)|0);
  $40 = ($39|0)==(0|0);
  if ($40) {
   STACKTOP = sp;return;
  }
  (_sqlite3VdbeAddOp1($39,58,0)|0);
  $41 = (($7) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  $$ = $43 ? 26688 : 26696;
  $$1 = $43 ? 21488 : 25496;
  if ($2) {
   $59 = ($tabOpts<<24>>24)==(0);
   $60 = (($pParse) + 508|0);
   $61 = $59 ? $pEnd : $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($pParse) + 500|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $62;
   $66 = $64;
   $67 = (($65) - ($66))|0;
   $68 = HEAP8[$62>>0]|0;
   $69 = ($68<<24>>24)==(59);
   if ($69) {
    $n$0 = $67;
   } else {
    $70 = (($61) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($67))|0;
    $n$0 = $72;
   }
   HEAP32[$vararg_buffer3>>2] = $$;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $n$0;
   $vararg_ptr7 = (($vararg_buffer3) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $64;
   $73 = (_sqlite3MPrintf($0,26704,$vararg_buffer3)|0);
   $$pre = (($pParse) + 392|0);
   $$pre$phiZ2D = $$pre;$zStmt$0 = $73;
  } else {
   $44 = (($pParse) + 392|0);
   $45 = HEAP32[$44>>2]|0;
   (_sqlite3VdbeAddOp3($39,53,1,$45,$29)|0);
   _sqlite3VdbeChangeP5($39,2);
   $46 = (($pParse) + 72|0);
   HEAP32[$46>>2] = 2;
   _sqlite3SelectDestInit($dest,10,1);
   (_sqlite3Select($pParse,$pSelect,$dest)|0);
   (_sqlite3VdbeAddOp1($39,58,1)|0);
   $47 = (($pParse) + 68|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   do {
    if ($49) {
     $50 = (_sqlite3ResultSetOfSelect($pParse,$pSelect)|0);
     $51 = ($50|0)==(0|0);
     if ($51) {
      STACKTOP = sp;return;
     } else {
      $52 = (($50) + 38|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = (($7) + 38|0);
      HEAP16[$54>>1] = $53;
      $55 = (($50) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($7) + 4|0);
      HEAP32[$57>>2] = $56;
      HEAP16[$52>>1] = 0;
      HEAP32[$55>>2] = 0;
      _sqlite3DeleteTable($0,$50);
      break;
     }
    }
   } while(0);
   $58 = (_createTableStmt($0,$7)|0);
   $$pre$phiZ2D = $44;$zStmt$0 = $58;
  }
  $74 = (($0) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($29<<4)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($29|0)==(1);
  $79 = $78 ? 15056 : 15080;
  $80 = HEAP32[$7>>2]|0;
  $81 = HEAP32[$$pre$phiZ2D>>2]|0;
  $82 = (($pParse) + 388|0);
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $77;
  $vararg_ptr11 = (($vararg_buffer8) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $79;
  $vararg_ptr12 = (($vararg_buffer8) + 8|0);
  HEAP32[$vararg_ptr12>>2] = $$1;
  $vararg_ptr13 = (($vararg_buffer8) + 12|0);
  HEAP32[$vararg_ptr13>>2] = $80;
  $vararg_ptr14 = (($vararg_buffer8) + 16|0);
  HEAP32[$vararg_ptr14>>2] = $80;
  $vararg_ptr15 = (($vararg_buffer8) + 20|0);
  HEAP32[$vararg_ptr15>>2] = $81;
  $vararg_ptr16 = (($vararg_buffer8) + 24|0);
  HEAP32[$vararg_ptr16>>2] = $zStmt$0;
  $vararg_ptr17 = (($vararg_buffer8) + 28|0);
  HEAP32[$vararg_ptr17>>2] = $83;
  _sqlite3NestedParse($pParse,26720,$vararg_buffer8);
  _sqlite3DbFree($0,$zStmt$0);
  _sqlite3ChangeCookie($pParse,$29);
  $84 = (($7) + 44|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 & 8;
  $87 = ($86<<24>>24)==(0);
  if (!($87)) {
   $88 = HEAP32[$74>>2]|0;
   $89 = ((($88) + ($29<<4)|0) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + 72|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)==(0|0);
   if ($93) {
    $94 = (($88) + ($29<<4)|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP32[$vararg_buffer18>>2] = $95;
    _sqlite3NestedParse($pParse,26808,$vararg_buffer18);
   }
  }
  $96 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer21>>2] = $96;
  $97 = (_sqlite3MPrintf($0,26856,$vararg_buffer21)|0);
  _sqlite3VdbeAddParseSchemaOp($39,$29,$97);
  $$pr = HEAP8[$9>>0]|0;
  $98 = ($$pr<<24>>24)==(0);
  if ($98) {
   STACKTOP = sp;return;
  } else {
   $$pre$phi6Z2D = $7;
  }
 } else {
  $$pre$phi6Z2D = $7;
 }
 $99 = HEAP32[$27>>2]|0;
 $100 = (($99) + 8|0);
 $101 = HEAP32[$$pre$phi6Z2D>>2]|0;
 $102 = (_sqlite3Strlen30($101)|0);
 $103 = (_sqlite3HashInsert($100,$101,$102,$7)|0);
 $104 = ($103|0)==(0|0);
 if (!($104)) {
  HEAP8[$3>>0] = 1;
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = 0;
 $105 = (($0) + 24|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 | 2;
 HEAP32[$105>>2] = $107;
 $108 = (($7) + 12|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 $111 = (($pParse) + 500|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = HEAP32[$pCons>>2]|0;
 $114 = ($113|0)==(0|0);
 $pEnd$pCons = $114 ? $pEnd : $pCons;
 $115 = HEAP32[$pEnd$pCons>>2]|0;
 $116 = $115;
 $117 = $112;
 $118 = (($116) - ($117))|0;
 $119 = (_sqlite3Utf8CharLen($112,$118)|0);
 $120 = (($119) + 13)|0;
 $121 = (($7) + 48|0);
 HEAP32[$121>>2] = $120;
 STACKTOP = sp;return;
}
function _sqlite3AddColumn($pParse,$pName) {
 $pParse = $pParse|0;
 $pName = $pName|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 488|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($2) + 38|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($0) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)<($8|0);
 if (!($9)) {
  $10 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _sqlite3ErrorMsg($pParse,26544,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $11 = (_sqlite3NameFromToken($0,$pName)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP16[$4>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = ($13<<16>>16)>(0);
 L11: do {
  if ($15) {
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $18 = (960 + ($17)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = (($2) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($11) + 1|0);
   $i$02 = 0;
   while(1) {
    $23 = (($21) + (($i$02*24)|0)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (960 + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($19<<24>>24)==($28<<24>>24);
    if ($29) {
     $30 = (($24) + 1|0);
     $31 = (_sqlite3_stricmp($22,$30)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      break;
     }
    }
    $33 = (($i$02) + 1)|0;
    $34 = ($33|0)<($14|0);
    if ($34) {
     $i$02 = $33;
    } else {
     break L11;
    }
   }
   HEAP32[$vararg_buffer1>>2] = $11;
   _sqlite3ErrorMsg($pParse,26568,$vararg_buffer1);
   _sqlite3DbFree($0,$11);
   STACKTOP = sp;return;
  }
 } while(0);
 $35 = $14 & 7;
 $36 = ($35|0)==(0);
 $37 = (($2) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 do {
  if ($36) {
   $39 = ($14*24)|0;
   $40 = (($39) + 192)|0;
   $41 = (_sqlite3DbRealloc($0,$38,$40)|0);
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    HEAP32[$37>>2] = $41;
    $$pre = HEAP16[$4>>1]|0;
    $44 = $$pre;$46 = $41;
    break;
   }
   _sqlite3DbFree($0,$11);
   STACKTOP = sp;return;
  } else {
   $44 = $13;$46 = $38;
  }
 } while(0);
 $43 = $44 << 16 >> 16;
 $45 = (($46) + (($43*24)|0)|0);
 ;HEAP32[$45+0>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;HEAP32[$45+12>>2]=0|0;HEAP32[$45+16>>2]=0|0;HEAP32[$45+20>>2]=0|0;
 HEAP32[$45>>2] = $11;
 $47 = ((($46) + (($43*24)|0)|0) + 21|0);
 HEAP8[$47>>0] = 98;
 $48 = ((($46) + (($43*24)|0)|0) + 22|0);
 HEAP8[$48>>0] = 1;
 $49 = HEAP16[$4>>1]|0;
 $50 = (($49) + 1)<<16>>16;
 HEAP16[$4>>1] = $50;
 STACKTOP = sp;return;
}
function _sqlite3AddColumnType($pParse,$pType) {
 $pParse = $pParse|0;
 $pType = $pType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + 38|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)<(1);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $4 << 16 >> 16;
 $7 = (($6) + -1)|0;
 $8 = (($1) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$pParse>>2]|0;
 $11 = (_sqlite3NameFromToken($10,$pType)|0);
 $12 = ((($9) + (($7*24)|0)|0) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($9) + (($7*24)|0)|0) + 22|0);
 $14 = (_sqlite3AffinityType($11,$13)|0);
 $15 = ((($9) + (($7*24)|0)|0) + 21|0);
 HEAP8[$15>>0] = $14;
 STACKTOP = sp;return;
}
function _sqlite3AddDefaultValue($pParse,$pSpan) {
 $pParse = $pParse|0;
 $pSpan = $pSpan|0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 488|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$pre$phiZ2D = $pSpan;
  $29 = HEAP32[$$pre$phiZ2D>>2]|0;
  _sqlite3ExprDelete($0,$29);
  STACKTOP = sp;return;
 }
 $4 = (($2) + 38|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($6) + -1)|0;
 $8 = (($2) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$pSpan>>2]|0;
 $11 = (_sqlite3ExprIsConstantOrFunction($10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (($9) + (($7*24)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $14;
  _sqlite3ErrorMsg($pParse,26496,$vararg_buffer);
  $$pre$phiZ2D = $pSpan;
  $29 = HEAP32[$$pre$phiZ2D>>2]|0;
  _sqlite3ExprDelete($0,$29);
  STACKTOP = sp;return;
 } else {
  $15 = ((($9) + (($7*24)|0)|0) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  _sqlite3ExprDelete($0,$16);
  $17 = HEAP32[$pSpan>>2]|0;
  $18 = (_sqlite3ExprDup($0,$17,1)|0);
  HEAP32[$15>>2] = $18;
  $19 = ((($9) + (($7*24)|0)|0) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  _sqlite3DbFree($0,$20);
  $21 = (($pSpan) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($pSpan) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24;
  $26 = $22;
  $27 = (($25) - ($26))|0;
  $28 = (_sqlite3DbStrNDup($0,$22,$27)|0);
  HEAP32[$19>>2] = $28;
  $$pre$phiZ2D = $pSpan;
  $29 = HEAP32[$$pre$phiZ2D>>2]|0;
  _sqlite3ExprDelete($0,$29);
  STACKTOP = sp;return;
 }
}
function _sqlite3PExpr($pParse,$op,$pLeft,$pRight,$pToken) {
 $pParse = $pParse|0;
 $op = $op|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 $pToken = $pToken|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($op|0)!=(72);
 $1 = ($pLeft|0)==(0|0);
 $or$cond = $0 | $1;
 $2 = ($pRight|0)==(0|0);
 $or$cond1 = $or$cond | $2;
 $3 = HEAP32[$pParse>>2]|0;
 if ($or$cond1) {
  $5 = (_sqlite3ExprAlloc($3,$op,$pToken,1)|0);
  $6 = HEAP32[$pParse>>2]|0;
  _sqlite3ExprAttachSubtrees($6,$5,$pLeft,$pRight);
  $p$0 = $5;
 } else {
  $4 = (_sqlite3ExprAnd($3,$pLeft,$pRight)|0);
  $p$0 = $4;
 }
 $7 = ($p$0|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($p$0|0);
 }
 $8 = (($p$0) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 (_sqlite3ExprCheckHeight($pParse,$9)|0);
 STACKTOP = sp;return ($p$0|0);
}
function _spanExpr($pOut,$pParse,$op,$pValue) {
 $pOut = $pOut|0;
 $pParse = $pParse|0;
 $op = $op|0;
 $pValue = $pValue|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3PExpr($pParse,$op,0,0,$pValue)|0);
 HEAP32[$pOut>>2] = $0;
 $1 = HEAP32[$pValue>>2]|0;
 $2 = (($pOut) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = (($pValue) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pValue>>2]|0;
 $6 = (($5) + ($4)|0);
 $7 = (($pOut) + 8|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _sqlite3AddNotNull($pParse$0$66$val,$onError) {
 $pParse$0$66$val = $pParse$0$66$val|0;
 $onError = $onError|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pParse$0$66$val|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pParse$0$66$val) + 38|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)<(1);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $2 << 16 >> 16;
 $5 = $onError&255;
 $6 = (($4) + -1)|0;
 $7 = (($pParse$0$66$val) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8) + (($6*24)|0)|0) + 20|0);
 HEAP8[$9>>0] = $5;
 STACKTOP = sp;return;
}
function _sqlite3AddPrimaryKey($pParse,$pList,$onError,$autoInc,$sortOrder) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 $onError = $onError|0;
 $autoInc = $autoInc|0;
 $sortOrder = $sortOrder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $exitcond = 0, $i$07 = 0, $iCol$0$lcssa = 0, $iCol$13 = 0, $iCol$15 = 0, $iCol$2 = 0, $nTerm$0 = 0, $or$cond = 0, $phitmp = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $zType$0$lcssa = 0, $zType$08 = 0, $zType$1 = 0, $zType$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = $pList;
  } else {
   $3 = (($pParse) + 455|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (($1) + 44|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = $8 & 4;
    $10 = ($9|0)==(0);
    if (!($10)) {
     $11 = HEAP32[$1>>2]|0;
     HEAP32[$vararg_buffer>>2] = $11;
     _sqlite3ErrorMsg($pParse,26392,$vararg_buffer);
     $$0 = $pList;
     break;
    }
    $12 = $8 | 4;
    $13 = $12&255;
    HEAP8[$6>>0] = $13;
    $14 = ($pList|0)==(0|0);
    if ($14) {
     $15 = (($1) + 38|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = $16 << 16 >> 16;
     $18 = (($17) + -1)|0;
     $19 = (($1) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($20) + (($18*24)|0)|0) + 23|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = $23 | 1;
     $25 = $24&255;
     HEAP8[$21>>0] = $25;
     $26 = HEAP32[$19>>2]|0;
     $27 = ((($26) + (($18*24)|0)|0) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $iCol$2 = $18;$nTerm$0 = 0;$zType$2 = $28;
    } else {
     $29 = HEAP32[$pList>>2]|0;
     $30 = ($29|0)>(0);
     if ($30) {
      $31 = (($1) + 38|0);
      $32 = (($pList) + 8|0);
      $33 = (($1) + 4|0);
      $i$07 = 0;$zType$08 = 0;
      while(1) {
       $34 = HEAP16[$31>>1]|0;
       $35 = ($34<<16>>16)>(0);
       L13: do {
        if ($35) {
         $36 = HEAP32[$32>>2]|0;
         $37 = ((($36) + (($i$07*20)|0)|0) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = HEAP32[$33>>2]|0;
         $iCol$15 = 0;
         while(1) {
          $43 = (($39) + (($iCol$15*24)|0)|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = (_sqlite3_stricmp($38,$44)|0);
          $46 = ($45|0)==(0);
          $42 = (($iCol$15) + 1)|0;
          if ($46) {
           break;
          }
          $40 = $34 << 16 >> 16;
          $41 = ($42|0)<($40|0);
          if ($41) {
           $iCol$15 = $42;
          } else {
           $iCol$13 = $42;$zType$1 = $zType$08;
           break L13;
          }
         }
         $47 = ((($39) + (($iCol$15*24)|0)|0) + 23|0);
         $48 = HEAP8[$47>>0]|0;
         $49 = $48&255;
         $50 = $49 | 1;
         $51 = $50&255;
         HEAP8[$47>>0] = $51;
         $52 = HEAP32[$33>>2]|0;
         $53 = ((($52) + (($iCol$15*24)|0)|0) + 12|0);
         $54 = HEAP32[$53>>2]|0;
         $iCol$13 = $iCol$15;$zType$1 = $54;
        } else {
         $iCol$13 = 0;$zType$1 = $zType$08;
        }
       } while(0);
       $55 = (($i$07) + 1)|0;
       $exitcond = ($55|0)==($29|0);
       if ($exitcond) {
        $iCol$0$lcssa = $iCol$13;$zType$0$lcssa = $zType$1;
        break;
       } else {
        $i$07 = $55;$zType$08 = $zType$1;
       }
      }
     } else {
      $iCol$0$lcssa = -1;$zType$0$lcssa = 0;
     }
     $phitmp = ($29|0)!=(1);
     $iCol$2 = $iCol$0$lcssa;$nTerm$0 = $phitmp;$zType$2 = $zType$0$lcssa;
    }
    $56 = ($zType$2|0)==(0|0);
    $or$cond = $nTerm$0 | $56;
    if (!($or$cond)) {
     $57 = (_sqlite3_stricmp($zType$2,16568)|0);
     $58 = $57 | $sortOrder;
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = $iCol$2&65535;
      $61 = (($1) + 36|0);
      HEAP16[$61>>1] = $60;
      $62 = $onError&255;
      $63 = (($1) + 45|0);
      HEAP8[$63>>0] = $62;
      $64 = $autoInc << 3;
      $65 = HEAP8[$6>>0]|0;
      $66 = $65&255;
      $67 = $66 | $64;
      $68 = $67&255;
      HEAP8[$6>>0] = $68;
      if ($14) {
       $$0 = 0;
       break;
      }
      $69 = (($pList) + 8|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($70) + 12|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = (($pParse) + 452|0);
      HEAP8[$73>>0] = $72;
      $$0 = $pList;
      break;
     }
    }
    $74 = ($autoInc|0)==(0);
    if (!($74)) {
     _sqlite3ErrorMsg($pParse,26440,$vararg_buffer1);
     $$0 = $pList;
     break;
    }
    $75 = (($pParse) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = (_sqlite3VdbeAddOp0($76,155)|0);
     $79 = (($pParse) + 424|0);
     HEAP32[$79>>2] = $78;
    }
    $80 = (_sqlite3CreateIndex($pParse,0,0,0,$pList,$onError,0,0,$sortOrder,0)|0);
    $81 = ($80|0)==(0|0);
    if ($81) {
     $$0 = 0;
    } else {
     $82 = (($80) + 55|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 & -4;
     $85 = $84 | 2;
     HEAP8[$82>>0] = $85;
     if ($77) {
      $86 = (($pParse) + 424|0);
      $87 = HEAP32[$86>>2]|0;
      _sqlite3VdbeJumpHere($76,$87);
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   } else {
    $$0 = $pList;
   }
  }
 } while(0);
 $88 = HEAP32[$pParse>>2]|0;
 _sqlite3ExprListDelete($88,$$0);
 STACKTOP = sp;return;
}
function _sqlite3CreateIndex($pParse,$pName1,$pName2,$pTblName,$pList,$onError,$pStart,$pPIWhere,$sortOrder,$ifNotExist) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $pTblName = $pTblName|0;
 $pList = $pList|0;
 $onError = $onError|0;
 $pStart = $pStart|0;
 $pPIWhere = $pPIWhere|0;
 $sortOrder = $sortOrder|0;
 $ifNotExist = $ifNotExist|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1217 = 0, $$14 = 0, $$1416 = 0, $$1491 = 0, $$5 = 0, $$8 = 0, $$pre = 0, $$pre83 = 0, $$pre84 = 0, $$pre88 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $i$058 = 0, $i$1$lcssa = 0, $i$151 = 0, $i$233 = 0, $i$3 = 0, $iDb$0 = 0;
 var $iDb$1 = 0, $j$0$lcssa = 0, $j$037 = 0, $j$132 = 0, $k$0$lcssa = 0, $k$021 = 0, $n$0$lcssa = 0, $n$065 = 0, $nExtra$0$lcssa = 0, $nExtra$057 = 0, $nExtra$1 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond9 = 0, $pIdx$0 = 0, $pIdx$025 = 0, $pIdx$026 = 0, $pListItem$050 = 0, $pLoop$0 = 0, $pLoop$064 = 0;
 var $pLoop$066 = 0, $pName = 0, $pOther$0 = 0, $pParse$idx$val = 0, $pPk$0 = 0, $pRet$015 = 0, $pTab$0 = 0, $pTabCol$036 = 0, $sFix = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $zColl$0 = 0, $zExtra = 0, $zName$0 = 0, $zName$114 = 0, $zStmt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sFix = sp + 128|0;
 $pName = sp + 120|0;
 $zExtra = sp + 116|0;
 $0 = HEAP32[$pParse>>2]|0;
 HEAP32[$pName>>2] = 0;
 HEAP32[$zExtra>>2] = 0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $4 = (($pParse) + 455|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (_sqlite3ReadSchema($pParse)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     $9 = ($pTblName|0)!=(0|0);
     if ($9) {
      $10 = (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pName)|0);
      $11 = ($10|0)<(0);
      if ($11) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
      $12 = (($0) + 137|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = ($13<<24>>24)==(0);
      if ($14) {
       $15 = (_sqlite3SrcListLookup($pParse,$pTblName)|0);
       $16 = (($pName2) + 4|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)!=(0);
       $19 = ($15|0)==(0|0);
       $or$cond = $18 | $19;
       if ($or$cond) {
        $iDb$0 = $10;
       } else {
        $20 = (($15) + 68|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = (($0) + 16|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = (($23) + 28|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ($21|0)==($25|0);
        $$5 = $26 ? 1 : $10;
        $iDb$0 = $$5;
       }
      } else {
       $iDb$0 = $10;
      }
      $27 = HEAP32[$pName>>2]|0;
      _sqlite3FixInit($sFix,$pParse,$iDb$0,10320,$27);
      (_sqlite3FixSrcList($sFix,$pTblName)|0);
      $28 = (($pTblName) + 8|0);
      $29 = (_sqlite3LocateTableItem($pParse,0,$28)|0);
      $30 = ($29|0)==(0|0);
      if ($30) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
      $31 = ($iDb$0|0)==(1);
      if ($31) {
       $32 = (($0) + 16|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($33) + 28|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($29) + 68|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($35|0)==($37|0);
       if (!($38)) {
        $39 = HEAP32[$29>>2]|0;
        HEAP32[$vararg_buffer>>2] = $39;
        _sqlite3ErrorMsg($pParse,25936,$vararg_buffer);
        $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
        break;
       }
      }
      $40 = (($29) + 44|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 & 32;
      $43 = ($42<<24>>24)==(0);
      if ($43) {
       $68 = $27;$iDb$1 = $iDb$0;$pPk$0 = 0;$pTab$0 = $29;
      } else {
       $44 = (_sqlite3PrimaryKeyIndex($29)|0);
       $68 = $27;$iDb$1 = $iDb$0;$pPk$0 = $44;$pTab$0 = $29;
      }
     } else {
      $45 = (($pParse) + 488|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0|0);
      if ($47) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
      $48 = (($46) + 68|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (_sqlite3SchemaToIndex($0,$49)|0);
      $68 = 0;$iDb$1 = $50;$pPk$0 = 0;$pTab$0 = $46;
     }
     $51 = (($0) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + ($iDb$1<<4)|0);
     $54 = HEAP32[$pTab$0>>2]|0;
     $55 = (_sqlite3_strnicmp($54,15296,7)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      $57 = (($54) + 7|0);
      $58 = (_sqlite3_strnicmp($57,25992,9)|0);
      $59 = ($58|0)==(0);
      if (!($59)) {
       HEAP32[$vararg_buffer1>>2] = $54;
       _sqlite3ErrorMsg($pParse,26008,$vararg_buffer1);
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
     }
     $60 = (($pTab$0) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if (!($62)) {
      _sqlite3ErrorMsg($pParse,26040,$vararg_buffer4);
      $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
      break;
     }
     $63 = (($pTab$0) + 44|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64 & 16;
     $66 = ($65<<24>>24)==(0);
     if (!($66)) {
      _sqlite3ErrorMsg($pParse,26072,$vararg_buffer6);
      $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
      break;
     }
     $67 = ($68|0)==(0|0);
     if ($67) {
      $82 = (($pTab$0) + 8|0);
      $pLoop$064 = HEAP32[$82>>2]|0;
      $83 = ($pLoop$064|0)==(0|0);
      if ($83) {
       $n$0$lcssa = 1;
      } else {
       $n$065 = 1;$pLoop$066 = $pLoop$064;
       while(1) {
        $84 = (($pLoop$066) + 20|0);
        $85 = (($n$065) + 1)|0;
        $pLoop$0 = HEAP32[$84>>2]|0;
        $86 = ($pLoop$0|0)==(0|0);
        if ($86) {
         $n$0$lcssa = $85;
         break;
        } else {
         $n$065 = $85;$pLoop$066 = $pLoop$0;
        }
       }
      }
      HEAP32[$vararg_buffer14>>2] = $54;
      $vararg_ptr17 = (($vararg_buffer14) + 4|0);
      HEAP32[$vararg_ptr17>>2] = $n$0$lcssa;
      $87 = (_sqlite3MPrintf($0,26176,$vararg_buffer14)|0);
      $88 = ($87|0)==(0|0);
      if ($88) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
      $$pre88 = HEAP32[$53>>2]|0;
      $91 = $$pre88;$zName$0 = $87;
     } else {
      $69 = (_sqlite3NameFromToken($0,$68)|0);
      $70 = ($69|0)==(0|0);
      if ($70) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
       break;
      }
      $71 = (_sqlite3CheckObjectName($pParse,$69)|0);
      $72 = ($71|0)==(0);
      if (!($72)) {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $69;
       break;
      }
      $73 = (($0) + 137|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = ($74<<24>>24)==(0);
      if ($75) {
       $76 = (_sqlite3FindTable($0,$69,0)|0);
       $77 = ($76|0)==(0|0);
       if (!($77)) {
        HEAP32[$vararg_buffer8>>2] = $69;
        _sqlite3ErrorMsg($pParse,26112,$vararg_buffer8);
        $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $69;
        break;
       }
      }
      $78 = HEAP32[$53>>2]|0;
      $79 = (_sqlite3FindIndex($0,$69,$78)|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $91 = $78;$zName$0 = $69;
      } else {
       $81 = ($ifNotExist|0)==(0);
       if ($81) {
        HEAP32[$vararg_buffer11>>2] = $69;
        _sqlite3ErrorMsg($pParse,26152,$vararg_buffer11);
        $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $69;
        break;
       } else {
        _sqlite3CodeVerifySchema($pParse,$iDb$1);
        $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $69;
        break;
       }
      }
     }
     $89 = ($iDb$1|0)==(1);
     $90 = $89 ? 15056 : 15080;
     $92 = (_sqlite3AuthCheck($pParse,18,$90,0,$91)|0);
     $93 = ($92|0)==(0);
     if ($93) {
      $$ = $89 ? 3 : 1;
      $94 = HEAP32[$pTab$0>>2]|0;
      $95 = (_sqlite3AuthCheck($pParse,$$,$zName$0,$94,$91)|0);
      $96 = ($95|0)==(0);
      if ($96) {
       $97 = ($pList|0)==(0|0);
       if ($97) {
        $pParse$idx$val = HEAP32[$pParse>>2]|0;
        $98 = (_sqlite3ExprListAppend($pParse$idx$val,0,0)|0);
        $99 = ($98|0)==(0|0);
        if ($99) {
         $$1217 = 0;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $zName$0;
         break;
        }
        $100 = HEAP32[$pParse>>2]|0;
        $101 = (($pTab$0) + 38|0);
        $102 = HEAP16[$101>>1]|0;
        $103 = $102 << 16 >> 16;
        $104 = (($103) + -1)|0;
        $105 = (($pTab$0) + 4|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = (($106) + (($104*24)|0)|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (_sqlite3DbStrDup($100,$108)|0);
        $110 = (($98) + 8|0);
        $111 = HEAP32[$110>>2]|0;
        $112 = (($111) + 4|0);
        HEAP32[$112>>2] = $109;
        $113 = $sortOrder&255;
        $114 = HEAP32[$110>>2]|0;
        $115 = (($114) + 12|0);
        HEAP8[$115>>0] = $113;
        $$0 = $98;
       } else {
        $$0 = $pList;
       }
       $116 = HEAP32[$$0>>2]|0;
       $117 = ($116|0)>(0);
       if ($117) {
        $118 = (($$0) + 8|0);
        $119 = HEAP32[$118>>2]|0;
        $i$058 = 0;$nExtra$057 = 0;
        while(1) {
         $120 = (($119) + (($i$058*20)|0)|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0|0);
         if ($122) {
          $nExtra$1 = $nExtra$057;
         } else {
          $123 = (($121) + 8|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = (_sqlite3Strlen30($124)|0);
          $126 = (($nExtra$057) + 1)|0;
          $127 = (($126) + ($125))|0;
          $nExtra$1 = $127;
         }
         $128 = (($i$058) + 1)|0;
         $129 = ($128|0)<($116|0);
         if ($129) {
          $i$058 = $128;$nExtra$057 = $nExtra$1;
         } else {
          $nExtra$0$lcssa = $nExtra$1;
          break;
         }
        }
       } else {
        $nExtra$0$lcssa = 0;
       }
       $130 = (_sqlite3Strlen30($zName$0)|0);
       $131 = ($pPk$0|0)!=(0|0);
       if ($131) {
        $132 = (($pPk$0) + 50|0);
        $133 = HEAP16[$132>>1]|0;
        $134 = $133&65535;
        $136 = $134;
       } else {
        $136 = 1;
       }
       $135 = (($116) + ($136))|0;
       $137 = $135&65535;
       $138 = (($nExtra$0$lcssa) + 1)|0;
       $139 = (($138) + ($130))|0;
       $140 = (_sqlite3AllocateIndexObject($0,$137,$139,$zExtra)|0);
       $141 = HEAP8[$1>>0]|0;
       $142 = ($141<<24>>24)==(0);
       L67: do {
        if ($142) {
         $143 = HEAP32[$zExtra>>2]|0;
         HEAP32[$140>>2] = $143;
         $144 = (($130) + 1)|0;
         $145 = (($143) + ($144)|0);
         HEAP32[$zExtra>>2] = $145;
         _memcpy(($143|0),($zName$0|0),($144|0))|0;
         $146 = (($140) + 12|0);
         HEAP32[$146>>2] = $pTab$0;
         $147 = $onError&255;
         $148 = (($140) + 54|0);
         HEAP8[$148>>0] = $147;
         $149 = ($onError|0)!=(0);
         $150 = (($140) + 55|0);
         $151 = $149&1;
         $152 = HEAP8[$150>>0]|0;
         $153 = ($151 << 3)&255;
         $154 = $152 & -12;
         $155 = $67&1;
         $156 = $154 | $153;
         $157 = $156 | $155;
         HEAP8[$150>>0] = $157;
         $158 = HEAP32[$51>>2]|0;
         $159 = ((($158) + ($iDb$1<<4)|0) + 12|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = (($140) + 24|0);
         HEAP32[$161>>2] = $160;
         $162 = HEAP32[$$0>>2]|0;
         $163 = $162&65535;
         $164 = (($140) + 50|0);
         HEAP16[$164>>1] = $163;
         $165 = ($pPIWhere|0)==(0|0);
         if ($165) {
          $173 = $162;
         } else {
          _sqlite3ResolveSelfReference($pParse,$pTab$0,16,$pPIWhere,0);
          $166 = (($140) + 36|0);
          HEAP32[$166>>2] = $pPIWhere;
          $$pre = HEAP32[$$0>>2]|0;
          $173 = $$pre;
         }
         $167 = ((($52) + ($iDb$1<<4)|0) + 12|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = (($168) + 76|0);
         $170 = HEAP8[$169>>0]|0;
         $171 = ($170&255)>(3);
         $172 = ($173|0)>(0);
         L72: do {
          if ($172) {
           $174 = (($$0) + 8|0);
           $175 = HEAP32[$174>>2]|0;
           $176 = (($pTab$0) + 4|0);
           $177 = (($pTab$0) + 38|0);
           $178 = (($140) + 4|0);
           $179 = (($0) + 137|0);
           $180 = (($140) + 32|0);
           $181 = (($140) + 28|0);
           $207 = $145;$i$151 = 0;$pListItem$050 = $175;
           while(1) {
            $182 = (($pListItem$050) + 4|0);
            $183 = HEAP32[$182>>2]|0;
            $184 = HEAP16[$177>>1]|0;
            $185 = ($184<<16>>16)>(0);
            L76: do {
             if ($185) {
              $186 = HEAP32[$176>>2]|0;
              $j$037 = 0;$pTabCol$036 = $186;
              while(1) {
               $187 = HEAP32[$pTabCol$036>>2]|0;
               $188 = (_sqlite3_stricmp($183,$187)|0);
               $189 = ($188|0)==(0);
               if ($189) {
                $j$0$lcssa = $j$037;
                break L76;
               }
               $190 = (($j$037) + 1)|0;
               $191 = (($pTabCol$036) + 24|0);
               $192 = $184 << 16 >> 16;
               $193 = ($190|0)<($192|0);
               if ($193) {
                $j$037 = $190;$pTabCol$036 = $191;
               } else {
                $j$0$lcssa = $190;
                break;
               }
              }
             } else {
              $j$0$lcssa = 0;
             }
            } while(0);
            $194 = $184 << 16 >> 16;
            $195 = ($j$0$lcssa|0)<($194|0);
            if (!($195)) {
             break;
            }
            $198 = $j$0$lcssa&65535;
            $199 = HEAP32[$178>>2]|0;
            $200 = (($199) + ($i$151<<1)|0);
            HEAP16[$200>>1] = $198;
            $201 = HEAP32[$pListItem$050>>2]|0;
            $202 = ($201|0)==(0|0);
            if ($202) {
             $210 = HEAP32[$176>>2]|0;
             $211 = ((($210) + (($j$0$lcssa*24)|0)|0) + 16|0);
             $212 = HEAP32[$211>>2]|0;
             $213 = ($212|0)!=(0|0);
             $$1 = $213 ? $212 : 3592;
             $399 = $207;$zColl$0 = $$1;
            } else {
             $203 = (($201) + 8|0);
             $204 = HEAP32[$203>>2]|0;
             $205 = (_sqlite3Strlen30($204)|0);
             $206 = (($205) + 1)|0;
             _memcpy(($207|0),($204|0),($206|0))|0;
             $208 = HEAP32[$zExtra>>2]|0;
             $209 = (($208) + ($206)|0);
             HEAP32[$zExtra>>2] = $209;
             $399 = $209;$zColl$0 = $208;
            }
            $214 = HEAP8[$179>>0]|0;
            $215 = ($214<<24>>24)==(0);
            if ($215) {
             $216 = (_sqlite3LocateCollSeq($pParse,$zColl$0)|0);
             $217 = ($216|0)==(0|0);
             if ($217) {
              $$14 = 0;
              label = 116;
              break L67;
             }
            }
            $218 = HEAP32[$180>>2]|0;
            $219 = (($218) + ($i$151<<2)|0);
            HEAP32[$219>>2] = $zColl$0;
            $220 = (($pListItem$050) + 12|0);
            $221 = HEAP8[$220>>0]|0;
            $222 = $171 ? $221 : 0;
            $223 = HEAP32[$181>>2]|0;
            $224 = (($223) + ($i$151)|0);
            HEAP8[$224>>0] = $222;
            $225 = HEAP32[$176>>2]|0;
            $226 = ((($225) + (($j$0$lcssa*24)|0)|0) + 20|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = ($227<<24>>24)==(0);
            if ($228) {
             $229 = HEAP8[$150>>0]|0;
             $230 = $229 & -9;
             HEAP8[$150>>0] = $230;
            }
            $231 = (($i$151) + 1)|0;
            $232 = (($pListItem$050) + 20|0);
            $233 = HEAP32[$$0>>2]|0;
            $234 = ($231|0)<($233|0);
            if ($234) {
             $207 = $399;$i$151 = $231;$pListItem$050 = $232;
            } else {
             $i$1$lcssa = $231;
             break L72;
            }
           }
           $196 = HEAP32[$pTab$0>>2]|0;
           HEAP32[$vararg_buffer18>>2] = $196;
           $vararg_ptr21 = (($vararg_buffer18) + 4|0);
           HEAP32[$vararg_ptr21>>2] = $183;
           _sqlite3ErrorMsg($pParse,26200,$vararg_buffer18);
           $197 = (($pParse) + 17|0);
           HEAP8[$197>>0] = 1;
           $$14 = 0;
           label = 116;
           break L67;
          } else {
           $i$1$lcssa = 0;
          }
         } while(0);
         do {
          if ($131) {
           $235 = (($pPk$0) + 50|0);
           $236 = HEAP16[$235>>1]|0;
           $237 = ($236<<16>>16)==(0);
           if ($237) {
            break;
           }
           $238 = (($pPk$0) + 4|0);
           $239 = (($140) + 4|0);
           $240 = (($pPk$0) + 32|0);
           $241 = (($140) + 32|0);
           $242 = (($pPk$0) + 28|0);
           $243 = (($140) + 28|0);
           $244 = (($140) + 52|0);
           $i$233 = $i$1$lcssa;$j$132 = 0;
           while(1) {
            $245 = HEAP32[$238>>2]|0;
            $246 = (($245) + ($j$132<<1)|0);
            $247 = HEAP16[$246>>1]|0;
            $248 = $247 << 16 >> 16;
            $249 = HEAP32[$239>>2]|0;
            $250 = HEAP16[$164>>1]|0;
            $251 = $250&65535;
            $252 = (_hasColumn($249,$251,$248)|0);
            $253 = ($252|0)==(0);
            if ($253) {
             $256 = (($249) + ($i$233<<1)|0);
             HEAP16[$256>>1] = $247;
             $257 = HEAP32[$240>>2]|0;
             $258 = (($257) + ($j$132<<2)|0);
             $259 = HEAP32[$258>>2]|0;
             $260 = HEAP32[$241>>2]|0;
             $261 = (($260) + ($i$233<<2)|0);
             HEAP32[$261>>2] = $259;
             $262 = HEAP32[$242>>2]|0;
             $263 = (($262) + ($j$132)|0);
             $264 = HEAP8[$263>>0]|0;
             $265 = HEAP32[$243>>2]|0;
             $266 = (($265) + ($i$233)|0);
             HEAP8[$266>>0] = $264;
             $267 = (($i$233) + 1)|0;
             $i$3 = $267;
            } else {
             $254 = HEAP16[$244>>1]|0;
             $255 = (($254) + -1)<<16>>16;
             HEAP16[$244>>1] = $255;
             $i$3 = $i$233;
            }
            $268 = (($j$132) + 1)|0;
            $269 = HEAP16[$235>>1]|0;
            $270 = $269&65535;
            $271 = ($268|0)<($270|0);
            if ($271) {
             $i$233 = $i$3;$j$132 = $268;
            } else {
             break;
            }
           }
          } else {
           $272 = (($140) + 4|0);
           $273 = HEAP32[$272>>2]|0;
           $274 = (($273) + ($i$1$lcssa<<1)|0);
           HEAP16[$274>>1] = -1;
           $275 = (($140) + 32|0);
           $276 = HEAP32[$275>>2]|0;
           $277 = (($276) + ($i$1$lcssa<<2)|0);
           HEAP32[$277>>2] = 3592;
          }
         } while(0);
         _sqlite3DefaultRowEst($140);
         $278 = (($pParse) + 488|0);
         $279 = HEAP32[$278>>2]|0;
         $280 = ($279|0)==(0|0);
         if ($280) {
          _estimateIndexWidth($140);
          $$pre83 = HEAP32[$278>>2]|0;
          $282 = $$pre83;
         } else {
          $282 = $279;
         }
         $281 = ($pTab$0|0)==($282|0);
         L109: do {
          if ($281) {
           $283 = (($pTab$0) + 8|0);
           $pIdx$025 = HEAP32[$283>>2]|0;
           $284 = ($pIdx$025|0)==(0|0);
           if ($284) {
            break;
           }
           $285 = HEAP16[$164>>1]|0;
           $286 = (($140) + 4|0);
           $287 = (($140) + 32|0);
           $pIdx$026 = $pIdx$025;
           while(1) {
            $288 = (($pIdx$026) + 50|0);
            $289 = HEAP16[$288>>1]|0;
            $290 = ($289<<16>>16)==($285<<16>>16);
            if ($290) {
             $291 = ($285<<16>>16)==(0);
             L116: do {
              if ($291) {
               $314 = 0;$k$0$lcssa = 0;
              } else {
               $292 = (($pIdx$026) + 4|0);
               $293 = HEAP32[$292>>2]|0;
               $294 = HEAP32[$286>>2]|0;
               $295 = (($pIdx$026) + 32|0);
               $k$021 = 0;
               while(1) {
                $296 = (($293) + ($k$021<<1)|0);
                $297 = HEAP16[$296>>1]|0;
                $298 = (($294) + ($k$021<<1)|0);
                $299 = HEAP16[$298>>1]|0;
                $300 = ($297<<16>>16)==($299<<16>>16);
                if (!($300)) {
                 $314 = $285;$k$0$lcssa = $k$021;
                 break L116;
                }
                $301 = HEAP32[$295>>2]|0;
                $302 = (($301) + ($k$021<<2)|0);
                $303 = HEAP32[$302>>2]|0;
                $304 = HEAP32[$287>>2]|0;
                $305 = (($304) + ($k$021<<2)|0);
                $306 = HEAP32[$305>>2]|0;
                $307 = ($303|0)==($306|0);
                if (!($307)) {
                 $308 = (_sqlite3_stricmp($303,$306)|0);
                 $309 = ($308|0)==(0);
                 if (!($309)) {
                  $314 = $285;$k$0$lcssa = $k$021;
                  break L116;
                 }
                }
                $310 = (($k$021) + 1)|0;
                $311 = $285&65535;
                $312 = ($310|0)<($311|0);
                if ($312) {
                 $k$021 = $310;
                } else {
                 $314 = $285;$k$0$lcssa = $310;
                 break;
                }
               }
              }
             } while(0);
             $313 = $314&65535;
             $315 = ($k$0$lcssa|0)==($313|0);
             if ($315) {
              break;
             }
            }
            $325 = (($pIdx$026) + 20|0);
            $pIdx$0 = HEAP32[$325>>2]|0;
            $326 = ($pIdx$0|0)==(0|0);
            if ($326) {
             break L109;
            } else {
             $pIdx$026 = $pIdx$0;
            }
           }
           $316 = (($pIdx$026) + 54|0);
           $317 = HEAP8[$316>>0]|0;
           $318 = HEAP8[$148>>0]|0;
           $319 = ($317<<24>>24)==($318<<24>>24);
           if ($319) {
            $$1491 = 0;
            break L67;
           }
           $320 = ($317<<24>>24)==(10);
           $321 = ($318<<24>>24)==(10);
           $or$cond7 = $320 | $321;
           if ($or$cond7) {
            $323 = $317;
           } else {
            HEAP32[$vararg_buffer22>>2] = 0;
            _sqlite3ErrorMsg($pParse,26232,$vararg_buffer22);
            $$pre84 = HEAP8[$316>>0]|0;
            $323 = $$pre84;
           }
           $322 = ($323<<24>>24)==(10);
           if (!($322)) {
            $$14 = 0;
            label = 116;
            break L67;
           }
           $324 = HEAP8[$148>>0]|0;
           HEAP8[$316>>0] = $324;
           $$14 = 0;
           label = 116;
           break L67;
          }
         } while(0);
         $327 = (($0) + 137|0);
         $328 = HEAP8[$327>>0]|0;
         $329 = ($328<<24>>24)==(0);
         do {
          if ($329) {
           $342 = (($pParse) + 68|0);
           $343 = HEAP32[$342>>2]|0;
           $344 = ($343|0)==(0);
           if (!($344)) {
            label = 108;
            break;
           }
           $345 = HEAP8[$63>>0]|0;
           $346 = $345 & 32;
           $347 = ($346<<24>>24)==(0);
           $brmerge = $347 | $9;
           if (!($brmerge)) {
            label = 108;
            break;
           }
           $348 = (($pParse) + 76|0);
           $349 = HEAP32[$348>>2]|0;
           $350 = (($349) + 1)|0;
           HEAP32[$348>>2] = $350;
           $351 = (_sqlite3GetVdbe($pParse)|0);
           $352 = ($351|0)==(0|0);
           if ($352) {
            $$14 = 0;
            label = 116;
            break L67;
           }
           _sqlite3BeginWriteOperation($pParse,1,$iDb$1);
           (_sqlite3VdbeAddOp2($351,116,$iDb$1,$350)|0);
           $353 = ($pStart|0)==(0|0);
           if ($353) {
            $zStmt$0 = 0;
           } else {
            $354 = (($pParse) + 508|0);
            $355 = HEAP32[$354>>2]|0;
            $356 = HEAP32[$68>>2]|0;
            $357 = $355;
            $358 = $356;
            $359 = (($357) - ($358))|0;
            $360 = (($pParse) + 512|0);
            $361 = HEAP32[$360>>2]|0;
            $362 = (($359) + ($361))|0;
            $363 = (($362) + -1)|0;
            $364 = (($356) + ($363)|0);
            $365 = HEAP8[$364>>0]|0;
            $366 = ($365<<24>>24)==(59);
            $$8 = $366 ? $363 : $362;
            $367 = ($onError|0)==(0);
            $368 = $367 ? 1728 : 26304;
            HEAP32[$vararg_buffer25>>2] = $368;
            $vararg_ptr28 = (($vararg_buffer25) + 4|0);
            HEAP32[$vararg_ptr28>>2] = $$8;
            $vararg_ptr29 = (($vararg_buffer25) + 8|0);
            HEAP32[$vararg_ptr29>>2] = $356;
            $369 = (_sqlite3MPrintf($0,26280,$vararg_buffer25)|0);
            $zStmt$0 = $369;
           }
           $370 = HEAP32[$51>>2]|0;
           $371 = (($370) + ($iDb$1<<4)|0);
           $372 = HEAP32[$371>>2]|0;
           $373 = HEAP32[$140>>2]|0;
           $374 = HEAP32[$pTab$0>>2]|0;
           HEAP32[$vararg_buffer30>>2] = $372;
           $vararg_ptr33 = (($vararg_buffer30) + 4|0);
           HEAP32[$vararg_ptr33>>2] = $90;
           $vararg_ptr34 = (($vararg_buffer30) + 8|0);
           HEAP32[$vararg_ptr34>>2] = $373;
           $vararg_ptr35 = (($vararg_buffer30) + 12|0);
           HEAP32[$vararg_ptr35>>2] = $374;
           $vararg_ptr36 = (($vararg_buffer30) + 16|0);
           HEAP32[$vararg_ptr36>>2] = $350;
           $vararg_ptr37 = (($vararg_buffer30) + 20|0);
           HEAP32[$vararg_ptr37>>2] = $zStmt$0;
           _sqlite3NestedParse($pParse,26312,$vararg_buffer30);
           _sqlite3DbFree($0,$zStmt$0);
           if (!($9)) {
            break;
           }
           _sqlite3RefillIndex($pParse,$140,$350);
           _sqlite3ChangeCookie($pParse,$iDb$1);
           $375 = HEAP32[$140>>2]|0;
           HEAP32[$vararg_buffer38>>2] = $375;
           $376 = (_sqlite3MPrintf($0,26360,$vararg_buffer38)|0);
           _sqlite3VdbeAddParseSchemaOp($351,$iDb$1,$376);
           (_sqlite3VdbeAddOp1($351,138,0)|0);
           label = 108;
          } else {
           $330 = HEAP32[$161>>2]|0;
           $331 = (($330) + 24|0);
           $332 = HEAP32[$140>>2]|0;
           $333 = (_sqlite3Strlen30($332)|0);
           $334 = (_sqlite3HashInsert($331,$332,$333,$140)|0);
           $335 = ($334|0)==(0|0);
           if (!($335)) {
            HEAP8[$1>>0] = 1;
            $$14 = 0;
            label = 116;
            break L67;
           }
           $336 = (($0) + 24|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = $337 | 2;
           HEAP32[$336>>2] = $338;
           if (!($9)) {
            break;
           }
           $339 = (($0) + 132|0);
           $340 = HEAP32[$339>>2]|0;
           $341 = (($140) + 44|0);
           HEAP32[$341>>2] = $340;
           label = 108;
          }
         } while(0);
         if ((label|0) == 108) {
          $377 = HEAP8[$327>>0]|0;
          $378 = ($377<<24>>24)!=(0);
          $379 = ($pTblName|0)==(0|0);
          $or$cond9 = $378 | $379;
          if (!($or$cond9)) {
           $$14 = 0;
           label = 116;
           break;
          }
         }
         $380 = ($onError|0)==(5);
         $381 = (($pTab$0) + 8|0);
         $382 = HEAP32[$381>>2]|0;
         do {
          if ($380) {
           $383 = ($382|0)==(0|0);
           if ($383) {
            $389 = 0;
            break;
           }
           $384 = (($382) + 54|0);
           $385 = HEAP8[$384>>0]|0;
           $386 = ($385<<24>>24)==(5);
           if ($386) {
            $389 = $382;
            break;
           } else {
            $pOther$0 = $382;
           }
           while(1) {
            $390 = (($pOther$0) + 20|0);
            $391 = HEAP32[$390>>2]|0;
            $392 = ($391|0)==(0|0);
            if ($392) {
             $397 = 0;
             break;
            }
            $393 = (($391) + 54|0);
            $394 = HEAP8[$393>>0]|0;
            $395 = ($394<<24>>24)==(5);
            if ($395) {
             $397 = $391;
             break;
            } else {
             $pOther$0 = $391;
            }
           }
           $396 = (($140) + 20|0);
           HEAP32[$396>>2] = $397;
           HEAP32[$390>>2] = $140;
           $$1217 = $$0;$$1416 = 0;$pRet$015 = $140;$zName$114 = $zName$0;
           break L1;
          } else {
           $389 = $382;
          }
         } while(0);
         $387 = (($pTab$0) + 8|0);
         $388 = (($140) + 20|0);
         HEAP32[$388>>2] = $389;
         HEAP32[$387>>2] = $140;
         $$1217 = $$0;$$1416 = 0;$pRet$015 = $140;$zName$114 = $zName$0;
         break L1;
        } else {
         $$14 = $pPIWhere;
         label = 116;
        }
       } while(0);
       if ((label|0) == 116) {
        $398 = ($140|0)==(0|0);
        if ($398) {
         $$1217 = $$0;$$1416 = $$14;$pRet$015 = 0;$zName$114 = $zName$0;
         break;
        } else {
         $$1491 = $$14;
        }
       }
       _freeIndex($0,$140);
       $$1217 = $$0;$$1416 = $$1491;$pRet$015 = 0;$zName$114 = $zName$0;
      } else {
       $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $zName$0;
      }
     } else {
      $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = $zName$0;
     }
    } else {
     $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
    }
   } else {
    $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
   }
  } else {
   $$1217 = $pList;$$1416 = $pPIWhere;$pRet$015 = 0;$zName$114 = 0;
  }
 } while(0);
 _sqlite3ExprDelete($0,$$1416);
 _sqlite3ExprListDelete($0,$$1217);
 _sqlite3SrcListDelete($0,$pTblName);
 _sqlite3DbFree($0,$zName$114);
 STACKTOP = sp;return ($pRet$015|0);
}
function _sqlite3AddCheckConstraint($pParse,$pCheckExpr) {
 $pParse = $pParse|0;
 $pCheckExpr = $pCheckExpr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($pParse) + 455|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $6 = (($1) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $pParse$idx$val = HEAP32[$pParse>>2]|0;
   $8 = (_sqlite3ExprListAppend($pParse$idx$val,$7,$pCheckExpr)|0);
   HEAP32[$6>>2] = $8;
   $9 = (($pParse) + 328|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    STACKTOP = sp;return;
   }
   $12 = (($pParse) + 324|0);
   _sqlite3ExprListSetName($pParse,$8,$12,1);
   STACKTOP = sp;return;
  }
 }
 $13 = HEAP32[$pParse>>2]|0;
 _sqlite3ExprDelete($13,$pCheckExpr);
 STACKTOP = sp;return;
}
function _sqlite3CreateForeignKey($pParse,$pFromCol,$pTo,$pToCol,$flags) {
 $pParse = $pParse|0;
 $pFromCol = $pFromCol|0;
 $pTo = $pTo|0;
 $pToCol = $pToCol|0;
 $flags = $flags|0;
 var $$pre = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$017 = 0, $i$114 = 0, $i$21 = 0, $j$06 = 0, $j$08 = 0, $nByte$018 = 0, $nByte$1 = 0, $nCol$0 = 0, $nCol$0$ph = 0, $nCol$025 = 0, $or$cond = 0, $pFKey$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $z$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 488|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $pFKey$0 = 0;
  } else {
   $4 = (($pParse) + 455|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = ($pFromCol|0)==(0|0);
    do {
     if ($7) {
      $8 = (($2) + 38|0);
      $9 = HEAP16[$8>>1]|0;
      $10 = $9 << 16 >> 16;
      $11 = (($10) + -1)|0;
      $12 = ($9<<16>>16)<(1);
      if ($12) {
       $pFKey$0 = 0;
       break L1;
      }
      $13 = ($pToCol|0)==(0|0);
      if ($13) {
       $nCol$0 = 1;
       label = 12;
      } else {
       $14 = HEAP32[$pToCol>>2]|0;
       $15 = ($14|0)==(1);
       if ($15) {
        $nCol$0$ph = 1;
        label = 13;
       } else {
        $16 = (($2) + 4|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = (($17) + (($11*24)|0)|0);
        $19 = HEAP32[$18>>2]|0;
        HEAP32[$vararg_buffer>>2] = $19;
        $vararg_ptr1 = (($vararg_buffer) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $pTo;
        _sqlite3ErrorMsg($pParse,25728,$vararg_buffer);
        $pFKey$0 = 0;
        break L1;
       }
      }
     } else {
      $20 = ($pToCol|0)==(0|0);
      if ($20) {
       $$pre24 = HEAP32[$pFromCol>>2]|0;
       $nCol$0 = $$pre24;
       label = 12;
       break;
      }
      $21 = HEAP32[$pToCol>>2]|0;
      $22 = HEAP32[$pFromCol>>2]|0;
      $23 = ($21|0)==($22|0);
      if ($23) {
       $nCol$0$ph = $21;
       label = 13;
      } else {
       _sqlite3ErrorMsg($pParse,25792,$vararg_buffer2);
       $pFKey$0 = 0;
       break L1;
      }
     }
    } while(0);
    if ((label|0) == 12) {
     $24 = $nCol$0 << 3;
     $25 = (($pTo) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($24) + 37)|0;
     $28 = (($27) + ($26))|0;
     $55 = $25;$91 = 0;$nByte$1 = $28;$nCol$025 = $nCol$0;
    }
    else if ((label|0) == 13) {
     $29 = $nCol$0$ph << 3;
     $30 = (($pTo) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 37)|0;
     $33 = (($32) + ($31))|0;
     $34 = HEAP32[$pToCol>>2]|0;
     $35 = ($34|0)>(0);
     if ($35) {
      $36 = (($pToCol) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $i$017 = 0;$nByte$018 = $33;
      while(1) {
       $38 = ((($37) + (($i$017*20)|0)|0) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_sqlite3Strlen30($39)|0);
       $41 = (($nByte$018) + 1)|0;
       $42 = (($41) + ($40))|0;
       $43 = (($i$017) + 1)|0;
       $44 = ($43|0)<($34|0);
       if ($44) {
        $i$017 = $43;$nByte$018 = $42;
       } else {
        $55 = $30;$91 = 1;$nByte$1 = $42;$nCol$025 = $nCol$0$ph;
        break;
       }
      }
     } else {
      $55 = $30;$91 = 1;$nByte$1 = $33;$nCol$025 = $nCol$0$ph;
     }
    }
    $45 = (_sqlite3DbMallocZero($0,$nByte$1)|0);
    $46 = ($45|0)==(0|0);
    if ($46) {
     $pFKey$0 = $45;
    } else {
     HEAP32[$45>>2] = $2;
     $47 = (($2) + 16|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + 4|0);
     HEAP32[$49>>2] = $48;
     $50 = (($45) + 36|0);
     $51 = (($50) + ($nCol$025<<3)|0);
     $52 = (($45) + 8|0);
     HEAP32[$52>>2] = $51;
     $53 = HEAP32[$pTo>>2]|0;
     $54 = HEAP32[$55>>2]|0;
     _memcpy(($51|0),($53|0),($54|0))|0;
     $56 = HEAP32[$55>>2]|0;
     $57 = (($51) + ($56)|0);
     HEAP8[$57>>0] = 0;
     _sqlite3Dequote($51);
     $58 = HEAP32[$55>>2]|0;
     $59 = (($58) + 1)|0;
     $60 = (($51) + ($59)|0);
     $61 = (($45) + 20|0);
     HEAP32[$61>>2] = $nCol$025;
     L22: do {
      if ($7) {
       $66 = (($2) + 38|0);
       $67 = HEAP16[$66>>1]|0;
       $68 = $67 << 16 >> 16;
       $69 = (($68) + -1)|0;
       HEAP32[$50>>2] = $69;
      } else {
       $62 = ($nCol$025|0)>(0);
       if ($62) {
        $63 = (($2) + 38|0);
        $64 = (($2) + 4|0);
        $65 = (($pFromCol) + 8|0);
        $$pre = HEAP16[$63>>1]|0;
        $i$114 = 0;
        while(1) {
         $72 = ($$pre<<16>>16)>(0);
         L27: do {
          if ($72) {
           $73 = HEAP32[$64>>2]|0;
           $74 = HEAP32[$65>>2]|0;
           $75 = ((($74) + (($i$114*20)|0)|0) + 4|0);
           $76 = HEAP32[$75>>2]|0;
           $j$08 = 0;
           while(1) {
            $80 = (($73) + (($j$08*24)|0)|0);
            $81 = HEAP32[$80>>2]|0;
            $82 = (_sqlite3_stricmp($81,$76)|0);
            $83 = ($82|0)==(0);
            $79 = (($j$08) + 1)|0;
            if ($83) {
             break;
            }
            $77 = $$pre << 16 >> 16;
            $78 = ($79|0)<($77|0);
            if ($78) {
             $j$08 = $79;
            } else {
             $j$06 = $79;
             break L27;
            }
           }
           $84 = (($50) + ($i$114<<3)|0);
           HEAP32[$84>>2] = $j$08;
           $j$06 = $j$08;
          } else {
           $j$06 = 0;
          }
         } while(0);
         $85 = $$pre << 16 >> 16;
         $86 = ($j$06|0)<($85|0);
         $71 = (($i$114) + 1)|0;
         if (!($86)) {
          break;
         }
         $70 = ($71|0)<($nCol$025|0);
         if ($70) {
          $i$114 = $71;
         } else {
          break L22;
         }
        }
        $87 = HEAP32[$65>>2]|0;
        $88 = ((($87) + (($i$114*20)|0)|0) + 4|0);
        $89 = HEAP32[$88>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $89;
        _sqlite3ErrorMsg($pParse,25888,$vararg_buffer4);
        $pFKey$0 = $45;
        break L1;
       }
      }
     } while(0);
     $90 = ($nCol$025|0)>(0);
     $or$cond = $91 & $90;
     if ($or$cond) {
      $92 = (($pToCol) + 8|0);
      $i$21 = 0;$z$02 = $60;
      while(1) {
       $93 = HEAP32[$92>>2]|0;
       $94 = ((($93) + (($i$21*20)|0)|0) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (_sqlite3Strlen30($95)|0);
       $97 = ((($50) + ($i$21<<3)|0) + 4|0);
       HEAP32[$97>>2] = $z$02;
       $98 = HEAP32[$92>>2]|0;
       $99 = ((($98) + (($i$21*20)|0)|0) + 4|0);
       $100 = HEAP32[$99>>2]|0;
       _memcpy(($z$02|0),($100|0),($96|0))|0;
       $101 = (($z$02) + ($96)|0);
       HEAP8[$101>>0] = 0;
       $102 = (($96) + 1)|0;
       $103 = (($z$02) + ($102)|0);
       $104 = (($i$21) + 1)|0;
       $exitcond = ($104|0)==($nCol$025|0);
       if ($exitcond) {
        break;
       } else {
        $i$21 = $104;$z$02 = $103;
       }
      }
     }
     $105 = (($45) + 24|0);
     HEAP8[$105>>0] = 0;
     $106 = $flags&255;
     $107 = (($45) + 25|0);
     HEAP8[$107>>0] = $106;
     $108 = $flags >>> 8;
     $109 = $108&255;
     $110 = (($45) + 26|0);
     HEAP8[$110>>0] = $109;
     $111 = (($2) + 68|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + 56|0);
     $114 = HEAP32[$52>>2]|0;
     $115 = (_sqlite3Strlen30($114)|0);
     $116 = (_sqlite3HashInsert($113,$114,$115,$45)|0);
     $117 = ($116|0)==($45|0);
     if ($117) {
      $118 = (($0) + 64|0);
      HEAP8[$118>>0] = 1;
      $pFKey$0 = $45;
      break;
     }
     $119 = ($116|0)==(0|0);
     if (!($119)) {
      $120 = (($45) + 12|0);
      HEAP32[$120>>2] = $116;
      $121 = (($116) + 16|0);
      HEAP32[$121>>2] = $45;
     }
     HEAP32[$47>>2] = $45;
     $pFKey$0 = 0;
    }
   } else {
    $pFKey$0 = 0;
   }
  }
 } while(0);
 _sqlite3DbFree($0,$pFKey$0);
 _sqlite3ExprListDelete($0,$pFromCol);
 _sqlite3ExprListDelete($0,$pToCol);
 STACKTOP = sp;return;
}
function _sqlite3DeferForeignKey($pParse$0$66$val,$isDeferred) {
 $pParse$0$66$val = $pParse$0$66$val|0;
 $isDeferred = $isDeferred|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pParse$0$66$val|0)==(0|0);
 if (!($0)) {
  $1 = (($pParse$0$66$val) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = $isDeferred&255;
   $5 = (($2) + 24|0);
   HEAP8[$5>>0] = $4;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3AddCollateType($pParse,$pToken) {
 $pParse = $pParse|0;
 $pToken = $pToken|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIdx$0 = 0, $pIdx$01 = 0, $pIdx$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + 38|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = (($5) + -1)|0;
 $7 = HEAP32[$pParse>>2]|0;
 $8 = (_sqlite3NameFromToken($7,$pToken)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (_sqlite3LocateCollSeq($pParse,$8)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _sqlite3DbFree($7,$8);
  STACKTOP = sp;return;
 }
 $12 = (($1) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13) + (($6*24)|0)|0) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _sqlite3DbFree($7,$15);
 $16 = HEAP32[$12>>2]|0;
 $17 = ((($16) + (($6*24)|0)|0) + 16|0);
 HEAP32[$17>>2] = $8;
 $18 = (($1) + 8|0);
 $pIdx$01 = HEAP32[$18>>2]|0;
 $19 = ($pIdx$01|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 } else {
  $pIdx$02 = $pIdx$01;
 }
 while(1) {
  $20 = (($pIdx$02) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($23|0)==($6|0);
  if ($24) {
   $25 = HEAP32[$12>>2]|0;
   $26 = ((($25) + (($6*24)|0)|0) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($pIdx$02) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$29>>2] = $27;
  }
  $30 = (($pIdx$02) + 20|0);
  $pIdx$0 = HEAP32[$30>>2]|0;
  $31 = ($pIdx$0|0)==(0|0);
  if ($31) {
   break;
  } else {
   $pIdx$02 = $pIdx$0;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3DropTable($pParse,$pName,$isView,$noErr) {
 $pParse = $pParse|0;
 $pName = $pName|0;
 $isView = $isView|0;
 $noErr = $noErr|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $code$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $zArg2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = ($noErr|0)!=(0);
   if ($4) {
    $7 = (($0) + 67|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = (($8) + 1)<<24>>24;
    HEAP8[$7>>0] = $9;
    $10 = (($pName) + 8|0);
    $11 = (_sqlite3LocateTableItem($pParse,$isView,$10)|0);
    $12 = HEAP8[$7>>0]|0;
    $13 = (($12) + -1)<<24>>24;
    HEAP8[$7>>0] = $13;
    $15 = $11;
   } else {
    $5 = (($pName) + 8|0);
    $6 = (_sqlite3LocateTableItem($pParse,$isView,$5)|0);
    $15 = $6;
   }
   $14 = ($15|0)==(0|0);
   if ($14) {
    if (!($4)) {
     break;
    }
    $16 = (($pName) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    _sqlite3CodeVerifyNamedSchema($pParse,$17);
    break;
   }
   $18 = (($15) + 68|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_sqlite3SchemaToIndex($0,$19)|0);
   $21 = (($15) + 44|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 16;
   $24 = ($23<<24>>24)==(0);
   if (!($24)) {
    $25 = (_sqlite3ViewGetColumnNames($pParse,$15)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     break;
    }
   }
   $27 = ($20|0)==(1);
   $28 = $27 ? 15056 : 15080;
   $29 = (($0) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($20<<4)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (_sqlite3AuthCheck($pParse,9,$28,0,$32)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ($isView|0)!=(0);
    do {
     if ($35) {
      $$ = $27 ? 15 : 17;
      $code$0 = $$;$zArg2$0 = 0;
     } else {
      $36 = HEAP8[$21>>0]|0;
      $37 = $36 & 16;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1 = $27 ? 13 : 11;
       $code$0 = $$1;$zArg2$0 = 0;
       break;
      } else {
       $39 = (_sqlite3GetVTable($0,$15)|0);
       $40 = (($39) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($41) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $code$0 = 30;$zArg2$0 = $43;
       break;
      }
     }
    } while(0);
    $44 = HEAP32[$15>>2]|0;
    $45 = (_sqlite3AuthCheck($pParse,$code$0,$44,$zArg2$0,$32)|0);
    $46 = ($45|0)==(0);
    if ($46) {
     $47 = HEAP32[$15>>2]|0;
     $48 = (_sqlite3AuthCheck($pParse,9,$47,0,$32)|0);
     $49 = ($48|0)==(0);
     if ($49) {
      $50 = HEAP32[$15>>2]|0;
      $51 = (_sqlite3_strnicmp($50,15296,7)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       $53 = (_sqlite3_strnicmp($50,25504,11)|0);
       $54 = ($53|0)==(0);
       if (!($54)) {
        HEAP32[$vararg_buffer>>2] = $50;
        _sqlite3ErrorMsg($pParse,25520,$vararg_buffer);
        break;
       }
      }
      $55 = (($15) + 12|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==(0|0);
      if ($35) {
       if ($57) {
        HEAP32[$vararg_buffer1>>2] = $50;
        _sqlite3ErrorMsg($pParse,25552,$vararg_buffer1);
        break;
       }
      } else {
       if (!($57)) {
        HEAP32[$vararg_buffer4>>2] = $50;
        _sqlite3ErrorMsg($pParse,25592,$vararg_buffer4);
        break;
       }
      }
      $58 = (_sqlite3GetVdbe($pParse)|0);
      $59 = ($58|0)==(0|0);
      if (!($59)) {
       _sqlite3BeginWriteOperation($pParse,1,$20);
       $60 = HEAP32[$15>>2]|0;
       _sqlite3ClearStatTables($pParse,$20,18320,$60);
       _sqlite3FkDropTable($pParse,$pName,$15);
       _sqlite3CodeDropTable($pParse,$15,$20,$isView);
      }
     }
    }
   }
  }
 } while(0);
 _sqlite3SrcListDelete($0,$pName);
 STACKTOP = sp;return;
}
function _sqlite3CreateView($pParse,$pBegin,$pName1,$pName2,$pSelect,$isTemp,$noErr) {
 $pParse = $pParse|0;
 $pBegin = $pBegin|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $pSelect = $pSelect|0;
 $isTemp = $isTemp|0;
 $noErr = $noErr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inttoptr = 0, $n$0 = 0, $pName = 0, $sEnd = 0, $sFix = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp + 8|0;
 $sEnd = sp;
 $sFix = sp + 16|0;
 $pName = sp + 12|0;
 HEAP32[$pName>>2] = 0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 444|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  _sqlite3ErrorMsg($pParse,25456,$vararg_buffer);
  _sqlite3SelectDelete($0,$pSelect);
  STACKTOP = sp;return;
 }
 _sqlite3StartTable($pParse,$pName1,$pName2,$isTemp,1,0,$noErr);
 $4 = (($pParse) + 488|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (($pParse) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pName)|0);
   $10 = (($5) + 68|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_sqlite3SchemaToIndex($0,$11)|0);
   $13 = HEAP32[$pName>>2]|0;
   _sqlite3FixInit($sFix,$pParse,$12,25496,$13);
   $14 = (_sqlite3FixSelect($sFix,$pSelect)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    _sqlite3SelectDelete($0,$pSelect);
    STACKTOP = sp;return;
   }
   $16 = (_sqlite3SelectDup($0,$pSelect,1)|0);
   $17 = (($5) + 12|0);
   HEAP32[$17>>2] = $16;
   _sqlite3SelectDelete($0,$pSelect);
   $18 = (($0) + 64|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   if (!($20)) {
    STACKTOP = sp;return;
   }
   $21 = (($0) + 137|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    (_sqlite3ViewGetColumnNames($pParse,$5)|0);
   }
   $24 = (($pParse) + 508|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = $sEnd;
   $32 = $31;
   HEAP32[$32>>2] = $27;
   $33 = (($31) + 4)|0;
   $34 = $33;
   HEAP32[$34>>2] = $30;
   $inttoptr = $27;
   $35 = HEAP8[$inttoptr>>0]|0;
   if ((($35<<24>>24) == 59) | (($35<<24>>24) == 0)) {
    $40 = $inttoptr;
   } else {
    $36 = (($inttoptr) + ($30)|0);
    HEAP32[$sEnd>>2] = $36;
    $40 = $36;
   }
   $37 = (($sEnd) + 4|0);
   HEAP32[$37>>2] = 0;
   $38 = HEAP32[$pBegin>>2]|0;
   $39 = $40;
   $41 = $38;
   $42 = (($39) - ($41))|0;
   $n$0 = $42;
   while(1) {
    $43 = ($n$0|0)>(0);
    $44 = (($n$0) + -1)|0;
    $45 = (($38) + ($44)|0);
    if (!($43)) {
     break;
    }
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = (48 + ($47)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    if ($51) {
     break;
    } else {
     $n$0 = $44;
    }
   }
   HEAP32[$sEnd>>2] = $45;
   HEAP32[$37>>2] = 1;
   _sqlite3EndTable($pParse,0,$sEnd,0,0);
   STACKTOP = sp;return;
  }
 }
 _sqlite3SelectDelete($0,$pSelect);
 STACKTOP = sp;return;
}
function _sqlite3Select($pParse,$p,$pDest) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pDest = $pDest|0;
 var $$0 = 0, $$idx$val = 0, $$idx10$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx16 = 0, $$idx16$val = 0, $$idx17 = 0, $$idx17$val = 0, $$idx18 = 0, $$idx18$val = 0, $$idx19 = 0, $$idx19$val = 0, $$idx20 = 0, $$idx20$val = 0, $$idx21 = 0;
 var $$idx21$val = 0, $$idx4$val = 0, $$idx5$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8$val = 0, $$idx9$val = 0, $$lcssa = 0, $$lobit = 0, $$lobit1 = 0, $$pOrderBy$0 = 0, $$pre = 0, $$pre90 = 0, $$pre95 = 0, $$pre96 = 0, $$tr = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addrSortIndex$0 = 0, $dest = 0, $flag$029 = 0, $groupBySort$0 = 0, $i$076 = 0;
 var $i$1 = 0, $i$2 = 0, $i$353 = 0, $i$440 = 0, $i$534 = 0, $isAgg$0$lcssa = 0, $isAgg$075 = 0, $isAgg$2 = 0, $isAgg$3 = 0, $j$039 = 0, $j$1 = 0, $j$233 = 0, $j$3 = 0, $j$432 = 0, $k$063 = 0, $k$158 = 0, $nCol$0$lcssa = 0, $nCol$038 = 0, $nCol$1 = 0, $onceAddr$0 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $pBest$0 = 0, $pBest$1$lcssa = 0, $pBest$146 = 0, $pBest$2 = 0, $pDel$0 = 0, $pDel$1 = 0, $pGroupBy$024 = 0, $pGroupBy$025 = 0, $pIdx$0 = 0, $pIdx$045 = 0, $pIdx$047 = 0, $pItem1$062 = 0, $pItem1$157 = 0, $pMinMax = 0, $pOrderBy$0$lcssa = 0, $pOrderBy$073 = 0, $pOrderBy$1 = 0;
 var $pOrderBy$2 = 0, $pOrderBy$3$ = 0, $pOrderBy$326 = 0, $pOrderBy$4 = 0, $pOrderBy$5 = 0, $pOrderBy$6 = 0, $pParse$idx = 0, $pParse$idx$val = 0, $pParse$idx22 = 0, $pParse$idx22$val = 0, $pTabList$0$lcssa = 0, $pTabList$074 = 0, $pTabList$1 = 0, $phitmp = 0, $rc$031 = 0, $sAggInfo = 0, $sAggInfo$idx = 0, $sAggInfo$idx$val = 0, $sAggInfo$idx23$val = 0, $sDistinct = 0;
 var $sNC = 0, $sortOut$0 = 0, $sortPTab$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $sDistinct = sp + 112|0;
 $sAggInfo = sp + 64|0;
 $dest = sp + 40|0;
 $sNC = sp + 8|0;
 $pMinMax = sp;
 $0 = (($pParse) + 468|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 472|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 HEAP32[$0>>2] = $3;
 $5 = HEAP32[$pParse>>2]|0;
 $6 = ($p|0)==(0|0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($5) + 64|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pParse) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_sqlite3AuthCheck($pParse,21,0,0,0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$sAggInfo+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = HEAP8[$pDest>>0]|0;
 $16 = ($15&255)<(5);
 $17 = (($p) + 56|0);
 if ($16) {
  $18 = HEAP32[$17>>2]|0;
  _sqlite3ExprListDelete($5,$18);
  HEAP32[$17>>2] = 0;
  $19 = (($p) + 6|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $21 & 65534;
  $23 = $22&65535;
  HEAP16[$19>>1] = $23;
 }
 _sqlite3SelectPrep($pParse,$p,0);
 $24 = HEAP32[$17>>2]|0;
 $25 = (($p) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$p>>2]|0;
 $28 = HEAP32[$10>>2]|0;
 $29 = ($28|0)==(0);
 L16: do {
  if ($29) {
   $30 = HEAP8[$7>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $32 = (($p) + 6|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = (_sqlite3GetVdbe($pParse)|0);
    $35 = ($34|0)==(0|0);
    if ($35) {
     label = 144;
    } else {
     $36 = ($33&65535) >>> 2;
     $$lobit = $36 & 1;
     $37 = $$lobit&65535;
     $38 = HEAP32[$27>>2]|0;
     $39 = (_checkForMultiColumnSelectError($pParse,$pDest,$38)|0);
     $40 = ($39|0)==(0);
     if ($40) {
      $41 = (($p) + 60|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)==(0|0);
      L21: do {
       if ($43) {
        $44 = (($pParse) + 464|0);
        $45 = (($5) + 60|0);
        $$idx7 = (($34) + 32|0);
        $46 = (($pParse) + 76|0);
        $47 = (($dest) + 8|0);
        $i$076 = 0;$isAgg$075 = $37;$pOrderBy$073 = $24;$pTabList$074 = $26;
        while(1) {
         $48 = HEAP32[$pTabList$074>>2]|0;
         $49 = ($i$076|0)<($48|0);
         if (!($49)) {
          $156 = 0;$isAgg$0$lcssa = $isAgg$075;$pOrderBy$0$lcssa = $pOrderBy$073;$pTabList$0$lcssa = $pTabList$074;
          break L21;
         }
         $50 = ((($pTabList$074) + (($i$076*72)|0)|0) + 28|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($51|0)==(0|0);
         do {
          if ($52) {
           $i$2 = $i$076;$isAgg$3 = $isAgg$075;$pOrderBy$1 = $pOrderBy$073;$pTabList$1 = $pTabList$074;
          } else {
           $53 = ((($pTabList$074) + (($i$076*72)|0)|0) + 32|0);
           $54 = HEAP32[$53>>2]|0;
           $55 = ($54|0)==(0);
           if (!($55)) {
            $56 = ((($pTabList$074) + (($i$076*72)|0)|0) + 45|0);
            $57 = HEAP8[$56>>0]|0;
            $58 = $57 & 4;
            $59 = ($58<<24>>24)==(0);
            if (!($59)) {
             $i$2 = $i$076;$isAgg$3 = $isAgg$075;$pOrderBy$1 = $pOrderBy$073;$pTabList$1 = $pTabList$074;
             break;
            }
            $60 = ((($pTabList$074) + (($i$076*72)|0)|0) + 36|0);
            $61 = HEAP32[$60>>2]|0;
            (_sqlite3VdbeAddOp2($34,17,$61,$54)|0);
            $i$2 = $i$076;$isAgg$3 = $isAgg$075;$pOrderBy$1 = $pOrderBy$073;$pTabList$1 = $pTabList$074;
            break;
           }
           $62 = (_sqlite3SelectExprHeight($p)|0);
           $63 = HEAP32[$44>>2]|0;
           $64 = (($63) + ($62))|0;
           HEAP32[$44>>2] = $64;
           $65 = (($51) + 6|0);
           $66 = HEAP16[$65>>1]|0;
           $67 = $66 & 4;
           $$lobit1 = ($67&65535) >>> 2;
           $68 = $$lobit1&65535;
           $69 = (_flattenSubquery($pParse,$p,$i$076,$isAgg$075,$68)|0);
           $70 = ($69|0)==(0);
           L32: do {
            if ($70) {
             $76 = HEAP32[$pTabList$074>>2]|0;
             $77 = ($76|0)==(1);
             do {
              if ($77) {
               $78 = HEAP16[$45>>1]|0;
               $79 = $78 & 256;
               $80 = ($79<<16>>16)==(0);
               if (!($80)) {
                break;
               }
               $$idx7$val = HEAP32[$$idx7>>2]|0;
               $81 = (_sqlite3VdbeCurrentAddr($$idx7$val)|0);
               $82 = (($81) + 1)|0;
               $83 = HEAP32[$46>>2]|0;
               $84 = (($83) + 1)|0;
               HEAP32[$46>>2] = $84;
               $85 = ((($pTabList$074) + (($i$076*72)|0)|0) + 36|0);
               HEAP32[$85>>2] = $84;
               (_sqlite3VdbeAddOp3($34,20,$84,0,$82)|0);
               HEAP32[$53>>2] = $82;
               $86 = HEAP32[$85>>2]|0;
               _sqlite3SelectDestInit($dest,9,$86);
               $87 = HEAP32[$2>>2]|0;
               $88 = $87&255;
               $89 = ((($pTabList$074) + (($i$076*72)|0)|0) + 46|0);
               HEAP8[$89>>0] = $88;
               (_sqlite3Select($pParse,$51,$dest)|0);
               $90 = (($51) + 32|0);
               $91 = $90;
               $92 = $91;
               $93 = HEAP32[$92>>2]|0;
               $94 = (($91) + 4)|0;
               $95 = $94;
               $96 = HEAP32[$95>>2]|0;
               $97 = ((($pTabList$074) + (($i$076*72)|0)|0) + 24|0);
               $98 = HEAP32[$97>>2]|0;
               $99 = (($98) + 28|0);
               HEAP32[$99>>2] = $93;
               $100 = ((($pTabList$074) + (($i$076*72)|0)|0) + 45|0);
               $101 = HEAP8[$100>>0]|0;
               $102 = $101 | 4;
               HEAP8[$100>>0] = $102;
               $103 = HEAP32[$47>>2]|0;
               $104 = ((($pTabList$074) + (($i$076*72)|0)|0) + 40|0);
               HEAP32[$104>>2] = $103;
               $105 = HEAP32[$85>>2]|0;
               (_sqlite3VdbeAddOp1($34,21,$105)|0);
               _sqlite3VdbeJumpHere($34,$81);
               _sqlite3ClearTempRegCache($pParse);
               $i$1 = $i$076;$isAgg$2 = $isAgg$075;
               break L32;
              }
             } while(0);
             $106 = HEAP32[$46>>2]|0;
             $107 = (($106) + 1)|0;
             HEAP32[$46>>2] = $107;
             $108 = ((($pTabList$074) + (($i$076*72)|0)|0) + 36|0);
             HEAP32[$108>>2] = $107;
             $109 = (_sqlite3VdbeAddOp2($34,25,0,$107)|0);
             $110 = (($109) + 1)|0;
             HEAP32[$53>>2] = $110;
             $111 = ((($pTabList$074) + (($i$076*72)|0)|0) + 45|0);
             $112 = HEAP8[$111>>0]|0;
             $113 = $112 & 2;
             $114 = ($113<<24>>24)==(0);
             if ($114) {
              $115 = (_sqlite3CodeOnce($pParse)|0);
              $onceAddr$0 = $115;
             } else {
              $onceAddr$0 = 0;
             }
             $116 = ((($pTabList$074) + (($i$076*72)|0)|0) + 48|0);
             $117 = HEAP32[$116>>2]|0;
             _sqlite3SelectDestInit($dest,8,$117);
             $118 = HEAP32[$2>>2]|0;
             $119 = $118&255;
             $120 = ((($pTabList$074) + (($i$076*72)|0)|0) + 46|0);
             HEAP8[$120>>0] = $119;
             (_sqlite3Select($pParse,$51,$dest)|0);
             $121 = (($51) + 32|0);
             $122 = $121;
             $123 = $122;
             $124 = HEAP32[$123>>2]|0;
             $125 = (($122) + 4)|0;
             $126 = $125;
             $127 = HEAP32[$126>>2]|0;
             $128 = ((($pTabList$074) + (($i$076*72)|0)|0) + 24|0);
             $129 = HEAP32[$128>>2]|0;
             $130 = (($129) + 28|0);
             HEAP32[$130>>2] = $124;
             $131 = ($onceAddr$0|0)==(0);
             if (!($131)) {
              _sqlite3VdbeJumpHere($34,$onceAddr$0);
             }
             $132 = HEAP32[$108>>2]|0;
             $133 = (_sqlite3VdbeAddOp1($34,18,$132)|0);
             _sqlite3VdbeChangeP1($34,$109,$133);
             _sqlite3ClearTempRegCache($pParse);
             $i$1 = $i$076;$isAgg$2 = $isAgg$075;
            } else {
             $71 = ($67<<16>>16)==(0);
             if ($71) {
              $i$1 = -1;$isAgg$2 = $isAgg$075;
             } else {
              $72 = HEAP16[$32>>1]|0;
              $73 = $72&65535;
              $74 = $73 | 4;
              $75 = $74&65535;
              HEAP16[$32>>1] = $75;
              $i$1 = -1;$isAgg$2 = 1;
             }
            }
           } while(0);
           $134 = HEAP8[$7>>0]|0;
           $135 = ($134<<24>>24)==(0);
           if (!($135)) {
            label = 144;
            break L16;
           }
           $136 = (_sqlite3SelectExprHeight($p)|0);
           $137 = HEAP32[$44>>2]|0;
           $138 = (($137) - ($136))|0;
           HEAP32[$44>>2] = $138;
           $139 = HEAP32[$25>>2]|0;
           $140 = HEAP8[$pDest>>0]|0;
           $141 = ($140&255)<(5);
           if ($141) {
            $i$2 = $i$1;$isAgg$3 = $isAgg$2;$pOrderBy$1 = $pOrderBy$073;$pTabList$1 = $139;
           } else {
            $142 = HEAP32[$17>>2]|0;
            $i$2 = $i$1;$isAgg$3 = $isAgg$2;$pOrderBy$1 = $142;$pTabList$1 = $139;
           }
          }
         } while(0);
         $143 = (($i$2) + 1)|0;
         $144 = HEAP32[$41>>2]|0;
         $145 = ($144|0)==(0|0);
         if ($145) {
          $i$076 = $143;$isAgg$075 = $isAgg$3;$pOrderBy$073 = $pOrderBy$1;$pTabList$074 = $pTabList$1;
         } else {
          $156 = $144;$isAgg$0$lcssa = $isAgg$3;$pOrderBy$0$lcssa = $pOrderBy$1;$pTabList$0$lcssa = $pTabList$1;
          break;
         }
        }
       } else {
        $156 = $42;$isAgg$0$lcssa = $37;$pOrderBy$0$lcssa = $24;$pTabList$0$lcssa = $26;
       }
      } while(0);
      $146 = HEAP32[$p>>2]|0;
      $147 = (($p) + 44|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (($p) + 48|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (($p) + 52|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = HEAP16[$32>>1]|0;
      $$tr = $153&255;
      $154 = $$tr & 1;
      HEAP8[$sDistinct>>0] = $154;
      $155 = ($156|0)==(0|0);
      if (!($155)) {
       $157 = (_multiSelect($pParse,$p,$pDest)|0);
       HEAP32[$0>>2] = $1;
       $$0 = $157;
       STACKTOP = sp;return ($$0|0);
      }
      $158 = (_sqlite3ExprListCompare($150,$pOrderBy$0$lcssa,-1)|0);
      $159 = ($158|0)==(0);
      if ($159) {
       $160 = (($5) + 60|0);
       $161 = HEAP16[$160>>1]|0;
       $162 = $161 & 4;
       $163 = ($162<<16>>16)==(0);
       $$pOrderBy$0 = $163 ? 0 : $pOrderBy$0$lcssa;
       $pOrderBy$2 = $$pOrderBy$0;
      } else {
       $pOrderBy$2 = $pOrderBy$0$lcssa;
      }
      $164 = $153 & 5;
      $165 = ($164<<16>>16)==(1);
      if ($165) {
       $166 = (_sqlite3ExprListCompare($pOrderBy$2,$146,-1)|0);
       $167 = ($166|0)==(0);
       if ($167) {
        $168 = $153&65535;
        $169 = $168 & 65534;
        $170 = $169&65535;
        HEAP16[$32>>1] = $170;
        $171 = (_sqlite3ExprListDup($5,$146,0)|0);
        HEAP32[$149>>2] = $171;
        $515 = 0;$addrSortIndex$0 = -1;$pGroupBy$024 = $171;$pOrderBy$326 = 0;
       } else {
        label = 40;
       }
      } else {
       label = 40;
      }
      if ((label|0) == 40) {
       $172 = ($pOrderBy$2|0)==(0|0);
       if ($172) {
        $515 = 0;$addrSortIndex$0 = -1;$pGroupBy$024 = $150;$pOrderBy$326 = 0;
       } else {
        $173 = (_keyInfoFromExprList($pParse,$pOrderBy$2)|0);
        $174 = (($pParse) + 72|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = (($175) + 1)|0;
        HEAP32[$174>>2] = $176;
        $177 = (($pOrderBy$2) + 4|0);
        HEAP32[$177>>2] = $175;
        $178 = HEAP32[$pOrderBy$2>>2]|0;
        $179 = (($178) + 2)|0;
        $180 = (_sqlite3VdbeAddOp4($34,55,$175,$179,0,$173,-6)|0);
        $181 = (($p) + 24|0);
        HEAP32[$181>>2] = $180;
        $515 = 1;$addrSortIndex$0 = $180;$pGroupBy$024 = $150;$pOrderBy$326 = $pOrderBy$2;
       }
      }
      $182 = HEAP8[$pDest>>0]|0;
      $183 = ($182<<24>>24)==(8);
      if ($183) {
       $184 = (($pDest) + 4|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = HEAP32[$146>>2]|0;
       (_sqlite3VdbeAddOp2($34,55,$185,$186)|0);
      }
      $$idx11 = (($34) + 24|0);
      $$idx11$val = HEAP32[$$idx11>>2]|0;
      $187 = (_sqlite3VdbeMakeLabel($$idx11$val)|0);
      $188 = (($p) + 32|0);
      $189 = $188;
      $190 = $189;
      HEAP32[$190>>2] = -1;
      $191 = (($189) + 4)|0;
      $192 = $191;
      HEAP32[$192>>2] = 2147483647;
      _computeLimitRegisters($pParse,$p,$187);
      $193 = (($p) + 8|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==(0);
      $196 = ($addrSortIndex$0|0)>(-1);
      $or$cond = $195 & $196;
      if ($or$cond) {
       $197 = (_sqlite3VdbeGetOp($34,$addrSortIndex$0)|0);
       HEAP8[$197>>0] = 56;
       $198 = HEAP16[$32>>1]|0;
       $199 = $198&65535;
       $200 = $199 | 64;
       $201 = $200&65535;
       HEAP16[$32>>1] = $201;
       $203 = $201;
      } else {
       $$pre95 = HEAP16[$32>>1]|0;
       $203 = $$pre95;
      }
      $202 = $203 & 1;
      $204 = ($202<<16>>16)==(0);
      if ($204) {
       $214 = (($sDistinct) + 1|0);
       HEAP8[$214>>0] = 0;
      } else {
       $205 = (($pParse) + 72|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (($206) + 1)|0;
       HEAP32[$205>>2] = $207;
       $208 = (($sDistinct) + 4|0);
       HEAP32[$208>>2] = $206;
       $209 = HEAP32[$p>>2]|0;
       $210 = (_keyInfoFromExprList($pParse,$209)|0);
       $211 = (_sqlite3VdbeAddOp4($34,55,$206,0,0,$210,-6)|0);
       $212 = (($sDistinct) + 8|0);
       HEAP32[$212>>2] = $211;
       _sqlite3VdbeChangeP5($34,8);
       $213 = (($sDistinct) + 1|0);
       HEAP8[$213>>0] = 3;
      }
      $215 = ($isAgg$0$lcssa|0)==(0);
      $216 = ($pGroupBy$024|0)==(0|0);
      $or$cond2 = $215 & $216;
      if ($or$cond2) {
       $217 = HEAP8[$sDistinct>>0]|0;
       $218 = ($217<<24>>24)!=(0);
       $219 = $218 ? 1024 : 0;
       $220 = HEAP32[$p>>2]|0;
       $221 = (_sqlite3WhereBegin($pParse,$pTabList$0$lcssa,$148,$pOrderBy$326,$220,$219,0)|0);
       $222 = ($221|0)==(0|0);
       if ($222) {
        label = 144;
        break;
       }
       $$idx13 = (($221) + 32|0);
       $$idx13$val = HEAP16[$$idx13>>1]|0;
       $223 = (_sqlite3WhereOutputRowCount($$idx13$val)|0);
       $224 = tempRet0;
       $225 = $188;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = (($225) + 4)|0;
       $229 = $228;
       $230 = HEAP32[$229>>2]|0;
       $231 = ($224>>>0)<($230>>>0);
       $232 = ($224|0)==($230|0);
       $233 = ($223>>>0)<($227>>>0);
       $234 = $232 & $233;
       $235 = $231 | $234;
       if ($235) {
        $236 = $188;
        $237 = $236;
        HEAP32[$237>>2] = $223;
        $238 = (($236) + 4)|0;
        $239 = $238;
        HEAP32[$239>>2] = $224;
       }
       $240 = HEAP8[$sDistinct>>0]|0;
       $241 = ($240<<24>>24)==(0);
       do {
        if (!($241)) {
         $$idx15 = (($221) + 39|0);
         $$idx15$val = HEAP8[$$idx15>>0]|0;
         $242 = (_sqlite3WhereIsDistinct($$idx15$val)|0);
         $243 = ($242|0)==(0);
         if ($243) {
          break;
         }
         $244 = $242&255;
         $245 = (($sDistinct) + 1|0);
         HEAP8[$245>>0] = $244;
        }
       } while(0);
       if ($515) {
        $$idx18 = (($221) + 36|0);
        $$idx18$val = HEAP8[$$idx18>>0]|0;
        $246 = (_sqlite3WhereIsOrdered($$idx18$val)|0);
        $247 = ($246|0)==(0);
        $pOrderBy$3$ = $247 ? $pOrderBy$326 : 0;
        $pOrderBy$4 = $pOrderBy$3$;
       } else {
        $pOrderBy$4 = $pOrderBy$326;
       }
       $248 = ($pOrderBy$4|0)==(0|0);
       $or$cond3 = $196 & $248;
       if ($or$cond3) {
        _sqlite3VdbeChangeToNoop($34,$addrSortIndex$0);
        $249 = (($p) + 24|0);
        HEAP32[$249>>2] = -1;
       }
       $$idx19 = (($221) + 48|0);
       $$idx19$val = HEAP32[$$idx19>>2]|0;
       $250 = (_sqlite3WhereContinueLabel($$idx19$val)|0);
       $$idx21 = (($221) + 52|0);
       $$idx21$val = HEAP32[$$idx21>>2]|0;
       $251 = (_sqlite3WhereBreakLabel($$idx21$val)|0);
       _selectInnerLoop($pParse,$p,$146,-1,$pOrderBy$4,$sDistinct,$pDest,$250,$251);
       _sqlite3WhereEnd($221);
       $pOrderBy$6 = $pOrderBy$4;
      } else {
       $252 = ($pGroupBy$024|0)!=(0|0);
       do {
        if ($252) {
         $253 = HEAP32[$p>>2]|0;
         $254 = HEAP32[$253>>2]|0;
         $255 = ($254|0)>(0);
         if ($255) {
          $256 = (($253) + 8|0);
          $257 = HEAP32[$256>>2]|0;
          $k$063 = $254;$pItem1$062 = $257;
          while(1) {
           $258 = (($pItem1$062) + 16|0);
           $259 = (($258) + 2|0);
           HEAP16[$259>>1] = 0;
           $260 = (($k$063) + -1)|0;
           $261 = (($pItem1$062) + 20|0);
           $262 = ($260|0)>(0);
           if ($262) {
            $k$063 = $260;$pItem1$062 = $261;
           } else {
            break;
           }
          }
         }
         $263 = HEAP32[$pGroupBy$024>>2]|0;
         $264 = ($263|0)>(0);
         if ($264) {
          $265 = (($pGroupBy$024) + 8|0);
          $266 = HEAP32[$265>>2]|0;
          $k$158 = $263;$pItem1$157 = $266;
          while(1) {
           $267 = (($pItem1$157) + 16|0);
           $268 = (($267) + 2|0);
           HEAP16[$268>>1] = 0;
           $269 = (($k$158) + -1)|0;
           $270 = (($pItem1$157) + 20|0);
           $271 = ($269|0)>(0);
           if ($271) {
            $k$158 = $269;$pItem1$157 = $270;
           } else {
            break;
           }
          }
         }
         $272 = $188;
         $273 = $272;
         $274 = HEAP32[$273>>2]|0;
         $275 = (($272) + 4)|0;
         $276 = $275;
         $277 = HEAP32[$276>>2]|0;
         $278 = ($277>>>0)>(0);
         $279 = ($277|0)==(0);
         $280 = ($274>>>0)>(100);
         $281 = $279 & $280;
         $282 = $278 | $281;
         if (!($282)) {
          $pGroupBy$025 = $pGroupBy$024;
          break;
         }
         $283 = $188;
         $284 = $283;
         HEAP32[$284>>2] = 100;
         $285 = (($283) + 4)|0;
         $286 = $285;
         HEAP32[$286>>2] = 0;
         $pGroupBy$025 = $pGroupBy$024;
        } else {
         $287 = $188;
         $288 = $287;
         HEAP32[$288>>2] = 1;
         $289 = (($287) + 4)|0;
         $290 = $289;
         HEAP32[$290>>2] = 0;
         $pGroupBy$025 = 0;
        }
       } while(0);
       $$idx10$val = HEAP32[$$idx11>>2]|0;
       $291 = (_sqlite3VdbeMakeLabel($$idx10$val)|0);
       ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
       HEAP32[$sNC>>2] = $pParse;
       $292 = (($sNC) + 4|0);
       HEAP32[$292>>2] = $pTabList$0$lcssa;
       $293 = (($sNC) + 12|0);
       HEAP32[$293>>2] = $sAggInfo;
       $294 = (($pParse) + 76|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = (($295) + 1)|0;
       $297 = (($sAggInfo) + 16|0);
       HEAP32[$297>>2] = $296;
       if ($252) {
        $298 = HEAP32[$pGroupBy$025>>2]|0;
        $299 = (($298) + 1)|0;
        $301 = $299;
       } else {
        $301 = 0;
       }
       $300 = (($sAggInfo) + 12|0);
       HEAP32[$300>>2] = $301;
       $302 = (($sAggInfo) + 24|0);
       HEAP32[$302>>2] = $pGroupBy$025;
       _sqlite3ExprAnalyzeAggList($sNC,$146);
       _sqlite3ExprAnalyzeAggList($sNC,$pOrderBy$326);
       $303 = ($152|0)==(0|0);
       if (!($303)) {
        _sqlite3ExprAnalyzeAggregates($sNC,$152);
       }
       $304 = (($sAggInfo) + 32|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = (($sAggInfo) + 36|0);
       HEAP32[$306>>2] = $305;
       $307 = (($sAggInfo) + 44|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = ($308|0)>(0);
       if ($309) {
        $310 = (($sNC) + 28|0);
        $311 = (($sAggInfo) + 40|0);
        $$pre90 = HEAP8[$310>>0]|0;
        $313 = $$pre90;$i$353 = 0;
        while(1) {
         $312 = $313&255;
         $314 = $312 | 8;
         $315 = $314&255;
         HEAP8[$310>>0] = $315;
         $316 = HEAP32[$311>>2]|0;
         $317 = (($316) + ($i$353<<4)|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = (($318) + 20|0);
         $320 = HEAP32[$319>>2]|0;
         _sqlite3ExprAnalyzeAggList($sNC,$320);
         $321 = HEAP8[$310>>0]|0;
         $322 = $321&255;
         $323 = $322 & 247;
         $324 = $323&255;
         HEAP8[$310>>0] = $324;
         $325 = (($i$353) + 1)|0;
         $326 = HEAP32[$307>>2]|0;
         $327 = ($325|0)<($326|0);
         if ($327) {
          $313 = $324;$i$353 = $325;
         } else {
          $sAggInfo$idx23$val = $326;
          break;
         }
        }
       } else {
        $sAggInfo$idx23$val = $308;
       }
       $328 = HEAP32[$294>>2]|0;
       $329 = (($sAggInfo) + 20|0);
       HEAP32[$329>>2] = $328;
       $330 = HEAP8[$7>>0]|0;
       $331 = ($330<<24>>24)==(0);
       if (!($331)) {
        label = 144;
        break;
       }
       if ($252) {
        $332 = (($pParse) + 72|0);
        $333 = HEAP32[$332>>2]|0;
        $334 = (($333) + 1)|0;
        HEAP32[$332>>2] = $334;
        $335 = (($sAggInfo) + 4|0);
        HEAP32[$335>>2] = $333;
        $336 = (_keyInfoFromExprList($pParse,$pGroupBy$025)|0);
        $337 = HEAP32[$335>>2]|0;
        $338 = HEAP32[$300>>2]|0;
        $339 = (_sqlite3VdbeAddOp4($34,56,$337,$338,0,$336,-6)|0);
        $340 = HEAP32[$294>>2]|0;
        $341 = (($340) + 1)|0;
        $342 = (($340) + 2)|0;
        $343 = (($340) + 3)|0;
        HEAP32[$294>>2] = $343;
        $$idx9$val = HEAP32[$$idx11>>2]|0;
        $344 = (_sqlite3VdbeMakeLabel($$idx9$val)|0);
        $345 = HEAP32[$294>>2]|0;
        $346 = (($345) + 1)|0;
        HEAP32[$294>>2] = $346;
        $$idx8$val = HEAP32[$$idx11>>2]|0;
        $347 = (_sqlite3VdbeMakeLabel($$idx8$val)|0);
        $348 = HEAP32[$294>>2]|0;
        $349 = (($348) + 1)|0;
        $350 = HEAP32[$pGroupBy$025>>2]|0;
        $351 = (($350) + ($348))|0;
        HEAP32[$294>>2] = $351;
        $352 = (($351) + 1)|0;
        $353 = HEAP32[$pGroupBy$025>>2]|0;
        $354 = (($351) + ($353))|0;
        HEAP32[$294>>2] = $354;
        (_sqlite3VdbeAddOp2($34,25,0,$342)|0);
        (_sqlite3VdbeAddOp2($34,25,0,$341)|0);
        $355 = HEAP32[$pGroupBy$025>>2]|0;
        $356 = (($355) + ($348))|0;
        (_sqlite3VdbeAddOp3($34,28,0,$349,$356)|0);
        (_sqlite3VdbeAddOp2($34,17,$346,$347)|0);
        $357 = (_sqlite3WhereBegin($pParse,$pTabList$0$lcssa,$148,$pGroupBy$025,0,256,0)|0);
        $358 = ($357|0)==(0|0);
        if ($358) {
         label = 144;
         break;
        }
        $$idx17 = (($357) + 36|0);
        $$idx17$val = HEAP8[$$idx17>>0]|0;
        $359 = (_sqlite3WhereIsOrdered($$idx17$val)|0);
        $360 = ($359|0)==(0);
        if ($360) {
         $361 = HEAP8[$sDistinct>>0]|0;
         $362 = ($361<<24>>24)==(0);
         if ($362) {
          $366 = 24864;
         } else {
          $363 = HEAP16[$32>>1]|0;
          $364 = $363 & 1;
          $365 = ($364<<16>>16)==(0);
          $phitmp = $365 ? 24848 : 24864;
          $366 = $phitmp;
         }
         _explainTempTable($pParse,$366);
         $367 = HEAP32[$pGroupBy$025>>2]|0;
         $368 = (($367) + 1)|0;
         $369 = HEAP32[$304>>2]|0;
         $370 = ($369|0)>(0);
         if ($370) {
          $371 = (($sAggInfo) + 28|0);
          $372 = HEAP32[$371>>2]|0;
          $i$440 = 0;$j$039 = $368;$nCol$038 = $368;
          while(1) {
           $373 = ((($372) + (($i$440*24)|0)|0) + 12|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)<($j$039|0);
           if ($375) {
            $j$1 = $j$039;$nCol$1 = $nCol$038;
           } else {
            $376 = (($nCol$038) + 1)|0;
            $377 = (($j$039) + 1)|0;
            $j$1 = $377;$nCol$1 = $376;
           }
           $378 = (($i$440) + 1)|0;
           $379 = ($378|0)<($369|0);
           if ($379) {
            $i$440 = $378;$j$039 = $j$1;$nCol$038 = $nCol$1;
           } else {
            $nCol$0$lcssa = $nCol$1;
            break;
           }
          }
         } else {
          $nCol$0$lcssa = $368;
         }
         $380 = (_sqlite3GetTempRange($pParse,$nCol$0$lcssa)|0);
         _sqlite3ExprCacheClear($pParse);
         _sqlite3ExprCodeExprList($pParse,$pGroupBy$025,$380,0);
         $381 = HEAP32[$335>>2]|0;
         $382 = (($380) + ($367))|0;
         (_sqlite3VdbeAddOp2($34,68,$381,$382)|0);
         $383 = HEAP32[$304>>2]|0;
         $384 = ($383|0)>(0);
         if ($384) {
          $385 = (($sAggInfo) + 28|0);
          $516 = $383;$i$534 = 0;$j$233 = $368;
          while(1) {
           $386 = HEAP32[$385>>2]|0;
           $387 = ((($386) + (($i$534*24)|0)|0) + 12|0);
           $388 = HEAP32[$387>>2]|0;
           $389 = ($388|0)<($j$233|0);
           if ($389) {
            $402 = $516;$j$3 = $j$233;
           } else {
            $390 = (($j$233) + ($380))|0;
            $391 = (($386) + (($i$534*24)|0)|0);
            $392 = HEAP32[$391>>2]|0;
            $393 = ((($386) + (($i$534*24)|0)|0) + 8|0);
            $394 = HEAP32[$393>>2]|0;
            $395 = ((($386) + (($i$534*24)|0)|0) + 4|0);
            $396 = HEAP32[$395>>2]|0;
            $397 = (_sqlite3ExprCodeGetColumn($pParse,$392,$394,$396,$390,0)|0);
            $398 = ($390|0)==($397|0);
            if (!($398)) {
             (_sqlite3VdbeAddOp2($34,34,$397,$390)|0);
            }
            $399 = (($j$233) + 1)|0;
            $$pre = HEAP32[$304>>2]|0;
            $402 = $$pre;$j$3 = $399;
           }
           $400 = (($i$534) + 1)|0;
           $401 = ($400|0)<($402|0);
           if ($401) {
            $516 = $402;$i$534 = $400;$j$233 = $j$3;
           } else {
            break;
           }
          }
         }
         $403 = (_sqlite3GetTempReg($pParse)|0);
         (_sqlite3VdbeAddOp3($34,48,$380,$nCol$0$lcssa,$403)|0);
         $404 = HEAP32[$335>>2]|0;
         (_sqlite3VdbeAddOp2($34,106,$404,$403)|0);
         _sqlite3ReleaseTempReg($pParse,$403);
         _sqlite3ReleaseTempRange($pParse,$380,$nCol$0$lcssa);
         _sqlite3WhereEnd($357);
         $405 = HEAP32[$332>>2]|0;
         $406 = (($405) + 1)|0;
         HEAP32[$332>>2] = $406;
         $407 = (($sAggInfo) + 8|0);
         HEAP32[$407>>2] = $405;
         $408 = (_sqlite3GetTempReg($pParse)|0);
         (_sqlite3VdbeAddOp3($34,57,$405,$408,$nCol$0$lcssa)|0);
         $409 = HEAP32[$335>>2]|0;
         (_sqlite3VdbeAddOp2($34,103,$409,$291)|0);
         $410 = (($sAggInfo) + 1|0);
         HEAP8[$410>>0] = 1;
         _sqlite3ExprCacheClear($pParse);
         $groupBySort$0 = 1;$sortOut$0 = $408;$sortPTab$0 = $405;
        } else {
         $groupBySort$0 = 0;$sortOut$0 = 0;$sortPTab$0 = 0;
        }
        $$idx6 = (($34) + 32|0);
        $$idx6$val = HEAP32[$$idx6>>2]|0;
        $411 = (_sqlite3VdbeCurrentAddr($$idx6$val)|0);
        _sqlite3ExprCacheClear($pParse);
        if ($groupBySort$0) {
         $412 = HEAP32[$335>>2]|0;
         (_sqlite3VdbeAddOp2($34,95,$412,$sortOut$0)|0);
        }
        $413 = HEAP32[$pGroupBy$025>>2]|0;
        $414 = ($413|0)>(0);
        if ($414) {
         $415 = (($pGroupBy$025) + 8|0);
         $j$432 = 0;
         while(1) {
          do {
           if ($groupBySort$0) {
            $416 = (($j$432) + ($352))|0;
            (_sqlite3VdbeAddOp3($34,46,$sortPTab$0,$j$432,$416)|0);
            $417 = ($j$432|0)==(0);
            if (!($417)) {
             break;
            }
            _sqlite3VdbeChangeP5($34,32);
           } else {
            HEAP8[$sAggInfo>>0] = 1;
            $418 = HEAP32[$415>>2]|0;
            $419 = (($418) + (($j$432*20)|0)|0);
            $420 = HEAP32[$419>>2]|0;
            $421 = (($j$432) + ($352))|0;
            _sqlite3ExprCode($pParse,$420,$421);
           }
          } while(0);
          $422 = (($j$432) + 1)|0;
          $423 = HEAP32[$pGroupBy$025>>2]|0;
          $424 = ($422|0)<($423|0);
          if ($424) {
           $j$432 = $422;
          } else {
           $$lcssa = $423;
           break;
          }
         }
        } else {
         $$lcssa = $413;
        }
        $425 = (_sqlite3KeyInfoRef($336)|0);
        (_sqlite3VdbeAddOp4($34,41,$349,$352,$$lcssa,$425,-6)|0);
        $$idx5$val = HEAP32[$$idx6>>2]|0;
        $426 = (_sqlite3VdbeCurrentAddr($$idx5$val)|0);
        $427 = (($426) + 1)|0;
        (_sqlite3VdbeAddOp3($34,42,$427,0,$427)|0);
        $428 = HEAP32[$pGroupBy$025>>2]|0;
        _sqlite3ExprCodeMove($pParse,$352,$349,$428);
        (_sqlite3VdbeAddOp2($34,17,$343,$344)|0);
        (_sqlite3VdbeAddOp2($34,132,$342,$291)|0);
        (_sqlite3VdbeAddOp2($34,17,$346,$347)|0);
        _sqlite3VdbeJumpHere($34,$426);
        _updateAccumulator($pParse,$sAggInfo);
        (_sqlite3VdbeAddOp2($34,25,1,$341)|0);
        if ($groupBySort$0) {
         $429 = HEAP32[$335>>2]|0;
         (_sqlite3VdbeAddOp2($34,5,$429,$411)|0);
        } else {
         _sqlite3WhereEnd($357);
         _sqlite3VdbeChangeToNoop($34,$339);
        }
        (_sqlite3VdbeAddOp2($34,17,$343,$344)|0);
        (_sqlite3VdbeAddOp2($34,16,0,$291)|0);
        $$idx4$val = HEAP32[$$idx6>>2]|0;
        $430 = (_sqlite3VdbeCurrentAddr($$idx4$val)|0);
        (_sqlite3VdbeAddOp2($34,25,1,$342)|0);
        (_sqlite3VdbeAddOp1($34,18,$343)|0);
        _sqlite3VdbeResolveLabel($34,$344);
        $$idx$val = HEAP32[$$idx6>>2]|0;
        $431 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
        $432 = (($431) + 2)|0;
        (_sqlite3VdbeAddOp2($34,132,$341,$432)|0);
        (_sqlite3VdbeAddOp1($34,18,$343)|0);
        $pParse$idx22 = (($pParse) + 8|0);
        $pParse$idx22$val = HEAP32[$pParse$idx22>>2]|0;
        _finalizeAggFunctions($pParse$idx22$val,$sAggInfo);
        $433 = (($431) + 1)|0;
        _sqlite3ExprIfFalse($pParse,$152,$433,8);
        $434 = HEAP32[$p>>2]|0;
        _selectInnerLoop($pParse,$p,$434,-1,$pOrderBy$326,$sDistinct,$pDest,$433,$430);
        (_sqlite3VdbeAddOp1($34,18,$343)|0);
        _sqlite3VdbeResolveLabel($34,$347);
        _resetAccumulator($pParse,$sAggInfo);
        (_sqlite3VdbeAddOp1($34,18,$346)|0);
        $pOrderBy$5 = $pOrderBy$326;
       } else {
        $sAggInfo$idx = (($sAggInfo) + 40|0);
        $sAggInfo$idx$val = HEAP32[$sAggInfo$idx>>2]|0;
        $435 = (_isSimpleCount($p,$sAggInfo$idx$val,$sAggInfo$idx23$val)|0);
        $436 = ($435|0)==(0|0);
        if ($436) {
         HEAP32[$pMinMax>>2] = 0;
         $481 = HEAP32[$151>>2]|0;
         $482 = ($481|0)==(0|0);
         do {
          if ($482) {
           $483 = (_minMaxQuery($sAggInfo,$pMinMax)|0);
           $484 = ($483<<24>>24)==(0);
           $$pre96 = HEAP32[$pMinMax>>2]|0;
           if ($484) {
            $497 = $$pre96;$flag$029 = 0;$pDel$0 = 0;
            break;
           }
           $485 = (_sqlite3ExprListDup($5,$$pre96,0)|0);
           HEAP32[$pMinMax>>2] = $485;
           $486 = ($485|0)==(0|0);
           if ($486) {
            $497 = 0;$flag$029 = $483;$pDel$0 = 0;
            break;
           }
           $487 = HEAP8[$7>>0]|0;
           $488 = ($487<<24>>24)==(0);
           if (!($488)) {
            $497 = $485;$flag$029 = $483;$pDel$0 = $485;
            break;
           }
           $489 = ($483<<24>>24)!=(1);
           $490 = $489&1;
           $491 = (($485) + 8|0);
           $492 = HEAP32[$491>>2]|0;
           $493 = (($492) + 12|0);
           HEAP8[$493>>0] = $490;
           $494 = HEAP32[$491>>2]|0;
           $495 = HEAP32[$494>>2]|0;
           HEAP8[$495>>0] = -102;
           $497 = $485;$flag$029 = $483;$pDel$0 = $485;
          } else {
           $497 = 0;$flag$029 = 0;$pDel$0 = 0;
          }
         } while(0);
         _resetAccumulator($pParse,$sAggInfo);
         $496 = $flag$029&255;
         $498 = (_sqlite3WhereBegin($pParse,$pTabList$0$lcssa,$148,$497,0,$496,0)|0);
         $499 = ($498|0)==(0|0);
         if ($499) {
          _sqlite3ExprListDelete($5,$pDel$0);
          label = 144;
          break;
         }
         _updateAccumulator($pParse,$sAggInfo);
         $$idx16 = (($498) + 36|0);
         $$idx16$val = HEAP8[$$idx16>>0]|0;
         $500 = (_sqlite3WhereIsOrdered($$idx16$val)|0);
         $501 = ($500|0)==(0);
         if (!($501)) {
          $$idx20 = (($498) + 52|0);
          $$idx20$val = HEAP32[$$idx20>>2]|0;
          $502 = (_sqlite3WhereBreakLabel($$idx20$val)|0);
          (_sqlite3VdbeAddOp2($34,16,0,$502)|0);
         }
         _sqlite3WhereEnd($498);
         $pParse$idx = (($pParse) + 8|0);
         $pParse$idx$val = HEAP32[$pParse$idx>>2]|0;
         _finalizeAggFunctions($pParse$idx$val,$sAggInfo);
         $pDel$1 = $pDel$0;
        } else {
         $437 = HEAP32[$pParse>>2]|0;
         $438 = (($435) + 68|0);
         $439 = HEAP32[$438>>2]|0;
         $440 = (_sqlite3SchemaToIndex($437,$439)|0);
         $441 = (($pParse) + 72|0);
         $442 = HEAP32[$441>>2]|0;
         $443 = (($442) + 1)|0;
         HEAP32[$441>>2] = $443;
         $444 = (($435) + 32|0);
         $445 = HEAP32[$444>>2]|0;
         _sqlite3CodeVerifySchema($pParse,$440);
         $446 = HEAP32[$444>>2]|0;
         $447 = HEAP32[$435>>2]|0;
         _sqlite3TableLock($pParse,$440,$446,0,$447);
         $448 = (($435) + 44|0);
         $449 = HEAP8[$448>>0]|0;
         $450 = $449 & 32;
         $451 = ($450<<24>>24)==(0);
         if ($451) {
          $pBest$0 = 0;
         } else {
          $452 = (_sqlite3PrimaryKeyIndex($435)|0);
          $pBest$0 = $452;
         }
         $453 = (($435) + 8|0);
         $pIdx$045 = HEAP32[$453>>2]|0;
         $454 = ($pIdx$045|0)==(0|0);
         if ($454) {
          $pBest$1$lcssa = $pBest$0;
         } else {
          $455 = (($435) + 42|0);
          $pBest$146 = $pBest$0;$pIdx$047 = $pIdx$045;
          while(1) {
           $456 = (($pIdx$047) + 55|0);
           $457 = HEAP8[$456>>0]|0;
           $458 = $457 & 4;
           $459 = ($458<<24>>24)==(0);
           do {
            if ($459) {
             $460 = (($pIdx$047) + 48|0);
             $461 = HEAP16[$460>>1]|0;
             $462 = HEAP16[$455>>1]|0;
             $463 = ($461<<16>>16)<($462<<16>>16);
             if (!($463)) {
              $pBest$2 = $pBest$146;
              break;
             }
             $464 = (($pIdx$047) + 36|0);
             $465 = HEAP32[$464>>2]|0;
             $466 = ($465|0)==(0|0);
             if (!($466)) {
              $pBest$2 = $pBest$146;
              break;
             }
             $467 = ($pBest$146|0)==(0|0);
             if (!($467)) {
              $468 = (($pBest$146) + 48|0);
              $469 = HEAP16[$468>>1]|0;
              $470 = ($461<<16>>16)<($469<<16>>16);
              if (!($470)) {
               $pBest$2 = $pBest$146;
               break;
              }
             }
             $pBest$2 = $pIdx$047;
            } else {
             $pBest$2 = $pBest$146;
            }
           } while(0);
           $471 = (($pIdx$047) + 20|0);
           $pIdx$0 = HEAP32[$471>>2]|0;
           $472 = ($pIdx$0|0)==(0|0);
           if ($472) {
            $pBest$1$lcssa = $pBest$2;
            break;
           } else {
            $pBest$146 = $pBest$2;$pIdx$047 = $pIdx$0;
           }
          }
         }
         $473 = ($pBest$1$lcssa|0)==(0|0);
         do {
          if ($473) {
           (_sqlite3VdbeAddOp4Int($34,52,$442,$445,$440,1)|0);
          } else {
           $474 = (($pBest$1$lcssa) + 44|0);
           $475 = HEAP32[$474>>2]|0;
           $476 = (_sqlite3KeyInfoOfIndex($pParse,$pBest$1$lcssa)|0);
           (_sqlite3VdbeAddOp4Int($34,52,$442,$475,$440,1)|0);
           $477 = ($476|0)==(0|0);
           if ($477) {
            break;
           }
           _sqlite3VdbeChangeP4($34,-1,$476,-6);
          }
         } while(0);
         $478 = HEAP32[$sAggInfo$idx>>2]|0;
         $479 = (($478) + 8|0);
         $480 = HEAP32[$479>>2]|0;
         (_sqlite3VdbeAddOp2($34,49,$442,$480)|0);
         (_sqlite3VdbeAddOp1($34,58,$442)|0);
         _explainSimpleCount($pParse,$435,$pBest$1$lcssa);
         $pDel$1 = 0;
        }
        _sqlite3ExprIfFalse($pParse,$152,$291,8);
        $503 = HEAP32[$p>>2]|0;
        _selectInnerLoop($pParse,$p,$503,-1,0,0,$pDest,$291,$291);
        _sqlite3ExprListDelete($5,$pDel$1);
        $pOrderBy$5 = 0;
       }
       _sqlite3VdbeResolveLabel($34,$291);
       $pOrderBy$6 = $pOrderBy$5;
      }
      $504 = (($sDistinct) + 1|0);
      $505 = HEAP8[$504>>0]|0;
      $506 = ($505<<24>>24)==(3);
      if ($506) {
       _explainTempTable($pParse,24848);
      }
      $507 = ($pOrderBy$6|0)==(0|0);
      if (!($507)) {
       _explainTempTable($pParse,24880);
       $508 = HEAP32[$146>>2]|0;
       _generateSortTail($pParse,$p,$34,$508,$pDest);
      }
      _sqlite3VdbeResolveLabel($34,$187);
      HEAP32[$0>>2] = $1;
      $509 = HEAP8[$pDest>>0]|0;
      $510 = ($509<<24>>24)==(5);
      if (!($510)) {
       $rc$031 = 0;
       break;
      }
      _generateColumnNames($pParse,$pTabList$0$lcssa,$146);
      $rc$031 = 0;
     } else {
      label = 144;
     }
    }
   } else {
    label = 144;
   }
  } else {
   label = 144;
  }
 } while(0);
 if ((label|0) == 144) {
  HEAP32[$0>>2] = $1;
  $rc$031 = 1;
 }
 $511 = (($sAggInfo) + 28|0);
 $512 = HEAP32[$511>>2]|0;
 _sqlite3DbFree($5,$512);
 $513 = (($sAggInfo) + 40|0);
 $514 = HEAP32[$513>>2]|0;
 _sqlite3DbFree($5,$514);
 $$0 = $rc$031;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SrcListAppendFromTerm($pParse,$p,$pTable,$pDatabase,$pAlias,$pSubquery,$pOn,$pUsing) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pTable = $pTable|0;
 $pDatabase = $pDatabase|0;
 $pAlias = $pAlias|0;
 $pSubquery = $pSubquery|0;
 $pOn = $pOn|0;
 $pUsing = $pUsing|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($p|0)==(0|0);
 if ($1) {
  $2 = ($pOn|0)!=(0|0);
  $$not = $2 ^ 1;
  $3 = ($pUsing|0)==(0|0);
  $or$cond = $3 & $$not;
  if ($or$cond) {
   label = 4;
  } else {
   $4 = $2 ? 24832 : 24840;
   HEAP32[$vararg_buffer>>2] = $4;
   _sqlite3ErrorMsg($pParse,24792,$vararg_buffer);
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = (_sqlite3SrcListAppend($0,$p,$pTable,$pDatabase)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (($7) + -1)|0;
    $10 = (($pAlias) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = (_sqlite3NameFromToken($0,$pAlias)|0);
     $14 = ((($5) + (($9*72)|0)|0) + 20|0);
     HEAP32[$14>>2] = $13;
    }
    $15 = ((($5) + (($9*72)|0)|0) + 28|0);
    HEAP32[$15>>2] = $pSubquery;
    $16 = ((($5) + (($9*72)|0)|0) + 52|0);
    HEAP32[$16>>2] = $pOn;
    $17 = ((($5) + (($9*72)|0)|0) + 56|0);
    HEAP32[$17>>2] = $pUsing;
    $$0 = $5;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _sqlite3ExprDelete($0,$pOn);
 _sqlite3IdListDelete($0,$pUsing);
 _sqlite3SelectDelete($0,$pSubquery);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SelectNew($pParse,$pEList,$pSrc,$pWhere,$pGroupBy,$pHaving,$pOrderBy,$selFlags,$pLimit,$pOffset) {
 $pParse = $pParse|0;
 $pEList = $pEList|0;
 $pSrc = $pSrc|0;
 $pWhere = $pWhere|0;
 $pGroupBy = $pGroupBy|0;
 $pHaving = $pHaving|0;
 $pOrderBy = $pOrderBy|0;
 $selFlags = $selFlags|0;
 $pLimit = $pLimit|0;
 $pOffset = $pOffset|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNew$0 = 0, $pNew$1 = 0, $pParse$idx$val = 0, $standin = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $standin = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3DbMallocZero($0,80)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  dest=$standin+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $pNew$0 = $standin;
 } else {
  $pNew$0 = $1;
 }
 $3 = ($pEList|0)==(0|0);
 if ($3) {
  $4 = (_sqlite3Expr($0,116,0)|0);
  $pParse$idx$val = HEAP32[$pParse>>2]|0;
  $5 = (_sqlite3ExprListAppend($pParse$idx$val,0,$4)|0);
  $$0 = $5;
 } else {
  $$0 = $pEList;
 }
 HEAP32[$pNew$0>>2] = $$0;
 $6 = ($pSrc|0)==(0|0);
 if ($6) {
  $7 = (_sqlite3DbMallocZero($0,80)|0);
  $$01 = $7;
 } else {
  $$01 = $pSrc;
 }
 $8 = (($pNew$0) + 40|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($pNew$0) + 44|0);
 HEAP32[$9>>2] = $pWhere;
 $10 = (($pNew$0) + 48|0);
 HEAP32[$10>>2] = $pGroupBy;
 $11 = (($pNew$0) + 52|0);
 HEAP32[$11>>2] = $pHaving;
 $12 = (($pNew$0) + 56|0);
 HEAP32[$12>>2] = $pOrderBy;
 $13 = (($pNew$0) + 6|0);
 HEAP16[$13>>1] = $selFlags;
 $14 = (($pNew$0) + 4|0);
 HEAP8[$14>>0] = 119;
 $15 = (($pNew$0) + 68|0);
 HEAP32[$15>>2] = $pLimit;
 $16 = (($pNew$0) + 72|0);
 HEAP32[$16>>2] = $pOffset;
 $17 = (($pNew$0) + 16|0);
 HEAP32[$17>>2] = -1;
 $18 = (($pNew$0) + 20|0);
 HEAP32[$18>>2] = -1;
 $19 = (($pNew$0) + 24|0);
 HEAP32[$19>>2] = -1;
 $20 = (($0) + 64|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $pNew$1 = $pNew$0;
  STACKTOP = sp;return ($pNew$1|0);
 }
 _clearSelect($0,$pNew$0);
 $23 = ($pNew$0|0)==($standin|0);
 if ($23) {
  $pNew$1 = 0;
  STACKTOP = sp;return ($pNew$1|0);
 }
 _sqlite3DbFree($0,$pNew$0);
 $pNew$1 = 0;
 STACKTOP = sp;return ($pNew$1|0);
}
function _sqlite3ExprListAppend($pParse$0$0$val,$pList,$pExpr) {
 $pParse$0$0$val = $pParse$0$0$val|0;
 $pList = $pList|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  $1 = (_sqlite3DbMallocZero($pParse$0$0$val,12)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$1 = $1;
   label = 8;
  } else {
   $3 = (_sqlite3DbMallocRaw($pParse$0$0$val,20)|0);
   $4 = (($1) + 8|0);
   HEAP32[$4>>2] = $3;
   $5 = ($3|0)==(0|0);
   if ($5) {
    $$1 = $1;
    label = 8;
   } else {
    $$01 = $1;
    label = 7;
   }
  }
 } else {
  $6 = HEAP32[$pList>>2]|0;
  $7 = (($6) + -1)|0;
  $8 = $7 & $6;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (($pList) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($6*40)|0;
   $13 = (_sqlite3DbRealloc($pParse$0$0$val,$11,$12)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$1 = $pList;
    label = 8;
   } else {
    HEAP32[$10>>2] = $13;
    $$01 = $pList;
    label = 7;
   }
  } else {
   $$01 = $pList;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $15 = HEAP32[$$01>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$$01>>2] = $16;
  $17 = (($$01) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($15*20)|0)|0);
  ;HEAP32[$19+0>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;
  HEAP32[$19>>2] = $pExpr;
  $$0 = $$01;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  _sqlite3ExprDelete($pParse$0$0$val,$pExpr);
  _sqlite3ExprListDelete($pParse$0$0$val,$$1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3ExprListSetName($pParse,$pList,$pName,$dequote) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 $pName = $pName|0;
 $dequote = $dequote|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (($pList) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pParse>>2]|0;
 $6 = HEAP32[$pName>>2]|0;
 $7 = (($pName) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3DbStrNDup($5,$6,$8)|0);
 $10 = ((($4) + (($2*20)|0)|0) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ($dequote|0)==(0);
 $12 = ($9|0)==(0|0);
 $or$cond = $11 | $12;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 _sqlite3Dequote($9);
 STACKTOP = sp;return;
}
function _sqlite3ExprListSetSpan($pParse$0$0$val,$pList,$pSpan) {
 $pParse$0$0$val = $pParse$0$0$val|0;
 $pList = $pList|0;
 $pSpan = $pSpan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (($pList) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + (($2*20)|0)|0) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 _sqlite3DbFree($pParse$0$0$val,$6);
 $7 = (($pSpan) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pSpan) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $8;
 $13 = (($11) - ($12))|0;
 $14 = (_sqlite3DbStrNDup($pParse$0$0$val,$8,$13)|0);
 HEAP32[$5>>2] = $14;
 STACKTOP = sp;return;
}
function _sqlite3Expr($db,$op,$zToken) {
 $db = $db|0;
 $op = $op|0;
 $zToken = $zToken|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 HEAP32[$x>>2] = $zToken;
 $0 = ($zToken|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (_sqlite3Strlen30($zToken)|0);
  $3 = $1;
 }
 $2 = (($x) + 4|0);
 HEAP32[$2>>2] = $3;
 $4 = (_sqlite3ExprAlloc($db,$op,$x,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _sqlite3SrcListShiftJoinType($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$0 = 0, $i$0$in2 = 0, $i$0$in2$phi = 0, $i$01 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 $i$01 = (($1) + -1)|0;
 $2 = ($i$01|0)>(0);
 if ($2) {
  $i$0$in2 = $1;$i$03 = $i$01;
  while(1) {
   $3 = (($i$0$in2) + -2)|0;
   $4 = ((($p) + (($3*72)|0)|0) + 44|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ((($p) + (($i$03*72)|0)|0) + 44|0);
   HEAP8[$6>>0] = $5;
   $i$0 = (($i$03) + -1)|0;
   $7 = ($i$0|0)>(0);
   if ($7) {
    $i$0$in2$phi = $i$03;$i$03 = $i$0;$i$0$in2 = $i$0$in2$phi;
   } else {
    break;
   }
  }
 }
 $8 = (($p) + 44|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3SrcListIndexedBy($pParse,$p,$pIndexedBy) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pIndexedBy = $pIndexedBy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + -1)|0;
 $4 = (($pIndexedBy) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = HEAP32[$pIndexedBy>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = ((($p) + (($3*72)|0)|0) + 45|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 | 1;
   HEAP8[$9>>0] = $11;
   STACKTOP = sp;return;
  }
 }
 $12 = HEAP32[$pParse>>2]|0;
 $13 = (_sqlite3NameFromToken($12,$pIndexedBy)|0);
 $14 = ((($p) + (($3*72)|0)|0) + 72|0);
 HEAP32[$14>>2] = $13;
 STACKTOP = sp;return;
}
function _sqlite3SrcListAppend($db,$pList,$pTable,$pDatabase) {
 $db = $db|0;
 $pList = $pList|0;
 $pTable = $pTable|0;
 $pDatabase = $pDatabase|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$pTable = 0, $$pDatabase = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pTable$$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 do {
  if ($0) {
   $1 = (_sqlite3DbMallocZero($db,80)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $3 = (($1) + 4|0);
    HEAP32[$3>>2] = 1;
    $$01 = $1;
    break;
   }
  } else {
   $$01 = $pList;
  }
 } while(0);
 $4 = HEAP32[$$01>>2]|0;
 $5 = (_sqlite3SrcListEnlarge($db,$$01,1,$4)|0);
 $6 = (($db) + 64|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  _sqlite3SrcListDelete($db,$5);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = ($pDatabase|0)==(0|0);
 if ($11) {
  $$02 = 0;
 } else {
  $12 = HEAP32[$pDatabase>>2]|0;
  $13 = ($12|0)==(0|0);
  $$pDatabase = $13 ? 0 : $pDatabase;
  $$02 = $$pDatabase;
 }
 $14 = ($$02|0)==(0|0);
 $pTable$$02 = $14 ? $pTable : $$02;
 $$02$pTable = $14 ? 0 : $pTable;
 $15 = (_sqlite3NameFromToken($db,$pTable$$02)|0);
 $16 = ((($5) + (($10*72)|0)|0) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = (_sqlite3NameFromToken($db,$$02$pTable)|0);
 $18 = ((($5) + (($10*72)|0)|0) + 12|0);
 HEAP32[$18>>2] = $17;
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3JoinType($pParse,$pA,$pB,$pC) {
 $pParse = $pParse|0;
 $pA = $pA|0;
 $pB = $pB|0;
 $pC = $pC|0;
 var $$ = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $apAll = 0, $i$011 = 0;
 var $j$06 = 0, $jointype$010 = 0, $jointype$14 = 0, $jointype$2 = 0, $jointype$3 = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $apAll = sp + 20|0;
 HEAP32[$apAll>>2] = $pA;
 $0 = (($apAll) + 4|0);
 HEAP32[$0>>2] = $pB;
 $1 = (($apAll) + 8|0);
 HEAP32[$1>>2] = $pC;
 $4 = $pA;$i$011 = 1;$jointype$010 = 0;
 L1: while(1) {
  $3 = ($4|0)==(0|0);
  if ($3) {
   $jointype$2 = $jointype$010;
   break;
  }
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $j$06 = 0;
  while(1) {
   $7 = ((24664 + (($j$06*3)|0)|0) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = ($6|0)==($9|0);
   if ($10) {
    $11 = HEAP32[$4>>2]|0;
    $12 = (24664 + (($j$06*3)|0)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = (24624 + ($14)|0);
    $16 = (_sqlite3_strnicmp($11,$15,$6)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
   }
   $18 = (($j$06) + 1)|0;
   $19 = ($18|0)<(7);
   if ($19) {
    $j$06 = $18;
   } else {
    $jointype$14 = $jointype$010;
    label = 10;
    break L1;
   }
  }
  $20 = ((24664 + (($j$06*3)|0)|0) + 2|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 | $jointype$010;
  $24 = ($j$06|0)>(6);
  if ($24) {
   $jointype$14 = $23;
   label = 10;
   break;
  }
  $2 = ($i$011|0)<(3);
  if (!($2)) {
   $jointype$2 = $23;
   break;
  }
  $$phi$trans$insert = (($apAll) + ($i$011<<2)|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $phitmp = (($i$011) + 1)|0;
  $4 = $$pre;$i$011 = $phitmp;$jointype$010 = $23;
 }
 if ((label|0) == 10) {
  $25 = $jointype$14 | 64;
  $jointype$2 = $25;
 }
 $26 = $jointype$2 & 33;
 $27 = ($26|0)!=(33);
 $28 = $jointype$2 & 64;
 $29 = ($28|0)==(0);
 $or$cond = $27 & $29;
 if (!($or$cond)) {
  $30 = ($pC|0)==(0|0);
  $$ = $30 ? ((10064 + 1|0)) : 10064;
  HEAP32[$vararg_buffer>>2] = $pA;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $pB;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $pC;
  _sqlite3ErrorMsg($pParse,24688,$vararg_buffer);
  $jointype$3 = 1;
  STACKTOP = sp;return ($jointype$3|0);
 }
 $31 = $jointype$2 & 32;
 $32 = ($31|0)==(0);
 $33 = $jointype$2 & 24;
 $34 = ($33|0)==(8);
 $or$cond3 = $32 | $34;
 if ($or$cond3) {
  $jointype$3 = $jointype$2;
  STACKTOP = sp;return ($jointype$3|0);
 }
 _sqlite3ErrorMsg($pParse,24736,$vararg_buffer4);
 $jointype$3 = 1;
 STACKTOP = sp;return ($jointype$3|0);
}
function _sqlite3WithPush($pParse,$pWith,$bFree) {
 $pParse = $pParse|0;
 $pWith = $pWith|0;
 $bFree = $bFree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWith|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pParse) + 536|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pWith) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$1>>2] = $pWith;
 $4 = (($pParse) + 453|0);
 HEAP8[$4>>0] = $bFree;
 STACKTOP = sp;return;
}
function _sqlite3DeleteFrom($pParse,$pTabList,$pWhere) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pWhere = $pWhere|0;
 var $$idx = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aToOpen$0 = 0, $aToOpen$01 = 0, $aToOpen$1 = 0, $aToOpen$2 = 0, $addrBypass$0 = 0, $addrDelete$0 = 0, $addrEphOpen$0 = 0, $addrLoop$0 = 0, $aiCurOnePass = 0, $brmerge = 0, $exitcond = 0, $i$09 = 0, $i$15 = 0, $iDataCur = 0;
 var $iEphCur$0 = 0, $iIdxCur = 0, $iKey$0 = 0, $iKey$1 = 0, $iKey$12 = 0, $iPk$0 = 0, $iRowSet$0 = 0, $memCnt$0 = 0, $nIdx$0$lcssa = 0, $nIdx$017 = 0, $nKey$0 = 0, $nKey$03 = 0, $nPk$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $pIdx$0 = 0, $pIdx$016 = 0, $pIdx$018 = 0, $pIdx$1 = 0;
 var $pIdx$113 = 0, $pIdx$114 = 0, $pIdx$2 = 0, $pIdx$24 = 0, $pIdx$26 = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pPk$0 = 0, $sContext = 0, $sNC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $iDataCur = sp + 52|0;
 $iIdxCur = sp + 48|0;
 $sContext = sp;
 $sNC = sp + 16|0;
 $aiCurOnePass = sp + 8|0;
 $0 = $sContext;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($pParse) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = (($4) + 64|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $11 = (_sqlite3SrcListLookup($pParse,$pTabList)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     $aToOpen$2 = 0;
    } else {
     $13 = (_sqlite3TriggersExist($pParse,$11,109,0,0)|0);
     $14 = (($11) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)!=(0|0);
     $17 = (_sqlite3ViewGetColumnNames($pParse,$11)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = ($13|0)!=(0|0);
      $20 = $19&1;
      $21 = (_sqlite3IsReadOnly($pParse,$11,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $23 = (($11) + 68|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_sqlite3SchemaToIndex($4,$24)|0);
       $26 = (($4) + 16|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($27) + ($25<<4)|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = HEAP32[$11>>2]|0;
       $31 = (_sqlite3AuthCheck($pParse,9,$30,0,$29)|0);
       $32 = ($31|0)==(1);
       if ($32) {
        $aToOpen$2 = 0;
       } else {
        $33 = (($pParse) + 72|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (($34) + 1)|0;
        HEAP32[$33>>2] = $35;
        $36 = (($pTabList) + 48|0);
        HEAP32[$36>>2] = $34;
        $37 = (($11) + 8|0);
        $pIdx$016 = HEAP32[$37>>2]|0;
        $38 = ($pIdx$016|0)==(0|0);
        if ($38) {
         $nIdx$0$lcssa = 0;
        } else {
         $$pre = HEAP32[$33>>2]|0;
         $40 = $$pre;$nIdx$017 = 0;$pIdx$018 = $pIdx$016;
         while(1) {
          $39 = (($40) + 1)|0;
          HEAP32[$33>>2] = $39;
          $41 = (($pIdx$018) + 20|0);
          $42 = (($nIdx$017) + 1)|0;
          $pIdx$0 = HEAP32[$41>>2]|0;
          $43 = ($pIdx$0|0)==(0|0);
          if ($43) {
           $nIdx$0$lcssa = $42;
           break;
          } else {
           $40 = $39;$nIdx$017 = $42;$pIdx$018 = $pIdx$0;
          }
         }
        }
        if ($16) {
         $44 = HEAP32[$11>>2]|0;
         _sqlite3AuthContextPush($pParse,$sContext,$44);
        }
        $45 = (_sqlite3GetVdbe($pParse)|0);
        $46 = ($45|0)==(0|0);
        if ($46) {
         $aToOpen$2 = 0;
        } else {
         $47 = (($pParse) + 18|0);
         $48 = HEAP8[$47>>0]|0;
         $49 = ($48<<24>>24)==(0);
         if ($49) {
          _sqlite3VdbeCountChanges($45);
         }
         _sqlite3BeginWriteOperation($pParse,1,$25);
         if ($16) {
          _sqlite3MaterializeView($pParse,$11,$pWhere,$34);
          HEAP32[$iIdxCur>>2] = $34;
          HEAP32[$iDataCur>>2] = $34;
         }
         ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
         HEAP32[$sNC>>2] = $pParse;
         $50 = (($sNC) + 4|0);
         HEAP32[$50>>2] = $pTabList;
         $51 = (_sqlite3ResolveExprNames($sNC,$pWhere)|0);
         $52 = ($51|0)==(0);
         if ($52) {
          $53 = (($4) + 24|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = $54 & 128;
          $56 = ($55|0)==(0);
          if ($56) {
           $memCnt$0 = -1;
          } else {
           $57 = (($pParse) + 76|0);
           $58 = HEAP32[$57>>2]|0;
           $59 = (($58) + 1)|0;
           HEAP32[$57>>2] = $59;
           (_sqlite3VdbeAddOp2($45,25,0,$59)|0);
           $memCnt$0 = $59;
          }
          $notlhs = ($31|0)!=(0);
          $notrhs = ($pWhere|0)!=(0|0);
          $or$cond$not = $notrhs | $notlhs;
          $brmerge = $or$cond$not | $19;
          $$phi$trans$insert = (($11) + 44|0);
          $$pre21 = HEAP8[$$phi$trans$insert>>0]|0;
          if ($brmerge) {
           label = 27;
          } else {
           $60 = $$pre21 & 16;
           $61 = ($60<<24>>24)==(0);
           if ($61) {
            $pParse$idx$val = HEAP32[$pParse>>2]|0;
            $pParse$idx$val$idx = (($pParse$idx$val) + 24|0);
            $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
            $62 = (_sqlite3FkRequired($pParse$idx$val$idx$val,$11,0,0)|0);
            $63 = ($62|0)==(0);
            if ($63) {
             $64 = (($11) + 32|0);
             $65 = HEAP32[$64>>2]|0;
             $66 = HEAP32[$11>>2]|0;
             _sqlite3TableLock($pParse,$25,$65,1,$66);
             $67 = HEAP8[$$phi$trans$insert>>0]|0;
             $68 = $67 & 32;
             $69 = ($68<<24>>24)==(0);
             if ($69) {
              $70 = HEAP32[$64>>2]|0;
              $71 = HEAP32[$11>>2]|0;
              (_sqlite3VdbeAddOp4($45,115,$70,$25,$memCnt$0,$71,-2)|0);
             }
             $pIdx$113 = HEAP32[$37>>2]|0;
             $72 = ($pIdx$113|0)==(0|0);
             if ($72) {
              $aToOpen$1 = 0;
             } else {
              $pIdx$114 = $pIdx$113;
              while(1) {
               $73 = (($pIdx$114) + 44|0);
               $74 = HEAP32[$73>>2]|0;
               (_sqlite3VdbeAddOp2($45,115,$74,$25)|0);
               $75 = (($pIdx$114) + 20|0);
               $pIdx$1 = HEAP32[$75>>2]|0;
               $76 = ($pIdx$1|0)==(0|0);
               if ($76) {
                $aToOpen$1 = 0;
                break;
               } else {
                $pIdx$114 = $pIdx$1;
               }
              }
             }
            } else {
             label = 27;
            }
           } else {
            label = 27;
           }
          }
          do {
           if ((label|0) == 27) {
            $77 = (($11) + 44|0);
            $78 = $$pre21 & 32;
            $79 = ($78<<24>>24)==(0);
            if ($79) {
             $80 = (($pParse) + 76|0);
             $81 = HEAP32[$80>>2]|0;
             $82 = (($81) + 1)|0;
             HEAP32[$80>>2] = $82;
             (_sqlite3VdbeAddOp2($45,28,0,$82)|0);
             $addrEphOpen$0 = 0;$iEphCur$0 = 0;$iPk$0 = 0;$iRowSet$0 = $82;$nPk$0 = 1;$pPk$0 = 0;
            } else {
             $83 = (_sqlite3PrimaryKeyIndex($11)|0);
             $84 = (($83) + 50|0);
             $85 = HEAP16[$84>>1]|0;
             $86 = (($pParse) + 76|0);
             $87 = HEAP32[$86>>2]|0;
             $88 = (($87) + 1)|0;
             $89 = $85 << 16 >> 16;
             $90 = (($87) + ($89))|0;
             HEAP32[$86>>2] = $90;
             $91 = HEAP32[$33>>2]|0;
             $92 = (($91) + 1)|0;
             HEAP32[$33>>2] = $92;
             $93 = (_sqlite3VdbeAddOp2($45,55,$91,$89)|0);
             _sqlite3VdbeSetP4KeyInfo($pParse,$83);
             $addrEphOpen$0 = $93;$iEphCur$0 = $91;$iPk$0 = $88;$iRowSet$0 = 0;$nPk$0 = $85;$pPk$0 = $83;
            }
            $94 = (_sqlite3WhereBegin($pParse,$pTabList,$pWhere,0,0,12,$35)|0);
            $95 = ($94|0)==(0|0);
            if ($95) {
             $aToOpen$2 = 0;
             break L1;
            }
            $96 = (_sqlite3WhereOkOnePass($94,$aiCurOnePass)|0);
            $97 = HEAP32[$53>>2]|0;
            $98 = $97 & 128;
            $99 = ($98|0)==(0);
            if (!($99)) {
             (_sqlite3VdbeAddOp2($45,37,$memCnt$0,1)|0);
            }
            $100 = ($pPk$0|0)!=(0|0);
            do {
             if ($100) {
              $101 = ($nPk$0<<16>>16)>(0);
              if (!($101)) {
               $iKey$0 = $iPk$0;
               break;
              }
              $102 = (($pPk$0) + 4|0);
              $103 = $nPk$0 << 16 >> 16;
              $i$09 = 0;
              while(1) {
               $104 = HEAP32[$102>>2]|0;
               $105 = (($104) + ($i$09<<1)|0);
               $106 = HEAP16[$105>>1]|0;
               $107 = $106 << 16 >> 16;
               $108 = (($i$09) + ($iPk$0))|0;
               _sqlite3ExprCodeGetColumnOfTable($45,$11,$34,$107,$108);
               $109 = (($i$09) + 1)|0;
               $exitcond = ($109|0)==($103|0);
               if ($exitcond) {
                $iKey$0 = $iPk$0;
                break;
               } else {
                $i$09 = $109;
               }
              }
             } else {
              $110 = (($pParse) + 76|0);
              $111 = HEAP32[$110>>2]|0;
              $112 = (($111) + 1)|0;
              $113 = (_sqlite3ExprCodeGetColumn($pParse,$11,-1,$34,$112,0)|0);
              $114 = HEAP32[$110>>2]|0;
              $115 = ($113|0)>($114|0);
              if (!($115)) {
               $iKey$0 = $113;
               break;
              }
              HEAP32[$110>>2] = $113;
              $iKey$0 = $113;
             }
            } while(0);
            $116 = ($96|0)!=(0);
            do {
             if ($116) {
              $117 = (($nIdx$0$lcssa) + 2)|0;
              $118 = (_sqlite3DbMallocRaw($4,$117)|0);
              $119 = ($118|0)==(0|0);
              if ($119) {
               _sqlite3WhereEnd($94);
               $aToOpen$2 = 0;
               break L1;
              }
              $120 = (($nIdx$0$lcssa) + 1)|0;
              _memset(($118|0),1,($120|0))|0;
              $121 = (($118) + ($120)|0);
              HEAP8[$121>>0] = 0;
              $122 = HEAP32[$aiCurOnePass>>2]|0;
              $123 = ($122|0)>(-1);
              if ($123) {
               $124 = (($122) - ($34))|0;
               $125 = (($118) + ($124)|0);
               HEAP8[$125>>0] = 0;
              }
              $126 = (($aiCurOnePass) + 4|0);
              $127 = HEAP32[$126>>2]|0;
              $128 = ($127|0)>(-1);
              if ($128) {
               $129 = (($127) - ($34))|0;
               $130 = (($118) + ($129)|0);
               HEAP8[$130>>0] = 0;
              }
              $131 = ($addrEphOpen$0|0)==(0);
              if (!($131)) {
               _sqlite3VdbeChangeToNoop($45,$addrEphOpen$0);
              }
              $132 = (_sqlite3VdbeAddOp0($45,16)|0);
              $aToOpen$0 = $118;$addrDelete$0 = $132;$iKey$1 = $iKey$0;$nKey$0 = $nPk$0;
              label = 52;
             } else {
              if ($100) {
               $133 = (($pParse) + 76|0);
               $134 = HEAP32[$133>>2]|0;
               $135 = (($134) + 1)|0;
               HEAP32[$133>>2] = $135;
               $136 = $nPk$0 << 16 >> 16;
               $137 = (_sqlite3IndexAffinityStr($45,$pPk$0)|0);
               (_sqlite3VdbeAddOp4($45,48,$iPk$0,$136,$135,$137,$136)|0);
               (_sqlite3VdbeAddOp2($45,107,$iEphCur$0,$135)|0);
               $aToOpen$0 = 0;$addrDelete$0 = 0;$iKey$1 = $135;$nKey$0 = 0;
               label = 52;
               break;
              } else {
               (_sqlite3VdbeAddOp2($45,124,$iRowSet$0,$iKey$0)|0);
               _sqlite3WhereEnd($94);
               $aToOpen$01 = 0;$addrBypass$0 = 0;$iKey$12 = $iKey$0;$nKey$03 = 1;
               break;
              }
             }
            } while(0);
            do {
             if ((label|0) == 52) {
              _sqlite3WhereEnd($94);
              if (!($116)) {
               $aToOpen$01 = $aToOpen$0;$addrBypass$0 = 0;$iKey$12 = $iKey$1;$nKey$03 = $nKey$0;
               break;
              }
              $$idx = (($45) + 24|0);
              $$idx$val = HEAP32[$$idx>>2]|0;
              $138 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
              (_sqlite3VdbeAddOp2($45,16,0,$138)|0);
              _sqlite3VdbeJumpHere($45,$addrDelete$0);
              $aToOpen$01 = $aToOpen$0;$addrBypass$0 = $138;$iKey$12 = $iKey$1;$nKey$03 = $nKey$0;
             }
            } while(0);
            if (!($16)) {
             (_sqlite3OpenTableAndIndices($pParse,$11,53,$34,$aToOpen$01,$iDataCur,$iIdxCur)|0);
            }
            do {
             if ($116) {
              $139 = HEAP32[$iDataCur>>2]|0;
              $140 = (($139) - ($34))|0;
              $141 = (($aToOpen$01) + ($140)|0);
              $142 = HEAP8[$141>>0]|0;
              $143 = ($142<<24>>24)==(0);
              if ($143) {
               $addrLoop$0 = 0;
               break;
              }
              $144 = $nKey$03 << 16 >> 16;
              (_sqlite3VdbeAddOp4Int($45,65,$139,$addrBypass$0,$iKey$12,$144)|0);
              $addrLoop$0 = 0;
             } else {
              if ($100) {
               $145 = (_sqlite3VdbeAddOp1($45,105,$iEphCur$0)|0);
               (_sqlite3VdbeAddOp2($45,98,$iEphCur$0,$iKey$12)|0);
               $addrLoop$0 = $145;
               break;
              } else {
               $146 = (_sqlite3VdbeAddOp3($45,125,$iRowSet$0,0,$iKey$12)|0);
               $addrLoop$0 = $146;
               break;
              }
             }
            } while(0);
            $147 = HEAP8[$77>>0]|0;
            $148 = $147 & 16;
            $149 = ($148<<24>>24)==(0);
            if ($149) {
             $151 = HEAP8[$47>>0]|0;
             $152 = ($151<<24>>24)==(0);
             $153 = HEAP32[$iDataCur>>2]|0;
             $154 = HEAP32[$iIdxCur>>2]|0;
             $155 = $152&1;
             $156 = $96&255;
             _sqlite3GenerateRowDelete($pParse,$11,$13,$153,$154,$iKey$12,$nKey$03,$155,10,$156);
            } else {
             $150 = (_sqlite3GetVTable($4,$11)|0);
             _sqlite3VtabMakeWritable($pParse,$11);
             (_sqlite3VdbeAddOp4($45,15,0,1,$iKey$12,$150,-10)|0);
             _sqlite3VdbeChangeP5($45,2);
             _sqlite3MayAbort($pParse);
            }
            do {
             if ($116) {
              _sqlite3VdbeResolveLabel($45,$addrBypass$0);
             } else {
              if ($100) {
               $157 = (($addrLoop$0) + 1)|0;
               (_sqlite3VdbeAddOp2($45,9,$iEphCur$0,$157)|0);
               _sqlite3VdbeJumpHere($45,$addrLoop$0);
               break;
              } else {
               (_sqlite3VdbeAddOp2($45,16,0,$addrLoop$0)|0);
               _sqlite3VdbeJumpHere($45,$addrLoop$0);
               break;
              }
             }
            } while(0);
            if ($16) {
             $aToOpen$1 = $aToOpen$01;
             break;
            }
            $158 = HEAP8[$77>>0]|0;
            $159 = $158 & 16;
            $160 = ($159<<24>>24)==(0);
            if (!($160)) {
             $aToOpen$1 = $aToOpen$01;
             break;
            }
            if (!($100)) {
             $161 = HEAP32[$iDataCur>>2]|0;
             (_sqlite3VdbeAddOp1($45,58,$161)|0);
            }
            $pIdx$24 = HEAP32[$37>>2]|0;
            $162 = ($pIdx$24|0)==(0|0);
            if ($162) {
             $aToOpen$1 = $aToOpen$01;
             break;
            } else {
             $i$15 = 0;$pIdx$26 = $pIdx$24;
            }
            while(1) {
             $163 = HEAP32[$iIdxCur>>2]|0;
             $164 = (($163) + ($i$15))|0;
             (_sqlite3VdbeAddOp1($45,58,$164)|0);
             $165 = (($i$15) + 1)|0;
             $166 = (($pIdx$26) + 20|0);
             $pIdx$2 = HEAP32[$166>>2]|0;
             $167 = ($pIdx$2|0)==(0|0);
             if ($167) {
              $aToOpen$1 = $aToOpen$01;
              break;
             } else {
              $i$15 = $165;$pIdx$26 = $pIdx$2;
             }
            }
           }
          } while(0);
          $168 = HEAP8[$47>>0]|0;
          $169 = ($168<<24>>24)==(0);
          if ($169) {
           $170 = (($pParse) + 416|0);
           $171 = HEAP32[$170>>2]|0;
           $172 = ($171|0)==(0|0);
           if ($172) {
            _sqlite3AutoincrementEnd($pParse);
           }
          }
          $173 = HEAP32[$53>>2]|0;
          $174 = $173 & 128;
          $175 = ($174|0)==(0);
          if ($175) {
           $aToOpen$2 = $aToOpen$1;
          } else {
           $176 = HEAP8[$47>>0]|0;
           $177 = ($176<<24>>24)==(0);
           if ($177) {
            $178 = (($pParse) + 416|0);
            $179 = HEAP32[$178>>2]|0;
            $180 = ($179|0)==(0|0);
            if ($180) {
             (_sqlite3VdbeAddOp2($45,35,$memCnt$0,1)|0);
             _sqlite3VdbeSetNumCols($45,1);
             _sqlite3VdbeSetColName($45,0,0,24608,0);
             $aToOpen$2 = $aToOpen$1;
            } else {
             $aToOpen$2 = $aToOpen$1;
            }
           } else {
            $aToOpen$2 = $aToOpen$1;
           }
          }
         } else {
          $aToOpen$2 = 0;
         }
        }
       }
      } else {
       $aToOpen$2 = 0;
      }
     } else {
      $aToOpen$2 = 0;
     }
    }
   } else {
    $aToOpen$2 = 0;
   }
  } else {
   $aToOpen$2 = 0;
  }
 } while(0);
 _sqlite3AuthContextPop($sContext);
 _sqlite3SrcListDelete($4,$pTabList);
 _sqlite3ExprDelete($4,$pWhere);
 _sqlite3DbFree($4,$aToOpen$2);
 STACKTOP = sp;return;
}
function _sqlite3ExprListCheckLength($pParse,$pEList,$zObject) {
 $pParse = $pParse|0;
 $pEList = $pEList|0;
 $zObject = $zObject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($pEList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pParse>>2]|0;
 $2 = (($1) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$pEList>>2]|0;
 $5 = ($4|0)>($3|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $zObject;
 _sqlite3ErrorMsg($pParse,24584,$vararg_buffer);
 STACKTOP = sp;return;
}
function _sqlite3Update($pParse,$pTabList,$pChanges,$pWhere,$onError) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pChanges = $pChanges|0;
 $pWhere = $pWhere|0;
 $onError = $onError|0;
 var $$0 = 0, $$01 = 0, $$idx$val = 0, $$idx21 = 0, $$idx21$val = 0, $$not = 0, $$not7 = 0, $$op = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre115 = 0, $$sink = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aXRef$0 = 0, $addrTop$0 = 0, $aiCurOnePass = 0, $bReplace = 0, $brmerge16$not = 0, $chngPk$0$ = 0, $chngPk$0$lcssa = 0;
 var $chngPk$082 = 0, $chngPk$1 = 0, $chngPk$2 = 0, $chngRowid$0$lcssa = 0, $chngRowid$080 = 0, $chngRowid$1 = 0, $chngRowid$2 = 0, $chngRowid$322 = 0, $exitcond = 0, $i$183 = 0, $i$254 = 0, $i$349 = 0, $i$438 = 0, $i$533 = 0, $i$631 = 0, $i$729 = 0, $iDataCur$0$lcssa = 0, $iDataCur$096 = 0, $iDataCur$1 = 0, $iEph$0 = 0;
 var $j$065 = 0, $j$067 = 0, $j$124 = 0, $j$257 = 0, $j1$0 = 0, $labelContinue$0 = 0, $nIdx$0$lcssa = 0, $nIdx$097 = 0, $nKey$0 = 0, $nKey$1 = 0, $okOnePass$0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond17 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0;
 var $or$cond8 = 0, $or$cond9 = 0, $pIdx$0 = 0, $pIdx$095 = 0, $pIdx$098 = 0, $pIdx$1 = 0, $pIdx$156 = 0, $pIdx$158 = 0, $pIdx$2 = 0, $pIdx$246 = 0, $pIdx$247 = 0, $pIdx$3 = 0, $pIdx$328 = 0, $pIdx$330 = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pRowidExpr$0$lcssa = 0, $pRowidExpr$081 = 0, $pRowidExpr$1 = 0;
 var $pRowidExpr$2 = 0, $pRowidExpr$323 = 0, $reg$026 = 0, $regKey$0 = 0, $regKey$1 = 0, $regNewRowid$0 = 0, $regOld$0 = 0, $regRowCount$0 = 0, $sContext = 0, $sNC = 0, $tmask = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp + 8|0;
 $sContext = sp;
 $sNC = sp + 32|0;
 $tmask = sp + 24|0;
 $aiCurOnePass = sp + 16|0;
 $bReplace = sp + 12|0;
 $0 = $sContext;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($pParse) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = 0;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $8 = (($4) + 64|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = 0;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $11 = (_sqlite3SrcListLookup($pParse,$pTabList)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = 0;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$pParse>>2]|0;
 $14 = (($11) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_sqlite3SchemaToIndex($13,$15)|0);
 $17 = (_sqlite3TriggersExist($pParse,$11,110,$pChanges,$tmask)|0);
 $18 = (($11) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = (_sqlite3ViewGetColumnNames($pParse,$11)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = 0;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$tmask>>2]|0;
 $24 = (_sqlite3IsReadOnly($pParse,$11,$23)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = 0;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $26 = (($pParse) + 72|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = (($pTabList) + 48|0);
 HEAP32[$29>>2] = $27;
 $30 = (($11) + 44|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 & 32;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  $38 = 0;
 } else {
  $34 = (_sqlite3PrimaryKeyIndex($11)|0);
  $38 = $34;
 }
 $35 = (($11) + 8|0);
 $pIdx$095 = HEAP32[$35>>2]|0;
 $36 = ($pIdx$095|0)==(0|0);
 if ($36) {
  $iDataCur$0$lcssa = $27;$nIdx$0$lcssa = 0;
 } else {
  $37 = ($38|0)==(0|0);
  $iDataCur$096 = $27;$nIdx$097 = 0;$pIdx$098 = $pIdx$095;
  while(1) {
   $39 = (($pIdx$098) + 55|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 & 3;
   $42 = ($41<<24>>24)!=(2);
   $or$cond = $42 | $37;
   if ($or$cond) {
    $iDataCur$1 = $iDataCur$096;
   } else {
    $43 = HEAP32[$26>>2]|0;
    HEAP32[$29>>2] = $43;
    $iDataCur$1 = $43;
   }
   $44 = HEAP32[$26>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$26>>2] = $45;
   $46 = (($pIdx$098) + 20|0);
   $47 = (($nIdx$097) + 1)|0;
   $pIdx$0 = HEAP32[$46>>2]|0;
   $48 = ($pIdx$0|0)==(0|0);
   if ($48) {
    $iDataCur$0$lcssa = $iDataCur$1;$nIdx$0$lcssa = $47;
    break;
   } else {
    $iDataCur$096 = $iDataCur$1;$nIdx$097 = $47;$pIdx$098 = $pIdx$0;
   }
  }
 }
 $49 = (($11) + 38|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = $50 << 16 >> 16;
 $52 = (($51) + ($nIdx$0$lcssa))|0;
 $53 = $52 << 2;
 $54 = (($nIdx$0$lcssa) + 2)|0;
 $55 = (($54) + ($53))|0;
 $56 = (_sqlite3DbMallocRaw($4,$55)|0);
 $57 = ($56|0)==(0|0);
 if ($57) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $58 = HEAP16[$49>>1]|0;
 $59 = $58 << 16 >> 16;
 $60 = (($56) + ($59<<2)|0);
 $$sum = (($59) + ($nIdx$0$lcssa))|0;
 $61 = (($56) + ($$sum<<2)|0);
 $62 = (($nIdx$0$lcssa) + 1)|0;
 _memset(($61|0),1,($62|0))|0;
 $63 = (($61) + ($62)|0);
 HEAP8[$63>>0] = 0;
 $64 = HEAP16[$49>>1]|0;
 $65 = ($64<<16>>16)>(0);
 if ($65) {
  $66 = $64 << 16 >> 16;
  $67 = ($64<<16>>16)>(1);
  $$op = $66 << 2;
  $68 = $67 ? $$op : 4;
  _memset(($56|0),-1,($68|0))|0;
 }
 ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
 HEAP32[$sNC>>2] = $pParse;
 $69 = (($sNC) + 4|0);
 HEAP32[$69>>2] = $pTabList;
 $70 = HEAP32[$pChanges>>2]|0;
 $71 = ($70|0)>(0);
 L33: do {
  if ($71) {
   $72 = (($pChanges) + 8|0);
   $73 = (($11) + 4|0);
   $74 = (($4) + 16|0);
   $75 = ($38|0)==(0|0);
   $76 = (($11) + 36|0);
   $chngPk$082 = 0;$chngRowid$080 = 0;$i$183 = 0;$pRowidExpr$081 = 0;
   while(1) {
    $77 = HEAP32[$72>>2]|0;
    $78 = (($77) + (($i$183*20)|0)|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_sqlite3ResolveExprNames($sNC,$79)|0);
    $81 = ($80|0)==(0);
    if (!($81)) {
     $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
     label = 171;
     break;
    }
    $82 = HEAP16[$49>>1]|0;
    $83 = ($82<<16>>16)>(0);
    L38: do {
     if ($83) {
      $84 = HEAP32[$73>>2]|0;
      $85 = HEAP32[$72>>2]|0;
      $86 = ((($85) + (($i$183*20)|0)|0) + 4|0);
      $87 = HEAP32[$86>>2]|0;
      $j$067 = 0;
      while(1) {
       $91 = (($84) + (($j$067*24)|0)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (_sqlite3_stricmp($92,$87)|0);
       $94 = ($93|0)==(0);
       $90 = (($j$067) + 1)|0;
       if ($94) {
        break;
       }
       $88 = $82 << 16 >> 16;
       $89 = ($90|0)<($88|0);
       if ($89) {
        $j$067 = $90;
       } else {
        $chngPk$2 = $chngPk$082;$chngRowid$2 = $chngRowid$080;$j$065 = $90;$pRowidExpr$2 = $pRowidExpr$081;
        break L38;
       }
      }
      $95 = HEAP16[$76>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = ($j$067|0)==($96|0);
      if ($97) {
       $98 = (($85) + (($i$183*20)|0)|0);
       $99 = HEAP32[$98>>2]|0;
       $chngPk$1 = $chngPk$082;$chngRowid$1 = 1;$pRowidExpr$1 = $99;
      } else {
       if ($75) {
        $chngPk$1 = $chngPk$082;$chngRowid$1 = $chngRowid$080;$pRowidExpr$1 = $pRowidExpr$081;
       } else {
        $100 = ((($84) + (($j$067*24)|0)|0) + 23|0);
        $101 = HEAP8[$100>>0]|0;
        $102 = $101 & 1;
        $103 = ($102<<24>>24)==(0);
        $chngPk$0$ = $103 ? $chngPk$082 : 1;
        $chngPk$1 = $chngPk$0$;$chngRowid$1 = $chngRowid$080;$pRowidExpr$1 = $pRowidExpr$081;
       }
      }
      $104 = (($56) + ($j$067<<2)|0);
      HEAP32[$104>>2] = $i$183;
      $chngPk$2 = $chngPk$1;$chngRowid$2 = $chngRowid$1;$j$065 = $j$067;$pRowidExpr$2 = $pRowidExpr$1;
     } else {
      $chngPk$2 = $chngPk$082;$chngRowid$2 = $chngRowid$080;$j$065 = 0;$pRowidExpr$2 = $pRowidExpr$081;
     }
    } while(0);
    $105 = $82 << 16 >> 16;
    $106 = ($j$065|0)<($105|0);
    if ($106) {
     $116 = HEAP32[$11>>2]|0;
     $117 = ($j$065|0)<(0);
     if ($117) {
      $124 = $116;$125 = 17440;$chngRowid$322 = $chngRowid$2;$j$124 = $j$065;$pRowidExpr$323 = $pRowidExpr$2;
     } else {
      $118 = HEAP32[$73>>2]|0;
      $119 = (($118) + (($j$065*24)|0)|0);
      $120 = HEAP32[$119>>2]|0;
      $124 = $116;$125 = $120;$chngRowid$322 = $chngRowid$2;$j$124 = $j$065;$pRowidExpr$323 = $pRowidExpr$2;
     }
    } else {
     $107 = HEAP32[$72>>2]|0;
     $108 = ((($107) + (($i$183*20)|0)|0) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     if (!($75)) {
      label = 32;
      break;
     }
     $110 = (_sqlite3IsRowid($109)|0);
     $111 = ($110|0)==(0);
     if ($111) {
      label = 32;
      break;
     }
     $112 = (($107) + (($i$183*20)|0)|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = HEAP32[$11>>2]|0;
     $124 = $114;$125 = 17440;$chngRowid$322 = 1;$j$124 = -1;$pRowidExpr$323 = $113;
    }
    $121 = HEAP32[$74>>2]|0;
    $122 = (($121) + ($16<<4)|0);
    $123 = HEAP32[$122>>2]|0;
    $126 = (_sqlite3AuthCheck($pParse,23,$124,$125,$123)|0);
    if ((($126|0) == 2)) {
     $127 = (($56) + ($j$124<<2)|0);
     HEAP32[$127>>2] = -1;
    } else if ((($126|0) == 1)) {
     $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
     label = 171;
     break;
    }
    $128 = (($i$183) + 1)|0;
    $129 = HEAP32[$pChanges>>2]|0;
    $130 = ($128|0)<($129|0);
    if ($130) {
     $chngPk$082 = $chngPk$2;$chngRowid$080 = $chngRowid$322;$i$183 = $128;$pRowidExpr$081 = $pRowidExpr$323;
    } else {
     $chngPk$0$lcssa = $chngPk$2;$chngRowid$0$lcssa = $chngRowid$322;$pRowidExpr$0$lcssa = $pRowidExpr$323;
     break L33;
    }
   }
   if ((label|0) == 32) {
    HEAP32[$vararg_buffer>>2] = $109;
    _sqlite3ErrorMsg($pParse,24536,$vararg_buffer);
    $115 = (($pParse) + 17|0);
    HEAP8[$115>>0] = 1;
    $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
    _sqlite3AuthContextPop($sContext);
    _sqlite3DbFree($4,$aXRef$0);
    _sqlite3SrcListDelete($4,$$0);
    _sqlite3ExprListDelete($4,$pChanges);
    _sqlite3ExprDelete($4,$$01);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 171) {
    _sqlite3AuthContextPop($sContext);
    _sqlite3DbFree($4,$aXRef$0);
    _sqlite3SrcListDelete($4,$$0);
    _sqlite3ExprListDelete($4,$pChanges);
    _sqlite3ExprDelete($4,$$01);
    STACKTOP = sp;return;
   }
  } else {
   $chngPk$0$lcssa = 0;$chngRowid$0$lcssa = 0;$pRowidExpr$0$lcssa = 0;
  }
 } while(0);
 $131 = $chngRowid$0$lcssa&255;
 $132 = $chngPk$0$lcssa&255;
 $133 = (($132) + ($131))|0;
 $134 = $133&255;
 $135 = (($pTabList) + 64|0);
 $136 = $135;
 $137 = $136;
 HEAP32[$137>>2] = 0;
 $138 = (($136) + 4)|0;
 $139 = $138;
 HEAP32[$139>>2] = 0;
 $140 = $133 & 255;
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 $pParse$idx$val$idx = (($pParse$idx$val) + 24|0);
 $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
 $141 = (_sqlite3FkRequired($pParse$idx$val$idx$val,$11,$56,$140)|0);
 $pIdx$156 = HEAP32[$35>>2]|0;
 $142 = ($pIdx$156|0)==(0|0);
 if (!($142)) {
  $143 = $141 | $140;
  $144 = ($143|0)==(0);
  $145 = (($pParse) + 76|0);
  $j$257 = 0;$pIdx$158 = $pIdx$156;
  while(1) {
   L70: do {
    if ($144) {
     $146 = (($pIdx$158) + 36|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($147|0)!=(0|0);
     $149 = ($pIdx$158|0)==($38|0);
     $or$cond4 = $148 | $149;
     if ($or$cond4) {
      label = 44;
     } else {
      $150 = (($pIdx$158) + 50|0);
      $151 = HEAP16[$150>>1]|0;
      $152 = ($151<<16>>16)==(0);
      if ($152) {
       label = 50;
      } else {
       $153 = (($pIdx$158) + 4|0);
       $154 = HEAP32[$153>>2]|0;
       $i$254 = 0;
       while(1) {
        $158 = (($154) + ($i$254<<1)|0);
        $159 = HEAP16[$158>>1]|0;
        $160 = $159 << 16 >> 16;
        $161 = (($56) + ($160<<2)|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($162|0)>(-1);
        $157 = (($i$254) + 1)|0;
        if ($163) {
         break;
        }
        $155 = $151&65535;
        $156 = ($157|0)<($155|0);
        if ($156) {
         $i$254 = $157;
        } else {
         label = 50;
         break L70;
        }
       }
       label = 48;
      }
     }
    } else {
     label = 44;
    }
   } while(0);
   if ((label|0) == 44) {
    label = 0;
    label = 48;
   }
   if ((label|0) == 48) {
    label = 0;
    $$sink = HEAP32[$145>>2]|0;
    $164 = (($$sink) + 1)|0;
    HEAP32[$145>>2] = $164;
    $165 = ($164|0)==(0);
    if ($165) {
     label = 50;
    } else {
     $$pre115 = (($j$257) + 1)|0;
     $$pre$phiZ2D = $$pre115;$reg$026 = $164;
    }
   }
   if ((label|0) == 50) {
    label = 0;
    $166 = (($j$257) + 1)|0;
    $167 = (($61) + ($166)|0);
    HEAP8[$167>>0] = 0;
    $$pre$phiZ2D = $166;$reg$026 = 0;
   }
   $$sum2 = (($j$257) + ($59))|0;
   $168 = (($56) + ($$sum2<<2)|0);
   HEAP32[$168>>2] = $reg$026;
   $169 = (($pIdx$158) + 20|0);
   $pIdx$1 = HEAP32[$169>>2]|0;
   $170 = ($pIdx$1|0)==(0|0);
   if ($170) {
    break;
   } else {
    $j$257 = $$pre$phiZ2D;$pIdx$158 = $pIdx$1;
   }
  }
 }
 $171 = (_sqlite3GetVdbe($pParse)|0);
 $172 = ($171|0)==(0|0);
 if ($172) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $173 = (($pParse) + 18|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = ($174<<24>>24)==(0);
 if ($175) {
  _sqlite3VdbeCountChanges($171);
 }
 _sqlite3BeginWriteOperation($pParse,1,$16);
 $176 = HEAP8[$30>>0]|0;
 $177 = $176 & 16;
 $178 = ($177<<24>>24)==(0);
 if (!($178)) {
  _updateVirtualTable($pParse,$pTabList,$11,$pChanges,$pRowidExpr$0$lcssa,$56,$pWhere,$onError);
  $$0 = 0;$$01 = 0;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $179 = (($pParse) + 76|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (($180) + 1)|0;
 $182 = (($180) + 2)|0;
 HEAP32[$179>>2] = $182;
 $$not = ($chngPk$0$lcssa<<24>>24)==(0);
 $183 = ($17|0)==(0|0);
 $or$cond5 = $$not & $183;
 $184 = ($141|0)==(0);
 $or$cond6 = $or$cond5 & $184;
 if ($or$cond6) {
  $190 = $182;$regOld$0 = 0;
 } else {
  $185 = (($180) + 3)|0;
  $186 = HEAP16[$49>>1]|0;
  $187 = $186 << 16 >> 16;
  $188 = (($187) + ($182))|0;
  HEAP32[$179>>2] = $188;
  $190 = $188;$regOld$0 = $185;
 }
 $$not7 = ($140|0)==(0);
 $or$cond8 = $183 & $$not7;
 $or$cond9 = $or$cond8 & $184;
 if ($or$cond9) {
  $192 = $190;$regNewRowid$0 = $182;
 } else {
  $189 = (($190) + 1)|0;
  HEAP32[$179>>2] = $189;
  $192 = $189;$regNewRowid$0 = $189;
 }
 $191 = (($192) + 1)|0;
 $193 = HEAP16[$49>>1]|0;
 $194 = $193 << 16 >> 16;
 $195 = (($194) + ($192))|0;
 HEAP32[$179>>2] = $195;
 if ($20) {
  $196 = HEAP32[$11>>2]|0;
  _sqlite3AuthContextPush($pParse,$sContext,$196);
  _sqlite3MaterializeView($pParse,$11,$pWhere,$iDataCur$0$lcssa);
 }
 $197 = (_sqlite3ResolveExprNames($sNC,$pWhere)|0);
 $198 = ($197|0)==(0);
 if (!($198)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $199 = HEAP8[$30>>0]|0;
 $200 = $199 & 32;
 $201 = ($200<<24>>24)==(0);
 if ($201) {
  (_sqlite3VdbeAddOp3($171,28,0,$181,$182)|0);
  $202 = (_sqlite3WhereBegin($pParse,$pTabList,$pWhere,0,0,4,$28)|0);
  $203 = ($202|0)==(0|0);
  if ($203) {
   $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
   _sqlite3AuthContextPop($sContext);
   _sqlite3DbFree($4,$aXRef$0);
   _sqlite3SrcListDelete($4,$$0);
   _sqlite3ExprListDelete($4,$pChanges);
   _sqlite3ExprDelete($4,$$01);
   STACKTOP = sp;return;
  }
  $204 = (_sqlite3WhereOkOnePass($202,$aiCurOnePass)|0);
  (_sqlite3VdbeAddOp2($171,100,$iDataCur$0$lcssa,$182)|0);
  $205 = ($204|0)==(0);
  if ($205) {
   (_sqlite3VdbeAddOp2($171,124,$181,$182)|0);
  }
  _sqlite3WhereEnd($202);
  $iEph$0 = 0;$nKey$1 = 0;$okOnePass$0 = $204;$regKey$1 = 0;
 } else {
  $206 = (($38) + 50|0);
  $207 = HEAP16[$206>>1]|0;
  $208 = HEAP32[$179>>2]|0;
  $209 = (($208) + 1)|0;
  $210 = $207 << 16 >> 16;
  $211 = (($210) + 1)|0;
  $212 = (($211) + ($208))|0;
  HEAP32[$179>>2] = $212;
  $213 = HEAP32[$26>>2]|0;
  $214 = (($213) + 1)|0;
  HEAP32[$26>>2] = $214;
  (_sqlite3VdbeAddOp2($171,28,0,$209)|0);
  $215 = (_sqlite3VdbeAddOp2($171,55,$213,$210)|0);
  _sqlite3VdbeSetP4KeyInfo($pParse,$38);
  $216 = (_sqlite3WhereBegin($pParse,$pTabList,$pWhere,0,0,4,$28)|0);
  $217 = ($216|0)==(0|0);
  if ($217) {
   $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
   _sqlite3AuthContextPop($sContext);
   _sqlite3DbFree($4,$aXRef$0);
   _sqlite3SrcListDelete($4,$$0);
   _sqlite3ExprListDelete($4,$pChanges);
   _sqlite3ExprDelete($4,$$01);
   STACKTOP = sp;return;
  }
  $218 = (_sqlite3WhereOkOnePass($216,$aiCurOnePass)|0);
  $219 = ($207<<16>>16)>(0);
  if ($219) {
   $220 = (($38) + 4|0);
   $i$349 = 0;
   while(1) {
    $221 = HEAP32[$220>>2]|0;
    $222 = (($221) + ($i$349<<1)|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223 << 16 >> 16;
    $225 = (($i$349) + ($209))|0;
    _sqlite3ExprCodeGetColumnOfTable($171,$11,$iDataCur$0$lcssa,$224,$225);
    $226 = (($i$349) + 1)|0;
    $exitcond = ($226|0)==($210|0);
    if ($exitcond) {
     break;
    } else {
     $i$349 = $226;
    }
   }
  }
  $227 = ($218|0)==(0);
  if ($227) {
   $228 = (_sqlite3IndexAffinityStr($171,$38)|0);
   (_sqlite3VdbeAddOp4($171,48,$209,$210,$212,$228,$210)|0);
   (_sqlite3VdbeAddOp2($171,107,$213,$212)|0);
   $nKey$0 = 0;$regKey$0 = $212;
  } else {
   _sqlite3VdbeChangeToNoop($171,$215);
   $nKey$0 = $210;$regKey$0 = $209;
  }
  _sqlite3WhereEnd($216);
  $iEph$0 = $213;$nKey$1 = $nKey$0;$okOnePass$0 = $218;$regKey$1 = $regKey$0;
 }
 $229 = (($4) + 24|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $230 & 128;
 $232 = ($231|0)==(0);
 do {
  if ($232) {
   $regRowCount$0 = 0;
  } else {
   $233 = (($pParse) + 416|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($234|0)==(0|0);
   if (!($235)) {
    $regRowCount$0 = 0;
    break;
   }
   $236 = HEAP32[$179>>2]|0;
   $237 = (($236) + 1)|0;
   HEAP32[$179>>2] = $237;
   (_sqlite3VdbeAddOp2($171,25,0,$237)|0);
   $regRowCount$0 = $237;
  }
 } while(0);
 $$idx21 = (($171) + 24|0);
 $$idx21$val = HEAP32[$$idx21>>2]|0;
 $238 = (_sqlite3VdbeMakeLabel($$idx21$val)|0);
 if (!($20)) {
  $239 = ($onError|0)==(5);
  L137: do {
   if ($239) {
    _memset(($61|0),1,($62|0))|0;
   } else {
    $pIdx$246 = HEAP32[$35>>2]|0;
    $240 = ($pIdx$246|0)==(0|0);
    if ($240) {
     break;
    } else {
     $pIdx$247 = $pIdx$246;
    }
    while(1) {
     $243 = (($pIdx$247) + 54|0);
     $244 = HEAP8[$243>>0]|0;
     $245 = ($244<<24>>24)==(5);
     if ($245) {
      break;
     }
     $241 = (($pIdx$247) + 20|0);
     $pIdx$2 = HEAP32[$241>>2]|0;
     $242 = ($pIdx$2|0)==(0|0);
     if ($242) {
      break L137;
     } else {
      $pIdx$247 = $pIdx$2;
     }
    }
    _memset(($61|0),1,($62|0))|0;
   }
  } while(0);
  $246 = ($okOnePass$0|0)==(0);
  do {
   if (!($246)) {
    $247 = HEAP32[$aiCurOnePass>>2]|0;
    $248 = ($247|0)>(-1);
    if ($248) {
     $249 = (($247) - ($27))|0;
     $250 = (($61) + ($249)|0);
     HEAP8[$250>>0] = 0;
    }
    $251 = (($aiCurOnePass) + 4|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)>(-1);
    if (!($253)) {
     break;
    }
    $254 = (($252) - ($27))|0;
    $255 = (($61) + ($254)|0);
    HEAP8[$255>>0] = 0;
   }
  } while(0);
  (_sqlite3OpenTableAndIndices($pParse,$11,53,$27,$61,0,0)|0);
 }
 $256 = ($okOnePass$0|0)!=(0);
 do {
  if ($256) {
   $257 = (($iDataCur$0$lcssa) - ($27))|0;
   $258 = (($61) + ($257)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = ($259<<24>>24)==(0);
   if (!($260)) {
    (_sqlite3VdbeAddOp4Int($171,65,$iDataCur$0$lcssa,$238,$regKey$1,$nKey$1)|0);
   }
   $261 = ($38|0)!=(0|0);
   $262 = $261 ? $regKey$1 : $182;
   (_sqlite3VdbeAddOp2($171,76,$262,$238)|0);
   $addrTop$0 = 0;$labelContinue$0 = $238;
  } else {
   $263 = ($38|0)==(0|0);
   if ($263) {
    $266 = (_sqlite3VdbeAddOp3($171,125,$181,$238,$182)|0);
    (_sqlite3VdbeAddOp3($171,67,$iDataCur$0$lcssa,$266,$182)|0);
    $addrTop$0 = 0;$labelContinue$0 = $266;
    break;
   } else {
    $$idx$val = HEAP32[$$idx21>>2]|0;
    $264 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
    (_sqlite3VdbeAddOp2($171,105,$iEph$0,$238)|0);
    $265 = (_sqlite3VdbeAddOp2($171,98,$iEph$0,$regKey$1)|0);
    (_sqlite3VdbeAddOp4Int($171,65,$iDataCur$0$lcssa,$264,$regKey$1,0)|0);
    $addrTop$0 = $265;$labelContinue$0 = $264;
    break;
   }
  }
 } while(0);
 $267 = ($chngRowid$0$lcssa<<24>>24)==(0);
 if (!($267)) {
  _sqlite3ExprCode($pParse,$pRowidExpr$0$lcssa,$regNewRowid$0);
  (_sqlite3VdbeAddOp1($171,38,$regNewRowid$0)|0);
 }
 $or$cond11 = $$not & $184;
 $or$cond12 = $or$cond11 & $183;
 do {
  if (!($or$cond12)) {
   if ($184) {
    $271 = 0;
   } else {
    $268 = (_sqlite3FkOldmask($pParse,$11)|0);
    $271 = $268;
   }
   $269 = (_sqlite3TriggerColmask($pParse,$17,$pChanges,0,3,$11,$onError)|0);
   $270 = $269 | $271;
   $272 = HEAP16[$49>>1]|0;
   $273 = ($272<<16>>16)>(0);
   if ($273) {
    $274 = ($270|0)==(-1);
    $275 = (($11) + 4|0);
    $i$438 = 0;
    while(1) {
     do {
      if ($274) {
       label = 111;
      } else {
       $276 = ($i$438|0)<(32);
       if ($276) {
        $277 = 1 << $i$438;
        $278 = $277 & $270;
        $279 = ($278|0)==(0);
        if (!($279)) {
         label = 111;
         break;
        }
       }
       $280 = HEAP32[$275>>2]|0;
       $281 = ((($280) + (($i$438*24)|0)|0) + 23|0);
       $282 = HEAP8[$281>>0]|0;
       $283 = $282 & 1;
       $284 = ($283<<24>>24)==(0);
       if (!($284)) {
        label = 111;
        break;
       }
       $286 = (($i$438) + ($regOld$0))|0;
       (_sqlite3VdbeAddOp2($171,28,0,$286)|0);
      }
     } while(0);
     if ((label|0) == 111) {
      label = 0;
      $285 = (($i$438) + ($regOld$0))|0;
      _sqlite3ExprCodeGetColumnOfTable($171,$11,$iDataCur$0$lcssa,$i$438,$285);
     }
     $287 = (($i$438) + 1)|0;
     $288 = HEAP16[$49>>1]|0;
     $289 = $288 << 16 >> 16;
     $290 = ($287|0)<($289|0);
     if ($290) {
      $i$438 = $287;
     } else {
      break;
     }
    }
   }
   $291 = ($38|0)==(0|0);
   $or$cond13 = $267 & $291;
   if (!($or$cond13)) {
    break;
   }
   (_sqlite3VdbeAddOp2($171,33,$182,$regNewRowid$0)|0);
  }
 } while(0);
 $292 = (_sqlite3TriggerColmask($pParse,$17,$pChanges,1,1,$11,$onError)|0);
 $293 = HEAP16[$49>>1]|0;
 $294 = ($293<<16>>16)>(0);
 if ($294) {
  $295 = (($11) + 36|0);
  $296 = (($pChanges) + 8|0);
  $i$533 = 0;
  while(1) {
   $297 = HEAP16[$295>>1]|0;
   $298 = $297 << 16 >> 16;
   $299 = ($i$533|0)==($298|0);
   L191: do {
    if ($299) {
     $300 = (($i$533) + ($191))|0;
     (_sqlite3VdbeAddOp2($171,28,0,$300)|0);
    } else {
     $301 = (($56) + ($i$533<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ($302|0)>(-1);
     if ($303) {
      $304 = HEAP32[$296>>2]|0;
      $305 = (($304) + (($302*20)|0)|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (($i$533) + ($191))|0;
      _sqlite3ExprCode($pParse,$306,$307);
      break;
     }
     $308 = HEAP32[$tmask>>2]|0;
     $309 = $308 & 1;
     $310 = ($309|0)==(0);
     $311 = ($i$533|0)>(31);
     $or$cond14 = $310 | $311;
     do {
      if (!($or$cond14)) {
       $312 = 1 << $i$533;
       $313 = $312 & $292;
       $314 = ($313|0)==(0);
       if (!($314)) {
        break;
       }
       $316 = (($i$533) + ($191))|0;
       (_sqlite3VdbeAddOp2($171,28,0,$316)|0);
       break L191;
      }
     } while(0);
     $315 = (($i$533) + ($191))|0;
     _sqlite3ExprCodeGetColumnOfTable($171,$11,$iDataCur$0$lcssa,$i$533,$315);
    }
   } while(0);
   $317 = (($i$533) + 1)|0;
   $318 = HEAP16[$49>>1]|0;
   $319 = $318 << 16 >> 16;
   $320 = ($317|0)<($319|0);
   if ($320) {
    $i$533 = $317;
   } else {
    break;
   }
  }
 }
 $321 = HEAP32[$tmask>>2]|0;
 $322 = $321 & 1;
 $323 = ($322|0)==(0);
 do {
  if (!($323)) {
   _sqlite3TableAffinity($171,$11,$191);
   _sqlite3CodeRowTrigger($pParse,$17,110,$pChanges,1,$11,$182,$onError,$labelContinue$0);
   $324 = ($38|0)==(0|0);
   if ($324) {
    (_sqlite3VdbeAddOp3($171,67,$iDataCur$0$lcssa,$labelContinue$0,$182)|0);
   } else {
    (_sqlite3VdbeAddOp4Int($171,65,$iDataCur$0$lcssa,$labelContinue$0,$regKey$1,$nKey$1)|0);
   }
   $325 = HEAP16[$49>>1]|0;
   $326 = ($325<<16>>16)>(0);
   if (!($326)) {
    break;
   }
   $327 = (($11) + 36|0);
   $378 = $325;$i$631 = 0;
   while(1) {
    $328 = (($56) + ($i$631<<2)|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = ($329|0)<(0);
    do {
     if ($330) {
      $331 = HEAP16[$327>>1]|0;
      $332 = $331 << 16 >> 16;
      $333 = ($i$631|0)==($332|0);
      if ($333) {
       $337 = $378;
       break;
      }
      $334 = (($i$631) + ($191))|0;
      _sqlite3ExprCodeGetColumnOfTable($171,$11,$iDataCur$0$lcssa,$i$631,$334);
      $$pre = HEAP16[$49>>1]|0;
      $337 = $$pre;
     } else {
      $337 = $378;
     }
    } while(0);
    $335 = (($i$631) + 1)|0;
    $336 = $337 << 16 >> 16;
    $338 = ($335|0)<($336|0);
    if ($338) {
     $378 = $337;$i$631 = $335;
    } else {
     break;
    }
   }
  }
 } while(0);
 do {
  if (!($20)) {
   HEAP32[$bReplace>>2] = 0;
   $339 = $onError&255;
   _sqlite3GenerateConstraintChecks($pParse,$11,$60,$iDataCur$0$lcssa,$28,$regNewRowid$0,$182,$134,$339,$labelContinue$0,$bReplace);
   $340 = ($141|0)!=(0);
   if ($340) {
    _sqlite3FkCheck($pParse,$11,$182,0,$56,$140);
   }
   $341 = HEAP32[$bReplace>>2]|0;
   $342 = $341 | $140;
   $343 = ($342|0)==(0);
   do {
    if ($343) {
     $j1$0 = 0;
    } else {
     $344 = ($38|0)==(0|0);
     if ($344) {
      $346 = (_sqlite3VdbeAddOp3($171,67,$iDataCur$0$lcssa,0,$182)|0);
      $j1$0 = $346;
      break;
     } else {
      $345 = (_sqlite3VdbeAddOp4Int($171,65,$iDataCur$0$lcssa,0,$regKey$1,$nKey$1)|0);
      $j1$0 = $345;
      break;
     }
    }
   } while(0);
   _sqlite3GenerateRowIndexDelete($pParse,$11,$iDataCur$0$lcssa,$28,$60);
   $347 = $141 | $140;
   $brmerge16$not = ($347|0)==(0);
   $348 = ($38|0)==(0|0);
   $or$cond17 = $brmerge16$not & $348;
   if (!($or$cond17)) {
    (_sqlite3VdbeAddOp2($171,74,$iDataCur$0$lcssa,0)|0);
   }
   if (!($343)) {
    _sqlite3VdbeJumpHere($171,$j1$0);
   }
   if ($340) {
    _sqlite3FkCheck($pParse,$11,0,$regNewRowid$0,$56,$140);
    _sqlite3CompleteInsertion($pParse,$11,$iDataCur$0$lcssa,$28,$regNewRowid$0,$60,1,0,0);
    _sqlite3FkActions($pParse,$11,$pChanges,$182,$56,$140);
    break;
   } else {
    _sqlite3CompleteInsertion($pParse,$11,$iDataCur$0$lcssa,$28,$regNewRowid$0,$60,1,0,0);
    break;
   }
  }
 } while(0);
 $349 = HEAP32[$229>>2]|0;
 $350 = $349 & 128;
 $351 = ($350|0)==(0);
 do {
  if (!($351)) {
   $352 = (($pParse) + 416|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ($353|0)==(0|0);
   if (!($354)) {
    break;
   }
   (_sqlite3VdbeAddOp2($171,37,$regRowCount$0,1)|0);
  }
 } while(0);
 _sqlite3CodeRowTrigger($pParse,$17,110,$pChanges,2,$11,$182,$onError,$labelContinue$0);
 do {
  if (!($256)) {
   $355 = ($38|0)==(0|0);
   if ($355) {
    (_sqlite3VdbeAddOp2($171,16,0,$labelContinue$0)|0);
    break;
   } else {
    _sqlite3VdbeResolveLabel($171,$labelContinue$0);
    (_sqlite3VdbeAddOp2($171,9,$iEph$0,$addrTop$0)|0);
    break;
   }
  }
 } while(0);
 _sqlite3VdbeResolveLabel($171,$238);
 $pIdx$328 = HEAP32[$35>>2]|0;
 $356 = ($pIdx$328|0)==(0|0);
 if (!($356)) {
  $i$729 = 0;$pIdx$330 = $pIdx$328;
  while(1) {
   $357 = (($i$729) + 1)|0;
   $358 = (($61) + ($357)|0);
   $359 = HEAP8[$358>>0]|0;
   $360 = ($359<<24>>24)==(0);
   if (!($360)) {
    $361 = (($i$729) + ($28))|0;
    (_sqlite3VdbeAddOp2($171,58,$361,0)|0);
   }
   $362 = (($pIdx$330) + 20|0);
   $pIdx$3 = HEAP32[$362>>2]|0;
   $363 = ($pIdx$3|0)==(0|0);
   if ($363) {
    break;
   } else {
    $i$729 = $357;$pIdx$330 = $pIdx$3;
   }
  }
 }
 $364 = ($iDataCur$0$lcssa|0)<($28|0);
 if ($364) {
  (_sqlite3VdbeAddOp2($171,58,$iDataCur$0$lcssa,0)|0);
 }
 $365 = HEAP8[$173>>0]|0;
 $366 = ($365<<24>>24)==(0);
 do {
  if ($366) {
   $367 = (($pParse) + 416|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ($368|0)==(0|0);
   if (!($369)) {
    break;
   }
   _sqlite3AutoincrementEnd($pParse);
  }
 } while(0);
 $370 = HEAP32[$229>>2]|0;
 $371 = $370 & 128;
 $372 = ($371|0)==(0);
 if ($372) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $373 = (($pParse) + 416|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = ($374|0)==(0|0);
 if (!($375)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 $376 = HEAP8[$173>>0]|0;
 $377 = ($376<<24>>24)==(0);
 if (!($377)) {
  $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
  _sqlite3AuthContextPop($sContext);
  _sqlite3DbFree($4,$aXRef$0);
  _sqlite3SrcListDelete($4,$$0);
  _sqlite3ExprListDelete($4,$pChanges);
  _sqlite3ExprDelete($4,$$01);
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($171,35,$regRowCount$0,1)|0);
 _sqlite3VdbeSetNumCols($171,1);
 _sqlite3VdbeSetColName($171,0,0,24560,0);
 $$0 = $pTabList;$$01 = $pWhere;$aXRef$0 = $56;
 _sqlite3AuthContextPop($sContext);
 _sqlite3DbFree($4,$aXRef$0);
 _sqlite3SrcListDelete($4,$$0);
 _sqlite3ExprListDelete($4,$pChanges);
 _sqlite3ExprDelete($4,$$01);
 STACKTOP = sp;return;
}
function _sqlite3Insert($pParse,$pTabList,$pSelect,$pColumn,$onError) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pSelect = $pSelect|0;
 $pColumn = $pColumn|0;
 $onError = $onError|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx12 = 0, $$idx12$val = 0, $$lobit = 0, $$lobit1 = 0, $$not = 0, $$not3 = 0, $$not5 = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aRegIdx$0 = 0, $aRegIdx$1 = 0, $aRegIdx$2 = 0, $addrCont$0 = 0, $addrInsTop$0 = 0, $appendFlag$1 = 0, $bIdListInOrder$0$ = 0, $bIdListInOrder$065 = 0, $bIdListInOrder$2 = 0;
 var $bIdListInOrder$3 = 0, $brmerge = 0, $dest = 0, $exitcond = 0, $i$074 = 0, $i$1$ipkColumn$0 = 0, $i$167 = 0, $i$250 = 0, $i$346 = 0, $i$441 = 0, $i$535 = 0, $i$626 = 0, $iDataCur = 0, $iIdxCur = 0, $idx$020 = 0, $ipkColumn$066 = 0, $ipkColumn$1 = 0, $ipkColumn$2 = 0, $ipkColumn$3 = 0, $ipkColumn$4 = 0;
 var $ipkColumn$4$lobit = 0, $isReplace = 0, $j$056 = 0, $j$057 = 0, $j$131 = 0, $j$2 = 0, $j$323 = 0, $j$4 = 0, $nColumn$0 = 0, $nColumn$0101 = 0, $nHidden$045 = 0, $nHidden$1 = 0, $nHidden$225 = 0, $nHidden$317 = 0, $nHidden$4 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0;
 var $pIdx$0 = 0, $pIdx$019 = 0, $pIdx$021 = 0, $pList$0 = 0, $pList$1 = 0, $regFromSelect$0 = 0, $regFromSelect$096 = 0, $regRowCount$0 = 0, $regRowCount$1 = 0, $regRowid$0 = 0, $sNC = 0, $srcTab$0 = 0, $srcTab$098 = 0, $tmask = 0, $useTempTable$1 = 0, $useTempTable$197 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iDataCur = sp + 108|0;
 $iIdxCur = sp + 104|0;
 $dest = sp + 84|0;
 $tmask = sp + 80|0;
 $sNC = sp + 48|0;
 $isReplace = sp + 40|0;
 HEAP32[$iDataCur>>2] = 0;
 HEAP32[$iIdxCur>>2] = 0;
 $0 = HEAP32[$pParse>>2]|0;
 ;HEAP32[$dest+0>>2]=0|0;HEAP32[$dest+4>>2]=0|0;HEAP32[$dest+8>>2]=0|0;HEAP32[$dest+12>>2]=0|0;HEAP32[$dest+16>>2]=0|0;
 $1 = (($pParse) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (($0) + 64|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = ($pSelect|0)==(0|0);
    if ($7) {
     $$0 = 0;$pList$0 = 0;
    } else {
     $8 = (($pSelect) + 6|0);
     $9 = HEAP16[$8>>1]|0;
     $10 = $9 & 128;
     $11 = ($10<<16>>16)==(0);
     if ($11) {
      $$0 = $pSelect;$pList$0 = 0;
     } else {
      $12 = (($pSelect) + 60|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)==(0|0);
      if ($14) {
       $15 = HEAP32[$pSelect>>2]|0;
       HEAP32[$pSelect>>2] = 0;
       _sqlite3SelectDelete($0,$pSelect);
       $$0 = 0;$pList$0 = $15;
      } else {
       $$0 = $pSelect;$pList$0 = 0;
      }
     }
    }
    $16 = (($pTabList) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
    } else {
     $19 = (_sqlite3SrcListLookup($pParse,$pTabList)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
     } else {
      $21 = (($19) + 68|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (_sqlite3SchemaToIndex($0,$22)|0);
      $24 = (($0) + 16|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($25) + ($23<<4)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$19>>2]|0;
      $29 = (_sqlite3AuthCheck($pParse,18,$28,0,$27)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = (($19) + 44|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = ($32&255) >>> 5;
       $$lobit = $33 & 1;
       $34 = (_sqlite3TriggersExist($pParse,$19,108,0,$tmask)|0);
       $35 = (($19) + 12|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)!=(0|0);
       $38 = (_sqlite3ViewGetColumnNames($pParse,$19)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = HEAP32[$tmask>>2]|0;
        $41 = (_sqlite3IsReadOnly($pParse,$19,$40)|0);
        $42 = ($41|0)==(0);
        if ($42) {
         $43 = (_sqlite3GetVdbe($pParse)|0);
         $44 = ($43|0)==(0|0);
         if ($44) {
          $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
         } else {
          $45 = (($pParse) + 18|0);
          $46 = HEAP8[$45>>0]|0;
          $47 = ($46<<24>>24)==(0);
          if ($47) {
           _sqlite3VdbeCountChanges($43);
          }
          $48 = ($$0|0)!=(0|0);
          $49 = ($34|0)!=(0|0);
          $$ = $48 | $49;
          $50 = $$&1;
          _sqlite3BeginWriteOperation($pParse,$50,$23);
          $51 = ($pColumn|0)==(0|0);
          if ($51) {
           $52 = (_xferOptimization($pParse,$19,$$0,$onError,$23)|0);
           $53 = ($52|0)==(0);
           if ($53) {
            label = 17;
           } else {
            $aRegIdx$1 = 0;$regRowCount$1 = 0;
           }
          } else {
           label = 17;
          }
          L20: do {
           if ((label|0) == 17) {
            $54 = (_autoIncBegin($pParse,$23,$19)|0);
            $55 = (($pParse) + 76|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = (($56) + 1)|0;
            $58 = (($19) + 38|0);
            $59 = HEAP16[$58>>1]|0;
            $60 = $59 << 16 >> 16;
            $61 = (($57) + ($60))|0;
            HEAP32[$55>>2] = $61;
            $62 = HEAP8[$31>>0]|0;
            $63 = $62 & 16;
            $64 = ($63<<24>>24)==(0);
            if ($64) {
             $regRowid$0 = $57;
            } else {
             $65 = (($56) + 2)|0;
             $66 = (($61) + 1)|0;
             HEAP32[$55>>2] = $66;
             $regRowid$0 = $65;
            }
            $67 = (($regRowid$0) + 1)|0;
            $68 = ($pColumn|0)!=(0|0);
            L25: do {
             if ($68) {
              $69 = (($pColumn) + 4|0);
              $70 = HEAP32[$69>>2]|0;
              $71 = ($70|0)>(0);
              if ($71) {
               $72 = HEAP32[$pColumn>>2]|0;
               $i$074 = 0;
               while(1) {
                $78 = ((($72) + ($i$074<<3)|0) + 4|0);
                HEAP32[$78>>2] = -1;
                $79 = (($i$074) + 1)|0;
                $74 = HEAP32[$69>>2]|0;
                $80 = ($79|0)<($74|0);
                if ($80) {
                 $i$074 = $79;
                } else {
                 break;
                }
               }
               $73 = ($74|0)>(0);
               if ($73) {
                $75 = ($$lobit<<24>>24)==(0);
                $76 = (($19) + 4|0);
                $77 = (($19) + 36|0);
                $bIdListInOrder$065 = 1;$i$167 = 0;$ipkColumn$066 = -1;
                while(1) {
                 $81 = ($59<<16>>16)>(0);
                 L34: do {
                  if ($81) {
                   $82 = HEAP32[$pColumn>>2]|0;
                   $83 = (($82) + ($i$167<<3)|0);
                   $84 = HEAP32[$83>>2]|0;
                   $85 = HEAP32[$76>>2]|0;
                   $j$057 = 0;
                   while(1) {
                    $88 = (($85) + (($j$057*24)|0)|0);
                    $89 = HEAP32[$88>>2]|0;
                    $90 = (_sqlite3_stricmp($84,$89)|0);
                    $91 = ($90|0)==(0);
                    $87 = (($j$057) + 1)|0;
                    if ($91) {
                     break;
                    }
                    $86 = ($87|0)<($60|0);
                    if ($86) {
                     $j$057 = $87;
                    } else {
                     $bIdListInOrder$2 = $bIdListInOrder$065;$ipkColumn$1 = $ipkColumn$066;$j$056 = $87;
                     break L34;
                    }
                   }
                   $92 = ((($82) + ($i$167<<3)|0) + 4|0);
                   HEAP32[$92>>2] = $j$057;
                   $93 = ($i$167|0)==($j$057|0);
                   $bIdListInOrder$0$ = $93 ? $bIdListInOrder$065 : 0;
                   $94 = HEAP16[$77>>1]|0;
                   $95 = $94 << 16 >> 16;
                   $96 = ($j$057|0)==($95|0);
                   $i$1$ipkColumn$0 = $96 ? $i$167 : $ipkColumn$066;
                   $bIdListInOrder$2 = $bIdListInOrder$0$;$ipkColumn$1 = $i$1$ipkColumn$0;$j$056 = $j$057;
                  } else {
                   $bIdListInOrder$2 = $bIdListInOrder$065;$ipkColumn$1 = $ipkColumn$066;$j$056 = 0;
                  }
                 } while(0);
                 $97 = ($j$056|0)<($60|0);
                 if ($97) {
                  $ipkColumn$2 = $ipkColumn$1;
                 } else {
                  $98 = HEAP32[$pColumn>>2]|0;
                  $99 = (($98) + ($i$167<<3)|0);
                  $100 = HEAP32[$99>>2]|0;
                  $101 = (_sqlite3IsRowid($100)|0);
                  $102 = ($101|0)!=(0);
                  $or$cond = $102 & $75;
                  if ($or$cond) {
                   $ipkColumn$2 = $i$167;
                  } else {
                   break;
                  }
                 }
                 $104 = (($i$167) + 1)|0;
                 $105 = HEAP32[$69>>2]|0;
                 $106 = ($104|0)<($105|0);
                 if ($106) {
                  $bIdListInOrder$065 = $bIdListInOrder$2;$i$167 = $104;$ipkColumn$066 = $ipkColumn$2;
                 } else {
                  $bIdListInOrder$3 = $bIdListInOrder$2;$ipkColumn$3 = $ipkColumn$2;
                  break L25;
                 }
                }
                HEAP32[$vararg_buffer>>2] = $pTabList;
                $vararg_ptr1 = (($vararg_buffer) + 4|0);
                HEAP32[$vararg_ptr1>>2] = 0;
                $vararg_ptr2 = (($vararg_buffer) + 8|0);
                HEAP32[$vararg_ptr2>>2] = $100;
                _sqlite3ErrorMsg($pParse,23456,$vararg_buffer);
                $103 = (($pParse) + 17|0);
                HEAP8[$103>>0] = 1;
                $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
                break L1;
               } else {
                $bIdListInOrder$3 = 1;$ipkColumn$3 = -1;
               }
              } else {
               $bIdListInOrder$3 = 1;$ipkColumn$3 = -1;
              }
             } else {
              $bIdListInOrder$3 = 1;$ipkColumn$3 = -1;
             }
            } while(0);
            do {
             if ($48) {
              $107 = HEAP32[$55>>2]|0;
              $108 = (($107) + 1)|0;
              HEAP32[$55>>2] = $108;
              $$idx11 = (($43) + 32|0);
              $$idx11$val = HEAP32[$$idx11>>2]|0;
              $109 = (_sqlite3VdbeCurrentAddr($$idx11$val)|0);
              $110 = (($109) + 1)|0;
              (_sqlite3VdbeAddOp3($43,20,$108,0,$110)|0);
              _sqlite3SelectDestInit($dest,9,$108);
              $111 = ($bIdListInOrder$3<<24>>24)!=(0);
              $112 = $111 ? $67 : 0;
              $113 = (($dest) + 8|0);
              HEAP32[$113>>2] = $112;
              $114 = HEAP16[$58>>1]|0;
              $115 = $114 << 16 >> 16;
              $116 = (($dest) + 12|0);
              HEAP32[$116>>2] = $115;
              $117 = (_sqlite3Select($pParse,$$0,$dest)|0);
              $118 = HEAP32[$113>>2]|0;
              $119 = ($117|0)==(0);
              if (!($119)) {
               $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
               break L1;
              }
              $120 = HEAP8[$4>>0]|0;
              $121 = ($120<<24>>24)==(0);
              if (!($121)) {
               $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
               break L1;
              }
              (_sqlite3VdbeAddOp1($43,21,$108)|0);
              _sqlite3VdbeJumpHere($43,$109);
              $122 = HEAP32[$$0>>2]|0;
              $123 = HEAP32[$122>>2]|0;
              $124 = ($34|0)==(0|0);
              if ($124) {
               $125 = (_readsTable($pParse,$23,$19)|0);
               $126 = ($125|0)==(0);
               if ($126) {
                $nColumn$0 = $123;$regFromSelect$0 = $118;$srcTab$0 = 0;$useTempTable$1 = 0;
                label = 45;
                break;
               }
              }
              $127 = (($pParse) + 72|0);
              $128 = HEAP32[$127>>2]|0;
              $129 = (($128) + 1)|0;
              HEAP32[$127>>2] = $129;
              $130 = (_sqlite3GetTempReg($pParse)|0);
              $131 = (_sqlite3GetTempReg($pParse)|0);
              (_sqlite3VdbeAddOp2($43,55,$128,$123)|0);
              $132 = (($dest) + 4|0);
              $133 = HEAP32[$132>>2]|0;
              $134 = (_sqlite3VdbeAddOp1($43,22,$133)|0);
              (_sqlite3VdbeAddOp3($43,48,$118,$123,$130)|0);
              (_sqlite3VdbeAddOp2($43,69,$128,$131)|0);
              (_sqlite3VdbeAddOp3($43,70,$128,$130,$131)|0);
              (_sqlite3VdbeAddOp2($43,16,0,$134)|0);
              _sqlite3VdbeJumpHere($43,$134);
              _sqlite3ReleaseTempReg($pParse,$130);
              _sqlite3ReleaseTempReg($pParse,$131);
              $nColumn$0 = $123;$regFromSelect$0 = $118;$srcTab$0 = $128;$useTempTable$1 = 1;
              label = 45;
             } else {
              ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
              HEAP32[$sNC>>2] = $pParse;
              $135 = ($pList$0|0)==(0|0);
              if ($135) {
               $ipkColumn$4 = $ipkColumn$3;$nColumn$0101 = 0;$regFromSelect$096 = 0;$srcTab$098 = -1;$useTempTable$197 = 0;
              } else {
               $136 = HEAP32[$pList$0>>2]|0;
               $137 = ($136|0)>(0);
               if ($137) {
                $138 = (($pList$0) + 8|0);
                $i$250 = 0;
                while(1) {
                 $141 = HEAP32[$138>>2]|0;
                 $142 = (($141) + (($i$250*20)|0)|0);
                 $143 = HEAP32[$142>>2]|0;
                 $144 = (_sqlite3ResolveExprNames($sNC,$143)|0);
                 $145 = ($144|0)==(0);
                 $140 = (($i$250) + 1)|0;
                 if (!($145)) {
                  $$1 = 0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
                  break L1;
                 }
                 $139 = ($140|0)<($136|0);
                 if ($139) {
                  $i$250 = $140;
                 } else {
                  $nColumn$0 = $136;$regFromSelect$0 = 0;$srcTab$0 = -1;$useTempTable$1 = 0;
                  label = 45;
                  break;
                 }
                }
               } else {
                $ipkColumn$4 = $ipkColumn$3;$nColumn$0101 = $136;$regFromSelect$096 = 0;$srcTab$098 = -1;$useTempTable$197 = 0;
               }
              }
             }
            } while(0);
            if ((label|0) == 45) {
             $146 = ($nColumn$0|0)>(0);
             $or$cond2 = $51 & $146;
             if ($or$cond2) {
              $147 = (($19) + 36|0);
              $148 = HEAP16[$147>>1]|0;
              $149 = $148 << 16 >> 16;
              $ipkColumn$4 = $149;$nColumn$0101 = $nColumn$0;$regFromSelect$096 = $regFromSelect$0;$srcTab$098 = $srcTab$0;$useTempTable$197 = $useTempTable$1;
             } else {
              $ipkColumn$4 = $ipkColumn$3;$nColumn$0101 = $nColumn$0;$regFromSelect$096 = $regFromSelect$0;$srcTab$098 = $srcTab$0;$useTempTable$197 = $useTempTable$1;
             }
            }
            $150 = HEAP8[$31>>0]|0;
            $151 = $150 & 16;
            $152 = ($151<<24>>24)==(0);
            if ($152) {
             $nHidden$1 = 0;
            } else {
             $153 = HEAP16[$58>>1]|0;
             $154 = ($153<<16>>16)>(0);
             if ($154) {
              $155 = (($19) + 4|0);
              $156 = HEAP32[$155>>2]|0;
              $157 = $153 << 16 >> 16;
              $i$346 = 0;$nHidden$045 = 0;
              while(1) {
               $158 = ((($156) + (($i$346*24)|0)|0) + 23|0);
               $159 = HEAP8[$158>>0]|0;
               $160 = ($159&255) >>> 1;
               $$lobit1 = $160 & 1;
               $161 = $$lobit1&255;
               $162 = (($161) + ($nHidden$045))|0;
               $163 = (($i$346) + 1)|0;
               $164 = ($163|0)<($157|0);
               if ($164) {
                $i$346 = $163;$nHidden$045 = $162;
               } else {
                $nHidden$1 = $162;
                break;
               }
              }
             } else {
              $nHidden$1 = 0;
             }
            }
            $$not3 = $51 ^ 1;
            $165 = ($nColumn$0101|0)==(0);
            $or$cond4 = $165 | $$not3;
            if (!($or$cond4)) {
             $166 = HEAP16[$58>>1]|0;
             $167 = $166 << 16 >> 16;
             $168 = (($167) - ($nHidden$1))|0;
             $169 = ($nColumn$0101|0)==($168|0);
             if (!($169)) {
              HEAP32[$vararg_buffer3>>2] = $pTabList;
              $vararg_ptr6 = (($vararg_buffer3) + 4|0);
              HEAP32[$vararg_ptr6>>2] = 0;
              $vararg_ptr7 = (($vararg_buffer3) + 8|0);
              HEAP32[$vararg_ptr7>>2] = $168;
              $vararg_ptr8 = (($vararg_buffer3) + 12|0);
              HEAP32[$vararg_ptr8>>2] = $nColumn$0101;
              _sqlite3ErrorMsg($pParse,23488,$vararg_buffer3);
              $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
              break L1;
             }
            }
            do {
             if ($68) {
              $170 = (($pColumn) + 4|0);
              $171 = HEAP32[$170>>2]|0;
              $172 = ($nColumn$0101|0)==($171|0);
              if ($172) {
               break;
              }
              HEAP32[$vararg_buffer9>>2] = $nColumn$0101;
              $vararg_ptr12 = (($vararg_buffer9) + 4|0);
              HEAP32[$vararg_ptr12>>2] = $171;
              _sqlite3ErrorMsg($pParse,23544,$vararg_buffer9);
              $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
              break L1;
             }
            } while(0);
            $173 = (($0) + 24|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = $174 & 128;
            $176 = ($175|0)==(0);
            if ($176) {
             $regRowCount$0 = 0;
            } else {
             $177 = HEAP32[$55>>2]|0;
             $178 = (($177) + 1)|0;
             HEAP32[$55>>2] = $178;
             (_sqlite3VdbeAddOp2($43,25,0,$178)|0);
             $regRowCount$0 = $178;
            }
            do {
             if ($37) {
              $aRegIdx$0 = 0;
             } else {
              $179 = (_sqlite3OpenTableAndIndices($pParse,$19,53,-1,0,$iDataCur,$iIdxCur)|0);
              $180 = $179 << 2;
              $181 = (($180) + 4)|0;
              $182 = (_sqlite3DbMallocRaw($0,$181)|0);
              $183 = ($182|0)==(0|0);
              if ($183) {
               $$1 = $$0;$aRegIdx$2 = $182;$pList$1 = $pList$0;
               break L1;
              }
              $184 = ($179|0)>(0);
              if ($184) {
               $i$441 = 0;
              } else {
               $aRegIdx$0 = $182;
               break;
              }
              while(1) {
               $185 = HEAP32[$55>>2]|0;
               $186 = (($185) + 1)|0;
               HEAP32[$55>>2] = $186;
               $187 = (($182) + ($i$441<<2)|0);
               HEAP32[$187>>2] = $186;
               $188 = (($i$441) + 1)|0;
               $exitcond = ($188|0)==($179|0);
               if ($exitcond) {
                $aRegIdx$0 = $182;
                break;
               } else {
                $i$441 = $188;
               }
              }
             }
            } while(0);
            $189 = ($useTempTable$197<<24>>24)!=(0);
            do {
             if ($189) {
              $190 = (_sqlite3VdbeAddOp1($43,105,$srcTab$098)|0);
              $$idx10 = (($43) + 32|0);
              $$idx10$val = HEAP32[$$idx10>>2]|0;
              $191 = (_sqlite3VdbeCurrentAddr($$idx10$val)|0);
              $addrCont$0 = $191;$addrInsTop$0 = $190;
             } else {
              if (!($48)) {
               $addrCont$0 = 0;$addrInsTop$0 = 0;
               break;
              }
              $192 = (($dest) + 4|0);
              $193 = HEAP32[$192>>2]|0;
              $194 = (_sqlite3VdbeAddOp1($43,22,$193)|0);
              $addrCont$0 = $194;$addrInsTop$0 = $194;
             }
            } while(0);
            $$idx12 = (($43) + 24|0);
            $$idx12$val = HEAP32[$$idx12>>2]|0;
            $195 = (_sqlite3VdbeMakeLabel($$idx12$val)|0);
            $196 = HEAP32[$tmask>>2]|0;
            $197 = $196 & 1;
            $198 = ($197|0)==(0);
            if (!($198)) {
             $199 = HEAP16[$58>>1]|0;
             $200 = $199 << 16 >> 16;
             $201 = (($200) + 1)|0;
             $202 = (_sqlite3GetTempRange($pParse,$201)|0);
             $203 = ($ipkColumn$4|0)<(0);
             if ($203) {
              (_sqlite3VdbeAddOp2($43,25,-1,$202)|0);
             } else {
              if ($189) {
               (_sqlite3VdbeAddOp3($43,46,$srcTab$098,$ipkColumn$4,$202)|0);
              } else {
               $204 = (($pList$0) + 8|0);
               $205 = HEAP32[$204>>2]|0;
               $206 = (($205) + (($ipkColumn$4*20)|0)|0);
               $207 = HEAP32[$206>>2]|0;
               _sqlite3ExprCode($pParse,$207,$202);
              }
              $208 = (_sqlite3VdbeAddOp1($43,77,$202)|0);
              (_sqlite3VdbeAddOp2($43,25,-1,$202)|0);
              _sqlite3VdbeJumpHere($43,$208);
              (_sqlite3VdbeAddOp1($43,38,$202)|0);
             }
             $209 = HEAP16[$58>>1]|0;
             $210 = ($209<<16>>16)>(0);
             if ($210) {
              $$not5 = $189 ^ 1;
              $211 = ($pList$0|0)==(0|0);
              $or$cond6 = $211 & $$not5;
              $212 = (($19) + 4|0);
              $213 = (($202) + 1)|0;
              $214 = (($pColumn) + 4|0);
              $215 = (($pList$0) + 8|0);
              $i$535 = 0;
              while(1) {
               L105: do {
                if ($51) {
                 $j$2 = $i$535;
                } else {
                 $216 = HEAP32[$214>>2]|0;
                 $217 = ($216|0)>(0);
                 if (!($217)) {
                  $j$2 = 0;
                  break;
                 }
                 $218 = HEAP32[$pColumn>>2]|0;
                 $j$131 = 0;
                 while(1) {
                  $221 = ((($218) + ($j$131<<3)|0) + 4|0);
                  $222 = HEAP32[$221>>2]|0;
                  $223 = ($222|0)==($i$535|0);
                  $220 = (($j$131) + 1)|0;
                  if ($223) {
                   $j$2 = $j$131;
                   break L105;
                  }
                  $219 = ($220|0)<($216|0);
                  if ($219) {
                   $j$131 = $220;
                  } else {
                   $j$2 = $220;
                   break;
                  }
                 }
                }
               } while(0);
               do {
                if ($or$cond6) {
                 label = 84;
                } else {
                 if ($68) {
                  $224 = HEAP32[$214>>2]|0;
                  $225 = ($j$2|0)<($224|0);
                  if (!($225)) {
                   label = 84;
                   break;
                  }
                 }
                 if ($189) {
                  $230 = (($213) + ($i$535))|0;
                  (_sqlite3VdbeAddOp3($43,46,$srcTab$098,$j$2,$230)|0);
                  break;
                 } else {
                  $231 = HEAP32[$215>>2]|0;
                  $232 = (($231) + (($j$2*20)|0)|0);
                  $233 = HEAP32[$232>>2]|0;
                  $234 = (($213) + ($i$535))|0;
                  _sqlite3ExprCodeAndCache($pParse,$233,$234);
                  break;
                 }
                }
               } while(0);
               if ((label|0) == 84) {
                label = 0;
                $226 = HEAP32[$212>>2]|0;
                $227 = ((($226) + (($i$535*24)|0)|0) + 4|0);
                $228 = HEAP32[$227>>2]|0;
                $229 = (($213) + ($i$535))|0;
                _sqlite3ExprCode($pParse,$228,$229);
               }
               $235 = (($i$535) + 1)|0;
               $236 = HEAP16[$58>>1]|0;
               $237 = $236 << 16 >> 16;
               $238 = ($235|0)<($237|0);
               if ($238) {
                $i$535 = $235;
               } else {
                $372 = $236;
                break;
               }
              }
             } else {
              $372 = $209;
             }
             if ($37) {
              $241 = $372;
             } else {
              $239 = (($202) + 1)|0;
              _sqlite3TableAffinity($43,$19,$239);
              $$pre = HEAP16[$58>>1]|0;
              $241 = $$pre;
             }
             $240 = $241 << 16 >> 16;
             $242 = (($202) + -1)|0;
             $243 = (($242) - ($240))|0;
             _sqlite3CodeRowTrigger($pParse,$34,108,0,1,$19,$243,$onError,$195);
             $244 = HEAP16[$58>>1]|0;
             $245 = $244 << 16 >> 16;
             $246 = (($245) + 1)|0;
             _sqlite3ReleaseTempRange($pParse,$202,$246);
            }
            do {
             if (!($37)) {
              $247 = HEAP8[$31>>0]|0;
              $248 = $247 & 16;
              $249 = ($248<<24>>24)==(0);
              if (!($249)) {
               (_sqlite3VdbeAddOp2($43,28,0,$57)|0);
              }
              $250 = ($ipkColumn$4|0)>(-1);
              L133: do {
               if ($250) {
                do {
                 if ($189) {
                  (_sqlite3VdbeAddOp3($43,46,$srcTab$098,$ipkColumn$4,$regRowid$0)|0);
                 } else {
                  if ($48) {
                   $251 = (($ipkColumn$4) + ($regFromSelect$096))|0;
                   (_sqlite3VdbeAddOp2($43,33,$251,$regRowid$0)|0);
                   break;
                  }
                  $252 = (($pList$0) + 8|0);
                  $253 = HEAP32[$252>>2]|0;
                  $254 = (($253) + (($ipkColumn$4*20)|0)|0);
                  $255 = HEAP32[$254>>2]|0;
                  _sqlite3ExprCode($pParse,$255,$regRowid$0);
                  $256 = (_sqlite3VdbeGetOp($43,-1)|0);
                  $257 = ($256|0)==(0|0);
                  if ($257) {
                   break;
                  }
                  $258 = HEAP8[$256>>0]|0;
                  $259 = ($258<<24>>24)==(28);
                  if (!($259)) {
                   break;
                  }
                  $260 = HEAP8[$31>>0]|0;
                  $261 = $260 & 16;
                  $262 = ($261<<24>>24)==(0);
                  if (!($262)) {
                   break;
                  }
                  HEAP8[$256>>0] = 69;
                  $263 = HEAP32[$iDataCur>>2]|0;
                  $264 = (($256) + 4|0);
                  HEAP32[$264>>2] = $263;
                  $265 = (($256) + 8|0);
                  HEAP32[$265>>2] = $regRowid$0;
                  $266 = (($256) + 12|0);
                  HEAP32[$266>>2] = $54;
                  $appendFlag$1 = 1;
                  break L133;
                 }
                } while(0);
                $267 = HEAP8[$31>>0]|0;
                $268 = $267 & 16;
                $269 = ($268<<24>>24)==(0);
                if ($269) {
                 $270 = (_sqlite3VdbeAddOp1($43,77,$regRowid$0)|0);
                 $271 = HEAP32[$iDataCur>>2]|0;
                 (_sqlite3VdbeAddOp3($43,69,$271,$regRowid$0,$54)|0);
                 _sqlite3VdbeJumpHere($43,$270);
                } else {
                 $$idx = (($43) + 32|0);
                 $$idx$val = HEAP32[$$idx>>2]|0;
                 $272 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
                 $273 = (($272) + 2)|0;
                 (_sqlite3VdbeAddOp2($43,76,$regRowid$0,$273)|0);
                }
                (_sqlite3VdbeAddOp1($43,38,$regRowid$0)|0);
                $appendFlag$1 = 0;
               } else {
                $274 = HEAP8[$31>>0]|0;
                $275 = $274 & 16;
                $276 = $275 | $$lobit;
                $277 = ($276<<24>>24)==(0);
                if ($277) {
                 $278 = HEAP32[$iDataCur>>2]|0;
                 (_sqlite3VdbeAddOp3($43,69,$278,$regRowid$0,$54)|0);
                 $appendFlag$1 = 1;
                 break;
                } else {
                 (_sqlite3VdbeAddOp2($43,28,0,$regRowid$0)|0);
                 $appendFlag$1 = 0;
                 break;
                }
               }
              } while(0);
              _autoIncStep($pParse,$54,$regRowid$0);
              $279 = HEAP16[$58>>1]|0;
              $280 = ($279<<16>>16)>(0);
              if ($280) {
               $281 = (($19) + 36|0);
               $282 = (($19) + 4|0);
               $283 = (($pColumn) + 4|0);
               $284 = ($regFromSelect$096|0)==($67|0);
               $285 = (($pList$0) + 8|0);
               $i$626 = 0;$nHidden$225 = 0;
               while(1) {
                $286 = (($i$626) + ($67))|0;
                $287 = HEAP16[$281>>1]|0;
                $288 = $287 << 16 >> 16;
                $289 = ($i$626|0)==($288|0);
                L158: do {
                 if ($289) {
                  (_sqlite3VdbeAddOp1($43,29,$286)|0);
                  $nHidden$4 = $nHidden$225;
                 } else {
                  L161: do {
                   if ($51) {
                    $293 = HEAP32[$282>>2]|0;
                    $294 = ((($293) + (($i$626*24)|0)|0) + 23|0);
                    $295 = HEAP8[$294>>0]|0;
                    $296 = $295 & 2;
                    $297 = ($296<<24>>24)==(0);
                    if ($297) {
                     $299 = (($i$626) - ($nHidden$225))|0;
                     $j$4 = $299;
                     label = 123;
                     break;
                    } else {
                     $298 = (($nHidden$225) + 1)|0;
                     $nHidden$317 = $298;
                     break;
                    }
                   } else {
                    $290 = HEAP32[$283>>2]|0;
                    $291 = ($290|0)>(0);
                    if (!($291)) {
                     $j$4 = 0;
                     label = 123;
                     break;
                    }
                    $292 = HEAP32[$pColumn>>2]|0;
                    $j$323 = 0;
                    while(1) {
                     $302 = ((($292) + ($j$323<<3)|0) + 4|0);
                     $303 = HEAP32[$302>>2]|0;
                     $304 = ($303|0)==($i$626|0);
                     $301 = (($j$323) + 1)|0;
                     if ($304) {
                      $j$4 = $j$323;
                      label = 123;
                      break L161;
                     }
                     $300 = ($301|0)<($290|0);
                     if ($300) {
                      $j$323 = $301;
                     } else {
                      $j$4 = $301;
                      label = 123;
                      break;
                     }
                    }
                   }
                  } while(0);
                  do {
                   if ((label|0) == 123) {
                    label = 0;
                    $305 = ($j$4|0)<(0);
                    $or$cond8 = $305 | $165;
                    if ($or$cond8) {
                     $nHidden$317 = $nHidden$225;
                     break;
                    }
                    if ($68) {
                     $306 = HEAP32[$283>>2]|0;
                     $307 = ($j$4|0)<($306|0);
                     if (!($307)) {
                      $nHidden$317 = $nHidden$225;
                      break;
                     }
                    }
                    if ($189) {
                     (_sqlite3VdbeAddOp3($43,46,$srcTab$098,$j$4,$286)|0);
                     $nHidden$4 = $nHidden$225;
                     break L158;
                    }
                    if (!($48)) {
                     $312 = HEAP32[$285>>2]|0;
                     $313 = (($312) + (($j$4*20)|0)|0);
                     $314 = HEAP32[$313>>2]|0;
                     _sqlite3ExprCode($pParse,$314,$286);
                     $nHidden$4 = $nHidden$225;
                     break L158;
                    }
                    if ($284) {
                     $nHidden$4 = $nHidden$225;
                     break L158;
                    }
                    $311 = (($j$4) + ($regFromSelect$096))|0;
                    (_sqlite3VdbeAddOp2($43,34,$311,$286)|0);
                    $nHidden$4 = $nHidden$225;
                    break L158;
                   }
                  } while(0);
                  $308 = HEAP32[$282>>2]|0;
                  $309 = ((($308) + (($i$626*24)|0)|0) + 4|0);
                  $310 = HEAP32[$309>>2]|0;
                  _sqlite3ExprCodeFactorable($pParse,$310,$286);
                  $nHidden$4 = $nHidden$317;
                 }
                } while(0);
                $315 = (($i$626) + 1)|0;
                $316 = HEAP16[$58>>1]|0;
                $317 = $316 << 16 >> 16;
                $318 = ($315|0)<($317|0);
                if ($318) {
                 $i$626 = $315;$nHidden$225 = $nHidden$4;
                } else {
                 break;
                }
               }
              }
              $319 = HEAP8[$31>>0]|0;
              $320 = $319 & 16;
              $321 = ($320<<24>>24)==(0);
              if ($321) {
               $329 = HEAP32[$iDataCur>>2]|0;
               $330 = HEAP32[$iIdxCur>>2]|0;
               $ipkColumn$4$lobit = $ipkColumn$4 >>> 31;
               $331 = $ipkColumn$4$lobit&255;
               $$not = $331 ^ 1;
               $332 = $onError&255;
               _sqlite3GenerateConstraintChecks($pParse,$19,$aRegIdx$0,$329,$330,$57,0,$$not,$332,$195,$isReplace);
               _sqlite3FkCheck($pParse,$19,0,$57,0,0);
               $333 = HEAP32[$iDataCur>>2]|0;
               $334 = HEAP32[$iIdxCur>>2]|0;
               $335 = HEAP32[$isReplace>>2]|0;
               $336 = ($335|0)==(0);
               $337 = $336&1;
               _sqlite3CompleteInsertion($pParse,$19,$333,$334,$57,$aRegIdx$0,0,$appendFlag$1,$337);
               break;
              } else {
               $322 = (_sqlite3GetVTable($0,$19)|0);
               _sqlite3VtabMakeWritable($pParse,$19);
               $323 = HEAP16[$58>>1]|0;
               $324 = $323 << 16 >> 16;
               $325 = (($324) + 2)|0;
               (_sqlite3VdbeAddOp4($43,15,1,$325,$57,$322,-10)|0);
               $326 = ($onError|0)==(10);
               $327 = $onError&255;
               $328 = $326 ? 2 : $327;
               _sqlite3VdbeChangeP5($43,$328);
               _sqlite3MayAbort($pParse);
               break;
              }
             }
            } while(0);
            $338 = HEAP32[$173>>2]|0;
            $339 = $338 & 128;
            $340 = ($339|0)==(0);
            if (!($340)) {
             (_sqlite3VdbeAddOp2($43,37,$regRowCount$0,1)|0);
            }
            $341 = ($34|0)==(0|0);
            if (!($341)) {
             $342 = (($regRowid$0) + -1)|0;
             $343 = HEAP16[$58>>1]|0;
             $344 = $343 << 16 >> 16;
             $345 = (($342) - ($344))|0;
             _sqlite3CodeRowTrigger($pParse,$34,108,0,2,$19,$345,$onError,$195);
            }
            _sqlite3VdbeResolveLabel($43,$195);
            do {
             if ($189) {
              (_sqlite3VdbeAddOp2($43,9,$srcTab$098,$addrCont$0)|0);
              _sqlite3VdbeJumpHere($43,$addrInsTop$0);
              (_sqlite3VdbeAddOp1($43,58,$srcTab$098)|0);
             } else {
              if (!($48)) {
               break;
              }
              (_sqlite3VdbeAddOp2($43,16,0,$addrCont$0)|0);
              _sqlite3VdbeJumpHere($43,$addrInsTop$0);
             }
            } while(0);
            $346 = HEAP8[$31>>0]|0;
            $347 = $346 & 16;
            $$not9 = ($347<<24>>24)!=(0);
            $brmerge = $$not9 | $37;
            if ($brmerge) {
             $aRegIdx$1 = $aRegIdx$0;$regRowCount$1 = $regRowCount$0;
             break;
            }
            $348 = HEAP32[$iDataCur>>2]|0;
            $349 = HEAP32[$iIdxCur>>2]|0;
            $350 = ($348|0)<($349|0);
            if ($350) {
             (_sqlite3VdbeAddOp1($43,58,$348)|0);
            }
            $351 = (($19) + 8|0);
            $pIdx$019 = HEAP32[$351>>2]|0;
            $352 = ($pIdx$019|0)==(0|0);
            if ($352) {
             $aRegIdx$1 = $aRegIdx$0;$regRowCount$1 = $regRowCount$0;
             break;
            } else {
             $idx$020 = 0;$pIdx$021 = $pIdx$019;
            }
            while(1) {
             $353 = HEAP32[$iIdxCur>>2]|0;
             $354 = (($353) + ($idx$020))|0;
             (_sqlite3VdbeAddOp1($43,58,$354)|0);
             $355 = (($pIdx$021) + 20|0);
             $pIdx$0 = HEAP32[$355>>2]|0;
             $356 = ($pIdx$0|0)==(0|0);
             if ($356) {
              $aRegIdx$1 = $aRegIdx$0;$regRowCount$1 = $regRowCount$0;
              break L20;
             }
             $357 = (($idx$020) + 1)|0;
             $idx$020 = $357;$pIdx$021 = $pIdx$0;
            }
           }
          } while(0);
          $358 = HEAP8[$45>>0]|0;
          $359 = ($358<<24>>24)==(0);
          if ($359) {
           $360 = (($pParse) + 416|0);
           $361 = HEAP32[$360>>2]|0;
           $362 = ($361|0)==(0|0);
           if ($362) {
            _sqlite3AutoincrementEnd($pParse);
           }
          }
          $363 = (($0) + 24|0);
          $364 = HEAP32[$363>>2]|0;
          $365 = $364 & 128;
          $366 = ($365|0)==(0);
          if ($366) {
           $$1 = $$0;$aRegIdx$2 = $aRegIdx$1;$pList$1 = $pList$0;
          } else {
           $367 = HEAP8[$45>>0]|0;
           $368 = ($367<<24>>24)==(0);
           if ($368) {
            $369 = (($pParse) + 416|0);
            $370 = HEAP32[$369>>2]|0;
            $371 = ($370|0)==(0|0);
            if ($371) {
             (_sqlite3VdbeAddOp2($43,35,$regRowCount$1,1)|0);
             _sqlite3VdbeSetNumCols($43,1);
             _sqlite3VdbeSetColName($43,0,0,23576,0);
             $$1 = $$0;$aRegIdx$2 = $aRegIdx$1;$pList$1 = $pList$0;
            } else {
             $$1 = $$0;$aRegIdx$2 = $aRegIdx$1;$pList$1 = $pList$0;
            }
           } else {
            $$1 = $$0;$aRegIdx$2 = $aRegIdx$1;$pList$1 = $pList$0;
           }
          }
         }
        } else {
         $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
        }
       } else {
        $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
       }
      } else {
       $$1 = $$0;$aRegIdx$2 = 0;$pList$1 = $pList$0;
      }
     }
    }
   } else {
    $$1 = $pSelect;$aRegIdx$2 = 0;$pList$1 = 0;
   }
  } else {
   $$1 = $pSelect;$aRegIdx$2 = 0;$pList$1 = 0;
  }
 } while(0);
 _sqlite3SrcListDelete($0,$pTabList);
 _sqlite3ExprListDelete($0,$pList$1);
 _sqlite3SelectDelete($0,$$1);
 _sqlite3IdListDelete($0,$pColumn);
 _sqlite3DbFree($0,$aRegIdx$2);
 STACKTOP = sp;return;
}
function _sqlite3IdListAppend($db,$pList,$pToken) {
 $db = $db|0;
 $pList = $pList|0;
 $pToken = $pToken|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  $1 = (_sqlite3DbMallocZero($db,8)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $pList;
 }
 $3 = HEAP32[$$01>>2]|0;
 $4 = (($$01) + 4|0);
 $5 = (_sqlite3ArrayAllocate($db,$3,8,$4,$i)|0);
 HEAP32[$$01>>2] = $5;
 $6 = HEAP32[$i>>2]|0;
 $7 = ($6|0)<(0);
 if ($7) {
  _sqlite3IdListDelete($db,$$01);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (_sqlite3NameFromToken($db,$pToken)|0);
  $9 = HEAP32[$$01>>2]|0;
  $10 = (($9) + ($6<<3)|0);
  HEAP32[$10>>2] = $8;
  $$0 = $$01;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _spanSet($pOut,$pStart$0$0$val,$pEnd) {
 $pOut = $pOut|0;
 $pStart$0$0$val = $pStart$0$0$val|0;
 $pEnd = $pEnd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pOut) + 4|0);
 HEAP32[$0>>2] = $pStart$0$0$val;
 $1 = (($pEnd) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$pEnd>>2]|0;
 $4 = (($3) + ($2)|0);
 $5 = (($pOut) + 8|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _sqlite3ExprAssignVarNumber($pParse,$pExpr) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1$02 = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $x$0 = 0, $x$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $i = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pExpr|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($pExpr) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (($pParse) + 444|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$7>>2] = $9;
   $10 = $9&65535;
   $11 = (($pExpr) + 32|0);
   HEAP16[$11>>1] = $10;
  } else {
   $12 = (_sqlite3Strlen30($3)|0);
   $13 = HEAP8[$3>>0]|0;
   $14 = ($13<<24>>24)==(63);
   L6: do {
    if ($14) {
     $20 = (($12) + -1)|0;
     $21 = (_sqlite3Atoi64($4,$i,$20,1)|0);
     $22 = ($21|0)!=(0);
     $23 = $i;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) + 4)|0;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $29 = $25&65535;
     $30 = (($pExpr) + 32|0);
     HEAP16[$30>>1] = $29;
     $31 = ($28|0)<(0);
     $32 = ($28|0)==(0);
     $33 = ($25>>>0)<(1);
     $34 = $32 & $33;
     $35 = $31 | $34;
     $or$cond = $22 | $35;
     if ($or$cond) {
      label = 9;
     } else {
      $36 = (($0) + 124|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)<(0);
      $39 = $38 << 31 >> 31;
      $40 = ($28|0)>($39|0);
      $41 = ($28|0)==($39|0);
      $42 = ($25>>>0)>($37>>>0);
      $43 = $41 & $42;
      $44 = $40 | $43;
      if ($44) {
       label = 9;
      } else {
       $x$0 = $29;
      }
     }
     if ((label|0) == 9) {
      $45 = (($0) + 124|0);
      $46 = HEAP32[$45>>2]|0;
      HEAP32[$vararg_buffer>>2] = $46;
      _sqlite3ErrorMsg($pParse,23384,$vararg_buffer);
      $x$0 = 0;
     }
     $47 = (($pParse) + 444|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)<(0);
     $50 = $49 << 31 >> 31;
     $51 = ($28|0)>($50|0);
     $52 = ($28|0)==($50|0);
     $53 = ($25>>>0)>($48>>>0);
     $54 = $52 & $53;
     $55 = $51 | $54;
     if ($55) {
      HEAP32[$47>>2] = $25;
      $x$2 = $x$0;
     } else {
      $x$2 = $x$0;
     }
    } else {
     $15 = (($pParse) + 448|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)>(0);
     L8: do {
      if ($17) {
       $18 = (($pParse) + 476|0);
       $19 = HEAP32[$18>>2]|0;
       $57 = 0;$i1$02 = 0;
       while(1) {
        $56 = (($19) + ($57<<2)|0);
        $58 = HEAP32[$56>>2]|0;
        $59 = ($58|0)==(0|0);
        if (!($59)) {
         $60 = (_strcmp($58,$3)|0);
         $61 = ($60|0)==(0);
         if ($61) {
          break;
         }
        }
        $62 = (($i1$02) + 1)<<16>>16;
        $63 = $62 << 16 >> 16;
        $64 = ($63|0)<($16|0);
        if ($64) {
         $57 = $63;$i1$02 = $62;
        } else {
         label = 16;
         break L8;
        }
       }
       $65 = (($57) + 1)|0;
       $66 = $65&65535;
       $67 = (($pExpr) + 32|0);
       HEAP16[$67>>1] = $66;
       $68 = ($66<<16>>16)==(0);
       if ($68) {
        $$pre$phi8Z2D = $67;
       } else {
        $x$2 = $66;
        break L6;
       }
      } else {
       label = 16;
      }
     } while(0);
     if ((label|0) == 16) {
      $$pre7 = (($pExpr) + 32|0);
      $$pre$phi8Z2D = $$pre7;
     }
     $69 = (($pParse) + 444|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + 1)|0;
     HEAP32[$69>>2] = $71;
     $72 = $71&65535;
     HEAP16[$$pre$phi8Z2D>>1] = $72;
     $x$2 = $72;
    }
   } while(0);
   $73 = $x$2 << 16 >> 16;
   $74 = ($x$2<<16>>16)>(0);
   if ($74) {
    $75 = (($pParse) + 448|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($73|0)>($76|0);
    do {
     if ($77) {
      $78 = (($pParse) + 476|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = $73 << 2;
      $81 = (_sqlite3DbRealloc($0,$79,$80)|0);
      $82 = ($81|0)==(0|0);
      if ($82) {
       STACKTOP = sp;return;
      } else {
       HEAP32[$78>>2] = $81;
       $83 = HEAP32[$75>>2]|0;
       $84 = (($81) + ($83<<2)|0);
       $85 = (($73) - ($83))|0;
       $86 = $85 << 2;
       _memset(($84|0),0,($86|0))|0;
       HEAP32[$75>>2] = $73;
       break;
      }
     }
    } while(0);
    $87 = HEAP8[$3>>0]|0;
    $88 = ($87<<24>>24)==(63);
    if ($88) {
     $89 = (($73) + -1)|0;
     $90 = (($pParse) + 476|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($91) + ($89<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(0|0);
     if ($94) {
      $$pre$phiZ2D = $89;$97 = $91;
     } else {
      break;
     }
    } else {
     $$phi$trans$insert = (($pParse) + 476|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$pre6 = (($73) + -1)|0;
     $$pre$phiZ2D = $$pre6;$97 = $$pre;
    }
    $95 = (($pParse) + 476|0);
    $96 = (($97) + ($$pre$phiZ2D<<2)|0);
    $98 = HEAP32[$96>>2]|0;
    _sqlite3DbFree($0,$98);
    $99 = (_sqlite3DbStrNDup($0,$3,$12)|0);
    $100 = HEAP32[$95>>2]|0;
    $101 = (($100) + ($$pre$phiZ2D<<2)|0);
    HEAP32[$101>>2] = $99;
   }
  }
 } while(0);
 $102 = (($pParse) + 68|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 $105 = (($pParse) + 444|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($0) + 124|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($106|0)>($108|0);
 if (!($109)) {
  STACKTOP = sp;return;
 }
 _sqlite3ErrorMsg($pParse,23432,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _sqlite3ExprAddCollateToken($pParse,$pExpr,$pCollName) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $pCollName = $pCollName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCollName) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $pExpr;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$pParse>>2]|0;
 $4 = (_sqlite3ExprAlloc($3,95,$pCollName,1)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = $pExpr;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($4) + 12|0);
 HEAP32[$6>>2] = $pExpr;
 $7 = (($4) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 4352;
 HEAP32[$7>>2] = $9;
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprFunction($pParse,$pList,$pToken) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 $pToken = $pToken|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3ExprAlloc($0,153,$pToken,1)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _sqlite3ExprListDelete($0,$pList);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (($1) + 20|0);
  HEAP32[$3>>2] = $pList;
  _sqlite3ExprSetHeight($pParse,$1);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _spanBinaryExpr($pOut,$pParse,$op,$pLeft,$pRight) {
 $pOut = $pOut|0;
 $pParse = $pParse|0;
 $op = $op|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pLeft>>2]|0;
 $1 = HEAP32[$pRight>>2]|0;
 $2 = (_sqlite3PExpr($pParse,$op,$0,$1,0)|0);
 HEAP32[$pOut>>2] = $2;
 $3 = (($pLeft) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pOut) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (($pRight) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pOut) + 8|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _spanUnaryPostfix($pOut,$pParse,$op,$pOperand,$pPostOp) {
 $pOut = $pOut|0;
 $pParse = $pParse|0;
 $op = $op|0;
 $pOperand = $pOperand|0;
 $pPostOp = $pPostOp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pOperand>>2]|0;
 $1 = (_sqlite3PExpr($pParse,$op,$0,0,0)|0);
 HEAP32[$pOut>>2] = $1;
 $2 = (($pOperand) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pOut) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (($pPostOp) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$pPostOp>>2]|0;
 $8 = (($7) + ($6)|0);
 $9 = (($pOut) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _binaryToUnaryIfNull($pParse$0$0$val,$pY,$pA,$op) {
 $pParse$0$0$val = $pParse$0$0$val|0;
 $pY = $pY|0;
 $pA = $pA|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse$0$0$val) + 64|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$pY>>0]|0;
 $4 = ($3<<24>>24)==(101);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $op&255;
 HEAP8[$pA>>0] = $5;
 $6 = (($pA) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _sqlite3ExprDelete($pParse$0$0$val,$7);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _spanUnaryPrefix($pOut,$pParse,$op,$pOperand,$pPreOp) {
 $pOut = $pOut|0;
 $pParse = $pParse|0;
 $op = $op|0;
 $pOperand = $pOperand|0;
 $pPreOp = $pPreOp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pOperand>>2]|0;
 $1 = (_sqlite3PExpr($pParse,$op,$0,0,0)|0);
 HEAP32[$pOut>>2] = $1;
 $2 = HEAP32[$pPreOp>>2]|0;
 $3 = (($pOut) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (($pOperand) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pOut) + 8|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _sqlite3ExprSetHeight($pParse,$p) {
 $pParse = $pParse|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _exprSetHeight($p);
 $0 = (($p) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 (_sqlite3ExprCheckHeight($pParse,$1)|0);
 STACKTOP = sp;return;
}
function _sqlite3DropIndex($pParse,$pName,$ifExists) {
 $pParse = $pParse|0;
 $pName = $pName|0;
 $ifExists = $ifExists|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $4 = (_sqlite3ReadSchema($pParse)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $6 = (($pName) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pName) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3FindIndex($0,$7,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ($ifExists|0)==(0);
  if ($12) {
   HEAP32[$vararg_buffer>>2] = $pName;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 0;
   _sqlite3ErrorMsg($pParse,23144,$vararg_buffer);
  } else {
   _sqlite3CodeVerifyNamedSchema($pParse,$9);
  }
  $13 = (($pParse) + 17|0);
  HEAP8[$13>>0] = 1;
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $14 = (($10) + 55|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 3;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  HEAP32[$vararg_buffer2>>2] = 0;
  _sqlite3ErrorMsg($pParse,23168,$vararg_buffer2);
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $18 = (($10) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_sqlite3SchemaToIndex($0,$19)|0);
 $21 = (($10) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($0) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($20<<4)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($20|0)==(1);
 $28 = $27 ? 15056 : 15080;
 $29 = (_sqlite3AuthCheck($pParse,9,$28,0,$26)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $31 = ($20|0)==(0);
 $$ = $31 ? 10 : 12;
 $32 = HEAP32[$10>>2]|0;
 $33 = HEAP32[$22>>2]|0;
 $34 = (_sqlite3AuthCheck($pParse,$$,$32,$33,$26)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $36 = (_sqlite3GetVdbe($pParse)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 _sqlite3BeginWriteOperation($pParse,1,$20);
 $38 = HEAP32[$23>>2]|0;
 $39 = (($38) + ($20<<4)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $40;
 $vararg_ptr8 = (($vararg_buffer5) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $28;
 $vararg_ptr9 = (($vararg_buffer5) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $41;
 _sqlite3NestedParse($pParse,23248,$vararg_buffer5);
 $42 = HEAP32[$10>>2]|0;
 _sqlite3ClearStatTables($pParse,$20,18312,$42);
 _sqlite3ChangeCookie($pParse,$20);
 $43 = (($10) + 44|0);
 $44 = HEAP32[$43>>2]|0;
 _destroyRootPage($pParse,$44,$20);
 $45 = HEAP32[$10>>2]|0;
 (_sqlite3VdbeAddOp4($36,121,$20,0,0,$45,0)|0);
 _sqlite3SrcListDelete($0,$pName);
 STACKTOP = sp;return;
}
function _sqlite3Vacuum($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($0,13,0,0)|0);
 _sqlite3VdbeUsesBtree($0,0);
 STACKTOP = sp;return;
}
function _sqlite3Pragma($pParse,$pId1,$pId2,$pValue,$minusFlag) {
 $pParse = $pParse|0;
 $pId1 = $pId1|0;
 $pId2 = $pId2|0;
 $pValue = $pValue|0;
 $minusFlag = $minusFlag|0;
 var $$ = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$16 = 0, $$17 = 0, $$20 = 0, $$22 = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx23 = 0, $$idx23$val = 0, $$idx23$val$idx$val = 0, $$idx24 = 0, $$idx24$val = 0, $$idx24$val$idx$val = 0, $$idx25 = 0, $$idx25$val = 0, $$idx25$val$idx = 0;
 var $$idx25$val$idx$val = 0, $$idx26$val = 0, $$idx27 = 0, $$idx27$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx28$val$idx$val = 0, $$idx29 = 0, $$idx29$val = 0, $$idx30 = 0, $$idx30$val = 0, $$idx31$val = 0, $$idx32$val = 0, $$idx32$val53 = 0, $$idx3252 = 0, $$idx33$val = 0, $$idx34 = 0, $$idx34$val = 0, $$idx35$val = 0, $$idx36 = 0;
 var $$idx36$val = 0, $$idx37$val = 0, $$idx38 = 0, $$idx38$val = 0, $$in = 0, $$lcssa130 = 0, $$mux = 0, $$off = 0, $$ph = 0, $$pr = 0, $$pre = 0, $$pre230 = 0, $$pre231 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $N = 0, $aFcntl = 0, $aiCols = 0, $b$043 = 0, $brmerge = 0, $cnt$0$lcssa = 0, $cnt$0157 = 0, $cnt$1 = 0, $cnt$2$lcssa = 0, $cnt$2150 = 0, $eMode$0 = 0, $eMode4$068 = 0, $eMode4$145 = 0, $eMode41$0 = 0, $i$076 = 0, $i11$0 = 0, $i11$088 = 0;
 var $i11$089 = 0, $i15$093 = 0, $i18$098 = 0, $i19$0103 = 0, $i20$0108 = 0, $i22$0119 = 0, $i26$0$lcssa = 0, $i26$0124 = 0, $i26$1137 = 0, $i29$0188 = 0, $i40$0200 = 0, $iCookie$0 = 0, $iCookie$057 = 0, $iDataCur = 0, $iDb$0 = 0, $iIdxCur = 0, $iLimit = 0, $iLimit8 = 0, $ii$058 = 0, $ii3$060 = 0;
 var $ii5$063 = 0, $ii5$063$in = 0, $j$0113 = 0, $j27$0131 = 0, $j30$0$lcssa = 0, $j30$0164 = 0, $j30$1171 = 0, $j30$2179 = 0, $jmp3 = 0, $k$072 = 0, $k$1 = 0, $k28$0146 = 0, $k28$1 = 0, $lwr$0$ph212 = 0, $lwr$0209 = 0, $mxErr = 0, $nHidden$075 = 0, $nHidden$1 = 0, $or$cond11 = 0, $or$cond15 = 0;
 var $or$cond184 = 0, $or$cond3 = 0, $or$cond7 = 0, $or$cond9 = 0, $p$0 = 0, $p$0107 = 0, $p$0109 = 0, $pCol$074 = 0, $pFK$0117 = 0, $pFK23$0 = 0, $pFK23$0123 = 0, $pFK23$0125 = 0, $pFK23$1 = 0, $pFK23$1136 = 0, $pFK23$1138 = 0, $pId = 0, $pIdx$0 = 0, $pIdx$082 = 0, $pIdx$083 = 0, $pIdx16$0 = 0;
 var $pIdx16$097 = 0, $pIdx16$099 = 0, $pIdx25 = 0, $pIdx34$0 = 0, $pIdx34$0149 = 0, $pIdx34$0151 = 0, $pIdx36$0 = 0, $pIdx36$0163 = 0, $pIdx36$0165 = 0, $pIdx36$1 = 0, $pIdx36$1170 = 0, $pIdx36$1174 = 0, $pIdx36$2 = 0, $pIdx36$2178 = 0, $pIdx36$2180 = 0, $pPrior$0172 = 0, $pPrior$1 = 0, $pTab24$0 = 0, $phitmp213 = 0, $r1$0173 = 0;
 var $r1$1 = 0, $res = 0, $upr$0$ph211 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $x32$0 = 0, $x32$0156 = 0, $x32$0158 = 0, $x32$1 = 0, $x32$1183 = 0, $x32$1185 = 0, $zRight$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer14 = sp + 64|0;
 $vararg_buffer11 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $pId = sp + 120|0;
 $aFcntl = sp + 104|0;
 $iLimit = sp + 8|0;
 $iLimit8 = sp + 96|0;
 $res = sp + 92|0;
 $pIdx25 = sp + 88|0;
 $aiCols = sp + 84|0;
 $mxErr = sp + 80|0;
 $iDataCur = sp + 76|0;
 $iIdxCur = sp + 72|0;
 $jmp3 = sp + 68|0;
 $N = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3GetVdbe($pParse)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeRunOnlyOnce($1);
 $3 = (($pParse) + 76|0);
 HEAP32[$3>>2] = 2;
 $4 = (_sqlite3TwoPartName($pParse,$pId1,$pId2,$pId)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($0) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(1);
 if ($8) {
  $9 = (_sqlite3OpenTempDatabase($pParse)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
 }
 $11 = HEAP32[$pId>>2]|0;
 $12 = (_sqlite3NameFromToken($0,$11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = ($minusFlag|0)==(0);
 if ($14) {
  $16 = (_sqlite3NameFromToken($0,$pValue)|0);
  $zRight$0 = $16;
 } else {
  HEAP32[$vararg_buffer>>2] = $pValue;
  $15 = (_sqlite3MPrintf($0,20400,$vararg_buffer)|0);
  $zRight$0 = $15;
 }
 $17 = (($pId2) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $22 = 0;
 } else {
  $20 = (($7) + ($4<<4)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21;
 }
 $23 = (_sqlite3AuthCheck($pParse,19,$12,$zRight$0,$22)|0);
 $24 = ($23|0)==(0);
 L21: do {
  if ($24) {
   HEAP32[$aFcntl>>2] = 0;
   $25 = (($aFcntl) + 4|0);
   HEAP32[$25>>2] = $12;
   $26 = (($aFcntl) + 8|0);
   HEAP32[$26>>2] = $zRight$0;
   $27 = (($aFcntl) + 12|0);
   HEAP32[$27>>2] = 0;
   $28 = (($0) + 444|0);
   HEAP32[$28>>2] = 0;
   $29 = (_sqlite3_file_control($0,$22,14,$aFcntl)|0);
   if ((($29|0) == 0)) {
    $30 = HEAP32[$aFcntl>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     break;
    }
    $32 = HEAP32[$3>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$3>>2] = $33;
    (_sqlite3VdbeAddOp4($1,97,0,$33,0,$30,0)|0);
    _sqlite3VdbeSetNumCols($1,1);
    _sqlite3VdbeSetColName($1,0,0,20408,0);
    (_sqlite3VdbeAddOp2($1,35,$33,1)|0);
    $34 = HEAP32[$aFcntl>>2]|0;
    _sqlite3_free($34);
    break;
   } else if ((($29|0) == 12)) {
    $lwr$0$ph212 = 0;$upr$0$ph211 = 53;
    L30: while(1) {
     $lwr$0209 = $lwr$0$ph212;
     while(1) {
      $45 = (($lwr$0209) + ($upr$0$ph211))|0;
      $43 = (($45|0) / 2)&-1;
      $46 = (20416 + (($43*12)|0)|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (_sqlite3_stricmp($12,$47)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       break L30;
      }
      $50 = ($48|0)<(0);
      if ($50) {
       break;
      }
      $42 = (($43) + 1)|0;
      $44 = ($43|0)<($upr$0$ph211|0);
      if ($44) {
       $lwr$0209 = $42;
      } else {
       break L21;
      }
     }
     $51 = (($43) + -1)|0;
     $52 = ($lwr$0209|0)>($51|0);
     if ($52) {
      break L21;
     } else {
      $lwr$0$ph212 = $lwr$0209;$upr$0$ph211 = $51;
     }
    }
    $53 = ((20416 + (($43*12)|0)|0) + 5|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 & 1;
    $56 = ($55<<24>>24)==(0);
    if (!($56)) {
     $57 = (_sqlite3ReadSchema($pParse)|0);
     $58 = ($57|0)==(0);
     if (!($58)) {
      break;
     }
    }
    $59 = ((20416 + (($43*12)|0)|0) + 4|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    do {
     switch ($61|0) {
     case 4:  {
      $219 = ($zRight$0|0)==(0|0);
      if ($219) {
       $220 = ((($7) + ($4<<4)|0) + 12|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) + 80|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($223|0)<(0);
       $225 = $224 << 31 >> 31;
       _returnSingleInt($pParse,21104,$223,$225);
       break L21;
      } else {
       $226 = (_sqlite3Atoi($zRight$0)|0);
       $227 = ((($7) + ($4<<4)|0) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($228) + 80|0);
       HEAP32[$229>>2] = $226;
       $230 = ((($7) + ($4<<4)|0) + 4|0);
       $231 = HEAP32[$230>>2]|0;
       $$idx35$val = HEAP32[$231>>2]|0;
       $$idx36 = (($231) + 4|0);
       $$idx36$val = HEAP32[$$idx36>>2]|0;
       _sqlite3BtreeSetCacheSize($$idx35$val,$$idx36$val,$226);
       break L21;
      }
      break;
     }
     case 19:  {
      $163 = ((($7) + ($4<<4)|0) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $$idx = (($164) + 4|0);
      $$idx$val = HEAP32[$$idx>>2]|0;
      $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
      $165 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
      $166 = $iLimit;
      $167 = $166;
      HEAP32[$167>>2] = -2;
      $168 = (($166) + 4)|0;
      $169 = $168;
      HEAP32[$169>>2] = -1;
      $170 = ($zRight$0|0)==(0|0);
      if ($170) {
       $187 = -2;$188 = -1;
      } else {
       $171 = (_sqlite3Strlen30($zRight$0)|0);
       (_sqlite3Atoi64($zRight$0,$iLimit,$171,1)|0);
       $172 = $iLimit;
       $173 = $172;
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 4)|0;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)<(-1);
       $179 = ($177|0)==(-1);
       $180 = ($174>>>0)<(4294967295);
       $181 = $179 & $180;
       $182 = $178 | $181;
       if ($182) {
        $183 = $iLimit;
        $184 = $183;
        HEAP32[$184>>2] = -1;
        $185 = (($183) + 4)|0;
        $186 = $185;
        HEAP32[$186>>2] = -1;
        $187 = -1;$188 = -1;
       } else {
        $187 = $174;$188 = $177;
       }
      }
      $189 = (_sqlite3PagerJournalSizeLimit($165,$187,$188)|0);
      $190 = tempRet0;
      $191 = $iLimit;
      $192 = $191;
      HEAP32[$192>>2] = $189;
      $193 = (($191) + 4)|0;
      $194 = $193;
      HEAP32[$194>>2] = $190;
      _returnSingleInt($pParse,21208,$189,$190);
      break L21;
      break;
     }
     case 2:  {
      $269 = ($zRight$0|0)==(0|0);
      if ($269) {
       $270 = (($0) + 24|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = ((20416 + (($43*12)|0)|0) + 8|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = $273 & $271;
       $275 = ($274|0)!=(0);
       $276 = $275&1;
       _returnSingleInt($pParse,$47,$276,0);
       break L21;
      }
      $277 = ((20416 + (($43*12)|0)|0) + 8|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = (($0) + 62|0);
      $280 = HEAP8[$279>>0]|0;
      $281 = ($280<<24>>24)==(0);
      $282 = $278 & -524289;
      $$12 = $281 ? $282 : $278;
      $283 = (_sqlite3GetBoolean($zRight$0,0)|0);
      $284 = ($283<<24>>24)==(0);
      if ($284) {
       $288 = $$12 ^ -1;
       $289 = (($0) + 24|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $290 & $288;
       HEAP32[$289>>2] = $291;
       $292 = ($$12|0)==(16777216);
       if ($292) {
        $293 = (($0) + 504|0);
        $294 = $293;
        $295 = $294;
        HEAP32[$295>>2] = 0;
        $296 = (($294) + 4)|0;
        $297 = $296;
        HEAP32[$297>>2] = 0;
       }
      } else {
       $285 = (($0) + 24|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = $286 | $$12;
       HEAP32[$285>>2] = $287;
      }
      (_sqlite3VdbeAddOp2($1,138,0,0)|0);
      _setAllPagerFlags($0);
      break L21;
      break;
     }
     case 24:  {
      $75 = ((($7) + ($4<<4)|0) + 4|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($zRight$0|0)==(0|0);
      if (!($77)) {
       $84 = (_sqlite3Atoi($zRight$0)|0);
       $85 = (($0) + 72|0);
       HEAP32[$85>>2] = $84;
       $$idx26$val = HEAP32[$76>>2]|0;
       $$idx27 = (($76) + 4|0);
       $$idx27$val = HEAP32[$$idx27>>2]|0;
       $86 = (_sqlite3BtreeSetPageSize($$idx26$val,$$idx27$val,$84,-1,0)|0);
       $87 = ($86|0)==(7);
       if (!($87)) {
        break L21;
       }
       $88 = (($0) + 64|0);
       HEAP8[$88>>0] = 1;
       break L21;
      }
      $78 = ($76|0)==(0|0);
      if ($78) {
       $82 = 0;$83 = 0;
      } else {
       $$idx25 = (($76) + 4|0);
       $$idx25$val = HEAP32[$$idx25>>2]|0;
       $$idx25$val$idx = (($$idx25$val) + 32|0);
       $$idx25$val$idx$val = HEAP32[$$idx25$val$idx>>2]|0;
       $79 = (_sqlite3BtreeGetPageSize($$idx25$val$idx$val)|0);
       $80 = ($79|0)<(0);
       $81 = $80 << 31 >> 31;
       $82 = $79;$83 = $81;
      }
      _returnSingleInt($pParse,21120,$82,$83);
      break L21;
      break;
     }
     case 21:  {
      $115 = (_getLockingMode($zRight$0)|0);
      $116 = HEAP32[$17>>2]|0;
      $117 = ($116|0)==(0);
      $118 = ($115|0)==(-1);
      $or$cond7 = $117 & $118;
      if ($or$cond7) {
       $119 = (($0) + 65|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = $120&255;
       $eMode$0 = $121;
      } else {
       if ($117) {
        $122 = (($0) + 20|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($123|0)>(2);
        if ($124) {
         $ii3$060 = 2;
         while(1) {
          $125 = HEAP32[$6>>2]|0;
          $126 = ((($125) + ($ii3$060<<4)|0) + 4|0);
          $127 = HEAP32[$126>>2]|0;
          $$idx24 = (($127) + 4|0);
          $$idx24$val = HEAP32[$$idx24>>2]|0;
          $$idx24$val$idx$val = HEAP32[$$idx24$val>>2]|0;
          $128 = (_sqlite3BtreePager($$idx24$val$idx$val)|0);
          (_sqlite3PagerLockingMode($128,$115)|0);
          $129 = (($ii3$060) + 1)|0;
          $130 = HEAP32[$122>>2]|0;
          $131 = ($129|0)<($130|0);
          if ($131) {
           $ii3$060 = $129;
          } else {
           break;
          }
         }
        }
        $132 = $115&255;
        $133 = (($0) + 65|0);
        HEAP8[$133>>0] = $132;
       }
       $134 = ((($7) + ($4<<4)|0) + 4|0);
       $135 = HEAP32[$134>>2]|0;
       $$idx23 = (($135) + 4|0);
       $$idx23$val = HEAP32[$$idx23>>2]|0;
       $$idx23$val$idx$val = HEAP32[$$idx23$val>>2]|0;
       $136 = (_sqlite3BtreePager($$idx23$val$idx$val)|0);
       $137 = (_sqlite3PagerLockingMode($136,$115)|0);
       $eMode$0 = $137;
      }
      $138 = ($eMode$0|0)==(1);
      $$ = $138 ? 21160 : 21152;
      _sqlite3VdbeSetNumCols($1,1);
      _sqlite3VdbeSetColName($1,0,0,21176,0);
      (_sqlite3VdbeAddOp4($1,97,0,1,0,$$,0)|0);
      (_sqlite3VdbeAddOp2($1,35,1,1)|0);
      break L21;
      break;
     }
     case 16:  {
      $395 = ($zRight$0|0)==(0|0);
      if ($395) {
       break L21;
      }
      $396 = (_sqlite3FindTable($0,$zRight$0,$22)|0);
      $397 = ($396|0)==(0|0);
      if ($397) {
       break L21;
      }
      $398 = (_sqlite3GetVdbe($pParse)|0);
      _sqlite3VdbeSetNumCols($398,3);
      HEAP32[$3>>2] = 3;
      _sqlite3CodeVerifySchema($pParse,$4);
      _sqlite3VdbeSetColName($398,0,0,21520,0);
      _sqlite3VdbeSetColName($398,1,0,21440,0);
      _sqlite3VdbeSetColName($398,2,0,21528,0);
      $399 = (($396) + 8|0);
      $pIdx16$097 = HEAP32[$399>>2]|0;
      $400 = ($pIdx16$097|0)==(0|0);
      if ($400) {
       break L21;
      } else {
       $i18$098 = 0;$pIdx16$099 = $pIdx16$097;
      }
      while(1) {
       (_sqlite3VdbeAddOp2($398,25,$i18$098,1)|0);
       $401 = HEAP32[$pIdx16$099>>2]|0;
       (_sqlite3VdbeAddOp4($398,97,0,2,0,$401,0)|0);
       $402 = (($pIdx16$099) + 54|0);
       $403 = HEAP8[$402>>0]|0;
       $404 = ($403<<24>>24)!=(0);
       $405 = $404&1;
       (_sqlite3VdbeAddOp2($398,25,$405,3)|0);
       (_sqlite3VdbeAddOp2($398,35,1,3)|0);
       $406 = (($pIdx16$099) + 20|0);
       $407 = (($i18$098) + 1)|0;
       $pIdx16$0 = HEAP32[$406>>2]|0;
       $408 = ($pIdx16$0|0)==(0|0);
       if ($408) {
        break;
       } else {
        $i18$098 = $407;$pIdx16$099 = $pIdx16$0;
       }
      }
      break;
     }
     case 28:  {
      $347 = (_sqlite3GetVdbe($pParse)|0);
      _sqlite3VdbeSetNumCols($347,4);
      HEAP32[$3>>2] = 4;
      _sqlite3CodeVerifySchema($pParse,$4);
      _sqlite3VdbeSetColName($347,0,0,21488,0);
      _sqlite3VdbeSetColName($347,1,0,10320,0);
      _sqlite3VdbeSetColName($347,2,0,21496,0);
      _sqlite3VdbeSetColName($347,3,0,21504,0);
      $348 = ((($7) + ($4<<4)|0) + 12|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = (($349) + 16|0);
      $i11$088 = HEAP32[$350>>2]|0;
      $351 = ($i11$088|0)==(0|0);
      if ($351) {
       break L21;
      } else {
       $i11$089 = $i11$088;
      }
      while(1) {
       $352 = (($i11$089) + 8|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = HEAP32[$353>>2]|0;
       (_sqlite3VdbeAddOp4($347,97,0,1,0,$354,0)|0);
       (_sqlite3VdbeAddOp2($347,28,0,2)|0);
       $355 = (($353) + 42|0);
       $356 = HEAP16[$355>>1]|0;
       $357 = (_sqlite3LogEstToInt($356)|0);
       $358 = tempRet0;
       (_sqlite3VdbeAddOp2($347,25,$357,3)|0);
       $359 = (($353) + 28|0);
       $360 = HEAP32[$359>>2]|0;
       (_sqlite3VdbeAddOp2($347,25,$360,4)|0);
       (_sqlite3VdbeAddOp2($347,35,1,4)|0);
       $361 = (($353) + 8|0);
       $pIdx$082 = HEAP32[$361>>2]|0;
       $362 = ($pIdx$082|0)==(0|0);
       if (!($362)) {
        $pIdx$083 = $pIdx$082;
        while(1) {
         $363 = HEAP32[$pIdx$083>>2]|0;
         (_sqlite3VdbeAddOp4($347,97,0,2,0,$363,0)|0);
         $364 = (($pIdx$083) + 48|0);
         $365 = HEAP16[$364>>1]|0;
         $366 = (_sqlite3LogEstToInt($365)|0);
         $367 = tempRet0;
         (_sqlite3VdbeAddOp2($347,25,$366,3)|0);
         $368 = (($pIdx$083) + 8|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = HEAP32[$369>>2]|0;
         (_sqlite3VdbeAddOp2($347,25,$370,4)|0);
         (_sqlite3VdbeAddOp2($347,35,1,4)|0);
         $371 = (($pIdx$083) + 20|0);
         $pIdx$0 = HEAP32[$371>>2]|0;
         $372 = ($pIdx$0|0)==(0|0);
         if ($372) {
          break;
         } else {
          $pIdx$083 = $pIdx$0;
         }
        }
       }
       $i11$0 = HEAP32[$i11$089>>2]|0;
       $373 = ($i11$0|0)==(0|0);
       if ($373) {
        break;
       } else {
        $i11$089 = $i11$0;
       }
      }
      break;
     }
     case 12:  {
      $468 = HEAP32[$3>>2]|0;
      $469 = (($468) + 1)|0;
      $470 = (($468) + 5)|0;
      $471 = (($468) + 6)|0;
      HEAP32[$3>>2] = $471;
      $472 = (_sqlite3GetVdbe($pParse)|0);
      _sqlite3VdbeSetNumCols($472,4);
      _sqlite3VdbeSetColName($472,0,0,21488,0);
      _sqlite3VdbeSetColName($472,1,0,10144,0);
      _sqlite3VdbeSetColName($472,2,0,21616,0);
      _sqlite3VdbeSetColName($472,3,0,21624,0);
      _sqlite3CodeVerifySchema($pParse,$4);
      $473 = HEAP32[$6>>2]|0;
      $474 = ((($473) + ($4<<4)|0) + 12|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = (($475) + 16|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = ($477|0)==(0|0);
      if ($478) {
       break L21;
      }
      $479 = ($zRight$0|0)==(0|0);
      $480 = (($pParse) + 72|0);
      $$idx3252 = (($472) + 24|0);
      $$idx30 = (($472) + 32|0);
      $481 = (($468) + 2)|0;
      $482 = (($468) + 3)|0;
      $483 = (($468) + 4)|0;
      $k28$0146 = $477;
      while(1) {
       if ($479) {
        $485 = (($k28$0146) + 8|0);
        $486 = HEAP32[$485>>2]|0;
        $487 = HEAP32[$k28$0146>>2]|0;
        $k28$1 = $487;$pTab24$0 = $486;
       } else {
        $484 = (_sqlite3LocateTable($pParse,0,$zRight$0,$22)|0);
        $k28$1 = 0;$pTab24$0 = $484;
       }
       $488 = ($pTab24$0|0)==(0|0);
       if (!($488)) {
        $489 = (($pTab24$0) + 16|0);
        $490 = HEAP32[$489>>2]|0;
        $491 = ($490|0)==(0|0);
        if (!($491)) {
         $492 = (($pTab24$0) + 32|0);
         $493 = HEAP32[$492>>2]|0;
         $494 = HEAP32[$pTab24$0>>2]|0;
         _sqlite3TableLock($pParse,$4,$493,0,$494);
         $495 = (($pTab24$0) + 38|0);
         $496 = HEAP16[$495>>1]|0;
         $497 = $496 << 16 >> 16;
         $498 = (($497) + ($471))|0;
         $499 = HEAP32[$3>>2]|0;
         $500 = ($498|0)>($499|0);
         if ($500) {
          HEAP32[$3>>2] = $498;
         }
         _sqlite3OpenTable($pParse,0,$4,$pTab24$0,52);
         $501 = HEAP32[$pTab24$0>>2]|0;
         (_sqlite3VdbeAddOp4($472,97,0,$469,0,$501,0)|0);
         $pFK23$0123 = HEAP32[$489>>2]|0;
         $502 = ($pFK23$0123|0)==(0|0);
         if ($502) {
          $i26$0$lcssa = 1;
         } else {
          $i26$0124 = 1;$pFK23$0125 = $pFK23$0123;
          while(1) {
           $503 = (($pFK23$0125) + 8|0);
           $504 = HEAP32[$503>>2]|0;
           $505 = (_sqlite3FindTable($0,$504,$22)|0);
           $506 = ($505|0)==(0|0);
           do {
            if (!($506)) {
             HEAP32[$pIdx25>>2] = 0;
             $507 = (($505) + 32|0);
             $508 = HEAP32[$507>>2]|0;
             $509 = HEAP32[$505>>2]|0;
             _sqlite3TableLock($pParse,$4,$508,0,$509);
             $510 = (_sqlite3FkLocateIndex($pParse,$505,$pFK23$0125,$pIdx25,0)|0);
             $511 = ($510|0)==(0);
             if (!($511)) {
              break L21;
             }
             $512 = HEAP32[$pIdx25>>2]|0;
             $513 = ($512|0)==(0|0);
             if ($513) {
              _sqlite3OpenTable($pParse,$i26$0124,$4,$505,52);
              break;
             } else {
              $514 = (($512) + 44|0);
              $515 = HEAP32[$514>>2]|0;
              (_sqlite3VdbeAddOp3($472,52,$i26$0124,$515,$4)|0);
              _sqlite3VdbeSetP4KeyInfo($pParse,$512);
              break;
             }
            }
           } while(0);
           $516 = (($i26$0124) + 1)|0;
           $517 = (($pFK23$0125) + 4|0);
           $pFK23$0 = HEAP32[$517>>2]|0;
           $518 = ($pFK23$0|0)==(0|0);
           if ($518) {
            $i26$0$lcssa = $516;
            break;
           } else {
            $i26$0124 = $516;$pFK23$0125 = $pFK23$0;
           }
          }
         }
         $519 = HEAP32[$480>>2]|0;
         $520 = ($519|0)<($i26$0$lcssa|0);
         if ($520) {
          HEAP32[$480>>2] = $i26$0$lcssa;
         }
         $521 = (_sqlite3VdbeAddOp1($472,105,0)|0);
         $pFK23$1136 = HEAP32[$489>>2]|0;
         $522 = ($pFK23$1136|0)==(0|0);
         if (!($522)) {
          $523 = (($pTab24$0) + 36|0);
          $i26$1137 = 1;$pFK23$1138 = $pFK23$1136;
          while(1) {
           $524 = (($pFK23$1138) + 8|0);
           $525 = HEAP32[$524>>2]|0;
           $526 = (_sqlite3FindTable($0,$525,$22)|0);
           HEAP32[$pIdx25>>2] = 0;
           HEAP32[$aiCols>>2] = 0;
           $527 = ($526|0)!=(0|0);
           do {
            if ($527) {
             (_sqlite3FkLocateIndex($pParse,$526,$pFK23$1138,$pIdx25,$aiCols)|0);
             $$idx32$val53 = HEAP32[$$idx3252>>2]|0;
             $532 = (_sqlite3VdbeMakeLabel($$idx32$val53)|0);
             $533 = HEAP32[$pIdx25>>2]|0;
             $534 = ($533|0)==(0|0);
             if (!($534)) {
              $$ph = $532;$553 = $533;
              label = 173;
              break;
             }
             $535 = (($pFK23$1138) + 36|0);
             $536 = HEAP32[$535>>2]|0;
             $537 = HEAP16[$523>>1]|0;
             $538 = $537 << 16 >> 16;
             $539 = ($536|0)==($538|0);
             if ($539) {
              (_sqlite3VdbeAddOp2($472,100,0,$471)|0);
             } else {
              (_sqlite3VdbeAddOp3($472,46,0,$536,$471)|0);
              _sqlite3ColumnDefault($472,$pTab24$0,$536,$471);
              (_sqlite3VdbeAddOp2($472,76,$471,$532)|0);
              $$idx31$val = HEAP32[$$idx30>>2]|0;
              $540 = (_sqlite3VdbeCurrentAddr($$idx31$val)|0);
              $541 = (($540) + 3)|0;
              (_sqlite3VdbeAddOp2($472,38,$471,$541)|0);
             }
             (_sqlite3VdbeAddOp3($472,67,$i26$1137,0,$471)|0);
             (_sqlite3VdbeAddOp2($472,16,0,$532)|0);
             $$idx30$val = HEAP32[$$idx30>>2]|0;
             $542 = (_sqlite3VdbeCurrentAddr($$idx30$val)|0);
             $543 = (($542) + -2)|0;
             _sqlite3VdbeJumpHere($472,$543);
             $558 = $532;
            } else {
             $$idx32$val = HEAP32[$$idx3252>>2]|0;
             $528 = (_sqlite3VdbeMakeLabel($$idx32$val)|0);
             $$ph = $528;$553 = 0;
             label = 173;
            }
           } while(0);
           do {
            if ((label|0) == 173) {
             label = 0;
             $529 = (($pFK23$1138) + 20|0);
             $530 = HEAP32[$529>>2]|0;
             $531 = ($530|0)>(0);
             if ($531) {
              $j27$0131 = 0;
              while(1) {
               $544 = HEAP32[$aiCols>>2]|0;
               $545 = ($544|0)==(0|0);
               if ($545) {
                $547 = ((($pFK23$1138) + ($j27$0131<<3)|0) + 36|0);
                $$in = $547;
               } else {
                $546 = (($544) + ($j27$0131<<2)|0);
                $$in = $546;
               }
               $548 = HEAP32[$$in>>2]|0;
               $549 = (($j27$0131) + ($471))|0;
               _sqlite3ExprCodeGetColumnOfTable($472,$pTab24$0,0,$548,$549);
               (_sqlite3VdbeAddOp2($472,76,$549,$$ph)|0);
               $550 = (($j27$0131) + 1)|0;
               $551 = HEAP32[$529>>2]|0;
               $552 = ($550|0)<($551|0);
               if ($552) {
                $j27$0131 = $550;
               } else {
                $$lcssa130 = $551;
                break;
               }
              }
             } else {
              $$lcssa130 = $530;
             }
             if (!($527)) {
              $558 = $$ph;
              break;
             }
             $554 = (_sqlite3IndexAffinityStr($472,$553)|0);
             $555 = HEAP32[$529>>2]|0;
             (_sqlite3VdbeAddOp4($472,48,$471,$$lcssa130,$470,$554,$555)|0);
             (_sqlite3VdbeAddOp4Int($472,66,$i26$1137,$$ph,$470,0)|0);
             $558 = $$ph;
            }
           } while(0);
           (_sqlite3VdbeAddOp2($472,100,0,$481)|0);
           $556 = HEAP32[$524>>2]|0;
           (_sqlite3VdbeAddOp4($472,97,0,$482,0,$556,0)|0);
           $557 = (($i26$1137) + -1)|0;
           (_sqlite3VdbeAddOp2($472,25,$557,$483)|0);
           (_sqlite3VdbeAddOp2($472,35,$469,4)|0);
           _sqlite3VdbeResolveLabel($472,$558);
           $559 = HEAP32[$aiCols>>2]|0;
           _sqlite3DbFree($0,$559);
           $560 = (($i26$1137) + 1)|0;
           $561 = (($pFK23$1138) + 4|0);
           $pFK23$1 = HEAP32[$561>>2]|0;
           $562 = ($pFK23$1|0)==(0|0);
           if ($562) {
            break;
           } else {
            $i26$1137 = $560;$pFK23$1138 = $pFK23$1;
           }
          }
         }
         $563 = (($521) + 1)|0;
         (_sqlite3VdbeAddOp2($472,9,0,$563)|0);
         _sqlite3VdbeJumpHere($472,$521);
        }
       }
       $564 = ($k28$1|0)==(0|0);
       if ($564) {
        break;
       } else {
        $k28$0146 = $k28$1;
       }
      }
      break;
     }
     case 22:  {
      _sqlite3CodeVerifySchema($pParse,$4);
      $108 = HEAP32[$3>>2]|0;
      $109 = (($108) + 1)|0;
      HEAP32[$3>>2] = $109;
      $110 = HEAP8[$12>>0]|0;
      $111 = $110 & -33;
      $112 = ($111<<24>>24)==(80);
      if ($112) {
       (_sqlite3VdbeAddOp2($1,152,$4,$109)|0);
      } else {
       $113 = (_sqlite3Atoi($zRight$0)|0);
       $114 = (_sqlite3AbsInt32($113)|0);
       (_sqlite3VdbeAddOp3($1,153,$4,$109,$114)|0);
      }
      (_sqlite3VdbeAddOp2($1,35,$109,1)|0);
      _sqlite3VdbeSetNumCols($1,1);
      _sqlite3VdbeSetColName($1,0,0,$12,(-1));
      break L21;
      break;
     }
     case 25:  {
      $89 = ((($7) + ($4<<4)|0) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($zRight$0|0)==(0|0);
      if ($91) {
       $b$043 = -1;
      } else {
       $92 = (_sqlite3GetBoolean($zRight$0,0)|0);
       $93 = $92&255;
       $94 = HEAP32[$17>>2]|0;
       $95 = ($94|0)==(0);
       if ($95) {
        $96 = (($0) + 20|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)>(0);
        if ($98) {
         $ii$058 = 0;
         while(1) {
          $99 = HEAP32[$6>>2]|0;
          $100 = ((($99) + ($ii$058<<4)|0) + 4|0);
          $101 = HEAP32[$100>>2]|0;
          (_sqlite3BtreeSecureDelete($101,$93)|0);
          $102 = (($ii$058) + 1)|0;
          $103 = HEAP32[$96>>2]|0;
          $104 = ($102|0)<($103|0);
          if ($104) {
           $ii$058 = $102;
          } else {
           $b$043 = $93;
           break;
          }
         }
        } else {
         $b$043 = $93;
        }
       } else {
        $b$043 = $93;
       }
      }
      $105 = (_sqlite3BtreeSecureDelete($90,$b$043)|0);
      $106 = ($105|0)<(0);
      $107 = $106 << 31 >> 31;
      _returnSingleInt($pParse,21136,$105,$107);
      break L21;
      break;
     }
     case 10:  {
      _sqlite3VdbeUsesBtree($1,$4);
      $62 = ($zRight$0|0)==(0|0);
      if ($62) {
       _sqlite3VdbeSetNumCols($1,1);
       _sqlite3VdbeSetColName($1,0,0,21104,0);
       $63 = HEAP32[$3>>2]|0;
       $64 = (($63) + 2)|0;
       HEAP32[$3>>2] = $64;
       $65 = (_sqlite3VdbeAddOpList($1,9,21064)|0);
       _sqlite3VdbeChangeP1($1,$65,$4);
       $66 = (($65) + 1)|0;
       _sqlite3VdbeChangeP1($1,$66,$4);
       $67 = (($65) + 6)|0;
       _sqlite3VdbeChangeP1($1,$67,2000);
       break L21;
      } else {
       $68 = (_sqlite3Atoi($zRight$0)|0);
       $69 = (_sqlite3AbsInt32($68)|0);
       _sqlite3BeginWriteOperation($pParse,0,$4);
       (_sqlite3VdbeAddOp2($1,25,$69,1)|0);
       (_sqlite3VdbeAddOp3($1,51,$4,3,1)|0);
       $70 = ((($7) + ($4<<4)|0) + 12|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($71) + 80|0);
       HEAP32[$72>>2] = $69;
       $73 = ((($7) + ($4<<4)|0) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $$idx33$val = HEAP32[$74>>2]|0;
       $$idx34 = (($74) + 4|0);
       $$idx34$val = HEAP32[$$idx34>>2]|0;
       _sqlite3BtreeSetCacheSize($$idx33$val,$$idx34$val,$69);
       break L21;
      }
      break;
     }
     case 32:  {
      $236 = ($zRight$0|0)==(0|0);
      if ($236) {
       $237 = HEAP32[1832>>2]|0;
       $238 = ($237|0)==(0|0);
       if ($238) {
        break L21;
       }
       _sqlite3VdbeSetNumCols($1,1);
       _sqlite3VdbeSetColName($1,0,0,21304,0);
       $239 = HEAP32[1832>>2]|0;
       (_sqlite3VdbeAddOp4($1,97,0,1,0,$239,0)|0);
       (_sqlite3VdbeAddOp2($1,35,1,1)|0);
       break L21;
      }
      $240 = HEAP8[$zRight$0>>0]|0;
      $241 = ($240<<24>>24)==(0);
      if (!($241)) {
       $242 = HEAP32[$0>>2]|0;
       $243 = (_sqlite3OsAccess($242,$zRight$0,1,$res)|0);
       $244 = ($243|0)!=(0);
       $245 = HEAP32[$res>>2]|0;
       $246 = ($245|0)==(0);
       $or$cond11 = $244 | $246;
       if ($or$cond11) {
        _sqlite3ErrorMsg($pParse,21328,$vararg_buffer4);
        break L21;
       }
      }
      $247 = (($0) + 63|0);
      $248 = HEAP8[$247>>0]|0;
      $249 = ($248&255)<(2);
      if ($249) {
       (_invalidateTempStorage($pParse)|0);
      }
      $250 = HEAP32[1832>>2]|0;
      _sqlite3_free($250);
      $251 = HEAP8[$zRight$0>>0]|0;
      $252 = ($251<<24>>24)==(0);
      if ($252) {
       HEAP32[1832>>2] = 0;
       break L21;
      } else {
       HEAP32[$vararg_buffer6>>2] = $zRight$0;
       $253 = (_sqlite3_mprintf(1712,$vararg_buffer6)|0);
       HEAP32[1832>>2] = $253;
       break L21;
      }
      break;
     }
     case 1:  {
      $195 = ((($7) + ($4<<4)|0) + 4|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($zRight$0|0)==(0|0);
      if ($197) {
       $198 = (_sqlite3BtreeGetAutoVacuum($196)|0);
       $199 = ($198|0)<(0);
       $200 = $199 << 31 >> 31;
       _returnSingleInt($pParse,21232,$198,$200);
       break L21;
      }
      $201 = (_getAutoVacuum($zRight$0)|0);
      $202 = $201&255;
      $203 = (($0) + 66|0);
      HEAP8[$203>>0] = $202;
      $$idx37$val = HEAP32[$196>>2]|0;
      $$idx38 = (($196) + 4|0);
      $$idx38$val = HEAP32[$$idx38>>2]|0;
      $204 = (_sqlite3BtreeSetAutoVacuum($$idx37$val,$$idx38$val,$201)|0);
      $205 = ($204|0)==(0);
      $$off = (($201) + -1)|0;
      $206 = ($$off>>>0)<(2);
      $or$cond9 = $205 & $206;
      if (!($or$cond9)) {
       break L21;
      }
      $207 = (_sqlite3VdbeAddOpList($1,6,21248)|0);
      _sqlite3VdbeChangeP1($1,$207,$4);
      $208 = (($207) + 1)|0;
      _sqlite3VdbeChangeP1($1,$208,$4);
      $209 = (($207) + 2)|0;
      $210 = (($207) + 4)|0;
      _sqlite3VdbeChangeP2($1,$209,$210);
      _sqlite3VdbeChangeP1($1,$210,$$off);
      $211 = (($207) + 5)|0;
      _sqlite3VdbeChangeP1($1,$211,$4);
      _sqlite3VdbeUsesBtree($1,$4);
      break L21;
      break;
     }
     case 29:  {
      $254 = ($zRight$0|0)==(0|0);
      if ($254) {
       $255 = ((($7) + ($4<<4)|0) + 8|0);
       $256 = HEAP8[$255>>0]|0;
       $257 = $256&255;
       $258 = (($257) + -1)|0;
       $259 = ($258|0)<(0);
       $260 = $259 << 31 >> 31;
       _returnSingleInt($pParse,21360,$258,$260);
       break L21;
      }
      $261 = (($0) + 62|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = ($262<<24>>24)==(0);
      if ($263) {
       _sqlite3ErrorMsg($pParse,21376,$vararg_buffer9);
       break L21;
      } else {
       $264 = (_getSafetyLevel($zRight$0,0,1)|0);
       $265 = $264&255;
       $266 = (($265) + 1)|0;
       $267 = $266&255;
       $268 = ((($7) + ($4<<4)|0) + 8|0);
       HEAP8[$268>>0] = $267;
       _setAllPagerFlags($0);
       break L21;
      }
      break;
     }
     case 30:  {
      $298 = ($zRight$0|0)==(0|0);
      if ($298) {
       break L21;
      }
      $299 = (_sqlite3FindTable($0,$zRight$0,$22)|0);
      $300 = ($299|0)==(0|0);
      if ($300) {
       break L21;
      }
      $301 = (_sqlite3PrimaryKeyIndex($299)|0);
      _sqlite3VdbeSetNumCols($1,6);
      HEAP32[$3>>2] = 6;
      _sqlite3CodeVerifySchema($pParse,$4);
      _sqlite3VdbeSetColName($1,0,0,21432,0);
      _sqlite3VdbeSetColName($1,1,0,21440,0);
      _sqlite3VdbeSetColName($1,2,0,21448,0);
      _sqlite3VdbeSetColName($1,3,0,21456,0);
      _sqlite3VdbeSetColName($1,4,0,21464,0);
      _sqlite3VdbeSetColName($1,5,0,21480,0);
      (_sqlite3ViewGetColumnNames($pParse,$299)|0);
      $302 = (($299) + 38|0);
      $303 = HEAP16[$302>>1]|0;
      $304 = ($303<<16>>16)>(0);
      if (!($304)) {
       break L21;
      }
      $305 = (($299) + 4|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ($301|0)==(0|0);
      $308 = (($301) + 4|0);
      $767 = $303;$i$076 = 0;$nHidden$075 = 0;$pCol$074 = $306;
      while(1) {
       $309 = (($pCol$074) + 23|0);
       $310 = HEAP8[$309>>0]|0;
       $311 = $310 & 2;
       $312 = ($311<<24>>24)==(0);
       if ($312) {
        $314 = (($i$076) - ($nHidden$075))|0;
        (_sqlite3VdbeAddOp2($1,25,$314,1)|0);
        $315 = HEAP32[$pCol$074>>2]|0;
        (_sqlite3VdbeAddOp4($1,97,0,2,0,$315,0)|0);
        $316 = (($pCol$074) + 12|0);
        $317 = HEAP32[$316>>2]|0;
        $318 = ($317|0)==(0|0);
        $$13 = $318 ? 1728 : $317;
        (_sqlite3VdbeAddOp4($1,97,0,3,0,$$13,0)|0);
        $319 = (($pCol$074) + 20|0);
        $320 = HEAP8[$319>>0]|0;
        $321 = ($320<<24>>24)!=(0);
        $322 = $321&1;
        (_sqlite3VdbeAddOp2($1,25,$322,4)|0);
        $323 = (($pCol$074) + 8|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==(0|0);
        if ($325) {
         (_sqlite3VdbeAddOp2($1,28,0,5)|0);
        } else {
         (_sqlite3VdbeAddOp4($1,97,0,5,0,$324,0)|0);
        }
        $326 = HEAP8[$309>>0]|0;
        $327 = $326 & 1;
        $328 = ($327<<24>>24)==(0);
        $brmerge = $328 | $307;
        $329 = $327 ^ 1;
        $330 = $329&255;
        $$mux = $330 ^ 1;
        L202: do {
         if ($brmerge) {
          $k$1 = $$mux;
         } else {
          $331 = HEAP16[$302>>1]|0;
          $332 = ($331<<16>>16)<(1);
          if ($332) {
           $k$1 = 1;
           break;
          }
          $333 = HEAP32[$308>>2]|0;
          $k$072 = 1;
          while(1) {
           $336 = (($k$072) + -1)|0;
           $337 = (($333) + ($336<<1)|0);
           $338 = HEAP16[$337>>1]|0;
           $339 = $338 << 16 >> 16;
           $340 = ($339|0)==($i$076|0);
           $341 = (($k$072) + 1)|0;
           if ($340) {
            $k$1 = $k$072;
            break L202;
           }
           $334 = $331 << 16 >> 16;
           $335 = ($k$072|0)<($334|0);
           if ($335) {
            $k$072 = $341;
           } else {
            $k$1 = $341;
            break;
           }
          }
         }
        } while(0);
        (_sqlite3VdbeAddOp2($1,25,$k$1,6)|0);
        (_sqlite3VdbeAddOp2($1,35,1,6)|0);
        $$pre = HEAP16[$302>>1]|0;
        $345 = $$pre;$nHidden$1 = $nHidden$075;
       } else {
        $313 = (($nHidden$075) + 1)|0;
        $345 = $767;$nHidden$1 = $313;
       }
       $342 = (($i$076) + 1)|0;
       $343 = (($pCol$074) + 24|0);
       $344 = $345 << 16 >> 16;
       $346 = ($342|0)<($344|0);
       if ($346) {
        $767 = $345;$i$076 = $342;$nHidden$075 = $nHidden$1;$pCol$074 = $343;
       } else {
        break;
       }
      }
      break;
     }
     case 14:  {
      $212 = ($zRight$0|0)==(0|0);
      if ($212) {
       label = 76;
      } else {
       $213 = (_sqlite3GetInt32($zRight$0,$iLimit8)|0);
       $214 = ($213|0)==(0);
       $215 = HEAP32[$iLimit8>>2]|0;
       $216 = ($215|0)<(1);
       $or$cond3 = $214 | $216;
       if ($or$cond3) {
        label = 76;
       } else {
        $217 = $215;
       }
      }
      if ((label|0) == 76) {
       HEAP32[$iLimit8>>2] = 2147483647;
       $217 = 2147483647;
      }
      _sqlite3BeginWriteOperation($pParse,0,$4);
      (_sqlite3VdbeAddOp2($1,25,$217,1)|0);
      $218 = (_sqlite3VdbeAddOp1($1,137,$4)|0);
      (_sqlite3VdbeAddOp1($1,35,1)|0);
      (_sqlite3VdbeAddOp2($1,37,1,-1)|0);
      (_sqlite3VdbeAddOp2($1,132,1,$218)|0);
      _sqlite3VdbeJumpHere($1,$218);
      break L21;
      break;
     }
     case 18:  {
      _sqlite3VdbeSetNumCols($1,1);
      _sqlite3VdbeSetColName($1,0,0,21192,0);
      $139 = ($zRight$0|0)==(0|0);
      L217: do {
       if ($139) {
        label = 57;
       } else {
        $140 = (_sqlite3Strlen30($zRight$0)|0);
        $141 = (_sqlite3JournalModename(0)|0);
        $142 = ($141|0)==(0|0);
        if ($142) {
         label = 57;
        } else {
         $146 = $141;$eMode4$068 = 0;
         while(1) {
          $147 = (_sqlite3_strnicmp($zRight$0,$146,$140)|0);
          $148 = ($147|0)==(0);
          $143 = (($eMode4$068) + 1)|0;
          if ($148) {
           break;
          }
          $144 = (_sqlite3JournalModename($143)|0);
          $145 = ($144|0)==(0|0);
          if ($145) {
           label = 57;
           break L217;
          } else {
           $146 = $144;$eMode4$068 = $143;
          }
         }
         $149 = ($eMode4$068|0)==(-1);
         if ($149) {
          label = 57;
         } else {
          $eMode4$145 = $eMode4$068;$iDb$0 = $4;
         }
        }
       }
      } while(0);
      if ((label|0) == 57) {
       $150 = HEAP32[$17>>2]|0;
       $151 = ($150|0)==(0);
       if ($151) {
        HEAP32[$17>>2] = 1;
        $eMode4$145 = -1;$iDb$0 = 0;
       } else {
        $eMode4$145 = -1;$iDb$0 = $4;
       }
      }
      $152 = (($0) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($153|0)>(0);
      if ($154) {
       $ii5$063$in = $153;
       while(1) {
        $ii5$063 = (($ii5$063$in) + -1)|0;
        $155 = HEAP32[$6>>2]|0;
        $156 = ((($155) + ($ii5$063<<4)|0) + 4|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        do {
         if (!($158)) {
          $160 = ($ii5$063|0)==($iDb$0|0);
          if (!($160)) {
           $161 = HEAP32[$17>>2]|0;
           $162 = ($161|0)==(0);
           if (!($162)) {
            break;
           }
          }
          _sqlite3VdbeUsesBtree($1,$ii5$063);
          (_sqlite3VdbeAddOp3($1,12,$ii5$063,1,$eMode4$145)|0);
         }
        } while(0);
        $159 = ($ii5$063|0)>(0);
        if ($159) {
         $ii5$063$in = $ii5$063;
        } else {
         break;
        }
       }
      }
      (_sqlite3VdbeAddOp2($1,35,1,1)|0);
      break L21;
      break;
     }
     case 5:  {
      $565 = ($zRight$0|0)==(0|0);
      if ($565) {
       break L21;
      }
      $566 = (_sqlite3GetBoolean($zRight$0,0)|0);
      $567 = $566&255;
      _sqlite3RegisterLikeFunctions($0,$567);
      break L21;
      break;
     }
     case 17:  {
      $568 = HEAP8[$12>>0]|0;
      $569 = HEAP32[$pId2>>2]|0;
      $570 = ($569|0)==(0|0);
      $$14 = $570 ? -1 : $4;
      HEAP32[$3>>2] = 6;
      _sqlite3VdbeSetNumCols($1,1);
      _sqlite3VdbeSetColName($1,0,0,21648,0);
      HEAP32[$mxErr>>2] = 100;
      $571 = ($zRight$0|0)==(0|0);
      if ($571) {
       $574 = 100;
      } else {
       (_sqlite3GetInt32($zRight$0,$mxErr)|0);
       $572 = HEAP32[$mxErr>>2]|0;
       $573 = ($572|0)<(1);
       if ($573) {
        HEAP32[$mxErr>>2] = 100;
        $574 = 100;
       } else {
        $574 = $572;
       }
      }
      (_sqlite3VdbeAddOp2($1,25,$574,1)|0);
      $575 = (($0) + 20|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = ($576|0)>(0);
      if ($577) {
       $578 = ($$14|0)<(0);
       $579 = $568 & -33;
       $580 = ($579<<24>>24)==(81);
       $$idx29 = (($1) + 32|0);
       $769 = $576;$i29$0188 = 0;
       while(1) {
        $581 = ($i29$0188|0)==($$14|0);
        $or$cond15 = $578 | $581;
        if ($or$cond15) {
         _sqlite3CodeVerifySchema($pParse,$i29$0188);
         $582 = (_sqlite3VdbeAddOp1($1,132,1)|0);
         (_sqlite3VdbeAddOp2($1,24,0,0)|0);
         _sqlite3VdbeJumpHere($1,$582);
         $583 = HEAP32[$6>>2]|0;
         $584 = ((($583) + ($i29$0188<<4)|0) + 12|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = (($585) + 16|0);
         $x32$0156 = HEAP32[$586>>2]|0;
         $587 = ($x32$0156|0)==(0|0);
         if ($587) {
          $cnt$0$lcssa = 0;
         } else {
          $cnt$0157 = 0;$x32$0158 = $x32$0156;
          while(1) {
           $588 = (($x32$0158) + 8|0);
           $589 = HEAP32[$588>>2]|0;
           $590 = (($589) + 44|0);
           $591 = HEAP8[$590>>0]|0;
           $592 = $591 & 32;
           $593 = ($592<<24>>24)==(0);
           if ($593) {
            $594 = (($589) + 32|0);
            $595 = HEAP32[$594>>2]|0;
            $596 = (($cnt$0157) + 2)|0;
            (_sqlite3VdbeAddOp2($1,25,$595,$596)|0);
            $597 = (($cnt$0157) + 1)|0;
            $cnt$1 = $597;
           } else {
            $cnt$1 = $cnt$0157;
           }
           $598 = (($589) + 8|0);
           $pIdx34$0149 = HEAP32[$598>>2]|0;
           $599 = ($pIdx34$0149|0)==(0|0);
           if ($599) {
            $cnt$2$lcssa = $cnt$1;
           } else {
            $cnt$2150 = $cnt$1;$pIdx34$0151 = $pIdx34$0149;
            while(1) {
             $600 = (($pIdx34$0151) + 44|0);
             $601 = HEAP32[$600>>2]|0;
             $602 = (($cnt$2150) + 2)|0;
             (_sqlite3VdbeAddOp2($1,25,$601,$602)|0);
             $603 = (($cnt$2150) + 1)|0;
             $604 = (($pIdx34$0151) + 20|0);
             $pIdx34$0 = HEAP32[$604>>2]|0;
             $605 = ($pIdx34$0|0)==(0|0);
             if ($605) {
              $cnt$2$lcssa = $603;
              break;
             } else {
              $cnt$2150 = $603;$pIdx34$0151 = $pIdx34$0;
             }
            }
           }
           $x32$0 = HEAP32[$x32$0158>>2]|0;
           $606 = ($x32$0|0)==(0|0);
           if ($606) {
            $cnt$0$lcssa = $cnt$2$lcssa;
            break;
           } else {
            $cnt$0157 = $cnt$2$lcssa;$x32$0158 = $x32$0;
           }
          }
         }
         $607 = HEAP32[$3>>2]|0;
         $608 = (($cnt$0$lcssa) + 8)|0;
         $609 = ($607|0)>($608|0);
         $$16 = $609 ? $607 : $608;
         HEAP32[$3>>2] = $$16;
         (_sqlite3VdbeAddOp3($1,123,2,$cnt$0$lcssa,1)|0);
         $610 = $i29$0188&255;
         _sqlite3VdbeChangeP5($1,$610);
         $611 = (_sqlite3VdbeAddOp1($1,76,2)|0);
         $612 = HEAP32[$6>>2]|0;
         $613 = (($612) + ($i29$0188<<4)|0);
         $614 = HEAP32[$613>>2]|0;
         HEAP32[$vararg_buffer11>>2] = $614;
         $615 = (_sqlite3MPrintf($0,21664,$vararg_buffer11)|0);
         (_sqlite3VdbeAddOp4($1,97,0,3,0,$615,-1)|0);
         (_sqlite3VdbeAddOp2($1,32,2,4)|0);
         (_sqlite3VdbeAddOp3($1,94,4,3,2)|0);
         (_sqlite3VdbeAddOp2($1,35,2,1)|0);
         _sqlite3VdbeJumpHere($1,$611);
         $x32$1183 = HEAP32[$586>>2]|0;
         $616 = ($x32$1183|0)==(0|0);
         $or$cond184 = $616 | $580;
         if (!($or$cond184)) {
          $x32$1185 = $x32$1183;
          while(1) {
           $617 = (($x32$1185) + 8|0);
           $618 = HEAP32[$617>>2]|0;
           $619 = (($618) + 8|0);
           $620 = HEAP32[$619>>2]|0;
           $621 = ($620|0)==(0|0);
           do {
            if (!($621)) {
             $622 = (($618) + 44|0);
             $623 = HEAP8[$622>>0]|0;
             $624 = $623 & 32;
             $625 = ($624<<24>>24)==(0);
             if ($625) {
              $639 = 0;
             } else {
              $626 = (_sqlite3PrimaryKeyIndex($618)|0);
              $639 = $626;
             }
             $627 = (_sqlite3VdbeAddOp1($1,132,1)|0);
             (_sqlite3VdbeAddOp2($1,24,0,0)|0);
             _sqlite3VdbeJumpHere($1,$627);
             _sqlite3ExprCacheClear($pParse);
             (_sqlite3OpenTableAndIndices($pParse,$618,52,1,0,$iDataCur,$iIdxCur)|0);
             (_sqlite3VdbeAddOp2($1,25,0,7)|0);
             $pIdx36$0163 = HEAP32[$619>>2]|0;
             $628 = ($pIdx36$0163|0)==(0|0);
             if ($628) {
              $j30$0$lcssa = 8;
             } else {
              $j30$0164 = 0;$pIdx36$0165 = $pIdx36$0163;
              while(1) {
               $629 = (($j30$0164) + 8)|0;
               (_sqlite3VdbeAddOp2($1,25,0,$629)|0);
               $630 = (($pIdx36$0165) + 20|0);
               $631 = (($j30$0164) + 1)|0;
               $pIdx36$0 = HEAP32[$630>>2]|0;
               $632 = ($pIdx36$0|0)==(0|0);
               if ($632) {
                break;
               } else {
                $j30$0164 = $631;$pIdx36$0165 = $pIdx36$0;
               }
              }
              $phitmp213 = (($j30$0164) + 9)|0;
              $j30$0$lcssa = $phitmp213;
             }
             $633 = HEAP32[$3>>2]|0;
             $634 = ($633|0)>($j30$0$lcssa|0);
             $$17 = $634 ? $633 : $j30$0$lcssa;
             HEAP32[$3>>2] = $$17;
             $635 = HEAP32[$iDataCur>>2]|0;
             (_sqlite3VdbeAddOp2($1,105,$635,0)|0);
             $636 = (_sqlite3VdbeAddOp2($1,37,7,1)|0);
             $pIdx36$1170 = HEAP32[$619>>2]|0;
             $637 = ($pIdx36$1170|0)==(0|0);
             if (!($637)) {
              $j30$1171 = 0;$pIdx36$1174 = $pIdx36$1170;$pPrior$0172 = 0;$r1$0173 = -1;
              while(1) {
               $638 = ($639|0)==($pIdx36$1174|0);
               if ($638) {
                $pPrior$1 = $pPrior$0172;$r1$1 = $r1$0173;
               } else {
                $640 = HEAP32[$iDataCur>>2]|0;
                $641 = (_sqlite3GenerateIndexKey($pParse,$pIdx36$1174,$640,0,0,$jmp3,$pPrior$0172,$r1$0173)|0);
                $642 = (($j30$1171) + 8)|0;
                (_sqlite3VdbeAddOp2($1,37,$642,1)|0);
                $643 = HEAP32[$iIdxCur>>2]|0;
                $644 = (($643) + ($j30$1171))|0;
                $645 = (($pIdx36$1174) + 52|0);
                $646 = HEAP16[$645>>1]|0;
                $647 = $646&65535;
                $648 = (_sqlite3VdbeAddOp4Int($1,66,$644,0,$641,$647)|0);
                (_sqlite3VdbeAddOp2($1,37,1,-1)|0);
                (_sqlite3VdbeAddOp4($1,97,0,3,0,21688,-2)|0);
                (_sqlite3VdbeAddOp3($1,94,7,3,3)|0);
                (_sqlite3VdbeAddOp4($1,97,0,4,0,21696,-2)|0);
                (_sqlite3VdbeAddOp3($1,94,4,3,3)|0);
                $649 = HEAP32[$pIdx36$1174>>2]|0;
                (_sqlite3VdbeAddOp4($1,97,0,4,0,$649,0)|0);
                (_sqlite3VdbeAddOp3($1,94,4,3,3)|0);
                (_sqlite3VdbeAddOp2($1,35,3,1)|0);
                $650 = (_sqlite3VdbeAddOp1($1,132,1)|0);
                (_sqlite3VdbeAddOp0($1,24)|0);
                _sqlite3VdbeJumpHere($1,$650);
                _sqlite3VdbeJumpHere($1,$648);
                $651 = HEAP32[$jmp3>>2]|0;
                _sqlite3VdbeResolveLabel($1,$651);
                $pPrior$1 = $pIdx36$1174;$r1$1 = $641;
               }
               $652 = (($pIdx36$1174) + 20|0);
               $653 = (($j30$1171) + 1)|0;
               $pIdx36$1 = HEAP32[$652>>2]|0;
               $654 = ($pIdx36$1|0)==(0|0);
               if ($654) {
                break;
               } else {
                $j30$1171 = $653;$pIdx36$1174 = $pIdx36$1;$pPrior$0172 = $pPrior$1;$r1$0173 = $r1$1;
               }
              }
             }
             $655 = HEAP32[$iDataCur>>2]|0;
             (_sqlite3VdbeAddOp2($1,9,$655,$636)|0);
             $656 = (($636) + -1)|0;
             _sqlite3VdbeJumpHere($1,$656);
             (_sqlite3VdbeAddOp4($1,97,0,2,0,21720,-2)|0);
             $pIdx36$2178 = HEAP32[$619>>2]|0;
             $657 = ($pIdx36$2178|0)==(0|0);
             if ($657) {
              break;
             } else {
              $j30$2179 = 0;$pIdx36$2180 = $pIdx36$2178;
             }
             while(1) {
              $658 = ($639|0)==($pIdx36$2180|0);
              if (!($658)) {
               $$idx29$val = HEAP32[$$idx29>>2]|0;
               $659 = (_sqlite3VdbeCurrentAddr($$idx29$val)|0);
               $660 = (($659) + 2)|0;
               (_sqlite3VdbeAddOp2($1,132,1,$660)|0);
               (_sqlite3VdbeAddOp2($1,24,0,0)|0);
               $661 = HEAP32[$iIdxCur>>2]|0;
               $662 = (($661) + ($j30$2179))|0;
               (_sqlite3VdbeAddOp2($1,49,$662,3)|0);
               $663 = (($j30$2179) + 8)|0;
               $664 = (($659) + 8)|0;
               (_sqlite3VdbeAddOp3($1,79,$663,$664,3)|0);
               _sqlite3VdbeChangeP5($1,-120);
               (_sqlite3VdbeAddOp2($1,37,1,-1)|0);
               $665 = HEAP32[$pIdx36$2180>>2]|0;
               (_sqlite3VdbeAddOp4($1,97,0,3,0,$665,0)|0);
               (_sqlite3VdbeAddOp3($1,94,3,2,7)|0);
               (_sqlite3VdbeAddOp2($1,35,7,1)|0);
              }
              $666 = (($pIdx36$2180) + 20|0);
              $667 = (($j30$2179) + 1)|0;
              $pIdx36$2 = HEAP32[$666>>2]|0;
              $668 = ($pIdx36$2|0)==(0|0);
              if ($668) {
               break;
              } else {
               $j30$2179 = $667;$pIdx36$2180 = $pIdx36$2;
              }
             }
            }
           } while(0);
           $x32$1 = HEAP32[$x32$1185>>2]|0;
           $669 = ($x32$1|0)==(0|0);
           if ($669) {
            break;
           } else {
            $x32$1185 = $x32$1;
           }
          }
         }
         $$pre231 = HEAP32[$575>>2]|0;
         $672 = $$pre231;
        } else {
         $672 = $769;
        }
        $670 = (($i29$0188) + 1)|0;
        $671 = ($670|0)<($672|0);
        if ($671) {
         $769 = $672;$i29$0188 = $670;
        } else {
         break;
        }
       }
      }
      $673 = (_sqlite3VdbeAddOpList($1,4,21632)|0);
      $674 = (0 - ($574))|0;
      _sqlite3VdbeChangeP2($1,$673,$674);
      $675 = (($673) + 1)|0;
      _sqlite3VdbeJumpHere($1,$675);
      $676 = (($673) + 2)|0;
      _sqlite3VdbeChangeP4($1,$676,21752,-2);
      break L21;
      break;
     }
     case 11:  {
      $677 = ($zRight$0|0)==(0|0);
      if ($677) {
       $678 = (_sqlite3ReadSchema($pParse)|0);
       $679 = ($678|0)==(0);
       if (!($679)) {
        break L21;
       }
       _sqlite3VdbeSetNumCols($1,1);
       _sqlite3VdbeSetColName($1,0,0,21912,0);
       (_sqlite3VdbeAddOp2($1,97,0,1)|0);
       $680 = HEAP32[$pParse>>2]|0;
       $681 = (($680) + 16|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = (($682) + 12|0);
       $684 = HEAP32[$683>>2]|0;
       $685 = (($684) + 77|0);
       $686 = HEAP8[$685>>0]|0;
       $687 = $686&255;
       $688 = (21760 + ($687<<3)|0);
       $689 = HEAP32[$688>>2]|0;
       _sqlite3VdbeChangeP4($1,-1,$689,-2);
       (_sqlite3VdbeAddOp2($1,35,1,1)|0);
       break L21;
      }
      $690 = HEAP32[$6>>2]|0;
      $691 = (($690) + 12|0);
      $692 = HEAP32[$691>>2]|0;
      $693 = (($692) + 78|0);
      $694 = HEAP16[$693>>1]|0;
      $695 = $694 & 5;
      $696 = ($695<<16>>16)==(1);
      if ($696) {
       break L21;
      } else {
       $698 = 21760;$701 = 21832;
      }
      while(1) {
       $702 = (_sqlite3_stricmp($zRight$0,$701)|0);
       $703 = ($702|0)==(0);
       if ($703) {
        label = 227;
        break;
       }
       $697 = (($698) + 8|0);
       $699 = HEAP32[$697>>2]|0;
       $700 = ($699|0)==(0|0);
       if ($700) {
        break;
       } else {
        $698 = $697;$701 = $699;
       }
      }
      if ((label|0) == 227) {
       $704 = (($698) + 4|0);
       $705 = HEAP8[$704>>0]|0;
       $706 = ($705<<24>>24)==(0);
       $$20 = $706 ? 2 : $705;
       $707 = HEAP32[$pParse>>2]|0;
       $708 = (($707) + 16|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = (($709) + 12|0);
       $711 = HEAP32[$710>>2]|0;
       $712 = (($711) + 77|0);
       HEAP8[$712>>0] = $$20;
       $$pr = HEAP32[$698>>2]|0;
       $713 = ($$pr|0)==(0|0);
       if (!($713)) {
        break L21;
       }
      }
      HEAP32[$vararg_buffer14>>2] = $zRight$0;
      _sqlite3ErrorMsg($pParse,21928,$vararg_buffer14);
      break L21;
      break;
     }
     case 0:  {
      _sqlite3VdbeUsesBtree($1,$4);
      $714 = HEAP8[$12>>0]|0;
      $715 = $714 << 24 >> 24;
      switch ($715|0) {
      case 83: case 115:  {
       $iCookie$0 = 1;
       label = 232;
       break;
      }
      case 65: case 97:  {
       $iCookie$0 = 8;
       label = 232;
       break;
      }
      case 70: case 102:  {
       $iCookie$057 = 0;
       break;
      }
      default: {
       $iCookie$0 = 6;
       label = 232;
      }
      }
      if ((label|0) == 232) {
       $716 = ($zRight$0|0)==(0|0);
       if ($716) {
        $iCookie$057 = $iCookie$0;
       } else {
        $717 = (_sqlite3VdbeAddOpList($1,3,21960)|0);
        _sqlite3VdbeChangeP1($1,$717,$4);
        $718 = (($717) + 1)|0;
        $719 = (_sqlite3Atoi($zRight$0)|0);
        _sqlite3VdbeChangeP1($1,$718,$719);
        $720 = (($717) + 2)|0;
        _sqlite3VdbeChangeP1($1,$720,$4);
        _sqlite3VdbeChangeP2($1,$720,$iCookie$0);
        break L21;
       }
      }
      $721 = (_sqlite3VdbeAddOpList($1,3,21976)|0);
      _sqlite3VdbeChangeP1($1,$721,$4);
      $722 = (($721) + 1)|0;
      _sqlite3VdbeChangeP1($1,$722,$4);
      _sqlite3VdbeChangeP3($1,$722,$iCookie$057);
      _sqlite3VdbeSetNumCols($1,1);
      _sqlite3VdbeSetColName($1,0,0,$12,(-1));
      break L21;
      break;
     }
     case 34:  {
      $729 = HEAP32[$pId2>>2]|0;
      $730 = ($729|0)!=(0|0);
      $731 = $730 ? $4 : 10;
      $732 = ($zRight$0|0)==(0|0);
      if ($732) {
       $eMode41$0 = 0;
      } else {
       $733 = (_sqlite3_stricmp($zRight$0,22008)|0);
       $734 = ($733|0)==(0);
       if ($734) {
        $eMode41$0 = 1;
       } else {
        $735 = (_sqlite3_stricmp($zRight$0,22016)|0);
        $736 = ($735|0)==(0);
        $$22 = $736 ? 2 : 0;
        $eMode41$0 = $$22;
       }
      }
      _sqlite3VdbeSetNumCols($1,3);
      HEAP32[$3>>2] = 3;
      _sqlite3VdbeSetColName($1,0,0,22024,0);
      _sqlite3VdbeSetColName($1,1,0,22032,0);
      _sqlite3VdbeSetColName($1,2,0,22040,0);
      (_sqlite3VdbeAddOp3($1,11,$731,$eMode41$0,1)|0);
      (_sqlite3VdbeAddOp2($1,35,1,3)|0);
      break L21;
      break;
     }
     case 33:  {
      $737 = ($zRight$0|0)==(0|0);
      if (!($737)) {
       $738 = (_sqlite3Atoi($zRight$0)|0);
       (_sqlite3_wal_autocheckpoint($0,$738)|0);
      }
      $739 = (($0) + 204|0);
      $740 = HEAP32[$739>>2]|0;
      $741 = ($740|0)==(149|0);
      if ($741) {
       $742 = (($0) + 208|0);
       $743 = HEAP32[$742>>2]|0;
       $744 = $743;
       $745 = ($744|0)<(0);
       $746 = $745 << 31 >> 31;
       $747 = $744;$748 = $746;
      } else {
       $747 = 0;$748 = 0;
      }
      _returnSingleInt($pParse,22056,$747,$748);
      break L21;
      break;
     }
     case 7:  {
      _sqlite3VdbeSetNumCols($1,1);
      HEAP32[$3>>2] = 1;
      _sqlite3VdbeSetColName($1,0,0,21992,0);
      $723 = (_sqlite3_compileoption_get(0)|0);
      $724 = ($723|0)==(0|0);
      if ($724) {
       break L21;
      } else {
       $726 = $723;$i40$0200 = 0;
      }
      while(1) {
       $725 = (($i40$0200) + 1)|0;
       (_sqlite3VdbeAddOp4($1,97,0,1,0,$726,0)|0);
       (_sqlite3VdbeAddOp2($1,35,1,1)|0);
       $727 = (_sqlite3_compileoption_get($725)|0);
       $728 = ($727|0)==(0|0);
       if ($728) {
        break;
       } else {
        $726 = $727;$i40$0200 = $725;
       }
      }
      break;
     }
     case 27:  {
      $755 = ($zRight$0|0)==(0|0);
      if (!($755)) {
       $756 = (_sqlite3Atoi64($zRight$0,$N,1000000,1)|0);
       $757 = ($756|0)==(0);
       if ($757) {
        $758 = $N;
        $759 = $758;
        $760 = HEAP32[$759>>2]|0;
        $761 = (($758) + 4)|0;
        $762 = $761;
        $763 = HEAP32[$762>>2]|0;
        (_sqlite3_soft_heap_limit64($760,$763)|0);
        $764 = tempRet0;
       }
      }
      $765 = (_sqlite3_soft_heap_limit64(-1,-1)|0);
      $766 = tempRet0;
      _returnSingleInt($pParse,22088,$765,$766);
      break L21;
      break;
     }
     case 26:  {
      (_sqlite3_db_release_memory($0)|0);
      break L21;
      break;
     }
     case 23:  {
      _returnSingleInt($pParse,21272,0,0);
      break L21;
      break;
     }
     case 31:  {
      $232 = ($zRight$0|0)==(0|0);
      if ($232) {
       $233 = (($0) + 63|0);
       $234 = HEAP8[$233>>0]|0;
       $235 = $234&255;
       _returnSingleInt($pParse,21288,$235,0);
       break L21;
      } else {
       _changeTempStorage($pParse,$zRight$0);
       break L21;
      }
      break;
     }
     case 9:  {
      _sqlite3VdbeSetNumCols($1,3);
      HEAP32[$3>>2] = 3;
      _sqlite3VdbeSetColName($1,0,0,21520,0);
      _sqlite3VdbeSetColName($1,1,0,21440,0);
      _sqlite3VdbeSetColName($1,2,0,21536,0);
      $409 = (($0) + 20|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = ($410|0)>(0);
      if ($411) {
       $768 = $410;$i19$0103 = 0;
      } else {
       break L21;
      }
      while(1) {
       $412 = HEAP32[$6>>2]|0;
       $413 = ((($412) + ($i19$0103<<4)|0) + 4|0);
       $414 = HEAP32[$413>>2]|0;
       $415 = ($414|0)==(0|0);
       if ($415) {
        $425 = $768;
       } else {
        (_sqlite3VdbeAddOp2($1,25,$i19$0103,1)|0);
        $416 = HEAP32[$6>>2]|0;
        $417 = (($416) + ($i19$0103<<4)|0);
        $418 = HEAP32[$417>>2]|0;
        (_sqlite3VdbeAddOp4($1,97,0,2,0,$418,0)|0);
        $419 = HEAP32[$6>>2]|0;
        $420 = ((($419) + ($i19$0103<<4)|0) + 4|0);
        $421 = HEAP32[$420>>2]|0;
        $$idx28 = (($421) + 4|0);
        $$idx28$val = HEAP32[$$idx28>>2]|0;
        $$idx28$val$idx$val = HEAP32[$$idx28$val>>2]|0;
        $422 = (_sqlite3BtreeGetFilename($$idx28$val$idx$val)|0);
        (_sqlite3VdbeAddOp4($1,97,0,3,0,$422,0)|0);
        (_sqlite3VdbeAddOp2($1,35,1,3)|0);
        $$pre230 = HEAP32[$409>>2]|0;
        $425 = $$pre230;
       }
       $423 = (($i19$0103) + 1)|0;
       $424 = ($423|0)<($425|0);
       if ($424) {
        $768 = $425;$i19$0103 = $423;
       } else {
        break;
       }
      }
      break;
     }
     case 6:  {
      _sqlite3VdbeSetNumCols($1,2);
      HEAP32[$3>>2] = 2;
      _sqlite3VdbeSetColName($1,0,0,21520,0);
      _sqlite3VdbeSetColName($1,1,0,21440,0);
      $426 = (($0) + 428|0);
      $p$0107 = HEAP32[$426>>2]|0;
      $427 = ($p$0107|0)==(0|0);
      if ($427) {
       break L21;
      } else {
       $i20$0108 = 0;$p$0109 = $p$0107;
      }
      while(1) {
       $428 = (($p$0109) + 8|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = (($i20$0108) + 1)|0;
       (_sqlite3VdbeAddOp2($1,25,$i20$0108,1)|0);
       $431 = HEAP32[$429>>2]|0;
       (_sqlite3VdbeAddOp4($1,97,0,2,0,$431,0)|0);
       (_sqlite3VdbeAddOp2($1,35,1,2)|0);
       $p$0 = HEAP32[$p$0109>>2]|0;
       $432 = ($p$0|0)==(0|0);
       if ($432) {
        break;
       } else {
        $i20$0108 = $430;$p$0109 = $p$0;
       }
      }
      break;
     }
     case 13:  {
      $433 = ($zRight$0|0)==(0|0);
      if ($433) {
       break L21;
      }
      $434 = (_sqlite3FindTable($0,$zRight$0,$22)|0);
      $435 = ($434|0)==(0|0);
      if ($435) {
       break L21;
      }
      $436 = (_sqlite3GetVdbe($pParse)|0);
      $437 = (($434) + 16|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = ($438|0)==(0|0);
      if ($439) {
       break L21;
      }
      _sqlite3VdbeSetNumCols($436,8);
      HEAP32[$3>>2] = 8;
      _sqlite3CodeVerifySchema($pParse,$4);
      _sqlite3VdbeSetColName($436,0,0,21544,0);
      _sqlite3VdbeSetColName($436,1,0,21520,0);
      _sqlite3VdbeSetColName($436,2,0,21488,0);
      _sqlite3VdbeSetColName($436,3,0,21552,0);
      _sqlite3VdbeSetColName($436,4,0,21560,0);
      _sqlite3VdbeSetColName($436,5,0,21568,0);
      _sqlite3VdbeSetColName($436,6,0,21584,0);
      _sqlite3VdbeSetColName($436,7,0,21600,0);
      $440 = (($434) + 4|0);
      $i22$0119 = 0;$pFK$0117 = $438;
      while(1) {
       $441 = (($pFK$0117) + 20|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = ($442|0)>(0);
       if ($443) {
        $444 = (($pFK$0117) + 25|0);
        $445 = (($pFK$0117) + 26|0);
        $446 = (($pFK$0117) + 8|0);
        $j$0113 = 0;
        while(1) {
         $447 = ((($pFK$0117) + ($j$0113<<3)|0) + 40|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = HEAP8[$444>>0]|0;
         $450 = (_actionName($449)|0);
         $451 = HEAP8[$445>>0]|0;
         $452 = (_actionName($451)|0);
         (_sqlite3VdbeAddOp2($436,25,$i22$0119,1)|0);
         (_sqlite3VdbeAddOp2($436,25,$j$0113,2)|0);
         $453 = HEAP32[$446>>2]|0;
         (_sqlite3VdbeAddOp4($436,97,0,3,0,$453,0)|0);
         $454 = ((($pFK$0117) + ($j$0113<<3)|0) + 36|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = HEAP32[$440>>2]|0;
         $457 = (($456) + (($455*24)|0)|0);
         $458 = HEAP32[$457>>2]|0;
         (_sqlite3VdbeAddOp4($436,97,0,4,0,$458,0)|0);
         $459 = ($448|0)!=(0|0);
         $460 = $459 ? 97 : 28;
         (_sqlite3VdbeAddOp4($436,$460,0,5,0,$448,0)|0);
         (_sqlite3VdbeAddOp4($436,97,0,6,0,$452,0)|0);
         (_sqlite3VdbeAddOp4($436,97,0,7,0,$450,0)|0);
         (_sqlite3VdbeAddOp4($436,97,0,8,0,21608,0)|0);
         (_sqlite3VdbeAddOp2($436,35,1,8)|0);
         $461 = (($j$0113) + 1)|0;
         $462 = HEAP32[$441>>2]|0;
         $463 = ($461|0)<($462|0);
         if ($463) {
          $j$0113 = $461;
         } else {
          break;
         }
        }
       }
       $464 = (($i22$0119) + 1)|0;
       $465 = (($pFK$0117) + 4|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = ($466|0)==(0|0);
       if ($467) {
        break;
       } else {
        $i22$0119 = $464;$pFK$0117 = $466;
       }
      }
      break;
     }
     case 15:  {
      $374 = ($zRight$0|0)==(0|0);
      if ($374) {
       break L21;
      }
      $375 = (_sqlite3FindIndex($0,$zRight$0,$22)|0);
      $376 = ($375|0)==(0|0);
      if ($376) {
       break L21;
      }
      $377 = (($375) + 12|0);
      $378 = HEAP32[$377>>2]|0;
      _sqlite3VdbeSetNumCols($1,3);
      HEAP32[$3>>2] = 3;
      _sqlite3CodeVerifySchema($pParse,$4);
      _sqlite3VdbeSetColName($1,0,0,21512,0);
      _sqlite3VdbeSetColName($1,1,0,21432,0);
      _sqlite3VdbeSetColName($1,2,0,21440,0);
      $379 = (($375) + 50|0);
      $380 = HEAP16[$379>>1]|0;
      $381 = ($380<<16>>16)==(0);
      if ($381) {
       break L21;
      }
      $382 = (($375) + 4|0);
      $383 = (($378) + 4|0);
      $i15$093 = 0;
      while(1) {
       $384 = HEAP32[$382>>2]|0;
       $385 = (($384) + ($i15$093<<1)|0);
       $386 = HEAP16[$385>>1]|0;
       (_sqlite3VdbeAddOp2($1,25,$i15$093,1)|0);
       $387 = $386 << 16 >> 16;
       (_sqlite3VdbeAddOp2($1,25,$387,2)|0);
       $388 = HEAP32[$383>>2]|0;
       $389 = (($388) + (($387*24)|0)|0);
       $390 = HEAP32[$389>>2]|0;
       (_sqlite3VdbeAddOp4($1,97,0,3,0,$390,0)|0);
       (_sqlite3VdbeAddOp2($1,35,1,3)|0);
       $391 = (($i15$093) + 1)|0;
       $392 = HEAP16[$379>>1]|0;
       $393 = $392&65535;
       $394 = ($391|0)<($393|0);
       if ($394) {
        $i15$093 = $391;
       } else {
        break;
       }
      }
      break;
     }
     default: {
      $749 = ($zRight$0|0)==(0|0);
      if (!($749)) {
       $750 = (_sqlite3Atoi($zRight$0)|0);
       (_sqlite3_busy_timeout($0,$750)|0);
      }
      $751 = (($0) + 484|0);
      $752 = HEAP32[$751>>2]|0;
      $753 = ($752|0)<(0);
      $754 = $753 << 31 >> 31;
      _returnSingleInt($pParse,22080,$752,$754);
      break L21;
     }
     }
    } while(0);
   } else {
    $35 = HEAP32[$aFcntl>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     HEAP32[$vararg_buffer1>>2] = $35;
     _sqlite3ErrorMsg($pParse,1712,$vararg_buffer1);
     $37 = HEAP32[$aFcntl>>2]|0;
     _sqlite3_free($37);
    }
    $38 = (($pParse) + 68|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 1)|0;
    HEAP32[$38>>2] = $40;
    $41 = (($pParse) + 12|0);
    HEAP32[$41>>2] = $29;
    break;
   }
  }
 } while(0);
 _sqlite3DbFree($0,$12);
 _sqlite3DbFree($0,$zRight$0);
 STACKTOP = sp;return;
}
function _sqlite3FinishTrigger($pParse,$pStepList,$pAll) {
 $pParse = $pParse|0;
 $pStepList = $pStepList|0;
 $pAll = $pAll|0;
 var $$01 = 0, $$1 = 0, $$pr = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $nameToken = 0, $or$cond = 0, $pTrig$0 = 0, $sFix = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $sFix = sp + 40|0;
 $nameToken = sp + 32|0;
 $0 = (($pParse) + 492|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 HEAP32[$0>>2] = 0;
 $3 = (($pParse) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 do {
  if ($or$cond) {
   $$1 = $pStepList;$pTrig$0 = $1;
  } else {
   $7 = HEAP32[$1>>2]|0;
   $8 = (($1) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_sqlite3SchemaToIndex($2,$9)|0);
   $11 = (($1) + 28|0);
   HEAP32[$11>>2] = $pStepList;
   $12 = ($pStepList|0)==(0|0);
   if ($12) {
    $17 = $7;
   } else {
    $$01 = $pStepList;
    while(1) {
     $13 = (($$01) + 4|0);
     HEAP32[$13>>2] = $1;
     $14 = (($$01) + 32|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      break;
     } else {
      $$01 = $15;
     }
    }
    $$pre = HEAP32[$1>>2]|0;
    $17 = $$pre;
   }
   HEAP32[$nameToken>>2] = $17;
   $18 = (_sqlite3Strlen30($17)|0);
   $19 = (($nameToken) + 4|0);
   HEAP32[$19>>2] = $18;
   _sqlite3FixInit($sFix,$pParse,$10,1752,$nameToken);
   $20 = HEAP32[$11>>2]|0;
   $21 = (_sqlite3FixTriggerStep($sFix,$20)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = (($1) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_sqlite3FixExpr($sFix,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = (($2) + 137|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $30 = (_sqlite3GetVdbe($pParse)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$1 = 0;$pTrig$0 = $1;
       break;
      }
      _sqlite3BeginWriteOperation($pParse,0,$10);
      $32 = HEAP32[$pAll>>2]|0;
      $33 = (($pAll) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_sqlite3DbStrNDup($2,$32,$34)|0);
      $36 = (($2) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + ($10<<4)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($10|0)==(1);
      $41 = $40 ? 15056 : 15080;
      $42 = (($1) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP32[$vararg_buffer>>2] = $39;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $41;
      $vararg_ptr2 = (($vararg_buffer) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $7;
      $vararg_ptr3 = (($vararg_buffer) + 12|0);
      HEAP32[$vararg_ptr3>>2] = $43;
      $vararg_ptr4 = (($vararg_buffer) + 16|0);
      HEAP32[$vararg_ptr4>>2] = $35;
      _sqlite3NestedParse($pParse,20304,$vararg_buffer);
      _sqlite3DbFree($2,$35);
      _sqlite3ChangeCookie($pParse,$10);
      HEAP32[$vararg_buffer5>>2] = $7;
      $44 = (_sqlite3MPrintf($2,20368,$vararg_buffer5)|0);
      _sqlite3VdbeAddParseSchemaOp($30,$10,$44);
      $$pr = HEAP8[$27>>0]|0;
      $45 = ($$pr<<24>>24)==(0);
      if ($45) {
       $$1 = 0;$pTrig$0 = $1;
       break;
      } else {
       $$pre$phiZ2D = $36;
      }
     } else {
      $$pre2 = (($2) + 16|0);
      $$pre$phiZ2D = $$pre2;
     }
     $46 = HEAP32[$$pre$phiZ2D>>2]|0;
     $47 = ((($46) + ($10<<4)|0) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 40|0);
     $50 = (_sqlite3Strlen30($7)|0);
     $51 = (_sqlite3HashInsert($49,$7,$50,$1)|0);
     $52 = ($51|0)==(0|0);
     if (!($52)) {
      $53 = (($2) + 64|0);
      HEAP8[$53>>0] = 1;
      $$1 = 0;$pTrig$0 = $51;
      break;
     }
     $54 = HEAP32[$8>>2]|0;
     $55 = (($1) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = (($1) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (_sqlite3Strlen30($59)|0);
      $61 = (($54) + 8|0);
      $62 = (_sqlite3HashFind($61,$59,$60)|0);
      $63 = (($62) + 64|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($1) + 32|0);
      HEAP32[$65>>2] = $64;
      HEAP32[$63>>2] = $1;
      $$1 = 0;$pTrig$0 = $51;
     } else {
      $$1 = 0;$pTrig$0 = $51;
     }
    } else {
     $$1 = 0;$pTrig$0 = $1;
    }
   } else {
    $$1 = 0;$pTrig$0 = $1;
   }
  }
 } while(0);
 _sqlite3DeleteTrigger($2,$pTrig$0);
 _sqlite3DeleteTriggerStep($2,$$1);
 STACKTOP = sp;return;
}
function _sqlite3BeginTrigger($pParse,$pName1,$pName2,$tr_tm,$op,$pColumns,$pTableName,$pWhen,$isTemp,$noErr) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $tr_tm = $tr_tm|0;
 $op = $op|0;
 $pColumns = $pColumns|0;
 $pTableName = $pTableName|0;
 $pWhen = $pWhen|0;
 $isTemp = $isTemp|0;
 $noErr = $noErr|0;
 var $$iDb$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $code$0 = 0, $iDb$0 = 0, $iDb$1 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0;
 var $pName = 0, $pTrigger$0 = 0, $sFix = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $zName$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pName = sp + 80|0;
 $sFix = sp + 56|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($isTemp|0)!=(0);
 do {
  if ($1) {
   $2 = (($pName2) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    HEAP32[$pName>>2] = $pName1;
    $iDb$0 = 1;
    label = 6;
    break;
   } else {
    _sqlite3ErrorMsg($pParse,19960,$vararg_buffer);
    $pTrigger$0 = 0;$zName$0 = 0;
    break;
   }
  } else {
   $5 = (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pName)|0);
   $6 = ($5|0)<(0);
   if ($6) {
    $pTrigger$0 = 0;$zName$0 = 0;
   } else {
    $iDb$0 = $5;
    label = 6;
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $7 = ($pTableName|0)==(0|0);
   if ($7) {
    $pTrigger$0 = 0;$zName$0 = 0;
   } else {
    $8 = (($0) + 64|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = (($0) + 137|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(0);
     $14 = ($iDb$0|0)==(1);
     $or$cond = $13 | $14;
     if (!($or$cond)) {
      $15 = (($pTableName) + 12|0);
      $16 = HEAP32[$15>>2]|0;
      _sqlite3DbFree($0,$16);
      HEAP32[$15>>2] = 0;
     }
     $17 = (_sqlite3SrcListLookup($pParse,$pTableName)|0);
     $18 = HEAP8[$11>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $20 = (($pName2) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)!=(0);
      $23 = ($17|0)==(0|0);
      $or$cond1 = $22 | $23;
      if ($or$cond1) {
       $iDb$1 = $iDb$0;
      } else {
       $24 = (($17) + 68|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($0) + 16|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($27) + 28|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($25|0)==($29|0);
       $$iDb$0 = $30 ? 1 : $iDb$0;
       $iDb$1 = $$iDb$0;
      }
     } else {
      $iDb$1 = $iDb$0;
     }
     $31 = HEAP8[$8>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $33 = HEAP32[$pName>>2]|0;
      _sqlite3FixInit($sFix,$pParse,$iDb$1,1752,$33);
      $34 = (_sqlite3FixSrcList($sFix,$pTableName)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $36 = (_sqlite3SrcListLookup($pParse,$pTableName)|0);
       $37 = ($36|0)==(0|0);
       if ($37) {
        $38 = (($0) + 136|0);
        $39 = HEAP8[$38>>0]|0;
        $40 = ($39<<24>>24)==(1);
        if (!($40)) {
         $pTrigger$0 = 0;$zName$0 = 0;
         break;
        }
        $41 = (($0) + 138|0);
        HEAP8[$41>>0] = 1;
        $pTrigger$0 = 0;$zName$0 = 0;
        break;
       }
       $42 = (($36) + 44|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43 & 16;
       $45 = ($44<<24>>24)==(0);
       if (!($45)) {
        _sqlite3ErrorMsg($pParse,20008,$vararg_buffer1);
        $pTrigger$0 = 0;$zName$0 = 0;
        break;
       }
       $46 = (_sqlite3NameFromToken($0,$33)|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $pTrigger$0 = 0;$zName$0 = 0;
       } else {
        $48 = (_sqlite3CheckObjectName($pParse,$46)|0);
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = (($0) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ((($51) + ($iDb$1<<4)|0) + 12|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($53) + 40|0);
         $55 = (_sqlite3Strlen30($46)|0);
         $56 = (_sqlite3HashFind($54,$46,$55)|0);
         $57 = ($56|0)==(0|0);
         if (!($57)) {
          $58 = ($noErr|0)==(0);
          if ($58) {
           HEAP32[$vararg_buffer3>>2] = $33;
           _sqlite3ErrorMsg($pParse,20056,$vararg_buffer3);
           $pTrigger$0 = 0;$zName$0 = $46;
           break;
          } else {
           _sqlite3CodeVerifySchema($pParse,$iDb$1);
           $pTrigger$0 = 0;$zName$0 = $46;
           break;
          }
         }
         $59 = HEAP32[$36>>2]|0;
         $60 = (_sqlite3_strnicmp($59,15296,7)|0);
         $61 = ($60|0)==(0);
         if ($61) {
          _sqlite3ErrorMsg($pParse,20088,$vararg_buffer5);
          $62 = (($pParse) + 68|0);
          $63 = HEAP32[$62>>2]|0;
          $64 = (($63) + 1)|0;
          HEAP32[$62>>2] = $64;
          $pTrigger$0 = 0;$zName$0 = $46;
          break;
         }
         $65 = (($36) + 12|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = ($66|0)==(0|0);
         $68 = ($tr_tm|0)==(49);
         $or$cond2 = $67 | $68;
         if (!($or$cond2)) {
          $69 = ($tr_tm|0)==(35);
          $70 = $69 ? 20168 : 20176;
          HEAP32[$vararg_buffer7>>2] = $70;
          $vararg_ptr10 = (($vararg_buffer7) + 4|0);
          HEAP32[$vararg_ptr10>>2] = $pTableName;
          $vararg_ptr11 = (($vararg_buffer7) + 8|0);
          HEAP32[$vararg_ptr11>>2] = 0;
          _sqlite3ErrorMsg($pParse,20128,$vararg_buffer7);
          $pTrigger$0 = 0;$zName$0 = $46;
          break;
         }
         $or$cond3 = $67 & $68;
         if ($or$cond3) {
          HEAP32[$vararg_buffer12>>2] = $pTableName;
          $vararg_ptr15 = (($vararg_buffer12) + 4|0);
          HEAP32[$vararg_ptr15>>2] = 0;
          _sqlite3ErrorMsg($pParse,20184,$vararg_buffer12);
          $pTrigger$0 = 0;$zName$0 = $46;
          break;
         }
         $71 = (($36) + 68|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (_sqlite3SchemaToIndex($0,$72)|0);
         $74 = (($51) + ($73<<4)|0);
         $75 = HEAP32[$74>>2]|0;
         if ($1) {
          $76 = (($51) + 16|0);
          $77 = HEAP32[$76>>2]|0;
          $79 = $77;
         } else {
          $79 = $75;
         }
         $78 = ($73|0)==(1);
         $brmerge = $78 | $1;
         $code$0 = $brmerge ? 5 : 7;
         $80 = (_sqlite3AuthCheck($pParse,$code$0,$46,$59,$79)|0);
         $81 = ($80|0)==(0);
         if ($81) {
          $82 = $78 ? 15056 : 15080;
          $83 = (_sqlite3AuthCheck($pParse,18,$82,0,$75)|0);
          $84 = ($83|0)==(0);
          if ($84) {
           $85 = (_sqlite3DbMallocZero($0,36)|0);
           $86 = ($85|0)==(0|0);
           if ($86) {
            $pTrigger$0 = $85;$zName$0 = $46;
           } else {
            HEAP32[$85>>2] = $46;
            $87 = (($pTableName) + 16|0);
            $88 = HEAP32[$87>>2]|0;
            $89 = (_sqlite3DbStrDup($0,$88)|0);
            $90 = (($85) + 4|0);
            HEAP32[$90>>2] = $89;
            $91 = HEAP32[$50>>2]|0;
            $92 = ((($91) + ($iDb$1<<4)|0) + 12|0);
            $93 = HEAP32[$92>>2]|0;
            $94 = (($85) + 20|0);
            HEAP32[$94>>2] = $93;
            $95 = HEAP32[$71>>2]|0;
            $96 = (($85) + 24|0);
            HEAP32[$96>>2] = $95;
            $97 = $op&255;
            $98 = (($85) + 8|0);
            HEAP8[$98>>0] = $97;
            $99 = ($tr_tm|0)==(35);
            $100 = $68 | $99;
            $101 = $100 ? 1 : 2;
            $102 = (($85) + 9|0);
            HEAP8[$102>>0] = $101;
            $103 = (_sqlite3ExprDup($0,$pWhen,1)|0);
            $104 = (($85) + 12|0);
            HEAP32[$104>>2] = $103;
            $105 = (_sqlite3IdListDup($0,$pColumns)|0);
            $106 = (($85) + 16|0);
            HEAP32[$106>>2] = $105;
            $107 = (($pParse) + 492|0);
            HEAP32[$107>>2] = $85;
            $pTrigger$0 = $85;$zName$0 = 0;
           }
          } else {
           $pTrigger$0 = 0;$zName$0 = $46;
          }
         } else {
          $pTrigger$0 = 0;$zName$0 = $46;
         }
        } else {
         $pTrigger$0 = 0;$zName$0 = $46;
        }
       }
      } else {
       $pTrigger$0 = 0;$zName$0 = 0;
      }
     } else {
      $pTrigger$0 = 0;$zName$0 = 0;
     }
    } else {
     $pTrigger$0 = 0;$zName$0 = 0;
    }
   }
  }
 } while(0);
 _sqlite3DbFree($0,$zName$0);
 _sqlite3SrcListDelete($0,$pTableName);
 _sqlite3IdListDelete($0,$pColumns);
 _sqlite3ExprDelete($0,$pWhen);
 $108 = (($pParse) + 492|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  STACKTOP = sp;return;
 }
 _sqlite3DeleteTrigger($0,$pTrigger$0);
 STACKTOP = sp;return;
}
function _sqlite3TriggerUpdateStep($db,$pTableName,$pEList,$pWhere,$orconf) {
 $db = $db|0;
 $pTableName = $pTableName|0;
 $pEList = $pEList|0;
 $pWhere = $pWhere|0;
 $orconf = $orconf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_triggerStepAllocate($db,110,$pTableName)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_sqlite3ExprListDup($db,$pEList,1)|0);
  $3 = (($0) + 24|0);
  HEAP32[$3>>2] = $2;
  $4 = (_sqlite3ExprDup($db,$pWhere,1)|0);
  $5 = (($0) + 20|0);
  HEAP32[$5>>2] = $4;
  $6 = (($0) + 1|0);
  HEAP8[$6>>0] = $orconf;
 }
 _sqlite3ExprListDelete($db,$pEList);
 _sqlite3ExprDelete($db,$pWhere);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3TriggerInsertStep($db,$pTableName,$pColumn,$pSelect,$orconf) {
 $db = $db|0;
 $pTableName = $pTableName|0;
 $pColumn = $pColumn|0;
 $pSelect = $pSelect|0;
 $orconf = $orconf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_triggerStepAllocate($db,108,$pTableName)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _sqlite3IdListDelete($db,$pColumn);
  _sqlite3SelectDelete($db,$pSelect);
  STACKTOP = sp;return ($0|0);
 } else {
  $2 = (_sqlite3SelectDup($db,$pSelect,1)|0);
  $3 = (($0) + 8|0);
  HEAP32[$3>>2] = $2;
  $4 = (($0) + 28|0);
  HEAP32[$4>>2] = $pColumn;
  $5 = (($0) + 1|0);
  HEAP8[$5>>0] = $orconf;
  _sqlite3SelectDelete($db,$pSelect);
  STACKTOP = sp;return ($0|0);
 }
 return 0|0;
}
function _sqlite3TriggerDeleteStep($db,$pTableName,$pWhere) {
 $db = $db|0;
 $pTableName = $pTableName|0;
 $pWhere = $pWhere|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_triggerStepAllocate($db,109,$pTableName)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_sqlite3ExprDup($db,$pWhere,1)|0);
  $3 = (($0) + 20|0);
  HEAP32[$3>>2] = $2;
  $4 = (($0) + 1|0);
  HEAP8[$4>>0] = 10;
 }
 _sqlite3ExprDelete($db,$pWhere);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3TriggerSelectStep($db,$pSelect) {
 $db = $db|0;
 $pSelect = $pSelect|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3DbMallocZero($db,40)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _sqlite3SelectDelete($db,$pSelect);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP8[$0>>0] = 119;
  $2 = (($0) + 8|0);
  HEAP32[$2>>2] = $pSelect;
  $3 = (($0) + 1|0);
  HEAP8[$3>>0] = 10;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3DropTrigger($pParse,$pName,$noErr) {
 $pParse = $pParse|0;
 $pName = $pName|0;
 $noErr = $noErr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pTrigger$02 = 0, $pTrigger$1 = 0, $pTrigger$2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $4 = (_sqlite3ReadSchema($pParse)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  _sqlite3SrcListDelete($0,$pName);
  STACKTOP = sp;return;
 }
 $6 = (($pName) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pName) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3Strlen30($9)|0);
 $11 = (($0) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = ($7|0)==(0|0);
  $15 = (($0) + 16|0);
  $i$01 = 0;$pTrigger$02 = 0;
  while(1) {
   $16 = ($i$01|0)<(2);
   $17 = $16&1;
   $18 = $17 ^ $i$01;
   $$pre = HEAP32[$15>>2]|0;
   if ($14) {
    label = 7;
   } else {
    $19 = (($$pre) + ($18<<4)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_sqlite3_stricmp($20,$7)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     label = 7;
    } else {
     $pTrigger$1 = $pTrigger$02;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $23 = ((($$pre) + ($18<<4)|0) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + 40|0);
    $26 = (_sqlite3HashFind($25,$9,$10)|0);
    $27 = ($26|0)==(0|0);
    if ($27) {
     $pTrigger$1 = $26;
    } else {
     $pTrigger$2 = $26;
     break;
    }
   }
   $28 = (($i$01) + 1)|0;
   $29 = ($28|0)<($12|0);
   if ($29) {
    $i$01 = $28;$pTrigger$02 = $pTrigger$1;
   } else {
    $pTrigger$2 = $pTrigger$1;
    break;
   }
  }
  $30 = ($pTrigger$2|0)==(0|0);
  if (!($30)) {
   _sqlite3DropTriggerPtr($pParse,$pTrigger$2);
   _sqlite3SrcListDelete($0,$pName);
   STACKTOP = sp;return;
  }
 }
 $31 = ($noErr|0)==(0);
 if ($31) {
  HEAP32[$vararg_buffer>>2] = $pName;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  _sqlite3ErrorMsg($pParse,19896,$vararg_buffer);
 } else {
  _sqlite3CodeVerifyNamedSchema($pParse,$7);
 }
 $32 = (($pParse) + 17|0);
 HEAP8[$32>>0] = 1;
 _sqlite3SrcListDelete($0,$pName);
 STACKTOP = sp;return;
}
function _sqlite3Attach($pParse,$p,$pDbname,$pKey) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pDbname = $pDbname|0;
 $pKey = $pKey|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _codeAttach($pParse,24,19656,$p,$p,$pDbname,$pKey);
 STACKTOP = sp;return;
}
function _sqlite3Detach($pParse,$pDbname) {
 $pParse = $pParse|0;
 $pDbname = $pDbname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _codeAttach($pParse,25,19472,$pDbname,0,0,$pDbname);
 STACKTOP = sp;return;
}
function _sqlite3Reindex($pParse,$pName1,$pName2) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pObjName = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $pObjName = sp + 4|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3ReadSchema($pParse)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($pName1|0)==(0|0);
 if ($3) {
  _reindexDatabases($pParse,0);
  STACKTOP = sp;return;
 }
 $4 = ($pName2|0)==(0|0);
 if ($4) {
  label = 6;
 } else {
  $5 = HEAP32[$pName2>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 6;
  }
 }
 do {
  if ((label|0) == 6) {
   $7 = HEAP32[$pParse>>2]|0;
   $8 = (_sqlite3NameFromToken($7,$pName1)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    STACKTOP = sp;return;
   }
   $10 = (($0) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 77|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = (_sqlite3FindCollSeq($0,$15,$8,0)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    _sqlite3DbFree($0,$8);
    break;
   }
   _reindexDatabases($pParse,$8);
   _sqlite3DbFree($0,$8);
   STACKTOP = sp;return;
  }
 } while(0);
 $18 = (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pObjName)|0);
 $19 = ($18|0)<(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$pObjName>>2]|0;
 $21 = (_sqlite3NameFromToken($0,$20)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = (($0) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($18<<4)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (_sqlite3FindTable($0,$21,$26)|0);
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _reindexTable($pParse,$27,0);
  _sqlite3DbFree($0,$21);
  STACKTOP = sp;return;
 }
 $29 = (_sqlite3FindIndex($0,$21,$26)|0);
 _sqlite3DbFree($0,$21);
 $30 = ($29|0)==(0|0);
 if ($30) {
  _sqlite3ErrorMsg($pParse,19200,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _sqlite3BeginWriteOperation($pParse,0,$18);
  _sqlite3RefillIndex($pParse,$29,-1);
  STACKTOP = sp;return;
 }
}
function _sqlite3Analyze($pParse,$pName1,$pName2) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, $pTableName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pTableName = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3ReadSchema($pParse)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($pName1|0)==(0|0);
 if ($3) {
  $4 = (($0) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $39 = $5;$i$01 = 0;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $7 = ($i$01|0)==(1);
   if ($7) {
    $10 = $39;
   } else {
    _analyzeDatabase($pParse,$i$01);
    $$pre = HEAP32[$4>>2]|0;
    $10 = $$pre;
   }
   $8 = (($i$01) + 1)|0;
   $9 = ($8|0)<($10|0);
   if ($9) {
    $39 = $10;$i$01 = $8;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $11 = (($pName2) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $24 = (_sqlite3TwoPartName($pParse,$pName1,$pName2,$pTableName)|0);
  $25 = ($24|0)>(-1);
  if (!($25)) {
   STACKTOP = sp;return;
  }
  $26 = (($0) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<4)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$pTableName>>2]|0;
  $31 = (_sqlite3NameFromToken($0,$30)|0);
  $32 = ($31|0)==(0|0);
  if ($32) {
   STACKTOP = sp;return;
  }
  $33 = (_sqlite3FindIndex($0,$31,$29)|0);
  $34 = ($33|0)==(0|0);
  if ($34) {
   $37 = (_sqlite3LocateTable($pParse,0,$31,$29)|0);
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    _analyzeTable($pParse,$37,0);
   }
  } else {
   $35 = (($33) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   _analyzeTable($pParse,$36,$33);
  }
  _sqlite3DbFree($0,$31);
  STACKTOP = sp;return;
 }
 $14 = (_sqlite3FindDb($0,$pName1)|0);
 $15 = ($14|0)>(-1);
 if ($15) {
  _analyzeDatabase($pParse,$14);
  STACKTOP = sp;return;
 }
 $16 = (_sqlite3NameFromToken($0,$pName1)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = (_sqlite3FindIndex($0,$16,0)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $22 = (_sqlite3LocateTable($pParse,0,$16,0)|0);
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   _analyzeTable($pParse,$22,0);
  }
 } else {
  $20 = (($18) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _analyzeTable($pParse,$21,$18);
 }
 _sqlite3DbFree($0,$16);
 STACKTOP = sp;return;
}
function _sqlite3AlterRenameTable($pParse,$pSrc,$pName) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 $pName = $pName|0;
 var $$ = 0, $$idx$val = 0, $$idx1$val = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $p$04 = 0, $pVTab$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $zName$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 64|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (($pSrc) + 8|0);
   $7 = (_sqlite3LocateTableItem($pParse,0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $zName$0 = 0;
   } else {
    $9 = HEAP32[$pParse>>2]|0;
    $10 = (($7) + 68|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_sqlite3SchemaToIndex($9,$11)|0);
    $13 = (($0) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($12<<4)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$1>>2]|0;
    $18 = $17 | 2097152;
    HEAP32[$1>>2] = $18;
    $19 = (_sqlite3NameFromToken($0,$pName)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     $zName$0 = 0;
    } else {
     $21 = (_sqlite3FindTable($0,$19,$16)|0);
     $22 = ($21|0)==(0|0);
     if ($22) {
      $23 = (_sqlite3FindIndex($0,$19,$16)|0);
      $24 = ($23|0)==(0|0);
      if ($24) {
       $25 = HEAP32[$7>>2]|0;
       $26 = (_isSystemTable($pParse,$25)|0);
       $27 = ($26|0)==(0);
       if (!($27)) {
        $zName$0 = $19;
        break;
       }
       $28 = (_sqlite3CheckObjectName($pParse,$19)|0);
       $29 = ($28|0)==(0);
       if (!($29)) {
        $zName$0 = $19;
        break;
       }
       $30 = (($7) + 12|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0|0);
       $33 = HEAP32[$7>>2]|0;
       if (!($32)) {
        HEAP32[$vararg_buffer1>>2] = $33;
        _sqlite3ErrorMsg($pParse,15816,$vararg_buffer1);
        $zName$0 = $19;
        break;
       }
       $34 = (_sqlite3AuthCheck($pParse,26,$16,$33,0)|0);
       $35 = ($34|0)==(0);
       if (!($35)) {
        $zName$0 = $19;
        break;
       }
       $36 = (_sqlite3ViewGetColumnNames($pParse,$7)|0);
       $37 = ($36|0)==(0);
       if (!($37)) {
        $zName$0 = $19;
        break;
       }
       $38 = (($7) + 44|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = $39 & 16;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $pVTab$0 = 0;
       } else {
        $42 = (_sqlite3GetVTable($0,$7)|0);
        $43 = (($42) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = HEAP32[$44>>2]|0;
        $46 = (($45) + 76|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)==(0|0);
        $$ = $48 ? 0 : $42;
        $pVTab$0 = $$;
       }
       $49 = (_sqlite3GetVdbe($pParse)|0);
       $50 = ($49|0)==(0|0);
       if ($50) {
        $zName$0 = $19;
        break;
       }
       $51 = ($pVTab$0|0)!=(0|0);
       $52 = $51&1;
       _sqlite3BeginWriteOperation($pParse,$52,$12);
       _sqlite3ChangeCookie($pParse,$12);
       if ($51) {
        $53 = (($pParse) + 76|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$53>>2] = $55;
        (_sqlite3VdbeAddOp4($49,97,0,$55,0,$19,0)|0);
        (_sqlite3VdbeAddOp4($49,151,$55,0,0,$pVTab$0,-10)|0);
        _sqlite3MayAbort($pParse);
       }
       $56 = HEAP32[$7>>2]|0;
       $57 = (_sqlite3Utf8CharLen($56,-1)|0);
       $58 = HEAP32[$1>>2]|0;
       $59 = $58 & 524288;
       $60 = ($59|0)==(0);
       if (!($60)) {
        $$idx3$val = HEAP32[$10>>2]|0;
        $61 = (_whereForeignKeys($pParse,$56,$$idx3$val)|0);
        $62 = ($61|0)==(0|0);
        if (!($62)) {
         $63 = ($12|0)==(1);
         $64 = $63 ? 15056 : 15080;
         HEAP32[$vararg_buffer4>>2] = $16;
         $vararg_ptr7 = (($vararg_buffer4) + 4|0);
         HEAP32[$vararg_ptr7>>2] = $64;
         $vararg_ptr8 = (($vararg_buffer4) + 8|0);
         HEAP32[$vararg_ptr8>>2] = $56;
         $vararg_ptr9 = (($vararg_buffer4) + 12|0);
         HEAP32[$vararg_ptr9>>2] = $19;
         $vararg_ptr10 = (($vararg_buffer4) + 16|0);
         HEAP32[$vararg_ptr10>>2] = $61;
         _sqlite3NestedParse($pParse,15848,$vararg_buffer4);
         _sqlite3DbFree($0,$61);
        }
       }
       $65 = ($12|0)==(1);
       $66 = $65 ? 15056 : 15080;
       HEAP32[$vararg_buffer11>>2] = $16;
       $vararg_ptr14 = (($vararg_buffer11) + 4|0);
       HEAP32[$vararg_ptr14>>2] = $66;
       $vararg_ptr15 = (($vararg_buffer11) + 8|0);
       HEAP32[$vararg_ptr15>>2] = $19;
       $vararg_ptr16 = (($vararg_buffer11) + 12|0);
       HEAP32[$vararg_ptr16>>2] = $19;
       $vararg_ptr17 = (($vararg_buffer11) + 16|0);
       HEAP32[$vararg_ptr17>>2] = $19;
       $vararg_ptr18 = (($vararg_buffer11) + 20|0);
       HEAP32[$vararg_ptr18>>2] = $19;
       $vararg_ptr19 = (($vararg_buffer11) + 24|0);
       HEAP32[$vararg_ptr19>>2] = $19;
       $vararg_ptr20 = (($vararg_buffer11) + 28|0);
       HEAP32[$vararg_ptr20>>2] = $57;
       $vararg_ptr21 = (($vararg_buffer11) + 32|0);
       HEAP32[$vararg_ptr21>>2] = $56;
       _sqlite3NestedParse($pParse,15920,$vararg_buffer11);
       $67 = (_sqlite3FindTable($0,16304,$16)|0);
       $68 = ($67|0)==(0|0);
       if (!($68)) {
        $69 = HEAP32[$7>>2]|0;
        HEAP32[$vararg_buffer22>>2] = $16;
        $vararg_ptr25 = (($vararg_buffer22) + 4|0);
        HEAP32[$vararg_ptr25>>2] = $19;
        $vararg_ptr26 = (($vararg_buffer22) + 8|0);
        HEAP32[$vararg_ptr26>>2] = $69;
        _sqlite3NestedParse($pParse,16320,$vararg_buffer22);
       }
       $70 = (_whereTempTriggers($pParse,$7)|0);
       $71 = ($70|0)==(0|0);
       if (!($71)) {
        HEAP32[$vararg_buffer27>>2] = $19;
        $vararg_ptr30 = (($vararg_buffer27) + 4|0);
        HEAP32[$vararg_ptr30>>2] = $19;
        $vararg_ptr31 = (($vararg_buffer27) + 8|0);
        HEAP32[$vararg_ptr31>>2] = $70;
        _sqlite3NestedParse($pParse,16384,$vararg_buffer27);
        _sqlite3DbFree($0,$70);
       }
       $72 = HEAP32[$1>>2]|0;
       $73 = $72 & 524288;
       $74 = ($73|0)==(0);
       do {
        if (!($74)) {
         $$idx$val = HEAP32[$7>>2]|0;
         $$idx1$val = HEAP32[$10>>2]|0;
         $75 = (_sqlite3FkReferences($$idx$val,$$idx1$val)|0);
         $76 = ($75|0)==(0|0);
         if ($76) {
          break;
         } else {
          $p$04 = $75;
         }
         while(1) {
          $77 = HEAP32[$p$04>>2]|0;
          $78 = ($77|0)==($7|0);
          if (!($78)) {
           $79 = HEAP32[$77>>2]|0;
           _reloadTableSchema($pParse,$77,$79);
          }
          $80 = (($p$04) + 12|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)==(0|0);
          if ($82) {
           break;
          } else {
           $p$04 = $81;
          }
         }
        }
       } while(0);
       _reloadTableSchema($pParse,$7,$19);
       $zName$0 = $19;
       break;
      }
     }
     HEAP32[$vararg_buffer>>2] = $19;
     _sqlite3ErrorMsg($pParse,15752,$vararg_buffer);
     $zName$0 = $19;
    }
   }
  } else {
   $zName$0 = 0;
  }
 } while(0);
 _sqlite3SrcListDelete($0,$pSrc);
 _sqlite3DbFree($0,$zName$0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3AlterFinishAddColumn($pParse,$pColDef) {
 $pParse = $pParse|0;
 $pColDef = $pColDef|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $pDflt$0 = 0, $pVal = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr15 = 0, $zEnd$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pVal = sp + 64|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($0) + 64|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($pParse) + 488|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_sqlite3SchemaToIndex($0,$10)|0);
 $12 = (($0) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11<<4)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$8>>2]|0;
 $17 = (($16) + 16|0);
 $18 = (($8) + 38|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = (($20) + -1)|0;
 $22 = (($8) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23) + (($21*24)|0)|0) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_sqlite3FindTable($0,$17,$15)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_sqlite3AuthCheck($pParse,26,$15,$27,0)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = ($25|0)==(0|0);
 if ($30) {
  $pDflt$0 = 0;
 } else {
  $31 = HEAP8[$25>>0]|0;
  $32 = ($31<<24>>24)==(101);
  $$ = $32 ? 0 : $25;
  $pDflt$0 = $$;
 }
 $33 = ((($23) + (($21*24)|0)|0) + 23|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if (!($36)) {
  _sqlite3ErrorMsg($pParse,15336,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $37 = (($8) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  _sqlite3ErrorMsg($pParse,15368,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $40 = (($0) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 524288;
 $43 = ($42|0)==(0);
 if (!($43)) {
  $44 = (($8) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  $47 = ($pDflt$0|0)==(0|0);
  $or$cond = $46 | $47;
  if (!($or$cond)) {
   _sqlite3ErrorMsg($pParse,15400,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 }
 $48 = ((($23) + (($21*24)|0)|0) + 20|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 $51 = ($pDflt$0|0)==(0|0);
 $or$cond2 = $50 & $51;
 if ($or$cond2) {
  _sqlite3ErrorMsg($pParse,15464,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $52 = ($pDflt$0|0)!=(0|0);
 do {
  if ($52) {
   HEAP32[$pVal>>2] = 0;
   $53 = (_sqlite3ValueFromExpr($0,$pDflt$0,1,98,$pVal)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    HEAP8[$4>>0] = 1;
    STACKTOP = sp;return;
   }
   $55 = HEAP32[$pVal>>2]|0;
   $56 = ($55|0)==(0|0);
   if (!($56)) {
    _sqlite3ValueFree($55);
    break;
   }
   _sqlite3ErrorMsg($pParse,15520,$vararg_buffer7);
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = HEAP32[$pColDef>>2]|0;
 $58 = (($pColDef) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_sqlite3DbStrNDup($0,$57,$59)|0);
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  $62 = HEAP32[$58>>2]|0;
  $63 = (($62) + -1)|0;
  $64 = HEAP32[$40>>2]|0;
  $65 = ($63|0)>(0);
  L43: do {
   if ($65) {
    $66 = (($60) + ($63)|0);
    $zEnd$03 = $66;
    while(1) {
     $67 = HEAP8[$zEnd$03>>0]|0;
     $68 = ($67<<24>>24)==(59);
     if (!($68)) {
      $69 = $67&255;
      $70 = (48 + ($69)|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       break L43;
      }
     }
     $74 = (($zEnd$03) + -1|0);
     HEAP8[$zEnd$03>>0] = 0;
     $75 = ($74>>>0)>($60>>>0);
     if ($75) {
      $zEnd$03 = $74;
     } else {
      break;
     }
    }
   }
  } while(0);
  $76 = HEAP32[$40>>2]|0;
  $77 = $76 | 2097152;
  HEAP32[$40>>2] = $77;
  $78 = ($11|0)==(1);
  $79 = $78 ? 15056 : 15080;
  $80 = (($8) + 48|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[$vararg_buffer9>>2] = $15;
  $vararg_ptr11 = (($vararg_buffer9) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $79;
  $vararg_ptr12 = (($vararg_buffer9) + 8|0);
  HEAP32[$vararg_ptr12>>2] = $81;
  $vararg_ptr13 = (($vararg_buffer9) + 12|0);
  HEAP32[$vararg_ptr13>>2] = $60;
  $vararg_ptr14 = (($vararg_buffer9) + 16|0);
  HEAP32[$vararg_ptr14>>2] = $82;
  $vararg_ptr15 = (($vararg_buffer9) + 20|0);
  HEAP32[$vararg_ptr15>>2] = $17;
  _sqlite3NestedParse($pParse,15568,$vararg_buffer9);
  _sqlite3DbFree($0,$60);
  HEAP32[$40>>2] = $64;
 }
 $83 = $52 ? 3 : 2;
 _sqlite3MinimumFileFormat($pParse,$11,$83);
 $84 = HEAP32[$26>>2]|0;
 _reloadTableSchema($pParse,$26,$84);
 STACKTOP = sp;return;
}
function _sqlite3AlterBeginAddColumn($pParse,$pSrc) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $4 = (($pSrc) + 8|0);
 $5 = (_sqlite3LocateTableItem($pParse,0,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $7 = (($5) + 44|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 16;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  _sqlite3ErrorMsg($pParse,15128,$vararg_buffer);
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $11 = (($5) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _sqlite3ErrorMsg($pParse,15168,$vararg_buffer1);
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$5>>2]|0;
 $15 = (_isSystemTable($pParse,$14)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $17 = (($5) + 68|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_sqlite3SchemaToIndex($0,$18)|0);
 $20 = (_sqlite3DbMallocZero($0,76)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $22 = (($pParse) + 488|0);
 HEAP32[$22>>2] = $20;
 $23 = (($20) + 40|0);
 HEAP16[$23>>1] = 1;
 $24 = (($5) + 38|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = (($20) + 38|0);
 HEAP16[$26>>1] = $25;
 $27 = $25 << 16 >> 16;
 $28 = (($27) + -1)|0;
 $29 = (($28|0) / 8)&-1;
 $30 = ($29*192)|0;
 $31 = (($30) + 192)|0;
 $32 = (_sqlite3DbMallocZero($0,$31)|0);
 $33 = (($20) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $34;
 $35 = (_sqlite3MPrintf($0,15200,$vararg_buffer3)|0);
 HEAP32[$20>>2] = $35;
 $36 = HEAP32[$33>>2]|0;
 $37 = ($36|0)==(0|0);
 $38 = ($35|0)==(0|0);
 $or$cond = $37 | $38;
 if ($or$cond) {
  HEAP8[$1>>0] = 1;
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 $39 = (($5) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP16[$26>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ($42*24)|0;
 _memcpy(($36|0),($40|0),($43|0))|0;
 $44 = HEAP16[$26>>1]|0;
 $45 = ($44<<16>>16)>(0);
 if ($45) {
  $i$01 = 0;
  while(1) {
   $46 = HEAP32[$33>>2]|0;
   $47 = (($46) + (($i$01*24)|0)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (_sqlite3DbStrDup($0,$48)|0);
   HEAP32[$47>>2] = $49;
   $50 = ((($46) + (($i$01*24)|0)|0) + 4|0);
   $51 = (($i$01) + 1)|0;
   ;HEAP32[$50+0>>2]=0|0;HEAP32[$50+4>>2]=0|0;HEAP32[$50+8>>2]=0|0;HEAP32[$50+12>>2]=0|0;
   $52 = HEAP16[$26>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = ($51|0)<($53|0);
   if ($54) {
    $i$01 = $51;
   } else {
    break;
   }
  }
 }
 $55 = (($0) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56) + ($19<<4)|0) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($20) + 68|0);
 HEAP32[$59>>2] = $58;
 $60 = (($5) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($20) + 48|0);
 HEAP32[$62>>2] = $61;
 HEAP16[$23>>1] = 1;
 _sqlite3BeginWriteOperation($pParse,0,$19);
 $63 = (_sqlite3GetVdbe($pParse)|0);
 $64 = ($63|0)==(0|0);
 if ($64) {
  _sqlite3SrcListDelete($0,$pSrc);
  STACKTOP = sp;return;
 }
 _sqlite3ChangeCookie($pParse,$19);
 _sqlite3SrcListDelete($0,$pSrc);
 STACKTOP = sp;return;
}
function _sqlite3VtabFinishParse($pParse,$pEnd) {
 $pParse = $pParse|0;
 $pEnd = $pEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 _addArgumentToVtab($pParse);
 $4 = (($pParse) + 516|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(1);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($2) + 137|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $11 = ($pEnd|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$pEnd>>2]|0;
   $13 = (($pParse) + 500|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $12;
   $16 = $14;
   $17 = (($15) - ($16))|0;
   $18 = (($pEnd) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + ($19))|0;
   $21 = (($pParse) + 504|0);
   HEAP32[$21>>2] = $20;
  }
  $22 = (($pParse) + 500|0);
  HEAP32[$vararg_buffer>>2] = $22;
  $23 = (_sqlite3MPrintf($2,14944,$vararg_buffer)|0);
  $24 = (($1) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_sqlite3SchemaToIndex($2,$25)|0);
  $27 = (($2) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26<<4)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($26|0)==(1);
  $32 = $31 ? 15056 : 15080;
  $33 = HEAP32[$1>>2]|0;
  $34 = (($pParse) + 388|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $30;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $32;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $33;
  $vararg_ptr6 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $33;
  $vararg_ptr7 = (($vararg_buffer1) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $23;
  $vararg_ptr8 = (($vararg_buffer1) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $35;
  _sqlite3NestedParse($pParse,14968,$vararg_buffer1);
  _sqlite3DbFree($2,$23);
  $36 = (_sqlite3GetVdbe($pParse)|0);
  _sqlite3ChangeCookie($pParse,$26);
  (_sqlite3VdbeAddOp2($36,138,0,0)|0);
  $37 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $37;
  $38 = (_sqlite3MPrintf($2,15096,$vararg_buffer9)|0);
  _sqlite3VdbeAddParseSchemaOp($36,$26,$38);
  $39 = HEAP32[$1>>2]|0;
  $40 = (_sqlite3Strlen30($39)|0);
  $41 = (($40) + 1)|0;
  (_sqlite3VdbeAddOp4($36,141,$26,0,0,$39,$41)|0);
  STACKTOP = sp;return;
 }
 $42 = (($1) + 68|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$1>>2]|0;
 $45 = (_sqlite3Strlen30($44)|0);
 $46 = (($43) + 8|0);
 $47 = (_sqlite3HashInsert($46,$44,$45,$1)|0);
 $48 = ($47|0)==(0|0);
 if ($48) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $49 = (($2) + 64|0);
  HEAP8[$49>>0] = 1;
  STACKTOP = sp;return;
 }
}
function _sqlite3VtabBeginParse($pParse,$pName1,$pName2,$pModuleName,$ifNotExists) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $pModuleName = $pModuleName|0;
 $ifNotExists = $ifNotExists|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3StartTable($pParse,$pName1,$pName2,0,0,1,$ifNotExists);
 $0 = (($pParse) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$pParse>>2]|0;
 $4 = (($1) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_sqlite3SchemaToIndex($3,$5)|0);
 $7 = (($1) + 44|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 | 16;
 $11 = $10&255;
 HEAP8[$7>>0] = $11;
 $12 = (($1) + 52|0);
 HEAP32[$12>>2] = 0;
 $13 = (_sqlite3NameFromToken($3,$pModuleName)|0);
 _addModuleArgument($3,$1,$13);
 _addModuleArgument($3,$1,0);
 $14 = HEAP32[$1>>2]|0;
 $15 = (_sqlite3DbStrDup($3,$14)|0);
 _addModuleArgument($3,$1,$15);
 $16 = (($pModuleName) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$pModuleName>>2]|0;
 $19 = (($18) + ($17)|0);
 $20 = HEAP32[$pName1>>2]|0;
 $21 = $19;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (($pParse) + 504|0);
 HEAP32[$24>>2] = $23;
 $25 = (($1) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$1>>2]|0;
 $29 = HEAP32[$26>>2]|0;
 $30 = HEAP32[$pParse>>2]|0;
 $31 = (($30) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($6<<4)|0);
 $34 = HEAP32[$33>>2]|0;
 (_sqlite3AuthCheck($pParse,29,$28,$29,$34)|0);
 STACKTOP = sp;return;
}
function _sqlite3VtabArgInit($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _addArgumentToVtab($pParse);
 $0 = (($pParse) + 516|0);
 HEAP32[$0>>2] = 0;
 $1 = (($pParse) + 520|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3VtabArgExtend($pParse,$p) {
 $pParse = $pParse|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[$p>>2]|0;
  HEAP32[$0>>2] = $3;
  $4 = (($p) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($pParse) + 520|0);
  HEAP32[$6>>2] = $5;
  STACKTOP = sp;return;
 } else {
  $7 = (($p) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$p>>2]|0;
  $10 = (($9) + ($8)|0);
  $11 = $10;
  $12 = $1;
  $13 = (($11) - ($12))|0;
  $14 = (($pParse) + 520|0);
  HEAP32[$14>>2] = $13;
  STACKTOP = sp;return;
 }
}
function _sqlite3WithAdd($pParse,$pWith,$pName,$pArglist,$pQuery) {
 $pParse = $pParse|0;
 $pWith = $pWith|0;
 $pName = $pName|0;
 $pArglist = $pArglist|0;
 $pQuery = $pQuery|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $or$cond = 0, $pNew$0$in = 0, $pNew$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3NameFromToken($0,$pName)|0);
 $2 = ($1|0)==(0|0);
 $3 = ($pWith|0)==(0|0);
 $or$cond = $2 | $3;
 if (!($or$cond)) {
  $4 = HEAP32[$pWith>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $27 = $4;$i$01 = 0;
   while(1) {
    $6 = ((($pWith) + ($i$01<<4)|0) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_sqlite3_stricmp($1,$7)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     HEAP32[$vararg_buffer>>2] = $1;
     _sqlite3ErrorMsg($pParse,14872,$vararg_buffer);
     $$pre = HEAP32[$pWith>>2]|0;
     $12 = $$pre;
    } else {
     $12 = $27;
    }
    $10 = (($i$01) + 1)|0;
    $11 = ($10|0)<($12|0);
    if ($11) {
     $27 = $12;$i$01 = $10;
    } else {
     break;
    }
   }
  }
 }
 if ($3) {
  $17 = (_sqlite3DbMallocZero($0,24)|0);
  $pNew$0$in = $17;
 } else {
  $13 = HEAP32[$pWith>>2]|0;
  $14 = $13 << 4;
  $15 = (($14) + 24)|0;
  $16 = (_sqlite3DbRealloc($0,$pWith,$15)|0);
  $pNew$0$in = $16;
 }
 $18 = ($pNew$0$in|0)==(0|0);
 if ($18) {
  _sqlite3ExprListDelete($0,$pArglist);
  _sqlite3SelectDelete($0,$pQuery);
  _sqlite3DbFree($0,$1);
  $pNew$1 = $pWith;
  STACKTOP = sp;return ($pNew$1|0);
 } else {
  $19 = HEAP32[$pNew$0$in>>2]|0;
  $20 = (($pNew$0$in) + 8|0);
  $21 = ((($20) + ($19<<4)|0) + 8|0);
  HEAP32[$21>>2] = $pQuery;
  $22 = HEAP32[$pNew$0$in>>2]|0;
  $23 = ((($20) + ($22<<4)|0) + 4|0);
  HEAP32[$23>>2] = $pArglist;
  $24 = (($20) + ($22<<4)|0);
  HEAP32[$24>>2] = $1;
  $25 = ((($20) + ($22<<4)|0) + 12|0);
  HEAP32[$25>>2] = 0;
  $26 = (($22) + 1)|0;
  HEAP32[$pNew$0$in>>2] = $26;
  $pNew$1 = $pNew$0$in;
  STACKTOP = sp;return ($pNew$1|0);
 }
 return 0|0;
}
function _yy_find_reduce_action($stateno,$iLookAhead) {
 $stateno = $stateno|0;
 $iLookAhead = $iLookAhead|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (11256 + ($stateno<<1)|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = $iLookAhead&255;
 $4 = (($2) + ($3))|0;
 $5 = (11872 + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 STACKTOP = sp;return ($7|0);
}
function _yy_accept($yypParser) {
 $yypParser = $yypParser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($yypParser) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$yypParser>>2]|0;
 $3 = ($2|0)>(-1);
 if (!($3)) {
  HEAP32[$0>>2] = $1;
  STACKTOP = sp;return;
 }
 while(1) {
  _yy_pop_parser_stack($yypParser);
  $4 = HEAP32[$yypParser>>2]|0;
  $5 = ($4|0)>(-1);
  if (!($5)) {
   break;
  }
 }
 HEAP32[$0>>2] = $1;
 STACKTOP = sp;return;
}
function _sqlite3NameFromToken($db,$pName) {
 $db = $db|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $zName$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pName|0)==(0|0);
 if ($0) {
  $zName$0 = 0;
  STACKTOP = sp;return ($zName$0|0);
 }
 $1 = HEAP32[$pName>>2]|0;
 $2 = (($pName) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3DbStrNDup($db,$1,$3)|0);
 _sqlite3Dequote($4);
 $zName$0 = $4;
 STACKTOP = sp;return ($zName$0|0);
}
function _addArgumentToVtab($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 516|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pParse) + 488|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 520|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$pParse>>2]|0;
 $9 = (_sqlite3DbStrNDup($8,$1,$7)|0);
 _addModuleArgument($8,$4,$9);
 STACKTOP = sp;return;
}
function _addModuleArgument($db,$pTable,$zArg) {
 $db = $db|0;
 $pTable = $pTable|0;
 $zArg = $zArg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $j$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pTable) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = $1 << 2;
 $4 = (($3) + 8)|0;
 $5 = (($pTable) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3DbRealloc($db,$6,$4)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $15 = (($7) + ($1<<2)|0);
  HEAP32[$15>>2] = $zArg;
  $16 = (($7) + ($2<<2)|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$5>>2] = $7;
  STACKTOP = sp;return;
 }
 $9 = ($1|0)>(0);
 if ($9) {
  $j$01 = 0;
  while(1) {
   $10 = HEAP32[$5>>2]|0;
   $11 = (($10) + ($j$01<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   _sqlite3DbFree($db,$12);
   $13 = (($j$01) + 1)|0;
   $exitcond = ($13|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $j$01 = $13;
   }
  }
 }
 _sqlite3DbFree($db,$zArg);
 $14 = HEAP32[$5>>2]|0;
 _sqlite3DbFree($db,$14);
 HEAP32[$0>>2] = 0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _sqlite3AuthCheck($pParse,$code,$zArg1,$zArg2,$zArg3) {
 $pParse = $pParse|0;
 $code = $code|0;
 $zArg1 = $zArg1|0;
 $zArg2 = $zArg2|0;
 $zArg3 = $zArg3|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 137|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (($pParse) + 455|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (($0) + 276|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $$0 = 0;
    } else {
     $10 = (($0) + 280|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($pParse) + 496|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (FUNCTION_TABLE_iiiiiii[$8 & 255]($11,$code,$zArg1,$zArg2,$zArg3,$13)|0);
     if ((($14|0) == 0) | (($14|0) == 2)) {
      $$0 = $14;
      break;
     } else if ((($14|0) == 1)) {
      _sqlite3ErrorMsg($pParse,14904,$vararg_buffer);
      $15 = (($pParse) + 12|0);
      HEAP32[$15>>2] = 23;
      $$0 = 1;
      break;
     } else {
      _sqliteAuthBadReturnCode($pParse);
      $$0 = 1;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqliteAuthBadReturnCode($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _sqlite3ErrorMsg($pParse,14920,$vararg_buffer);
 $0 = (($pParse) + 12|0);
 HEAP32[$0>>2] = 1;
 STACKTOP = sp;return;
}
function _sqlite3NestedParse($pParse,$zFormat,$varargs) {
 $pParse = $pParse|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $saveBuf = 0, $zErrMsg = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $ap = sp + 8|0;
 $zErrMsg = sp;
 $saveBuf = sp + 24|0;
 HEAP32[$zErrMsg>>2] = 0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$ap>>2] = $varargs;
 $4 = (_sqlite3VMPrintf($0,$zFormat,$ap)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 18|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($7) + 1)<<24>>24;
 HEAP8[$6>>0] = $8;
 $9 = (($pParse) + 444|0);
 dest=$saveBuf+0|0; src=$9+0|0; stop=dest+96|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$9+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 (_sqlite3RunParser($pParse,$4,$zErrMsg)|0);
 $10 = HEAP32[$zErrMsg>>2]|0;
 _sqlite3DbFree($0,$10);
 _sqlite3DbFree($0,$4);
 dest=$9+0|0; src=$saveBuf+0|0; stop=dest+96|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $11 = HEAP8[$6>>0]|0;
 $12 = (($11) + -1)<<24>>24;
 HEAP8[$6>>0] = $12;
 STACKTOP = sp;return;
}
function _sqlite3GetVdbe($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_sqlite3VdbeCreate($pParse)|0);
  HEAP32[$0>>2] = $3;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   (_sqlite3VdbeAddOp0($3,154)|0);
  }
  $5 = (($pParse) + 412|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = HEAP32[$pParse>>2]|0;
   $9 = (($8) + 60|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & 8;
   $12 = ($11<<16>>16)==(0);
   if ($12) {
    $13 = (($pParse) + 25|0);
    HEAP8[$13>>0] = 1;
    $v$0 = $3;
   } else {
    $v$0 = $3;
   }
  } else {
   $v$0 = $3;
  }
 } else {
  $v$0 = $1;
 }
 STACKTOP = sp;return ($v$0|0);
}
function _sqlite3ChangeCookie($pParse,$iDb) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetTempReg($pParse)|0);
 $1 = HEAP32[$pParse>>2]|0;
 $2 = (($pParse) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5) + ($iDb<<4)|0) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 (_sqlite3VdbeAddOp2($3,25,$9,$0)|0);
 (_sqlite3VdbeAddOp3($3,51,$iDb,1,$0)|0);
 _sqlite3ReleaseTempReg($pParse,$0);
 STACKTOP = sp;return;
}
function _sqlite3VdbeAddOp2($p,$op,$p1,$p2) {
 $p = $p|0;
 $op = $op|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,$op,$p1,$p2,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeAddParseSchemaOp($p,$iDb,$zWhere) {
 $p = $p|0;
 $iDb = $iDb|0;
 $zWhere = $zWhere|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,118,$iDb,0,0)|0);
 _sqlite3VdbeChangeP4($p,$0,$zWhere,-1);
 $1 = HEAP32[$p>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $j$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  _sqlite3VdbeUsesBtree($p,$j$01);
  $5 = (($j$01) + 1)|0;
  $6 = HEAP32[$p>>2]|0;
  $7 = (($6) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if ($9) {
   $j$01 = $5;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VdbeAddOp4($p,$op,$p1,$p2,$p3,$zP4,$p4type) {
 $p = $p|0;
 $op = $op|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 $zP4 = $zP4|0;
 $p4type = $p4type|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,$op,$p1,$p2,$p3)|0);
 _sqlite3VdbeChangeP4($p,$0,$zP4,$p4type);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeAddOp3($p,$op,$p1,$p2,$p3) {
 $p = $p|0;
 $op = $op|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($1|0);
 do {
  if ($6) {
   $10 = $1;
  } else {
   $7 = (_growOpArray($p)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$pre = HEAP32[$0>>2]|0;
    $10 = $$pre;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $9 = (($10) + 1)|0;
 HEAP32[$0>>2] = $9;
 $11 = (($p) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $op&255;
 $14 = (($12) + (($1*20)|0)|0);
 HEAP8[$14>>0] = $13;
 $15 = ((($12) + (($1*20)|0)|0) + 3|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($12) + (($1*20)|0)|0) + 4|0);
 HEAP32[$16>>2] = $p1;
 $17 = ((($12) + (($1*20)|0)|0) + 8|0);
 HEAP32[$17>>2] = $p2;
 $18 = ((($12) + (($1*20)|0)|0) + 12|0);
 HEAP32[$18>>2] = $p3;
 $19 = ((($12) + (($1*20)|0)|0) + 16|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($12) + (($1*20)|0)|0) + 1|0);
 HEAP8[$20>>0] = 0;
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _growOpArray($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = 1020;
 } else {
  $phitmp = ($3*40)|0;
  $8 = $phitmp;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($v) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $9 = (_sqlite3DbRealloc($5,$7,$8)|0);
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $14 = $10 ? 0 : 7;
  STACKTOP = sp;return ($14|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = (_sqlite3DbMallocSize($11,$9)|0);
 $13 = (($12>>>0) / 20)&-1;
 HEAP32[$2>>2] = $13;
 HEAP32[$6>>2] = $9;
 $14 = $10 ? 0 : 7;
 STACKTOP = sp;return ($14|0);
}
function _sqlite3DbMallocSize($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isLookaside($db,$p)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = HEAP32[((384 + 48|0))>>2]|0;
  $6 = (FUNCTION_TABLE_ii[$5 & 255]($p)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (($db) + 240|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3&65535;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3GetTempReg($pParse) {
 $pParse = $pParse|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 19|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($pParse) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$3>>2] = $5;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = (($1) + -1)<<24>>24;
  HEAP8[$0>>0] = $6;
  $7 = $6&255;
  $8 = ((($pParse) + ($7<<2)|0) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3ReleaseTempReg($pParse,$iReg) {
 $pParse = $pParse|0;
 $iReg = $iReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $p$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iReg|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pParse) + 19|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2&255)<(8);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($pParse) + 120|0);
 $i$02 = 0;$p$03 = $4;
 while(1) {
  $5 = (($p$03) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($iReg|0);
  if ($7) {
   label = 5;
   break;
  }
  $9 = (($i$02) + 1)|0;
  $10 = (($p$03) + 20|0);
  $11 = ($9|0)<(10);
  if ($11) {
   $i$02 = $9;$p$03 = $10;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 5) {
  $8 = (($p$03) + 6|0);
  HEAP8[$8>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $12 = (($2) + 1)<<24>>24;
  HEAP8[$1>>0] = $12;
  $13 = $2&255;
  $14 = ((($pParse) + ($13<<2)|0) + 28|0);
  HEAP32[$14>>2] = $iReg;
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeAddOp0($p,$op) {
 $p = $p|0;
 $op = $op|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,$op,0,0,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3LocateTableItem($pParse,$isView,$p) {
 $pParse = $pParse|0;
 $isView = $isView|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zDb$0 = 0, $zDb$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $7 = (($p) + 4|0);
  $zDb$0$in = $7;
 } else {
  $2 = HEAP32[$pParse>>2]|0;
  $3 = (_sqlite3SchemaToIndex($2,$0)|0);
  $4 = (($2) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($3<<4)|0);
  $zDb$0$in = $6;
 }
 $zDb$0 = HEAP32[$zDb$0$in>>2]|0;
 $8 = (($p) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3LocateTable($pParse,$isView,$9,$zDb$0)|0);
 STACKTOP = sp;return ($10|0);
}
function _isSystemTable($pParse,$zName) {
 $pParse = $pParse|0;
 $zName = $zName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = ($0|0)>(6);
 if ($1) {
  $2 = (_sqlite3_strnicmp($zName,15296,7)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   HEAP32[$vararg_buffer>>2] = $zName;
   _sqlite3ErrorMsg($pParse,15304,$vararg_buffer);
   $$0 = 1;
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BeginWriteOperation($pParse,$setStatement,$iDb) {
 $pParse = $pParse|0;
 $setStatement = $setStatement|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 _sqlite3CodeVerifySchema($pParse,$iDb);
 $3 = 1 << $iDb;
 $4 = (($pParse$) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | $3;
 HEAP32[$4>>2] = $6;
 $7 = (($pParse$) + 22|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 | $setStatement;
 $11 = $10&255;
 HEAP8[$7>>0] = $11;
 STACKTOP = sp;return;
}
function _sqlite3CodeVerifySchema($pParse,$iDb) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = 1 << $iDb;
 $4 = (($pParse$) + 336|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & $3;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$pParse$>>2]|0;
 $9 = $5 | $3;
 HEAP32[$4>>2] = $9;
 $10 = (($8) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11) + ($iDb<<4)|0) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($pParse$) + ($iDb<<2)|0) + 340|0);
 HEAP32[$15>>2] = $14;
 $16 = ($iDb|0)==(1);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 (_sqlite3OpenTempDatabase($pParse$)|0);
 STACKTOP = sp;return;
}
function _sqlite3OpenTempDatabase($pParse) {
 $pParse = $pParse|0;
 var $$0 = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pBt = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $pBt = sp + 4|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pParse) + 454|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (_sqlite3BtreeOpen($9,0,$0,$pBt,0,542)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  _sqlite3ErrorMsg($pParse,15224,$vararg_buffer);
  $12 = (($pParse) + 12|0);
  HEAP32[$12>>2] = $10;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$pBt>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 20|0);
 HEAP32[$15>>2] = $13;
 $16 = (($0) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $$idx$val = HEAP32[$13>>2]|0;
 $$idx1 = (($13) + 4|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $18 = (_sqlite3BtreeSetPageSize($$idx$val,$$idx1$val,$17,-1,0)|0);
 $19 = ($18|0)==(7);
 if (!($19)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (($0) + 64|0);
 HEAP8[$20>>0] = 1;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FindTable($db,$zName,$zDatabase) {
 $db = $db|0;
 $zName = $zName|0;
 $zDatabase = $zDatabase|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, $p$02 = 0, $p$1 = 0, $p$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = (($db) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $p$2 = 0;
  STACKTOP = sp;return ($p$2|0);
 }
 $4 = ($zDatabase|0)==(0|0);
 $5 = (($db) + 16|0);
 $i$01 = 0;$p$02 = 0;
 while(1) {
  $6 = ($i$01|0)<(2);
  $7 = $6&1;
  $8 = $7 ^ $i$01;
  $$pre = HEAP32[$5>>2]|0;
  if ($4) {
   label = 5;
  } else {
   $9 = (($$pre) + ($8<<4)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_sqlite3_stricmp($zDatabase,$10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    label = 5;
   } else {
    $p$1 = $p$02;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $13 = ((($$pre) + ($8<<4)|0) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 8|0);
   $16 = (_sqlite3HashFind($15,$zName,$0)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    $p$1 = $16;
   } else {
    $p$2 = $16;
    label = 7;
    break;
   }
  }
  $18 = (($i$01) + 1)|0;
  $19 = ($18|0)<($2|0);
  if ($19) {
   $i$01 = $18;$p$02 = $p$1;
  } else {
   $p$2 = $p$1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($p$2|0);
 }
 return 0|0;
}
function _sqlite3ValueFromExpr($db,$pExpr,$enc,$affinity,$ppVal) {
 $db = $db|0;
 $pExpr = $pExpr|0;
 $enc = $enc|0;
 $affinity = $affinity|0;
 $ppVal = $ppVal|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_valueFromExpr($db,$pExpr,$enc,$affinity,$ppVal)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3MinimumFileFormat($pParse,$iDb,$minFormat) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $minFormat = $minFormat|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_sqlite3GetTempReg($pParse)|0);
 $3 = (_sqlite3GetTempReg($pParse)|0);
 (_sqlite3VdbeAddOp3($0,50,$iDb,$2,2)|0);
 _sqlite3VdbeUsesBtree($0,$iDb);
 (_sqlite3VdbeAddOp2($0,25,$minFormat,$3)|0);
 $4 = (_sqlite3VdbeAddOp3($0,83,$3,0,$2)|0);
 _sqlite3VdbeChangeP5($0,-120);
 (_sqlite3VdbeAddOp3($0,51,$iDb,2,$3)|0);
 _sqlite3VdbeJumpHere($0,$4);
 _sqlite3ReleaseTempReg($pParse,$2);
 _sqlite3ReleaseTempReg($pParse,$3);
 STACKTOP = sp;return;
}
function _reloadTableSchema($pParse,$pTab,$zName) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pParse$idx$val$idx$val$idx = 0, $pParse$idx$val$idx$val$idx$val = 0, $pParse$idx1 = 0, $pParse$idx1$val = 0, $pTrig$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (($pTab) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3SchemaToIndex($2,$4)|0);
 $pParse$idx1 = (($pParse) + 442|0);
 $pParse$idx1$val = HEAP8[$pParse$idx1>>0]|0;
 $pParse$idx$val$idx = (($2) + 16|0);
 $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
 $pParse$idx$val$idx$val$idx = (($pParse$idx$val$idx$val) + 28|0);
 $pParse$idx$val$idx$val$idx$val = HEAP32[$pParse$idx$val$idx$val$idx>>2]|0;
 $6 = (_sqlite3TriggerList($pParse$idx$val$idx$val$idx$val,$pParse$idx1$val,$pTab)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $pTrig$02 = $6;
  while(1) {
   $8 = HEAP32[$pParse>>2]|0;
   $9 = (($pTrig$02) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_sqlite3SchemaToIndex($8,$10)|0);
   $12 = HEAP32[$pTrig$02>>2]|0;
   (_sqlite3VdbeAddOp4($0,122,$11,0,0,$12,0)|0);
   $13 = (($pTrig$02) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    break;
   } else {
    $pTrig$02 = $14;
   }
  }
 }
 $16 = HEAP32[$pTab>>2]|0;
 (_sqlite3VdbeAddOp4($0,120,$5,0,0,$16,0)|0);
 $17 = HEAP32[$pParse>>2]|0;
 HEAP32[$vararg_buffer>>2] = $zName;
 $18 = (_sqlite3MPrintf($17,15680,$vararg_buffer)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeAddParseSchemaOp($0,$5,$18);
 $20 = (_whereTempTriggers($pParse,$pTab)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeAddParseSchemaOp($0,1,$20);
 STACKTOP = sp;return;
}
function _sqlite3TriggerList($pParse$0$0$val$0$4$val$1$3$val,$pParse$0$51$val,$pTab) {
 $pParse$0$0$val$0$4$val$1$3$val = $pParse$0$0$val$0$4$val$1$3$val|0;
 $pParse$0$51$val = $pParse$0$51$val|0;
 $pTab = $pTab|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$01 = 0, $p$03 = 0, $pList$02 = 0, $pList$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pParse$0$51$val<<24>>24)==(0);
 if (!($0)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pTab) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($pParse$0$0$val$0$4$val$1$3$val|0);
 if (!($3)) {
  $4 = (($pParse$0$0$val$0$4$val$1$3$val) + 48|0);
  $p$01 = HEAP32[$4>>2]|0;
  $5 = ($p$01|0)==(0|0);
  if (!($5)) {
   $6 = (($pTab) + 64|0);
   $12 = $2;$p$03 = $p$01;$pList$02 = 0;
   while(1) {
    $7 = (($p$03) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($8) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==($12|0);
    if ($11) {
     $13 = (($8) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$pTab>>2]|0;
     $16 = (_sqlite3_stricmp($14,$15)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = ($pList$02|0)==(0|0);
      if ($18) {
       $19 = HEAP32[$6>>2]|0;
       $21 = $19;
      } else {
       $21 = $pList$02;
      }
      $20 = (($8) + 32|0);
      HEAP32[$20>>2] = $21;
      $pList$1 = $8;
     } else {
      $pList$1 = $pList$02;
     }
    } else {
     $pList$1 = $pList$02;
    }
    $p$0 = HEAP32[$p$03>>2]|0;
    $22 = ($p$0|0)==(0|0);
    if ($22) {
     break;
    }
    $$pre = HEAP32[$1>>2]|0;
    $12 = $$pre;$p$03 = $p$0;$pList$02 = $pList$1;
   }
   $23 = ($pList$1|0)==(0|0);
   if (!($23)) {
    $$0 = $pList$1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $24 = (($pTab) + 64|0);
 $25 = HEAP32[$24>>2]|0;
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _whereTempTriggers($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pParse$idx1 = 0, $pParse$idx1$val = 0, $pTrig$03 = 0, $vararg_buffer = 0, $zWhere$02 = 0, $zWhere$1 = 0, $zWhere$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pTab) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($4|0);
 if ($7) {
  $zWhere$3 = 0;
  STACKTOP = sp;return ($zWhere$3|0);
 }
 $pParse$idx1 = (($pParse) + 442|0);
 $pParse$idx1$val = HEAP8[$pParse$idx1>>0]|0;
 $8 = (_sqlite3TriggerList($4,$pParse$idx1$val,$pTab)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $zWhere$3 = 0;
  STACKTOP = sp;return ($zWhere$3|0);
 } else {
  $pTrig$03 = $8;$zWhere$02 = 0;
 }
 while(1) {
  $10 = (($pTrig$03) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($4|0);
  if ($12) {
   $13 = HEAP32[$pTrig$03>>2]|0;
   $14 = (_whereOrName($0,$zWhere$02,$13)|0);
   $zWhere$1 = $14;
  } else {
   $zWhere$1 = $zWhere$02;
  }
  $15 = (($pTrig$03) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   break;
  } else {
   $pTrig$03 = $16;$zWhere$02 = $zWhere$1;
  }
 }
 $18 = ($zWhere$1|0)==(0|0);
 if ($18) {
  $zWhere$3 = 0;
  STACKTOP = sp;return ($zWhere$3|0);
 }
 $19 = HEAP32[$pParse>>2]|0;
 HEAP32[$vararg_buffer>>2] = $zWhere$1;
 $20 = (_sqlite3MPrintf($19,15696,$vararg_buffer)|0);
 $21 = HEAP32[$pParse>>2]|0;
 _sqlite3DbFree($21,$zWhere$1);
 $zWhere$3 = $20;
 STACKTOP = sp;return ($zWhere$3|0);
}
function _whereOrName($db,$zWhere,$zConstant) {
 $db = $db|0;
 $zWhere = $zWhere|0;
 $zConstant = $zConstant|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $zNew$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($zWhere|0)==(0|0);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $zConstant;
  $1 = (_sqlite3MPrintf($db,15720,$vararg_buffer)|0);
  $zNew$0 = $1;
  STACKTOP = sp;return ($zNew$0|0);
 } else {
  HEAP32[$vararg_buffer1>>2] = $zWhere;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $zConstant;
  $2 = (_sqlite3MPrintf($db,15728,$vararg_buffer1)|0);
  _sqlite3DbFree($db,$zWhere);
  $zNew$0 = $2;
  STACKTOP = sp;return ($zNew$0|0);
 }
 return 0|0;
}
function _sqlite3VdbeJumpHere($p,$addr) {
 $p = $p|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3VdbeChangeP2($p,$addr,$1);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = (($p) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 92|0);
 HEAP32[$6>>2] = $3;
 STACKTOP = sp;return;
}
function _valueFromExpr($db,$pExpr,$enc,$affinity,$ppVal) {
 $db = $db|0;
 $pExpr = $pExpr|0;
 $enc = $enc|0;
 $affinity = $affinity|0;
 $ppVal = $ppVal|0;
 var $$0 = 0, $$08 = 0, $$off = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0.0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $op$0 = 0, $op$1 = 0, $or$cond = 0, $or$cond7 = 0, $pVal = 0;
 var $rc$0 = 0, $switch = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $zNeg$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $pVal = sp + 8|0;
 HEAP32[$pVal>>2] = 0;
 $0 = ($pExpr|0)==(0|0);
 if ($0) {
  HEAP32[$ppVal>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$pExpr>>0]|0;
 $2 = $1&255;
 $3 = ($1<<24>>24)==(-97);
 if ($3) {
  $4 = (($pExpr) + 38|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $op$0 = $6;
 } else {
  $op$0 = $2;
 }
 $7 = ($op$0|0)==(157);
 if ($7) {
  $8 = (($pExpr) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$9>>0]|0;
  $$off = (($10) + 124)<<24>>24;
  $switch = ($$off&255)<(2);
  if ($switch) {
   $11 = $10&255;
   $$08 = $9;$22 = -1;$23 = -1;$op$1 = $11;$zNeg$0 = 15744;
   label = 8;
  } else {
   $43 = $9;
   label = 22;
  }
 } else {
  $$08 = $pExpr;$22 = 1;$23 = 0;$op$1 = $op$0;$zNeg$0 = 1728;
  label = 8;
 }
 L11: do {
  if ((label|0) == 8) {
   L13: do {
    switch ($op$1|0) {
    case 101:  {
     $74 = (_valueNew($db)|0);
     HEAP32[$pVal>>2] = $74;
     $75 = ($74|0)==(0|0);
     if ($75) {
      $87 = 0;
     } else {
      $85 = $74;$rc$0 = 0;
      break L11;
     }
     break;
    }
    case 134:  {
     $76 = (_valueNew($db)|0);
     HEAP32[$pVal>>2] = $76;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $87 = 0;
     } else {
      $78 = (($$08) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + 2|0);
      $81 = (_sqlite3Strlen30($80)|0);
      $82 = (($81) + -1)|0;
      $83 = (_sqlite3HexToBlob($db,$80,$82)|0);
      $84 = (($82|0) / 2)&-1;
      (_sqlite3VdbeMemSetStr($76,$83,$84,0,145)|0);
      $85 = $76;$rc$0 = 0;
      break L11;
     }
     break;
    }
    case 97: case 132: case 133:  {
     $12 = (_valueNew($db)|0);
     HEAP32[$pVal>>2] = $12;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $87 = 0;
     } else {
      $14 = (($$08) + 4|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = $15 & 1024;
      $17 = ($16|0)==(0);
      if ($17) {
       $26 = (($$08) + 8|0);
       $27 = HEAP32[$26>>2]|0;
       HEAP32[$vararg_buffer>>2] = $zNeg$0;
       $vararg_ptr1 = (($vararg_buffer) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $27;
       $28 = (_sqlite3MPrintf($db,9144,$vararg_buffer)|0);
       $29 = ($28|0)==(0|0);
       if ($29) {
        $87 = $12;
        break L13;
       }
       _sqlite3ValueSetStr($12,$28,1,145);
      } else {
       $18 = (($$08) + 8|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = ($19|0)<(0);
       $21 = $20 << 31 >> 31;
       $24 = (___muldi3(($19|0),($21|0),($22|0),($23|0))|0);
       $25 = tempRet0;
       _sqlite3VdbeMemSetInt64($12,$24,$25);
      }
      $30 = $op$1 & -2;
      $31 = ($30|0)==(132);
      $32 = ($affinity<<24>>24)==(98);
      $or$cond = $31 & $32;
      if ($or$cond) {
       _sqlite3ValueApplyAffinity($12,99,1);
      } else {
       _sqlite3ValueApplyAffinity($12,$affinity,1);
      }
      $33 = (($12) + 28|0);
      $34 = HEAP16[$33>>1]|0;
      $35 = $34&65535;
      $36 = $35 & 12;
      $37 = ($36|0)==(0);
      if (!($37)) {
       $38 = $35 & 65533;
       $39 = $38&65535;
       HEAP16[$33>>1] = $39;
      }
      $40 = ($enc<<24>>24)==(1);
      if ($40) {
       $85 = $12;$rc$0 = 0;
       break L11;
      }
      $41 = $enc&255;
      $42 = (_sqlite3VdbeChangeEncoding($12,$41)|0);
      $85 = $12;$rc$0 = $42;
      break L11;
     }
     break;
    }
    case 157:  {
     $$phi$trans$insert2 = (($$08) + 12|0);
     $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
     $43 = $$pre3;
     label = 22;
     break L11;
     break;
    }
    default: {
     $85 = 0;$rc$0 = 0;
     break L11;
    }
    }
   } while(0);
   $86 = (($db) + 64|0);
   HEAP8[$86>>0] = 1;
   _sqlite3DbFree($db,0);
   _sqlite3ValueFree($87);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 22) {
  $44 = (_sqlite3ValueFromExpr($db,$43,$enc,$affinity,$pVal)|0);
  $45 = ($44|0)==(0);
  $46 = HEAP32[$pVal>>2]|0;
  $47 = ($46|0)!=(0|0);
  $or$cond7 = $45 & $47;
  if ($or$cond7) {
   _sqlite3VdbeMemNumerify($46);
   $48 = (($46) + 16|0);
   $49 = $48;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) + 4)|0;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($51|0)==(0);
   $56 = ($54|0)==(-2147483648);
   $57 = $55 & $56;
   if ($57) {
    $58 = (($46) + 28|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = $60 & 65523;
    $62 = $61 | 8;
    $63 = $62&65535;
    HEAP16[$58>>1] = $63;
    $64 = (($46) + 8|0);
    HEAPF64[$64>>3] = -9223372036854775808.0;
    $73 = -9223372036854775808.0;
   } else {
    $65 = (_i64Subtract(0,0,($51|0),($54|0))|0);
    $66 = tempRet0;
    $67 = $48;
    $68 = $67;
    HEAP32[$68>>2] = $65;
    $69 = (($67) + 4)|0;
    $70 = $69;
    HEAP32[$70>>2] = $66;
    $$phi$trans$insert = (($46) + 8|0);
    $$pre = +HEAPF64[$$phi$trans$insert>>3];
    $73 = $$pre;
   }
   $71 = (($46) + 8|0);
   $72 = -$73;
   HEAPF64[$71>>3] = $72;
   _sqlite3ValueApplyAffinity($46,$affinity,$enc);
   $85 = $46;$rc$0 = 0;
  } else {
   $85 = $46;$rc$0 = 0;
  }
 }
 HEAP32[$ppVal>>2] = $85;
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _valueNew($db) {
 $db = $db|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ValueNew($db)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ValueApplyAffinity($pVal,$affinity,$enc) {
 $pVal = $pVal|0;
 $affinity = $affinity|0;
 $enc = $enc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _applyAffinity($pVal,$affinity,$enc);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemNumerify($pMem) {
 $pMem = $pMem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 13;
 $3 = ($2<<16>>16)==(0);
 do {
  if ($3) {
   $4 = (($pMem) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($pMem) + 16|0);
   $7 = (($pMem) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($pMem) + 30|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = (_sqlite3Atoi64($5,$6,$8,$10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP16[$0>>1]|0;
    $14 = $13&65535;
    $15 = $14 & 48640;
    $16 = $15 | 4;
    $17 = $16&65535;
    HEAP16[$0>>1] = $17;
    $26 = $17;
    break;
   } else {
    $18 = (+_sqlite3VdbeRealValue($pMem));
    $19 = (($pMem) + 8|0);
    HEAPF64[$19>>3] = $18;
    $20 = HEAP16[$0>>1]|0;
    $21 = $20&65535;
    $22 = $21 & 48640;
    $23 = $22 | 8;
    $24 = $23&65535;
    HEAP16[$0>>1] = $24;
    _sqlite3VdbeIntegerAffinity($pMem);
    $$pre = HEAP16[$0>>1]|0;
    $26 = $$pre;
    break;
   }
  } else {
   $26 = $1;
  }
 } while(0);
 $25 = $26&65535;
 $27 = $25 & 65517;
 $28 = $27&65535;
 HEAP16[$0>>1] = $28;
 STACKTOP = sp;return;
}
function _sqlite3HexToBlob($db,$z,$n) {
 $db = $db|0;
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n|0) / 2)&-1;
 $1 = (($0) + 1)|0;
 $2 = (_sqlite3DbMallocRaw($db,$1)|0);
 $3 = (($n) + -1)|0;
 $4 = ($2|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = ($3|0)>(0);
 if ($5) {
  $i$01 = 0;
  while(1) {
   $6 = (($z) + ($i$01)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (_sqlite3HexToInt($8)|0);
   $10 = $9&255;
   $11 = $10 << 4;
   $12 = $i$01 | 1;
   $13 = (($z) + ($12)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = (_sqlite3HexToInt($15)|0);
   $17 = $16&255;
   $18 = $17 | $11;
   $19 = $18&255;
   $20 = (($i$01|0) / 2)&-1;
   $21 = (($2) + ($20)|0);
   HEAP8[$21>>0] = $19;
   $22 = (($i$01) + 2)|0;
   $23 = ($22|0)<($3|0);
   if ($23) {
    $i$01 = $22;
   } else {
    break;
   }
  }
  $phitmp = (($22|0) / 2)&-1;
  $i$0$lcssa = $phitmp;
 } else {
  $i$0$lcssa = 0;
 }
 $24 = (($2) + ($i$0$lcssa)|0);
 HEAP8[$24>>0] = 0;
 STACKTOP = sp;return ($2|0);
}
function _sqlite3VdbeIntegerAffinity($pMem) {
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 8|0);
 $1 = +HEAPF64[$0>>3];
 $2 = (_doubleToInt64($1)|0);
 $3 = tempRet0;
 $4 = (($pMem) + 16|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $2;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (+($2>>>0)) + (4294967296.0*(+($3|0)));
 $10 = $1 != $9;
 $11 = (_i64Add(($2|0),($3|0),1,-2147483648)|0);
 $12 = tempRet0;
 $13 = ($12>>>0)<(0);
 $14 = ($12|0)==(0);
 $15 = ($11>>>0)<(2);
 $16 = $14 & $15;
 $17 = $13 | $16;
 $or$cond = $10 | $17;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $18 = (($pMem) + 28|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $20 | 4;
 $22 = $21&65535;
 HEAP16[$18>>1] = $22;
 STACKTOP = sp;return;
}
function _doubleToInt64($r) {
 $r = +$r;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = !($r <= -9223372036854775808.0);
 if ($0) {
  $1 = !($r >= 9223372036854775808.0);
  if ($1) {
   $2 = (~~$r)>>>0;
   $3 = +Math_abs($r) >= 1.0 ? $r > 0.0 ? (Math_min(+Math_floor($r / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($r - +(~~$r >>> 0)) / 4294967296.0) >>> 0 : 0;
   $4 = $3;$5 = $2;
  } else {
   $4 = 2147483647;$5 = -1;
  }
 } else {
  $4 = -2147483648;$5 = 0;
 }
 tempRet0 = $4;
 STACKTOP = sp;return ($5|0);
}
function _applyAffinity($pRec,$affinity,$enc) {
 $pRec = $pRec|0;
 $affinity = $affinity|0;
 $enc = $enc|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($affinity<<24>>24) == 97)) {
  $0 = (($pRec) + 28|0);
  $1 = HEAP16[$0>>1]|0;
  $2 = $1&65535;
  $3 = $2 & 2;
  $4 = ($3|0)!=(0);
  $5 = $2 & 12;
  $6 = ($5|0)==(0);
  $or$cond = $4 | $6;
  if ($or$cond) {
   $9 = $1;
  } else {
   $7 = $enc&255;
   (_sqlite3VdbeMemStringify($pRec,$7)|0);
   $$pre = HEAP16[$0>>1]|0;
   $9 = $$pre;
  }
  $8 = $9&65535;
  $10 = $8 & 65523;
  $11 = $10&65535;
  HEAP16[$0>>1] = $11;
  STACKTOP = sp;return;
 } else if ((($affinity<<24>>24) == 98)) {
  STACKTOP = sp;return;
 } else {
  _applyNumericAffinity($pRec);
  $12 = (($pRec) + 28|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 & 8;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   STACKTOP = sp;return;
  }
  _sqlite3VdbeIntegerAffinity($pRec);
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeMemStringify($pMem,$enc) {
 $pMem = $pMem|0;
 $enc = $enc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (_sqlite3VdbeMemGrow($pMem,32,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $1 & 4;
 $5 = ($4<<16>>16)==(0);
 $6 = (($pMem) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $19 = (($pMem) + 8|0);
  $20 = +HEAPF64[$19>>3];
  HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_sqlite3_snprintf(32,$7,9960,$vararg_buffer1)|0);
 } else {
  $8 = (($pMem) + 16|0);
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = $vararg_buffer;
  $16 = $15;
  HEAP32[$16>>2] = $11;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  (_sqlite3_snprintf(32,$7,9608,$vararg_buffer)|0);
 }
 $21 = HEAP32[$6>>2]|0;
 $22 = (_sqlite3Strlen30($21)|0);
 $23 = (($pMem) + 24|0);
 HEAP32[$23>>2] = $22;
 $24 = (($pMem) + 30|0);
 HEAP8[$24>>0] = 1;
 $25 = HEAP16[$0>>1]|0;
 $26 = $25&65535;
 $27 = $26 | 514;
 $28 = $27&65535;
 HEAP16[$0>>1] = $28;
 (_sqlite3VdbeChangeEncoding($pMem,$enc)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FindIndex($db,$zName,$zDb) {
 $db = $db|0;
 $zName = $zName|0;
 $zDb = $zDb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, $p$02 = 0, $p$1 = 0, $p$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = (($db) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $p$2 = 0;
  STACKTOP = sp;return ($p$2|0);
 }
 $4 = (($db) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($zDb|0)==(0|0);
 $i$01 = 0;$p$02 = 0;
 while(1) {
  $7 = ($i$01|0)<(2);
  $8 = $7&1;
  $9 = $8 ^ $i$01;
  $10 = ((($5) + ($9<<4)|0) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  if ($6) {
   label = 5;
  } else {
   $12 = (($5) + ($9<<4)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_sqlite3_stricmp($zDb,$13)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    label = 5;
   } else {
    $p$1 = $p$02;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $16 = (($11) + 24|0);
   $17 = (_sqlite3HashFind($16,$zName,$0)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    $p$1 = $17;
   } else {
    $p$2 = $17;
    label = 7;
    break;
   }
  }
  $19 = (($i$01) + 1)|0;
  $20 = ($19|0)<($2|0);
  if ($20) {
   $i$01 = $19;$p$02 = $p$1;
  } else {
   $p$2 = $p$1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($p$2|0);
 }
 return 0|0;
}
function _sqlite3CheckObjectName($pParse,$zName) {
 $pParse = $pParse|0;
 $zName = $zName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 137|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (($pParse) + 18|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $7 = (($0) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & 2048;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (_sqlite3_strnicmp($zName,15296,7)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     HEAP32[$vararg_buffer>>2] = $zName;
     _sqlite3ErrorMsg($pParse,18216,$vararg_buffer);
     $$0 = 1;
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ViewGetColumnNames($pParse,$pTable) {
 $pParse = $pParse|0;
 $pTable = $pTable|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nErr$0 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3VtabCallConnect($pParse,$pTable)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pTable) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 16;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pTable) + 38|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)>(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($8<<16>>16)<(0);
 if ($10) {
  $11 = HEAP32[$pTable>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _sqlite3ErrorMsg($pParse,16480,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($pTable) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_sqlite3SelectDup($0,$13,0)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($0) + 242|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (($pParse) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($14) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 _sqlite3SrcListAssignCursors($pParse,$21);
 HEAP16[$7>>1] = -1;
 HEAP8[$16>>0] = 0;
 $22 = (($0) + 276|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$22>>2] = 0;
 $24 = (_sqlite3ResultSetOfSelect($pParse,$14)|0);
 HEAP32[$22>>2] = $23;
 HEAP8[$16>>0] = $17;
 HEAP32[$18>>2] = $19;
 $25 = ($24|0)==(0|0);
 if ($25) {
  HEAP16[$7>>1] = 0;
  $nErr$0 = 1;
 } else {
  $26 = (($24) + 38|0);
  $27 = HEAP16[$26>>1]|0;
  HEAP16[$7>>1] = $27;
  $28 = (($24) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($pTable) + 4|0);
  HEAP32[$30>>2] = $29;
  HEAP16[$26>>1] = 0;
  HEAP32[$28>>2] = 0;
  _sqlite3DeleteTable($0,$24);
  $31 = (($pTable) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 78|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = $35 | 2;
  $37 = $36&65535;
  HEAP16[$33>>1] = $37;
  $nErr$0 = 0;
 }
 _sqlite3SelectDelete($0,$14);
 $$0 = $nErr$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3GetVTable($db,$pTab) {
 $db = $db|0;
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pVtab$0 = 0, $pVtab$0$lcssa = 0, $pVtab$01 = 0, $pVtab$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 60|0);
 $pVtab$01 = HEAP32[$0>>2]|0;
 $1 = ($pVtab$01|0)==(0|0);
 L1: do {
  if ($1) {
   $pVtab$0$lcssa = 0;
  } else {
   $pVtab$02 = $pVtab$01;
   while(1) {
    $4 = HEAP32[$pVtab$02>>2]|0;
    $5 = ($4|0)==($db|0);
    if ($5) {
     $pVtab$0$lcssa = $pVtab$02;
     break L1;
    }
    $2 = (($pVtab$02) + 24|0);
    $pVtab$0 = HEAP32[$2>>2]|0;
    $3 = ($pVtab$0|0)==(0|0);
    if ($3) {
     $pVtab$0$lcssa = 0;
     break;
    } else {
     $pVtab$02 = $pVtab$0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($pVtab$0$lcssa|0);
}
function _sqlite3MayAbort($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = (($pParse$) + 23|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function _whereForeignKeys($pParse,$pTab$0$0$val,$pTab$0$20$val) {
 $pParse = $pParse|0;
 $pTab$0$0$val = $pTab$0$0$val|0;
 $pTab$0$20$val = $pTab$0$20$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$01 = 0, $zWhere$0$lcssa = 0, $zWhere$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3FkReferences($pTab$0$0$val,$pTab$0$20$val)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $zWhere$0$lcssa = 0;
  STACKTOP = sp;return ($zWhere$0$lcssa|0);
 }
 $p$01 = $0;$zWhere$02 = 0;
 while(1) {
  $2 = HEAP32[$pParse>>2]|0;
  $3 = HEAP32[$p$01>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (_whereOrName($2,$zWhere$02,$4)|0);
  $6 = (($p$01) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $zWhere$0$lcssa = $5;
   break;
  } else {
   $p$01 = $7;$zWhere$02 = $5;
  }
 }
 STACKTOP = sp;return ($zWhere$0$lcssa|0);
}
function _sqlite3FkReferences($pTab$0$0$val,$pTab$0$20$val) {
 $pTab$0$0$val = $pTab$0$0$val|0;
 $pTab$0$20$val = $pTab$0$20$val|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($pTab$0$0$val)|0);
 $1 = (($pTab$0$20$val) + 56|0);
 $2 = (_sqlite3HashFind($1,$pTab$0$0$val,$0)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3VtabCallConnect($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $zErr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zErr = sp + 12|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pTab) + 44|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 16;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_sqlite3GetVTable($0,$pTab)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pTab) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 300|0);
 $11 = (_sqlite3Strlen30($9)|0);
 $12 = (_sqlite3HashFind($10,$9,$11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$vararg_buffer>>2] = $9;
  _sqlite3ErrorMsg($pParse,18096,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$zErr>>2] = 0;
 $14 = HEAP32[$12>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_vtabCallConstructor($0,$pTab,$12,$16,$zErr)|0);
 $18 = ($17|0)==(0);
 $$pre = HEAP32[$zErr>>2]|0;
 if (!($18)) {
  HEAP32[$vararg_buffer1>>2] = $$pre;
  _sqlite3ErrorMsg($pParse,1712,$vararg_buffer1);
 }
 _sqlite3DbFree($0,$$pre);
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SelectDup($db,$p,$flags) {
 $db = $db|0;
 $p = $p|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_sqlite3DbMallocRaw($db,80)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = (_sqlite3ExprListDup($db,$3,$flags)|0);
 HEAP32[$1>>2] = $4;
 $5 = (($p) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3SrcListDup($db,$6,$flags)|0);
 $8 = (($1) + 40|0);
 HEAP32[$8>>2] = $7;
 $9 = (($p) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_sqlite3ExprDup($db,$10,$flags)|0);
 $12 = (($1) + 44|0);
 HEAP32[$12>>2] = $11;
 $13 = (($p) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_sqlite3ExprListDup($db,$14,$flags)|0);
 $16 = (($1) + 48|0);
 HEAP32[$16>>2] = $15;
 $17 = (($p) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_sqlite3ExprDup($db,$18,$flags)|0);
 $20 = (($1) + 52|0);
 HEAP32[$20>>2] = $19;
 $21 = (($p) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_sqlite3ExprListDup($db,$22,$flags)|0);
 $24 = (($1) + 56|0);
 HEAP32[$24>>2] = $23;
 $25 = (($p) + 4|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = (($1) + 4|0);
 HEAP8[$27>>0] = $26;
 $28 = (($p) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_sqlite3SelectDup($db,$29,$flags)|0);
 $31 = (($1) + 60|0);
 HEAP32[$31>>2] = $30;
 $32 = ($30|0)==(0|0);
 if (!($32)) {
  $33 = (($30) + 64|0);
  HEAP32[$33>>2] = $1;
 }
 $34 = (($1) + 64|0);
 HEAP32[$34>>2] = 0;
 $35 = (($p) + 68|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_sqlite3ExprDup($db,$36,$flags)|0);
 $38 = (($1) + 68|0);
 HEAP32[$38>>2] = $37;
 $39 = (($p) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_sqlite3ExprDup($db,$40,$flags)|0);
 $42 = (($1) + 72|0);
 HEAP32[$42>>2] = $41;
 $43 = (($1) + 8|0);
 HEAP32[$43>>2] = 0;
 $44 = (($1) + 12|0);
 HEAP32[$44>>2] = 0;
 $45 = (($p) + 6|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $47 & 65527;
 $49 = $48&65535;
 $50 = (($1) + 6|0);
 HEAP16[$50>>1] = $49;
 $51 = (($1) + 16|0);
 HEAP32[$51>>2] = -1;
 $52 = (($1) + 20|0);
 HEAP32[$52>>2] = -1;
 $53 = (($1) + 24|0);
 HEAP32[$53>>2] = -1;
 $54 = (($p) + 32|0);
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($1) + 32|0);
 $62 = $61;
 $63 = $62;
 HEAP32[$63>>2] = $57;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $60;
 $66 = (($p) + 76|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (_withDup($db,$67)|0);
 $69 = (($1) + 76|0);
 HEAP32[$69>>2] = $68;
 $$0 = $1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SrcListAssignCursors($pParse,$pList) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pList) + 8|0);
 $4 = (($pParse) + 72|0);
 $i$01 = 0;$pItem$02 = $3;
 while(1) {
  $5 = (($pItem$02) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>(-1);
  if ($7) {
   label = 8;
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$4>>2] = $9;
  HEAP32[$5>>2] = $8;
  $10 = (($pItem$02) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = (($11) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   _sqlite3SrcListAssignCursors($pParse,$14);
  }
  $15 = (($i$01) + 1)|0;
  $16 = (($pItem$02) + 72|0);
  $17 = HEAP32[$pList>>2]|0;
  $18 = ($15|0)<($17|0);
  if ($18) {
   $i$01 = $15;$pItem$02 = $16;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _sqlite3ResultSetOfSelect($pParse,$pSelect) {
 $pParse = $pParse|0;
 $pSelect = $pSelect|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -97;
 $4 = $3 | 64;
 HEAP32[$1>>2] = $4;
 _sqlite3SelectPrep($pParse,$pSelect,0);
 $5 = (($pParse) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$01 = $pSelect;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $8 = (($$01) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 HEAP32[$1>>2] = $2;
 $11 = (_sqlite3DbMallocZero($0,76)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($11) + 40|0);
 HEAP16[$13>>1] = 1;
 HEAP32[$11>>2] = 0;
 $14 = (($11) + 28|0);
 HEAP32[$14>>2] = 1048576;
 $15 = HEAP32[$$01>>2]|0;
 $16 = (($11) + 38|0);
 $17 = (($11) + 4|0);
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 _selectColumnsFromExprList($pParse$idx$val,$15,$16,$17);
 _selectAddColumnTypeAndCollation($pParse,$11,$$01);
 $18 = (($11) + 36|0);
 HEAP16[$18>>1] = -1;
 $19 = (($0) + 64|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3DeleteTable($0,$11);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SelectPrep($pParse,$p,$pOuterNC) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pOuterNC = $pOuterNC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$pParse>>2]|0;
  $2 = (($1) + 64|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = (($p) + 6|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 & 32;
   $8 = ($7<<16>>16)==(0);
   if ($8) {
    _sqlite3SelectExpand($pParse,$p);
    $9 = (($pParse) + 68|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP8[$2>>0]|0;
     $13 = ($12<<24>>24)==(0);
     if ($13) {
      _sqlite3ResolveSelectNames($pParse,$p,$pOuterNC);
      $14 = HEAP32[$9>>2]|0;
      $15 = ($14|0)==(0);
      if ($15) {
       $16 = HEAP8[$2>>0]|0;
       $17 = ($16<<24>>24)==(0);
       if ($17) {
        _sqlite3SelectAddTypeInfo($pParse,$p);
       }
      }
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _selectColumnsFromExprList($pParse$0$0$val,$pEList,$pnCol,$paCol) {
 $pParse$0$0$val = $pParse$0$0$val|0;
 $pEList = $pEList|0;
 $pnCol = $pnCol|0;
 $paCol = $paCol|0;
 var $$pre$phiZ2D = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $aCol$032 = 0, $aCol$034 = 0, $cnt$08 = 0;
 var $cnt$1 = 0, $exitcond = 0, $i$018 = 0, $i$020 = 0, $iCol$0 = 0, $j$09 = 0, $j$1 = 0, $j$21 = 0, $k$0 = 0, $k$0$in = 0, $k$0$nName$0 = 0, $nName$011 = 0, $nName$1 = 0, $nName$2 = 0, $pCol$019 = 0, $pColExpr$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr10 = 0, $zName$0 = 0, $zName$110 = 0, $zName$2 = 0, $zName$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($pEList|0)==(0|0);
 L1: do {
  if ($0) {
   HEAP16[$pnCol>>1] = 0;
   HEAP32[$paCol>>2] = 0;
   $aCol$034 = 0;
   label = 4;
  } else {
   $1 = HEAP32[$pEList>>2]|0;
   $2 = ($1*24)|0;
   $3 = (_sqlite3DbMallocZero($pParse$0$0$val,$2)|0);
   $4 = $1&65535;
   HEAP16[$pnCol>>1] = $4;
   HEAP32[$paCol>>2] = $3;
   $5 = ($1|0)>(0);
   if ($5) {
    $6 = (($pEList) + 8|0);
    $7 = (($pParse$0$0$val) + 64|0);
    $i$020 = 0;$pCol$019 = $3;
    while(1) {
     $8 = HEAP32[$6>>2]|0;
     $9 = ((($8) + (($i$020*20)|0)|0) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0|0);
     do {
      if ($11) {
       $12 = (($8) + (($i$020*20)|0)|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (_sqlite3ExprSkipCollate($13)|0);
       $pColExpr$0 = $14;
       while(1) {
        $16 = HEAP8[$pColExpr$0>>0]|0;
        if ((($16<<24>>24) == 27)) {
         label = 17;
         break;
        } else if ((($16<<24>>24) == -102)) {
         label = 11;
         break;
        } else if (!((($16<<24>>24) == 122))) {
         break;
        }
        $17 = (($pColExpr$0) + 16|0);
        $18 = HEAP32[$17>>2]|0;
        $pColExpr$0 = $18;
       }
       if ((label|0) == 17) {
        label = 0;
        $36 = (($pColExpr$0) + 8|0);
        $37 = HEAP32[$36>>2]|0;
        HEAP32[$vararg_buffer1>>2] = $37;
        $38 = (_sqlite3MPrintf($pParse$0$0$val,1712,$vararg_buffer1)|0);
        $zName$0 = $38;
        break;
       }
       if ((label|0) == 11) {
        label = 0;
        $19 = (($pColExpr$0) + 44|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($20|0)==(0|0);
        if (!($21)) {
         $22 = (($pColExpr$0) + 32|0);
         $23 = HEAP16[$22>>1]|0;
         $24 = $23 << 16 >> 16;
         $25 = ($23<<16>>16)<(0);
         if ($25) {
          $26 = (($20) + 36|0);
          $27 = HEAP16[$26>>1]|0;
          $28 = $27 << 16 >> 16;
          $iCol$0 = $28;
         } else {
          $iCol$0 = $24;
         }
         $29 = ($iCol$0|0)>(-1);
         if ($29) {
          $30 = (($20) + 4|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = (($31) + (($iCol$0*24)|0)|0);
          $33 = HEAP32[$32>>2]|0;
          $34 = $33;
         } else {
          $34 = 10144;
         }
         HEAP32[$vararg_buffer>>2] = $34;
         $35 = (_sqlite3MPrintf($pParse$0$0$val,1712,$vararg_buffer)|0);
         $zName$0 = $35;
         break;
        }
       }
       $39 = ((($8) + (($i$020*20)|0)|0) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $40;
       $41 = (_sqlite3MPrintf($pParse$0$0$val,1712,$vararg_buffer4)|0);
       $zName$0 = $41;
      } else {
       $15 = (_sqlite3DbStrDup($pParse$0$0$val,$10)|0);
       $zName$0 = $15;
      }
     } while(0);
     $42 = HEAP8[$7>>0]|0;
     $43 = ($42<<24>>24)==(0);
     if (!($43)) {
      break;
     }
     $44 = ($i$020|0)>(0);
     L27: do {
      if ($44) {
       $45 = (_sqlite3Strlen30($zName$0)|0);
       $cnt$08 = 0;$j$09 = 0;$nName$011 = $45;$zName$110 = $zName$0;
       while(1) {
        $46 = (($3) + (($j$09*24)|0)|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = (_sqlite3_stricmp($47,$zName$110)|0);
        $49 = ($48|0)==(0);
        if ($49) {
         $k$0$in = $nName$011;
         while(1) {
          $k$0 = (($k$0$in) + -1)|0;
          $50 = ($k$0|0)>(1);
          if (!($50)) {
           break;
          }
          $51 = (($zName$110) + ($k$0)|0);
          $52 = HEAP8[$51>>0]|0;
          $53 = $52&255;
          $54 = (($53) + -48)|0;
          $55 = ($54>>>0)<(10);
          if ($55) {
           $k$0$in = $k$0;
          } else {
           break;
          }
         }
         $56 = ($k$0$in|0)>(0);
         if ($56) {
          $57 = (($zName$110) + ($k$0)|0);
          $58 = HEAP8[$57>>0]|0;
          $59 = ($58<<24>>24)==(58);
          $k$0$nName$0 = $59 ? $k$0 : $nName$011;
          $nName$1 = $k$0$nName$0;
         } else {
          $nName$1 = $nName$011;
         }
         $60 = (($zName$110) + ($nName$1)|0);
         HEAP8[$60>>0] = 0;
         $61 = (($cnt$08) + 1)|0;
         HEAP32[$vararg_buffer7>>2] = $zName$110;
         $vararg_ptr10 = (($vararg_buffer7) + 4|0);
         HEAP32[$vararg_ptr10>>2] = $61;
         $62 = (_sqlite3MPrintf($pParse$0$0$val,16576,$vararg_buffer7)|0);
         _sqlite3DbFree($pParse$0$0$val,$zName$110);
         $63 = ($62|0)==(0|0);
         if ($63) {
          $zName$3 = 0;
          break L27;
         } else {
          $cnt$1 = $61;$j$1 = -1;$nName$2 = $nName$1;$zName$2 = $62;
         }
        } else {
         $cnt$1 = $cnt$08;$j$1 = $j$09;$nName$2 = $nName$011;$zName$2 = $zName$110;
        }
        $64 = (($j$1) + 1)|0;
        $65 = ($64|0)<($i$020|0);
        if ($65) {
         $cnt$08 = $cnt$1;$j$09 = $64;$nName$011 = $nName$2;$zName$110 = $zName$2;
        } else {
         $zName$3 = $zName$2;
         break;
        }
       }
      } else {
       $zName$3 = $zName$0;
      }
     } while(0);
     HEAP32[$pCol$019>>2] = $zName$3;
     $66 = (($i$020) + 1)|0;
     $67 = (($pCol$019) + 24|0);
     $68 = ($66|0)<($1|0);
     if ($68) {
      $i$020 = $66;$pCol$019 = $67;
     } else {
      $$pre$phiZ2D = $7;$aCol$032 = $3;$i$018 = $66;
      break L1;
     }
    }
    _sqlite3DbFree($pParse$0$0$val,$zName$0);
    $$pre$phiZ2D = $7;$aCol$032 = $3;$i$018 = $i$020;
   } else {
    $aCol$034 = $3;
    label = 4;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$pre$pre = (($pParse$0$0$val) + 64|0);
  $$pre$phiZ2D = $$pre$pre;$aCol$032 = $aCol$034;$i$018 = 0;
 }
 $69 = HEAP8[$$pre$phiZ2D>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if ($70) {
  STACKTOP = sp;return;
 }
 $71 = ($i$018|0)>(0);
 if ($71) {
  $j$21 = 0;
  while(1) {
   $72 = (($aCol$032) + (($j$21*24)|0)|0);
   $73 = HEAP32[$72>>2]|0;
   _sqlite3DbFree($pParse$0$0$val,$73);
   $74 = (($j$21) + 1)|0;
   $exitcond = ($74|0)==($i$018|0);
   if ($exitcond) {
    break;
   } else {
    $j$21 = $74;
   }
  }
 }
 _sqlite3DbFree($pParse$0$0$val,$aCol$032);
 HEAP32[$paCol>>2] = 0;
 HEAP16[$pnCol>>1] = 0;
 STACKTOP = sp;return;
}
function _selectAddColumnTypeAndCollation($pParse,$pTab,$pSelect) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pSelect = $pSelect|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pCol$02 = 0, $sNC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sNC = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
 $4 = (($pSelect) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($sNC) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$pSelect>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pTab) + 38|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)>(0);
 if ($12) {
  $13 = (($pTab) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $23 = 0;$24 = 0;$i$01 = 0;$pCol$02 = $14;
  while(1) {
   $15 = (($9) + (($i$01*20)|0)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($pCol$02) + 22|0);
   $18 = (_columnTypeImpl($sNC,$16,$17)|0);
   $19 = (_sqlite3DbStrDup($0,$18)|0);
   $20 = (($pCol$02) + 12|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $25 = (_i64Add(($22|0),0,($23|0),($24|0))|0);
   $26 = tempRet0;
   $27 = (_sqlite3ExprAffinity($16)|0);
   $28 = (($pCol$02) + 21|0);
   $29 = ($27<<24>>24)==(0);
   $$ = $29 ? 98 : $27;
   HEAP8[$28>>0] = $$;
   $30 = (_sqlite3ExprCollSeq($pParse,$16)|0);
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $32 = HEAP32[$30>>2]|0;
    $33 = (_sqlite3DbStrDup($0,$32)|0);
    $34 = (($pCol$02) + 16|0);
    HEAP32[$34>>2] = $33;
   }
   $35 = (($i$01) + 1)|0;
   $36 = (($pCol$02) + 24|0);
   $37 = HEAP16[$10>>1]|0;
   $38 = $37 << 16 >> 16;
   $39 = ($35|0)<($38|0);
   if ($39) {
    $23 = $25;$24 = $26;$i$01 = $35;$pCol$02 = $36;
   } else {
    break;
   }
  }
  $40 = (_bitshift64Shl(($25|0),($26|0),2)|0);
  $41 = tempRet0;
  $42 = $40;$43 = $41;
 } else {
  $42 = 0;$43 = 0;
 }
 $44 = (_sqlite3LogEst($42,$43)|0);
 $45 = (($pTab) + 42|0);
 HEAP16[$45>>1] = $44;
 STACKTOP = sp;return;
}
function _columnTypeImpl($pNC,$pExpr,$pEstWidth) {
 $pNC = $pNC|0;
 $pExpr = $pExpr|0;
 $pEstWidth = $pEstWidth|0;
 var $$0 = 0, $$0210 = 0, $$0210$phi = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $estWidth = 0, $iCol$0 = 0, $j$0$lcssa = 0;
 var $j$03 = 0, $or$cond9 = 0, $sNC = 0, $sNC1 = 0, $zType$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $estWidth = sp + 64|0;
 $sNC = sp + 32|0;
 $sNC1 = sp;
 HEAP8[$estWidth>>0] = 1;
 $0 = ($pExpr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pNC) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP8[$pExpr>>0]|0;
 $5 = $4&255;
 L7: do {
  if ((($5|0) == 119)) {
   $60 = (($pExpr) + 20|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($61) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($sNC1) + 4|0);
   HEAP32[$68>>2] = $67;
   $69 = (($sNC1) + 16|0);
   HEAP32[$69>>2] = $pNC;
   $70 = HEAP32[$pNC>>2]|0;
   HEAP32[$sNC1>>2] = $70;
   $71 = (_columnTypeImpl($sNC1,$65,$estWidth)|0);
   $zType$0 = $71;
  } else if ((($5|0) == 154) | (($5|0) == 156)) {
   $6 = (($pExpr) + 32|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = ($pNC|0)==(0|0);
   if ($9) {
    $zType$0 = 0;
   } else {
    $10 = (($pExpr) + 28|0);
    $$0210 = $pNC;
    while(1) {
     $11 = (($$0210) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(0);
     L13: do {
      if ($14) {
       $15 = HEAP32[$10>>2]|0;
       $j$03 = 0;
       while(1) {
        $18 = ((($12) + (($j$03*72)|0)|0) + 48|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = ($19|0)==($15|0);
        $17 = (($j$03) + 1)|0;
        if ($20) {
         $j$0$lcssa = $j$03;
         break L13;
        }
        $16 = ($17|0)<($13|0);
        if ($16) {
         $j$03 = $17;
        } else {
         $j$0$lcssa = $17;
         break;
        }
       }
      } else {
       $j$0$lcssa = 0;
      }
     } while(0);
     $21 = ($j$0$lcssa|0)<($13|0);
     if ($21) {
      $22 = ((($12) + (($j$0$lcssa*72)|0)|0) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($12) + (($j$0$lcssa*72)|0)|0) + 28|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($$0210|0)!=(0|0);
      $27 = ($23|0)==(0|0);
      $or$cond9 = $26 & $27;
      if ($or$cond9) {
       $$0210$phi = $$0210;$$0210 = $$0210$phi;
       continue;
      } else {
       break;
      }
     } else {
      $28 = (($$0210) + 16|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0|0);
      if ($30) {
       $zType$0 = 0;
       break L7;
      } else {
       $$0210 = $29;
       continue;
      }
     }
    }
    if ($27) {
     $zType$0 = 0;
    } else {
     $31 = ($25|0)==(0|0);
     if (!($31)) {
      $32 = ($7<<16>>16)>(-1);
      if (!($32)) {
       $zType$0 = 0;
       break;
      }
      $33 = HEAP32[$25>>2]|0;
      $34 = HEAP32[$33>>2]|0;
      $35 = ($8|0)<($34|0);
      if (!($35)) {
       $zType$0 = 0;
       break;
      }
      $36 = (($33) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + (($8*20)|0)|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($25) + 40|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($sNC) + 4|0);
      HEAP32[$42>>2] = $41;
      $43 = (($sNC) + 16|0);
      HEAP32[$43>>2] = $$0210;
      $44 = HEAP32[$$0210>>2]|0;
      HEAP32[$sNC>>2] = $44;
      $45 = (_columnTypeImpl($sNC,$39,$estWidth)|0);
      $zType$0 = $45;
      break;
     }
     $46 = (($23) + 68|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $zType$0 = 0;
     } else {
      $49 = ($7<<16>>16)<(0);
      if ($49) {
       $50 = (($23) + 36|0);
       $51 = HEAP16[$50>>1]|0;
       $52 = $51 << 16 >> 16;
       $iCol$0 = $52;
      } else {
       $iCol$0 = $8;
      }
      $53 = ($iCol$0|0)<(0);
      if ($53) {
       $zType$0 = 16568;
      } else {
       $54 = (($23) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($55) + (($iCol$0*24)|0)|0) + 12|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ((($55) + (($iCol$0*24)|0)|0) + 22|0);
       $59 = HEAP8[$58>>0]|0;
       HEAP8[$estWidth>>0] = $59;
       $zType$0 = $57;
      }
     }
    }
   }
  } else {
   $zType$0 = 0;
  }
 } while(0);
 $72 = ($pEstWidth|0)==(0|0);
 if ($72) {
  $$0 = $zType$0;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = HEAP8[$estWidth>>0]|0;
 HEAP8[$pEstWidth>>0] = $73;
 $$0 = $zType$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprAffinity($pExpr) {
 $pExpr = $pExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pExpr$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pExpr$tr = $pExpr;
 L1: while(1) {
  $0 = (_sqlite3ExprSkipCollate($pExpr$tr)|0);
  $1 = HEAP8[$0>>0]|0;
  switch ($1<<24>>24) {
  case -102: case -100: case -97:  {
   label = 5;
   break L1;
   break;
  }
  case 38:  {
   label = 4;
   break L1;
   break;
  }
  case 119:  {
   break;
  }
  default: {
   break L1;
  }
  }
  $2 = (($0) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $pExpr$tr = $7;
 }
 if ((label|0) == 4) {
  $8 = (($0) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_sqlite3AffinityType($9,0)|0);
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 5) {
  $11 = (($0) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = (($0) + 32|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = ($15<<16>>16)<(0);
   if ($16) {
    $$0 = 100;
    STACKTOP = sp;return ($$0|0);
   }
   $17 = $15 << 16 >> 16;
   $18 = (($12) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19) + (($17*24)|0)|0) + 21|0);
   $21 = HEAP8[$20>>0]|0;
   $$0 = $21;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = (($0) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprCollSeq($pParse,$pExpr) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$be = 0, $p$0$be$in = 0, $p$010 = 0, $pColl$0 = 0, $pColl$0$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pExpr|0)==(0|0);
 L1: do {
  if ($1) {
   $pColl$0 = 0;
  } else {
   $p$010 = $pExpr;
   while(1) {
    $2 = HEAP8[$p$010>>0]|0;
    if ((($2<<24>>24) == 95)) {
     label = 6;
     break;
    } else if ((($2<<24>>24) == -97)) {
     $5 = (($p$010) + 38|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)==(95);
     if ($7) {
      label = 6;
      break;
     } else {
      label = 7;
     }
    } else if ((($2<<24>>24) == 38) | (($2<<24>>24) == -98)) {
     $3 = (($p$010) + 12|0);
     $p$0$be$in = $3;
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     label = 0;
     $17 = (($p$010) + 44|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     if (!($19)) {
      if ((($2<<24>>24) == 62) | (($2<<24>>24) == -102) | (($2<<24>>24) == -100) | (($2<<24>>24) == -97)) {
       break;
      }
     }
     $35 = (($p$010) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 256;
     $38 = ($37|0)==(0);
     if ($38) {
      $pColl$0 = 0;
      break L1;
     }
     $39 = (($p$010) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $42 = (($40) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 & 256;
      $45 = ($44|0)==(0);
      if (!($45)) {
       $p$010 = $40;
       continue;
      }
     }
     $46 = (($p$010) + 16|0);
     $p$0$be$in = $46;
    }
    $p$0$be = HEAP32[$p$0$be$in>>2]|0;
    $4 = ($p$0$be|0)==(0|0);
    if ($4) {
     $pColl$0 = 0;
     break L1;
    } else {
     $p$010 = $p$0$be;
    }
   }
   if ((label|0) == 6) {
    $8 = (($0) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + 77|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = (($p$010) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_sqlite3GetCollSeq($pParse,$13,0,$15)|0);
    $pColl$0 = $16;
    break;
   }
   $20 = (($p$010) + 32|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = ($21<<16>>16)>(-1);
   if ($22) {
    $23 = $21 << 16 >> 16;
    $24 = (($18) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25) + (($23*24)|0)|0) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($0) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 77|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = (_sqlite3FindCollSeq($0,$33,$27,0)|0);
    $pColl$0 = $34;
   } else {
    $pColl$0 = 0;
   }
  }
 } while(0);
 $47 = (_sqlite3CheckCollSeq($pParse,$pColl$0)|0);
 $48 = ($47|0)==(0);
 $pColl$0$ = $48 ? $pColl$0 : 0;
 STACKTOP = sp;return ($pColl$0$|0);
}
function _sqlite3LogEst($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$3$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $y$05 = 0, $y$1$lcssa = 0, $y$117 = 0, $y$211 = 0, $y$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(0);
 $3 = ($1|0)==(0);
 $4 = ($0>>>0)<(8);
 $5 = $3 & $4;
 $6 = $2 | $5;
 if ($6) {
  $12 = ($1>>>0)<(0);
  $13 = ($1|0)==(0);
  $14 = ($0>>>0)<(2);
  $15 = $13 & $14;
  $16 = $12 | $15;
  if ($16) {
   $$01 = 0;
   STACKTOP = sp;return ($$01|0);
  } else {
   $19 = $0;$20 = $1;$y$05 = 40;
  }
  while(1) {
   $17 = $y$05 & 65535;
   $18 = (($17) + 65526)|0;
   $21 = (_bitshift64Shl(($19|0),($20|0),1)|0);
   $22 = tempRet0;
   $23 = ($22>>>0)<(0);
   $24 = ($22|0)==(0);
   $25 = ($21>>>0)<(8);
   $26 = $24 & $25;
   $27 = $23 | $26;
   if ($27) {
    $19 = $21;$20 = $22;$y$05 = $18;
   } else {
    break;
   }
  }
  $59 = $18&65535;
  $$3$off0 = $21;$y$3 = $59;
 } else {
  $7 = ($1>>>0)>(0);
  $8 = ($1|0)==(0);
  $9 = ($0>>>0)>(255);
  $10 = $8 & $9;
  $11 = $7 | $10;
  if ($11) {
   $38 = $0;$39 = $1;$y$117 = 40;
   while(1) {
    $37 = $y$117 & 65535;
    $29 = (($37) + 40)|0;
    $40 = (_bitshift64Lshr(($38|0),($39|0),4)|0);
    $41 = tempRet0;
    $42 = ($39>>>0)>(0);
    $43 = ($39|0)==(0);
    $44 = ($38>>>0)>(4095);
    $45 = $43 & $44;
    $46 = $42 | $45;
    if ($46) {
     $38 = $40;$39 = $41;$y$117 = $29;
    } else {
     break;
    }
   }
   $28 = $29&65535;
   $31 = $41;$34 = $40;$y$1$lcssa = $28;
  } else {
   $31 = $1;$34 = $0;$y$1$lcssa = 40;
  }
  $30 = ($31>>>0)>(0);
  $32 = ($31|0)==(0);
  $33 = ($34>>>0)>(15);
  $35 = $32 & $33;
  $36 = $30 | $35;
  if ($36) {
   $50 = $34;$51 = $31;$y$211 = $y$1$lcssa;
   while(1) {
    $47 = $y$211&65535;
    $48 = (($47) + 10)|0;
    $49 = $48&65535;
    $52 = (_bitshift64Lshr(($50|0),($51|0),1)|0);
    $53 = tempRet0;
    $54 = ($51>>>0)>(0);
    $55 = ($51|0)==(0);
    $56 = ($50>>>0)>(31);
    $57 = $55 & $56;
    $58 = $54 | $57;
    if ($58) {
     $50 = $52;$51 = $53;$y$211 = $49;
    } else {
     break;
    }
   }
   $$3$off0 = $52;$y$3 = $49;
  } else {
   $$3$off0 = $34;$y$3 = $y$1$lcssa;
  }
 }
 $60 = $$3$off0 & 7;
 $61 = (16512 + ($60<<1)|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = $y$3&65535;
 $65 = (($64) + 65526)|0;
 $66 = (($65) + ($63))|0;
 $67 = $66&65535;
 $$01 = $67;
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3GetCollSeq($pParse,$enc,$pColl,$zName) {
 $pParse = $pParse|0;
 $enc = $enc|0;
 $pColl = $pColl|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $p$01 = 0, $p$17 = 0, $p$23 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pColl|0)==(0|0);
 if ($1) {
  $2 = (_sqlite3FindCollSeq($0,$enc,$zName,0)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   label = 4;
  } else {
   $p$01 = $2;
   label = 3;
  }
 } else {
  $p$01 = $pColl;
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (($p$01) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 4;
  } else {
   $p$17 = $p$01;
   label = 5;
  }
 }
 if ((label|0) == 4) {
  $7 = $enc&255;
  _callCollNeeded($0,$7,$zName);
  $8 = (_sqlite3FindCollSeq($0,$enc,$zName,0)|0);
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $p$17 = $8;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $10 = (($p$17) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $p$23 = $p$17;
   STACKTOP = sp;return ($p$23|0);
  }
  $13 = (_synthCollSeq($0,$p$17)|0);
  $not$ = ($13|0)==(0);
  if ($not$) {
   $p$23 = $p$17;
   STACKTOP = sp;return ($p$23|0);
  }
 }
 HEAP32[$vararg_buffer>>2] = $zName;
 _sqlite3ErrorMsg($pParse,16528,$vararg_buffer);
 $p$23 = 0;
 STACKTOP = sp;return ($p$23|0);
}
function _sqlite3CheckCollSeq($pParse,$pColl) {
 $pParse = $pParse|0;
 $pColl = $pColl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pColl|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$pColl>>2]|0;
  $2 = HEAP32[$pParse>>2]|0;
  $3 = (($2) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 77|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (_sqlite3GetCollSeq($pParse,$8,$pColl,$1)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _callCollNeeded($db,$enc,$zName) {
 $db = $db|0;
 $enc = $enc|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 212|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = (_sqlite3DbStrDup($db,$zName)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    STACKTOP = sp;return;
   } else {
    $5 = HEAP32[$0>>2]|0;
    $6 = (($db) + 220|0);
    $7 = HEAP32[$6>>2]|0;
    FUNCTION_TABLE_viiii[$5 & 255]($7,$db,$enc,$3);
    _sqlite3DbFree($db,$3);
    break;
   }
  }
 } while(0);
 $8 = (($db) + 216|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (_sqlite3ValueNew($db)|0);
 _sqlite3ValueSetStr($11,$zName,1,0);
 $12 = (_sqlite3ValueText($11,2)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$8>>2]|0;
  $15 = (($db) + 220|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($db) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 77|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  FUNCTION_TABLE_viiii[$14 & 255]($16,$db,$23,$12);
 }
 _sqlite3ValueFree($11);
 STACKTOP = sp;return;
}
function _synthCollSeq($db,$pColl) {
 $db = $db|0;
 $pColl = $pColl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pColl>>2]|0;
 $i$01 = 0;
 while(1) {
  $3 = (16560 + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (_sqlite3FindCollSeq($db,$4,$0,0)|0);
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $2 = (($i$01) + 1)|0;
  if (!($8)) {
   break;
  }
  $1 = ($2|0)<(3);
  if ($1) {
   $i$01 = $2;
  } else {
   $$0 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$pColl+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$pColl+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$pColl+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$pColl+12>>2]=HEAP32[$5+12>>2]|0;
 $9 = (($pColl) + 16|0);
 HEAP32[$9>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprSkipCollate($pExpr) {
 $pExpr = $pExpr|0;
 var $$0$be = 0, $$0$be$in = 0, $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pExpr|0)==(0|0);
 L1: do {
  if ($0) {
   $$0$lcssa = 0;
  } else {
   $$01 = $pExpr;
   while(1) {
    $1 = (($$01) + 4|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = $2 & 4096;
    $4 = ($3|0)==(0);
    if ($4) {
     $$0$lcssa = $$01;
     break L1;
    }
    $5 = $2 & 262144;
    $6 = ($5|0)==(0);
    if ($6) {
     $11 = (($$01) + 12|0);
     $$0$be$in = $11;
    } else {
     $7 = (($$01) + 20|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($8) + 8|0);
     $10 = HEAP32[$9>>2]|0;
     $$0$be$in = $10;
    }
    $$0$be = HEAP32[$$0$be$in>>2]|0;
    $12 = ($$0$be|0)==(0|0);
    if ($12) {
     $$0$lcssa = 0;
     break;
    } else {
     $$01 = $$0$be;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _sqlite3AffinityType($zIn,$pszEst) {
 $zIn = $zIn|0;
 $pszEst = $pszEst|0;
 var $$ = 0, $$0 = 0, $$0118 = 0, $$old = 0, $$old2 = 0, $$old4 = 0, $$pr = 0, $$zChar$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $aff$0$be = 0, $aff$0$be$ph = 0, $aff$020 = 0, $aff$1 = 0, $h$0$be = 0, $h$0$be$ph = 0, $h$019 = 0, $v = 0, $zChar$0$be = 0, $zChar$0$be$ph = 0, $zChar$0$lcssa = 0, $zChar$021 = 0, $zChar$116 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 $0 = ($zIn|0)==(0|0);
 if ($0) {
  $$0 = 99;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$zIn>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $aff$1 = 99;$zChar$0$lcssa = 0;
  } else {
   $$0118 = $zIn;$5 = $1;$aff$020 = 99;$h$019 = 0;$zChar$021 = 0;
   while(1) {
    $3 = $h$019 << 8;
    $4 = $5&255;
    $6 = (960 + ($4)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = $8 | $3;
    $10 = (($$0118) + 1|0);
    if ((($9|0) == 1952807028)) {
     $aff$0$be$ph = 97;$h$0$be$ph = $9;$zChar$0$be$ph = $zChar$021;
     label = 5;
    } else if ((($9|0) == 1685026146)) {
     $$old4 = ($aff$020<<24>>24)==(99);
     if ($$old4) {
      $aff$0$be$ph = 101;$h$0$be$ph = 1685026146;$zChar$0$be$ph = $zChar$021;
      label = 5;
     } else {
      label = 13;
     }
    } else if ((($9|0) == 1651273570)) {
     if ((($aff$020<<24>>24) == 101) | (($aff$020<<24>>24) == 99)) {
      $13 = HEAP8[$10>>0]|0;
      $14 = ($13<<24>>24)==(40);
      $$zChar$0 = $14 ? $10 : $zChar$021;
      $12 = $13;$aff$0$be = 98;$h$0$be = 1651273570;$zChar$0$be = $$zChar$0;
     } else {
      label = 14;
     }
    } else if ((($9|0) == 1668050786)) {
     $aff$0$be$ph = 97;$h$0$be$ph = $9;$zChar$0$be$ph = $zChar$021;
     label = 5;
    } else if ((($9|0) == 1919246700)) {
     $$old = ($aff$020<<24>>24)==(99);
     if ($$old) {
      $aff$0$be$ph = 101;$h$0$be$ph = 1919246700;$zChar$0$be$ph = $zChar$021;
      label = 5;
     } else {
      label = 14;
     }
    } else if ((($9|0) == 1667785074)) {
     $aff$0$be$ph = 97;$h$0$be$ph = 1667785074;$zChar$0$be$ph = $10;
     label = 5;
    } else if ((($9|0) == 1718382433)) {
     $$old2 = ($aff$020<<24>>24)==(99);
     if ($$old2) {
      $aff$0$be$ph = 101;$h$0$be$ph = 1718382433;$zChar$0$be$ph = $zChar$021;
      label = 5;
     } else {
      label = 13;
     }
    } else {
     $15 = $9 & 16777215;
     $16 = ($15|0)==(6909556);
     if ($16) {
      $aff$1 = 100;$zChar$0$lcssa = $zChar$021;
      break L4;
     } else {
      $aff$0$be$ph = $aff$020;$h$0$be$ph = $9;$zChar$0$be$ph = $zChar$021;
      label = 5;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $aff$0$be$ph = $aff$020;$h$0$be$ph = $9;$zChar$0$be$ph = $zChar$021;
     label = 5;
    }
    else if ((label|0) == 14) {
     label = 0;
     $aff$0$be$ph = $aff$020;$h$0$be$ph = $9;$zChar$0$be$ph = $zChar$021;
     label = 5;
    }
    if ((label|0) == 5) {
     label = 0;
     $$pr = HEAP8[$10>>0]|0;
     $12 = $$pr;$aff$0$be = $aff$0$be$ph;$h$0$be = $h$0$be$ph;$zChar$0$be = $zChar$0$be$ph;
    }
    $11 = ($12<<24>>24)==(0);
    if ($11) {
     $aff$1 = $aff$0$be;$zChar$0$lcssa = $zChar$0$be;
     break;
    } else {
     $$0118 = $10;$5 = $12;$aff$020 = $aff$0$be;$h$019 = $h$0$be;$zChar$021 = $zChar$0$be;
    }
   }
  }
 } while(0);
 $17 = ($pszEst|0)==(0|0);
 if ($17) {
  $$0 = $aff$1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$pszEst>>0] = 1;
 $18 = ($aff$1<<24>>24)<(99);
 if (!($18)) {
  $$0 = $aff$1;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($zChar$0$lcssa|0)==(0|0);
 if ($19) {
  HEAP8[$pszEst>>0] = 5;
  $$0 = $aff$1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP8[$zChar$0$lcssa>>0]|0;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $$0 = $aff$1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $26 = $20;$zChar$116 = $zChar$0$lcssa;
 }
 while(1) {
  $25 = $26&255;
  $27 = (($25) + -48)|0;
  $28 = ($27>>>0)<(10);
  $23 = (($zChar$116) + 1|0);
  if ($28) {
   break;
  }
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $$0 = $aff$1;
   label = 24;
   break;
  } else {
   $26 = $22;$zChar$116 = $23;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$v>>2] = 0;
 (_sqlite3GetInt32($zChar$116,$v)|0);
 $29 = HEAP32[$v>>2]|0;
 $30 = (($29|0) / 4)&-1;
 $31 = (($30) + 1)|0;
 $32 = ($31|0)>(255);
 $$ = $32 ? 255 : $31;
 HEAP32[$v>>2] = $$;
 $33 = $$&255;
 HEAP8[$pszEst>>0] = $33;
 $$0 = $aff$1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SelectExpand($pParse,$pSelect) {
 $pParse = $pParse|0;
 $pSelect = $pSelect|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;HEAP32[$w+20>>2]=0|0;
 HEAP32[$w>>2] = 157;
 $0 = (($w) + 12|0);
 HEAP32[$0>>2] = $pParse;
 $1 = (($pParse) + 24|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 $$pre = (($w) + 4|0);
 if (!($3)) {
  HEAP32[$$pre>>2] = 158;
  (_sqlite3WalkSelect($w,$pSelect)|0);
 }
 HEAP32[$$pre>>2] = 159;
 $4 = (($w) + 8|0);
 HEAP32[$4>>2] = 160;
 (_sqlite3WalkSelect($w,$pSelect)|0);
 STACKTOP = sp;return;
}
function _sqlite3ResolveSelectNames($pParse,$p,$pOuterNC) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pOuterNC = $pOuterNC|0;
 var $0 = 0, $1 = 0, $2 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 HEAP32[$w>>2] = 161;
 $0 = (($w) + 4|0);
 HEAP32[$0>>2] = 162;
 $1 = (($w) + 12|0);
 HEAP32[$1>>2] = $pParse;
 $2 = (($w) + 20|0);
 HEAP32[$2>>2] = $pOuterNC;
 (_sqlite3WalkSelect($w,$p)|0);
 STACKTOP = sp;return;
}
function _sqlite3SelectAddTypeInfo($pParse,$pSelect) {
 $pParse = $pParse|0;
 $pSelect = $pSelect|0;
 var $0 = 0, $1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;HEAP32[$w+20>>2]=0|0;
 $0 = (($w) + 8|0);
 HEAP32[$0>>2] = 163;
 HEAP32[$w>>2] = 157;
 $1 = (($w) + 12|0);
 HEAP32[$1>>2] = $pParse;
 (_sqlite3WalkSelect($w,$pSelect)|0);
 STACKTOP = sp;return;
}
function _selectAddSubqueryTypeInfo($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pFrom$01 = 0, $pSel$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 32;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $2 | 32;
 $6 = $5&65535;
 HEAP16[$0>>1] = $6;
 $7 = (($pWalker) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($p) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($10) + 8|0);
 $31 = $11;$i$02 = 0;$pFrom$01 = $13;
 while(1) {
  $14 = (($pFrom$01) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $30 = $31;
  } else {
   $17 = (($15) + 44|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 2;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $30 = $31;
   } else {
    $21 = (($pFrom$01) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $30 = $31;
    } else {
     $pSel$0 = $22;
     while(1) {
      $24 = (($pSel$0) + 60|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)==(0|0);
      if ($26) {
       break;
      } else {
       $pSel$0 = $25;
      }
     }
     _selectAddColumnTypeAndCollation($8,$15,$pSel$0);
     $$pre = HEAP32[$10>>2]|0;
     $30 = $$pre;
    }
   }
  }
  $27 = (($i$02) + 1)|0;
  $28 = (($pFrom$01) + 72|0);
  $29 = ($27|0)<($30|0);
  if ($29) {
   $31 = $30;$i$02 = $27;$pFrom$01 = $28;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _exprWalkNoop($NotUsed,$NotUsed2) {
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _sqlite3WalkSelect($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$0$idx = 0, $$0$idx$val = 0, $$01 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $1 = (($pWalker) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (($pWalker) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$01 = 0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $7 = (($pWalker) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = (($pWalker) + 8|0);
 $$02 = $p;$12 = $2;
 while(1) {
  $11 = ($12|0)==(0|0);
  if (!($11)) {
   $13 = (FUNCTION_TABLE_iii[$12 & 255]($pWalker,$$02)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    label = 14;
    break;
   }
  }
  $15 = (_sqlite3WalkSelectExpr($pWalker,$$02)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   label = 9;
   break;
  }
  $$0$idx = (($$02) + 40|0);
  $$0$idx$val = HEAP32[$$0$idx>>2]|0;
  $17 = (_sqlite3WalkSelectFrom($pWalker,$$0$idx$val)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   label = 9;
   break;
  }
  $21 = HEAP32[$10>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   FUNCTION_TABLE_vii[$21 & 255]($pWalker,$$02);
  }
  $23 = (($$02) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $rc$2 = 0;
   break;
  }
  $$pre = HEAP32[$1>>2]|0;
  $$02 = $24;$12 = $$pre;
 }
 if ((label|0) == 9) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$7>>2] = $20;
  $$01 = 2;
  STACKTOP = sp;return ($$01|0);
 }
 else if ((label|0) == 14) {
  $phitmp = $13 & 2;
  $rc$2 = $phitmp;
 }
 $26 = HEAP32[$7>>2]|0;
 $27 = (($26) + -1)|0;
 HEAP32[$7>>2] = $27;
 $$01 = $rc$2;
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3WalkSelectExpr($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (_sqlite3WalkExprList($pWalker,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (($p) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_sqlite3WalkExpr($pWalker,$4)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (($p) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_sqlite3WalkExprList($pWalker,$8)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (($p) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_sqlite3WalkExpr($pWalker,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = (($p) + 56|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (_sqlite3WalkExprList($pWalker,$16)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = (($p) + 68|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (_sqlite3WalkExpr($pWalker,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $23 = (($p) + 72|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_sqlite3WalkExpr($pWalker,$24)|0);
       $26 = ($25|0)==(0);
       $$ = $26 ? 0 : 2;
       $$0 = $$;
      } else {
       $$0 = 2;
      }
     } else {
      $$0 = 2;
     }
    } else {
     $$0 = 2;
    }
   } else {
    $$0 = 2;
   }
  } else {
   $$0 = 2;
  }
 } else {
  $$0 = 2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalkSelectFrom($pWalker,$p$0$7$val) {
 $pWalker = $pWalker|0;
 $p$0$7$val = $p$0$7$val|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p$0$7$val|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[$p$0$7$val>>2]|0;
   $2 = ($1|0)>(0);
   if ($2) {
    $3 = (($p$0$7$val) + 8|0);
    $i$01 = $1;$pItem$02 = $3;
    while(1) {
     $4 = (($pItem$02) + 20|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = (_sqlite3WalkSelect($pWalker,$5)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $$0 = 2;
      break L1;
     }
     $8 = (($i$01) + -1)|0;
     $9 = (($pItem$02) + 72|0);
     $10 = ($8|0)>(0);
     if ($10) {
      $i$01 = $8;$pItem$02 = $9;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalkExprList($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[$p>>2]|0;
   $2 = ($1|0)>(0);
   if ($2) {
    $3 = (($p) + 8|0);
    $4 = HEAP32[$3>>2]|0;
    $i$01 = $1;$pItem$02 = $4;
    while(1) {
     $5 = HEAP32[$pItem$02>>2]|0;
     $6 = (_sqlite3WalkExpr($pWalker,$5)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $$0 = 2;
      break L1;
     }
     $8 = (($i$01) + -1)|0;
     $9 = (($pItem$02) + 20|0);
     $10 = ($8|0)>(0);
     if ($10) {
      $i$01 = $8;$pItem$02 = $9;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalkExpr($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pExpr|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[$pWalker>>2]|0;
   $2 = (FUNCTION_TABLE_iii[$1 & 255]($pWalker,$pExpr)|0);
   $3 = ($2|0)==(0);
   do {
    if ($3) {
     $4 = (($pExpr) + 4|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = $5 & 16384;
     $7 = ($6|0)==(0);
     if ($7) {
      $8 = (($pExpr) + 12|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = (_sqlite3WalkExpr($pWalker,$9)|0);
      $11 = ($10|0)==(0);
      if (!($11)) {
       $$0 = 2;
       break L1;
      }
      $12 = (($pExpr) + 16|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = (_sqlite3WalkExpr($pWalker,$13)|0);
      $15 = ($14|0)==(0);
      if (!($15)) {
       $$0 = 2;
       break L1;
      }
      $16 = HEAP32[$4>>2]|0;
      $17 = $16 & 2048;
      $18 = ($17|0)==(0);
      $19 = (($pExpr) + 20|0);
      if ($18) {
       $23 = HEAP32[$19>>2]|0;
       $24 = (_sqlite3WalkExprList($pWalker,$23)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        break;
       } else {
        $$0 = 2;
        break L1;
       }
      } else {
       $20 = HEAP32[$19>>2]|0;
       $21 = (_sqlite3WalkSelect($pWalker,$20)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        break;
       } else {
        $$0 = 2;
        break L1;
       }
      }
     }
    }
   } while(0);
   $26 = $2 & 2;
   $$0 = $26;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _resolveExprStep($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $$ = 0, $$0 = 0, $$idx$val = 0, $$idx5$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $$pn = 0, $$pn$in = 0, $$pn1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $is_agg$0 = 0, $is_agg$011 = 0, $is_agg$012 = 0, $no_such_func$0 = 0, $no_such_func$013 = 0;
 var $no_such_func$014 = 0, $pDef$0 = 0, $pDef$015 = 0, $pExpr$idx$val = 0, $pExpr$pn = 0, $pNC2$018 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr6 = 0, $wrong_num_args$0 = 0, $wrong_num_args$010 = 0, $wrong_num_args$09 = 0, $zColumn$0 = 0, $zColumn$0$in = 0;
 var $zDb$0 = 0, $zTable$0 = 0, $zTable$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pWalker) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pExpr) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $4 | 4;
 HEAP32[$3>>2] = $7;
 $8 = HEAP8[$pExpr>>0]|0;
 $9 = $8&255;
 switch ($9|0) {
 case 135:  {
  $$idx7 = (($1) + 28|0);
  $$idx7$val = HEAP8[$$idx7>>0]|0;
  _notValidCheckConstraint($2,$$idx7$val,17208);
  $$idx$val = HEAP8[$$idx7>>0]|0;
  _notValidPartIdxWhere($2,$$idx$val,17208);
  break;
 }
 case 122:  {
  $13 = (($pExpr) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(27);
  if ($16) {
   $$pn1 = $14;$pExpr$pn = $pExpr;$zDb$0 = 0;
  } else {
   $17 = (($pExpr) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($14) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $$pn1 = $22;$pExpr$pn = $14;$zDb$0 = $20;
  }
  $$pn$in = (($pExpr$pn) + 12|0);
  $$pn = HEAP32[$$pn$in>>2]|0;
  $zColumn$0$in = (($$pn1) + 8|0);
  $zTable$0$in = (($$pn) + 8|0);
  $zColumn$0 = HEAP32[$zColumn$0$in>>2]|0;
  $zTable$0 = HEAP32[$zTable$0$in>>2]|0;
  $23 = (_lookupName($2,$zDb$0,$zTable$0,$zColumn$0,$1,$pExpr)|0);
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 27:  {
  $10 = (($pExpr) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_lookupName($2,0,0,$11,$1,$pExpr)|0);
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 75: case 20: case 119:  {
  $125 = $4 & 2048;
  $126 = ($125|0)==(0);
  if (!($126)) {
   $127 = (($1) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $$idx8 = (($1) + 28|0);
   $$idx8$val = HEAP8[$$idx8>>0]|0;
   _notValidCheckConstraint($2,$$idx8$val,17192);
   $$idx5$val = HEAP8[$$idx8>>0]|0;
   _notValidPartIdxWhere($2,$$idx5$val,17192);
   $129 = (($pExpr) + 20|0);
   $130 = HEAP32[$129>>2]|0;
   (_sqlite3WalkSelect($pWalker,$130)|0);
   $131 = HEAP32[$127>>2]|0;
   $132 = ($128|0)==($131|0);
   if (!($132)) {
    $133 = HEAP32[$3>>2]|0;
    $134 = $133 | 32;
    HEAP32[$3>>2] = $134;
   }
  }
  break;
 }
 case 153:  {
  $24 = (($pExpr) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $39 = 0;
  } else {
   $27 = HEAP32[$25>>2]|0;
   $39 = $27;
  }
  $28 = HEAP32[$2>>2]|0;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 77|0);
  $34 = HEAP8[$33>>0]|0;
  $$idx6 = (($1) + 28|0);
  $$idx6$val = HEAP8[$$idx6>>0]|0;
  _notValidPartIdxWhere($2,$$idx6$val,16952);
  $35 = (($pExpr) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_sqlite3Strlen30($36)|0);
  $38 = HEAP32[$2>>2]|0;
  $40 = (_sqlite3FindFunction($38,$36,$37,$39,$34,0)|0);
  $41 = ($40|0)==(0|0);
  do {
   if ($41) {
    $42 = HEAP32[$2>>2]|0;
    $43 = (_sqlite3FindFunction($42,$36,$37,-2,$34,0)|0);
    $44 = ($43|0)==(0|0);
    $45 = $44&1;
    $$ = $45 ^ 1;
    $is_agg$0 = 0;$no_such_func$0 = $45;$pDef$0 = $43;$wrong_num_args$0 = $$;
    label = 16;
   } else {
    $46 = (($40) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    $49 = $48&1;
    $50 = (($40) + 2|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = $51 & 1024;
    $53 = ($52<<16>>16)==(0);
    if ($53) {
     $is_agg$011 = $49;$no_such_func$013 = 0;$pDef$015 = $40;$wrong_num_args$09 = 0;
     label = 17;
    } else {
     $54 = HEAP32[$3>>2]|0;
     $55 = $54 | 266240;
     HEAP32[$3>>2] = $55;
     $56 = ($39|0)==(2);
     if (!($56)) {
      $67 = (($pExpr) + 28|0);
      HEAP32[$67>>2] = 62;
      $is_agg$0 = $49;$no_such_func$0 = 0;$pDef$0 = $40;$wrong_num_args$0 = 0;
      label = 16;
      break;
     }
     $57 = (($25) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + 20|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (_exprProbability($60)|0);
     $62 = (($pExpr) + 28|0);
     HEAP32[$62>>2] = $61;
     $63 = ($61|0)<(0);
     if ($63) {
      _sqlite3ErrorMsg($2,16968,$vararg_buffer);
      $64 = (($1) + 24|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($65) + 1)|0;
      HEAP32[$64>>2] = $66;
      $is_agg$0 = $49;$no_such_func$0 = 0;$pDef$0 = $40;$wrong_num_args$0 = 0;
      label = 16;
     } else {
      $is_agg$0 = $49;$no_such_func$0 = 0;$pDef$0 = $40;$wrong_num_args$0 = 0;
      label = 16;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   $68 = ($pDef$0|0)==(0|0);
   if ($68) {
    $is_agg$012 = $is_agg$0;$no_such_func$014 = $no_such_func$0;$wrong_num_args$010 = $wrong_num_args$0;
   } else {
    $is_agg$011 = $is_agg$0;$no_such_func$013 = $no_such_func$0;$pDef$015 = $pDef$0;$wrong_num_args$09 = $wrong_num_args$0;
    label = 17;
   }
  }
  do {
   if ((label|0) == 17) {
    $69 = (($pDef$015) + 24|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (_sqlite3AuthCheck($2,31,0,$70,0)|0);
    if ((($71|0) == 1)) {
     $72 = HEAP32[$69>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $72;
     _sqlite3ErrorMsg($2,17040,$vararg_buffer1);
     $73 = (($1) + 24|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + 1)|0;
     HEAP32[$73>>2] = $75;
    } else if ((($71|0) == 0)) {
     $76 = (($pDef$015) + 2|0);
     $77 = HEAP16[$76>>1]|0;
     $78 = $77 & 2048;
     $79 = ($78<<16>>16)==(0);
     if ($79) {
      $is_agg$012 = $is_agg$011;$no_such_func$014 = $no_such_func$013;$wrong_num_args$010 = $wrong_num_args$09;
      break;
     }
     $80 = HEAP32[$3>>2]|0;
     $81 = $80 | 524288;
     HEAP32[$3>>2] = $81;
     $is_agg$012 = $is_agg$011;$no_such_func$014 = $no_such_func$013;$wrong_num_args$010 = $wrong_num_args$09;
     break;
    }
    HEAP8[$pExpr>>0] = 101;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $82 = ($is_agg$012|0)==(0);
  if ($82) {
   label = 25;
  } else {
   $83 = HEAP8[$$idx6>>0]|0;
   $84 = $83 & 1;
   $85 = ($84<<24>>24)==(0);
   if ($85) {
    HEAP32[$vararg_buffer3>>2] = $37;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $36;
    _sqlite3ErrorMsg($2,17080,$vararg_buffer3);
    $86 = (($1) + 24|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 1)|0;
    HEAP32[$86>>2] = $88;
   } else {
    label = 25;
   }
  }
  if ((label|0) == 25) {
   $89 = ($no_such_func$014|0)==(0);
   if ($89) {
    label = 28;
   } else {
    $90 = HEAP32[$2>>2]|0;
    $91 = (($90) + 137|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = ($92<<24>>24)==(0);
    if ($93) {
     HEAP32[$vararg_buffer7>>2] = $37;
     $vararg_ptr10 = (($vararg_buffer7) + 4|0);
     HEAP32[$vararg_ptr10>>2] = $36;
     _sqlite3ErrorMsg($2,17120,$vararg_buffer7);
     $94 = (($1) + 24|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) + 1)|0;
     HEAP32[$94>>2] = $96;
    } else {
     label = 28;
    }
   }
   if ((label|0) == 28) {
    $97 = ($wrong_num_args$010|0)==(0);
    if (!($97)) {
     HEAP32[$vararg_buffer11>>2] = $37;
     $vararg_ptr14 = (($vararg_buffer11) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $36;
     _sqlite3ErrorMsg($2,17144,$vararg_buffer11);
     $98 = (($1) + 24|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 1)|0;
     HEAP32[$98>>2] = $100;
    }
   }
   if (!($82)) {
    $101 = HEAP8[$$idx6>>0]|0;
    $102 = $101&255;
    $103 = $102 & 254;
    $104 = $103&255;
    HEAP8[$$idx6>>0] = $104;
    (_sqlite3WalkExprList($pWalker,$25)|0);
    HEAP8[$pExpr>>0] = -101;
    $105 = (($pExpr) + 38|0);
    HEAP8[$105>>0] = 0;
    $106 = ($1|0)==(0|0);
    L52: do {
     if (!($106)) {
      $pNC2$018 = $1;
      while(1) {
       $107 = (($pNC2$018) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $pExpr$idx$val = HEAP32[$24>>2]|0;
       $109 = (_sqlite3FunctionUsesThisSrc($pExpr$idx$val,$108)|0);
       $110 = ($109|0)==(0);
       if (!($110)) {
        break;
       }
       $111 = HEAP8[$105>>0]|0;
       $112 = (($111) + 1)<<24>>24;
       HEAP8[$105>>0] = $112;
       $113 = (($pNC2$018) + 16|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($114|0)==(0|0);
       if ($115) {
        break L52;
       } else {
        $pNC2$018 = $114;
       }
      }
      $116 = (($pNC2$018) + 28|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = $118 | 2;
      $120 = $119&255;
      HEAP8[$116>>0] = $120;
     }
    } while(0);
    $121 = HEAP8[$$idx6>>0]|0;
    $122 = $121&255;
    $123 = $122 | 1;
    $124 = $123&255;
    HEAP8[$$idx6>>0] = $124;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  (_sqlite3WalkExprList($pWalker,$25)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
 }
 }
 $135 = (($2) + 68|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)==(0);
 if (!($137)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $138 = HEAP32[$2>>2]|0;
 $139 = (($138) + 64|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = ($140<<24>>24)!=(0);
 $phitmp = $141 ? 2 : 0;
 $$0 = $phitmp;
 STACKTOP = sp;return ($$0|0);
}
function _resolveSelectStep($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$0 = 0, $$0127 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $i$011 = 0, $i$117 = 0;
 var $i$222 = 0, $nRef$0$lcssa = 0, $nRef$03 = 0, $nRef$1$lcssa = 0, $nRef$15 = 0, $pItem1$023 = 0, $pNC$02 = 0, $pNC$14 = 0, $phitmp = 0, $sNC = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sNC = sp + 16|0;
 $0 = (($p) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pWalker) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pWalker) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $2 & 16;
 $11 = ($10|0)==(0);
 if ($11) {
  _sqlite3SelectPrep($8,$p,$6);
  $12 = (($8) + 68|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = (($9) + 64|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  $phitmp = $17 ? 2 : 1;
  $$0 = $phitmp;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($p) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 $21 = ($p|0)==(0|0);
 L11: do {
  if (!($21)) {
   $22 = (($sNC) + 28|0);
   $23 = (($sNC) + 4|0);
   $24 = (($sNC) + 16|0);
   $25 = (($sNC) + 8|0);
   $26 = (($9) + 64|0);
   $27 = (($8) + 496|0);
   $28 = ($6|0)==(0|0);
   $29 = (($8) + 68|0);
   $$0127 = $p;$32 = $1;
   L13: while(1) {
    $30 = (($$0127) + 6|0);
    $31 = $32&65535;
    $33 = $31 | 2;
    $34 = $33&65535;
    HEAP16[$30>>1] = $34;
    ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
    HEAP32[$sNC>>2] = $8;
    $35 = (($$0127) + 68|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_sqlite3ResolveExprNames($sNC,$36)|0);
    $38 = ($37|0)==(0);
    if (!($38)) {
     $$0 = 2;
     label = 49;
     break;
    }
    $39 = (($$0127) + 72|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (_sqlite3ResolveExprNames($sNC,$40)|0);
    $42 = ($41|0)==(0);
    if (!($42)) {
     $$0 = 2;
     label = 49;
     break;
    }
    $43 = (($$0127) + 40|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)>(0);
    if ($46) {
     $48 = $44;$i$011 = 0;
     while(1) {
      $47 = ((($48) + (($i$011*72)|0)|0) + 28|0);
      $49 = HEAP32[$47>>2]|0;
      $50 = ($49|0)==(0|0);
      if ($50) {
       $81 = $48;
      } else {
       $51 = HEAP32[$27>>2]|0;
       if ($28) {
        $nRef$0$lcssa = 0;
       } else {
        $nRef$03 = 0;$pNC$02 = $6;
        while(1) {
         $52 = (($pNC$02) + 20|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($53) + ($nRef$03))|0;
         $55 = (($pNC$02) + 16|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = ($56|0)==(0|0);
         if ($57) {
          $nRef$0$lcssa = $54;
          break;
         } else {
          $nRef$03 = $54;$pNC$02 = $56;
         }
        }
       }
       $58 = ((($48) + (($i$011*72)|0)|0) + 16|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ($59|0)==(0|0);
       if ($60) {
        $61 = $49;
       } else {
        HEAP32[$27>>2] = $59;
        $$pre32 = HEAP32[$47>>2]|0;
        $61 = $$pre32;
       }
       _sqlite3ResolveSelectNames($8,$61,$6);
       HEAP32[$27>>2] = $51;
       $62 = HEAP32[$29>>2]|0;
       $63 = ($62|0)==(0);
       if (!($63)) {
        $$0 = 2;
        label = 49;
        break L13;
       }
       $64 = HEAP8[$26>>0]|0;
       $65 = ($64<<24>>24)==(0);
       if (!($65)) {
        $$0 = 2;
        label = 49;
        break L13;
       }
       if ($28) {
        $nRef$1$lcssa = $nRef$0$lcssa;
       } else {
        $nRef$15 = $nRef$0$lcssa;$pNC$14 = $6;
        while(1) {
         $66 = (($pNC$14) + 20|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = (($nRef$15) - ($67))|0;
         $69 = (($pNC$14) + 16|0);
         $70 = HEAP32[$69>>2]|0;
         $71 = ($70|0)==(0|0);
         if ($71) {
          $nRef$1$lcssa = $68;
          break;
         } else {
          $nRef$15 = $68;$pNC$14 = $70;
         }
        }
       }
       $72 = ($nRef$1$lcssa|0)!=(0);
       $73 = ((($48) + (($i$011*72)|0)|0) + 45|0);
       $74 = $72&1;
       $75 = HEAP8[$73>>0]|0;
       $76 = ($74 << 1)&255;
       $77 = $75 & -3;
       $78 = $77 | $76;
       HEAP8[$73>>0] = $78;
       $$pre = HEAP32[$43>>2]|0;
       $81 = $$pre;
      }
      $79 = (($i$011) + 1)|0;
      $80 = HEAP32[$81>>2]|0;
      $82 = ($79|0)<($80|0);
      if ($82) {
       $48 = $81;$i$011 = $79;
      } else {
       break;
      }
     }
    }
    HEAP8[$22>>0] = 1;
    $83 = HEAP32[$43>>2]|0;
    HEAP32[$23>>2] = $83;
    HEAP32[$24>>2] = $6;
    $84 = HEAP32[$$0127>>2]|0;
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)>(0);
    if ($86) {
     $87 = (($84) + 8|0);
     $i$117 = 0;
     while(1) {
      $91 = HEAP32[$87>>2]|0;
      $92 = (($91) + (($i$117*20)|0)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (_sqlite3ResolveExprNames($sNC,$93)|0);
      $95 = ($94|0)==(0);
      $90 = (($i$117) + 1)|0;
      if (!($95)) {
       $$0 = 2;
       label = 49;
       break L13;
      }
      $88 = HEAP32[$84>>2]|0;
      $89 = ($90|0)<($88|0);
      if ($89) {
       $i$117 = $90;
      } else {
       break;
      }
     }
    }
    $96 = (($$0127) + 48|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)!=(0|0);
    if ($98) {
     label = 27;
    } else {
     $99 = HEAP8[$22>>0]|0;
     $100 = $99&255;
     $101 = $100 & 2;
     $102 = ($101|0)==(0);
     if ($102) {
      $107 = $100 & 254;
      $108 = $107&255;
      HEAP8[$22>>0] = $108;
     } else {
      label = 27;
     }
    }
    if ((label|0) == 27) {
     label = 0;
     $103 = HEAP16[$30>>1]|0;
     $104 = $103&65535;
     $105 = $104 | 4;
     $106 = $105&65535;
     HEAP16[$30>>1] = $106;
    }
    $109 = (($$0127) + 52|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)==(0|0);
    $brmerge = $111 | $98;
    if (!($brmerge)) {
     label = 30;
     break;
    }
    $112 = HEAP32[$$0127>>2]|0;
    HEAP32[$25>>2] = $112;
    $113 = HEAP32[$109>>2]|0;
    $114 = (_sqlite3ResolveExprNames($sNC,$113)|0);
    $115 = ($114|0)==(0);
    if (!($115)) {
     $$0 = 2;
     label = 49;
     break;
    }
    $116 = (($$0127) + 44|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (_sqlite3ResolveExprNames($sNC,$117)|0);
    $119 = ($118|0)==(0);
    if (!($119)) {
     $$0 = 2;
     label = 49;
     break;
    }
    HEAP32[$24>>2] = 0;
    $120 = HEAP8[$22>>0]|0;
    $121 = $120&255;
    $122 = $121 | 1;
    $123 = $122&255;
    HEAP8[$22>>0] = $123;
    if (!($20)) {
     $124 = (($$0127) + 56|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (_resolveOrderGroupBy($sNC,$$0127,$125,16632)|0);
     $127 = ($126|0)==(0);
     if (!($127)) {
      $$0 = 2;
      label = 49;
      break;
     }
    }
    $128 = HEAP8[$26>>0]|0;
    $129 = ($128<<24>>24)==(0);
    if (!($129)) {
     $$0 = 2;
     label = 49;
     break;
    }
    if ($98) {
     $130 = (_resolveOrderGroupBy($sNC,$$0127,$97,16640)|0);
     $131 = ($130|0)==(0);
     if (!($131)) {
      $$0 = 2;
      label = 49;
      break;
     }
     $132 = HEAP8[$26>>0]|0;
     $133 = ($132<<24>>24)==(0);
     if (!($133)) {
      $$0 = 2;
      label = 49;
      break;
     }
     $134 = HEAP32[$97>>2]|0;
     $135 = ($134|0)>(0);
     if ($135) {
      $136 = (($97) + 8|0);
      $137 = HEAP32[$136>>2]|0;
      $i$222 = 0;$pItem1$023 = $137;
      while(1) {
       $138 = HEAP32[$pItem1$023>>2]|0;
       $139 = (($138) + 4|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = $140 & 2;
       $142 = ($141|0)==(0);
       if (!($142)) {
        label = 42;
        break L13;
       }
       $143 = (($i$222) + 1)|0;
       $144 = (($pItem1$023) + 20|0);
       $145 = ($143|0)<($134|0);
       if ($145) {
        $i$222 = $143;$pItem1$023 = $144;
       } else {
        break;
       }
      }
     }
    }
    $146 = (($$0127) + 60|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ($147|0)==(0|0);
    if ($148) {
     break L11;
    }
    $$phi$trans$insert = (($147) + 6|0);
    $$pre34 = HEAP16[$$phi$trans$insert>>1]|0;
    $$0127 = $147;$32 = $$pre34;
   }
   if ((label|0) == 30) {
    _sqlite3ErrorMsg($8,16584,$vararg_buffer);
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 42) {
    _sqlite3ErrorMsg($8,16648,$vararg_buffer1);
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 49) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 if ($20) {
  $149 = (_resolveCompoundOrderBy($8,$p)|0);
  $150 = ($149|0)==(0);
  if (!($150)) {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ResolveExprNames($pNC,$pExpr) {
 $pNC = $pNC|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 $0 = ($pExpr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$pNC>>2]|0;
 $2 = (($pExpr) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 464|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = (_sqlite3ExprCheckHeight($1,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = (($10) + ($9))|0;
 HEAP32[$4>>2] = $11;
 $12 = (($pNC) + 28|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 2;
 $16 = $14 & 253;
 $17 = $16&255;
 HEAP8[$12>>0] = $17;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 HEAP32[$w>>2] = 161;
 $18 = (($w) + 4|0);
 HEAP32[$18>>2] = 162;
 $19 = HEAP32[$pNC>>2]|0;
 $20 = (($w) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = (($w) + 20|0);
 HEAP32[$21>>2] = $pNC;
 (_sqlite3WalkExpr($w,$pExpr)|0);
 $22 = HEAP32[$2>>2]|0;
 $23 = HEAP32[$pNC>>2]|0;
 $24 = (($23) + 464|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($22))|0;
 HEAP32[$24>>2] = $26;
 $27 = (($pNC) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  label = 5;
 } else {
  $30 = HEAP32[$20>>2]|0;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)>(0);
  if ($33) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $34 = (($pExpr) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 8;
  HEAP32[$34>>2] = $36;
 }
 $37 = HEAP8[$12>>0]|0;
 $38 = $37&255;
 $39 = $38 & 2;
 $40 = ($39|0)==(0);
 if ($40) {
  $44 = ($15|0)==(0);
  if (!($44)) {
   $45 = $38 | 2;
   $46 = $45&255;
   HEAP8[$12>>0] = $46;
  }
 } else {
  $41 = (($pExpr) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 | 2;
  HEAP32[$41>>2] = $43;
 }
 $47 = (($pExpr) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 >>> 3;
 $$lobit = $49 & 1;
 $$0 = $$lobit;
 STACKTOP = sp;return ($$0|0);
}
function _resolveOrderGroupBy($pNC,$pSelect,$pOrderBy,$zType) {
 $pNC = $pNC|0;
 $pSelect = $pSelect|0;
 $pOrderBy = $pOrderBy|0;
 $zType = $zType|0;
 var $$0 = 0, $$off = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $iCol = 0, $j$02 = 0, $pItem$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iCol = sp;
 $0 = ($pOrderBy|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$pSelect>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$pNC>>2]|0;
 $4 = HEAP32[$pOrderBy>>2]|0;
 $5 = ($4|0)>(0);
 L4: do {
  if ($5) {
   $6 = (($pOrderBy) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $i$08 = 0;$pItem$06 = $7;
   L6: while(1) {
    $8 = HEAP32[$pItem$06>>2]|0;
    $9 = (_sqlite3ExprSkipCollate($8)|0);
    $10 = HEAP8[$zType>>0]|0;
    $11 = ($10<<24>>24)==(71);
    if ($11) {
     label = 7;
    } else {
     $12 = HEAP32[$pSelect>>2]|0;
     $13 = (_resolveAsName($12,$9)|0);
     HEAP32[$iCol>>2] = $13;
     $14 = ($13|0)>(0);
     if ($14) {
      $15 = $13&65535;
      $16 = (($pItem$06) + 16|0);
      HEAP16[$16>>1] = $15;
     } else {
      label = 7;
     }
    }
    do {
     if ((label|0) == 7) {
      label = 0;
      $17 = (_sqlite3ExprIsInteger($9,$iCol)|0);
      $18 = ($17|0)==(0);
      if (!($18)) {
       $19 = HEAP32[$iCol>>2]|0;
       $$off = (($19) + -1)|0;
       $20 = ($$off>>>0)>(65534);
       if ($20) {
        break L6;
       }
       $22 = $19&65535;
       $23 = (($pItem$06) + 16|0);
       HEAP16[$23>>1] = $22;
       break;
      }
      $24 = (($pItem$06) + 16|0);
      HEAP16[$24>>1] = 0;
      $25 = (_sqlite3ResolveExprNames($pNC,$8)|0);
      $26 = ($25|0)==(0);
      if (!($26)) {
       $$0 = 1;
       label = 19;
       break L6;
      }
      $27 = HEAP32[$pSelect>>2]|0;
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)>(0);
      if ($29) {
       $$phi$trans$insert = (($27) + 8|0);
       $$pre = HEAP32[$$phi$trans$insert>>2]|0;
       $j$02 = 0;
       while(1) {
        $30 = (($$pre) + (($j$02*20)|0)|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (_sqlite3ExprCompare($8,$31,-1)|0);
        $33 = ($32|0)==(0);
        $34 = (($j$02) + 1)|0;
        if ($33) {
         $35 = $34&65535;
         HEAP16[$24>>1] = $35;
        }
        $36 = ($34|0)<($28|0);
        if ($36) {
         $j$02 = $34;
        } else {
         break;
        }
       }
      }
     }
    } while(0);
    $37 = (($i$08) + 1)|0;
    $38 = (($pItem$06) + 20|0);
    $39 = HEAP32[$pOrderBy>>2]|0;
    $40 = ($37|0)<($39|0);
    if ($40) {
     $i$08 = $37;$pItem$06 = $38;
    } else {
     break L4;
    }
   }
   if ((label|0) == 19) {
    STACKTOP = sp;return ($$0|0);
   }
   $21 = (($i$08) + 1)|0;
   _resolveOutOfRangeError($3,$zType,$21,$2);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $41 = (_sqlite3ResolveOrderGroupBy($3,$pSelect,$pOrderBy,$zType)|0);
 $$0 = $41;
 STACKTOP = sp;return ($$0|0);
}
function _resolveCompoundOrderBy($pParse,$pSelect) {
 $pParse = $pParse|0;
 $pSelect = $pSelect|0;
 var $$0 = 0, $$01$lcssa = 0, $$0116 = 0, $$1$idx$val = 0, $$1$idx2 = 0, $$1$idx2$val = 0, $$114 = 0, $$c = 0, $$pr31 = 0, $$pre = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $i$021 = 0, $i$111 = 0, $i$2 = 0, $iCol = 0;
 var $moreToDo$18 = 0, $moreToDo$2 = 0, $or$cond = 0, $or$cond36 = 0, $pItem$09 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $iCol = sp + 12|0;
 $0 = (($pSelect) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$pParse>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 if ($7) {
  _sqlite3ErrorMsg($pParse,16712,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($4|0)>(0);
 if ($8) {
  $9 = (($1) + 8|0);
  $i$021 = 0;
  while(1) {
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10) + (($i$021*20)|0)|0) + 13|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 & -2;
   HEAP8[$11>>0] = $13;
   $14 = (($i$021) + 1)|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = ($14|0)<($15|0);
   if ($16) {
    $i$021 = $14;
   } else {
    $84 = $15;
    break;
   }
  }
 } else {
  $84 = $4;
 }
 $17 = (($pSelect) + 64|0);
 HEAP32[$17>>2] = 0;
 $18 = (($pSelect) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$01$lcssa = $pSelect;
 } else {
  $$0116 = $pSelect;$24 = $19;$26 = $18;
  while(1) {
   $23 = (($24) + 64|0);
   HEAP32[$23>>2] = $$0116;
   $25 = HEAP32[$26>>2]|0;
   $27 = (($25) + 60|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$01$lcssa = $25;
    break;
   } else {
    $$0116 = $25;$24 = $28;$26 = $27;
   }
  }
 }
 $21 = ($$01$lcssa|0)==(0|0);
 $$pre34 = (($1) + 8|0);
 L17: do {
  if ($21) {
   $77 = $84;
  } else {
   $22 = (($3) + 64|0);
   $$114 = $$01$lcssa;$32 = $84;
   L19: while(1) {
    $30 = HEAP32[$$114>>2]|0;
    $31 = ($32|0)>(0);
    if (!($31)) {
     $77 = $32;
     break L17;
    }
    $33 = HEAP32[$$pre34>>2]|0;
    $$1$idx2 = (($$114) + 40|0);
    $i$111 = 0;$moreToDo$18 = 0;$pItem$09 = $33;
    while(1) {
     HEAP32[$iCol>>2] = -1;
     $34 = (($pItem$09) + 13|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 & 1;
     $37 = ($36<<24>>24)==(0);
     do {
      if ($37) {
       $38 = HEAP32[$pItem$09>>2]|0;
       $39 = (_sqlite3ExprSkipCollate($38)|0);
       $40 = (_sqlite3ExprIsInteger($39,$iCol)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        $46 = (_resolveAsName($30,$39)|0);
        HEAP32[$iCol>>2] = $46;
        $47 = ($46|0)==(0);
        if ($47) {
         $48 = (_sqlite3ExprDup($3,$39,0)|0);
         $49 = HEAP8[$22>>0]|0;
         $50 = ($49<<24>>24)==(0);
         if ($50) {
          $$1$idx$val = HEAP32[$$114>>2]|0;
          $$1$idx2$val = HEAP32[$$1$idx2>>2]|0;
          $51 = (_resolveOrderByTermToExprList($pParse,$$1$idx$val,$$1$idx2$val,$48)|0);
          HEAP32[$iCol>>2] = $51;
          $$pr31 = $51;
         } else {
          $$pr31 = 0;
         }
         _sqlite3ExprDelete($3,$48);
         $53 = $$pr31;
        } else {
         $53 = $46;
        }
        $52 = ($53|0)>(0);
        if ($52) {
         $60 = $53;
        } else {
         $moreToDo$2 = 1;
         break;
        }
       } else {
        $42 = HEAP32[$iCol>>2]|0;
        $43 = ($42|0)<(1);
        $$pre = HEAP32[$30>>2]|0;
        $44 = ($42|0)>($$pre|0);
        $or$cond36 = $43 | $44;
        if ($or$cond36) {
         break L19;
        } else {
         $60 = $42;
        }
       }
       $54 = (_sqlite3Expr($3,132,0)|0);
       $55 = ($54|0)==(0|0);
       if ($55) {
        $$0 = 1;
        label = 33;
        break L19;
       }
       $56 = (($54) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $57 | 1024;
       HEAP32[$56>>2] = $58;
       $59 = (($54) + 8|0);
       $$c = $60;
       HEAP32[$59>>2] = $$c;
       $61 = HEAP32[$pItem$09>>2]|0;
       $62 = ($61|0)==($39|0);
       if ($62) {
        HEAP32[$pItem$09>>2] = $54;
       } else {
        $63 = (($61) + 12|0);
        HEAP32[$63>>2] = $54;
       }
       _sqlite3ExprDelete($3,$39);
       $64 = $60&65535;
       $65 = (($pItem$09) + 16|0);
       HEAP16[$65>>1] = $64;
       $66 = HEAP8[$34>>0]|0;
       $67 = $66 | 1;
       HEAP8[$34>>0] = $67;
       $moreToDo$2 = $moreToDo$18;
      } else {
       $moreToDo$2 = $moreToDo$18;
      }
     } while(0);
     $68 = (($i$111) + 1)|0;
     $69 = (($pItem$09) + 20|0);
     $70 = HEAP32[$1>>2]|0;
     $71 = ($68|0)<($70|0);
     if ($71) {
      $i$111 = $68;$moreToDo$18 = $moreToDo$2;$pItem$09 = $69;
     } else {
      break;
     }
    }
    $72 = (($$114) + 64|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0|0);
    $75 = ($moreToDo$2|0)==(0);
    $or$cond = $74 | $75;
    if ($or$cond) {
     $77 = $70;
     break L17;
    } else {
     $$114 = $73;$32 = $70;
    }
   }
   if ((label|0) == 33) {
    STACKTOP = sp;return ($$0|0);
   }
   $45 = (($i$111) + 1)|0;
   _resolveOutOfRangeError($pParse,16632,$45,$$pre);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $i$2 = 0;
 while(1) {
  $76 = ($i$2|0)<($77|0);
  if (!($76)) {
   $$0 = 0;
   label = 33;
   break;
  }
  $78 = HEAP32[$$pre34>>2]|0;
  $79 = ((($78) + (($i$2*20)|0)|0) + 13|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80 & 1;
  $82 = ($81<<24>>24)==(0);
  $83 = (($i$2) + 1)|0;
  if ($82) {
   break;
  } else {
   $i$2 = $83;
  }
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$vararg_buffer1>>2] = $83;
 _sqlite3ErrorMsg($pParse,16752,$vararg_buffer1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprIsInteger($p,$pValue) {
 $p = $p|0;
 $pValue = $pValue|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1024;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $6 = HEAP8[$p>>0]|0;
   $7 = $6&255;
   if ((($7|0) == 158)) {
    $8 = (($p) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (_sqlite3ExprIsInteger($9,$pValue)|0);
    $$0 = $10;
    break;
   } else if (!((($7|0) == 157))) {
    $$0 = 0;
    break;
   }
   $11 = (($p) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_sqlite3ExprIsInteger($12,$v)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
   } else {
    $15 = HEAP32[$v>>2]|0;
    $16 = (0 - ($15))|0;
    HEAP32[$pValue>>2] = $16;
    $$0 = 1;
   }
  } else {
   $4 = (($p) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$pValue>>2] = $5;
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _resolveOutOfRangeError($pParse,$zType,$i,$mx) {
 $pParse = $pParse|0;
 $zType = $zType|0;
 $i = $i|0;
 $mx = $mx|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $i;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $zType;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $mx;
 _sqlite3ErrorMsg($pParse,16816,$vararg_buffer);
 STACKTOP = sp;return;
}
function _resolveAsName($pEList,$pE) {
 $pEList = $pEList|0;
 $pE = $pE|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pE>>0]|0;
 $1 = ($0<<24>>24)==(27);
 L1: do {
  if ($1) {
   $2 = (($pE) + 8|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = HEAP32[$pEList>>2]|0;
   $5 = ($4|0)>(0);
   if ($5) {
    $6 = (($pEList) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $i$02 = 0;
    while(1) {
     $8 = ((($7) + (($i$02*20)|0)|0) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0|0);
     if (!($10)) {
      $11 = (_sqlite3_stricmp($9,$3)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       break;
      }
     }
     $14 = (($i$02) + 1)|0;
     $15 = ($14|0)<($4|0);
     if ($15) {
      $i$02 = $14;
     } else {
      $$0 = 0;
      break L1;
     }
    }
    $13 = (($i$02) + 1)|0;
    $$0 = $13;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprDup($db,$p,$flags) {
 $db = $db|0;
 $p = $p|0;
 $flags = $flags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_exprDup($db,$p,$flags,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _resolveOrderByTermToExprList($pParse,$pSelect$0$0$val,$pSelect$0$7$val,$pE) {
 $pParse = $pParse|0;
 $pSelect$0$0$val = $pSelect$0$0$val|0;
 $pSelect$0$7$val = $pSelect$0$7$val|0;
 $pE = $pE|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0;
 var $nc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $nc = sp;
 ;HEAP32[$nc+0>>2]=0|0;HEAP32[$nc+4>>2]=0|0;HEAP32[$nc+8>>2]=0|0;HEAP32[$nc+12>>2]=0|0;HEAP32[$nc+16>>2]=0|0;HEAP32[$nc+20>>2]=0|0;HEAP32[$nc+24>>2]=0|0;HEAP32[$nc+28>>2]=0|0;
 HEAP32[$nc>>2] = $pParse;
 $0 = (($nc) + 4|0);
 HEAP32[$0>>2] = $pSelect$0$7$val;
 $1 = (($nc) + 8|0);
 HEAP32[$1>>2] = $pSelect$0$0$val;
 $2 = (($nc) + 28|0);
 HEAP8[$2>>0] = 1;
 $3 = (($nc) + 24|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($4) + 67|0);
 $6 = HEAP8[$5>>0]|0;
 HEAP8[$5>>0] = 1;
 $7 = (_sqlite3ResolveExprNames($nc,$pE)|0);
 HEAP8[$5>>0] = $6;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pSelect$0$0$val) + 8|0);
 $10 = HEAP32[$pSelect$0$0$val>>2]|0;
 $i$0 = 0;
 while(1) {
  $11 = ($i$0|0)<($10|0);
  if (!($11)) {
   $$0 = 0;
   label = 5;
   break;
  }
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + (($i$0*20)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_sqlite3ExprCompare($14,$pE,-1)|0);
  $16 = ($15|0)<(2);
  $17 = (($i$0) + 1)|0;
  if ($16) {
   $$0 = $17;
   label = 5;
   break;
  } else {
   $i$0 = $17;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3ExprCompare($pA,$pB,$iTab) {
 $pA = $pA|0;
 $pB = $pB|0;
 $iTab = $iTab|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pA|0)==(0|0);
 $1 = ($pB|0)==(0|0);
 $or$cond = $0 | $1;
 do {
  if ($or$cond) {
   $2 = ($pB|0)==($pA|0);
   $3 = $2 ? 0 : 2;
   $$0 = $3;
  } else {
   $4 = (($pA) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($pB) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 | $5;
   $9 = $8 & 1024;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = $5 & 1024;
    $12 = $11 & $7;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $14 = (($pA) + 8|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($pB) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     if ($18) {
      $$0 = 0;
      break;
     }
    }
    $$0 = 2;
    break;
   }
   $19 = HEAP8[$pA>>0]|0;
   $20 = HEAP8[$pB>>0]|0;
   $21 = ($19<<24>>24)==($20<<24>>24);
   if (!($21)) {
    $22 = ($19<<24>>24)==(95);
    if ($22) {
     $23 = (($pA) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_sqlite3ExprCompare($24,$pB,$iTab)|0);
     $26 = ($25|0)<(2);
     if ($26) {
      $$0 = 1;
      break;
     }
    }
    $27 = ($20<<24>>24)==(95);
    if ($27) {
     $28 = (($pB) + 12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (_sqlite3ExprCompare($pA,$29,$iTab)|0);
     $31 = ($30|0)<(2);
     if ($31) {
      $$0 = 1;
      break;
     }
    }
    $$0 = 2;
    break;
   }
   if (!((($19<<24>>24) == -100) | (($19<<24>>24) == -102))) {
    $32 = (($pA) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $35 = (($pB) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (_strcmp($33,$36)|0);
     $38 = ($37|0)==(0);
     if (!($38)) {
      $39 = ($19<<24>>24)==(95);
      $40 = $39 ? 1 : 2;
      $$0 = $40;
      break;
     }
    }
   }
   $41 = $7 ^ $5;
   $42 = $41 & 16;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $8 & 16384;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $8 & 2048;
     $47 = ($46|0)==(0);
     if (!($47)) {
      $$0 = 2;
      break;
     }
     $48 = (($pA) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($pB) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (_sqlite3ExprCompare($49,$51,$iTab)|0);
     $53 = ($52|0)==(0);
     if (!($53)) {
      $$0 = 2;
      break;
     }
     $54 = (($pA) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($pB) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (_sqlite3ExprCompare($55,$57,$iTab)|0);
     $59 = ($58|0)==(0);
     if (!($59)) {
      $$0 = 2;
      break;
     }
     $60 = (($pA) + 20|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($pB) + 20|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (_sqlite3ExprListCompare($61,$63,$iTab)|0);
     $65 = ($64|0)==(0);
     if (!($65)) {
      $$0 = 2;
      break;
     }
     $66 = $8 & 8192;
     $67 = ($66|0)==(0);
     if ($67) {
      $68 = (($pA) + 32|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = (($pB) + 32|0);
      $71 = HEAP16[$70>>1]|0;
      $72 = ($69<<16>>16)==($71<<16>>16);
      if (!($72)) {
       $$0 = 2;
       break;
      }
      $73 = (($pA) + 28|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($pB) + 28|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if (!($77)) {
       $78 = ($74|0)!=($iTab|0);
       $79 = ($76|0)>(-1);
       $or$cond1 = $78 | $79;
       if ($or$cond1) {
        $$0 = 2;
        break;
       }
      }
     }
    }
    $$0 = 0;
   } else {
    $$0 = 2;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprListCompare($pA,$pB,$iTab) {
 $pA = $pA|0;
 $pB = $pB|0;
 $iTab = $iTab|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pA|0)==(0|0);
 $1 = ($pB|0)==(0|0);
 $or$cond = $0 & $1;
 L1: do {
  if ($or$cond) {
   $$0 = 0;
  } else {
   $or$cond1 = $0 | $1;
   if ($or$cond1) {
    $$0 = 1;
   } else {
    $2 = HEAP32[$pA>>2]|0;
    $3 = HEAP32[$pB>>2]|0;
    $4 = ($2|0)==($3|0);
    if ($4) {
     $5 = ($2|0)>(0);
     if ($5) {
      $6 = (($pA) + 8|0);
      $7 = HEAP32[$6>>2]|0;
      $8 = (($pB) + 8|0);
      $9 = HEAP32[$8>>2]|0;
      $i$02 = 0;
      while(1) {
       $12 = ((($7) + (($i$02*20)|0)|0) + 12|0);
       $13 = HEAP8[$12>>0]|0;
       $14 = ((($9) + (($i$02*20)|0)|0) + 12|0);
       $15 = HEAP8[$14>>0]|0;
       $16 = ($13<<24>>24)==($15<<24>>24);
       if (!($16)) {
        $$0 = 1;
        break L1;
       }
       $17 = (($9) + (($i$02*20)|0)|0);
       $18 = (($7) + (($i$02*20)|0)|0);
       $19 = HEAP32[$17>>2]|0;
       $20 = HEAP32[$18>>2]|0;
       $21 = (_sqlite3ExprCompare($20,$19,$iTab)|0);
       $22 = ($21|0)==(0);
       $11 = (($i$02) + 1)|0;
       if (!($22)) {
        $$0 = 1;
        break L1;
       }
       $10 = ($11|0)<($2|0);
       if ($10) {
        $i$02 = $11;
       } else {
        $$0 = 0;
        break;
       }
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _exprDup($db,$p,$flags,$pzBuffer) {
 $db = $db|0;
 $p = $p|0;
 $flags = $flags|0;
 $pzBuffer = $pzBuffer|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $nToken$0 = 0;
 var $pNew$0 = 0, $staticFlag$0 = 0, $zAlloc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $zAlloc = sp;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $pNew$0 = 0;
  STACKTOP = sp;return ($pNew$0|0);
 }
 $1 = $flags & 1;
 $2 = ($pzBuffer|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[$pzBuffer>>2]|0;
  $6 = $3;$staticFlag$0 = 32768;
 } else {
  $4 = (_dupedExprSize($p,$flags)|0);
  $5 = (_sqlite3DbMallocRaw($db,$4)|0);
  $6 = $5;$staticFlag$0 = 0;
 }
 HEAP32[$zAlloc>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $pNew$0 = $6;
  STACKTOP = sp;return ($pNew$0|0);
 }
 $8 = (_dupedExprStructSize($p,$flags)|0);
 $9 = $8 & 4095;
 $10 = (($p) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1024;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (($p) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $nToken$0 = 0;
  } else {
   $17 = (_sqlite3Strlen30($15)|0);
   $18 = (($17) + 1)|0;
   $nToken$0 = $18;
  }
 } else {
  $nToken$0 = 0;
 }
 $19 = ($1|0)==(0);
 if ($19) {
  $20 = (_exprStructSize($11)|0);
  _memcpy(($6|0),($p|0),($20|0))|0;
  $21 = HEAP32[$zAlloc>>2]|0;
  $22 = (($21) + ($20)|0);
  $23 = (48 - ($20))|0;
  _memset(($22|0),0,($23|0))|0;
 } else {
  _memcpy(($6|0),($p|0),($9|0))|0;
 }
 $24 = (($6) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & -122881;
 $27 = $8 & 24576;
 $28 = $27 | $staticFlag$0;
 $29 = $28 | $26;
 HEAP32[$24>>2] = $29;
 $30 = ($nToken$0|0)==(0);
 if ($30) {
  $38 = $29;
 } else {
  $31 = HEAP32[$zAlloc>>2]|0;
  $32 = (($31) + ($9)|0);
  $33 = (($6) + 8|0);
  HEAP32[$33>>2] = $32;
  $34 = (($p) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _memcpy(($32|0),($35|0),($nToken$0|0))|0;
  $$pre = HEAP32[$24>>2]|0;
  $38 = $$pre;
 }
 $36 = HEAP32[$10>>2]|0;
 $37 = $38 | $36;
 $39 = $37 & 16384;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   $41 = $36 & 2048;
   $42 = ($41|0)==(0);
   $43 = (($p) + 20|0);
   if ($42) {
    $47 = HEAP32[$43>>2]|0;
    $48 = (_sqlite3ExprListDup($db,$47,$1)|0);
    $49 = (($6) + 20|0);
    HEAP32[$49>>2] = $48;
    break;
   } else {
    $44 = HEAP32[$43>>2]|0;
    $45 = (_sqlite3SelectDup($db,$44,$1)|0);
    $46 = (($6) + 20|0);
    HEAP32[$46>>2] = $45;
    break;
   }
  }
 } while(0);
 $50 = HEAP32[$24>>2]|0;
 $51 = $50 & 24576;
 $52 = ($51|0)==(0);
 if ($52) {
  $67 = HEAP32[$10>>2]|0;
  $68 = $67 & 16384;
  $69 = ($68|0)==(0);
  if (!($69)) {
   $pNew$0 = $6;
   STACKTOP = sp;return ($pNew$0|0);
  }
  $70 = (($p) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_sqlite3ExprDup($db,$71,0)|0);
  $73 = (($6) + 12|0);
  HEAP32[$73>>2] = $72;
  $74 = (($p) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (_sqlite3ExprDup($db,$75,0)|0);
  $77 = (($6) + 16|0);
  HEAP32[$77>>2] = $76;
  $pNew$0 = $6;
  STACKTOP = sp;return ($pNew$0|0);
 }
 $53 = (_dupedExprNodeSize($p,$flags)|0);
 $54 = HEAP32[$zAlloc>>2]|0;
 $55 = (($54) + ($53)|0);
 HEAP32[$zAlloc>>2] = $55;
 $56 = $50 & 8192;
 $57 = ($56|0)==(0);
 if (!($57)) {
  $58 = (($p) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_exprDup($db,$59,1,$zAlloc)|0);
  $61 = (($6) + 12|0);
  HEAP32[$61>>2] = $60;
  $62 = (($p) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (_exprDup($db,$63,1,$zAlloc)|0);
  $65 = (($6) + 16|0);
  HEAP32[$65>>2] = $64;
 }
 if (!($2)) {
  $pNew$0 = $6;
  STACKTOP = sp;return ($pNew$0|0);
 }
 $66 = HEAP32[$zAlloc>>2]|0;
 HEAP32[$pzBuffer>>2] = $66;
 $pNew$0 = $6;
 STACKTOP = sp;return ($pNew$0|0);
}
function _dupedExprSize($p,$flags) {
 $p = $p|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nByte$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $nByte$0 = 0;
  STACKTOP = sp;return ($nByte$0|0);
 }
 $1 = (_dupedExprNodeSize($p,$flags)|0);
 $2 = $flags & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $nByte$0 = $1;
  STACKTOP = sp;return ($nByte$0|0);
 } else {
  $4 = (($p) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_dupedExprSize($5,$flags)|0);
  $7 = (($p) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_dupedExprSize($8,$flags)|0);
  $10 = (($6) + ($1))|0;
  $11 = (($10) + ($9))|0;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _dupedExprStructSize($p,$flags) {
 $p = $p|0;
 $flags = $flags|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nSize$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 if ($1) {
  $nSize$0 = 48;
  STACKTOP = sp;return ($nSize$0|0);
 }
 $2 = (($p) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (($p) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  $$ = $7 ? 16396 : 8220;
  STACKTOP = sp;return ($$|0);
 } else {
  $nSize$0 = 8220;
  STACKTOP = sp;return ($nSize$0|0);
 }
 return 0|0;
}
function _exprStructSize($p$0$2$val) {
 $p$0$2$val = $p$0$2$val|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p$0$2$val & 16384;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = $p$0$2$val & 8192;
  $3 = ($2|0)==(0);
  $$ = $3 ? 48 : 28;
  $$0 = $$;
 } else {
  $$0 = 12;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprListDup($db,$p,$flags) {
 $db = $db|0;
 $p = $p|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $i$23 = 0, $pItem$01 = 0, $pOldItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_sqlite3DbMallocRaw($db,12)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$p>>2]|0;
 HEAP32[$1>>2] = $4;
 $5 = $flags & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$p>>2]|0;
  $i$0 = 1;
  while(1) {
   $8 = ($i$0|0)<($7|0);
   $9 = $i$0 << 1;
   if ($8) {
    $i$0 = $9;
   } else {
    $i$1 = $i$0;
    break;
   }
  }
 } else {
  $i$1 = $4;
 }
 $10 = ($i$1*20)|0;
 $11 = (_sqlite3DbMallocRaw($db,$10)|0);
 $12 = (($1) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  _sqlite3DbFree($db,$1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$p>>2]|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($p) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $i$23 = 0;$pItem$01 = $11;$pOldItem$02 = $17;
 while(1) {
  $18 = HEAP32[$pOldItem$02>>2]|0;
  $19 = (_sqlite3ExprDup($db,$18,$flags)|0);
  HEAP32[$pItem$01>>2] = $19;
  $20 = (($pOldItem$02) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_sqlite3DbStrDup($db,$21)|0);
  $23 = (($pItem$01) + 4|0);
  HEAP32[$23>>2] = $22;
  $24 = (($pOldItem$02) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_sqlite3DbStrDup($db,$25)|0);
  $27 = (($pItem$01) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = (($pOldItem$02) + 12|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = (($pItem$01) + 12|0);
  HEAP8[$30>>0] = $29;
  $31 = (($pItem$01) + 13|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & -2;
  HEAP8[$31>>0] = $33;
  $34 = (($pOldItem$02) + 13|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 & 2;
  $37 = $32 & -4;
  $38 = $36 | $37;
  HEAP8[$31>>0] = $38;
  $39 = (($pOldItem$02) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($pItem$01) + 16|0);
  HEAP32[$41>>2] = $40;
  $42 = (($i$23) + 1)|0;
  $43 = (($pItem$01) + 20|0);
  $44 = (($pOldItem$02) + 20|0);
  $45 = HEAP32[$p>>2]|0;
  $46 = ($42|0)<($45|0);
  if ($46) {
   $i$23 = $42;$pItem$01 = $43;$pOldItem$02 = $44;
  } else {
   $$0 = $1;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _dupedExprNodeSize($p,$flags) {
 $p = $p|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nByte$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_dupedExprStructSize($p,$flags)|0);
 $1 = $0 & 4095;
 $2 = (($p) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($p) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $nByte$0 = $1;
  } else {
   $9 = (_sqlite3Strlen30($7)|0);
   $10 = (($1) + 1)|0;
   $11 = (($10) + ($9))|0;
   $nByte$0 = $11;
  }
 } else {
  $nByte$0 = $1;
 }
 $12 = (($nByte$0) + 7)|0;
 $13 = $12 & -8;
 STACKTOP = sp;return ($13|0);
}
function _sqlite3ResolveOrderGroupBy($pParse,$pSelect,$pOrderBy,$zType) {
 $pParse = $pParse|0;
 $pSelect = $pSelect|0;
 $pOrderBy = $pOrderBy|0;
 $zType = $zType|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pItem$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pOrderBy|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) + 64|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$pOrderBy>>2]|0;
 $6 = (($0) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)>($7|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $zType;
  _sqlite3ErrorMsg($pParse,16872,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$pSelect>>2]|0;
 $10 = ($5|0)>(0);
 if (!($10)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($pOrderBy) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $26 = $5;$i$02 = 0;$pItem$03 = $12;
 while(1) {
  $13 = (($pItem$03) + 16|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $25 = $26;
  } else {
   $16 = $14&65535;
   $17 = HEAP32[$9>>2]|0;
   $18 = ($16|0)>($17|0);
   if ($18) {
    break;
   }
   $20 = (($16) + -1)|0;
   $21 = HEAP32[$pItem$03>>2]|0;
   _resolveAlias($pParse,$9,$20,$21,$zType,0);
   $$pre = HEAP32[$pOrderBy>>2]|0;
   $25 = $$pre;
  }
  $22 = (($i$02) + 1)|0;
  $23 = (($pItem$03) + 20|0);
  $24 = ($22|0)<($25|0);
  if ($24) {
   $26 = $25;$i$02 = $22;$pItem$03 = $23;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (($i$02) + 1)|0;
 _resolveOutOfRangeError($pParse,$zType,$19,$17);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _resolveAlias($pParse,$pEList,$iCol,$pExpr,$zType,$nSubquery) {
 $pParse = $pParse|0;
 $pEList = $pEList|0;
 $iCol = $iCol|0;
 $pExpr = $pExpr|0;
 $zType = $zType|0;
 $nSubquery = $nSubquery|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDup$0 = 0, $pDup$1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pEList) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + (($iCol*20)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (_sqlite3ExprDup($4,$3,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP8[$3>>0]|0;
 $8 = ($7<<24>>24)==(-102);
 if ($8) {
  $pDup$0 = $5;
 } else {
  $9 = HEAP8[$zType>>0]|0;
  $10 = ($9<<24>>24)==(71);
  if ($10) {
   $pDup$0 = $5;
  } else {
   _incrAggFunctionDepth($5,$nSubquery);
   $11 = (_sqlite3PExpr($pParse,24,$5,0,0)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    STACKTOP = sp;return;
   }
   $13 = (($11) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 | 4096;
   HEAP32[$13>>2] = $15;
   $16 = HEAP32[$0>>2]|0;
   $17 = ((($16) + (($iCol*20)|0)|0) + 16|0);
   $18 = (($17) + 2|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = ($19<<16>>16)==(0);
   if ($20) {
    $21 = (($pParse) + 460|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 1)|0;
    HEAP32[$21>>2] = $23;
    $24 = $23&65535;
    HEAP16[$18>>1] = $24;
    $26 = $24;
   } else {
    $26 = $19;
   }
   $25 = $26&65535;
   $27 = (($11) + 28|0);
   HEAP32[$27>>2] = $25;
   $pDup$0 = $11;
  }
 }
 $28 = HEAP8[$pExpr>>0]|0;
 $29 = ($28<<24>>24)==(95);
 if ($29) {
  $30 = (($pExpr) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_sqlite3ExprAddCollateString($pParse,$pDup$0,$31)|0);
  $pDup$1 = $32;
 } else {
  $pDup$1 = $pDup$0;
 }
 $33 = (($pExpr) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 | 32768;
 HEAP32[$33>>2] = $35;
 _sqlite3ExprDelete($4,$pExpr);
 dest=$pExpr+0|0; src=$pDup$1+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $36 = HEAP32[$33>>2]|0;
 $37 = $36 & 1024;
 $38 = ($37|0)==(0);
 if ($38) {
  $39 = (($pExpr) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = (_sqlite3DbStrDup($4,$40)|0);
   HEAP32[$39>>2] = $42;
   $43 = HEAP32[$33>>2]|0;
   $44 = $43 | 65536;
   HEAP32[$33>>2] = $44;
  }
 }
 _sqlite3DbFree($4,$pDup$1);
 STACKTOP = sp;return;
}
function _incrAggFunctionDepth($pExpr,$N) {
 $pExpr = $pExpr|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $N$c = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 $0 = ($N|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 HEAP32[$w>>2] = 164;
 $1 = (($w) + 20|0);
 $N$c = $N;
 HEAP32[$1>>2] = $N$c;
 (_sqlite3WalkExpr($w,$pExpr)|0);
 STACKTOP = sp;return;
}
function _sqlite3ExprAddCollateString($pParse,$pExpr,$zC) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $zC = $zC|0;
 var $0 = 0, $1 = 0, $2 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $s = sp;
 HEAP32[$s>>2] = $zC;
 $0 = (_sqlite3Strlen30($zC)|0);
 $1 = (($s) + 4|0);
 HEAP32[$1>>2] = $0;
 $2 = (_sqlite3ExprAddCollateToken($pParse,$pExpr,$s)|0);
 STACKTOP = sp;return ($2|0);
}
function _incrAggDepth($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pExpr>>0]|0;
 $1 = ($0<<24>>24)==(-101);
 if (!($1)) {
  STACKTOP = sp;return 0;
 }
 $2 = (($pWalker) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pExpr) + 38|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + ($3))|0;
 $8 = $7&255;
 HEAP8[$4>>0] = $8;
 STACKTOP = sp;return 0;
}
function _sqlite3ExprCheckHeight($pParse,$nHeight) {
 $pParse = $pParse|0;
 $nHeight = $nHeight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $rc$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<($nHeight|0);
 if (!($3)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 HEAP32[$vararg_buffer>>2] = $2;
 _sqlite3ErrorMsg($pParse,16904,$vararg_buffer);
 $rc$0 = 1;
 STACKTOP = sp;return ($rc$0|0);
}
function _lookupName($pParse,$zDb,$zTab,$zCol,$pNC,$pExpr) {
 $pParse = $pParse|0;
 $zDb = $zDb|0;
 $zTab = $zTab|0;
 $zCol = $zCol|0;
 $pNC = $pNC|0;
 $pExpr = $pExpr|0;
 var $$ = 0, $$0 = 0, $$01$ph = 0, $$02$ph116203 = 0, $$02$ph116204 = 0, $$02$ph117183197 = 0, $$02$ph117183198 = 0, $$02$ph127 = 0, $$iCol$0 = 0, $$iCol$1 = 0, $$lcssa76184196 = 0, $$phitmp = 0, $$pre = 0, $$pre160 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cnt$1$lcssa = 0, $cnt$141 = 0, $cnt$2$lcssa = 0, $cnt$224 = 0, $cnt$3 = 0, $cnt$4 = 0, $cnt$5 = 0, $cnt$6 = 0, $cnt$7 = 0, $cnt$7177 = 0, $cntTab$0$ph125 = 0, $cntTab$1$lcssa = 0, $cntTab$140 = 0, $cntTab$2$lcssa = 0, $cntTab$222 = 0, $cntTab$3 = 0, $cntTab$4 = 0;
 var $cntTab$5 = 0, $cntTab$6 = 0, $cntTab$7 = 0, $cntTab$7175 = 0, $cond = 0, $hit$0$lcssa = 0, $hit$023 = 0, $hit$1 = 0, $i$0102 = 0, $i$142 = 0, $iCol$053 = 0, $iCol$1 = 0, $iCol$2 = 0, $isTrigger$0$lcssa = 0, $isTrigger$0$lcssa186194 = 0, $isTrigger$0$lcssa186195 = 0, $isTrigger$0$ph124 = 0, $isTrigger$1 = 0, $isTrigger$1172 = 0, $j$025 = 0;
 var $j$133 = 0, $j$263 = 0, $nSubquery$0$ph121 = 0, $notlhs = 0, $notrhs = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond4$not = 0, $or$cond5 = 0, $or$cond7$not = 0, $or$cond8 = 0, $or$cond9 = 0, $pCol$032 = 0, $pCol$152 = 0, $pItem$0$pMatch$4 = 0, $pItem$036 = 0, $pMatch$0$lcssa = 0, $pMatch$0$lcssa188190 = 0;
 var $pMatch$0$lcssa188191 = 0, $pMatch$0$ph122 = 0, $pMatch$1$lcssa = 0, $pMatch$139 = 0, $pMatch$2$lcssa = 0, $pMatch$221 = 0, $pMatch$3 = 0, $pMatch$4 = 0, $pMatch$6 = 0, $pMatch$7 = 0, $pSchema$0$lcssa = 0, $pSchema$0$lcssa187192 = 0, $pSchema$0$lcssa187193 = 0, $pSchema$0$ph = 0, $pSchema$0$ph66123 = 0, $pSchema$1 = 0, $pSchema$2 = 0, $pSchema$2169 = 0, $pSchema$319205 = 0, $pTab$0 = 0;
 var $pTopNC$020 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pExpr) + 28|0);
 HEAP32[$1>>2] = -1;
 $2 = (($pExpr) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ($zDb|0)==(0|0);
 L1: do {
  if ($3) {
   $$01$ph = 0;$pSchema$0$ph = 0;
  } else {
   $4 = (($pNC) + 28|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 & 20;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $8 = (($0) + 20|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)>(0);
    if ($10) {
     $11 = (($0) + 16|0);
     $12 = HEAP32[$11>>2]|0;
     $i$0102 = 0;
     while(1) {
      $25 = (($12) + ($i$0102<<4)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_sqlite3_stricmp($26,$zDb)|0);
      $28 = ($27|0)==(0);
      $24 = (($i$0102) + 1)|0;
      if ($28) {
       break;
      }
      $23 = ($24|0)<($9|0);
      if ($23) {
       $i$0102 = $24;
      } else {
       $$01$ph = $zDb;$pSchema$0$ph = 0;
       break L1;
      }
     }
     $29 = ((($12) + ($i$0102<<4)|0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $$01$ph = $zDb;$pSchema$0$ph = $30;
    } else {
     $$01$ph = $zDb;$pSchema$0$ph = 0;
    }
   } else {
    $$01$ph = 0;$pSchema$0$ph = 0;
   }
  }
 } while(0);
 $13 = ($pNC|0)==(0|0);
 L10: do {
  if ($13) {
   $isTrigger$0$lcssa = 0;$pMatch$0$lcssa = 0;$pSchema$0$lcssa = $pSchema$0$ph;
   label = 75;
  } else {
   $14 = ($$01$ph|0)!=(0|0);
   $15 = ($zTab|0)==(0|0);
   $or$cond4 = $14 | $15;
   $or$cond4$not = $or$cond4 ^ 1;
   $16 = (($pParse) + 416|0);
   $17 = (($pParse) + 440|0);
   $18 = (($pExpr) + 1|0);
   $19 = (($pExpr) + 32|0);
   $20 = (($pParse) + 432|0);
   $21 = (($pParse) + 436|0);
   $22 = ($$01$ph|0)==(0|0);
   $$02$ph127 = $pNC;$cntTab$0$ph125 = 0;$isTrigger$0$ph124 = 0;$nSubquery$0$ph121 = 0;$pMatch$0$ph122 = 0;$pSchema$0$ph66123 = $pSchema$0$ph;
   L12: while(1) {
    $31 = (($$02$ph127) + 4|0);
    $32 = (($$02$ph127) + 8|0);
    $33 = HEAP32[$31>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $cnt$6 = 0;$cntTab$6 = $cntTab$0$ph125;$pMatch$7 = $pMatch$0$ph122;$pSchema$1 = $pSchema$0$ph66123;
    } else {
     $35 = HEAP32[$33>>2]|0;
     $36 = ($35|0)>(0);
     if ($36) {
      $37 = (($33) + 8|0);
      $cnt$141 = 0;$cntTab$140 = $cntTab$0$ph125;$i$142 = 0;$pItem$036 = $37;$pMatch$139 = $pMatch$0$ph122;
      while(1) {
       $38 = (($pItem$036) + 16|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($pItem$036) + 20|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ($41|0)==(0|0);
       if ($42) {
        $cnt$4 = $cnt$141;$cntTab$4 = $cntTab$140;$pMatch$4 = $pMatch$139;
        label = 21;
       } else {
        $43 = (($41) + 6|0);
        $44 = HEAP16[$43>>1]|0;
        $45 = $44 & 512;
        $46 = ($45<<16>>16)==(0);
        if ($46) {
         $cnt$4 = $cnt$141;$cntTab$4 = $cntTab$140;$pMatch$4 = $pMatch$139;
         label = 21;
        } else {
         $47 = HEAP32[$41>>2]|0;
         $48 = HEAP32[$47>>2]|0;
         $49 = ($48|0)>(0);
         if ($49) {
          $50 = (($47) + 8|0);
          $$pre160 = HEAP32[$50>>2]|0;
          $cnt$224 = $cnt$141;$cntTab$222 = $cntTab$140;$hit$023 = 0;$j$025 = 0;$pMatch$221 = $pMatch$139;
          while(1) {
           $51 = ((($$pre160) + (($j$025*20)|0)|0) + 8|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = (_sqlite3MatchSpanName($52,$zCol,$zTab,$$01$ph)|0);
           $54 = ($53|0)==(0);
           if ($54) {
            $cnt$3 = $cnt$224;$cntTab$3 = $cntTab$222;$hit$1 = $hit$023;$pMatch$3 = $pMatch$221;
           } else {
            $55 = (($cnt$224) + 1)|0;
            $56 = $j$025&65535;
            HEAP16[$19>>1] = $56;
            $cnt$3 = $55;$cntTab$3 = 2;$hit$1 = 1;$pMatch$3 = $pItem$036;
           }
           $57 = (($j$025) + 1)|0;
           $58 = ($57|0)<($48|0);
           if ($58) {
            $cnt$224 = $cnt$3;$cntTab$222 = $cntTab$3;$hit$023 = $hit$1;$j$025 = $57;$pMatch$221 = $pMatch$3;
           } else {
            $cnt$2$lcssa = $cnt$3;$cntTab$2$lcssa = $cntTab$3;$hit$0$lcssa = $hit$1;$pMatch$2$lcssa = $pMatch$3;
            break;
           }
          }
         } else {
          $cnt$2$lcssa = $cnt$141;$cntTab$2$lcssa = $cntTab$140;$hit$0$lcssa = 0;$pMatch$2$lcssa = $pMatch$139;
         }
         $59 = ($hit$0$lcssa|0)!=(0);
         $or$cond3 = $59 | $15;
         if ($or$cond3) {
          $cnt$5 = $cnt$2$lcssa;$cntTab$5 = $cntTab$2$lcssa;$pMatch$6 = $pMatch$2$lcssa;
         } else {
          $cnt$4 = $cnt$2$lcssa;$cntTab$4 = $cntTab$2$lcssa;$pMatch$4 = $pMatch$2$lcssa;
          label = 21;
         }
        }
       }
       L31: do {
        if ((label|0) == 21) {
         label = 0;
         if (!($22)) {
          $60 = (($39) + 68|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = ($61|0)==($pSchema$0$ph66123|0);
          if (!($62)) {
           $cnt$5 = $cnt$4;$cntTab$5 = $cntTab$4;$pMatch$6 = $pMatch$4;
           break;
          }
         }
         if (!($15)) {
          $63 = (($pItem$036) + 12|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = ($64|0)==(0|0);
          if ($65) {
           $66 = HEAP32[$39>>2]|0;
           $67 = $66;
          } else {
           $67 = $64;
          }
          $68 = (_sqlite3_stricmp($67,$zTab)|0);
          $69 = ($68|0)==(0);
          if (!($69)) {
           $cnt$5 = $cnt$4;$cntTab$5 = $cntTab$4;$pMatch$6 = $pMatch$4;
           break;
          }
         }
         $70 = (($cntTab$4) + 1)|0;
         $71 = ($cntTab$4|0)==(0);
         $pItem$0$pMatch$4 = $71 ? $pItem$036 : $pMatch$4;
         $72 = (($39) + 38|0);
         $73 = HEAP16[$72>>1]|0;
         $74 = ($73<<16>>16)>(0);
         if ($74) {
          $75 = (($39) + 4|0);
          $76 = HEAP32[$75>>2]|0;
          $77 = ($cnt$4|0)==(1);
          $78 = (($pItem$036) + 36|0);
          $79 = (($pItem$036) + 48|0);
          $j$133 = 0;$pCol$032 = $76;
          while(1) {
           $80 = HEAP32[$pCol$032>>2]|0;
           $81 = (_sqlite3_stricmp($80,$zCol)|0);
           $82 = ($81|0)==(0);
           if ($82) {
            if (!($77)) {
             break;
            }
            $83 = HEAP8[$78>>0]|0;
            $84 = $83 & 4;
            $85 = ($84<<24>>24)==(0);
            if ($85) {
             $86 = HEAP32[$79>>2]|0;
             $87 = (_nameInUsingClause($86,$zCol)|0);
             $88 = ($87|0)==(0);
             if ($88) {
              break;
             }
            }
           }
           $94 = (($j$133) + 1)|0;
           $95 = (($pCol$032) + 24|0);
           $96 = $73 << 16 >> 16;
           $97 = ($94|0)<($96|0);
           if ($97) {
            $j$133 = $94;$pCol$032 = $95;
           } else {
            $cnt$5 = $cnt$4;$cntTab$5 = $70;$pMatch$6 = $pItem$0$pMatch$4;
            break L31;
           }
          }
          $89 = (($cnt$4) + 1)|0;
          $90 = (($39) + 36|0);
          $91 = HEAP16[$90>>1]|0;
          $92 = $91 << 16 >> 16;
          $93 = ($j$133|0)==($92|0);
          $phitmp = $j$133&65535;
          $$phitmp = $93 ? -1 : $phitmp;
          HEAP16[$19>>1] = $$phitmp;
          $cnt$5 = $89;$cntTab$5 = $70;$pMatch$6 = $pItem$036;
         } else {
          $cnt$5 = $cnt$4;$cntTab$5 = $70;$pMatch$6 = $pItem$0$pMatch$4;
         }
        }
       } while(0);
       $98 = (($i$142) + 1)|0;
       $99 = (($pItem$036) + 72|0);
       $100 = ($98|0)<($35|0);
       if ($100) {
        $cnt$141 = $cnt$5;$cntTab$140 = $cntTab$5;$i$142 = $98;$pItem$036 = $99;$pMatch$139 = $pMatch$6;
       } else {
        $cnt$1$lcssa = $cnt$5;$cntTab$1$lcssa = $cntTab$5;$pMatch$1$lcssa = $pMatch$6;
        break;
       }
      }
     } else {
      $cnt$1$lcssa = 0;$cntTab$1$lcssa = $cntTab$0$ph125;$pMatch$1$lcssa = $pMatch$0$ph122;
     }
     $101 = ($pMatch$1$lcssa|0)==(0|0);
     if ($101) {
      $cnt$6 = $cnt$1$lcssa;$cntTab$6 = $cntTab$1$lcssa;$pMatch$7 = 0;$pSchema$1 = $pSchema$0$ph66123;
     } else {
      $102 = (($pMatch$1$lcssa) + 40|0);
      $103 = HEAP32[$102>>2]|0;
      HEAP32[$1>>2] = $103;
      $104 = (($pMatch$1$lcssa) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$2>>2] = $105;
      $106 = (($105) + 68|0);
      $107 = HEAP32[$106>>2]|0;
      $cnt$6 = $cnt$1$lcssa;$cntTab$6 = $cntTab$1$lcssa;$pMatch$7 = $pMatch$1$lcssa;$pSchema$1 = $107;
     }
    }
    $108 = ($cntTab$6|0)==(0);
    $or$cond5 = $108 & $or$cond4$not;
    do {
     if ($or$cond5) {
      $109 = HEAP32[$16>>2]|0;
      $110 = ($109|0)==(0|0);
      if ($110) {
       $cnt$7177 = $cnt$6;$cntTab$7175 = 0;$isTrigger$1172 = $isTrigger$0$ph124;$pSchema$2169 = $pSchema$1;
      } else {
       $111 = HEAP8[$17>>0]|0;
       $cond = ($111<<24>>24)==(109);
       if ($cond) {
        label = 43;
       } else {
        $112 = (_sqlite3_stricmp(17312,$zTab)|0);
        $113 = ($112|0)==(0);
        if ($113) {
         $117 = 1;
        } else {
         $114 = ($111<<24>>24)==(108);
         if ($114) {
          $cnt$7177 = $cnt$6;$cntTab$7175 = 0;$isTrigger$1172 = $isTrigger$0$ph124;$pSchema$2169 = $pSchema$1;
          break;
         } else {
          label = 43;
         }
        }
       }
       if ((label|0) == 43) {
        label = 0;
        $115 = (_sqlite3_stricmp(17320,$zTab)|0);
        $116 = ($115|0)==(0);
        if ($116) {
         $117 = 0;
        } else {
         $cnt$7177 = $cnt$6;$cntTab$7175 = 0;$isTrigger$1172 = $isTrigger$0$ph124;$pSchema$2169 = $pSchema$1;
         break;
        }
       }
       HEAP32[$1>>2] = $117;
       $pTab$0 = HEAP32[$16>>2]|0;
       $118 = ($pTab$0|0)==(0|0);
       if ($118) {
        $cnt$7177 = $cnt$6;$cntTab$7175 = 0;$isTrigger$1172 = $isTrigger$0$ph124;$pSchema$2169 = $pSchema$1;
       } else {
        $119 = (($pTab$0) + 68|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (($pTab$0) + 38|0);
        $122 = HEAP16[$121>>1]|0;
        $123 = ($122<<16>>16)>(0);
        L65: do {
         if ($123) {
          $124 = (($pTab$0) + 4|0);
          $125 = HEAP32[$124>>2]|0;
          $iCol$053 = 0;$pCol$152 = $125;
          while(1) {
           $126 = HEAP32[$pCol$152>>2]|0;
           $127 = (_sqlite3_stricmp($126,$zCol)|0);
           $128 = ($127|0)==(0);
           if ($128) {
            break;
           }
           $133 = (($iCol$053) + 1)|0;
           $134 = (($pCol$152) + 24|0);
           $135 = $122 << 16 >> 16;
           $136 = ($133|0)<($135|0);
           if ($136) {
            $iCol$053 = $133;$pCol$152 = $134;
           } else {
            $iCol$1 = $133;
            break L65;
           }
          }
          $129 = (($pTab$0) + 36|0);
          $130 = HEAP16[$129>>1]|0;
          $131 = $130 << 16 >> 16;
          $132 = ($iCol$053|0)==($131|0);
          $$iCol$0 = $132 ? -1 : $iCol$053;
          $iCol$1 = $$iCol$0;
         } else {
          $iCol$1 = 0;
         }
        } while(0);
        $137 = $122 << 16 >> 16;
        $138 = ($iCol$1|0)<($137|0);
        if ($138) {
         $iCol$2 = $iCol$1;
        } else {
         $139 = (_sqlite3IsRowid($zCol)|0);
         $140 = ($139|0)==(0);
         if ($140) {
          $iCol$2 = $iCol$1;
         } else {
          $141 = (($pTab$0) + 44|0);
          $142 = HEAP8[$141>>0]|0;
          $143 = $142 & 32;
          $144 = ($143<<24>>24)==(0);
          $$iCol$1 = $144 ? -1 : $iCol$1;
          $iCol$2 = $$iCol$1;
         }
        }
        $145 = ($iCol$2|0)<($137|0);
        if ($145) {
         $146 = (($cnt$6) + 1)|0;
         $147 = ($iCol$2|0)<(0);
         do {
          if ($147) {
           HEAP8[$18>>0] = 100;
          } else {
           $148 = ($117|0)==(0);
           $149 = ($iCol$2|0)>(31);
           $150 = 1 << $iCol$2;
           $$ = $149 ? -1 : $150;
           if ($148) {
            $151 = HEAP32[$20>>2]|0;
            $152 = $151 | $$;
            HEAP32[$20>>2] = $152;
            break;
           } else {
            $153 = HEAP32[$21>>2]|0;
            $154 = $153 | $$;
            HEAP32[$21>>2] = $154;
            break;
           }
          }
         } while(0);
         $155 = $iCol$2&65535;
         HEAP16[$19>>1] = $155;
         HEAP32[$2>>2] = $pTab$0;
         $cnt$7 = $146;$cntTab$7 = 1;$isTrigger$1 = 1;$pSchema$2 = $120;
         label = 60;
        } else {
         $cnt$7 = $cnt$6;$cntTab$7 = 1;$isTrigger$1 = $isTrigger$0$ph124;$pSchema$2 = $120;
         label = 60;
        }
       }
      }
     } else {
      $cnt$7 = $cnt$6;$cntTab$7 = $cntTab$6;$isTrigger$1 = $isTrigger$0$ph124;$pSchema$2 = $pSchema$1;
      label = 60;
     }
    } while(0);
    if ((label|0) == 60) {
     label = 0;
     $notlhs = ($cnt$7|0)!=(0);
     $notrhs = ($cntTab$7|0)!=(1);
     $or$cond7$not = $notrhs | $notlhs;
     $156 = ($pMatch$7|0)==(0|0);
     $or$cond8 = $or$cond7$not | $156;
     if ($or$cond8) {
      $cnt$7177 = $cnt$7;$cntTab$7175 = $cntTab$7;$isTrigger$1172 = $isTrigger$1;$pSchema$2169 = $pSchema$2;
     } else {
      $157 = (_sqlite3IsRowid($zCol)|0);
      $158 = ($157|0)==(0);
      if ($158) {
       $cnt$7177 = $cnt$7;$cntTab$7175 = $cntTab$7;$isTrigger$1172 = $isTrigger$1;$pSchema$2169 = $pSchema$2;
      } else {
       $159 = (($pMatch$7) + 16|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (($160) + 44|0);
       $162 = HEAP8[$161>>0]|0;
       $163 = $162 & 32;
       $164 = ($163<<24>>24)==(0);
       if ($164) {
        label = 63;
        break;
       } else {
        $cnt$7177 = $cnt$7;$cntTab$7175 = $cntTab$7;$isTrigger$1172 = $isTrigger$1;$pSchema$2169 = $pSchema$2;
       }
      }
     }
    }
    $165 = HEAP32[$32>>2]|0;
    $166 = ($165|0)!=(0|0);
    $or$cond9 = $166 & $15;
    $167 = ($cnt$7177|0)==(0);
    $or$cond10 = $or$cond9 & $167;
    if ($or$cond10) {
     $168 = HEAP32[$165>>2]|0;
     $169 = ($168|0)>(0);
     if ($169) {
      $170 = (($165) + 8|0);
      $171 = HEAP32[$170>>2]|0;
      $j$263 = 0;
      while(1) {
       $172 = ((($171) + (($j$263*20)|0)|0) + 4|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if (!($174)) {
        $175 = (_sqlite3_stricmp($173,$zCol)|0);
        $176 = ($175|0)==(0);
        if ($176) {
         label = 69;
         break L12;
        }
       }
       $187 = (($j$263) + 1)|0;
       $188 = ($187|0)<($168|0);
       if ($188) {
        $j$263 = $187;
       } else {
        break;
       }
      }
     }
    }
    if (!($167)) {
     label = 78;
     break;
    }
    $189 = (($$02$ph127) + 16|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (($nSubquery$0$ph121) + 1)|0;
    $192 = ($190|0)==(0|0);
    if ($192) {
     $isTrigger$0$lcssa = $isTrigger$1172;$pMatch$0$lcssa = $pMatch$7;$pSchema$0$lcssa = $pSchema$2169;
     label = 75;
     break L10;
    } else {
     $$02$ph127 = $190;$cntTab$0$ph125 = $cntTab$7175;$isTrigger$0$ph124 = $isTrigger$1172;$nSubquery$0$ph121 = $191;$pMatch$0$ph122 = $pMatch$7;$pSchema$0$ph66123 = $pSchema$2169;
    }
   }
   if ((label|0) == 63) {
    HEAP16[$19>>1] = -1;
    HEAP8[$18>>0] = 100;
    $$02$ph117183197 = $$02$ph127;$247 = 1;$isTrigger$0$lcssa186194 = $isTrigger$1;$pMatch$0$lcssa188190 = $pMatch$7;$pSchema$0$lcssa187192 = $pSchema$2;
    label = 85;
    break;
   }
   else if ((label|0) == 69) {
    $177 = (($$02$ph127) + 28|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178 & 1;
    $180 = ($179<<24>>24)==(0);
    if ($180) {
     $181 = (($171) + (($j$263*20)|0)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (($182) + 4|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $184 & 2;
     $186 = ($185|0)==(0);
     if (!($186)) {
      HEAP32[$vararg_buffer>>2] = $173;
      _sqlite3ErrorMsg($pParse,17328,$vararg_buffer);
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
    }
    _resolveAlias($pParse,$165,$j$263,$pExpr,1728,$nSubquery$0$ph121);
    $$pre = HEAP8[$pExpr>>0]|0;
    $234 = ($$pre<<24>>24)==(24);
    if ($234) {
     $$02$ph116204 = $$02$ph127;
     break;
    } else {
     $$02$ph116203 = $$02$ph127;$pSchema$319205 = $pSchema$2169;
     label = 89;
     break;
    }
   }
   else if ((label|0) == 78) {
    $198 = ($zTab|0)==(0|0);
    $199 = ($cnt$7177|0)==(1);
    if ($199) {
     $$02$ph117183197 = $$02$ph127;$247 = 1;$isTrigger$0$lcssa186194 = $isTrigger$1172;$pMatch$0$lcssa188190 = $pMatch$7;$pSchema$0$lcssa187192 = $pSchema$2169;
     label = 85;
     break;
    } else {
     $$02$ph117183198 = $$02$ph127;$$lcssa76184196 = 17376;$248 = $198;$isTrigger$0$lcssa186195 = $isTrigger$1172;$pMatch$0$lcssa188191 = $pMatch$7;$pSchema$0$lcssa187193 = $pSchema$2169;
     label = 79;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 75) {
  $193 = ($zTab|0)==(0|0);
  if ($193) {
   $194 = (($pExpr) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $195 & 64;
   $197 = ($196|0)==(0);
   if ($197) {
    $$02$ph117183198 = 0;$$lcssa76184196 = 17360;$248 = $193;$isTrigger$0$lcssa186195 = $isTrigger$0$lcssa;$pMatch$0$lcssa188191 = $pMatch$0$lcssa;$pSchema$0$lcssa187193 = $pSchema$0$lcssa;
    label = 79;
   } else {
    HEAP8[$pExpr>>0] = 97;
    HEAP32[$2>>2] = 0;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$02$ph117183198 = 0;$$lcssa76184196 = 17360;$248 = $193;$isTrigger$0$lcssa186195 = $isTrigger$0$lcssa;$pMatch$0$lcssa188191 = $pMatch$0$lcssa;$pSchema$0$lcssa187193 = $pSchema$0$lcssa;
   label = 79;
  }
 }
 if ((label|0) == 79) {
  $200 = ($$01$ph|0)==(0|0);
  do {
   if ($200) {
    if ($248) {
     HEAP32[$vararg_buffer12>>2] = $$lcssa76184196;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAP32[$vararg_ptr15>>2] = $zCol;
     _sqlite3ErrorMsg($pParse,17432,$vararg_buffer12);
     break;
    } else {
     HEAP32[$vararg_buffer7>>2] = $$lcssa76184196;
     $vararg_ptr10 = (($vararg_buffer7) + 4|0);
     HEAP32[$vararg_ptr10>>2] = $zTab;
     $vararg_ptr11 = (($vararg_buffer7) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $zCol;
     _sqlite3ErrorMsg($pParse,17416,$vararg_buffer7);
     break;
    }
   } else {
    HEAP32[$vararg_buffer1>>2] = $$lcssa76184196;
    $vararg_ptr4 = (($vararg_buffer1) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $$01$ph;
    $vararg_ptr5 = (($vararg_buffer1) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $zTab;
    $vararg_ptr6 = (($vararg_buffer1) + 12|0);
    HEAP32[$vararg_ptr6>>2] = $zCol;
    _sqlite3ErrorMsg($pParse,17400,$vararg_buffer1);
   }
  } while(0);
  $201 = (($pParse) + 17|0);
  HEAP8[$201>>0] = 1;
  $202 = (($pNC) + 24|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + 1)|0;
  HEAP32[$202>>2] = $204;
  $$02$ph117183197 = $$02$ph117183198;$247 = 0;$isTrigger$0$lcssa186194 = $isTrigger$0$lcssa186195;$pMatch$0$lcssa188190 = $pMatch$0$lcssa188191;$pSchema$0$lcssa187192 = $pSchema$0$lcssa187193;
  label = 85;
 }
 if ((label|0) == 85) {
  $205 = (($pExpr) + 32|0);
  $206 = HEAP16[$205>>1]|0;
  $207 = ($206<<16>>16)<(0);
  $208 = ($pMatch$0$lcssa188190|0)==(0|0);
  $or$cond12 = $207 | $208;
  if (!($or$cond12)) {
   $209 = $206 << 16 >> 16;
   $210 = ($206<<16>>16)>(63);
   $211 = (_bitshift64Shl(1,0,($209|0))|0);
   $212 = tempRet0;
   $213 = $210 ? 0 : $211;
   $214 = $210 ? -2147483648 : $212;
   $215 = (($pMatch$0$lcssa188190) + 56|0);
   $216 = $215;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $219 = (($216) + 4)|0;
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $222 = $218 | $213;
   $223 = $221 | $214;
   $224 = $215;
   $225 = $224;
   HEAP32[$225>>2] = $222;
   $226 = (($224) + 4)|0;
   $227 = $226;
   HEAP32[$227>>2] = $223;
  }
  $228 = (($pExpr) + 12|0);
  $229 = HEAP32[$228>>2]|0;
  _sqlite3ExprDelete($0,$229);
  HEAP32[$228>>2] = 0;
  $230 = (($pExpr) + 16|0);
  $231 = HEAP32[$230>>2]|0;
  _sqlite3ExprDelete($0,$231);
  HEAP32[$230>>2] = 0;
  $232 = ($isTrigger$0$lcssa186194|0)!=(0);
  $233 = $232 ? 62 : -102;
  HEAP8[$pExpr>>0] = $233;
  if ($247) {
   $$02$ph116203 = $$02$ph117183197;$pSchema$319205 = $pSchema$0$lcssa187192;
   label = 89;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if ((label|0) == 89) {
  $235 = (($$02$ph116203) + 4|0);
  $236 = HEAP32[$235>>2]|0;
  _sqlite3AuthRead($pParse,$pExpr,$pSchema$319205,$236);
  $$02$ph116204 = $$02$ph116203;
 }
 $237 = (($pNC) + 20|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (($238) + 1)|0;
 HEAP32[$237>>2] = $239;
 $240 = ($$02$ph116204|0)==($pNC|0);
 if ($240) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $pTopNC$020 = $pNC;
 }
 while(1) {
  $241 = (($pTopNC$020) + 16|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($242) + 20|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($244) + 1)|0;
  HEAP32[$243>>2] = $245;
  $246 = ($242|0)==($$02$ph116204|0);
  if ($246) {
   $$0 = 1;
   break;
  } else {
   $pTopNC$020 = $242;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _notValidPartIdxWhere($pParse,$pNC$0$7$val,$zMsg) {
 $pParse = $pParse|0;
 $pNC$0$7$val = $pNC$0$7$val|0;
 $zMsg = $zMsg|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = $pNC$0$7$val & 16;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $zMsg;
 _sqlite3ErrorMsg($pParse,17264,$vararg_buffer);
 STACKTOP = sp;return;
}
function _exprProbability($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 HEAPF64[$r>>3] = -1.0;
 $0 = HEAP8[$p>>0]|0;
 $1 = ($0<<24>>24)==(-123);
 if ($1) {
  $2 = (($p) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_sqlite3Strlen30($3)|0);
  (_sqlite3AtoF($3,$r,$4,1)|0);
  $5 = +HEAPF64[$r>>3];
  $6 = $5 > 1.0;
  if ($6) {
   $$0 = -1;
  } else {
   $7 = $5 * 1000.0;
   $8 = (~~(($7)));
   $$0 = $8;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FunctionUsesThisSrc($pExpr$0$6$0$val,$pSrcList) {
 $pExpr$0$6$0$val = $pExpr$0$6$0$val|0;
 $pSrcList = $pSrcList|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cnt = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $w = sp + 16|0;
 $cnt = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 HEAP32[$w>>2] = 165;
 $0 = (($w) + 20|0);
 HEAP32[$0>>2] = $cnt;
 HEAP32[$cnt>>2] = $pSrcList;
 $1 = (($cnt) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = (($cnt) + 8|0);
 HEAP32[$2>>2] = 0;
 (_sqlite3WalkExprList($w,$pExpr$0$6$0$val)|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $8 = 1;
  $7 = $8&1;
  STACKTOP = sp;return ($7|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0);
 $8 = $6;
 $7 = $8&1;
 STACKTOP = sp;return ($7|0);
}
function _notValidCheckConstraint($pParse,$pNC$0$7$val,$zMsg) {
 $pParse = $pParse|0;
 $pNC$0$7$val = $pNC$0$7$val|0;
 $zMsg = $zMsg|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = $pNC$0$7$val & 4;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $zMsg;
 _sqlite3ErrorMsg($pParse,17224,$vararg_buffer);
 STACKTOP = sp;return;
}
function _exprSrcCount($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pExpr>>0]|0;
 if (!((($0<<24>>24) == -100) | (($0<<24>>24) == -102))) {
  STACKTOP = sp;return 0;
 }
 $1 = (($pWalker) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 L4: do {
  if ($5) {
   $6 = (($pExpr) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $i$01 = 0;
   while(1) {
    $10 = ((($3) + (($i$01*72)|0)|0) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($7|0)==($11|0);
    $9 = (($i$01) + 1)|0;
    if ($12) {
     $i$0$lcssa = $i$01;
     break L4;
    }
    $8 = ($9|0)<($4|0);
    if ($8) {
     $i$01 = $9;
    } else {
     $i$0$lcssa = $9;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;
  }
 } while(0);
 $13 = ($i$0$lcssa|0)<($4|0);
 if ($13) {
  $14 = (($2) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
  STACKTOP = sp;return 0;
 } else {
  $17 = (($2) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _sqlite3MatchSpanName($zSpan,$zCol,$zTab,$zDb) {
 $zSpan = $zSpan|0;
 $zCol = $zCol|0;
 $zTab = $zTab|0;
 $zDb = $zDb|0;
 var $$0 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $n$0 = 0;
 while(1) {
  $0 = (($zSpan) + ($n$0)|0);
  $1 = HEAP8[$0>>0]|0;
  if ((($1<<24>>24) == 46) | (($1<<24>>24) == 0)) {
   break;
  }
  $2 = (($n$0) + 1)|0;
  $n$0 = $2;
 }
 $3 = ($zDb|0)==(0|0);
 if ($3) {
  label = 7;
 } else {
  $4 = (_sqlite3_strnicmp($zSpan,$zDb,$n$0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (($zDb) + ($n$0)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    label = 7;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 }
 do {
  if ((label|0) == 7) {
   $9 = (($n$0) + 1)|0;
   $10 = (($zSpan) + ($9)|0);
   $n$1 = 0;
   while(1) {
    $$sum = (($n$1) + ($9))|0;
    $11 = (($zSpan) + ($$sum)|0);
    $12 = HEAP8[$11>>0]|0;
    if ((($12<<24>>24) == 46) | (($12<<24>>24) == 0)) {
     break;
    }
    $13 = (($n$1) + 1)|0;
    $n$1 = $13;
   }
   $14 = ($zTab|0)==(0|0);
   if (!($14)) {
    $15 = (_sqlite3_strnicmp($10,$zTab,$n$1)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $$0 = 0;
     break;
    }
    $17 = (($zTab) + ($n$1)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $$0 = 0;
     break;
    }
   }
   $20 = ($zCol|0)==(0|0);
   if (!($20)) {
    $21 = (($n$0) + 2)|0;
    $$sum2 = (($21) + ($n$1))|0;
    $22 = (($zSpan) + ($$sum2)|0);
    $23 = (_sqlite3_stricmp($22,$zCol)|0);
    $24 = ($23|0)==(0);
    if (!($24)) {
     $$0 = 0;
     break;
    }
   }
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _nameInUsingClause($pUsing,$zCol) {
 $pUsing = $pUsing|0;
 $zCol = $zCol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pUsing|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (($pUsing) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(0);
   if ($3) {
    $4 = HEAP32[$pUsing>>2]|0;
    $k$01 = 0;
    while(1) {
     $7 = (($4) + ($k$01<<3)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (_sqlite3_stricmp($8,$zCol)|0);
     $10 = ($9|0)==(0);
     $6 = (($k$01) + 1)|0;
     if ($10) {
      $$0 = 1;
      break L1;
     }
     $5 = ($6|0)<($2|0);
     if ($5) {
      $k$01 = $6;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IsRowid($z) {
 $z = $z|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_stricmp($z,17520)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 1;
 } else {
  $2 = (_sqlite3_stricmp($z,17440)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 1;
  } else {
   $4 = (_sqlite3_stricmp($z,17528)|0);
   $5 = ($4|0)==(0);
   $$ = $5&1;
   $$0 = $$;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3AuthRead($pParse,$pExpr,$pSchema,$pTabList) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $pSchema = $pSchema|0;
 $pTabList = $pTabList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iSrc$02 = 0;
 var $pTab$0 = 0, $pTab$0$in = 0, $zCol$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 276|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (_sqlite3SchemaToIndex($0,$pSchema)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP8[$pExpr>>0]|0;
 $7 = ($6<<24>>24)==(62);
 do {
  if ($7) {
   $12 = (($pParse) + 416|0);
   $pTab$0$in = $12;
  } else {
   $8 = HEAP32[$pTabList>>2]|0;
   $9 = ($8|0)>(0);
   if (!($9)) {
    STACKTOP = sp;return;
   }
   $10 = (($pExpr) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $iSrc$02 = 0;
   while(1) {
    $15 = ((($pTabList) + (($iSrc$02*72)|0)|0) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($11|0)==($16|0);
    $14 = (($iSrc$02) + 1)|0;
    if ($17) {
     label = 9;
     break;
    }
    $13 = ($14|0)<($8|0);
    if ($13) {
     $iSrc$02 = $14;
    } else {
     label = 17;
     break;
    }
   }
   if ((label|0) == 9) {
    $18 = ((($pTabList) + (($iSrc$02*72)|0)|0) + 24|0);
    $pTab$0$in = $18;
    break;
   }
   else if ((label|0) == 17) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $pTab$0 = HEAP32[$pTab$0$in>>2]|0;
 $19 = (($pExpr) + 32|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = ($pTab$0|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = ($20<<16>>16)>(-1);
 if ($23) {
  $24 = (($pTab$0) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + (($21*24)|0)|0);
  $27 = HEAP32[$26>>2]|0;
  $zCol$0 = $27;
 } else {
  $28 = (($pTab$0) + 36|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = ($29<<16>>16)>(-1);
  if ($30) {
   $31 = $29 << 16 >> 16;
   $32 = (($pTab$0) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + (($31*24)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $zCol$0 = $35;
  } else {
   $zCol$0 = 17440;
  }
 }
 $36 = HEAP32[$pTab$0>>2]|0;
 $37 = (_sqlite3AuthReadCol($pParse,$36,$zCol$0,$4)|0);
 $38 = ($37|0)==(2);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 HEAP8[$pExpr>>0] = 101;
 STACKTOP = sp;return;
}
function _sqlite3AuthReadCol($pParse,$zTab,$zCol,$iDb) {
 $pParse = $pParse|0;
 $zTab = $zTab|0;
 $zCol = $zCol|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond2 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($iDb<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + 276|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pParse) + 496|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiiiiii[$6 & 255]($8,20,$zTab,$zCol,$4,$10)|0);
 if ((($11|0) == 1)) {
  $12 = (($0) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(3);
  $15 = ($iDb|0)==(0);
  $or$cond2 = $14 & $15;
  if ($or$cond2) {
   HEAP32[$vararg_buffer3>>2] = $zTab;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $zCol;
   _sqlite3ErrorMsg($pParse,17488,$vararg_buffer3);
  } else {
   HEAP32[$vararg_buffer>>2] = $4;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $zTab;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $zCol;
   _sqlite3ErrorMsg($pParse,17448,$vararg_buffer);
  }
  $16 = (($pParse) + 12|0);
  HEAP32[$16>>2] = 23;
  STACKTOP = sp;return ($11|0);
 } else if ((($11|0) == 0) | (($11|0) == 2)) {
  STACKTOP = sp;return ($11|0);
 } else {
  _sqliteAuthBadReturnCode($pParse);
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _convertCompoundSelectToSubquery($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$0 = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond5 = 0, $dummy = 0, $i$0 = 0, $i$0$in = 0, $or$cond = 0, $pX$06 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 $0 = (($p) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($p) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $cond5 = ($p|0)==(0|0);
 $or$cond = $5 | $cond5;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $pX$06 = $p;
 }
 while(1) {
  $6 = (($pX$06) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  if (!((($7<<24>>24) == 119) | (($7<<24>>24) == 116))) {
   break;
  }
  $8 = (($pX$06) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $cond = ($9|0)==(0|0);
  if ($cond) {
   $$0 = 0;
   label = 12;
   break;
  } else {
   $pX$06 = $9;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($4) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $i$0$in = $12;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $13 = ($i$0$in|0)>(0);
  if (!($13)) {
   $$0 = 0;
   label = 12;
   break;
  }
  $14 = (($11) + (($i$0*20)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 256;
  $19 = ($18|0)==(0);
  if ($19) {
   $i$0$in = $i$0;
  } else {
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($i$0$in|0)<(1);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($pWalker) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_sqlite3DbMallocZero($23,80)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = $dummy;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = 0;
 $30 = (_sqlite3SrcListAppendFromTerm($22,0,0,0,$dummy,$24,0,0)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$24+0|0; src=$p+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $32 = (($p) + 40|0);
 HEAP32[$32>>2] = $30;
 $33 = (_sqlite3Expr($23,116,0)|0);
 $$idx$val = HEAP32[$22>>2]|0;
 $34 = (_sqlite3ExprListAppend($$idx$val,0,$33)|0);
 HEAP32[$p>>2] = $34;
 $35 = (($p) + 4|0);
 HEAP8[$35>>0] = 119;
 $36 = (($p) + 44|0);
 HEAP32[$36>>2] = 0;
 $37 = (($24) + 48|0);
 HEAP32[$37>>2] = 0;
 $38 = (($24) + 52|0);
 HEAP32[$38>>2] = 0;
 $39 = (($24) + 56|0);
 HEAP32[$39>>2] = 0;
 HEAP32[$0>>2] = 0;
 $40 = (($p) + 64|0);
 HEAP32[$40>>2] = 0;
 $41 = (($p) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = $43 & 61439;
 $45 = $44&65535;
 HEAP16[$41>>1] = $45;
 $46 = (($24) + 60|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 64|0);
 HEAP32[$48>>2] = $24;
 $49 = (($24) + 68|0);
 HEAP32[$49>>2] = 0;
 $50 = (($24) + 72|0);
 HEAP32[$50>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _selectExpander($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $$0 = 0, $$idx$val = 0, $$idx2$val = 0, $$idx3$val = 0, $$pr4 = 0, $$pre$pre = 0, $$pre70 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$046 = 0, $i$114 = 0, $j$07 = 0, $k$0$lcssa = 0, $k$028 = 0, $k$122 = 0, $or$cond = 0, $or$cond1 = 0, $pExpr$0 = 0;
 var $pExpr$1 = 0, $pFrom$043 = 0, $pFrom$111 = 0, $pNew$0$lcssa = 0, $pNew$021 = 0, $pNew$1$lcssa = 0, $pNew$1$lcssa71 = 0, $pNew$110 = 0, $pNew$25 = 0, $pNew$3 = 0, $pNew$4 = 0, $pNew$5 = 0, $pSel$0 = 0, $pSub$0 = 0, $sColname = 0, $tableSeen$0$lcssa = 0, $tableSeen$013 = 0, $tableSeen$16 = 0, $tableSeen$2 = 0, $tableSeen$3 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr7 = 0, $zColname$0 = 0, $zSchemaName$0 = 0, $zTName$0 = 0, $zTabName$0 = 0, $zToFree$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sColname = sp + 64|0;
 $0 = (($pWalker) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($p) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 | 16;
 $7 = $6&65535;
 HEAP16[$3>>1] = $7;
 $8 = (($2) + 64|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($p) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $5 & 16;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$p>>2]|0;
 $17 = (_findRightmost($p)|0);
 $18 = (($17) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 _sqlite3WithPush($1,$19,0);
 _sqlite3SrcListAssignCursors($1,$12);
 $20 = (($12) + 8|0);
 $21 = HEAP32[$12>>2]|0;
 $22 = ($21|0)>(0);
 L10: do {
  if ($22) {
   $241 = $21;$i$046 = 0;$pFrom$043 = $20;
   L11: while(1) {
    $23 = (($pFrom$043) + 37|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 & 8;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     $27 = (($pFrom$043) + 16|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     if (!($29)) {
      label = 7;
      break;
     }
     $30 = (_withExpand($pWalker,$pFrom$043)|0);
     $31 = ($30|0)==(0);
     if (!($31)) {
      $$0 = 2;
      label = 89;
      break;
     }
     $32 = HEAP32[$27>>2]|0;
     $33 = ($32|0)==(0|0);
     do {
      if ($33) {
       $34 = (($pFrom$043) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ($35|0)==(0|0);
       if ($36) {
        $37 = (($pFrom$043) + 20|0);
        $38 = HEAP32[$37>>2]|0;
        (_sqlite3WalkSelect($pWalker,$38)|0);
        $39 = (_sqlite3DbMallocZero($2,76)|0);
        HEAP32[$27>>2] = $39;
        $40 = ($39|0)==(0|0);
        if ($40) {
         $$0 = 2;
         label = 89;
         break L11;
        }
        $41 = (($39) + 40|0);
        HEAP16[$41>>1] = 1;
        HEAP32[$vararg_buffer>>2] = $39;
        $42 = (_sqlite3MPrintf($2,17536,$vararg_buffer)|0);
        HEAP32[$39>>2] = $42;
        $pSel$0 = $38;
        while(1) {
         $43 = (($pSel$0) + 60|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)==(0|0);
         if ($45) {
          break;
         } else {
          $pSel$0 = $44;
         }
        }
        $46 = HEAP32[$pSel$0>>2]|0;
        $47 = (($39) + 38|0);
        $48 = (($39) + 4|0);
        $$idx3$val = HEAP32[$1>>2]|0;
        _selectColumnsFromExprList($$idx3$val,$46,$47,$48);
        $49 = (($39) + 36|0);
        HEAP16[$49>>1] = -1;
        $50 = (($39) + 28|0);
        HEAP32[$50>>2] = 1048576;
        $51 = (($39) + 44|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52&255;
        $54 = $53 | 2;
        $55 = $54&255;
        HEAP8[$51>>0] = $55;
        break;
       }
       $56 = (_sqlite3LocateTableItem($1,0,$pFrom$043)|0);
       HEAP32[$27>>2] = $56;
       $57 = ($56|0)==(0|0);
       if ($57) {
        $$0 = 2;
        label = 89;
        break L11;
       }
       $58 = (($56) + 40|0);
       $59 = HEAP16[$58>>1]|0;
       $60 = ($59<<16>>16)==(-1);
       if ($60) {
        label = 17;
        break L11;
       }
       $62 = (($59) + 1)<<16>>16;
       HEAP16[$58>>1] = $62;
       $63 = (($56) + 12|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(0|0);
       if ($65) {
        $66 = (($56) + 44|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = $67 & 16;
        $69 = ($68<<24>>24)==(0);
        if ($69) {
         break;
        }
       }
       $70 = (_sqlite3ViewGetColumnNames($1,$56)|0);
       $71 = ($70|0)==(0);
       if (!($71)) {
        $$0 = 2;
        label = 89;
        break L11;
       }
       $72 = HEAP32[$63>>2]|0;
       $73 = (_sqlite3SelectDup($2,$72,0)|0);
       $74 = (($pFrom$043) + 20|0);
       HEAP32[$74>>2] = $73;
       (_sqlite3WalkSelect($pWalker,$73)|0);
      }
     } while(0);
     $75 = (_sqlite3IndexedByLookup($1,$pFrom$043)|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      $$0 = 2;
      label = 89;
      break;
     }
     $$pre70 = HEAP32[$12>>2]|0;
     $80 = $$pre70;
    } else {
     $80 = $241;
    }
    $77 = (($i$046) + 1)|0;
    $78 = (($pFrom$043) + 72|0);
    $79 = ($77|0)<($80|0);
    if ($79) {
     $241 = $80;$i$046 = $77;$pFrom$043 = $78;
    } else {
     break L10;
    }
   }
   if ((label|0) == 7) {
    _selectPopWith($pWalker,$p);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 17) {
    $61 = HEAP32[$56>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $61;
    _sqlite3ErrorMsg($1,17552,$vararg_buffer1);
    HEAP32[$27>>2] = 0;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 89) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $81 = HEAP8[$8>>0]|0;
 $82 = ($81<<24>>24)==(0);
 if (!($82)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $83 = (_sqliteProcessJoin($1,$p)|0);
 $84 = ($83|0)==(0);
 if (!($84)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = HEAP32[$16>>2]|0;
 $86 = ($85|0)>(0);
 L52: do {
  if ($86) {
   $87 = (($16) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $k$028 = 0;
   while(1) {
    $89 = (($88) + (($k$028*20)|0)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = HEAP8[$90>>0]|0;
    if ((($91<<24>>24) == 116)) {
     $k$0$lcssa = $k$028;
     break L52;
    } else if ((($91<<24>>24) == 122)) {
     $92 = (($90) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = HEAP8[$93>>0]|0;
     $95 = ($94<<24>>24)==(116);
     if ($95) {
      $k$0$lcssa = $k$028;
      break L52;
     }
    }
    $96 = (($k$028) + 1)|0;
    $97 = ($96|0)<($85|0);
    if ($97) {
     $k$028 = $96;
    } else {
     $k$0$lcssa = $96;
     break;
    }
   }
  } else {
   $k$0$lcssa = 0;
  }
 } while(0);
 $98 = ($k$0$lcssa|0)<($85|0);
 if ($98) {
  $99 = (($16) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$1>>2]|0;
  $102 = (($101) + 24|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103 & 32;
  $105 = ($104|0)==(0);
  if ($105) {
   $242 = 0;
  } else {
   $106 = $103 & 64;
   $107 = ($106|0)==(0);
   $242 = $107;
  }
  if ($86) {
   $108 = (($2) + 16|0);
   $109 = (($sColname) + 4|0);
   $k$122 = 0;$pNew$021 = 0;
   while(1) {
    $110 = (($100) + (($k$122*20)|0)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP8[$111>>0]|0;
    if ((($112<<24>>24) == 116)) {
     $zTName$0 = 0;
     label = 43;
    } else if ((($112<<24>>24) == 122)) {
     $113 = (($111) + 16|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = HEAP8[$114>>0]|0;
     $116 = ($115<<24>>24)==(116);
     if ($116) {
      $130 = (($111) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($131) + 8|0);
      $133 = HEAP32[$132>>2]|0;
      $zTName$0 = $133;
      label = 43;
     } else {
      label = 39;
     }
    } else {
     label = 39;
    }
    do {
     if ((label|0) == 39) {
      label = 0;
      $$idx2$val = HEAP32[$1>>2]|0;
      $117 = (_sqlite3ExprListAppend($$idx2$val,$pNew$021,$111)|0);
      $118 = ($117|0)==(0|0);
      if (!($118)) {
       $119 = ((($100) + (($k$122*20)|0)|0) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = HEAP32[$117>>2]|0;
       $122 = (($121) + -1)|0;
       $123 = (($117) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ((($124) + (($122*20)|0)|0) + 4|0);
       HEAP32[$125>>2] = $120;
       $126 = ((($100) + (($k$122*20)|0)|0) + 8|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = HEAP32[$123>>2]|0;
       $129 = ((($128) + (($122*20)|0)|0) + 8|0);
       HEAP32[$129>>2] = $127;
       HEAP32[$119>>2] = 0;
       HEAP32[$126>>2] = 0;
      }
      HEAP32[$110>>2] = 0;
      $pNew$5 = $117;
     }
     else if ((label|0) == 43) {
      label = 0;
      $134 = HEAP32[$12>>2]|0;
      $135 = ($134|0)>(0);
      if ($135) {
       $136 = ($zTName$0|0)==(0|0);
       $243 = $134;$i$114 = 0;$pFrom$111 = $20;$pNew$110 = $pNew$021;$tableSeen$013 = 0;
       while(1) {
        $137 = (($pFrom$111) + 16|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($pFrom$111) + 20|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($pFrom$111) + 12|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ($142|0)==(0|0);
        if ($143) {
         $144 = HEAP32[$138>>2]|0;
         $zTabName$0 = $144;
        } else {
         $zTabName$0 = $142;
        }
        $145 = HEAP8[$8>>0]|0;
        $146 = ($145<<24>>24)==(0);
        if (!($146)) {
         $pNew$1$lcssa = $pNew$110;$tableSeen$0$lcssa = $tableSeen$013;
         break;
        }
        $147 = ($140|0)==(0|0);
        if ($147) {
         label = 50;
        } else {
         $148 = (($140) + 6|0);
         $149 = HEAP16[$148>>1]|0;
         $150 = $149 & 512;
         $151 = ($150<<16>>16)==(0);
         if ($151) {
          label = 50;
         } else {
          $pSub$0 = $140;$zSchemaName$0 = 0;
          label = 54;
         }
        }
        do {
         if ((label|0) == 50) {
          label = 0;
          if (!($136)) {
           $152 = (_sqlite3_stricmp($zTName$0,$zTabName$0)|0);
           $153 = ($152|0)==(0);
           if (!($153)) {
            $229 = $243;$pNew$4 = $pNew$110;$tableSeen$3 = $tableSeen$013;
            break;
           }
          }
          $154 = (($138) + 68|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = (_sqlite3SchemaToIndex($2,$155)|0);
          $157 = ($156|0)>(-1);
          if (!($157)) {
           $pSub$0 = 0;$zSchemaName$0 = 17592;
           label = 54;
           break;
          }
          $158 = HEAP32[$108>>2]|0;
          $159 = (($158) + ($156<<4)|0);
          $160 = HEAP32[$159>>2]|0;
          $pSub$0 = 0;$zSchemaName$0 = $160;
          label = 54;
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          label = 0;
          $161 = (($138) + 38|0);
          $162 = HEAP16[$161>>1]|0;
          $163 = ($162<<16>>16)>(0);
          if (!($163)) {
           $229 = $243;$pNew$4 = $pNew$110;$tableSeen$3 = $tableSeen$013;
           break;
          }
          $164 = (($138) + 4|0);
          $165 = ($pSub$0|0)==(0|0);
          $or$cond = $136 | $165;
          $166 = ($i$114|0)>(0);
          $or$cond1 = $166 & $136;
          $167 = (($pFrom$111) + 36|0);
          $168 = (($pFrom$111) + 48|0);
          $169 = ($zSchemaName$0|0)==(0|0);
          $j$07 = 0;$pNew$25 = $pNew$110;$tableSeen$16 = $tableSeen$013;
          while(1) {
           $170 = HEAP32[$164>>2]|0;
           $171 = (($170) + (($j$07*24)|0)|0);
           $172 = HEAP32[$171>>2]|0;
           if ($or$cond) {
            label = 58;
           } else {
            $173 = HEAP32[$pSub$0>>2]|0;
            $174 = (($173) + 8|0);
            $175 = HEAP32[$174>>2]|0;
            $176 = ((($175) + (($j$07*20)|0)|0) + 8|0);
            $177 = HEAP32[$176>>2]|0;
            $178 = (_sqlite3MatchSpanName($177,0,$zTName$0,0)|0);
            $179 = ($178|0)==(0);
            if ($179) {
             $pNew$3 = $pNew$25;$tableSeen$2 = $tableSeen$16;
            } else {
             label = 58;
            }
           }
           do {
            if ((label|0) == 58) {
             label = 0;
             $180 = ((($170) + (($j$07*24)|0)|0) + 23|0);
             $181 = HEAP8[$180>>0]|0;
             $182 = $181 & 2;
             $183 = ($182<<24>>24)==(0);
             if (!($183)) {
              $pNew$3 = $pNew$25;$tableSeen$2 = $tableSeen$16;
              break;
             }
             if ($or$cond1) {
              $184 = HEAP8[$167>>0]|0;
              $185 = $184 & 4;
              $186 = ($185<<24>>24)==(0);
              if (!($186)) {
               $187 = (_tableAndColumnIndex($12,$i$114,$172,0,0)|0);
               $188 = ($187|0)==(0);
               if (!($188)) {
                $pNew$3 = $pNew$25;$tableSeen$2 = 1;
                break;
               }
              }
              $189 = HEAP32[$168>>2]|0;
              $190 = (_sqlite3IdListIndex($189,$172)|0);
              $191 = ($190|0)>(-1);
              if ($191) {
               $pNew$3 = $pNew$25;$tableSeen$2 = 1;
               break;
              }
             }
             $192 = (_sqlite3Expr($2,27,$172)|0);
             if ($242) {
              label = 65;
             } else {
              $193 = HEAP32[$12>>2]|0;
              $194 = ($193|0)>(1);
              if ($194) {
               label = 65;
              } else {
               $pExpr$1 = $192;$zColname$0 = $172;$zToFree$0 = 0;
              }
             }
             do {
              if ((label|0) == 65) {
               label = 0;
               $195 = (_sqlite3Expr($2,27,$zTabName$0)|0);
               $196 = (_sqlite3PExpr($1,122,$195,$192,0)|0);
               if ($169) {
                $pExpr$0 = $196;
               } else {
                $197 = (_sqlite3Expr($2,27,$zSchemaName$0)|0);
                $198 = (_sqlite3PExpr($1,122,$197,$196,0)|0);
                $pExpr$0 = $198;
               }
               if (!($242)) {
                $pExpr$1 = $pExpr$0;$zColname$0 = $172;$zToFree$0 = 0;
                break;
               }
               HEAP32[$vararg_buffer4>>2] = $zTabName$0;
               $vararg_ptr7 = (($vararg_buffer4) + 4|0);
               HEAP32[$vararg_ptr7>>2] = $172;
               $199 = (_sqlite3MPrintf($2,17600,$vararg_buffer4)|0);
               $pExpr$1 = $pExpr$0;$zColname$0 = $199;$zToFree$0 = $199;
              }
             } while(0);
             $$idx$val = HEAP32[$1>>2]|0;
             $200 = (_sqlite3ExprListAppend($$idx$val,$pNew$25,$pExpr$1)|0);
             HEAP32[$sColname>>2] = $zColname$0;
             $201 = (_sqlite3Strlen30($zColname$0)|0);
             HEAP32[$109>>2] = $201;
             _sqlite3ExprListSetName($1,$200,$sColname,0);
             $202 = ($200|0)==(0|0);
             do {
              if (!($202)) {
               $203 = HEAP16[$3>>1]|0;
               $204 = $203 & 512;
               $205 = ($204<<16>>16)==(0);
               if ($205) {
                break;
               }
               $206 = HEAP32[$200>>2]|0;
               $207 = (($206) + -1)|0;
               $208 = (($200) + 8|0);
               $209 = HEAP32[$208>>2]|0;
               if ($165) {
                HEAP32[$vararg_buffer8>>2] = $zSchemaName$0;
                $vararg_ptr11 = (($vararg_buffer8) + 4|0);
                HEAP32[$vararg_ptr11>>2] = $zTabName$0;
                $vararg_ptr12 = (($vararg_buffer8) + 8|0);
                HEAP32[$vararg_ptr12>>2] = $zColname$0;
                $217 = (_sqlite3MPrintf($2,17608,$vararg_buffer8)|0);
                $218 = ((($209) + (($207*20)|0)|0) + 8|0);
                HEAP32[$218>>2] = $217;
               } else {
                $210 = HEAP32[$pSub$0>>2]|0;
                $211 = (($210) + 8|0);
                $212 = HEAP32[$211>>2]|0;
                $213 = ((($212) + (($j$07*20)|0)|0) + 8|0);
                $214 = HEAP32[$213>>2]|0;
                $215 = (_sqlite3DbStrDup($2,$214)|0);
                $216 = ((($209) + (($207*20)|0)|0) + 8|0);
                HEAP32[$216>>2] = $215;
               }
               $219 = ((($209) + (($207*20)|0)|0) + 13|0);
               $220 = HEAP8[$219>>0]|0;
               $221 = $220 | 2;
               HEAP8[$219>>0] = $221;
              }
             } while(0);
             _sqlite3DbFree($2,$zToFree$0);
             $pNew$3 = $200;$tableSeen$2 = 1;
            }
           } while(0);
           $222 = (($j$07) + 1)|0;
           $223 = HEAP16[$161>>1]|0;
           $224 = $223 << 16 >> 16;
           $225 = ($222|0)<($224|0);
           if ($225) {
            $j$07 = $222;$pNew$25 = $pNew$3;$tableSeen$16 = $tableSeen$2;
           } else {
            break;
           }
          }
          $$pre$pre = HEAP32[$12>>2]|0;
          $229 = $$pre$pre;$pNew$4 = $pNew$3;$tableSeen$3 = $tableSeen$2;
         }
        } while(0);
        $226 = (($i$114) + 1)|0;
        $227 = (($pFrom$111) + 72|0);
        $228 = ($226|0)<($229|0);
        if ($228) {
         $243 = $229;$i$114 = $226;$pFrom$111 = $227;$pNew$110 = $pNew$4;$tableSeen$013 = $tableSeen$3;
        } else {
         $pNew$1$lcssa = $pNew$4;$tableSeen$0$lcssa = $tableSeen$3;
         break;
        }
       }
       $230 = ($tableSeen$0$lcssa|0)==(0);
       if ($230) {
        $pNew$1$lcssa71 = $pNew$1$lcssa;
       } else {
        $pNew$5 = $pNew$1$lcssa;
        break;
       }
      } else {
       $pNew$1$lcssa71 = $pNew$021;
      }
      $231 = ($zTName$0|0)==(0|0);
      if ($231) {
       _sqlite3ErrorMsg($1,17648,$vararg_buffer16);
       $pNew$5 = $pNew$1$lcssa71;
       break;
      } else {
       HEAP32[$vararg_buffer13>>2] = $zTName$0;
       _sqlite3ErrorMsg($1,17624,$vararg_buffer13);
       $pNew$5 = $pNew$1$lcssa71;
       break;
      }
     }
    } while(0);
    $232 = (($k$122) + 1)|0;
    $233 = HEAP32[$16>>2]|0;
    $234 = ($232|0)<($233|0);
    if ($234) {
     $k$122 = $232;$pNew$021 = $pNew$5;
    } else {
     $pNew$0$lcssa = $pNew$5;
     break;
    }
   }
  } else {
   $pNew$0$lcssa = 0;
  }
  _sqlite3ExprListDelete($2,$16);
  HEAP32[$p>>2] = $pNew$0$lcssa;
  $236 = $pNew$0$lcssa;
 } else {
  $$pr4 = HEAP32[$p>>2]|0;
  $236 = $$pr4;
 }
 $235 = ($236|0)==(0|0);
 if ($235) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $237 = HEAP32[$236>>2]|0;
 $238 = (($2) + 96|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($237|0)>($239|0);
 if (!($240)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3ErrorMsg($1,17672,$vararg_buffer18);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _selectPopWith($pWalker,$p) {
 $pWalker = $pWalker|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_findRightmost($p)|0);
 $1 = (($0) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($pWalker) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 536|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _findRightmost($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $p;
 while(1) {
  $0 = (($$0) + 64|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   break;
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _withExpand($pWalker,$pFrom) {
 $pWalker = $pWalker|0;
 $pFrom = $pFrom|0;
 var $$0 = 0, $$1 = 0, $$idx$val = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $i$02 = 0, $pEList$0 = 0, $pLeft$0 = 0, $pWith = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pWith = sp + 28|0;
 $0 = (($pWalker) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 536|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_searchWith($4,$pFrom,$pWith)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _sqlite3ErrorMsg($1,$8,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_sqlite3DbMallocZero($2,76)|0);
 $12 = (($pFrom) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($11) + 40|0);
 HEAP16[$14>>1] = 1;
 $15 = HEAP32[$5>>2]|0;
 $16 = (_sqlite3DbStrDup($2,$15)|0);
 HEAP32[$11>>2] = $16;
 $17 = (($11) + 36|0);
 HEAP16[$17>>1] = -1;
 $18 = (($11) + 28|0);
 HEAP32[$18>>2] = 1048576;
 $19 = (($11) + 44|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 | 2;
 $23 = $22&255;
 HEAP8[$19>>0] = $23;
 $24 = (($5) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_sqlite3SelectDup($2,$25,0)|0);
 $27 = (($pFrom) + 20|0);
 HEAP32[$27>>2] = $26;
 $28 = (($2) + 64|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (($26) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $$off = (($32) + -115)<<24>>24;
 $33 = ($$off&255)<(2);
 if ($33) {
  $34 = (($26) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = (($26) + 6|0);
   $86 = $36;$i$02 = 0;
   while(1) {
    $39 = ((($35) + (($i$02*72)|0)|0) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     $42 = ((($35) + (($i$02*72)|0)|0) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $60 = $86;
     } else {
      $45 = HEAP32[$5>>2]|0;
      $46 = (_sqlite3_stricmp($43,$45)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = ((($35) + (($i$02*72)|0)|0) + 24|0);
       HEAP32[$48>>2] = $11;
       $49 = ((($35) + (($i$02*72)|0)|0) + 45|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = $50 | 8;
       HEAP8[$49>>0] = $51;
       $52 = HEAP16[$14>>1]|0;
       $53 = (($52) + 1)<<16>>16;
       HEAP16[$14>>1] = $53;
       $54 = HEAP16[$38>>1]|0;
       $55 = $54&65535;
       $56 = $55 | 2048;
       $57 = $56&65535;
       HEAP16[$38>>1] = $57;
       $$pre = HEAP32[$35>>2]|0;
       $60 = $$pre;
      } else {
       $60 = $86;
      }
     }
    } else {
     $60 = $86;
    }
    $58 = (($i$02) + 1)|0;
    $59 = ($58|0)<($60|0);
    if ($59) {
     $86 = $60;$i$02 = $58;
    } else {
     break;
    }
   }
  }
 }
 $61 = HEAP16[$14>>1]|0;
 $62 = ($61&65535)>(2);
 if ($62) {
  $63 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $63;
  _sqlite3ErrorMsg($1,17904,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$7>>2] = 17952;
 $64 = HEAP32[$3>>2]|0;
 $65 = HEAP32[$pWith>>2]|0;
 HEAP32[$3>>2] = $65;
 if ($33) {
  $66 = (($26) + 60|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67;
 } else {
  $68 = $26;
 }
 (_sqlite3WalkSelect($pWalker,$68)|0);
 $pLeft$0 = $26;
 while(1) {
  $69 = (($pLeft$0) + 60|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(0|0);
  if ($71) {
   break;
  } else {
   $pLeft$0 = $70;
  }
 }
 $72 = HEAP32[$pLeft$0>>2]|0;
 $73 = (($5) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $pEList$0 = $72;
 } else {
  $76 = HEAP32[$72>>2]|0;
  $77 = HEAP32[$74>>2]|0;
  $78 = ($76|0)==($77|0);
  if ($78) {
   $pEList$0 = $74;
  } else {
   $79 = HEAP32[$5>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $79;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $76;
   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $77;
   _sqlite3ErrorMsg($1,17976,$vararg_buffer4);
   HEAP32[$3>>2] = $64;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $80 = (($11) + 38|0);
 $81 = (($11) + 4|0);
 $$idx$val = HEAP32[$1>>2]|0;
 _selectColumnsFromExprList($$idx$val,$pEList$0,$80,$81);
 if ($33) {
  $82 = (($26) + 6|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 & 2048;
  $85 = ($84<<16>>16)==(0);
  $$1 = $85 ? 18056 : 18016;
  HEAP32[$7>>2] = $$1;
  (_sqlite3WalkSelect($pWalker,$26)|0);
 }
 HEAP32[$7>>2] = 0;
 HEAP32[$3>>2] = $64;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IndexedByLookup($pParse,$pFrom) {
 $pParse = $pParse|0;
 $pFrom = $pFrom|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIdx$0 = 0, $pIdx$03 = 0, $pIdx$04 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pFrom) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pFrom) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($1) + 8|0);
 $pIdx$03 = HEAP32[$6>>2]|0;
 $7 = ($pIdx$03|0)==(0|0);
 L7: do {
  if (!($7)) {
   $pIdx$04 = $pIdx$03;
   while(1) {
    $10 = HEAP32[$pIdx$04>>2]|0;
    $11 = (_sqlite3_stricmp($10,$4)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     break;
    }
    $8 = (($pIdx$04) + 20|0);
    $pIdx$0 = HEAP32[$8>>2]|0;
    $9 = ($pIdx$0|0)==(0|0);
    if ($9) {
     break L7;
    } else {
     $pIdx$04 = $pIdx$0;
    }
   }
   $14 = (($pFrom) + 68|0);
   HEAP32[$14>>2] = $pIdx$04;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 _sqlite3ErrorMsg($pParse,17880,$vararg_buffer);
 $13 = (($pParse) + 17|0);
 HEAP8[$13>>0] = 1;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqliteProcessJoin($pParse,$p) {
 $pParse = $pParse|0;
 $p = $p|0;
 var $$0 = 0, $$lobit = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0;
 var $9 = 0, $i$010 = 0, $iLeft = 0, $iLeft2 = 0, $iLeftCol = 0, $iLeftCol3 = 0, $j$01 = 0, $j$14 = 0, $or$cond = 0, $pLeft$09 = 0, $pRight$07 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $iLeft = sp + 32|0;
 $iLeftCol = sp + 28|0;
 $iLeft2 = sp + 24|0;
 $iLeftCol3 = sp + 20|0;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($1) + 80|0);
 $6 = (($1) + 8|0);
 $7 = (($p) + 44|0);
 $i$010 = 0;$pLeft$09 = $6;$pRight$07 = $5;
 L4: while(1) {
  $8 = (($pLeft$09) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($pRight$07) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==(0|0);
  $13 = ($11|0)==(0|0);
  $or$cond = $12 | $13;
  if (!($or$cond)) {
   $14 = (($pRight$07) + 36|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 & 32;
   $18 = ($17|0)==(0);
   $$lobit = $17 >>> 5;
   $19 = $16 & 4;
   $20 = ($19|0)==(0);
   $$pre14 = (($pRight$07) + 44|0);
   if (!($20)) {
    $21 = HEAP32[$$pre14>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     label = 9;
     break;
    }
    $23 = (($pRight$07) + 48|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if (!($25)) {
     label = 9;
     break;
    }
    $26 = (($11) + 38|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)>(0);
    if ($28) {
     $29 = (($11) + 4|0);
     $30 = (($i$010) + 1)|0;
     $j$01 = 0;
     while(1) {
      $31 = HEAP32[$29>>2]|0;
      $32 = (($31) + (($j$01*24)|0)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (_tableAndColumnIndex($1,$30,$33,$iLeft,$iLeftCol)|0);
      $35 = ($34|0)==(0);
      if (!($35)) {
       $36 = HEAP32[$iLeft>>2]|0;
       $37 = HEAP32[$iLeftCol>>2]|0;
       _addWhereTerm($pParse,$1,$36,$37,$30,$j$01,$$lobit,$7);
      }
      $38 = (($j$01) + 1)|0;
      $39 = HEAP16[$26>>1]|0;
      $40 = $39 << 16 >> 16;
      $41 = ($38|0)<($40|0);
      if ($41) {
       $j$01 = $38;
      } else {
       break;
      }
     }
    }
   }
   $42 = HEAP32[$$pre14>>2]|0;
   $43 = ($42|0)==(0|0);
   $$pre15 = (($pRight$07) + 48|0);
   if (!($43)) {
    $44 = HEAP32[$$pre15>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     label = 15;
     break;
    }
    if ($18) {
     $50 = $42;
    } else {
     $46 = (($pRight$07) + 40|0);
     $47 = HEAP32[$46>>2]|0;
     _setJoinExpr($42,$47);
     $$pre = HEAP32[$$pre14>>2]|0;
     $50 = $$pre;
    }
    $48 = HEAP32[$pParse>>2]|0;
    $49 = HEAP32[$7>>2]|0;
    $51 = (_sqlite3ExprAnd($48,$49,$50)|0);
    HEAP32[$7>>2] = $51;
    HEAP32[$$pre14>>2] = 0;
   }
   $52 = HEAP32[$$pre15>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    $54 = (($52) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)>(0);
    if ($56) {
     $57 = (($i$010) + 1)|0;
     $j$14 = 0;
     while(1) {
      $58 = HEAP32[$52>>2]|0;
      $59 = (($58) + ($j$14<<3)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = (_columnIndex($11,$60)|0);
      $62 = ($61|0)<(0);
      if ($62) {
       label = 24;
       break L4;
      }
      $63 = (_tableAndColumnIndex($1,$57,$60,$iLeft2,$iLeftCol3)|0);
      $64 = ($63|0)==(0);
      if ($64) {
       label = 24;
       break L4;
      }
      $65 = HEAP32[$iLeft2>>2]|0;
      $66 = HEAP32[$iLeftCol3>>2]|0;
      _addWhereTerm($pParse,$1,$65,$66,$57,$61,$$lobit,$7);
      $67 = (($j$14) + 1)|0;
      $68 = HEAP32[$54>>2]|0;
      $69 = ($67|0)<($68|0);
      if ($69) {
       $j$14 = $67;
      } else {
       break;
      }
     }
    }
   }
  }
  $70 = (($i$010) + 1)|0;
  $71 = (($pRight$07) + 72|0);
  $72 = (($pLeft$09) + 72|0);
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + -1)|0;
  $75 = ($70|0)<($74|0);
  if ($75) {
   $i$010 = $70;$pLeft$09 = $72;$pRight$07 = $71;
  } else {
   $$0 = 0;
   label = 27;
   break;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$vararg_buffer>>2] = 0;
  _sqlite3ErrorMsg($pParse,17704,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  _sqlite3ErrorMsg($pParse,17760,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  HEAP32[$vararg_buffer3>>2] = $60;
  _sqlite3ErrorMsg($pParse,17816,$vararg_buffer3);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _tableAndColumnIndex($pSrc,$N,$zCol,$piTab,$piCol) {
 $pSrc = $pSrc|0;
 $N = $N|0;
 $zCol = $zCol|0;
 $piTab = $piTab|0;
 $piCol = $piCol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($N|0)>(0);
 L1: do {
  if ($0) {
   $i$02 = 0;
   while(1) {
    $3 = ((($pSrc) + (($i$02*72)|0)|0) + 24|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (_columnIndex($4,$zCol)|0);
    $6 = ($5|0)>(-1);
    $2 = (($i$02) + 1)|0;
    if ($6) {
     break;
    }
    $1 = ($2|0)<($N|0);
    if ($1) {
     $i$02 = $2;
    } else {
     $$0 = 0;
     break L1;
    }
   }
   $7 = ($piTab|0)==(0|0);
   if ($7) {
    $$0 = 1;
   } else {
    HEAP32[$piTab>>2] = $i$02;
    HEAP32[$piCol>>2] = $5;
    $$0 = 1;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IdListIndex($pList,$zName) {
 $pList = $pList|0;
 $zName = $zName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = -1;
  } else {
   $1 = (($pList) + 4|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(0);
   if ($3) {
    $4 = HEAP32[$pList>>2]|0;
    $i$01 = 0;
    while(1) {
     $7 = (($4) + ($i$01<<3)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (_sqlite3_stricmp($8,$zName)|0);
     $10 = ($9|0)==(0);
     $6 = (($i$01) + 1)|0;
     if ($10) {
      $$0 = $i$01;
      break L1;
     }
     $5 = ($6|0)<($2|0);
     if ($5) {
      $i$01 = $6;
     } else {
      $$0 = -1;
      break;
     }
    }
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _columnIndex($pTab,$zCol) {
 $pTab = $pTab|0;
 $zCol = $zCol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)>(0);
 if (!($2)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pTab) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $i$01 = 0;
 while(1) {
  $8 = (($4) + (($i$01*24)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_sqlite3_stricmp($9,$zCol)|0);
  $11 = ($10|0)==(0);
  $7 = (($i$01) + 1)|0;
  if ($11) {
   $$0 = $i$01;
   label = 5;
   break;
  }
  $5 = $1 << 16 >> 16;
  $6 = ($7|0)<($5|0);
  if ($6) {
   $i$01 = $7;
  } else {
   $$0 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _addWhereTerm($pParse,$pSrc,$iLeft,$iColLeft,$iRight,$iColRight,$isOuterJoin,$ppWhere) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 $iLeft = $iLeft|0;
 $iColLeft = $iColLeft|0;
 $iRight = $iRight|0;
 $iColRight = $iColRight|0;
 $isOuterJoin = $isOuterJoin|0;
 $ppWhere = $ppWhere|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3CreateColumnExpr($0,$pSrc,$iLeft,$iColLeft)|0);
 $2 = (_sqlite3CreateColumnExpr($0,$pSrc,$iRight,$iColRight)|0);
 $3 = (_sqlite3PExpr($pParse,79,$1,$2,0)|0);
 $4 = ($3|0)==(0|0);
 $5 = ($isOuterJoin|0)==(0);
 $or$cond = $4 | $5;
 if (!($or$cond)) {
  $6 = (($3) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | 1;
  HEAP32[$6>>2] = $8;
  $9 = (($2) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10&65535;
  $12 = (($3) + 36|0);
  HEAP16[$12>>1] = $11;
 }
 $13 = HEAP32[$ppWhere>>2]|0;
 $14 = (_sqlite3ExprAnd($0,$13,$3)|0);
 HEAP32[$ppWhere>>2] = $14;
 STACKTOP = sp;return;
}
function _setJoinExpr($p,$iTable) {
 $p = $p|0;
 $iTable = $iTable|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = $iTable&65535;
 $$01 = $p;
 while(1) {
  $2 = (($$01) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 | 1;
  HEAP32[$2>>2] = $4;
  $5 = (($$01) + 36|0);
  HEAP16[$5>>1] = $1;
  $6 = (($$01) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  _setJoinExpr($7,$iTable);
  $8 = (($$01) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   break;
  } else {
   $$01 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3ExprAnd($db,$pLeft,$pRight) {
 $db = $db|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pLeft|0)==(0|0);
 do {
  if ($0) {
   $$0 = $pRight;
  } else {
   $1 = ($pRight|0)==(0|0);
   if ($1) {
    $$0 = $pLeft;
   } else {
    $2 = (_exprAlwaysFalse($pLeft)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     $4 = (_exprAlwaysFalse($pRight)|0);
     $5 = ($4|0)==(0);
     if ($5) {
      $7 = (_sqlite3ExprAlloc($db,72,0,0)|0);
      _sqlite3ExprAttachSubtrees($db,$7,$pLeft,$pRight);
      $$0 = $7;
      break;
     }
    }
    _sqlite3ExprDelete($db,$pLeft);
    _sqlite3ExprDelete($db,$pRight);
    $6 = (_sqlite3ExprAlloc($db,132,10304,0)|0);
    $$0 = $6;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _exprAlwaysFalse($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 HEAP32[$v>>2] = 0;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_sqlite3ExprIsInteger($p,$v)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$v>>2]|0;
   $7 = ($6|0)==(0);
   $8 = $7&1;
   $$0 = $8;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprAlloc($db,$op,$pToken,$dequote) {
 $db = $db|0;
 $op = $op|0;
 $pToken = $pToken|0;
 $dequote = $dequote|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iValue = 0;
 var $nExtra$0 = 0, $or$cond4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iValue = sp;
 HEAP32[$iValue>>2] = 0;
 $0 = ($pToken|0)!=(0|0);
 do {
  if ($0) {
   $1 = ($op|0)==(132);
   if ($1) {
    $2 = HEAP32[$pToken>>2]|0;
    $3 = ($2|0)==(0|0);
    if (!($3)) {
     $4 = (_sqlite3GetInt32($2,$iValue)|0);
     $5 = ($4|0)==(0);
     if (!($5)) {
      $nExtra$0 = 0;
      break;
     }
    }
   }
   $6 = (($pToken) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1)|0;
   $nExtra$0 = $8;
  } else {
   $nExtra$0 = 0;
  }
 } while(0);
 $9 = (($nExtra$0) + 48)|0;
 $10 = (_sqlite3DbMallocZero($db,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return ($10|0);
 }
 $12 = $op&255;
 HEAP8[$10>>0] = $12;
 $13 = (($10) + 34|0);
 HEAP16[$13>>1] = -1;
 do {
  if ($0) {
   $14 = ($nExtra$0|0)==(0);
   if ($14) {
    $15 = (($10) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 | 1024;
    HEAP32[$15>>2] = $17;
    $18 = HEAP32[$iValue>>2]|0;
    $19 = (($10) + 8|0);
    HEAP32[$19>>2] = $18;
    break;
   }
   $20 = (($10) + 48|0);
   $21 = (($10) + 8|0);
   HEAP32[$21>>2] = $20;
   $22 = (($pToken) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $27 = 48;
   } else {
    $25 = HEAP32[$pToken>>2]|0;
    _memcpy(($20|0),($25|0),($23|0))|0;
    $$pre = HEAP32[$22>>2]|0;
    $phitmp = (($$pre) + 48)|0;
    $27 = $phitmp;
   }
   $26 = (($10) + ($27)|0);
   HEAP8[$26>>0] = 0;
   $28 = ($dequote|0)!=(0);
   $29 = ($nExtra$0|0)>(2);
   $or$cond4 = $28 & $29;
   if ($or$cond4) {
    $30 = HEAP32[$pToken>>2]|0;
    $31 = HEAP8[$30>>0]|0;
    if ((($31<<24>>24) == 34) | (($31<<24>>24) == 91) | (($31<<24>>24) == 96) | (($31<<24>>24) == 39)) {
     $32 = HEAP32[$21>>2]|0;
     _sqlite3Dequote($32);
     $33 = ($31<<24>>24)==(34);
     if ($33) {
      $34 = (($10) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $35 | 64;
      HEAP32[$34>>2] = $36;
     }
    }
   }
  }
 } while(0);
 $37 = (($10) + 24|0);
 HEAP32[$37>>2] = 1;
 STACKTOP = sp;return ($10|0);
}
function _sqlite3ExprAttachSubtrees($db,$pRoot,$pLeft,$pRight) {
 $db = $db|0;
 $pRoot = $pRoot|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pRoot|0)==(0|0);
 if ($0) {
  _sqlite3ExprDelete($db,$pLeft);
  _sqlite3ExprDelete($db,$pRight);
  STACKTOP = sp;return;
 }
 $1 = ($pRight|0)==(0|0);
 if (!($1)) {
  $2 = (($pRoot) + 16|0);
  HEAP32[$2>>2] = $pRight;
  $3 = (($pRight) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 256;
  $6 = (($pRoot) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 | $5;
  HEAP32[$6>>2] = $8;
 }
 $9 = ($pLeft|0)==(0|0);
 if (!($9)) {
  $10 = (($pRoot) + 12|0);
  HEAP32[$10>>2] = $pLeft;
  $11 = (($pLeft) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 256;
  $14 = (($pRoot) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 | $13;
  HEAP32[$14>>2] = $16;
 }
 _exprSetHeight($pRoot);
 STACKTOP = sp;return;
}
function _exprSetHeight($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nHeight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nHeight = sp;
 HEAP32[$nHeight>>2] = 0;
 $0 = (($p) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _heightOfExpr($1,$nHeight);
 $2 = (($p) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _heightOfExpr($3,$nHeight);
 $4 = (($p) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 2048;
 $7 = ($6|0)==(0);
 $8 = (($p) + 20|0);
 if ($7) {
  $10 = HEAP32[$8>>2]|0;
  _heightOfExprList($10,$nHeight);
 } else {
  $9 = HEAP32[$8>>2]|0;
  _heightOfSelect($9,$nHeight);
 }
 $11 = HEAP32[$nHeight>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = (($p) + 24|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _heightOfExpr($p,$pnHeight) {
 $p = $p|0;
 $pnHeight = $pnHeight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  $1 = (($p) + 24|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$pnHeight>>2]|0;
  $4 = ($2|0)>($3|0);
  if ($4) {
   HEAP32[$pnHeight>>2] = $2;
  }
 }
 STACKTOP = sp;return;
}
function _heightOfSelect($p,$pnHeight) {
 $p = $p|0;
 $pnHeight = $pnHeight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$tr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$tr1 = $p;
 }
 while(1) {
  $1 = (($p$tr1) + 44|0);
  $2 = HEAP32[$1>>2]|0;
  _heightOfExpr($2,$pnHeight);
  $3 = (($p$tr1) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  _heightOfExpr($4,$pnHeight);
  $5 = (($p$tr1) + 68|0);
  $6 = HEAP32[$5>>2]|0;
  _heightOfExpr($6,$pnHeight);
  $7 = (($p$tr1) + 72|0);
  $8 = HEAP32[$7>>2]|0;
  _heightOfExpr($8,$pnHeight);
  $9 = HEAP32[$p$tr1>>2]|0;
  _heightOfExprList($9,$pnHeight);
  $10 = (($p$tr1) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  _heightOfExprList($11,$pnHeight);
  $12 = (($p$tr1) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  _heightOfExprList($13,$pnHeight);
  $14 = (($p$tr1) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   break;
  } else {
   $p$tr1 = $15;
  }
 }
 STACKTOP = sp;return;
}
function _heightOfExprList($p,$pnHeight) {
 $p = $p|0;
 $pnHeight = $pnHeight|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($p) + 8|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + (($i$01*20)|0)|0);
  $6 = HEAP32[$5>>2]|0;
  _heightOfExpr($6,$pnHeight);
  $7 = (($i$01) + 1)|0;
  $8 = HEAP32[$p>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $i$01 = $7;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3CreateColumnExpr($db,$pSrc,$iSrc,$iCol) {
 $db = $db|0;
 $pSrc = $pSrc|0;
 $iSrc = $iSrc|0;
 $iCol = $iCol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ExprAlloc($db,154,0,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = ((($pSrc) + (($iSrc*72)|0)|0) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + 44|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($pSrc) + (($iSrc*72)|0)|0) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 28|0);
 HEAP32[$7>>2] = $6;
 $8 = (($3) + 36|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = ($10|0)==($iCol|0);
 if ($11) {
  $12 = (($0) + 32|0);
  HEAP16[$12>>1] = -1;
 } else {
  $13 = $iCol&65535;
  $14 = (($0) + 32|0);
  HEAP16[$14>>1] = $13;
  $15 = ($iCol|0)>(63);
  $16 = (_bitshift64Shl(1,0,($iCol|0))|0);
  $17 = tempRet0;
  $18 = $15 ? 0 : $16;
  $19 = $15 ? -2147483648 : $17;
  $20 = ((($pSrc) + (($iSrc*72)|0)|0) + 64|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $23 | $18;
  $28 = $26 | $19;
  $29 = $20;
  $30 = $29;
  HEAP32[$30>>2] = $27;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
 }
 $33 = (($0) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 | 4;
 HEAP32[$33>>2] = $35;
 STACKTOP = sp;return ($0|0);
}
function _searchWith($pWith,$pItem,$ppContext) {
 $pWith = $pWith|0;
 $pItem = $pItem|0;
 $ppContext = $ppContext|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var $or$cond = 0, $p$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pItem) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pItem) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($pWith|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$04 = $pWith;
 }
 L6: while(1) {
  $7 = HEAP32[$p$04>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $i$01 = 0;
   while(1) {
    $11 = ((($p$04) + ($i$01<<4)|0) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_sqlite3_stricmp($4,$12)|0);
    $14 = ($13|0)==(0);
    $10 = (($i$01) + 1)|0;
    if ($14) {
     break L6;
    }
    $9 = ($10|0)<($7|0);
    if ($9) {
     $i$01 = $10;
    } else {
     break;
    }
   }
  }
  $15 = (($p$04) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $p$04 = $16;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$ppContext>>2] = $p$04;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SrcListDup($db,$p,$flags) {
 $db = $db|0;
 $p = $p|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$01 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ($1*72)|0;
  $phitmp = (($3) + 8)|0;
  $4 = $phitmp;
 } else {
  $4 = 80;
 }
 $5 = (_sqlite3DbMallocRaw($db,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$p>>2]|0;
 $8 = (($5) + 4|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$5>>2] = $7;
 $9 = HEAP32[$p>>2]|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($5) + 8|0);
 $i$01 = 0;
 while(1) {
  $12 = ((($p) + (($i$01*72)|0)|0) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + (($i$01*72)|0)|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($p) + (($i$01*72)|0)|0) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_sqlite3DbStrDup($db,$16)|0);
  $18 = ((($11) + (($i$01*72)|0)|0) + 4|0);
  HEAP32[$18>>2] = $17;
  $19 = ((($p) + (($i$01*72)|0)|0) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_sqlite3DbStrDup($db,$20)|0);
  $22 = ((($11) + (($i$01*72)|0)|0) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($p) + (($i$01*72)|0)|0) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_sqlite3DbStrDup($db,$24)|0);
  $26 = ((($11) + (($i$01*72)|0)|0) + 12|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($p) + (($i$01*72)|0)|0) + 44|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ((($11) + (($i$01*72)|0)|0) + 36|0);
  HEAP8[$29>>0] = $28;
  $30 = ((($p) + (($i$01*72)|0)|0) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($11) + (($i$01*72)|0)|0) + 40|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($p) + (($i$01*72)|0)|0) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($11) + (($i$01*72)|0)|0) + 24|0);
  HEAP32[$35>>2] = $34;
  $36 = ((($p) + (($i$01*72)|0)|0) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($11) + (($i$01*72)|0)|0) + 28|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($p) + (($i$01*72)|0)|0) + 45|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ((($11) + (($i$01*72)|0)|0) + 37|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $40 & 2;
  $44 = $42 & -3;
  $45 = $44 | $43;
  HEAP8[$41>>0] = $45;
  $46 = HEAP8[$39>>0]|0;
  $47 = $46 & 4;
  $48 = $45 & -5;
  $49 = $48 | $47;
  HEAP8[$41>>0] = $49;
  $50 = HEAP8[$39>>0]|0;
  $51 = $50 & 8;
  $52 = $49 & -9;
  $53 = $52 | $51;
  HEAP8[$41>>0] = $53;
  $54 = ((($p) + (($i$01*72)|0)|0) + 72|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (_sqlite3DbStrDup($db,$55)|0);
  $57 = ((($11) + (($i$01*72)|0)|0) + 64|0);
  HEAP32[$57>>2] = $56;
  $58 = HEAP8[$39>>0]|0;
  $59 = HEAP8[$41>>0]|0;
  $60 = $58 & 1;
  $61 = $59 & -2;
  $62 = $61 | $60;
  HEAP8[$41>>0] = $62;
  $63 = ((($p) + (($i$01*72)|0)|0) + 76|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($11) + (($i$01*72)|0)|0) + 68|0);
  HEAP32[$65>>2] = $64;
  $66 = ((($p) + (($i$01*72)|0)|0) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($11) + (($i$01*72)|0)|0) + 16|0);
  HEAP32[$68>>2] = $67;
  $69 = ($67|0)==(0|0);
  if (!($69)) {
   $70 = (($67) + 40|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = (($71) + 1)<<16>>16;
   HEAP16[$70>>1] = $72;
  }
  $73 = ((($p) + (($i$01*72)|0)|0) + 28|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_sqlite3SelectDup($db,$74,$flags)|0);
  $76 = ((($11) + (($i$01*72)|0)|0) + 20|0);
  HEAP32[$76>>2] = $75;
  $77 = ((($p) + (($i$01*72)|0)|0) + 52|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_sqlite3ExprDup($db,$78,$flags)|0);
  $80 = ((($11) + (($i$01*72)|0)|0) + 44|0);
  HEAP32[$80>>2] = $79;
  $81 = ((($p) + (($i$01*72)|0)|0) + 56|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_sqlite3IdListDup($db,$82)|0);
  $84 = ((($11) + (($i$01*72)|0)|0) + 48|0);
  HEAP32[$84>>2] = $83;
  $85 = ((($p) + (($i$01*72)|0)|0) + 64|0);
  $86 = $85;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($11) + (($i$01*72)|0)|0) + 56|0);
  $93 = $92;
  $94 = $93;
  HEAP32[$94>>2] = $88;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $91;
  $97 = (($i$01) + 1)|0;
  $98 = HEAP32[$p>>2]|0;
  $99 = ($97|0)<($98|0);
  if ($99) {
   $i$01 = $97;
  } else {
   $$0 = $5;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _withDup($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pRet$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $pRet$0 = 0;
  STACKTOP = sp;return ($pRet$0|0);
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = $1 << 4;
 $3 = $2 | 8;
 $4 = (_sqlite3DbMallocZero($db,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $pRet$0 = $4;
  STACKTOP = sp;return ($pRet$0|0);
 }
 $6 = HEAP32[$p>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$p>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  $pRet$0 = $4;
  STACKTOP = sp;return ($pRet$0|0);
 }
 $9 = (($4) + 8|0);
 $i$01 = 0;
 while(1) {
  $10 = ((($p) + ($i$01<<4)|0) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_sqlite3SelectDup($db,$11,0)|0);
  $13 = ((($9) + ($i$01<<4)|0) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($p) + ($i$01<<4)|0) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_sqlite3ExprListDup($db,$15,0)|0);
  $17 = ((($9) + ($i$01<<4)|0) + 4|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($p) + ($i$01<<4)|0) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_sqlite3DbStrDup($db,$19)|0);
  $21 = (($9) + ($i$01<<4)|0);
  HEAP32[$21>>2] = $20;
  $22 = (($i$01) + 1)|0;
  $23 = HEAP32[$p>>2]|0;
  $24 = ($22|0)<($23|0);
  if ($24) {
   $i$01 = $22;
  } else {
   $pRet$0 = $4;
   break;
  }
 }
 STACKTOP = sp;return ($pRet$0|0);
}
function _sqlite3IdListDup($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_sqlite3DbMallocRaw($db,8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 << 3;
 $8 = (_sqlite3DbMallocRaw($db,$7)|0);
 HEAP32[$1>>2] = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _sqlite3DbFree($db,$1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)>(0);
 if (!($11)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = $8;$i$01 = 0;
 while(1) {
  $12 = HEAP32[$p>>2]|0;
  $13 = (($12) + ($i$01<<3)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_sqlite3DbStrDup($db,$14)|0);
  $16 = (($17) + ($i$01<<3)|0);
  HEAP32[$16>>2] = $15;
  $18 = ((($12) + ($i$01<<3)|0) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($17) + ($i$01<<3)|0) + 4|0);
  HEAP32[$20>>2] = $19;
  $21 = (($i$01) + 1)|0;
  $22 = HEAP32[$3>>2]|0;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   $$0 = $1;
   break;
  }
  $$pre = HEAP32[$1>>2]|0;
  $17 = $$pre;$i$01 = $21;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vtabCallConstructor($db,$pTab,$pMod,$xConstruct,$pzErr) {
 $db = $db|0;
 $pTab = $pTab|0;
 $pMod = $pMod|0;
 $xConstruct = $xConstruct|0;
 $pzErr = $pzErr|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $i$02 = 0, $i$1 = 0, $iCol$06 = 0, $j$03 = 0, $or$cond = 0, $rc$0 = 0, $sCtx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $zErr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sCtx = sp + 32|0;
 $zErr = sp + 28|0;
 $0 = (($pTab) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pTab) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$zErr>>2] = 0;
 $4 = HEAP32[$pTab>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_sqlite3MPrintf($db,1712,$vararg_buffer)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_sqlite3DbMallocZero($db,28)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  _sqlite3DbFree($db,$5);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$7>>2] = $db;
 $9 = (($7) + 4|0);
 HEAP32[$9>>2] = $pMod;
 $10 = (($pTab) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_sqlite3SchemaToIndex($db,$11)|0);
 $13 = (($db) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12<<4)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = (($sCtx) + 4|0);
 HEAP32[$19>>2] = $pTab;
 HEAP32[$sCtx>>2] = $7;
 $20 = (($db) + 316|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$20>>2] = $sCtx;
 $22 = (($pMod) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($7) + 8|0);
 $25 = (FUNCTION_TABLE_iiiiiii[$xConstruct & 255]($db,$23,$3,$1,$24,$zErr)|0);
 HEAP32[$20>>2] = $21;
 do {
  if ((($25|0) == 7)) {
   $26 = (($db) + 64|0);
   HEAP8[$26>>0] = 1;
   label = 6;
  } else if ((($25|0) == 0)) {
   $32 = HEAP32[$24>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $rc$0 = 0;
   } else {
    $34 = HEAP32[$pMod>>2]|0;
    HEAP32[$32>>2] = $34;
    $35 = (($7) + 12|0);
    HEAP32[$35>>2] = 1;
    $36 = HEAP32[$19>>2]|0;
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = HEAP32[$pTab>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $38;
     $39 = (_sqlite3MPrintf($db,18152,$vararg_buffer7)|0);
     HEAP32[$pzErr>>2] = $39;
     _sqlite3VtabUnlock($7);
     $rc$0 = 1;
     break;
    }
    $40 = (($pTab) + 60|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($7) + 24|0);
    HEAP32[$42>>2] = $41;
    HEAP32[$40>>2] = $7;
    $43 = (($pTab) + 38|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = ($44<<16>>16)>(0);
    if ($45) {
     $46 = (($pTab) + 4|0);
     $98 = $44;$iCol$06 = 0;
     while(1) {
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($47) + (($iCol$06*24)|0)|0) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0|0);
      if ($50) {
       $96 = $98;
      } else {
       $51 = (_sqlite3Strlen30($49)|0);
       $52 = (_sqlite3_strnicmp(18200,$49,6)|0);
       $53 = ($52|0)==(0);
       if ($53) {
        $54 = (($49) + 6|0);
        $55 = HEAP8[$54>>0]|0;
        if ((($55<<24>>24) == 32) | (($55<<24>>24) == 0)) {
         $i$1 = 0;
        } else {
         label = 18;
        }
       } else {
        label = 18;
       }
       L22: do {
        if ((label|0) == 18) {
         label = 0;
         $56 = ($51|0)>(0);
         if ($56) {
          $i$02 = 0;
          while(1) {
           $57 = (($49) + ($i$02)|0);
           $58 = (_sqlite3_strnicmp(18208,$57,7)|0);
           $59 = ($58|0)==(0);
           if ($59) {
            $60 = (($i$02) + 7)|0;
            $61 = (($49) + ($60)|0);
            $62 = HEAP8[$61>>0]|0;
            if ((($62<<24>>24) == 32) | (($62<<24>>24) == 0)) {
             break;
            }
           }
           $64 = (($i$02) + 1)|0;
           $65 = ($64|0)<($51|0);
           if ($65) {
            $i$02 = $64;
           } else {
            $i$1 = $64;
            break L22;
           }
          }
          $63 = (($i$02) + 1)|0;
          $i$1 = $63;
         } else {
          $i$1 = 0;
         }
        }
       } while(0);
       $66 = ($i$1|0)<($51|0);
       if ($66) {
        $67 = (($i$1) + 6)|0;
        $68 = (($49) + ($67)|0);
        $69 = HEAP8[$68>>0]|0;
        $70 = ($69<<24>>24)!=(0);
        $71 = $70&1;
        $72 = $71 | 6;
        $73 = (($i$1) + ($72))|0;
        $74 = ($73|0)>($51|0);
        if (!($74)) {
         $76 = $73;$j$03 = $i$1;
         while(1) {
          $75 = (($49) + ($76)|0);
          $77 = HEAP8[$75>>0]|0;
          $78 = (($49) + ($j$03)|0);
          HEAP8[$78>>0] = $77;
          $79 = (($j$03) + 1)|0;
          $80 = (($79) + ($72))|0;
          $81 = ($80|0)>($51|0);
          if ($81) {
           break;
          } else {
           $76 = $80;$j$03 = $79;
          }
         }
        }
        $82 = (($49) + ($i$1)|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)==(0);
        $85 = ($i$1|0)>(0);
        $or$cond = $84 & $85;
        if ($or$cond) {
         $86 = (($i$1) + -1)|0;
         $87 = (($49) + ($86)|0);
         HEAP8[$87>>0] = 0;
        }
        $88 = HEAP32[$46>>2]|0;
        $89 = ((($88) + (($iCol$06*24)|0)|0) + 23|0);
        $90 = HEAP8[$89>>0]|0;
        $91 = $90&255;
        $92 = $91 | 2;
        $93 = $92&255;
        HEAP8[$89>>0] = $93;
        $$pre = HEAP16[$43>>1]|0;
        $96 = $$pre;
       } else {
        $96 = $98;
       }
      }
      $94 = (($iCol$06) + 1)|0;
      $95 = $96 << 16 >> 16;
      $97 = ($94|0)<($95|0);
      if ($97) {
       $98 = $96;$iCol$06 = $94;
      } else {
       $rc$0 = 0;
       break;
      }
     }
    } else {
     $rc$0 = 0;
    }
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $27 = HEAP32[$zErr>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   HEAP32[$vararg_buffer1>>2] = $5;
   $29 = (_sqlite3MPrintf($db,18120,$vararg_buffer1)|0);
   HEAP32[$pzErr>>2] = $29;
  } else {
   HEAP32[$vararg_buffer4>>2] = $27;
   $30 = (_sqlite3MPrintf($db,1712,$vararg_buffer4)|0);
   HEAP32[$pzErr>>2] = $30;
   $31 = HEAP32[$zErr>>2]|0;
   _sqlite3_free($31);
  }
  _sqlite3DbFree($db,$7);
  $rc$0 = $25;
 }
 _sqlite3DbFree($db,$5);
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ReadSchema($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 137|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $rc$01 = 0;
  STACKTOP = sp;return ($rc$01|0);
 }
 $4 = (($pParse) + 4|0);
 $5 = (_sqlite3Init($0,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $rc$01 = 0;
  STACKTOP = sp;return ($rc$01|0);
 }
 $7 = (($pParse) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = (($pParse) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $rc$01 = $5;
 STACKTOP = sp;return ($rc$01|0);
}
function _analyzeDatabase($pParse,$iDb) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$01 = 0, $k$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2) + ($iDb<<4)|0) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3BeginWriteOperation($pParse,0,$iDb);
 $5 = (($pParse) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 3)|0;
 HEAP32[$5>>2] = $7;
 _openStatTable($pParse,$iDb,$6,0,0);
 $8 = (($pParse) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = (($4) + 16|0);
 $k$01 = HEAP32[$12>>2]|0;
 $13 = ($k$01|0)==(0|0);
 if ($13) {
  _loadAnalysis($pParse,$iDb);
  STACKTOP = sp;return;
 } else {
  $k$02 = $k$01;
 }
 while(1) {
  $14 = (($k$02) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _analyzeOneTable($pParse,$15,0,$6,$10,$11);
  $k$0 = HEAP32[$k$02>>2]|0;
  $16 = ($k$0|0)==(0|0);
  if ($16) {
   break;
  } else {
   $k$02 = $k$0;
  }
 }
 _loadAnalysis($pParse,$iDb);
 STACKTOP = sp;return;
}
function _sqlite3FindDb($db,$pName) {
 $db = $db|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3NameFromToken($db,$pName)|0);
 $1 = (_sqlite3FindDbName($db,$0)|0);
 _sqlite3DbFree($db,$0);
 STACKTOP = sp;return ($1|0);
}
function _analyzeTable($pParse,$pTab,$pOnlyIdx) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pOnlyIdx = $pOnlyIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pTab) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3SchemaToIndex($0,$2)|0);
 _sqlite3BeginWriteOperation($pParse,0,$3);
 $4 = (($pParse) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 3)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($pOnlyIdx|0)==(0|0);
 if ($7) {
  $9 = HEAP32[$pTab>>2]|0;
  _openStatTable($pParse,$3,$5,$9,18320);
 } else {
  $8 = HEAP32[$pOnlyIdx>>2]|0;
  _openStatTable($pParse,$3,$5,$8,18312);
 }
 $10 = (($pParse) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = HEAP32[$4>>2]|0;
 _analyzeOneTable($pParse,$pTab,$pOnlyIdx,$5,$12,$13);
 _loadAnalysis($pParse,$3);
 STACKTOP = sp;return;
}
function _sqlite3TwoPartName($pParse,$pName1,$pName2,$pUnqual) {
 $pParse = $pParse|0;
 $pName1 = $pName1|0;
 $pName2 = $pName2|0;
 $pUnqual = $pUnqual|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pName2|0)==(0|0);
 if (!($1)) {
  $2 = (($pName2) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = (($0) + 137|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    _sqlite3ErrorMsg($pParse,18264,$vararg_buffer);
    $8 = (($pParse) + 68|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 1)|0;
    HEAP32[$8>>2] = $10;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$pUnqual>>2] = $pName2;
   $11 = (_sqlite3FindDb($0,$pName1)|0);
   $12 = ($11|0)<(0);
   if (!($12)) {
    $$0 = $11;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$vararg_buffer1>>2] = $pName1;
   _sqlite3ErrorMsg($pParse,18288,$vararg_buffer1);
   $13 = (($pParse) + 68|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = (($0) + 136|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 HEAP32[$pUnqual>>2] = $pName1;
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function _openStatTable($pParse,$iDb,$iStatCur,$zWhere,$zWhereType) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $iStatCur = $iStatCur|0;
 $zWhere = $zWhere|0;
 $zWhereType = $zWhereType|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aCreateTbl = 0, $aRoot = 0, $exitcond = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $aRoot = sp + 32|0;
 $aCreateTbl = sp + 44|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3GetVdbe($pParse)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($0) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($iDb<<4)|0);
 $6 = (($pParse) + 392|0);
 $7 = ($zWhere|0)==(0|0);
 $i$02 = 0;
 L4: while(1) {
  $10 = (18520 + ($i$02<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (_sqlite3FindTable($0,$11,$12)|0);
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    $15 = ($i$02|0)==(0);
    if ($15) {
     HEAP32[$vararg_buffer>>2] = $12;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $11;
     $vararg_ptr2 = (($vararg_buffer) + 8|0);
     HEAP32[$vararg_ptr2>>2] = 18560;
     _sqlite3NestedParse($pParse,18608,$vararg_buffer);
     $16 = HEAP32[$6>>2]|0;
     HEAP32[$aRoot>>2] = $16;
     HEAP8[$aCreateTbl>>0] = 2;
     $17 = (($i$02) + 1)|0;
     $i$02 = $17;
     continue L4;
    }
   } else {
    $18 = (($13) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($aRoot) + ($i$02<<2)|0);
    HEAP32[$20>>2] = $19;
    $21 = (($aCreateTbl) + ($i$02)|0);
    HEAP8[$21>>0] = 0;
    _sqlite3TableLock($pParse,$iDb,$19,1,$11);
    if ($7) {
     (_sqlite3VdbeAddOp2($1,115,$19,$iDb)|0);
     break;
    } else {
     $22 = HEAP32[$5>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $22;
     $vararg_ptr6 = (($vararg_buffer3) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $11;
     $vararg_ptr7 = (($vararg_buffer3) + 8|0);
     HEAP32[$vararg_ptr7>>2] = $zWhereType;
     $vararg_ptr8 = (($vararg_buffer3) + 12|0);
     HEAP32[$vararg_ptr8>>2] = $zWhere;
     _sqlite3NestedParse($pParse,18632,$vararg_buffer3);
     break;
    }
   }
  } while(0);
  $23 = (($i$02) + 1)|0;
  $exitcond = ($23|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $23;
  }
 }
 $8 = HEAP32[$aRoot>>2]|0;
 (_sqlite3VdbeAddOp4Int($1,53,$iStatCur,$8,$iDb,3)|0);
 $9 = HEAP8[$aCreateTbl>>0]|0;
 _sqlite3VdbeChangeP5($1,$9);
 STACKTOP = sp;return;
}
function _analyzeOneTable($pParse,$pTab,$pOnlyIdx,$iStatCur,$iMem,$iTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pOnlyIdx = $pOnlyIdx|0;
 $iStatCur = $iStatCur|0;
 $iMem = $iMem|0;
 $iTab = $iTab|0;
 var $$ = 0, $$1 = 0, $$3 = 0, $$idx = 0, $$idx$val = 0, $$needTableCnt$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i$05 = 0, $i$16 = 0, $needTableCnt$0$lcssa = 0;
 var $needTableCnt$011 = 0, $needTableCnt$2 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $pIdx$0 = 0, $pIdx$010 = 0, $pIdx$012 = 0, $zIdxName$0 = 0, $zIdxName$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($iMem) + 1)|0;
 $2 = (($iMem) + 2)|0;
 $3 = (($iMem) + 3)|0;
 $4 = (($iMem) + 4)|0;
 $5 = (($iMem) + 5)|0;
 $6 = (($iMem) + 6)|0;
 $7 = (($iMem) + 7)|0;
 $8 = (($pParse) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>($7|0);
 $$ = $10 ? $9 : $7;
 HEAP32[$8>>2] = $$;
 $11 = (_sqlite3GetVdbe($pParse)|0);
 $12 = ($11|0)==(0|0);
 $13 = ($pTab|0)==(0|0);
 $or$cond = $12 | $13;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $14 = (($pTab) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$pTab>>2]|0;
 $18 = (_sqlite3_strnicmp($17,15296,7)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = (($pTab) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_sqlite3SchemaToIndex($0,$21)|0);
 $23 = (($0) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<4)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (_sqlite3AuthCheck($pParse,28,$17,0,$26)|0);
 $28 = ($27|0)==(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$14>>2]|0;
 $30 = HEAP32[$pTab>>2]|0;
 _sqlite3TableLock($pParse,$22,$29,0,$30);
 $31 = (($iTab) + 1)|0;
 $32 = (($iTab) + 2)|0;
 $33 = (($pParse) + 72|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>($32|0);
 $$1 = $35 ? $34 : $32;
 HEAP32[$33>>2] = $$1;
 _sqlite3OpenTable($pParse,$iTab,$22,$pTab,52);
 $36 = HEAP32[$pTab>>2]|0;
 (_sqlite3VdbeAddOp4($11,97,0,$4,0,$36,0)|0);
 $37 = (($pTab) + 8|0);
 $pIdx$010 = HEAP32[$37>>2]|0;
 $38 = ($pIdx$010|0)==(0|0);
 $39 = ($pOnlyIdx|0)==(0|0);
 if ($38) {
  $needTableCnt$0$lcssa = 1;
 } else {
  $40 = (($pTab) + 44|0);
  $$idx = (($11) + 32|0);
  $needTableCnt$011 = 1;$pIdx$012 = $pIdx$010;
  while(1) {
   $41 = ($pIdx$012|0)==($pOnlyIdx|0);
   $or$cond2 = $39 | $41;
   if ($or$cond2) {
    $42 = (($pIdx$012) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0|0);
    $$needTableCnt$0 = $44 ? 0 : $needTableCnt$011;
    $45 = (($pIdx$012) + 50|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = (($47) + 1)|0;
    $49 = $48 << 2;
    $50 = (_sqlite3DbMallocRaw($0,$49)|0);
    $51 = ($50|0)==(0|0);
    if ($51) {
     $needTableCnt$2 = $$needTableCnt$0;
    } else {
     $52 = (($pIdx$012) + 55|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 & 3;
     $55 = ($54<<24>>24)==(2);
     if ($55) {
      $56 = HEAP8[$40>>0]|0;
      $57 = $56 & 32;
      $58 = ($57<<24>>24)==(0);
      if ($58) {
       label = 11;
      } else {
       $zIdxName$0$in = $pTab;
      }
     } else {
      label = 11;
     }
     if ((label|0) == 11) {
      label = 0;
      $zIdxName$0$in = $pIdx$012;
     }
     $zIdxName$0 = HEAP32[$zIdxName$0$in>>2]|0;
     (_sqlite3VdbeAddOp4($11,97,0,$5,0,$zIdxName$0,0)|0);
     $59 = HEAP32[$8>>2]|0;
     $60 = (($47) + ($7))|0;
     $61 = ($59|0)>($60|0);
     $$3 = $61 ? $59 : $60;
     HEAP32[$8>>2] = $$3;
     $62 = (($pIdx$012) + 44|0);
     $63 = HEAP32[$62>>2]|0;
     (_sqlite3VdbeAddOp3($11,52,$31,$63,$22)|0);
     _sqlite3VdbeSetP4KeyInfo($pParse,$pIdx$012);
     (_sqlite3VdbeAddOp2($11,25,$48,$2)|0);
     (_sqlite3VdbeAddOp3($11,1,0,$2,$1)|0);
     _sqlite3VdbeChangeP4($11,-1,18328,-5);
     _sqlite3VdbeChangeP5($11,1);
     $64 = (_sqlite3VdbeAddOp1($11,105,$31)|0);
     (_sqlite3VdbeAddOp2($11,25,0,$2)|0);
     $65 = (_sqlite3VdbeAddOp0($11,16)|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $66 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
     $67 = ($46<<16>>16)==(0);
     if (!($67)) {
      $68 = (($pIdx$012) + 32|0);
      $i$05 = 0;
      while(1) {
       $69 = HEAP32[$68>>2]|0;
       $70 = (($69) + ($i$05<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (_sqlite3LocateCollSeq($pParse,$71)|0);
       (_sqlite3VdbeAddOp2($11,25,$i$05,$2)|0);
       (_sqlite3VdbeAddOp3($11,46,$31,$i$05,$3)|0);
       $73 = (($i$05) + ($7))|0;
       $74 = (_sqlite3VdbeAddOp4($11,78,$3,0,$73,$72,-4)|0);
       $75 = (($50) + ($i$05<<2)|0);
       HEAP32[$75>>2] = $74;
       _sqlite3VdbeChangeP5($11,-128);
       $76 = (($i$05) + 1)|0;
       $77 = ($76|0)<($47|0);
       if ($77) {
        $i$05 = $76;
       } else {
        break;
       }
      }
     }
     (_sqlite3VdbeAddOp2($11,25,$47,$2)|0);
     $78 = (_sqlite3VdbeAddOp0($11,16)|0);
     $79 = (($50) + ($47<<2)|0);
     HEAP32[$79>>2] = $78;
     _sqlite3VdbeJumpHere($11,$65);
     if (!($67)) {
      $i$16 = 0;
      while(1) {
       $80 = (($50) + ($i$16<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       _sqlite3VdbeJumpHere($11,$81);
       $82 = (($i$16) + ($7))|0;
       (_sqlite3VdbeAddOp3($11,46,$31,$i$16,$82)|0);
       $83 = (($i$16) + 1)|0;
       $84 = ($83|0)<($47|0);
       if ($84) {
        $i$16 = $83;
       } else {
        break;
       }
      }
     }
     $85 = HEAP32[$79>>2]|0;
     _sqlite3VdbeJumpHere($11,$85);
     (_sqlite3VdbeAddOp3($11,1,1,$1,$3)|0);
     _sqlite3VdbeChangeP4($11,-1,18368,-5);
     _sqlite3VdbeChangeP5($11,2);
     (_sqlite3VdbeAddOp2($11,9,$31,$66)|0);
     _callStatGet($11,$1,$6);
     (_sqlite3VdbeAddOp4($11,48,$4,3,$3,18408,0)|0);
     (_sqlite3VdbeAddOp2($11,69,$iStatCur,$iMem)|0);
     (_sqlite3VdbeAddOp3($11,70,$iStatCur,$3,$iMem)|0);
     _sqlite3VdbeChangeP5($11,8);
     _sqlite3VdbeJumpHere($11,$64);
     _sqlite3DbFree($0,$50);
     $needTableCnt$2 = $$needTableCnt$0;
    }
   } else {
    $needTableCnt$2 = $needTableCnt$011;
   }
   $86 = (($pIdx$012) + 20|0);
   $pIdx$0 = HEAP32[$86>>2]|0;
   $87 = ($pIdx$0|0)==(0|0);
   if ($87) {
    $needTableCnt$0$lcssa = $needTableCnt$2;
    break;
   } else {
    $needTableCnt$011 = $needTableCnt$2;$pIdx$012 = $pIdx$0;
   }
  }
 }
 $$not = $39 ^ 1;
 $88 = ($needTableCnt$0$lcssa<<24>>24)==(0);
 $or$cond4 = $88 | $$not;
 if ($or$cond4) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($11,49,$iTab,$6)|0);
 $89 = (_sqlite3VdbeAddOp1($11,45,$6)|0);
 (_sqlite3VdbeAddOp2($11,28,0,$5)|0);
 (_sqlite3VdbeAddOp4($11,48,$4,3,$3,18408,0)|0);
 (_sqlite3VdbeAddOp2($11,69,$iStatCur,$iMem)|0);
 (_sqlite3VdbeAddOp3($11,70,$iStatCur,$3,$iMem)|0);
 _sqlite3VdbeChangeP5($11,8);
 _sqlite3VdbeJumpHere($11,$89);
 STACKTOP = sp;return;
}
function _loadAnalysis($pParse,$iDb) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp1($0,119,$iDb)|0);
 STACKTOP = sp;return;
}
function _sqlite3VdbeAddOp1($p,$op,$p1) {
 $p = $p|0;
 $op = $op|0;
 $p1 = $p1|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeAddOp3($p,$op,$p1,0,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3TableLock($pParse,$iDb,$iTab,$isWriteLock,$zName) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $iTab = $iTab|0;
 $isWriteLock = $isWriteLock|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $pParse$ = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = (($pParse$) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 $6 = (($pParse$) + 404|0);
 $7 = HEAP32[$6>>2]|0;
 L1: do {
  if ($5) {
   $i$06 = 0;
   while(1) {
    $8 = (($7) + ($i$06<<4)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==($iDb|0);
    if ($10) {
     $11 = ((($7) + ($i$06<<4)|0) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==($iTab|0);
     if ($13) {
      break;
     }
    }
    $19 = (($i$06) + 1)|0;
    $20 = ($19|0)<($4|0);
    if ($20) {
     $i$06 = $19;
    } else {
     break L1;
    }
   }
   $14 = ((($7) + ($i$06<<4)|0) + 8|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $17 = ($isWriteLock<<24>>24)!=(0);
    $phitmp = $17&1;
    $18 = $phitmp;
   } else {
    $18 = 1;
   }
   HEAP8[$14>>0] = $18;
   STACKTOP = sp;return;
  }
 } while(0);
 $21 = $4 << 4;
 $22 = (($21) + 16)|0;
 $23 = HEAP32[$pParse$>>2]|0;
 $24 = (($pParse$) + 404|0);
 $25 = (_sqlite3DbReallocOrFree($23,$7,$22)|0);
 HEAP32[$24>>2] = $25;
 $26 = ($25|0)==(0|0);
 if ($26) {
  HEAP32[$3>>2] = 0;
  $33 = HEAP32[$pParse$>>2]|0;
  $34 = (($33) + 64|0);
  HEAP8[$34>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $27 = HEAP32[$3>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$3>>2] = $28;
  $29 = (($25) + ($27<<4)|0);
  HEAP32[$29>>2] = $iDb;
  $30 = ((($25) + ($27<<4)|0) + 4|0);
  HEAP32[$30>>2] = $iTab;
  $31 = ((($25) + ($27<<4)|0) + 8|0);
  HEAP8[$31>>0] = $isWriteLock;
  $32 = ((($25) + ($27<<4)|0) + 12|0);
  HEAP32[$32>>2] = $zName;
  STACKTOP = sp;return;
 }
}
function _sqlite3OpenTable($pParse,$iCur,$iDb,$pTab,$opcode) {
 $pParse = $pParse|0;
 $iCur = $iCur|0;
 $iDb = $iDb|0;
 $pTab = $pTab|0;
 $opcode = $opcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (($pTab) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($opcode|0)==(53);
 $4 = $3&1;
 $5 = HEAP32[$pTab>>2]|0;
 _sqlite3TableLock($pParse,$iDb,$2,$4,$5);
 $6 = (($pTab) + 44|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 32;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($pTab) + 38|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  (_sqlite3VdbeAddOp4Int($0,$opcode,$iCur,$10,$iDb,$13)|0);
  STACKTOP = sp;return;
 } else {
  $14 = (_sqlite3PrimaryKeyIndex($pTab)|0);
  $15 = (($14) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  (_sqlite3VdbeAddOp3($0,$opcode,$iCur,$16,$iDb)|0);
  _sqlite3VdbeSetP4KeyInfo($pParse,$14);
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeSetP4KeyInfo($pParse,$pIdx) {
 $pParse = $pParse|0;
 $pIdx = $pIdx|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3KeyInfoOfIndex($pParse,$pIdx)|0);
 _sqlite3VdbeChangeP4($1,-1,$2,-6);
 STACKTOP = sp;return;
}
function _sqlite3VdbeCurrentAddr($p$0$8$val) {
 $p$0$8$val = $p$0$8$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($p$0$8$val|0);
}
function _sqlite3LocateCollSeq($pParse,$zName) {
 $pParse = $pParse|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pColl$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 77|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($0) + 137|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (_sqlite3FindCollSeq($0,$6,$zName,$9)|0);
 $11 = ($8<<24>>24)==(0);
 if (!($11)) {
  $pColl$0 = $10;
  STACKTOP = sp;return ($pColl$0|0);
 }
 $12 = ($10|0)==(0|0);
 if (!($12)) {
  $13 = (($10) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $pColl$0 = $10;
   STACKTOP = sp;return ($pColl$0|0);
  }
 }
 $16 = (_sqlite3GetCollSeq($pParse,$6,$10,$zName)|0);
 $pColl$0 = $16;
 STACKTOP = sp;return ($pColl$0|0);
}
function _callStatGet($v,$regStat4,$regOut) {
 $v = $v|0;
 $regStat4 = $regStat4|0;
 $regOut = $regOut|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_sqlite3VdbeAddOp3($v,1,0,$regStat4,$regOut)|0);
 _sqlite3VdbeChangeP4($v,-1,18416,-5);
 _sqlite3VdbeChangeP5($v,1);
 STACKTOP = sp;return;
}
function _statGet($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $z$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_blob($0)|0);
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*25)|0;
 $5 = (_sqlite3MallocZero($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _sqlite3_result_error_nomem($context);
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = $vararg_buffer;
 $9 = $8;
 HEAP32[$9>>2] = $7;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 (_sqlite3_snprintf(24,$5,18472,$vararg_buffer)|0);
 $12 = HEAP32[$2>>2]|0;
 $13 = (($12) + -1)|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = (_sqlite3Strlen30($5)|0);
  $16 = (($5) + ($15)|0);
  $17 = (($1) + 20|0);
  $i$01 = 0;$z$02 = $16;
  while(1) {
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + ($i$01<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 1)|0;
   $22 = HEAP32[$1>>2]|0;
   $23 = (_i64Add(($21|0),0,-1,-1)|0);
   $24 = tempRet0;
   $25 = (_i64Add(($23|0),($24|0),($22|0),0)|0);
   $26 = tempRet0;
   $27 = (___udivdi3(($25|0),($26|0),($21|0),0)|0);
   $28 = tempRet0;
   $29 = $vararg_buffer1;
   $30 = $29;
   HEAP32[$30>>2] = $27;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $28;
   (_sqlite3_snprintf(24,$z$02,18480,$vararg_buffer1)|0);
   $33 = (_sqlite3Strlen30($z$02)|0);
   $34 = (($z$02) + ($33)|0);
   $35 = (($i$01) + 1)|0;
   $36 = HEAP32[$2>>2]|0;
   $37 = (($36) + -1)|0;
   $38 = ($35|0)<($37|0);
   if ($38) {
    $i$01 = $35;$z$02 = $34;
   } else {
    break;
   }
  }
 }
 _sqlite3_result_text($context,$5,-1,156);
 STACKTOP = sp;return;
}
function _statPush($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$01 = 0, $i$17 = 0, $i$24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_blob($0)|0);
 $2 = (($argv) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3_value_int($3)|0);
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = (($1) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = (($1) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $i$01 = 0;
   while(1) {
    $15 = (($14) + ($i$01<<2)|0);
    HEAP32[$15>>2] = 1;
    $16 = (($i$01) + 1)|0;
    $17 = HEAP32[$10>>2]|0;
    $18 = ($16|0)<($17|0);
    if ($18) {
     $i$01 = $16;
    } else {
     break;
    }
   }
  }
 } else {
  $7 = ($4|0)>(0);
  if ($7) {
   $8 = (($1) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $i$17 = 0;
   while(1) {
    $26 = (($9) + ($i$17<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$26>>2] = $28;
    $29 = (($i$17) + 1)|0;
    $exitcond = ($29|0)==($4|0);
    if ($exitcond) {
     break;
    } else {
     $i$17 = $29;
    }
   }
  }
  $19 = (($1) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($4|0)<($20|0);
  if ($21) {
   $22 = (($1) + 16|0);
   $23 = (($1) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$22>>2]|0;
   $i$24 = $4;
   while(1) {
    $30 = (($24) + ($i$24<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = (($25) + ($i$24<<2)|0);
    HEAP32[$33>>2] = 1;
    $34 = (($i$24) + 1)|0;
    $35 = HEAP32[$19>>2]|0;
    $36 = ($34|0)<($35|0);
    if ($36) {
     $i$24 = $34;
    } else {
     break;
    }
   }
  }
 }
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$1>>2] = $38;
 STACKTOP = sp;return;
}
function _statInit($context,$argc,$argv) {
 $context = $context|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $factor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_int($0)|0);
 $2 = (($1) + 1)|0;
 $3 = $2 & -2;
 $factor = $3 << 3;
 $4 = (($factor) + 52)|0;
 $5 = (_sqlite3_context_db_handle($context)|0);
 $6 = (_sqlite3DbMallocZero($5,$4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _sqlite3_result_error_nomem($context);
  STACKTOP = sp;return;
 } else {
  $8 = (($6) + 48|0);
  HEAP32[$8>>2] = $5;
  HEAP32[$6>>2] = 0;
  $9 = (($6) + 8|0);
  HEAP32[$9>>2] = $1;
  $10 = (($6) + 52|0);
  $11 = (($6) + 16|0);
  $12 = (($6) + 20|0);
  HEAP32[$12>>2] = $10;
  $13 = (($10) + ($3<<2)|0);
  HEAP32[$11>>2] = $13;
  _sqlite3_result_blob($context,$6,4,166);
  STACKTOP = sp;return;
 }
}
function _stat4Destructor($pOld) {
 $pOld = $pOld|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pOld) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3DbFree($1,$pOld);
 STACKTOP = sp;return;
}
function _sqlite3KeyInfoOfIndex($pParse,$pIdx) {
 $pParse = $pParse|0;
 $pIdx = $pIdx|0;
 var $$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pKey$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pIdx) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$pre$phiZ2D = $pParse;
  label = 6;
 } else {
  $6 = (($4) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$pParse>>2]|0;
  $9 = ($7|0)==($8|0);
  if (!($9)) {
   _sqlite3KeyInfoUnref($4);
   HEAP32[$3>>2] = 0;
   $$pre$phiZ2D = $pParse;
   label = 6;
  }
 }
 do {
  if ((label|0) == 6) {
   $10 = (($pIdx) + 52|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($pIdx) + 50|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = (($pIdx) + 55|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 & 8;
   $19 = ($18<<24>>24)==(0);
   $20 = HEAP32[$$pre$phiZ2D>>2]|0;
   if ($19) {
    $23 = (_sqlite3KeyInfoAlloc($20,$12,0)|0);
    $pKey$0 = $23;
   } else {
    $21 = (($12) - ($15))|0;
    $22 = (_sqlite3KeyInfoAlloc($20,$15,$21)|0);
    $pKey$0 = $22;
   }
   $24 = ($pKey$0|0)==(0|0);
   if (!($24)) {
    $25 = ($11<<16>>16)==(0);
    if (!($25)) {
     $26 = (($pIdx) + 32|0);
     $27 = (($pIdx) + 28|0);
     $28 = (($pKey$0) + 16|0);
     $i$01 = 0;
     while(1) {
      $29 = HEAP32[$26>>2]|0;
      $30 = (($29) + ($i$01<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (_strcmp($31,3592)|0);
      $33 = ($32|0)==(0);
      if ($33) {
       $36 = 0;
      } else {
       $34 = (_sqlite3LocateCollSeq($pParse,$31)|0);
       $36 = $34;
      }
      $35 = ((($pKey$0) + ($i$01<<2)|0) + 20|0);
      HEAP32[$35>>2] = $36;
      $37 = HEAP32[$27>>2]|0;
      $38 = (($37) + ($i$01)|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = HEAP32[$28>>2]|0;
      $41 = (($40) + ($i$01)|0);
      HEAP8[$41>>0] = $39;
      $42 = (($i$01) + 1)|0;
      $43 = ($42|0)<($12|0);
      if ($43) {
       $i$01 = $42;
      } else {
       break;
      }
     }
    }
    $44 = HEAP32[$0>>2]|0;
    $45 = ($44|0)==(0);
    if ($45) {
     HEAP32[$3>>2] = $pKey$0;
     break;
    } else {
     _sqlite3KeyInfoUnref($pKey$0);
     break;
    }
   }
  }
 } while(0);
 $46 = HEAP32[$3>>2]|0;
 $47 = (_sqlite3KeyInfoRef($46)|0);
 $$0 = $47;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3KeyInfoAlloc($db,$N,$X) {
 $db = $db|0;
 $N = $N|0;
 $X = $X|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($X) + ($N))|0;
 $1 = ($0*5)|0;
 $2 = (($1) + 24)|0;
 $3 = (_sqlite3DbMallocZero(0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $20 = (($db) + 64|0);
  HEAP8[$20>>0] = 1;
  STACKTOP = sp;return ($3|0);
 } else {
  $5 = (($3) + 20|0);
  $6 = (($5) + ($0<<2)|0);
  $7 = (($3) + 16|0);
  HEAP32[$7>>2] = $6;
  $8 = $N&65535;
  $9 = (($3) + 6|0);
  HEAP16[$9>>1] = $8;
  $10 = $X&65535;
  $11 = (($3) + 8|0);
  HEAP16[$11>>1] = $10;
  $12 = (($db) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 77|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (($3) + 4|0);
  HEAP8[$18>>0] = $17;
  $19 = (($3) + 12|0);
  HEAP32[$19>>2] = $db;
  HEAP32[$3>>2] = 1;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function _sqlite3KeyInfoRef($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$p>>2]|0;
  $2 = (($1) + 1)|0;
  HEAP32[$p>>2] = $2;
 }
 STACKTOP = sp;return ($p|0);
}
function _sqlite3PrimaryKeyIndex($pTab) {
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p$0 = 0, $p$0$lcssa = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 8|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 L1: do {
  if ($1) {
   $p$0$lcssa = 0;
  } else {
   $p$02 = $p$01;
   while(1) {
    $4 = (($p$02) + 55|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = $5 & 3;
    $7 = ($6<<24>>24)==(2);
    if ($7) {
     $p$0$lcssa = $p$02;
     break L1;
    }
    $2 = (($p$02) + 20|0);
    $p$0 = HEAP32[$2>>2]|0;
    $3 = ($p$0|0)==(0|0);
    if ($3) {
     $p$0$lcssa = 0;
     break;
    } else {
     $p$02 = $p$0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($p$0$lcssa|0);
}
function _sqlite3DbReallocOrFree($db,$p,$n) {
 $db = $db|0;
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3DbRealloc($db,$p,$n)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _sqlite3DbFree($db,$p);
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3Init($db,$pzErrMsg) {
 $db = $db|0;
 $pzErrMsg = $pzErrMsg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$09 = 0, $or$cond = 0, $rc$2$ph = 0, $rc$26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2;
 $3 = (($db) + 137|0);
 HEAP8[$3>>0] = 1;
 $4 = (($db) + 20|0);
 $5 = (($db) + 16|0);
 $i$09 = 0;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = ($i$09|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = HEAP32[$5>>2]|0;
  $9 = ((($8) + ($i$09<<4)|0) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 78|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 & 1;
  $14 = ($13<<16>>16)!=(0);
  $15 = ($i$09|0)==(1);
  $or$cond = $14 | $15;
  if (!($or$cond)) {
   $16 = (_sqlite3InitOne($db,$i$09,$pzErrMsg)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    label = 10;
    break;
   }
  }
  $18 = (($i$09) + 1)|0;
  $i$09 = $18;
 }
 do {
  if ((label|0) == 6) {
   $19 = ($6|0)>(1);
   if ($19) {
    $20 = HEAP32[$5>>2]|0;
    $21 = (($20) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 78|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24 & 1;
    $26 = ($25<<16>>16)==(0);
    if ($26) {
     $27 = (_sqlite3InitOne($db,1,$pzErrMsg)|0);
     $28 = ($27|0)==(0);
     if (!($28)) {
      _sqlite3ResetOneSchema($db,1);
      $rc$2$ph = $27;
      break;
     }
    }
   }
   HEAP8[$3>>0] = 0;
   $29 = ($2|0)==(0);
   if (!($29)) {
    $rc$26 = 0;
    STACKTOP = sp;return ($rc$26|0);
   }
   _sqlite3CommitInternalChanges($db);
   $rc$26 = 0;
   STACKTOP = sp;return ($rc$26|0);
  }
  else if ((label|0) == 10) {
   _sqlite3ResetOneSchema($db,$i$09);
   $rc$2$ph = $16;
  }
 } while(0);
 HEAP8[$3>>0] = 0;
 $rc$26 = $rc$2$ph;
 STACKTOP = sp;return ($rc$26|0);
}
function _sqlite3InitOne($db,$iDb,$pzErrMsg) {
 $db = $db|0;
 $iDb = $iDb|0;
 $pzErrMsg = $pzErrMsg|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$3 = 0, $$4 = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx5 = 0, $$idx5$val = 0, $$idx6$val = 0, $$idx6$val$1 = 0, $$idx6$val$2 = 0, $$idx6$val$3 = 0, $$idx6$val$4 = 0, $$idx7 = 0, $$idx7$1 = 0, $$idx7$2 = 0, $$idx7$3 = 0, $$idx7$4 = 0;
 var $$idx7$val = 0, $$idx7$val$1 = 0, $$idx7$val$2 = 0, $$idx7$val$3 = 0, $$idx7$val$4 = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9$val = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $azArg = 0, $initData = 0, $meta = 0, $openedTransaction$0 = 0, $or$cond = 0, $rc$111 = 0, $rc$2 = 0, $rc$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $azArg = sp + 72|0;
 $meta = sp + 48|0;
 $initData = sp + 32|0;
 $0 = ($iDb|0)==(1);
 $$3 = $0 ? 18768 : 18664;
 $1 = $0 ? 15056 : 15080;
 HEAP32[$azArg>>2] = $1;
 $2 = (($azArg) + 4|0);
 HEAP32[$2>>2] = 18888;
 $3 = (($azArg) + 8|0);
 HEAP32[$3>>2] = $$3;
 $4 = (($azArg) + 12|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$initData>>2] = $db;
 $5 = (($initData) + 8|0);
 HEAP32[$5>>2] = $iDb;
 $6 = (($initData) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = (($initData) + 4|0);
 HEAP32[$7>>2] = $pzErrMsg;
 (_sqlite3InitCallback($initData,3,$azArg,0)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   $10 = (($db) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($iDb<<4)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_sqlite3FindTable($db,$1,$13)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $22 = $11;
   } else {
    $16 = (($14) + 44|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $18 | 1;
    $20 = $19&255;
    HEAP8[$16>>0] = $20;
    $$pre = HEAP32[$10>>2]|0;
    $22 = $$pre;
   }
   $21 = ((($22) + ($iDb<<4)|0) + 4|0);
   $23 = HEAP32[$21>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    if (!($0)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $25 = (($22) + 28|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 78|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = $29 | 1;
    $31 = $30&65535;
    HEAP16[$27>>1] = $31;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $$idx$val = HEAP32[$23>>2]|0;
   $$idx5 = (($23) + 4|0);
   $$idx5$val = HEAP32[$$idx5>>2]|0;
   _sqlite3BtreeEnter($$idx$val,$$idx5$val);
   $32 = HEAP32[$21>>2]|0;
   $$idx8 = (($32) + 8|0);
   $$idx8$val = HEAP8[$$idx8>>0]|0;
   $33 = (_sqlite3BtreeIsInReadTrans($$idx8$val)|0);
   $34 = ($33|0)==(0);
   do {
    if ($34) {
     $35 = (_sqlite3BtreeBeginTrans($32,0)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $$pre19 = HEAP32[$21>>2]|0;
      $38 = $$pre19;$openedTransaction$0 = 1;
      break;
     } else {
      $37 = (_sqlite3ErrStr($35)|0);
      HEAP32[$vararg_buffer>>2] = $37;
      _sqlite3SetString($pzErrMsg,$db,1712,$vararg_buffer);
      $rc$3 = $35;
      break L1;
     }
    } else {
     $38 = $32;$openedTransaction$0 = 0;
    }
   } while(0);
   $$idx6$val = HEAP32[$38>>2]|0;
   $$idx7 = (($38) + 4|0);
   $$idx7$val = HEAP32[$$idx7>>2]|0;
   _sqlite3BtreeGetMeta($$idx6$val,$$idx7$val,1,$meta);
   $39 = HEAP32[$21>>2]|0;
   $40 = (($meta) + 4|0);
   $$idx6$val$1 = HEAP32[$39>>2]|0;
   $$idx7$1 = (($39) + 4|0);
   $$idx7$val$1 = HEAP32[$$idx7$1>>2]|0;
   _sqlite3BtreeGetMeta($$idx6$val$1,$$idx7$val$1,2,$40);
   $41 = HEAP32[$21>>2]|0;
   $42 = (($meta) + 8|0);
   $$idx6$val$2 = HEAP32[$41>>2]|0;
   $$idx7$2 = (($41) + 4|0);
   $$idx7$val$2 = HEAP32[$$idx7$2>>2]|0;
   _sqlite3BtreeGetMeta($$idx6$val$2,$$idx7$val$2,3,$42);
   $43 = HEAP32[$21>>2]|0;
   $44 = (($meta) + 12|0);
   $$idx6$val$3 = HEAP32[$43>>2]|0;
   $$idx7$3 = (($43) + 4|0);
   $$idx7$val$3 = HEAP32[$$idx7$3>>2]|0;
   _sqlite3BtreeGetMeta($$idx6$val$3,$$idx7$val$3,4,$44);
   $45 = HEAP32[$21>>2]|0;
   $46 = (($meta) + 16|0);
   $$idx6$val$4 = HEAP32[$45>>2]|0;
   $$idx7$4 = (($45) + 4|0);
   $$idx7$val$4 = HEAP32[$$idx7$4>>2]|0;
   _sqlite3BtreeGetMeta($$idx6$val$4,$$idx7$val$4,5,$46);
   $47 = HEAP32[$meta>>2]|0;
   $48 = ((($22) + ($iDb<<4)|0) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$49>>2] = $47;
   $50 = HEAP32[$46>>2]|0;
   $51 = ($50|0)==(0);
   do {
    if ($51) {
     $67 = HEAP32[$10>>2]|0;
     $68 = ((($67) + ($iDb<<4)|0) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + 78|0);
     $71 = HEAP16[$70>>1]|0;
     $72 = $71&65535;
     $73 = $72 | 4;
     $74 = $73&65535;
     HEAP16[$70>>1] = $74;
     $76 = $67;$81 = $49;
     label = 17;
    } else {
     $52 = ($iDb|0)==(0);
     if ($52) {
      $53 = $50 & 3;
      $54 = $53&255;
      $55 = ($53|0)==(0);
      $$ = $55 ? 1 : $54;
      $56 = HEAP32[$10>>2]|0;
      $57 = (($56) + 12|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + 77|0);
      HEAP8[$59>>0] = $$;
      $$pre14 = HEAP32[$10>>2]|0;
      $$pre15 = HEAP32[$48>>2]|0;
      $76 = $$pre14;$81 = $$pre15;
      label = 17;
      break;
     }
     $60 = HEAP32[$10>>2]|0;
     $61 = (($60) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + 77|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = ($50|0)==($65|0);
     if ($66) {
      $76 = $60;$81 = $49;
      label = 17;
     } else {
      _sqlite3SetString($pzErrMsg,$db,18896,$vararg_buffer1);
      $rc$2 = 1;
     }
    }
   } while(0);
   do {
    if ((label|0) == 17) {
     $75 = (($76) + 12|0);
     $77 = HEAP32[$75>>2]|0;
     $78 = (($77) + 77|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = (($81) + 77|0);
     HEAP8[$80>>0] = $79;
     $82 = HEAP32[$48>>2]|0;
     $83 = (($82) + 80|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0);
     if ($85) {
      $86 = HEAP32[$42>>2]|0;
      $87 = (_sqlite3AbsInt32($86)|0);
      $88 = ($87|0)==(0);
      $$1 = $88 ? 2000 : $87;
      HEAP32[$83>>2] = $$1;
      $89 = HEAP32[$21>>2]|0;
      $$idx9$val = HEAP32[$89>>2]|0;
      $$idx10 = (($89) + 4|0);
      $$idx10$val = HEAP32[$$idx10>>2]|0;
      _sqlite3BtreeSetCacheSize($$idx9$val,$$idx10$val,$$1);
      $$pre16 = HEAP32[$48>>2]|0;
      $93 = $$pre16;
     } else {
      $93 = $82;
     }
     $90 = HEAP32[$40>>2]|0;
     $91 = $90&255;
     $92 = (($93) + 76|0);
     HEAP8[$92>>0] = $91;
     $94 = HEAP32[$48>>2]|0;
     $95 = (($94) + 76|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = ($96<<24>>24)==(0);
     if ($97) {
      HEAP8[$95>>0] = 1;
      $$pre17 = HEAP32[$48>>2]|0;
      $$phi$trans$insert = (($$pre17) + 76|0);
      $$pre18 = HEAP8[$$phi$trans$insert>>0]|0;
      $99 = $$pre18;
     } else {
      $99 = $96;
     }
     $98 = ($99&255)>(4);
     if ($98) {
      _sqlite3SetString($pzErrMsg,$db,18968,$vararg_buffer3);
      $rc$2 = 1;
      break;
     }
     $100 = ($iDb|0)==(0);
     $101 = ($90|0)>(3);
     $or$cond = $100 & $101;
     if ($or$cond) {
      $102 = (($db) + 24|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = $103 & -32769;
      HEAP32[$102>>2] = $104;
     }
     $105 = HEAP32[$10>>2]|0;
     $106 = (($105) + ($iDb<<4)|0);
     $107 = HEAP32[$106>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $107;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $1;
     $108 = (_sqlite3MPrintf($db,18992,$vararg_buffer5)|0);
     $109 = (($db) + 276|0);
     $110 = HEAP32[$109>>2]|0;
     HEAP32[$109>>2] = 0;
     $111 = (_sqlite3_exec($db,$108,167,$initData,0)|0);
     HEAP32[$109>>2] = $110;
     $112 = ($111|0)==(0);
     $113 = HEAP32[$6>>2]|0;
     $$4 = $112 ? $113 : $111;
     _sqlite3DbFree($db,$108);
     $114 = ($$4|0)==(0);
     if ($114) {
      (_sqlite3AnalysisLoad($db,$iDb)|0);
     }
     $115 = (($db) + 64|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = ($116<<24>>24)==(0);
     if ($117) {
      if (!($114)) {
       $rc$111 = $$4;
       label = 30;
      }
     } else {
      _sqlite3ResetAllSchemasOfConnection($db);
      $rc$111 = 7;
      label = 30;
     }
     if ((label|0) == 30) {
      $118 = (($db) + 24|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = $119 & 65536;
      $121 = ($120|0)==(0);
      if ($121) {
       $rc$2 = $rc$111;
       break;
      }
     }
     $122 = HEAP32[$10>>2]|0;
     $123 = ((($122) + ($iDb<<4)|0) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) + 78|0);
     $126 = HEAP16[$125>>1]|0;
     $127 = $126&65535;
     $128 = $127 | 1;
     $129 = $128&65535;
     HEAP16[$125>>1] = $129;
     $rc$2 = 0;
    }
   } while(0);
   $130 = ($openedTransaction$0|0)==(0);
   if ($130) {
    $rc$3 = $rc$2;
   } else {
    $131 = HEAP32[$21>>2]|0;
    (_sqlite3BtreeCommit($131)|0);
    $rc$3 = $rc$2;
   }
  } else {
   $rc$3 = $8;
  }
 } while(0);
 if (!((($rc$3|0) == 7) | (($rc$3|0) == 3082))) {
  $$0 = $rc$3;
  STACKTOP = sp;return ($$0|0);
 }
 $132 = (($db) + 64|0);
 HEAP8[$132>>0] = 1;
 $$0 = $rc$3;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ResetOneSchema($db,$iDb) {
 $db = $db|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iDb<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 _sqlite3SchemaClear($3);
 $4 = ($iDb|0)==(1);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 _sqlite3SchemaClear($7);
 STACKTOP = sp;return;
}
function _sqlite3CommitInternalChanges($db) {
 $db = $db|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -3;
 HEAP32[$0>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3InitCallback($pInit,$argc,$argv,$NotUsed) {
 $pInit = $pInit|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $NotUsed = $NotUsed|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pStmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pStmt = sp;
 $0 = HEAP32[$pInit>>2]|0;
 $1 = (($pInit) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4) + ($2<<4)|0) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 78|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 & 65531;
 $11 = $10&65535;
 HEAP16[$7>>1] = $11;
 $12 = (($0) + 64|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  $15 = HEAP32[$argv>>2]|0;
  _corruptSchema($pInit,$15,0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ($argv|0)==(0|0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($argv) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[$argv>>2]|0;
  _corruptSchema($pInit,$20,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($argv) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = HEAP8[$22>>0]|0;
  $25 = ($24<<24>>24)==(0);
  if (!($25)) {
   $26 = $2&255;
   $27 = (($0) + 136|0);
   HEAP8[$27>>0] = $26;
   $28 = HEAP32[$17>>2]|0;
   $29 = (_sqlite3Atoi($28)|0);
   $30 = (($0) + 132|0);
   HEAP32[$30>>2] = $29;
   $31 = (($0) + 138|0);
   HEAP8[$31>>0] = 0;
   $32 = HEAP32[$21>>2]|0;
   (_sqlite3_prepare($0,$32,-1,$pStmt,0)|0);
   $33 = (($0) + 52|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP8[$27>>0] = 0;
   $35 = ($34|0)==(0);
   do {
    if (!($35)) {
     $36 = HEAP8[$31>>0]|0;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $38 = (($pInit) + 12|0);
      HEAP32[$38>>2] = $34;
      if ((($34|0) == 9)) {
       break;
      } else if ((($34|0) == 7)) {
       HEAP8[$12>>0] = 1;
       break;
      }
      $39 = $34 & 255;
      $40 = ($39|0)==(6);
      if (!($40)) {
       $41 = HEAP32[$argv>>2]|0;
       $42 = (_sqlite3_errmsg($0)|0);
       _corruptSchema($pInit,$41,$42);
      }
     }
    }
   } while(0);
   $43 = HEAP32[$pStmt>>2]|0;
   (_sqlite3_finalize($43)|0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $44 = HEAP32[$argv>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  _corruptSchema($pInit,0,0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = (($4) + ($2<<4)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (_sqlite3FindIndex($0,$44,$47)|0);
 $49 = ($48|0)==(0|0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (($48) + 44|0);
 $51 = (_sqlite3GetInt32($18,$50)|0);
 $52 = ($51|0)==(0);
 if (!($52)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = HEAP32[$argv>>2]|0;
 _corruptSchema($pInit,$53,19128);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3AbsInt32($x) {
 $x = $x|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)>(-1);
 if ($0) {
  STACKTOP = sp;return ($x|0);
 } else {
  $1 = ($x|0)==(-2147483648);
  $2 = (0 - ($x))|0;
  $$ = $1 ? 2147483647 : $2;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _sqlite3BtreeSetCacheSize($p$0$0$val,$p$0$1$val,$mxPage) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $mxPage = $mxPage|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = HEAP32[$p$0$1$val>>2]|0;
 $$idx = (($0) + 204|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 _sqlite3PagerSetCachesize($$idx$val,$mxPage);
 STACKTOP = sp;return;
}
function _sqlite3AnalysisLoad($db,$iDb) {
 $db = $db|0;
 $iDb = $iDb|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0 = 0, $i$02 = 0, $i$03 = 0, $sInfo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $sInfo = sp + 8|0;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iDb<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 32|0);
 $i$02 = HEAP32[$4>>2]|0;
 $5 = ($i$02|0)==(0|0);
 if ($5) {
  $10 = $1;
 } else {
  $i$03 = $i$02;
  while(1) {
   $6 = (($i$03) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   _sqlite3DefaultRowEst($7);
   $i$0 = HEAP32[$i$03>>2]|0;
   $8 = ($i$0|0)==(0|0);
   if ($8) {
    break;
   } else {
    $i$03 = $i$0;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;
 }
 HEAP32[$sInfo>>2] = $db;
 $9 = (($10) + ($iDb<<4)|0);
 $11 = HEAP32[$9>>2]|0;
 $12 = (($sInfo) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (_sqlite3FindTable($db,18544,$11)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$vararg_buffer>>2] = $11;
 $15 = (_sqlite3MPrintf($db,19048,$vararg_buffer)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = (_sqlite3_exec($db,$15,168,$sInfo,0)|0);
  _sqlite3DbFree($db,$15);
  $18 = ($17|0)==(7);
  if (!($18)) {
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $19 = (($db) + 64|0);
 HEAP8[$19>>0] = 1;
 $$0 = 7;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeCommit($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = (_sqlite3BtreeCommitPhaseOne($p,0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $rc$0 = $0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $2 = (_sqlite3BtreeCommitPhaseTwo($p,0)|0);
 $rc$0 = $2;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3DefaultRowEst($pIdx) {
 $pIdx = $pIdx|0;
 var $$ = 0, $$n$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pIdx) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(10);
 $$ = $6 ? 10 : $5;
 HEAP32[$1>>2] = $$;
 $7 = (($pIdx) + 50|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($8<<16>>16)==(0);
 if (!($10)) {
  $i$01 = 1;$n$02 = 10;
  while(1) {
   $11 = (($1) + ($i$01<<2)|0);
   HEAP32[$11>>2] = $n$02;
   $12 = ($n$02>>>0)>(5);
   $13 = $12 << 31 >> 31;
   $$n$0 = (($13) + ($n$02))|0;
   $14 = (($i$01) + 1)|0;
   $15 = ($i$01|0)<($9|0);
   if ($15) {
    $i$01 = $14;$n$02 = $$n$0;
   } else {
    break;
   }
  }
 }
 $16 = (($pIdx) + 54|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = (($1) + ($9<<2)|0);
 HEAP32[$19>>2] = 1;
 STACKTOP = sp;return;
}
function _analysisLoader($pData,$argc,$argv,$NotUsed) {
 $pData = $pData|0;
 $argc = $argc|0;
 $argv = $argv|0;
 $NotUsed = $NotUsed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fakeIdx = 0, $pIndex$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $fakeIdx = sp;
 $0 = ($argv|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 $1 = HEAP32[$argv>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = (($argv) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = HEAP32[$pData>>2]|0;
 $7 = (($pData) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3FindTable($6,$1,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return 0;
 }
 $11 = (($argv) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = (_sqlite3_stricmp($1,$12)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = (_sqlite3PrimaryKeyIndex($9)|0);
   $pIndex$0 = $16;
  } else {
   $17 = (_sqlite3FindIndex($6,$12,$8)|0);
   $pIndex$0 = $17;
  }
  $18 = ($pIndex$0|0)==(0|0);
  if (!($18)) {
   $19 = (($pIndex$0) + 50|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($21) + 1)|0;
   $23 = (($pIndex$0) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   _decodeIntArray($4,$22,$24,$pIndex$0);
   $25 = (($pIndex$0) + 36|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    STACKTOP = sp;return 0;
   }
   $28 = HEAP32[$23>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($9) + 28|0);
   HEAP32[$30>>2] = $29;
   STACKTOP = sp;return 0;
  }
 }
 $31 = (($9) + 42|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (($fakeIdx) + 48|0);
 HEAP16[$33>>1] = $32;
 $34 = (($9) + 28|0);
 _decodeIntArray($4,1,$34,$fakeIdx);
 $35 = HEAP16[$33>>1]|0;
 HEAP16[$31>>1] = $35;
 STACKTOP = sp;return 0;
}
function _decodeIntArray($zIntArray,$nOut,$aOut,$pIndex) {
 $zIntArray = $zIntArray|0;
 $nOut = $nOut|0;
 $aOut = $aOut|0;
 $pIndex = $pIndex|0;
 var $$ = 0, $$off = 0, $$off2 = 0, $$z$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0;
 var $or$cond = 0, $or$cond6 = 0, $v$0$lcssa = 0, $v$04 = 0, $v32 = 0, $z$0$lcssa = 0, $z$07 = 0, $z$1$lcssa = 0, $z$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v32 = sp;
 $0 = ($zIntArray|0)==(0|0);
 $$ = $0 ? 1728 : $zIntArray;
 $1 = HEAP8[$$>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 $3 = ($nOut|0)>(0);
 $or$cond6 = $2 & $3;
 if ($or$cond6) {
  $4 = $1;$i$08 = 0;$z$07 = $$;
  while(1) {
   $$off2 = (($4) + -48)<<24>>24;
   $5 = ($$off2&255)<(10);
   if ($5) {
    $7 = $4;$v$04 = 0;$z$13 = $z$07;
    while(1) {
     $6 = $7 << 24 >> 24;
     $8 = ($v$04*10)|0;
     $9 = (($8) + -48)|0;
     $10 = (($9) + ($6))|0;
     $11 = (($z$13) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     $$off = (($12) + -48)<<24>>24;
     $13 = ($$off&255)<(10);
     if ($13) {
      $7 = $12;$v$04 = $10;$z$13 = $11;
     } else {
      $v$0$lcssa = $10;$z$1$lcssa = $11;
      break;
     }
    }
   } else {
    $v$0$lcssa = 0;$z$1$lcssa = $z$07;
   }
   $14 = (($aOut) + ($i$08<<2)|0);
   HEAP32[$14>>2] = $v$0$lcssa;
   $15 = HEAP8[$z$1$lcssa>>0]|0;
   $16 = ($15<<24>>24)==(32);
   $17 = (($z$1$lcssa) + 1|0);
   $$z$1 = $16 ? $17 : $z$1$lcssa;
   $18 = (($i$08) + 1)|0;
   $19 = HEAP8[$$z$1>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   $21 = ($18|0)<($nOut|0);
   $or$cond = $20 & $21;
   if ($or$cond) {
    $4 = $19;$i$08 = $18;$z$07 = $$z$1;
   } else {
    $z$0$lcssa = $$z$1;
    break;
   }
  }
 } else {
  $z$0$lcssa = $$;
 }
 $22 = (_strcmp($z$0$lcssa,19096)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = (($pIndex) + 55|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 | 4;
  HEAP8[$24>>0] = $26;
  STACKTOP = sp;return;
 }
 $27 = (_sqlite3_strglob(19112,$z$0$lcssa)|0);
 $28 = ($27|0)==(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 HEAP32[$v32>>2] = 0;
 $29 = (($z$0$lcssa) + 3|0);
 (_sqlite3GetInt32($29,$v32)|0);
 $30 = HEAP32[$v32>>2]|0;
 $31 = ($30|0)<(0);
 $32 = $31 << 31 >> 31;
 $33 = (_sqlite3LogEst($30,$32)|0);
 $34 = (($pIndex) + 48|0);
 HEAP16[$34>>1] = $33;
 STACKTOP = sp;return;
}
function _corruptSchema($pData,$zObj,$zExtra) {
 $pData = $pData|0;
 $zObj = $zObj|0;
 $zExtra = $zExtra|0;
 var $$pr = 0, $$zObj = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pData>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $18 = 7;
  $17 = (($pData) + 12|0);
  HEAP32[$17>>2] = $18;
  STACKTOP = sp;return;
 }
 $4 = (($0) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 65536;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($zObj|0)==(0|0);
  $$zObj = $8 ? 19152 : $zObj;
  $9 = (($pData) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $$zObj;
  _sqlite3SetString($10,$0,19160,$vararg_buffer);
  $11 = ($zExtra|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$9>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $13;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $zExtra;
   $14 = (_sqlite3MAppendf($0,$13,19192,$vararg_buffer1)|0);
   $15 = HEAP32[$9>>2]|0;
   HEAP32[$15>>2] = $14;
  }
 }
 $$pr = HEAP8[$1>>0]|0;
 $16 = ($$pr<<24>>24)==(0);
 if (!($16)) {
  $18 = 7;
  $17 = (($pData) + 12|0);
  HEAP32[$17>>2] = $18;
  STACKTOP = sp;return;
 }
 _sqlite3CorruptError(99193);
 $18 = 11;
 $17 = (($pData) + 12|0);
 HEAP32[$17>>2] = $18;
 STACKTOP = sp;return;
}
function _sqlite3MAppendf($db,$zStr,$zFormat,$varargs) {
 $db = $db|0;
 $zStr = $zStr|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_sqlite3VMPrintf($db,$zFormat,$ap)|0);
 _sqlite3DbFree($db,$zStr);
 STACKTOP = sp;return ($0|0);
}
function _reindexDatabases($pParse,$zColl) {
 $pParse = $pParse|0;
 $zColl = $zColl|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDb$03 = 0;
 var $k$0 = 0, $k$01 = 0, $k$02 = 0, $pDb$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($0) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $17 = $2;$iDb$03 = 0;$pDb$04 = $5;
 while(1) {
  $6 = (($pDb$04) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 16|0);
  $k$01 = HEAP32[$8>>2]|0;
  $9 = ($k$01|0)==(0|0);
  if ($9) {
   $16 = $17;
  } else {
   $k$02 = $k$01;
   while(1) {
    $10 = (($k$02) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    _reindexTable($pParse,$11,$zColl);
    $k$0 = HEAP32[$k$02>>2]|0;
    $12 = ($k$0|0)==(0|0);
    if ($12) {
     break;
    } else {
     $k$02 = $k$0;
    }
   }
   $$pre = HEAP32[$1>>2]|0;
   $16 = $$pre;
  }
  $13 = (($iDb$03) + 1)|0;
  $14 = (($pDb$04) + 16|0);
  $15 = ($13|0)<($16|0);
  if ($15) {
   $17 = $16;$iDb$03 = $13;$pDb$04 = $14;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _reindexTable($pParse,$pTab,$zColl) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $zColl = $zColl|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIndex$0 = 0, $pIndex$01 = 0, $pIndex$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 8|0);
 $pIndex$01 = HEAP32[$0>>2]|0;
 $1 = ($pIndex$01|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ($zColl|0)==(0|0);
 $3 = (($pTab) + 68|0);
 $pIndex$02 = $pIndex$01;
 while(1) {
  if ($2) {
   label = 5;
  } else {
   $4 = (_collationMatch($zColl,$pIndex$02)|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $6 = HEAP32[$pParse>>2]|0;
   $7 = HEAP32[$3>>2]|0;
   $8 = (_sqlite3SchemaToIndex($6,$7)|0);
   _sqlite3BeginWriteOperation($pParse,0,$8);
   _sqlite3RefillIndex($pParse,$pIndex$02,-1);
  }
  $9 = (($pIndex$02) + 20|0);
  $pIndex$0 = HEAP32[$9>>2]|0;
  $10 = ($pIndex$0|0)==(0|0);
  if ($10) {
   break;
  } else {
   $pIndex$02 = $pIndex$0;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3RefillIndex($pParse,$pIndex,$memRootPage) {
 $pParse = $pParse|0;
 $pIndex = $pIndex|0;
 $memRootPage = $memRootPage|0;
 var $$idx = 0, $$idx$val = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr2$0 = 0, $iPartIdxLabel = 0, $or$cond = 0, $tnum$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iPartIdxLabel = sp;
 $0 = (($pIndex) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (($3) + 2)|0;
 HEAP32[$2>>2] = $5;
 $6 = HEAP32[$pParse>>2]|0;
 $7 = (($pIndex) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3SchemaToIndex($6,$8)|0);
 $10 = HEAP32[$pIndex>>2]|0;
 $11 = (($6) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<4)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_sqlite3AuthCheck($pParse,27,$10,0,$14)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = (($1) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$1>>2]|0;
 _sqlite3TableLock($pParse,$9,$18,1,$19);
 $20 = (_sqlite3GetVdbe($pParse)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = ($memRootPage|0)>(-1);
 if ($22) {
  $tnum$0 = $memRootPage;
 } else {
  $23 = (($pIndex) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $tnum$0 = $24;
 }
 $25 = (_sqlite3KeyInfoOfIndex($pParse,$pIndex)|0);
 $26 = HEAP32[$2>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$2>>2] = $27;
 $28 = (_sqlite3KeyInfoRef($25)|0);
 (_sqlite3VdbeAddOp4($20,56,$26,0,0,$28,-6)|0);
 _sqlite3OpenTable($pParse,$3,$9,$1,52);
 $29 = (_sqlite3VdbeAddOp2($20,105,$3,0)|0);
 $30 = (_sqlite3GetTempReg($pParse)|0);
 (_sqlite3GenerateIndexKey($pParse,$pIndex,$3,$30,0,$iPartIdxLabel,0,0)|0);
 (_sqlite3VdbeAddOp2($20,106,$26,$30)|0);
 $31 = HEAP32[$iPartIdxLabel>>2]|0;
 _sqlite3VdbeResolveLabel($20,$31);
 $32 = (($29) + 1)|0;
 (_sqlite3VdbeAddOp2($20,9,$3,$32)|0);
 _sqlite3VdbeJumpHere($20,$29);
 $33 = ($memRootPage|0)<(0);
 if ($33) {
  (_sqlite3VdbeAddOp2($20,115,$tnum$0,$9)|0);
 }
 (_sqlite3VdbeAddOp4($20,53,$4,$tnum$0,$9,$25,-6)|0);
 $34 = $memRootPage >> 31;
 $35 = (($34) + 2)|0;
 $36 = $35 | 1;
 $37 = $36&255;
 _sqlite3VdbeChangeP5($20,$37);
 $38 = (_sqlite3VdbeAddOp2($20,103,$26,0)|0);
 $39 = (($pIndex) + 54|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(0);
 $42 = ($25|0)==(0|0);
 $or$cond = $41 | $42;
 $$idx = (($20) + 32|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $43 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
 if ($or$cond) {
  $addr2$0 = $43;
 } else {
  $44 = (($43) + 3)|0;
  (_sqlite3VdbeAddOp2($20,16,0,$44)|0);
  $$idx1$val = HEAP32[$$idx>>2]|0;
  $45 = (_sqlite3VdbeCurrentAddr($$idx1$val)|0);
  $46 = (($25) + 6|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = (($pIndex) + 50|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = (($48) - ($51))|0;
  (_sqlite3VdbeAddOp4Int($20,84,$26,$44,$30,$52)|0);
  _sqlite3UniqueConstraint($pParse,2,$pIndex);
  $addr2$0 = $45;
 }
 (_sqlite3VdbeAddOp2($20,95,$26,$30)|0);
 (_sqlite3VdbeAddOp3($20,107,$4,$30,1)|0);
 _sqlite3VdbeChangeP5($20,16);
 _sqlite3ReleaseTempReg($pParse,$30);
 (_sqlite3VdbeAddOp2($20,5,$26,$addr2$0)|0);
 _sqlite3VdbeJumpHere($20,$38);
 (_sqlite3VdbeAddOp1($20,58,$3)|0);
 (_sqlite3VdbeAddOp1($20,58,$4)|0);
 (_sqlite3VdbeAddOp1($20,58,$26)|0);
 STACKTOP = sp;return;
}
function _sqlite3GenerateIndexKey($pParse,$pIdx,$iDataCur,$regOut,$prefixOnly,$piPartIdxLabel,$pPrior,$regPrior) {
 $pParse = $pParse|0;
 $pIdx = $pIdx|0;
 $iDataCur = $iDataCur|0;
 $regOut = $regOut|0;
 $prefixOnly = $prefixOnly|0;
 $piPartIdxLabel = $piPartIdxLabel|0;
 $pPrior = $pPrior|0;
 $regPrior = $regPrior|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre4 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pIdx) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($piPartIdxLabel|0)==(0|0);
 do {
  if (!($4)) {
   $5 = (($pIdx) + 36|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$piPartIdxLabel>>2] = 0;
    break;
   } else {
    $$idx = (($1) + 24|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $8 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
    HEAP32[$piPartIdxLabel>>2] = $8;
    $9 = (($pParse) + 100|0);
    HEAP32[$9>>2] = $iDataCur;
    $10 = HEAP32[$5>>2]|0;
    $11 = HEAP32[$piPartIdxLabel>>2]|0;
    _sqlite3ExprIfFalse($pParse,$10,$11,8);
    break;
   }
  }
 } while(0);
 $12 = ($prefixOnly|0)==(0);
 if ($12) {
  label = 8;
 } else {
  $13 = (($pIdx) + 55|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 & 8;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   label = 8;
  } else {
   $17 = (($pIdx) + 50|0);
   $$sink$in = $17;
  }
 }
 if ((label|0) == 8) {
  $18 = (($pIdx) + 52|0);
  $$sink$in = $18;
 }
 $$sink = HEAP16[$$sink$in>>1]|0;
 $19 = $$sink&65535;
 $20 = (_sqlite3GetTempRange($pParse,$19)|0);
 $21 = ($pPrior|0)==(0|0);
 do {
  if ($21) {
   $$0 = 0;
  } else {
   $22 = ($20|0)==($regPrior|0);
   if ($22) {
    $23 = (($pPrior) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0 = $pPrior;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 $26 = ($$sink<<16>>16)==(0);
 if (!($26)) {
  $27 = ($$0|0)==(0|0);
  $28 = (($pIdx) + 4|0);
  $29 = (($$0) + 4|0);
  $j$01 = 0;
  while(1) {
   if ($27) {
    $$pre = HEAP32[$28>>2]|0;
    $$phi$trans$insert = (($$pre) + ($j$01<<1)|0);
    $$pre4 = HEAP16[$$phi$trans$insert>>1]|0;
    $38 = $$pre4;
    label = 18;
   } else {
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + ($j$01<<1)|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = HEAP32[$28>>2]|0;
    $34 = (($33) + ($j$01<<1)|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = ($32<<16>>16)==($35<<16>>16);
    if (!($36)) {
     $38 = $35;
     label = 18;
    }
   }
   if ((label|0) == 18) {
    label = 0;
    $37 = $38 << 16 >> 16;
    $39 = (($j$01) + ($20))|0;
    _sqlite3ExprCodeGetColumnOfTable($1,$3,$iDataCur,$37,$39);
    (_sqlite3VdbeDeletePriorOpcode($1,39)|0);
   }
   $40 = (($j$01) + 1)|0;
   $41 = ($40|0)<($19|0);
   if ($41) {
    $j$01 = $40;
   } else {
    break;
   }
  }
 }
 $42 = ($regOut|0)==(0);
 if ($42) {
  _sqlite3ReleaseTempRange($pParse,$20,$19);
  STACKTOP = sp;return ($20|0);
 }
 (_sqlite3VdbeAddOp3($1,48,$20,$19,$regOut)|0);
 _sqlite3ReleaseTempRange($pParse,$20,$19);
 STACKTOP = sp;return ($20|0);
}
function _sqlite3VdbeResolveLabel($v,$x) {
 $v = $v|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $x ^ -1;
 $3 = ($x|0)<(0);
 if ($3) {
  $4 = (($1) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (($v) + 32|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($5) + ($2<<2)|0);
   HEAP32[$9>>2] = $8;
  }
 }
 $10 = (($v) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($1) + 92|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function _sqlite3UniqueConstraint($pParse,$onError,$pIdx) {
 $pParse = $pParse|0;
 $onError = $onError|0;
 $pIdx = $pIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $errMsg = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $errMsg = sp;
 $0 = (($pIdx) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3StrAccumInit($errMsg,0,0,200);
 $2 = HEAP32[$pParse>>2]|0;
 HEAP32[$errMsg>>2] = $2;
 $3 = (($pIdx) + 50|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if (!($5)) {
  $6 = (($pIdx) + 4|0);
  $7 = (($1) + 4|0);
  $j$01 = 0;
  while(1) {
   $8 = HEAP32[$6>>2]|0;
   $9 = (($8) + ($j$01<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 << 16 >> 16;
   $12 = HEAP32[$7>>2]|0;
   $13 = (($12) + (($11*24)|0)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($j$01|0)==(0);
   if (!($15)) {
    _sqlite3StrAccumAppend($errMsg,19248,2);
   }
   $16 = HEAP32[$1>>2]|0;
   _sqlite3StrAccumAppendAll($errMsg,$16);
   _sqlite3StrAccumAppend($errMsg,19256,1);
   _sqlite3StrAccumAppendAll($errMsg,$14);
   $17 = (($j$01) + 1)|0;
   $18 = HEAP16[$3>>1]|0;
   $19 = $18&65535;
   $20 = ($17|0)<($19|0);
   if ($20) {
    $j$01 = $17;
   } else {
    break;
   }
  }
 }
 $21 = (_sqlite3StrAccumFinish($errMsg)|0);
 $22 = (($pIdx) + 55|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 & 3;
 $25 = ($24<<24>>24)==(2);
 $26 = $25 ? 1555 : 2067;
 _sqlite3HaltConstraint($pParse,$26,$onError,$21,-1,2);
 STACKTOP = sp;return;
}
function _sqlite3StrAccumAppendAll($p,$z) {
 $p = $p|0;
 $z = $z|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($z)|0);
 _sqlite3StrAccumAppend($p,$z,$0);
 STACKTOP = sp;return;
}
function _sqlite3HaltConstraint($pParse,$errCode,$onError,$p4,$p4type,$p5Errmsg) {
 $pParse = $pParse|0;
 $errCode = $errCode|0;
 $onError = $onError|0;
 $p4 = $p4|0;
 $p4type = $p4type|0;
 $p5Errmsg = $p5Errmsg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($onError|0)==(2);
 if ($1) {
  _sqlite3MayAbort($pParse);
 }
 $2 = $p4type << 24 >> 24;
 (_sqlite3VdbeAddOp4($0,24,$errCode,$onError,0,$p4,$2)|0);
 $3 = ($p5Errmsg<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeChangeP5($0,$p5Errmsg);
 STACKTOP = sp;return;
}
function _sqlite3VdbeMakeLabel($v$0$6$val) {
 $v$0$6$val = $v$0$6$val|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v$0$6$val) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = (($1) + -1)|0;
 $4 = $3 & $1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$v$0$6$val>>2]|0;
  $7 = (($v$0$6$val) + 116|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1 << 3;
  $10 = $9 | 4;
  $11 = (_sqlite3DbReallocOrFree($6,$8,$10)|0);
  HEAP32[$7>>2] = $11;
  $13 = $11;
 } else {
  $$phi$trans$insert = (($v$0$6$val) + 116|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $13 = $$pre;
 }
 $12 = ($13|0)==(0|0);
 if ($12) {
  $15 = $1 ^ -1;
  STACKTOP = sp;return ($15|0);
 }
 $14 = (($13) + ($1<<2)|0);
 HEAP32[$14>>2] = -1;
 $15 = $1 ^ -1;
 STACKTOP = sp;return ($15|0);
}
function _sqlite3ExprIfFalse($pParse,$pExpr,$dest,$jumpIfNull) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $dest = $dest|0;
 $jumpIfNull = $jumpIfNull|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pExpr$idx = 0, $pExpr$idx$val = 0, $pExpr$idx2 = 0;
 var $pExpr$idx2$val = 0, $pExpr$idx2$val$idx = 0, $pExpr$idx2$val$idx$val = 0, $pExpr$idx2$val$idx$val$idx$val = 0, $pExpr$idx2$val$idx$val$idx3 = 0, $pExpr$idx2$val$idx$val$idx3$val = 0, $regFree1 = 0, $regFree2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $regFree1 = sp + 4|0;
 $regFree2 = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$regFree1>>2] = 0;
 HEAP32[$regFree2>>2] = 0;
 $2 = ($1|0)==(0|0);
 $3 = ($pExpr|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = HEAP8[$pExpr>>0]|0;
 $5 = $4&255;
 $6 = $5 ^ 1;
 L4: do {
  switch ($5|0) {
  case 71:  {
   $$idx1 = (($1) + 24|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   $11 = (_sqlite3VdbeMakeLabel($$idx1$val)|0);
   $12 = (($pExpr) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $jumpIfNull ^ 8;
   _sqlite3ExprIfTrue($pParse,$13,$11,$14);
   _sqlite3ExprCachePush($pParse);
   $15 = (($pExpr) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   _sqlite3ExprIfFalse($pParse,$16,$dest,$jumpIfNull);
   _sqlite3VdbeResolveLabel($1,$11);
   _sqlite3ExprCachePop($pParse);
   break;
  }
  case 77: case 76:  {
   $38 = (($pExpr) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_sqlite3ExprCodeTemp($pParse,$39,$regFree1)|0);
   (_sqlite3VdbeAddOp2($1,$6,$40,$dest)|0);
   break;
  }
  case 74:  {
   $pExpr$idx = (($pExpr) + 12|0);
   $pExpr$idx$val = HEAP32[$pExpr$idx>>2]|0;
   $pExpr$idx2 = (($pExpr) + 20|0);
   $pExpr$idx2$val = HEAP32[$pExpr$idx2>>2]|0;
   $pExpr$idx2$val$idx = (($pExpr$idx2$val) + 8|0);
   $pExpr$idx2$val$idx$val = HEAP32[$pExpr$idx2$val$idx>>2]|0;
   $pExpr$idx2$val$idx$val$idx$val = HEAP32[$pExpr$idx2$val$idx$val>>2]|0;
   $pExpr$idx2$val$idx$val$idx3 = (($pExpr$idx2$val$idx$val) + 20|0);
   $pExpr$idx2$val$idx$val$idx3$val = HEAP32[$pExpr$idx2$val$idx$val$idx3>>2]|0;
   _exprCodeBetween($pParse,$pExpr$idx$val,$pExpr$idx2$val$idx$val$idx$val,$pExpr$idx2$val$idx$val$idx3$val,$dest,0,$jumpIfNull);
   break;
  }
  case 19:  {
   $17 = (($pExpr) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   _sqlite3ExprIfTrue($pParse,$18,$dest,$jumpIfNull);
   break;
  }
  case 75:  {
   $41 = ($jumpIfNull|0)==(0);
   if ($41) {
    $$idx = (($1) + 24|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $42 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
    _sqlite3ExprCodeIN($pParse,$pExpr,$dest,$42);
    _sqlite3VdbeResolveLabel($1,$42);
    break L4;
   } else {
    _sqlite3ExprCodeIN($pParse,$pExpr,$dest,$dest);
    break L4;
   }
   break;
  }
  case 148: case 73:  {
   $27 = (($pExpr) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_sqlite3ExprCodeTemp($pParse,$28,$regFree1)|0);
   $30 = (($pExpr) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_sqlite3ExprCodeTemp($pParse,$31,$regFree2)|0);
   $33 = HEAP8[$pExpr>>0]|0;
   $34 = ($33<<24>>24)==(73);
   $35 = $34 ? 78 : 79;
   $36 = HEAP32[$27>>2]|0;
   $37 = HEAP32[$30>>2]|0;
   _codeCompare($pParse,$36,$37,$35,$29,$32,$dest,128);
   break;
  }
  case 72:  {
   $7 = (($pExpr) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   _sqlite3ExprIfFalse($pParse,$8,$dest,$jumpIfNull);
   _sqlite3ExprCachePush($pParse);
   $9 = (($pExpr) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   _sqlite3ExprIfFalse($pParse,$10,$dest,$jumpIfNull);
   _sqlite3ExprCachePop($pParse);
   break;
  }
  case 79: case 78: case 83: case 80: case 81: case 82:  {
   $19 = (($pExpr) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_sqlite3ExprCodeTemp($pParse,$20,$regFree1)|0);
   $22 = (($pExpr) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_sqlite3ExprCodeTemp($pParse,$23,$regFree2)|0);
   $25 = HEAP32[$19>>2]|0;
   $26 = HEAP32[$22>>2]|0;
   _codeCompare($pParse,$25,$26,$6,$21,$24,$dest,$jumpIfNull);
   break;
  }
  default: {
   $43 = (_exprAlwaysFalse($pExpr)|0);
   $44 = ($43|0)==(0);
   if (!($44)) {
    (_sqlite3VdbeAddOp2($1,16,0,$dest)|0);
    break L4;
   }
   $45 = (_exprAlwaysTrue($pExpr)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = (_sqlite3ExprCodeTemp($pParse,$pExpr,$regFree1)|0);
    $48 = ($jumpIfNull|0)!=(0);
    $49 = $48&1;
    (_sqlite3VdbeAddOp3($1,45,$47,$dest,$49)|0);
   }
  }
  }
 } while(0);
 $50 = HEAP32[$regFree1>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$50);
 $51 = HEAP32[$regFree2>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$51);
 STACKTOP = sp;return;
}
function _sqlite3GetTempRange($pParse,$nReg) {
 $pParse = $pParse|0;
 $nReg = $nReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($nReg|0);
 if ($4) {
  $7 = (($pParse) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  $10 = (($8) + ($nReg))|0;
  HEAP32[$7>>2] = $10;
  $i$0 = $9;
  STACKTOP = sp;return ($i$0|0);
 } else {
  $5 = (($1) + ($nReg))|0;
  HEAP32[$0>>2] = $5;
  $6 = (($3) - ($nReg))|0;
  HEAP32[$2>>2] = $6;
  $i$0 = $1;
  STACKTOP = sp;return ($i$0|0);
 }
 return 0|0;
}
function _sqlite3ExprCodeGetColumnOfTable($v,$pTab,$iTabCur,$iCol,$regOut) {
 $v = $v|0;
 $pTab = $pTab|0;
 $iTabCur = $iTabCur|0;
 $iCol = $iCol|0;
 $regOut = $regOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($iCol|0)<(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($pTab) + 36|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 << 16 >> 16;
  $4 = ($3|0)==($iCol|0);
  if ($4) {
   label = 3;
  } else {
   $5 = (($pTab) + 44|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = $7 & 16;
   $9 = ($8|0)!=(0);
   $10 = $9 ? 149 : 46;
   $11 = $7 & 32;
   $12 = ($11|0)==(0);
   if ($12) {
    $x$0 = $iCol;
   } else {
    $13 = (_sqlite3PrimaryKeyIndex($pTab)|0);
    $14 = $iCol&65535;
    $15 = (_sqlite3ColumnOfIndex($13,$14)|0);
    $16 = $15 << 16 >> 16;
    $x$0 = $16;
   }
   (_sqlite3VdbeAddOp3($v,$10,$iTabCur,$x$0,$regOut)|0);
  }
 }
 if ((label|0) == 3) {
  (_sqlite3VdbeAddOp2($v,100,$iTabCur,$regOut)|0);
 }
 $17 = ($iCol|0)>(-1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 _sqlite3ColumnDefault($v,$pTab,$iCol,$regOut);
 STACKTOP = sp;return;
}
function _sqlite3VdbeDeletePriorOpcode($p,$op) {
 $p = $p|0;
 $op = $op|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (($p) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($2|0)>($6|0);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($p) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($2*20)|0)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==($op<<24>>24);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3VdbeChangeToNoop($p,$2);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ReleaseTempRange($pParse,$iReg,$nReg) {
 $pParse = $pParse|0;
 $iReg = $iReg|0;
 $nReg = $nReg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3ExprCacheRemove($pParse,$iReg,$nReg);
 $0 = (($pParse) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($nReg|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = $nReg;
 $3 = (($pParse) + 64|0);
 HEAP32[$3>>2] = $iReg;
 STACKTOP = sp;return;
}
function _sqlite3ExprCacheRemove($pParse,$iReg,$nReg) {
 $pParse = $pParse|0;
 $iReg = $iReg|0;
 $nReg = $nReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond$6 = 0, $or$cond$7 = 0;
 var $or$cond$8 = 0, $or$cond$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iReg) + -1)|0;
 $1 = (($0) + ($nReg))|0;
 $2 = (($pParse) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($iReg|0);
 $5 = ($3|0)>($1|0);
 $or$cond = $4 | $5;
 if (!($or$cond)) {
  $6 = (($pParse) + 120|0);
  _cacheEntryClear($pParse,$6);
  HEAP32[$2>>2] = 0;
 }
 $7 = (($pParse) + 152|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($iReg|0);
 $10 = ($8|0)>($1|0);
 $or$cond$1 = $9 | $10;
 if (!($or$cond$1)) {
  $11 = (($pParse) + 140|0);
  _cacheEntryClear($pParse,$11);
  HEAP32[$7>>2] = 0;
 }
 $12 = (($pParse) + 172|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($iReg|0);
 $15 = ($13|0)>($1|0);
 $or$cond$2 = $14 | $15;
 if (!($or$cond$2)) {
  $16 = (($pParse) + 160|0);
  _cacheEntryClear($pParse,$16);
  HEAP32[$12>>2] = 0;
 }
 $17 = (($pParse) + 192|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)<($iReg|0);
 $20 = ($18|0)>($1|0);
 $or$cond$3 = $19 | $20;
 if (!($or$cond$3)) {
  $21 = (($pParse) + 180|0);
  _cacheEntryClear($pParse,$21);
  HEAP32[$17>>2] = 0;
 }
 $22 = (($pParse) + 212|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<($iReg|0);
 $25 = ($23|0)>($1|0);
 $or$cond$4 = $24 | $25;
 if (!($or$cond$4)) {
  $26 = (($pParse) + 200|0);
  _cacheEntryClear($pParse,$26);
  HEAP32[$22>>2] = 0;
 }
 $27 = (($pParse) + 232|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)<($iReg|0);
 $30 = ($28|0)>($1|0);
 $or$cond$5 = $29 | $30;
 if (!($or$cond$5)) {
  $31 = (($pParse) + 220|0);
  _cacheEntryClear($pParse,$31);
  HEAP32[$27>>2] = 0;
 }
 $32 = (($pParse) + 252|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<($iReg|0);
 $35 = ($33|0)>($1|0);
 $or$cond$6 = $34 | $35;
 if (!($or$cond$6)) {
  $36 = (($pParse) + 240|0);
  _cacheEntryClear($pParse,$36);
  HEAP32[$32>>2] = 0;
 }
 $37 = (($pParse) + 272|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)<($iReg|0);
 $40 = ($38|0)>($1|0);
 $or$cond$7 = $39 | $40;
 if (!($or$cond$7)) {
  $41 = (($pParse) + 260|0);
  _cacheEntryClear($pParse,$41);
  HEAP32[$37>>2] = 0;
 }
 $42 = (($pParse) + 292|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)<($iReg|0);
 $45 = ($43|0)>($1|0);
 $or$cond$8 = $44 | $45;
 if (!($or$cond$8)) {
  $46 = (($pParse) + 280|0);
  _cacheEntryClear($pParse,$46);
  HEAP32[$42>>2] = 0;
 }
 $47 = (($pParse) + 312|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)<($iReg|0);
 $50 = ($48|0)>($1|0);
 $or$cond$9 = $49 | $50;
 if ($or$cond$9) {
  STACKTOP = sp;return;
 }
 $51 = (($pParse) + 300|0);
 _cacheEntryClear($pParse,$51);
 HEAP32[$47>>2] = 0;
 STACKTOP = sp;return;
}
function _cacheEntryClear($pParse,$p) {
 $pParse = $pParse|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pParse) + 19|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255)<(8);
 if ($5) {
  $6 = $4&255;
  $7 = (($p) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($4) + 1)<<24>>24;
  HEAP8[$3>>0] = $9;
  $10 = ((($pParse) + ($6<<2)|0) + 28|0);
  HEAP32[$10>>2] = $8;
 }
 HEAP8[$0>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3ColumnOfIndex($pIdx,$iCol) {
 $pIdx = $pIdx|0;
 $iCol = $iCol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pIdx) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $i$02 = 0;
 while(1) {
  $8 = (($4) + ($i$02<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==($iCol<<16>>16);
  $7 = (($i$02) + 1)|0;
  if ($10) {
   break;
  }
  $5 = $1&65535;
  $6 = ($7|0)<($5|0);
  if ($6) {
   $i$02 = $7;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $11 = $i$02&65535;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ColumnDefault($v,$pTab,$i,$iReg) {
 $v = $v|0;
 $pTab = $pTab|0;
 $i = $i|0;
 $iReg = $iReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pValue = 0, $v$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pValue = sp;
 $0 = (($pTab) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[$pValue>>2] = 0;
 $v$idx1$val = HEAP32[$v>>2]|0;
 $3 = (_sqlite3VdbeDb($v$idx1$val)|0);
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 77|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($pTab) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11) + (($i*24)|0)|0) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($11) + (($i*24)|0)|0) + 21|0);
 $15 = HEAP8[$14>>0]|0;
 (_sqlite3ValueFromExpr($3,$13,$9,$15,$pValue)|0);
 $16 = HEAP32[$pValue>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  _sqlite3VdbeChangeP4($v,-1,$16,-8);
 }
 $18 = HEAP32[$10>>2]|0;
 $19 = ((($18) + (($i*24)|0)|0) + 21|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(101);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp1($v,39,$iReg)|0);
 STACKTOP = sp;return;
}
function _sqlite3VdbeDb($v$0$0$val) {
 $v$0$0$val = $v$0$0$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($v$0$0$val|0);
}
function _sqlite3ExprCachePush($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3ExprCachePop($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = (($pParse) + 120|0);
 $4 = (($pParse) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (($pParse) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>($2|0);
  if ($9) {
   _cacheEntryClear($pParse,$3);
   HEAP32[$4>>2] = 0;
  }
 }
 $10 = (($pParse) + 140|0);
 $11 = (($pParse) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = (($pParse) + 148|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = ($15|0)>($16|0);
  if ($17) {
   _cacheEntryClear($pParse,$10);
   HEAP32[$11>>2] = 0;
  }
 }
 $18 = (($pParse) + 160|0);
 $19 = (($pParse) + 172|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (($pParse) + 168|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$0>>2]|0;
  $25 = ($23|0)>($24|0);
  if ($25) {
   _cacheEntryClear($pParse,$18);
   HEAP32[$19>>2] = 0;
  }
 }
 $26 = (($pParse) + 180|0);
 $27 = (($pParse) + 192|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = (($pParse) + 188|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = ($31|0)>($32|0);
  if ($33) {
   _cacheEntryClear($pParse,$26);
   HEAP32[$27>>2] = 0;
  }
 }
 $34 = (($pParse) + 200|0);
 $35 = (($pParse) + 212|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = (($pParse) + 208|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$0>>2]|0;
  $41 = ($39|0)>($40|0);
  if ($41) {
   _cacheEntryClear($pParse,$34);
   HEAP32[$35>>2] = 0;
  }
 }
 $42 = (($pParse) + 220|0);
 $43 = (($pParse) + 232|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 if (!($45)) {
  $46 = (($pParse) + 228|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$0>>2]|0;
  $49 = ($47|0)>($48|0);
  if ($49) {
   _cacheEntryClear($pParse,$42);
   HEAP32[$43>>2] = 0;
  }
 }
 $50 = (($pParse) + 240|0);
 $51 = (($pParse) + 252|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $54 = (($pParse) + 248|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$0>>2]|0;
  $57 = ($55|0)>($56|0);
  if ($57) {
   _cacheEntryClear($pParse,$50);
   HEAP32[$51>>2] = 0;
  }
 }
 $58 = (($pParse) + 260|0);
 $59 = (($pParse) + 272|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0);
 if (!($61)) {
  $62 = (($pParse) + 268|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$0>>2]|0;
  $65 = ($63|0)>($64|0);
  if ($65) {
   _cacheEntryClear($pParse,$58);
   HEAP32[$59>>2] = 0;
  }
 }
 $66 = (($pParse) + 280|0);
 $67 = (($pParse) + 292|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $70 = (($pParse) + 288|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$0>>2]|0;
  $73 = ($71|0)>($72|0);
  if ($73) {
   _cacheEntryClear($pParse,$66);
   HEAP32[$67>>2] = 0;
  }
 }
 $74 = (($pParse) + 300|0);
 $75 = (($pParse) + 312|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0);
 if ($77) {
  STACKTOP = sp;return;
 }
 $78 = (($pParse) + 308|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$0>>2]|0;
 $81 = ($79|0)>($80|0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 _cacheEntryClear($pParse,$74);
 HEAP32[$75>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3ExprIfTrue($pParse,$pExpr,$dest,$jumpIfNull) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $dest = $dest|0;
 $jumpIfNull = $jumpIfNull|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pExpr$idx = 0, $pExpr$idx$val = 0, $pExpr$idx2 = 0, $pExpr$idx2$val = 0;
 var $pExpr$idx2$val$idx = 0, $pExpr$idx2$val$idx$val = 0, $pExpr$idx2$val$idx$val$idx$val = 0, $pExpr$idx2$val$idx$val$idx3 = 0, $pExpr$idx2$val$idx$val$idx3$val = 0, $regFree1 = 0, $regFree2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $regFree1 = sp + 4|0;
 $regFree2 = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$regFree1>>2] = 0;
 HEAP32[$regFree2>>2] = 0;
 $2 = ($1|0)==(0|0);
 $3 = ($pExpr|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = HEAP8[$pExpr>>0]|0;
 $5 = $4&255;
 L4: do {
  switch ($5|0) {
  case 79: case 78: case 83: case 80: case 81: case 82:  {
   $18 = (($pExpr) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_sqlite3ExprCodeTemp($pParse,$19,$regFree1)|0);
   $21 = (($pExpr) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_sqlite3ExprCodeTemp($pParse,$22,$regFree2)|0);
   $24 = HEAP32[$18>>2]|0;
   $25 = HEAP32[$21>>2]|0;
   _codeCompare($pParse,$24,$25,$5,$20,$23,$dest,$jumpIfNull);
   break;
  }
  case 75:  {
   $$idx = (($1) + 24|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $39 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
   $40 = ($jumpIfNull|0)!=(0);
   $41 = $40 ? $dest : $39;
   _sqlite3ExprCodeIN($pParse,$pExpr,$39,$41);
   (_sqlite3VdbeAddOp2($1,16,0,$dest)|0);
   _sqlite3VdbeResolveLabel($1,$39);
   break;
  }
  case 74:  {
   $pExpr$idx = (($pExpr) + 12|0);
   $pExpr$idx$val = HEAP32[$pExpr$idx>>2]|0;
   $pExpr$idx2 = (($pExpr) + 20|0);
   $pExpr$idx2$val = HEAP32[$pExpr$idx2>>2]|0;
   $pExpr$idx2$val$idx = (($pExpr$idx2$val) + 8|0);
   $pExpr$idx2$val$idx$val = HEAP32[$pExpr$idx2$val$idx>>2]|0;
   $pExpr$idx2$val$idx$val$idx$val = HEAP32[$pExpr$idx2$val$idx$val>>2]|0;
   $pExpr$idx2$val$idx$val$idx3 = (($pExpr$idx2$val$idx$val) + 20|0);
   $pExpr$idx2$val$idx$val$idx3$val = HEAP32[$pExpr$idx2$val$idx$val$idx3>>2]|0;
   _exprCodeBetween($pParse,$pExpr$idx$val,$pExpr$idx2$val$idx$val$idx$val,$pExpr$idx2$val$idx$val$idx3$val,$dest,1,$jumpIfNull);
   break;
  }
  case 71:  {
   $12 = (($pExpr) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   _sqlite3ExprIfTrue($pParse,$13,$dest,$jumpIfNull);
   _sqlite3ExprCachePush($pParse);
   $14 = (($pExpr) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   _sqlite3ExprIfTrue($pParse,$15,$dest,$jumpIfNull);
   _sqlite3ExprCachePop($pParse);
   break;
  }
  case 148: case 73:  {
   $26 = (($pExpr) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_sqlite3ExprCodeTemp($pParse,$27,$regFree1)|0);
   $29 = (($pExpr) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_sqlite3ExprCodeTemp($pParse,$30,$regFree2)|0);
   $32 = ($4<<24>>24)==(73);
   $33 = $32 ? 79 : 78;
   $34 = HEAP32[$26>>2]|0;
   $35 = HEAP32[$29>>2]|0;
   _codeCompare($pParse,$34,$35,$33,$28,$31,$dest,128);
   break;
  }
  case 19:  {
   $16 = (($pExpr) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   _sqlite3ExprIfFalse($pParse,$17,$dest,$jumpIfNull);
   break;
  }
  case 77: case 76:  {
   $36 = (($pExpr) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_sqlite3ExprCodeTemp($pParse,$37,$regFree1)|0);
   (_sqlite3VdbeAddOp2($1,$5,$38,$dest)|0);
   break;
  }
  case 72:  {
   $$idx1 = (($1) + 24|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   $6 = (_sqlite3VdbeMakeLabel($$idx1$val)|0);
   $7 = (($pExpr) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $jumpIfNull ^ 8;
   _sqlite3ExprIfFalse($pParse,$8,$6,$9);
   _sqlite3ExprCachePush($pParse);
   $10 = (($pExpr) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   _sqlite3ExprIfTrue($pParse,$11,$dest,$jumpIfNull);
   _sqlite3VdbeResolveLabel($1,$6);
   _sqlite3ExprCachePop($pParse);
   break;
  }
  default: {
   $42 = (_exprAlwaysTrue($pExpr)|0);
   $43 = ($42|0)==(0);
   if (!($43)) {
    (_sqlite3VdbeAddOp2($1,16,0,$dest)|0);
    break L4;
   }
   $44 = (_exprAlwaysFalse($pExpr)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = (_sqlite3ExprCodeTemp($pParse,$pExpr,$regFree1)|0);
    $47 = ($jumpIfNull|0)!=(0);
    $48 = $47&1;
    (_sqlite3VdbeAddOp3($1,44,$46,$dest,$48)|0);
   }
  }
  }
 } while(0);
 $49 = HEAP32[$regFree1>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$49);
 $50 = HEAP32[$regFree2>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$50);
 STACKTOP = sp;return;
}
function _sqlite3ExprCodeTemp($pParse,$pExpr,$pReg) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $pReg = $pReg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pItem$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ExprSkipCollate($pExpr)|0);
 $1 = (($pParse) + 25|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(-97);
  if (!($5)) {
   $6 = (_sqlite3ExprIsConstantNotJoin($0)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = (($pParse) + 320|0);
    $9 = HEAP32[$8>>2]|0;
    HEAP32[$pReg>>2] = 0;
    $10 = ($9|0)==(0|0);
    L5: do {
     if (!($10)) {
      $11 = HEAP32[$9>>2]|0;
      $12 = ($11|0)>(0);
      if ($12) {
       $13 = (($9) + 8|0);
       $14 = HEAP32[$13>>2]|0;
       $i$02 = $11;$pItem$03 = $14;
       while(1) {
        $15 = (($pItem$03) + 13|0);
        $16 = HEAP8[$15>>0]|0;
        $17 = $16 & 4;
        $18 = ($17<<24>>24)==(0);
        if (!($18)) {
         $19 = HEAP32[$pItem$03>>2]|0;
         $20 = (_sqlite3ExprCompare($19,$0,-1)|0);
         $21 = ($20|0)==(0);
         if ($21) {
          break;
         }
        }
        $24 = (($pItem$03) + 20|0);
        $25 = (($i$02) + -1)|0;
        $26 = ($25|0)>(0);
        if ($26) {
         $i$02 = $25;$pItem$03 = $24;
        } else {
         break L5;
        }
       }
       $22 = (($pItem$03) + 16|0);
       $23 = HEAP32[$22>>2]|0;
       $$0 = $23;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    $27 = (($pParse) + 76|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$27>>2] = $29;
    _sqlite3ExprCodeAtInit($pParse,$0,$29,1);
    $$0 = $29;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $30 = (_sqlite3GetTempReg($pParse)|0);
 $31 = (_sqlite3ExprCodeTarget($pParse,$0,$30)|0);
 $32 = ($31|0)==($30|0);
 if ($32) {
  HEAP32[$pReg>>2] = $30;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 } else {
  _sqlite3ReleaseTempReg($pParse,$30);
  HEAP32[$pReg>>2] = 0;
  $$0 = $31;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _codeCompare($pParse,$pLeft,$pRight,$opcode,$in1,$in2,$dest,$jumpIfNull) {
 $pParse = $pParse|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 $opcode = $opcode|0;
 $in1 = $in1|0;
 $in2 = $in2|0;
 $dest = $dest|0;
 $jumpIfNull = $jumpIfNull|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3BinaryCompareCollSeq($pParse,$pLeft,$pRight)|0);
 $1 = (_binaryCompareP5($pLeft,$pRight,$jumpIfNull)|0);
 $2 = (($pParse) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 (_sqlite3VdbeAddOp4($3,$opcode,$in2,$dest,$in1,$0,-4)|0);
 $4 = HEAP32[$2>>2]|0;
 _sqlite3VdbeChangeP5($4,$1);
 STACKTOP = sp;return;
}
function _exprCodeBetween($pParse,$pExpr$0$4$val,$pExpr$0$6$0$val$0$2$val$0$0$val,$pExpr$0$6$0$val$0$2$val$1$0$val,$dest,$jumpIfTrue,$jumpIfNull) {
 $pParse = $pParse|0;
 $pExpr$0$4$val = $pExpr$0$4$val|0;
 $pExpr$0$6$0$val$0$2$val$0$0$val = $pExpr$0$6$0$val$0$2$val$0$0$val|0;
 $pExpr$0$6$0$val$0$2$val$1$0$val = $pExpr$0$6$0$val$0$2$val$1$0$val|0;
 $dest = $dest|0;
 $jumpIfTrue = $jumpIfTrue|0;
 $jumpIfNull = $jumpIfNull|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $compLeft = 0, $compRight = 0, $exprAnd = 0, $exprX = 0, $regFree1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $exprAnd = sp + 152|0;
 $compLeft = sp + 104|0;
 $compRight = sp + 56|0;
 $exprX = sp + 8|0;
 $regFree1 = sp;
 HEAP32[$regFree1>>2] = 0;
 dest=$exprX+0|0; src=$pExpr$0$4$val+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP8[$exprAnd>>0] = 72;
 $0 = (($exprAnd) + 12|0);
 HEAP32[$0>>2] = $compLeft;
 $1 = (($exprAnd) + 16|0);
 HEAP32[$1>>2] = $compRight;
 HEAP8[$compLeft>>0] = 83;
 $2 = (($compLeft) + 12|0);
 HEAP32[$2>>2] = $exprX;
 $3 = (($compLeft) + 16|0);
 HEAP32[$3>>2] = $pExpr$0$6$0$val$0$2$val$0$0$val;
 HEAP8[$compRight>>0] = 81;
 $4 = (($compRight) + 12|0);
 HEAP32[$4>>2] = $exprX;
 $5 = (($compRight) + 16|0);
 HEAP32[$5>>2] = $pExpr$0$6$0$val$0$2$val$1$0$val;
 $6 = (_sqlite3ExprCodeTemp($pParse,$exprX,$regFree1)|0);
 _exprToRegister($exprX,$6);
 $7 = ($jumpIfTrue|0)==(0);
 if ($7) {
  _sqlite3ExprIfFalse($pParse,$exprAnd,$dest,$jumpIfNull);
  $8 = HEAP32[$regFree1>>2]|0;
  _sqlite3ReleaseTempReg($pParse,$8);
  STACKTOP = sp;return;
 } else {
  _sqlite3ExprIfTrue($pParse,$exprAnd,$dest,$jumpIfNull);
  $8 = HEAP32[$regFree1>>2]|0;
  _sqlite3ReleaseTempReg($pParse,$8);
  STACKTOP = sp;return;
 }
}
function _sqlite3ExprCodeIN($pParse,$pExpr,$destIfFalse,$destIfNull) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $destIfFalse = $destIfFalse|0;
 $destIfNull = $destIfNull|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $affinity = 0, $brmerge = 0, $rRhsHasNull = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rRhsHasNull = sp;
 $affinity = sp + 4|0;
 HEAP32[$rRhsHasNull>>2] = 0;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3FindInIndex($pParse,$pExpr,$rRhsHasNull)|0);
 $3 = (_comparisonAffinity($pExpr)|0);
 HEAP8[$affinity>>0] = $3;
 _sqlite3ExprCachePush($pParse);
 $4 = (_sqlite3GetTempReg($pParse)|0);
 $5 = (($pExpr) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 _sqlite3ExprCode($pParse,$6,$4);
 $7 = ($destIfNull|0)==($destIfFalse|0);
 if ($7) {
  (_sqlite3VdbeAddOp2($1,76,$4,$destIfNull)|0);
 } else {
  $8 = (_sqlite3VdbeAddOp1($1,77,$4)|0);
  $9 = (($pExpr) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  (_sqlite3VdbeAddOp2($1,105,$10,$destIfFalse)|0);
  (_sqlite3VdbeAddOp2($1,16,0,$destIfNull)|0);
  _sqlite3VdbeJumpHere($1,$8);
 }
 $11 = ($2|0)==(1);
 if ($11) {
  (_sqlite3VdbeAddOp2($1,38,$4,$destIfFalse)|0);
  $12 = (($pExpr) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  (_sqlite3VdbeAddOp3($1,67,$13,$destIfFalse,$4)|0);
  _sqlite3ReleaseTempReg($pParse,$4);
  _sqlite3ExprCachePop($pParse);
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp4($1,47,$4,1,0,$affinity,1)|0);
 $14 = HEAP32[$rRhsHasNull>>2]|0;
 $15 = ($14|0)==(0);
 $brmerge = $15 | $7;
 $16 = (($pExpr) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 if ($brmerge) {
  (_sqlite3VdbeAddOp4Int($1,65,$17,$destIfFalse,$4,1)|0);
  _sqlite3ReleaseTempReg($pParse,$4);
  _sqlite3ExprCachePop($pParse);
  STACKTOP = sp;return;
 } else {
  $18 = (_sqlite3VdbeAddOp4Int($1,66,$17,0,$4,1)|0);
  $19 = HEAP32[$rRhsHasNull>>2]|0;
  (_sqlite3VdbeAddOp2($1,44,$19,$destIfNull)|0);
  $20 = HEAP32[$rRhsHasNull>>2]|0;
  (_sqlite3VdbeAddOp2($1,45,$20,$destIfFalse)|0);
  $21 = HEAP32[$16>>2]|0;
  $22 = HEAP32[$rRhsHasNull>>2]|0;
  $23 = (_sqlite3VdbeAddOp4Int($1,66,$21,0,$22,1)|0);
  $24 = HEAP32[$rRhsHasNull>>2]|0;
  (_sqlite3VdbeAddOp2($1,25,0,$24)|0);
  (_sqlite3VdbeAddOp2($1,16,0,$destIfFalse)|0);
  _sqlite3VdbeJumpHere($1,$23);
  $25 = HEAP32[$rRhsHasNull>>2]|0;
  (_sqlite3VdbeAddOp2($1,25,1,$25)|0);
  (_sqlite3VdbeAddOp2($1,16,0,$destIfNull)|0);
  _sqlite3VdbeJumpHere($1,$18);
  _sqlite3ReleaseTempReg($pParse,$4);
  _sqlite3ExprCachePop($pParse);
  STACKTOP = sp;return;
 }
}
function _exprAlwaysTrue($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 HEAP32[$v>>2] = 0;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_sqlite3ExprIsInteger($p,$v)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$v>>2]|0;
   $7 = ($6|0)!=(0);
   $8 = $7&1;
   $$0 = $8;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FindInIndex($pParse,$pX,$prNotFound) {
 $pParse = $pParse|0;
 $pX = $pX|0;
 $prNotFound = $prNotFound|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $eType$24 = 0, $eType$3 = 0, $eType$4 = 0, $notlhs = 0, $notlhs6 = 0, $or$cond27 = 0, $pIdx$0 = 0, $pIdx$05 = 0, $pIdx$09 = 0, $rMayHaveNull$0 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($prNotFound|0)==(0|0);
 $4 = (_sqlite3GetVdbe($pParse)|0);
 $5 = (($pX) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $14 = 0;
 } else {
  $9 = (($pX) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $11 = (($pParse) + 68|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 L4: do {
  if ($13) {
   $15 = (_isCandidateForInOpt($14)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = HEAP32[$pParse>>2]|0;
    $18 = (($14) + 40|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 24|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$14>>2]|0;
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 32|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = (($21) + 68|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_sqlite3SchemaToIndex($17,$29)|0);
    $sext = $30 << 16;
    $31 = $sext >> 16;
    _sqlite3CodeVerifySchema($pParse,$31);
    $32 = (($21) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$21>>2]|0;
    _sqlite3TableLock($pParse,$31,$33,0,$34);
    $35 = $27 << 16 >> 16;
    $36 = ($27<<16>>16)<(0);
    if ($36) {
     $37 = (_sqlite3CodeOnce($pParse)|0);
     _sqlite3OpenTable($pParse,$1,$31,$21,52);
     _sqlite3VdbeJumpHere($4,$37);
     $eType$24 = 1;
    } else {
     $38 = (($pX) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (_sqlite3BinaryCompareCollSeq($pParse,$39,$25)|0);
     $41 = (($21) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($42) + (($35*24)|0)|0) + 21|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = (_sqlite3IndexAffinityOk($pX,$44)|0);
     $46 = (($21) + 8|0);
     $pIdx$05 = HEAP32[$46>>2]|0;
     $notlhs6 = ($pIdx$05|0)==(0|0);
     $47 = ($45|0)==(0);
     $or$cond27 = $notlhs6 | $47;
     if ($or$cond27) {
      break;
     }
     $48 = (($17) + 16|0);
     $49 = (($pParse) + 76|0);
     $pIdx$09 = $pIdx$05;
     while(1) {
      $50 = (($pIdx$09) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==($27<<16>>16);
      if ($53) {
       $54 = HEAP32[$48>>2]|0;
       $55 = (($54) + 12|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = (($56) + 77|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = (($pIdx$09) + 32|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = HEAP32[$60>>2]|0;
       $62 = (_sqlite3FindCollSeq($17,$58,$61,0)|0);
       $63 = ($62|0)==($40|0);
       if ($63) {
        if (!($3)) {
         break;
        }
        $64 = (($pIdx$09) + 50|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = ($65<<16>>16)==(1);
        if ($66) {
         $67 = (($pIdx$09) + 54|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(0);
         if (!($69)) {
          break;
         }
        }
       }
      }
      $84 = (($pIdx$09) + 20|0);
      $pIdx$0 = HEAP32[$84>>2]|0;
      $notlhs = ($pIdx$0|0)==(0|0);
      if ($notlhs) {
       break L4;
      } else {
       $pIdx$09 = $pIdx$0;
      }
     }
     $70 = (_sqlite3CodeOnce($pParse)|0);
     $71 = (($pIdx$09) + 44|0);
     $72 = HEAP32[$71>>2]|0;
     (_sqlite3VdbeAddOp3($4,52,$1,$72,$31)|0);
     _sqlite3VdbeSetP4KeyInfo($pParse,$pIdx$09);
     $73 = (($pIdx$09) + 28|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($76) + 3)|0;
     if (!($3)) {
      $78 = HEAP32[$41>>2]|0;
      $79 = ((($78) + (($35*24)|0)|0) + 20|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = ($80<<24>>24)==(0);
      if ($81) {
       $82 = HEAP32[$49>>2]|0;
       $83 = (($82) + 1)|0;
       HEAP32[$49>>2] = $83;
       HEAP32[$prNotFound>>2] = $83;
       (_sqlite3VdbeAddOp2($4,28,0,$83)|0);
      }
     }
     _sqlite3VdbeJumpHere($4,$70);
     if (0) {
      break;
     } else {
      $eType$24 = $77;
     }
    }
    $101 = (($pX) + 28|0);
    HEAP32[$101>>2] = $1;
    $eType$4 = $eType$24;
    STACKTOP = sp;return ($eType$4|0);
   }
  }
 } while(0);
 $85 = (($pParse) + 428|0);
 $86 = HEAP32[$85>>2]|0;
 if ($3) {
  HEAP32[$85>>2] = 0;
  $90 = (($pX) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + 32|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = ($93<<16>>16)<(0);
  if ($94) {
   $95 = HEAP32[$5>>2]|0;
   $96 = $95 >>> 11;
   $97 = $96 & 1;
   $98 = (($97) + 1)|0;
   $eType$3 = $98;$rMayHaveNull$0 = 0;
  } else {
   $eType$3 = 2;$rMayHaveNull$0 = 0;
  }
 } else {
  $87 = (($pParse) + 76|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 1)|0;
  HEAP32[$87>>2] = $89;
  HEAP32[$prNotFound>>2] = $89;
  (_sqlite3VdbeAddOp2($4,28,0,$89)|0);
  $eType$3 = 2;$rMayHaveNull$0 = $89;
 }
 $99 = ($eType$3|0)==(1);
 $100 = $99&1;
 (_sqlite3CodeSubselect($pParse,$pX,$rMayHaveNull$0,$100)|0);
 HEAP32[$85>>2] = $86;
 $eType$4 = $eType$3;
 STACKTOP = sp;return ($eType$4|0);
}
function _comparisonAffinity($pExpr) {
 $pExpr = $pExpr|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $aff$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pExpr) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3ExprAffinity($1)|0);
 $3 = (($pExpr) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (_sqlite3CompareAffinity($4,$2)|0);
  $aff$0 = $6;
  STACKTOP = sp;return ($aff$0|0);
 }
 $7 = (($pExpr) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 2048;
 $10 = ($9|0)==(0);
 if ($10) {
  $18 = ($2<<24>>24)==(0);
  $$ = $18 ? 98 : $2;
  STACKTOP = sp;return ($$|0);
 }
 $11 = (($pExpr) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_sqlite3CompareAffinity($16,$2)|0);
 $aff$0 = $17;
 STACKTOP = sp;return ($aff$0|0);
}
function _sqlite3ExprCode($pParse,$pExpr,$target) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pExpr|0)==(0|0);
 if (!($0)) {
  $1 = HEAP8[$pExpr>>0]|0;
  $2 = ($1<<24>>24)==(-97);
  if ($2) {
   $3 = (($pParse) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($pExpr) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   (_sqlite3VdbeAddOp2($4,33,$6,$target)|0);
   STACKTOP = sp;return;
  }
 }
 $7 = (_sqlite3ExprCodeTarget($pParse,$pExpr,$target)|0);
 $8 = ($7|0)==($target|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = (($pParse) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($10,34,$7,$target)|0);
 STACKTOP = sp;return;
}
function _sqlite3ExprCodeTarget($pParse,$pExpr,$target) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $target = $target|0;
 var $$0 = 0, $$idx$val = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx5$val = 0, $$idx6 = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $constMask$0$lcssa = 0, $constMask$016 = 0, $constMask$1 = 0, $exitcond = 0, $exitcond25 = 0, $i$021 = 0;
 var $i$115 = 0, $i2$011 = 0, $iTab$0 = 0, $inReg$1 = 0, $opCompare = 0, $or$cond = 0, $or$cond1 = 0, $pColl$0$lcssa = 0, $pColl$014 = 0, $pColl$1 = 0, $pColl$2 = 0, $pDef$0 = 0, $pFarg$09 = 0, $pTest$1$ph = 0, $pTest$112 = 0, $pTest$2 = 0, $r1$0 = 0, $r1$1 = 0, $regFree1 = 0, $regFree2 = 0;
 var $tempX = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $regFree1 = sp + 124|0;
 $regFree2 = sp + 120|0;
 $tempX = sp + 72|0;
 $opCompare = sp + 24|0;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$regFree1>>2] = 0;
 HEAP32[$regFree2>>2] = 0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($pExpr|0)==(0|0);
 L4: do {
  if ($4) {
   label = 16;
  } else {
   $5 = HEAP8[$pExpr>>0]|0;
   $6 = $5&255;
   do {
    switch ($6|0) {
    case 134:  {
     $49 = (($pExpr) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + 2|0);
     $52 = (_sqlite3Strlen30($51)|0);
     $53 = (($52) + -1)|0;
     $$idx$val = HEAP32[$1>>2]|0;
     $54 = (_sqlite3VdbeDb($$idx$val)|0);
     $55 = (_sqlite3HexToBlob($54,$51,$53)|0);
     $56 = (($53|0) / 2)&-1;
     (_sqlite3VdbeAddOp4($1,30,$56,$target,0,$55,-1)|0);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 159:  {
     $72 = (($pExpr) + 28|0);
     $73 = HEAP32[$72>>2]|0;
     $inReg$1 = $73;
     break L4;
     break;
    }
    case 158: case 95:  {
     $255 = (($pExpr) + 12|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = (_sqlite3ExprCodeTarget($pParse,$256,$target)|0);
     $inReg$1 = $257;
     break L4;
     break;
    }
    case 74:  {
     $240 = (($pExpr) + 12|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = (($pExpr) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (($243) + 8|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = HEAP32[$245>>2]|0;
     $247 = (_sqlite3ExprCodeTemp($pParse,$241,$regFree1)|0);
     $248 = (_sqlite3ExprCodeTemp($pParse,$246,$regFree2)|0);
     $249 = (_sqlite3GetTempReg($pParse)|0);
     $250 = (_sqlite3GetTempReg($pParse)|0);
     _codeCompare($pParse,$241,$246,83,$247,$248,$249,16);
     $251 = (($245) + 20|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = HEAP32[$regFree2>>2]|0;
     _sqlite3ReleaseTempReg($pParse,$253);
     $254 = (_sqlite3ExprCodeTemp($pParse,$252,$regFree2)|0);
     _codeCompare($pParse,$241,$252,81,$247,$254,$250,16);
     (_sqlite3VdbeAddOp3($1,72,$249,$250,$target)|0);
     _sqlite3ReleaseTempReg($pParse,$249);
     _sqlite3ReleaseTempReg($pParse,$250);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 132:  {
     _codeInteger($1,$pExpr,0,$target);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 133:  {
     $45 = (($pExpr) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     _codeReal($1,$46,0,$target);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 148: case 73:  {
     $94 = (($pExpr) + 12|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (_sqlite3ExprCodeTemp($pParse,$95,$regFree1)|0);
     $97 = (($pExpr) + 16|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (_sqlite3ExprCodeTemp($pParse,$98,$regFree2)|0);
     $100 = ($5<<24>>24)==(73);
     $101 = $100 ? 79 : 78;
     $102 = HEAP32[$94>>2]|0;
     $103 = HEAP32[$97>>2]|0;
     _codeCompare($pParse,$102,$103,$101,$96,$99,$target,144);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 94: case 88: case 87: case 92: case 86: case 85: case 93: case 90: case 91: case 89: case 71: case 72:  {
     $104 = (($pExpr) + 12|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (_sqlite3ExprCodeTemp($pParse,$105,$regFree1)|0);
     $107 = (($pExpr) + 16|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (_sqlite3ExprCodeTemp($pParse,$108,$regFree2)|0);
     (_sqlite3VdbeAddOp3($1,$6,$109,$106,$target)|0);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 119: case 20:  {
     $237 = (_sqlite3CodeSubselect($pParse,$pExpr,0,0)|0);
     $inReg$1 = $237;
     break L4;
     break;
    }
    case 24:  {
     $74 = (($pExpr) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (_sqlite3ExprCodeTarget($pParse,$75,$target)|0);
     $inReg$1 = $76;
     break L4;
     break;
    }
    case 79: case 78: case 83: case 80: case 81: case 82:  {
     $86 = (($pExpr) + 12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (_sqlite3ExprCodeTemp($pParse,$87,$regFree1)|0);
     $89 = (($pExpr) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (_sqlite3ExprCodeTemp($pParse,$90,$regFree2)|0);
     $92 = HEAP32[$86>>2]|0;
     $93 = HEAP32[$89>>2]|0;
     _codeCompare($pParse,$92,$93,$6,$88,$91,$target,16);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 38:  {
     $77 = (($pExpr) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (_sqlite3ExprCodeTarget($pParse,$78,$target)|0);
     $80 = (($pExpr) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_sqlite3AffinityType($81,0)|0);
     $83 = $82 << 24 >> 24;
     $84 = (($83) + 46)|0;
     $85 = ($79|0)==($target|0);
     if (!($85)) {
      (_sqlite3VdbeAddOp2($1,34,$79,$target)|0);
     }
     (_sqlite3VdbeAddOp1($1,$84,$target)|0);
     _sqlite3ExprCacheAffinityChange($pParse,$target,1);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 156:  {
     $7 = (($pExpr) + 40|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = (($pExpr) + 34|0);
     $10 = HEAP16[$9>>1]|0;
     $11 = $10 << 16 >> 16;
     $12 = (($8) + 28|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = HEAP8[$8>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if ($15) {
      $16 = ((($13) + (($11*24)|0)|0) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $inReg$1 = $17;
      break L4;
     }
     $18 = (($8) + 1|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)==(0);
     if (!($20)) {
      $21 = (($8) + 8|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($13) + (($11*24)|0)|0) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      (_sqlite3VdbeAddOp3($1,46,$22,$24,$target)|0);
      $inReg$1 = $target;
      break L4;
     }
     break;
    }
    case 157:  {
     $110 = (($pExpr) + 12|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = HEAP8[$111>>0]|0;
     if ((($112<<24>>24) == -124)) {
      _codeInteger($1,$111,1,$target);
      $inReg$1 = $target;
      break L4;
     } else if ((($112<<24>>24) == -123)) {
      $113 = (($111) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      _codeReal($1,$114,1,$target);
      $inReg$1 = $target;
      break L4;
     } else {
      HEAP8[$tempX>>0] = -124;
      $115 = (($tempX) + 4|0);
      HEAP32[$115>>2] = 17408;
      $116 = (($tempX) + 8|0);
      HEAP32[$116>>2] = 0;
      $117 = (_sqlite3ExprCodeTemp($pParse,$tempX,$regFree1)|0);
      $118 = HEAP32[$110>>2]|0;
      $119 = (_sqlite3ExprCodeTemp($pParse,$118,$regFree2)|0);
      (_sqlite3VdbeAddOp3($1,90,$119,$117,$target)|0);
      $inReg$1 = $target;
      break L4;
     }
     break;
    }
    case 101:  {
     label = 16;
     break L4;
     break;
    }
    case 62:  {
     $258 = (($pExpr) + 44|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = (($pExpr) + 28|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = (($259) + 38|0);
     $263 = HEAP16[$262>>1]|0;
     $264 = $263 << 16 >> 16;
     $265 = (($264) + 1)|0;
     $266 = Math_imul($265, $261)|0;
     $267 = (($pExpr) + 32|0);
     $268 = HEAP16[$267>>1]|0;
     $269 = $268 << 16 >> 16;
     $270 = (($269) + 1)|0;
     $271 = (($270) + ($266))|0;
     (_sqlite3VdbeAddOp2($1,128,$271,$target)|0);
     $272 = HEAP16[$267>>1]|0;
     $273 = ($272<<16>>16)>(-1);
     if (!($273)) {
      $inReg$1 = $target;
      break L4;
     }
     $274 = $272 << 16 >> 16;
     $275 = (($259) + 4|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ((($276) + (($274*24)|0)|0) + 21|0);
     $278 = HEAP8[$277>>0]|0;
     $279 = ($278<<24>>24)==(101);
     if (!($279)) {
      $inReg$1 = $target;
      break L4;
     }
     (_sqlite3VdbeAddOp1($1,39,$target)|0);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 153:  {
     $139 = (($2) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($140) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($142) + 77|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = (($pExpr) + 4|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = $146 & 16384;
     $148 = ($147|0)==(0);
     if ($148) {
      $149 = (($pExpr) + 20|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==(0|0);
      if ($151) {
       $156 = 0;$322 = 0;$pFarg$09 = 0;
      } else {
       $152 = HEAP32[$150>>2]|0;
       $156 = $152;$322 = 1;$pFarg$09 = $150;
      }
     } else {
      $156 = 0;$322 = 0;$pFarg$09 = 0;
     }
     $153 = (($pExpr) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (_sqlite3Strlen30($154)|0);
     $157 = (_sqlite3FindFunction($2,$154,$155,$156,$144,0)|0);
     $158 = ($157|0)==(0|0);
     if ($158) {
      HEAP32[$vararg_buffer1>>2] = $155;
      $vararg_ptr4 = (($vararg_buffer1) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $154;
      _sqlite3ErrorMsg($pParse,19296,$vararg_buffer1);
      $inReg$1 = $target;
      break L4;
     }
     $159 = (($157) + 2|0);
     $160 = HEAP16[$159>>1]|0;
     $161 = $160&65535;
     $162 = $161 & 512;
     $163 = ($162|0)==(0);
     if (!($163)) {
      $$idx7 = (($1) + 24|0);
      $$idx7$val = HEAP32[$$idx7>>2]|0;
      $164 = (_sqlite3VdbeMakeLabel($$idx7$val)|0);
      $165 = (($pFarg$09) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[$166>>2]|0;
      _sqlite3ExprCode($pParse,$167,$target);
      $168 = ($156|0)>(1);
      if ($168) {
       $i$021 = 1;
       while(1) {
        (_sqlite3VdbeAddOp2($1,77,$target,$164)|0);
        _sqlite3ExprCacheRemove($pParse,$target,1);
        _sqlite3ExprCachePush($pParse);
        $169 = HEAP32[$165>>2]|0;
        $170 = (($169) + (($i$021*20)|0)|0);
        $171 = HEAP32[$170>>2]|0;
        _sqlite3ExprCode($pParse,$171,$target);
        _sqlite3ExprCachePop($pParse);
        $172 = (($i$021) + 1)|0;
        $exitcond25 = ($172|0)==($156|0);
        if ($exitcond25) {
         break;
        } else {
         $i$021 = $172;
        }
       }
      }
      _sqlite3VdbeResolveLabel($1,$164);
      $inReg$1 = $target;
      break L4;
     }
     $173 = $161 & 1024;
     $174 = ($173|0)==(0);
     if (!($174)) {
      $177 = (($pFarg$09) + 8|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = HEAP32[$178>>2]|0;
      _sqlite3ExprCode($pParse,$179,$target);
      $inReg$1 = $target;
      break L4;
     }
     $175 = ($156|0)>(0);
     if ($175) {
      $176 = (($pFarg$09) + 8|0);
      $constMask$016 = 0;$i$115 = 0;$pColl$014 = 0;
      while(1) {
       $180 = ($i$115|0)<(32);
       if ($180) {
        $181 = HEAP32[$176>>2]|0;
        $182 = (($181) + (($i$115*20)|0)|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (_sqlite3ExprIsConstant($183)|0);
        $185 = ($184|0)==(0);
        if ($185) {
         $constMask$1 = $constMask$016;
        } else {
         $186 = 1 << $i$115;
         $187 = $constMask$016 | $186;
         $constMask$1 = $187;
        }
       } else {
        $constMask$1 = $constMask$016;
       }
       $188 = HEAP16[$159>>1]|0;
       $189 = $188 & 32;
       $190 = ($189<<16>>16)!=(0);
       $191 = ($pColl$014|0)==(0|0);
       $or$cond = $190 & $191;
       if ($or$cond) {
        $192 = HEAP32[$176>>2]|0;
        $193 = (($192) + (($i$115*20)|0)|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = (_sqlite3ExprCollSeq($pParse,$194)|0);
        $pColl$1 = $195;
       } else {
        $pColl$1 = $pColl$014;
       }
       $196 = (($i$115) + 1)|0;
       $exitcond = ($196|0)==($156|0);
       if ($exitcond) {
        $constMask$0$lcssa = $constMask$1;$pColl$0$lcssa = $pColl$1;
        break;
       } else {
        $constMask$016 = $constMask$1;$i$115 = $196;$pColl$014 = $pColl$1;
       }
      }
     } else {
      $constMask$0$lcssa = 0;$pColl$0$lcssa = 0;
     }
     if ($322) {
      $197 = ($constMask$0$lcssa|0)==(0);
      if ($197) {
       $202 = (_sqlite3GetTempRange($pParse,$156)|0);
       $r1$0 = $202;
      } else {
       $198 = (($pParse) + 76|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = (($199) + 1)|0;
       $201 = (($199) + ($156))|0;
       HEAP32[$198>>2] = $201;
       $r1$0 = $200;
      }
      $203 = HEAP16[$159>>1]|0;
      $204 = $203 & 192;
      $205 = ($204<<16>>16)==(0);
      if (!($205)) {
       $206 = (($pFarg$09) + 8|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = HEAP32[$207>>2]|0;
       $209 = HEAP8[$208>>0]|0;
       if ((($209<<24>>24) == -100) | (($209<<24>>24) == -102)) {
        $210 = $203&65535;
        $211 = $210 & 192;
        $212 = $211&255;
        $213 = (($208) + 38|0);
        HEAP8[$213>>0] = $212;
       }
      }
      _sqlite3ExprCachePush($pParse);
      _sqlite3ExprCodeExprList($pParse,$pFarg$09,$r1$0,3);
      _sqlite3ExprCachePop($pParse);
      $r1$1 = $r1$0;
     } else {
      $r1$1 = 0;
     }
     $214 = ($156|0)>(1);
     if ($214) {
      $215 = HEAP32[$145>>2]|0;
      $216 = $215 & 128;
      $217 = ($216|0)==(0);
      if ($217) {
       label = 67;
      } else {
       $218 = (($pFarg$09) + 8|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = (($219) + 20|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (_sqlite3VtabOverloadFunction($2,$157,$156,$221)|0);
       $pDef$0 = $222;
      }
     } else {
      label = 67;
     }
     if ((label|0) == 67) {
      if ($175) {
       $223 = (($pFarg$09) + 8|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = HEAP32[$224>>2]|0;
       $226 = (_sqlite3VtabOverloadFunction($2,$157,$156,$225)|0);
       $pDef$0 = $226;
      } else {
       $pDef$0 = $157;
      }
     }
     $227 = (($pDef$0) + 2|0);
     $228 = HEAP16[$227>>1]|0;
     $229 = $228 & 32;
     $230 = ($229<<16>>16)==(0);
     if (!($230)) {
      $231 = ($pColl$0$lcssa|0)==(0|0);
      if ($231) {
       $232 = (($2) + 8|0);
       $233 = HEAP32[$232>>2]|0;
       $pColl$2 = $233;
      } else {
       $pColl$2 = $pColl$0$lcssa;
      }
      (_sqlite3VdbeAddOp4($1,36,0,0,0,$pColl$2,-4)|0);
     }
     (_sqlite3VdbeAddOp4($1,1,$constMask$0$lcssa,$r1$1,$target,$pDef$0,-5)|0);
     $234 = $156&255;
     _sqlite3VdbeChangeP5($1,$234);
     $235 = ($156|0)!=(0);
     $236 = ($constMask$0$lcssa|0)==(0);
     $or$cond1 = $235 & $236;
     if (!($or$cond1)) {
      $inReg$1 = $target;
      break L4;
     }
     _sqlite3ReleaseTempRange($pParse,$r1$1,$156);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 97:  {
     $47 = (($pExpr) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     (_sqlite3VdbeAddOp4($1,97,0,$target,0,$48,0)|0);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 154:  {
     break;
    }
    case 75:  {
     $$idx6 = (($1) + 24|0);
     $$idx6$val = HEAP32[$$idx6>>2]|0;
     $238 = (_sqlite3VdbeMakeLabel($$idx6$val)|0);
     $$idx5$val = HEAP32[$$idx6>>2]|0;
     $239 = (_sqlite3VdbeMakeLabel($$idx5$val)|0);
     (_sqlite3VdbeAddOp2($1,28,0,$target)|0);
     _sqlite3ExprCodeIN($pParse,$pExpr,$238,$239);
     (_sqlite3VdbeAddOp2($1,25,1,$target)|0);
     _sqlite3VdbeResolveLabel($1,$238);
     (_sqlite3VdbeAddOp2($1,37,$target,0)|0);
     _sqlite3VdbeResolveLabel($1,$239);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 19: case 96:  {
     $120 = (($pExpr) + 12|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (_sqlite3ExprCodeTemp($pParse,$121,$regFree1)|0);
     (_sqlite3VdbeAddOp2($1,$6,$122,$target)|0);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 77: case 76:  {
     (_sqlite3VdbeAddOp2($1,25,1,$target)|0);
     $123 = (($pExpr) + 12|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_sqlite3ExprCodeTemp($pParse,$124,$regFree1)|0);
     $126 = (_sqlite3VdbeAddOp1($1,$6,$125)|0);
     (_sqlite3VdbeAddOp2($1,37,$target,-1)|0);
     _sqlite3VdbeJumpHere($1,$126);
     $inReg$1 = $target;
     break L4;
     break;
    }
    case 155:  {
     $127 = (($pExpr) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($128|0)==(0|0);
     if ($129) {
      $130 = (($pExpr) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      HEAP32[$vararg_buffer>>2] = $131;
      _sqlite3ErrorMsg($pParse,19264,$vararg_buffer);
      $inReg$1 = $target;
      break L4;
     } else {
      $132 = (($pExpr) + 34|0);
      $133 = HEAP16[$132>>1]|0;
      $134 = $133 << 16 >> 16;
      $135 = (($128) + 40|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ((($136) + ($134<<4)|0) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      $inReg$1 = $138;
      break L4;
     }
     break;
    }
    case 57:  {
     $307 = (($pParse) + 416|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(0|0);
     if ($309) {
      _sqlite3ErrorMsg($pParse,19328,$vararg_buffer5);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $310 = (($pExpr) + 1|0);
     $311 = HEAP8[$310>>0]|0;
     $312 = ($311<<24>>24)==(2);
     if ($312) {
      _sqlite3MayAbort($pParse);
      $$pr = HEAP8[$310>>0]|0;
      $314 = $$pr;
     } else {
      $314 = $311;
     }
     $313 = ($314<<24>>24)==(4);
     if ($313) {
      $315 = (($pExpr) + 8|0);
      $316 = HEAP32[$315>>2]|0;
      (_sqlite3VdbeAddOp4($1,24,0,4,0,$316,0)|0);
      $inReg$1 = $target;
      break L4;
     } else {
      $317 = $314 << 24 >> 24;
      $318 = (($pExpr) + 8|0);
      $319 = HEAP32[$318>>2]|0;
      _sqlite3HaltConstraint($pParse,1811,$317,$319,0,0);
      $inReg$1 = $target;
      break L4;
     }
     break;
    }
    case 135:  {
     $57 = (($pExpr) + 32|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58 << 16 >> 16;
     (_sqlite3VdbeAddOp2($1,31,$59,$target)|0);
     $60 = (($pExpr) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + 1|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $inReg$1 = $target;
      break L4;
     }
     $65 = HEAP16[$57>>1]|0;
     $66 = $65 << 16 >> 16;
     $67 = (($66) + -1)|0;
     $68 = (($pParse) + 476|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($67<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     _sqlite3VdbeChangeP4($1,-1,$71,-2);
     $inReg$1 = $target;
     break L4;
     break;
    }
    default: {
     $280 = (($pExpr) + 20|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = (($281) + 8|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = HEAP32[$281>>2]|0;
     $$idx4 = (($1) + 24|0);
     $$idx4$val = HEAP32[$$idx4>>2]|0;
     $285 = (_sqlite3VdbeMakeLabel($$idx4$val)|0);
     $286 = (($pExpr) + 12|0);
     $287 = HEAP32[$286>>2]|0;
     $288 = ($287|0)!=(0|0);
     if ($288) {
      dest=$tempX+0|0; src=$287+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $289 = (_sqlite3ExprCodeTemp($pParse,$287,$regFree1)|0);
      _exprToRegister($tempX,$289);
      HEAP8[$opCompare>>0] = 79;
      $290 = (($opCompare) + 12|0);
      HEAP32[$290>>2] = $tempX;
      HEAP32[$regFree1>>2] = 0;
      $pTest$1$ph = $opCompare;
     } else {
      $pTest$1$ph = 0;
     }
     $291 = (($284) + -1)|0;
     $292 = ($291|0)>(0);
     if ($292) {
      $293 = (($opCompare) + 16|0);
      $i2$011 = 0;$pTest$112 = $pTest$1$ph;
      while(1) {
       _sqlite3ExprCachePush($pParse);
       $294 = (($283) + (($i2$011*20)|0)|0);
       $295 = HEAP32[$294>>2]|0;
       if ($288) {
        HEAP32[$293>>2] = $295;
        $pTest$2 = $pTest$112;
       } else {
        $pTest$2 = $295;
       }
       $$idx3$val = HEAP32[$$idx4>>2]|0;
       $296 = (_sqlite3VdbeMakeLabel($$idx3$val)|0);
       _sqlite3ExprIfFalse($pParse,$pTest$2,$296,8);
       $297 = $i2$011 | 1;
       $298 = (($283) + (($297*20)|0)|0);
       $299 = HEAP32[$298>>2]|0;
       _sqlite3ExprCode($pParse,$299,$target);
       (_sqlite3VdbeAddOp2($1,16,0,$285)|0);
       _sqlite3ExprCachePop($pParse);
       _sqlite3VdbeResolveLabel($1,$296);
       $300 = (($i2$011) + 2)|0;
       $301 = ($300|0)<($291|0);
       if ($301) {
        $i2$011 = $300;$pTest$112 = $pTest$2;
       } else {
        break;
       }
      }
     }
     $302 = $284 & 1;
     $303 = ($302|0)==(0);
     if ($303) {
      (_sqlite3VdbeAddOp2($1,28,0,$target)|0);
     } else {
      _sqlite3ExprCachePush($pParse);
      $304 = HEAP32[$282>>2]|0;
      $305 = (($304) + (($291*20)|0)|0);
      $306 = HEAP32[$305>>2]|0;
      _sqlite3ExprCode($pParse,$306,$target);
      _sqlite3ExprCachePop($pParse);
     }
     _sqlite3VdbeResolveLabel($1,$285);
     $inReg$1 = $target;
     break L4;
    }
    }
   } while(0);
   $25 = (($pExpr) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)<(0);
   do {
    if ($27) {
     $28 = (($pParse) + 96|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)>(0);
     if ($30) {
      $31 = (($pExpr) + 32|0);
      $32 = HEAP16[$31>>1]|0;
      $33 = $32 << 16 >> 16;
      $34 = (($33) + ($29))|0;
      $inReg$1 = $34;
      break L4;
     } else {
      $35 = (($pParse) + 100|0);
      $36 = HEAP32[$35>>2]|0;
      $iTab$0 = $36;
      break;
     }
    } else {
     $iTab$0 = $26;
    }
   } while(0);
   $37 = (($pExpr) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($pExpr) + 32|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = $40 << 16 >> 16;
   $42 = (($pExpr) + 38|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = (_sqlite3ExprCodeGetColumn($pParse,$38,$41,$iTab$0,$target,$43)|0);
   $inReg$1 = $44;
  }
 } while(0);
 if ((label|0) == 16) {
  (_sqlite3VdbeAddOp2($1,28,0,$target)|0);
  $inReg$1 = $target;
 }
 $320 = HEAP32[$regFree1>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$320);
 $321 = HEAP32[$regFree2>>2]|0;
 _sqlite3ReleaseTempReg($pParse,$321);
 $$0 = $inReg$1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ExprCodeGetColumn($pParse,$pTab,$iColumn,$iTable,$iReg,$p5) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $iColumn = $iColumn|0;
 $iTable = $iTable|0;
 $iReg = $iReg|0;
 $p5 = $p5|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $p$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 120|0);
 $i$02 = 0;$p$03 = $2;
 while(1) {
  $3 = (($p$03) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = HEAP32[$p$03>>2]|0;
   $7 = ($6|0)==($iTable|0);
   if ($7) {
    $8 = (($p$03) + 4|0);
    $9 = HEAP16[$8>>1]|0;
    $10 = $9 << 16 >> 16;
    $11 = ($10|0)==($iColumn|0);
    if ($11) {
     label = 5;
     break;
    }
   }
  }
  $18 = (($i$02) + 1)|0;
  $19 = (($p$03) + 20|0);
  $20 = ($18|0)<(10);
  if ($20) {
   $i$02 = $18;$p$03 = $19;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  $12 = (($pParse) + 108|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($p$03) + 16|0);
  HEAP32[$15>>2] = $13;
  $16 = HEAP32[$3>>2]|0;
  _sqlite3ExprCachePinRegister($pParse,$16);
  $17 = HEAP32[$3>>2]|0;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3ExprCodeGetColumnOfTable($1,$pTab,$iTable,$iColumn,$iReg);
 $21 = ($p5<<24>>24)==(0);
 if ($21) {
  _sqlite3ExprCacheStore($pParse,$iTable,$iColumn,$iReg);
  $$0 = $iReg;
  STACKTOP = sp;return ($$0|0);
 } else {
  _sqlite3VdbeChangeP5($1,$p5);
  $$0 = $iReg;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _codeInteger($pParse$0$2$val,$pExpr,$negFlag,$iMem) {
 $pParse$0$2$val = $pParse$0$2$val|0;
 $pExpr = $pExpr|0;
 $negFlag = $negFlag|0;
 $iMem = $iMem|0;
 var $$ = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $value = sp;
 $0 = (($pExpr) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 1024;
 $3 = ($2|0)==(0);
 $4 = (($pExpr) + 8|0);
 if (!($3)) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ($negFlag|0)==(0);
  $7 = (0 - ($5))|0;
  $$ = $6 ? $5 : $7;
  (_sqlite3VdbeAddOp2($pParse$0$2$val,25,$$,$iMem)|0);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$4>>2]|0;
 $9 = (_sqlite3Strlen30($8)|0);
 $10 = (_sqlite3Atoi64($8,$value,$9,1)|0);
 if ((($10|0) == 2)) {
  $cond = ($negFlag|0)==(0);
  if ($cond) {
   label = 9;
  } else {
   $22 = 0;$25 = -2147483648;
   label = 7;
  }
 } else if ((($10|0) == 0)) {
  $11 = ($negFlag|0)==(0);
  if (!($11)) {
   $12 = $value;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + 4)|0;
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_i64Subtract(0,0,($14|0),($17|0))|0);
   $19 = tempRet0;
   $22 = $18;$25 = $19;
   label = 7;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 7) {
  $20 = $value;
  $21 = $20;
  HEAP32[$21>>2] = $22;
  $23 = (($20) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $25;
 }
 else if ((label|0) == 9) {
  _codeReal($pParse$0$2$val,$8,$negFlag,$iMem);
  STACKTOP = sp;return;
 }
 $$idx$val = HEAP32[$pParse$0$2$val>>2]|0;
 $26 = (_dup8bytes($$idx$val,$value)|0);
 (_sqlite3VdbeAddOp4($pParse$0$2$val,26,0,$iMem,0,$26,-13)|0);
 STACKTOP = sp;return;
}
function _codeReal($v,$z,$negateFlag,$iMem) {
 $v = $v|0;
 $z = $z|0;
 $negateFlag = $negateFlag|0;
 $iMem = $iMem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $v$idx$val = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $value = sp;
 $0 = ($z|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (_sqlite3Strlen30($z)|0);
 (_sqlite3AtoF($z,$value,$1,1)|0);
 $2 = ($negateFlag|0)==(0);
 if (!($2)) {
  $3 = +HEAPF64[$value>>3];
  $4 = -$3;
  HEAPF64[$value>>3] = $4;
 }
 $v$idx$val = HEAP32[$v>>2]|0;
 $5 = (_dup8bytes($v$idx$val,$value)|0);
 (_sqlite3VdbeAddOp4($v,133,0,$iMem,0,$5,-12)|0);
 STACKTOP = sp;return;
}
function _sqlite3ExprCacheAffinityChange($pParse,$iStart,$iCount) {
 $pParse = $pParse|0;
 $iStart = $iStart|0;
 $iCount = $iCount|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3ExprCacheRemove($pParse,$iStart,$iCount);
 STACKTOP = sp;return;
}
function _sqlite3ExprIsConstant($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_exprIsConst($p,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3ExprCodeExprList($pParse,$pList,$target,$flags) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 $target = $target|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $pItem$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags&255;
 $1 = $0 & 1;
 $2 = (34 - ($1))|0;
 $3 = HEAP32[$pList>>2]|0;
 $4 = (($pParse) + 25|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = $0 & 253;
  $8 = $7&255;
  $$0 = $8;
 } else {
  $$0 = $flags;
 }
 $9 = ($3|0)>(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($pList) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $$0 & 2;
 $13 = ($12<<24>>24)==(0);
 $14 = (($pParse) + 8|0);
 $15 = ($2|0)==(33);
 $i$01 = 0;$pItem$03 = $11;
 while(1) {
  $16 = HEAP32[$pItem$03>>2]|0;
  if ($13) {
   label = 8;
  } else {
   $17 = (_sqlite3ExprIsConstant($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    label = 8;
   } else {
    $19 = (($i$01) + ($target))|0;
    _sqlite3ExprCodeAtInit($pParse,$16,$19,0);
   }
  }
  do {
   if ((label|0) == 8) {
    label = 0;
    $20 = (($i$01) + ($target))|0;
    $21 = (_sqlite3ExprCodeTarget($pParse,$16,$20)|0);
    $22 = ($21|0)==($20|0);
    if (!($22)) {
     $23 = HEAP32[$14>>2]|0;
     if ($15) {
      $24 = (_sqlite3VdbeGetOp($23,-1)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(33);
      if ($26) {
       $27 = (($24) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($24) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($28) + 1)|0;
       $32 = (($31) + ($30))|0;
       $33 = ($32|0)==($21|0);
       if ($33) {
        $34 = (($24) + 8|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($30) + 1)|0;
        $37 = (($36) + ($35))|0;
        $38 = ($37|0)==($20|0);
        if ($38) {
         HEAP32[$29>>2] = $36;
         break;
        }
       }
      }
     }
     (_sqlite3VdbeAddOp2($23,$2,$21,$20)|0);
    }
   }
  } while(0);
  $39 = (($i$01) + 1)|0;
  $40 = (($pItem$03) + 20|0);
  $exitcond = ($39|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $39;$pItem$03 = $40;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VtabOverloadFunction($db,$pDef,$nArg,$pExpr) {
 $db = $db|0;
 $pDef = $pDef|0;
 $nArg = $nArg|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pArg = 0, $phitmp = 0, $xFunc = 0, $z$01 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $xFunc = sp + 4|0;
 $pArg = sp;
 HEAP32[$xFunc>>2] = 0;
 HEAP32[$pArg>>2] = 0;
 $0 = ($pExpr|0)==(0|0);
 if ($0) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$pExpr>>0]|0;
 $2 = ($1<<24>>24)==(-102);
 if (!($2)) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pExpr) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($4) + 44|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 16;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_sqlite3GetVTable($db,$4)|0);
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($pDef) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_sqlite3DbStrDup($db,$18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP8[$19>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  $24 = $21;$z$01 = $19;
  while(1) {
   $23 = $24&255;
   $25 = (960 + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   HEAP8[$z$01>>0] = $26;
   $27 = (($z$01) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if ($29) {
    break;
   } else {
    $24 = $28;$z$01 = $27;
   }
  }
 }
 $30 = HEAP32[$14>>2]|0;
 $31 = (FUNCTION_TABLE_iiiiii[$30 & 255]($12,$nArg,$19,$xFunc,$pArg)|0);
 _sqlite3DbFree($db,$19);
 $phitmp = ($31|0)==(0);
 if ($phitmp) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[$17>>2]|0;
 $33 = (_sqlite3Strlen30($32)|0);
 $34 = (($33) + 37)|0;
 $35 = (_sqlite3DbMallocZero($db,$34)|0);
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$0 = $pDef;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$35+0|0; src=$pDef+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $37 = (($35) + 36|0);
 $38 = (($35) + 24|0);
 HEAP32[$38>>2] = $37;
 $39 = HEAP32[$17>>2]|0;
 $40 = (_sqlite3Strlen30($39)|0);
 $41 = (($40) + 1)|0;
 _memcpy(($37|0),($39|0),($41|0))|0;
 $42 = HEAP32[$xFunc>>2]|0;
 $43 = (($35) + 12|0);
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$pArg>>2]|0;
 $45 = (($35) + 4|0);
 HEAP32[$45>>2] = $44;
 $46 = (($35) + 2|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47&65535;
 $49 = $48 | 16;
 $50 = $49&65535;
 HEAP16[$46>>1] = $50;
 $$0 = $35;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3CodeSubselect($pParse,$pExpr,$rMayHaveNull,$isRowid) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $rMayHaveNull = $rMayHaveNull|0;
 $isRowid = $isRowid|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $affinity = 0, $cond = 0, $dest = 0, $dest1 = 0, $i$02 = 0, $iValToIns = 0;
 var $pItem$01 = 0, $rReg$0 = 0, $testAddr$0 = 0, $testAddr$1$lcssa = 0, $testAddr$13 = 0, $testAddr$2 = 0, $testAddr$3 = 0, $testAddr$4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $affinity = sp + 56|0;
 $dest = sp + 36|0;
 $iValToIns = sp + 32|0;
 $dest1 = sp + 12|0;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3ExprCachePush($pParse);
 $2 = (($pExpr) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_sqlite3CodeOnce($pParse)|0);
  $testAddr$0 = $6;
 } else {
  $testAddr$0 = -1;
 }
 $7 = (($pParse) + 454|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(2);
 if ($9) {
  $10 = HEAP32[$pParse>>2]|0;
  $11 = ($testAddr$0|0)>(-1);
  $12 = $11 ? 1728 : 19416;
  $13 = HEAP8[$pExpr>>0]|0;
  $14 = ($13<<24>>24)==(75);
  $15 = $14 ? 19432 : 19440;
  $16 = (($pParse) + 472|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $17;
  $18 = (_sqlite3MPrintf($10,19384,$vararg_buffer)|0);
  $19 = (($pParse) + 468|0);
  $20 = HEAP32[$19>>2]|0;
  (_sqlite3VdbeAddOp4($0,156,$20,0,0,$18,-1)|0);
  $$pre$phiZ2D = $pExpr;
 } else {
  $$pre$phiZ2D = $pExpr;
 }
 $21 = HEAP8[$$pre$phiZ2D>>0]|0;
 $cond = ($21<<24>>24)==(75);
 do {
  if ($cond) {
   $22 = (($pExpr) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($rMayHaveNull|0)==(0);
   if (!($24)) {
    (_sqlite3VdbeAddOp2($0,28,0,$rMayHaveNull)|0);
   }
   $25 = (_sqlite3ExprAffinity($23)|0);
   HEAP8[$affinity>>0] = $25;
   $26 = (($pParse) + 72|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$26>>2] = $28;
   $29 = (($pExpr) + 28|0);
   HEAP32[$29>>2] = $27;
   $30 = ($isRowid|0)!=(0);
   $31 = $30&1;
   $32 = $31 ^ 1;
   $33 = (_sqlite3VdbeAddOp2($0,55,$27,$32)|0);
   if ($30) {
    $47 = 0;
   } else {
    $34 = HEAP32[$pParse>>2]|0;
    $35 = (_sqlite3KeyInfoAlloc($34,1,1)|0);
    $47 = $35;
   }
   $36 = HEAP32[$2>>2]|0;
   $37 = $36 & 2048;
   $38 = ($37|0)==(0);
   do {
    if ($38) {
     $56 = (($pExpr) + 20|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $testAddr$3 = $testAddr$0;
     } else {
      $59 = HEAP8[$affinity>>0]|0;
      $60 = ($59<<24>>24)==(0);
      if ($60) {
       HEAP8[$affinity>>0] = 98;
      }
      $61 = ($47|0)==(0|0);
      if (!($61)) {
       $62 = HEAP32[$22>>2]|0;
       $63 = (_sqlite3ExprCollSeq($pParse,$62)|0);
       $64 = (($47) + 20|0);
       HEAP32[$64>>2] = $63;
      }
      $65 = (_sqlite3GetTempReg($pParse)|0);
      $66 = (_sqlite3GetTempReg($pParse)|0);
      (_sqlite3VdbeAddOp2($0,28,0,$66)|0);
      $67 = HEAP32[$57>>2]|0;
      $68 = ($67|0)>(0);
      if ($68) {
       $69 = (($57) + 8|0);
       $70 = HEAP32[$69>>2]|0;
       $$idx = (($0) + 32|0);
       $i$02 = $67;$pItem$01 = $70;$testAddr$13 = $testAddr$0;
       while(1) {
        $71 = HEAP32[$pItem$01>>2]|0;
        $72 = ($testAddr$13|0)>(-1);
        if ($72) {
         $73 = (_sqlite3ExprIsConstant($71)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          _sqlite3VdbeChangeToNoop($0,$testAddr$13);
          $testAddr$2 = -1;
         } else {
          $testAddr$2 = $testAddr$13;
         }
        } else {
         $testAddr$2 = $testAddr$13;
        }
        do {
         if ($30) {
          $75 = (_sqlite3ExprIsInteger($71,$iValToIns)|0);
          $76 = ($75|0)==(0);
          if ($76) {
           $79 = (_sqlite3ExprCodeTarget($pParse,$71,$65)|0);
           $$idx$val = HEAP32[$$idx>>2]|0;
           $80 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
           $81 = (($80) + 2)|0;
           (_sqlite3VdbeAddOp2($0,38,$79,$81)|0);
           $82 = HEAP32[$29>>2]|0;
           (_sqlite3VdbeAddOp3($0,70,$82,$66,$79)|0);
           break;
          } else {
           $77 = HEAP32[$29>>2]|0;
           $78 = HEAP32[$iValToIns>>2]|0;
           (_sqlite3VdbeAddOp3($0,73,$77,$66,$78)|0);
           break;
          }
         } else {
          $83 = (_sqlite3ExprCodeTarget($pParse,$71,$65)|0);
          (_sqlite3VdbeAddOp4($0,48,$83,1,$66,$affinity,1)|0);
          _sqlite3ExprCacheAffinityChange($pParse,$83,1);
          $84 = HEAP32[$29>>2]|0;
          (_sqlite3VdbeAddOp2($0,107,$84,$66)|0);
         }
        } while(0);
        $85 = (($i$02) + -1)|0;
        $86 = (($pItem$01) + 20|0);
        $87 = ($85|0)>(0);
        if ($87) {
         $i$02 = $85;$pItem$01 = $86;$testAddr$13 = $testAddr$2;
        } else {
         $testAddr$1$lcssa = $testAddr$2;
         break;
        }
       }
      } else {
       $testAddr$1$lcssa = $testAddr$0;
      }
      _sqlite3ReleaseTempReg($pParse,$65);
      _sqlite3ReleaseTempReg($pParse,$66);
      $testAddr$3 = $testAddr$1$lcssa;
     }
    } else {
     $39 = HEAP32[$29>>2]|0;
     _sqlite3SelectDestInit($dest,7,$39);
     $40 = HEAP8[$affinity>>0]|0;
     $41 = (($dest) + 1|0);
     HEAP8[$41>>0] = $40;
     $42 = (($pExpr) + 20|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($43) + 8|0);
     HEAP32[$44>>2] = 0;
     $45 = (_sqlite3Select($pParse,$43,$dest)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      $48 = HEAP32[$42>>2]|0;
      $49 = HEAP32[$48>>2]|0;
      $50 = HEAP32[$22>>2]|0;
      $51 = (($49) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = HEAP32[$52>>2]|0;
      $54 = (_sqlite3BinaryCompareCollSeq($pParse,$50,$53)|0);
      $55 = (($47) + 20|0);
      HEAP32[$55>>2] = $54;
      $testAddr$3 = $testAddr$0;
      break;
     }
     _sqlite3KeyInfoUnref($47);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $88 = ($47|0)==(0|0);
   if ($88) {
    $rReg$0 = 0;$testAddr$4 = $testAddr$3;
   } else {
    _sqlite3VdbeChangeP4($0,$33,$47,-6);
    $rReg$0 = 0;$testAddr$4 = $testAddr$3;
   }
  } else {
   $89 = (($pExpr) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($pParse) + 76|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$91>>2] = $93;
   _sqlite3SelectDestInit($dest1,0,$93);
   $94 = HEAP8[$$pre$phiZ2D>>0]|0;
   $95 = ($94<<24>>24)==(119);
   if ($95) {
    HEAP8[$dest1>>0] = 6;
    $96 = (($dest1) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    (_sqlite3VdbeAddOp2($0,28,0,$97)|0);
   } else {
    HEAP8[$dest1>>0] = 3;
    $98 = (($dest1) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    (_sqlite3VdbeAddOp2($0,25,0,$99)|0);
   }
   $100 = HEAP32[$pParse>>2]|0;
   $101 = (($90) + 68|0);
   $102 = HEAP32[$101>>2]|0;
   _sqlite3ExprDelete($100,$102);
   $103 = (_sqlite3PExpr($pParse,132,0,0,((10304 + 8|0)))|0);
   HEAP32[$101>>2] = $103;
   $104 = (($90) + 8|0);
   HEAP32[$104>>2] = 0;
   $105 = (_sqlite3Select($pParse,$90,$dest1)|0);
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (($dest1) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $rReg$0 = $108;$testAddr$4 = $testAddr$0;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $109 = ($testAddr$4|0)>(-1);
 if ($109) {
  _sqlite3VdbeJumpHere($0,$testAddr$4);
 }
 _sqlite3ExprCachePop($pParse);
 $$0 = $rReg$0;
 STACKTOP = sp;return ($$0|0);
}
function _exprToRegister($p,$iReg) {
 $p = $p|0;
 $iReg = $iReg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = (($p) + 38|0);
 HEAP8[$1>>0] = $0;
 HEAP8[$p>>0] = -97;
 $2 = (($p) + 28|0);
 HEAP32[$2>>2] = $iReg;
 $3 = (($p) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -4097;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function _sqlite3CodeOnce($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (($pParse) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = (_sqlite3VdbeAddOp1($0,43,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function _sqlite3SelectDestInit($pDest,$eDest,$iParm) {
 $pDest = $pDest|0;
 $eDest = $eDest|0;
 $iParm = $iParm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $eDest&255;
 HEAP8[$pDest>>0] = $0;
 $1 = (($pDest) + 4|0);
 HEAP32[$1>>2] = $iParm;
 $2 = (($pDest) + 1|0);
 HEAP8[$2>>0] = 0;
 $3 = (($pDest) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (($pDest) + 12|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3BinaryCompareCollSeq($pParse,$pLeft,$pRight) {
 $pParse = $pParse|0;
 $pLeft = $pLeft|0;
 $pRight = $pRight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pColl$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pLeft) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 256;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $5 = ($pRight|0)==(0|0);
   if (!($5)) {
    $6 = (($pRight) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7 & 256;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (_sqlite3ExprCollSeq($pParse,$pRight)|0);
     $pColl$0 = $10;
     break;
    }
   }
   $11 = (_sqlite3ExprCollSeq($pParse,$pLeft)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = (_sqlite3ExprCollSeq($pParse,$pRight)|0);
    $pColl$0 = $13;
   } else {
    $pColl$0 = $11;
   }
  } else {
   $4 = (_sqlite3ExprCollSeq($pParse,$pLeft)|0);
   $pColl$0 = $4;
  }
 } while(0);
 STACKTOP = sp;return ($pColl$0|0);
}
function _sqlite3ExprCodeAtInit($pParse,$pExpr,$regDest,$reusable) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $regDest = $regDest|0;
 $reusable = $reusable|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 320|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (_sqlite3ExprDup($2,$pExpr,0)|0);
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 $4 = (_sqlite3ExprListAppend($pParse$idx$val,$1,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$0>>2] = $4;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($4) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9) + (($7*20)|0)|0) + 16|0);
 HEAP32[$10>>2] = $regDest;
 $11 = ((($9) + (($7*20)|0)|0) + 13|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($reusable << 2)&255;
 $14 = $13 & 4;
 $15 = $12 & -5;
 $16 = $15 | $14;
 HEAP8[$11>>0] = $16;
 HEAP32[$0>>2] = $4;
 STACKTOP = sp;return;
}
function _sqlite3VdbeGetOp($p,$addr) {
 $p = $p|0;
 $addr = $addr|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($addr|0)<(0);
 if ($0) {
  $1 = (($p) + 32|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + -1)|0;
  $$0 = $3;
 } else {
  $$0 = $addr;
 }
 $4 = HEAP32[$p>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $$01 = 19448;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($p) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($$0*20)|0)|0);
 $$01 = $10;
 STACKTOP = sp;return ($$01|0);
}
function _exprIsConst($p,$initFlag) {
 $p = $p|0;
 $initFlag = $initFlag|0;
 var $0 = 0, $1 = 0, $2 = 0, $initFlag$c = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 $0 = (($w) + 20|0);
 $initFlag$c = $initFlag;
 HEAP32[$0>>2] = $initFlag$c;
 HEAP32[$w>>2] = 169;
 $1 = (($w) + 4|0);
 HEAP32[$1>>2] = 170;
 (_sqlite3WalkExpr($w,$p)|0);
 $2 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _exprNodeIsConstant($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWalker) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = (($pExpr) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if ($6) {
   label = 4;
  } else {
   HEAP32[$0>>2] = 0;
   $$0 = 2;
  }
 } else {
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $7 = HEAP8[$pExpr>>0]|0;
   $8 = $7&255;
   switch ($8|0) {
   case 153:  {
    $9 = ($1|0)==(2);
    if ($9) {
     $$0 = 0;
     break L4;
    }
    $10 = (($pExpr) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 524288;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $$0 = 0;
     break L4;
    }
    break;
   }
   case 156: case 155: case 154: case 27:  {
    break;
   }
   default: {
    $$0 = 0;
    break L4;
   }
   }
   HEAP32[$0>>2] = 0;
   $$0 = 2;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _selectNodeIsConstant($pWalker,$NotUsed) {
 $pWalker = $pWalker|0;
 $NotUsed = $NotUsed|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWalker) + 20|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return 2;
}
function _dup8bytes($v$0$0$val,$in) {
 $v$0$0$val = $v$0$0$val|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeDb($v$0$0$val)|0);
 $1 = (_sqlite3DbMallocRaw($0,8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = $in;
 $4 = $3;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 $9 = $1;
 $10 = $9;
 HEAP8[$10>>0]=$5&255;HEAP8[$10+1>>0]=($5>>8)&255;HEAP8[$10+2>>0]=($5>>16)&255;HEAP8[$10+3>>0]=$5>>24;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP8[$12>>0]=$8&255;HEAP8[$12+1>>0]=($8>>8)&255;HEAP8[$12+2>>0]=($8>>16)&255;HEAP8[$12+3>>0]=$8>>24;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3ExprCachePinRegister($pParse,$iReg) {
 $pParse = $pParse|0;
 $iReg = $iReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($iReg|0);
 if ($2) {
  $3 = (($pParse) + 126|0);
  HEAP8[$3>>0] = 0;
 }
 $4 = (($pParse) + 152|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($iReg|0);
 if ($6) {
  $7 = (($pParse) + 146|0);
  HEAP8[$7>>0] = 0;
 }
 $8 = (($pParse) + 172|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($iReg|0);
 if ($10) {
  $11 = (($pParse) + 166|0);
  HEAP8[$11>>0] = 0;
 }
 $12 = (($pParse) + 192|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==($iReg|0);
 if ($14) {
  $15 = (($pParse) + 186|0);
  HEAP8[$15>>0] = 0;
 }
 $16 = (($pParse) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($iReg|0);
 if ($18) {
  $19 = (($pParse) + 206|0);
  HEAP8[$19>>0] = 0;
 }
 $20 = (($pParse) + 232|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==($iReg|0);
 if ($22) {
  $23 = (($pParse) + 226|0);
  HEAP8[$23>>0] = 0;
 }
 $24 = (($pParse) + 252|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==($iReg|0);
 if ($26) {
  $27 = (($pParse) + 246|0);
  HEAP8[$27>>0] = 0;
 }
 $28 = (($pParse) + 272|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==($iReg|0);
 if ($30) {
  $31 = (($pParse) + 266|0);
  HEAP8[$31>>0] = 0;
 }
 $32 = (($pParse) + 292|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==($iReg|0);
 if ($34) {
  $35 = (($pParse) + 286|0);
  HEAP8[$35>>0] = 0;
 }
 $36 = (($pParse) + 312|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==($iReg|0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($pParse) + 306|0);
 HEAP8[$39>>0] = 0;
 STACKTOP = sp;return;
}
function _sqlite3ExprCacheStore($pParse,$iTab,$iCol,$iReg) {
 $pParse = $pParse|0;
 $iTab = $iTab|0;
 $iCol = $iCol|0;
 $iReg = $iReg|0;
 var $$minLru$0$1 = 0, $$minLru$0$2 = 0, $$minLru$0$3 = 0, $$minLru$0$4 = 0, $$minLru$0$5 = 0, $$minLru$0$6 = 0, $$minLru$0$7 = 0, $$minLru$0$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $i$1$idxLru$0 = 0, $i$1$idxLru$0$1 = 0, $i$1$idxLru$0$2 = 0, $i$1$idxLru$0$3 = 0, $i$1$idxLru$0$4 = 0, $i$1$idxLru$0$5 = 0, $i$1$idxLru$0$6 = 0;
 var $i$1$idxLru$0$7 = 0, $i$1$idxLru$0$8 = 0, $i$1$idxLru$0$9 = 0, $not$ = 0, $p$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 60|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & 2;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($pParse) + 120|0);
 $i$06 = 0;$p$07 = $5;
 while(1) {
  $36 = (($p$07) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   label = 5;
   break;
  }
  $49 = (($i$06) + 1)|0;
  $50 = (($p$07) + 20|0);
  $51 = ($49|0)<(10);
  if ($51) {
   $i$06 = $49;$p$07 = $50;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  $39 = (($pParse) + 104|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($p$07) + 8|0);
  HEAP32[$41>>2] = $40;
  HEAP32[$p$07>>2] = $iTab;
  $42 = $iCol&65535;
  $43 = (($p$07) + 4|0);
  HEAP16[$43>>1] = $42;
  HEAP32[$36>>2] = $iReg;
  $44 = (($p$07) + 6|0);
  HEAP8[$44>>0] = 0;
  $45 = (($pParse) + 108|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$45>>2] = $47;
  $48 = (($p$07) + 16|0);
  HEAP32[$48>>2] = $46;
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 136|0);
 $7 = HEAP32[$6>>2]|0;
 $not$ = ($7|0)==(2147483647);
 $i$1$idxLru$0 = $not$ << 31 >> 31;
 $8 = (($pParse) + 156|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($7|0);
 $$minLru$0$1 = $10 ? $9 : $7;
 $i$1$idxLru$0$1 = $10 ? 1 : $i$1$idxLru$0;
 $11 = (($pParse) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<($$minLru$0$1|0);
 $$minLru$0$2 = $13 ? $12 : $$minLru$0$1;
 $i$1$idxLru$0$2 = $13 ? 2 : $i$1$idxLru$0$1;
 $14 = (($pParse) + 196|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($$minLru$0$2|0);
 $$minLru$0$3 = $16 ? $15 : $$minLru$0$2;
 $i$1$idxLru$0$3 = $16 ? 3 : $i$1$idxLru$0$2;
 $17 = (($pParse) + 216|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)<($$minLru$0$3|0);
 $$minLru$0$4 = $19 ? $18 : $$minLru$0$3;
 $i$1$idxLru$0$4 = $19 ? 4 : $i$1$idxLru$0$3;
 $20 = (($pParse) + 236|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($$minLru$0$4|0);
 $$minLru$0$5 = $22 ? $21 : $$minLru$0$4;
 $i$1$idxLru$0$5 = $22 ? 5 : $i$1$idxLru$0$4;
 $23 = (($pParse) + 256|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)<($$minLru$0$5|0);
 $$minLru$0$6 = $25 ? $24 : $$minLru$0$5;
 $i$1$idxLru$0$6 = $25 ? 6 : $i$1$idxLru$0$5;
 $26 = (($pParse) + 276|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)<($$minLru$0$6|0);
 $$minLru$0$7 = $28 ? $27 : $$minLru$0$6;
 $i$1$idxLru$0$7 = $28 ? 7 : $i$1$idxLru$0$6;
 $29 = (($pParse) + 296|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)<($$minLru$0$7|0);
 $$minLru$0$8 = $31 ? $30 : $$minLru$0$7;
 $i$1$idxLru$0$8 = $31 ? 8 : $i$1$idxLru$0$7;
 $32 = (($pParse) + 316|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<($$minLru$0$8|0);
 $i$1$idxLru$0$9 = $34 ? 9 : $i$1$idxLru$0$8;
 $35 = ($i$1$idxLru$0$9|0)>(-1);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $52 = (($pParse) + 104|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 128|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 120|0);
 HEAP32[$55>>2] = $iTab;
 $56 = $iCol&65535;
 $57 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 124|0);
 HEAP16[$57>>1] = $56;
 $58 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 132|0);
 HEAP32[$58>>2] = $iReg;
 $59 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 126|0);
 HEAP8[$59>>0] = 0;
 $60 = (($pParse) + 108|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 $63 = ((($pParse) + (($i$1$idxLru$0$9*20)|0)|0) + 136|0);
 HEAP32[$63>>2] = $61;
 STACKTOP = sp;return;
}
function _sqlite3CompareAffinity($pExpr,$aff2) {
 $pExpr = $pExpr|0;
 $aff2 = $aff2|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ExprAffinity($pExpr)|0);
 $1 = $0&255;
 $2 = ($0<<24>>24)==(0);
 $3 = ($aff2<<24>>24)==(0);
 $or$cond = $2 | $3;
 if (!($or$cond)) {
  $4 = ($0<<24>>24)>(98);
  $5 = ($aff2<<24>>24)>(98);
  $or$cond1 = $4 | $5;
  $$ = $or$cond1 ? 99 : 98;
  STACKTOP = sp;return ($$|0);
 }
 $6 = $0 | $aff2;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = 98;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $aff2&255;
 $9 = (($1) + ($8))|0;
 $10 = $9&255;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _isCandidateForInOpt($p) {
 $p = $p|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($p) + 60|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $4 = (($p) + 6|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5 & 5;
   $7 = ($6<<16>>16)==(0);
   if ($7) {
    $8 = (($p) + 68|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $11 = (($p) + 44|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $14 = (($p) + 40|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==(1);
      if ($17) {
       $18 = (($15) + 28|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = ($19|0)==(0|0);
       if ($20) {
        $21 = (($15) + 24|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($22|0)==(0|0);
        if ($23) {
         $$0 = 0;
        } else {
         $24 = (($22) + 44|0);
         $25 = HEAP8[$24>>0]|0;
         $26 = $25 & 16;
         $27 = ($26<<24>>24)==(0);
         if ($27) {
          $28 = HEAP32[$p>>2]|0;
          $29 = HEAP32[$28>>2]|0;
          $30 = ($29|0)==(1);
          if ($30) {
           $31 = (($28) + 8|0);
           $32 = HEAP32[$31>>2]|0;
           $33 = HEAP32[$32>>2]|0;
           $34 = HEAP8[$33>>0]|0;
           $35 = ($34<<24>>24)==(-102);
           $$ = $35&1;
           $$0 = $$;
          } else {
           $$0 = 0;
          }
         } else {
          $$0 = 0;
         }
        }
       } else {
        $$0 = 0;
       }
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IndexAffinityOk($pExpr,$idx_affinity) {
 $pExpr = $pExpr|0;
 $idx_affinity = $idx_affinity|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_comparisonAffinity($pExpr)|0);
 $1 = $0 << 24 >> 24;
 if ((($1|0) == 97)) {
  $2 = ($idx_affinity<<24>>24)==(97);
  $3 = $2&1;
  $$0 = $3;
 } else if ((($1|0) == 98)) {
  $$0 = 1;
 } else {
  $4 = ($idx_affinity<<24>>24)>(98);
  $5 = $4&1;
  $$0 = $5;
 }
 STACKTOP = sp;return ($$0|0);
}
function _binaryCompareP5($pExpr1,$pExpr2,$jumpIfNull) {
 $pExpr1 = $pExpr1|0;
 $pExpr2 = $pExpr2|0;
 $jumpIfNull = $jumpIfNull|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ExprAffinity($pExpr2)|0);
 $1 = (_sqlite3CompareAffinity($pExpr1,$0)|0);
 $2 = $1&255;
 $3 = $2 | $jumpIfNull;
 $4 = $3&255;
 STACKTOP = sp;return ($4|0);
}
function _sqlite3ExprIsConstantNotJoin($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_exprIsConst($p,3)|0);
 STACKTOP = sp;return ($0|0);
}
function _collationMatch($zColl,$pIndex) {
 $zColl = $zColl|0;
 $pIndex = $pIndex|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pIndex) + 32|0);
 $1 = (($pIndex) + 52|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pIndex) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $i$01 = 0;
 while(1) {
  $6 = (($5) + ($i$01<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)>(-1);
  if ($8) {
   $9 = HEAP32[$0>>2]|0;
   $10 = (($9) + ($i$01<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_sqlite3_stricmp($11,$zColl)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = 1;
    label = 6;
    break;
   }
  }
  $14 = (($i$01) + 1)|0;
  $15 = $2&65535;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $i$01 = $14;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _detachFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $pDb$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, $zErr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zErr = sp + 32|0;
 $0 = HEAP32[$argv>>2]|0;
 $1 = (_sqlite3_value_text($0)|0);
 $2 = (_sqlite3_context_db_handle($context)|0);
 $3 = ($1|0)==(0|0);
 $$ = $3 ? 1728 : $1;
 $4 = (($2) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 L1: do {
  if ($6) {
   $7 = (($2) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $i$02 = 0;
   while(1) {
    $9 = (($8) + ($i$02<<4)|0);
    $10 = ((($8) + ($i$02<<4)|0) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $13 = HEAP32[$9>>2]|0;
     $14 = (_sqlite3_stricmp($13,$$)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $i$0$lcssa = $i$02;$pDb$1 = $9;
      break L1;
     }
    }
    $16 = (($i$02) + 1)|0;
    $17 = ($16|0)<($5|0);
    if ($17) {
     $i$02 = $16;
    } else {
     $i$0$lcssa = $16;$pDb$1 = $9;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;$pDb$1 = 0;
  }
 } while(0);
 $18 = ($i$0$lcssa|0)<($5|0);
 do {
  if ($18) {
   $19 = ($i$0$lcssa|0)<(2);
   if ($19) {
    HEAP32[$vararg_buffer1>>2] = $$;
    (_sqlite3_snprintf(128,$zErr,19552,$vararg_buffer1)|0);
    break;
   }
   $20 = (($2) + 62|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    (_sqlite3_snprintf(128,$zErr,19584,$vararg_buffer4)|0);
    break;
   }
   $23 = (($pDb$1) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $$idx = (($24) + 8|0);
   $$idx$val = HEAP8[$$idx>>0]|0;
   $25 = (_sqlite3BtreeIsInReadTrans($$idx$val)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$idx1 = (($24) + 16|0);
    $$idx1$val = HEAP32[$$idx1>>2]|0;
    $27 = (_sqlite3BtreeIsInBackup($$idx1$val)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     _sqlite3BtreeClose($24);
     HEAP32[$23>>2] = 0;
     $29 = (($pDb$1) + 12|0);
     HEAP32[$29>>2] = 0;
     _sqlite3ResetAllSchemasOfConnection($2);
     STACKTOP = sp;return;
    }
   }
   HEAP32[$vararg_buffer6>>2] = $$;
   (_sqlite3_snprintf(128,$zErr,19632,$vararg_buffer6)|0);
  } else {
   HEAP32[$vararg_buffer>>2] = $$;
   (_sqlite3_snprintf(128,$zErr,19528,$vararg_buffer)|0);
  }
 } while(0);
 _sqlite3_result_error($context,$zErr,-1);
 STACKTOP = sp;return;
}
function _codeAttach($pParse,$type,$pFunc,$pAuthArg,$pFilename,$pDbname,$pKey) {
 $pParse = $pParse|0;
 $type = $type|0;
 $pFunc = $pFunc|0;
 $pAuthArg = $pAuthArg|0;
 $pFilename = $pFilename|0;
 $pDbname = $pDbname|0;
 $pKey = $pKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sName = 0, $zAuthArg$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sName = sp;
 $0 = HEAP32[$pParse>>2]|0;
 ;HEAP32[$sName+0>>2]=0|0;HEAP32[$sName+4>>2]=0|0;HEAP32[$sName+8>>2]=0|0;HEAP32[$sName+12>>2]=0|0;HEAP32[$sName+16>>2]=0|0;HEAP32[$sName+20>>2]=0|0;HEAP32[$sName+24>>2]=0|0;HEAP32[$sName+28>>2]=0|0;
 HEAP32[$sName>>2] = $pParse;
 $1 = (_resolveAttachExpr($sName,$pFilename)|0);
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_resolveAttachExpr($sName,$pDbname)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (_resolveAttachExpr($sName,$pKey)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $10 = ($pAuthArg|0)==(0|0);
     if (!($10)) {
      $11 = HEAP8[$pAuthArg>>0]|0;
      $12 = ($11<<24>>24)==(97);
      if ($12) {
       $13 = (($pAuthArg) + 8|0);
       $14 = HEAP32[$13>>2]|0;
       $zAuthArg$0 = $14;
      } else {
       $zAuthArg$0 = 0;
      }
      $15 = (_sqlite3AuthCheck($pParse,$type,$zAuthArg$0,0,0)|0);
      $16 = ($15|0)==(0);
      if (!($16)) {
       break;
      }
     }
     $17 = (_sqlite3GetVdbe($pParse)|0);
     $18 = (_sqlite3GetTempRange($pParse,4)|0);
     _sqlite3ExprCode($pParse,$pFilename,$18);
     $19 = (($18) + 1)|0;
     _sqlite3ExprCode($pParse,$pDbname,$19);
     $20 = (($18) + 2)|0;
     _sqlite3ExprCode($pParse,$pKey,$20);
     $21 = ($17|0)==(0|0);
     if (!($21)) {
      $22 = (($18) + 3)|0;
      $23 = HEAP16[$pFunc>>1]|0;
      $24 = $23 << 16 >> 16;
      $25 = (($22) - ($24))|0;
      (_sqlite3VdbeAddOp3($17,1,0,$25,$22)|0);
      $26 = HEAP16[$pFunc>>1]|0;
      $27 = $26&255;
      _sqlite3VdbeChangeP5($17,$27);
      _sqlite3VdbeChangeP4($17,-1,$pFunc,-5);
      $28 = ($type|0)==(24);
      $29 = $28&1;
      (_sqlite3VdbeAddOp1($17,138,$29)|0);
     }
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $7 = (($pParse) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
 }
 _sqlite3ExprDelete($0,$pFilename);
 _sqlite3ExprDelete($0,$pDbname);
 _sqlite3ExprDelete($0,$pKey);
 STACKTOP = sp;return;
}
function _resolveAttachExpr($pName,$pExpr) {
 $pName = $pName|0;
 $pExpr = $pExpr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pExpr|0)==(0|0);
 do {
  if ($0) {
   $rc$0 = 0;
  } else {
   $1 = HEAP8[$pExpr>>0]|0;
   $2 = ($1<<24>>24)==(27);
   if ($2) {
    HEAP8[$pExpr>>0] = 97;
    $rc$0 = 0;
    break;
   } else {
    $3 = (_sqlite3ResolveExprNames($pName,$pExpr)|0);
    $rc$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($rc$0|0);
}
function _attachFunc($context,$NotUsed,$argv) {
 $context = $context|0;
 $NotUsed = $NotUsed|0;
 $argv = $argv|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aNew$0$in = 0, $flags = 0, $i$014 = 0, $or$cond2 = 0, $pVfs = 0, $rc$0 = 0, $rc$1 = 0, $rc$2 = 0, $rc$35 = 0, $rc$4 = 0, $rc$47 = 0, $rc$48 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $zErr = 0, $zErrDyn = 0, $zName$0 = 0, $zPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zPath = sp + 68|0;
 $zErr = sp + 64|0;
 $flags = sp + 60|0;
 $zErrDyn = sp + 56|0;
 $pVfs = sp + 52|0;
 $0 = (_sqlite3_context_db_handle($context)|0);
 HEAP32[$zPath>>2] = 0;
 HEAP32[$zErr>>2] = 0;
 HEAP32[$zErrDyn>>2] = 0;
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_sqlite3_value_text($1)|0);
 $3 = (($argv) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3_value_text($4)|0);
 $6 = ($2|0)==(0|0);
 $$ = $6 ? 1728 : $2;
 $7 = ($5|0)==(0|0);
 $zName$0 = $7 ? 1728 : $5;
 $8 = (($0) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 2)|0;
 $13 = ($9|0)<($12|0);
 L1: do {
  if ($13) {
   $15 = (($0) + 62|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $21 = (_sqlite3MPrintf($0,19752,$vararg_buffer1)|0);
    HEAP32[$zErrDyn>>2] = $21;
    $113 = $21;$rc$4 = 0;
    label = 31;
    break;
   }
   $18 = ($9|0)>(0);
   $19 = (($0) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   L7: do {
    if ($18) {
     $i$014 = 0;
     while(1) {
      $24 = (($20) + ($i$014<<4)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (_sqlite3_stricmp($25,$zName$0)|0);
      $27 = ($26|0)==(0);
      $23 = (($i$014) + 1)|0;
      if ($27) {
       break;
      }
      $22 = ($23|0)<($9|0);
      if ($22) {
       $i$014 = $23;
      } else {
       break L7;
      }
     }
     HEAP32[$vararg_buffer3>>2] = $zName$0;
     $28 = (_sqlite3MPrintf($0,19800,$vararg_buffer3)|0);
     HEAP32[$zErrDyn>>2] = $28;
     $113 = $28;$rc$4 = 0;
     label = 31;
     break L1;
    }
   } while(0);
   $29 = (($0) + 448|0);
   $30 = ($20|0)==($29|0);
   do {
    if ($30) {
     $31 = (_sqlite3DbMallocRaw($0,48)|0);
     $32 = ($31|0)==(0|0);
     if ($32) {
      STACKTOP = sp;return;
     } else {
      $33 = HEAP32[$19>>2]|0;
      ;HEAP32[$31+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$31+16>>2]=HEAP32[$33+16>>2]|0;HEAP32[$31+20>>2]=HEAP32[$33+20>>2]|0;HEAP32[$31+24>>2]=HEAP32[$33+24>>2]|0;HEAP32[$31+28>>2]=HEAP32[$33+28>>2]|0;
      $aNew$0$in = $31;
      break;
     }
    } else {
     $34 = $9 << 4;
     $35 = (($34) + 16)|0;
     $36 = (_sqlite3DbRealloc($0,$20,$35)|0);
     $37 = ($36|0)==(0|0);
     if ($37) {
      STACKTOP = sp;return;
     } else {
      $aNew$0$in = $36;
     }
    }
   } while(0);
   HEAP32[$19>>2] = $aNew$0$in;
   $38 = HEAP32[$8>>2]|0;
   $39 = (($aNew$0$in) + ($38<<4)|0);
   ;HEAP32[$39+0>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;HEAP32[$39+12>>2]=0|0;
   $40 = (($0) + 48|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$flags>>2] = $41;
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_sqlite3ParseUri($44,$$,$flags,$pVfs,$zPath,$zErr)|0);
   if ((($45|0) == 7)) {
    $46 = (($0) + 64|0);
    HEAP8[$46>>0] = 1;
   } else if ((($45|0) == 0)) {
    $48 = HEAP32[$flags>>2]|0;
    $49 = $48 | 256;
    HEAP32[$flags>>2] = $49;
    $50 = HEAP32[$pVfs>>2]|0;
    $51 = HEAP32[$zPath>>2]|0;
    $52 = ((($aNew$0$in) + ($38<<4)|0) + 4|0);
    $53 = (_sqlite3BtreeOpen($50,$51,$0,$52,0,$49)|0);
    $54 = HEAP32[$zPath>>2]|0;
    _sqlite3_free($54);
    $55 = HEAP32[$8>>2]|0;
    $56 = (($55) + 1)|0;
    HEAP32[$8>>2] = $56;
    if ((($53|0) == 0)) {
     $58 = HEAP32[$52>>2]|0;
     $59 = (_sqlite3SchemaGet($0,$58)|0);
     $60 = ((($aNew$0$in) + ($38<<4)|0) + 12|0);
     HEAP32[$60>>2] = $59;
     $61 = ($59|0)==(0|0);
     if ($61) {
      $rc$0 = 7;
     } else {
      $62 = (($59) + 76|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = ($63<<24>>24)==(0);
      if ($64) {
       $rc$0 = 0;
      } else {
       $65 = (($59) + 77|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = HEAP32[$19>>2]|0;
       $68 = (($67) + 12|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (($69) + 77|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($66<<24>>24)==($71<<24>>24);
       if ($72) {
        $rc$0 = 0;
       } else {
        $73 = (_sqlite3MPrintf($0,18896,$vararg_buffer8)|0);
        HEAP32[$zErrDyn>>2] = $73;
        $rc$0 = 1;
       }
      }
     }
     $74 = HEAP32[$52>>2]|0;
     $$idx = (($74) + 4|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
     $75 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
     $76 = (($0) + 65|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     (_sqlite3PagerLockingMode($75,$78)|0);
     $79 = HEAP32[$52>>2]|0;
     $80 = HEAP32[$19>>2]|0;
     $81 = (($80) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (_sqlite3BtreeSecureDelete($82,-1)|0);
     (_sqlite3BtreeSecureDelete($79,$83)|0);
     $84 = HEAP32[$52>>2]|0;
     $85 = (($0) + 24|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $86 & 28;
     $88 = $87 | 3;
     $$idx3$val = HEAP32[$84>>2]|0;
     $$idx4 = (($84) + 4|0);
     $$idx4$val = HEAP32[$$idx4>>2]|0;
     _sqlite3BtreeSetPagerFlags($$idx3$val,$$idx4$val,$88);
     $rc$1 = $rc$0;
    } else if ((($53|0) == 19)) {
     $57 = (_sqlite3MPrintf($0,19832,$vararg_buffer6)|0);
     HEAP32[$zErrDyn>>2] = $57;
     $rc$1 = 1;
    } else {
     $rc$1 = $53;
    }
    $89 = ((($aNew$0$in) + ($38<<4)|0) + 8|0);
    HEAP8[$89>>0] = 3;
    $90 = (_sqlite3DbStrDup($0,$zName$0)|0);
    HEAP32[$39>>2] = $90;
    $91 = ($rc$1|0)==(0);
    $92 = ($90|0)==(0|0);
    $or$cond2 = $91 & $92;
    $rc$2 = $or$cond2 ? 7 : $rc$1;
    $93 = ($rc$2|0)==(0);
    if ($93) {
     _sqlite3BtreeEnterAll($0);
     $94 = (_sqlite3Init($0,$zErrDyn)|0);
     $95 = ($94|0)==(0);
     if ($95) {
      STACKTOP = sp;return;
     } else {
      $rc$35 = $94;
     }
    } else {
     $rc$35 = $rc$2;
    }
    $96 = HEAP32[$8>>2]|0;
    $97 = (($96) + -1)|0;
    $98 = HEAP32[$19>>2]|0;
    $99 = ((($98) + ($97<<4)|0) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(0|0);
    if (!($101)) {
     _sqlite3BtreeClose($100);
     $102 = HEAP32[$19>>2]|0;
     $103 = ((($102) + ($97<<4)|0) + 4|0);
     HEAP32[$103>>2] = 0;
     $104 = HEAP32[$19>>2]|0;
     $105 = ((($104) + ($97<<4)|0) + 12|0);
     HEAP32[$105>>2] = 0;
    }
    _sqlite3ResetAllSchemasOfConnection($0);
    HEAP32[$8>>2] = $97;
    if ((($rc$35|0) == 7) | (($rc$35|0) == 3082)) {
     $106 = (($0) + 64|0);
     HEAP8[$106>>0] = 1;
     $107 = HEAP32[$zErrDyn>>2]|0;
     _sqlite3DbFree($0,$107);
     $108 = (_sqlite3MPrintf($0,5600,$vararg_buffer10)|0);
     HEAP32[$zErrDyn>>2] = $108;
     $113 = $108;$rc$4 = $rc$35;
     label = 31;
     break;
    }
    $109 = HEAP32[$zErrDyn>>2]|0;
    $110 = ($109|0)==(0|0);
    if (!($110)) {
     $114 = $109;$rc$47 = $rc$35;
     label = 32;
     break;
    }
    HEAP32[$vararg_buffer12>>2] = $$;
    $111 = (_sqlite3MPrintf($0,19864,$vararg_buffer12)|0);
    HEAP32[$zErrDyn>>2] = $111;
    $113 = $111;$rc$4 = $rc$35;
    label = 31;
    break;
   }
   $47 = HEAP32[$zErr>>2]|0;
   _sqlite3_result_error($context,$47,-1);
   _sqlite3_free($47);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer>>2] = $11;
   $14 = (_sqlite3MPrintf($0,19712,$vararg_buffer)|0);
   HEAP32[$zErrDyn>>2] = $14;
   $113 = $14;$rc$4 = 0;
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $112 = ($113|0)==(0|0);
  if ($112) {
   $rc$48 = $rc$4;
  } else {
   $114 = $113;$rc$47 = $rc$4;
   label = 32;
  }
 }
 if ((label|0) == 32) {
  _sqlite3_result_error($context,$114,-1);
  $115 = HEAP32[$zErrDyn>>2]|0;
  _sqlite3DbFree($0,$115);
  $rc$48 = $rc$47;
 }
 $116 = ($rc$48|0)==(0);
 if ($116) {
  STACKTOP = sp;return;
 }
 _sqlite3_result_error_code($context,$rc$48);
 STACKTOP = sp;return;
}
function _sqlite3PagerLockingMode($pPager,$eMode) {
 $pPager = $pPager|0;
 $eMode = $eMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eMode|0)>(-1);
 if ($0) {
  $1 = (($pPager) + 12|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $4 = (($pPager) + 208|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_sqlite3WalHeapMemory($5)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = $eMode&255;
    $9 = (($pPager) + 4|0);
    HEAP8[$9>>0] = $8;
   }
  }
 }
 $10 = (($pPager) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function _sqlite3BtreeSecureDelete($p,$newFlag) {
 $p = $p|0;
 $newFlag = $newFlag|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $1 = ($newFlag|0)>(-1);
 $2 = HEAP32[$p$idx1>>2]|0;
 $3 = (($2) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 if ($1) {
  $5 = $4&65535;
  $6 = $5 & 65531;
  $7 = $6&65535;
  HEAP16[$3>>1] = $7;
  $8 = ($newFlag|0)==(0);
  if ($8) {
   $12 = $7;
  } else {
   $9 = $5 | 4;
   $10 = $9&65535;
   HEAP16[$3>>1] = $10;
   $12 = $10;
  }
 } else {
  $12 = $4;
 }
 $11 = ($12&65535) >>> 2;
 $$lobit = $11 & 1;
 $13 = $$lobit&65535;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeSetPagerFlags($p$0$0$val,$p$0$1$val,$pgFlags) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $pgFlags = $pgFlags|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = HEAP32[$p$0$1$val>>2]|0;
 _sqlite3PagerSetFlags($0,$pgFlags);
 STACKTOP = sp;return;
}
function _sqlite3PagerSetFlags($pPager,$pgFlags) {
 $pPager = $pPager|0;
 $pgFlags = $pgFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp1 = 0, $storemerge = 0;
 var $storemerge$in = 0, $storemerge2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pgFlags & 3;
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (($pPager) + 7|0);
  HEAP8[$2>>0] = 1;
  $10 = 0;$12 = $2;
 } else {
  $3 = (($pPager) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)!=(0);
  $phitmp = $5&1;
  $6 = (($pPager) + 7|0);
  HEAP8[$6>>0] = $phitmp;
  $7 = ($0|0)==(3);
  if ($7) {
   $8 = ($4<<24>>24)==(0);
   $phitmp1 = $8&1;
   $10 = $phitmp1;$12 = $6;
  } else {
   $10 = 0;$12 = $6;
  }
 }
 $9 = (($pPager) + 8|0);
 HEAP8[$9>>0] = $10;
 $11 = HEAP8[$12>>0]|0;
 $13 = ($11<<24>>24)==(0);
 do {
  if ($13) {
   $16 = $pgFlags & 4;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = (($pPager) + 11|0);
    HEAP8[$18>>0] = 3;
    $19 = (($pPager) + 9|0);
    HEAP8[$19>>0] = 3;
    $27 = 3;
    break;
   }
   $20 = $pgFlags & 8;
   $21 = ($20|0)==(0);
   $22 = (($pPager) + 11|0);
   HEAP8[$22>>0] = 2;
   $23 = (($pPager) + 9|0);
   if ($21) {
    HEAP8[$23>>0] = 2;
    $27 = 2;
    break;
   } else {
    HEAP8[$23>>0] = 3;
    $27 = 2;
    break;
   }
  } else {
   $14 = (($pPager) + 11|0);
   HEAP8[$14>>0] = 0;
   $15 = (($pPager) + 9|0);
   HEAP8[$15>>0] = 0;
   $27 = 0;
  }
 } while(0);
 $24 = (($pPager) + 10|0);
 $25 = ($10<<24>>24)==(0);
 if ($25) {
  $storemerge2 = $27;
 } else {
  $26 = $27&255;
  $28 = $26 | 32;
  $29 = $28&255;
  $storemerge2 = $29;
 }
 HEAP8[$24>>0] = $storemerge2;
 $30 = $pgFlags & 16;
 $31 = ($30|0)==(0);
 $32 = (($pPager) + 19|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | 1;
 $36 = $34 & 254;
 $storemerge$in = $31 ? $35 : $36;
 $storemerge = $storemerge$in&255;
 HEAP8[$32>>0] = $storemerge;
 STACKTOP = sp;return;
}
function _sqlite3WalHeapMemory($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWal|0)==(0|0);
 if ($0) {
  $5 = 0;
 } else {
  $1 = (($pWal) + 43|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(2);
  $5 = $3;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _sqlite3CodeVerifyNamedSchema($pParse,$zDb) {
 $pParse = $pParse|0;
 $zDb = $zDb|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($0) + 16|0);
 $5 = ($zDb|0)==(0|0);
 $17 = $2;$i$01 = 0;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = ((($6) + ($i$01<<4)|0) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  do {
   if ($9) {
    $16 = $17;
   } else {
    if (!($5)) {
     $10 = (($6) + ($i$01<<4)|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (_sqlite3_stricmp($zDb,$11)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $16 = $17;
      break;
     }
    }
    _sqlite3CodeVerifySchema($pParse,$i$01);
    $$pre = HEAP32[$1>>2]|0;
    $16 = $$pre;
   }
  } while(0);
  $14 = (($i$01) + 1)|0;
  $15 = ($14|0)<($16|0);
  if ($15) {
   $17 = $16;$i$01 = $14;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3DropTriggerPtr($pParse,$pTrigger) {
 $pParse = $pParse|0;
 $pTrigger = $pTrigger|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pTrigger$idx = 0, $pTrigger$idx$val = 0, $pTrigger$idx1 = 0, $pTrigger$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pTrigger) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3SchemaToIndex($0,$2)|0);
 $pTrigger$idx = (($pTrigger) + 4|0);
 $pTrigger$idx$val = HEAP32[$pTrigger$idx>>2]|0;
 $pTrigger$idx1 = (($pTrigger) + 24|0);
 $pTrigger$idx1$val = HEAP32[$pTrigger$idx1>>2]|0;
 $4 = (_tableOfTrigger($pTrigger$idx$val,$pTrigger$idx1$val)|0);
 $5 = (($0) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<4)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($3|0)==(1);
 $$ = $9 ? 14 : 16;
 $10 = HEAP32[$pTrigger>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = (_sqlite3AuthCheck($pParse,$$,$10,$11,$8)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $9 ? 15056 : 15080;
 $15 = (_sqlite3AuthCheck($pParse,9,$14,0,$8)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = (_sqlite3GetVdbe($pParse)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 _sqlite3BeginWriteOperation($pParse,0,$3);
 _sqlite3OpenMasterTable($pParse,$3);
 $19 = (_sqlite3VdbeAddOpList($17,9,19920)|0);
 $20 = (($19) + 1)|0;
 $21 = HEAP32[$pTrigger>>2]|0;
 _sqlite3VdbeChangeP4($17,$20,$21,0);
 $22 = (($19) + 4)|0;
 _sqlite3VdbeChangeP4($17,$22,1752,-2);
 _sqlite3ChangeCookie($pParse,$3);
 (_sqlite3VdbeAddOp2($17,58,0,0)|0);
 $23 = HEAP32[$pTrigger>>2]|0;
 (_sqlite3VdbeAddOp4($17,122,$3,0,0,$23,0)|0);
 $24 = (($pParse) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)<(3);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 HEAP32[$24>>2] = 3;
 STACKTOP = sp;return;
}
function _tableOfTrigger($pTrigger$0$1$val,$pTrigger$0$7$val) {
 $pTrigger$0$1$val = $pTrigger$0$1$val|0;
 $pTrigger$0$7$val = $pTrigger$0$7$val|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($pTrigger$0$1$val)|0);
 $1 = (($pTrigger$0$7$val) + 8|0);
 $2 = (_sqlite3HashFind($1,$pTrigger$0$1$val,$0)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3OpenMasterTable($p,$iDb) {
 $p = $p|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($p)|0);
 $1 = ($iDb|0)==(1);
 $2 = $1 ? 15056 : 15080;
 _sqlite3TableLock($p,$iDb,1,1,$2);
 (_sqlite3VdbeAddOp4Int($0,53,0,1,$iDb,5)|0);
 $3 = (($p) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$3>>2] = 1;
 STACKTOP = sp;return;
}
function _triggerStepAllocate($db,$op,$pName) {
 $db = $db|0;
 $op = $op|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pName) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40)|0;
 $3 = (_sqlite3DbMallocZero($db,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return ($3|0);
 }
 $5 = (($3) + 40|0);
 $6 = HEAP32[$pName>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 _memcpy(($5|0),($6|0),($7|0))|0;
 $8 = (($3) + 12|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($3) + 16|0);
 HEAP32[$10>>2] = $9;
 HEAP8[$3>>0] = $op;
 STACKTOP = sp;return ($3|0);
}
function _sqlite3SrcListLookup($pParse,$pSrc) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSrc) + 8|0);
 $1 = (_sqlite3LocateTableItem($pParse,0,$0)|0);
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (($pSrc) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3DeleteTable($2,$4);
 HEAP32[$3>>2] = $1;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $6 = (($1) + 40|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = (($7) + 1)<<16>>16;
  HEAP16[$6>>1] = $8;
 }
 $9 = (_sqlite3IndexedByLookup($pParse,$0)|0);
 $10 = ($9|0)==(0);
 $$ = $10 ? $1 : 0;
 STACKTOP = sp;return ($$|0);
}
function _sqlite3FixInit($pFix,$pParse,$iDb,$zType,$pName) {
 $pFix = $pFix|0;
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $zType = $zType|0;
 $pName = $pName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 HEAP32[$pFix>>2] = $pParse;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($iDb<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pFix) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6) + ($iDb<<4)|0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pFix) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = (($pFix) + 16|0);
 HEAP32[$10>>2] = $zType;
 $11 = (($pFix) + 20|0);
 HEAP32[$11>>2] = $pName;
 $12 = ($iDb|0)==(1);
 $13 = $12&1;
 $14 = (($pFix) + 8|0);
 HEAP32[$14>>2] = $13;
 STACKTOP = sp;return;
}
function _sqlite3FixSrcList($pFix,$pList) {
 $pFix = $pFix|0;
 $pList = $pList|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pFix) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$pList>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pList) + 8|0);
 $6 = (($pFix) + 8|0);
 $7 = (($pFix) + 4|0);
 $i$01 = 0;$pItem$02 = $5;
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (($pItem$02) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_sqlite3_stricmp($11,$2)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     label = 7;
     break;
    }
   }
   $20 = HEAP32[$pFix>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   _sqlite3DbFree($21,$11);
   HEAP32[$10>>2] = 0;
   $22 = HEAP32[$7>>2]|0;
   HEAP32[$pItem$02>>2] = $22;
  }
  $23 = (($pItem$02) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_sqlite3FixSelect($pFix,$24)|0);
  $26 = ($25|0)==(0);
  if (!($26)) {
   $$0 = 1;
   label = 12;
   break;
  }
  $27 = (($pItem$02) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_sqlite3FixExpr($pFix,$28)|0);
  $30 = ($29|0)==(0);
  if (!($30)) {
   $$0 = 1;
   label = 12;
   break;
  }
  $31 = (($i$01) + 1)|0;
  $32 = (($pItem$02) + 72|0);
  $33 = HEAP32[$pList>>2]|0;
  $34 = ($31|0)<($33|0);
  if ($34) {
   $i$01 = $31;$pItem$02 = $32;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 7) {
  $15 = HEAP32[$pFix>>2]|0;
  $16 = (($pFix) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($pFix) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $11;
  _sqlite3ErrorMsg($15,20232,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3FixSelect($pFix,$pSelect) {
 $pFix = $pFix|0;
 $pSelect = $pSelect|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pSelect|0)==(0|0);
 L1: do {
  if ($0) {
   $$01 = 0;
  } else {
   $$02 = $pSelect;
   while(1) {
    $1 = HEAP32[$$02>>2]|0;
    $2 = (_sqlite3FixExprList($pFix,$1)|0);
    $3 = ($2|0)==(0);
    if (!($3)) {
     $$01 = 1;
     break L1;
    }
    $4 = (($$02) + 40|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_sqlite3FixSrcList($pFix,$5)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $$01 = 1;
     break L1;
    }
    $8 = (($$02) + 44|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (_sqlite3FixExpr($pFix,$9)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     $$01 = 1;
     break L1;
    }
    $12 = (($$02) + 48|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_sqlite3FixExprList($pFix,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $$01 = 1;
     break L1;
    }
    $16 = (($$02) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_sqlite3FixExpr($pFix,$17)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     $$01 = 1;
     break L1;
    }
    $20 = (($$02) + 56|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_sqlite3FixExprList($pFix,$21)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $$01 = 1;
     break L1;
    }
    $24 = (($$02) + 68|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_sqlite3FixExpr($pFix,$25)|0);
    $27 = ($26|0)==(0);
    if (!($27)) {
     $$01 = 1;
     break L1;
    }
    $28 = (($$02) + 72|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_sqlite3FixExpr($pFix,$29)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     $$01 = 1;
     break L1;
    }
    $32 = (($$02) + 60|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $$01 = 0;
     break;
    } else {
     $$02 = $33;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3FixExpr($pFix,$pExpr) {
 $pFix = $pFix|0;
 $pExpr = $pExpr|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($pExpr|0)==(0|0);
 L1: do {
  if ($0) {
   $$01 = 0;
  } else {
   $$02 = $pExpr;
   while(1) {
    $1 = HEAP8[$$02>>0]|0;
    $2 = ($1<<24>>24)==(-121);
    if ($2) {
     $3 = HEAP32[$pFix>>2]|0;
     $4 = HEAP32[$3>>2]|0;
     $5 = (($4) + 137|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)==(0);
     if ($7) {
      break;
     }
     HEAP8[$$02>>0] = 101;
    }
    $10 = (($$02) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 16384;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $$01 = 0;
     break L1;
    }
    $14 = $11 & 2048;
    $15 = ($14|0)==(0);
    $16 = (($$02) + 20|0);
    if ($15) {
     $20 = HEAP32[$16>>2]|0;
     $21 = (_sqlite3FixExprList($pFix,$20)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $$01 = 1;
      break L1;
     }
    } else {
     $17 = HEAP32[$16>>2]|0;
     $18 = (_sqlite3FixSelect($pFix,$17)|0);
     $19 = ($18|0)==(0);
     if (!($19)) {
      $$01 = 1;
      break L1;
     }
    }
    $23 = (($$02) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_sqlite3FixExpr($pFix,$24)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $$01 = 1;
     break L1;
    }
    $27 = (($$02) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     $$01 = 0;
     break L1;
    } else {
     $$02 = $28;
    }
   }
   $8 = (($pFix) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   _sqlite3ErrorMsg($3,20280,$vararg_buffer);
   $$01 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3FixExprList($pFix,$pList) {
 $pFix = $pFix|0;
 $pList = $pList|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pItem$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = HEAP32[$pList>>2]|0;
   $2 = ($1|0)>(0);
   if ($2) {
    $3 = (($pList) + 8|0);
    $4 = HEAP32[$3>>2]|0;
    $i$01 = 0;$pItem$02 = $4;
    while(1) {
     $5 = HEAP32[$pItem$02>>2]|0;
     $6 = (_sqlite3FixExpr($pFix,$5)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $$0 = 1;
      break L1;
     }
     $8 = (($i$01) + 1)|0;
     $9 = (($pItem$02) + 20|0);
     $10 = HEAP32[$pList>>2]|0;
     $11 = ($8|0)<($10|0);
     if ($11) {
      $i$01 = $8;$pItem$02 = $9;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3FixTriggerStep($pFix,$pStep) {
 $pFix = $pFix|0;
 $pStep = $pStep|0;
 var $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pStep|0)==(0|0);
 L1: do {
  if ($0) {
   $$01 = 0;
  } else {
   $$02 = $pStep;
   while(1) {
    $1 = (($$02) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = (_sqlite3FixSelect($pFix,$2)|0);
    $4 = ($3|0)==(0);
    if (!($4)) {
     $$01 = 1;
     break L1;
    }
    $5 = (($$02) + 20|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_sqlite3FixExpr($pFix,$6)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $$01 = 1;
     break L1;
    }
    $9 = (($$02) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_sqlite3FixExprList($pFix,$10)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $$01 = 1;
     break L1;
    }
    $13 = (($$02) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$01 = 0;
     break;
    } else {
     $$02 = $14;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3VdbeRunOnlyOnce($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 88|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 | 64;
 HEAP16[$0>>1] = $2;
 STACKTOP = sp;return;
}
function _sqlite3VdbeSetNumCols($p,$nResColumn) {
 $p = $p|0;
 $nResColumn = $nResColumn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$01 = 0;
 var $or$cond = 0, $pColName$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($p) + 84|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 << 1;
 _releaseMemArray($2,$6);
 $7 = HEAP32[$1>>2]|0;
 _sqlite3DbFree($0,$7);
 $8 = $nResColumn << 1;
 $9 = $nResColumn&65535;
 HEAP16[$3>>1] = $9;
 $10 = ($nResColumn*80)|0;
 $11 = (_sqlite3DbMallocZero($0,$10)|0);
 HEAP32[$1>>2] = $11;
 $12 = ($11|0)!=(0|0);
 $13 = ($nResColumn|0)>(0);
 $or$cond = $12 & $13;
 if ($or$cond) {
  $n$01 = $8;$pColName$02 = $11;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $14 = (($n$01) + -1)|0;
  $15 = (($pColName$02) + 28|0);
  HEAP16[$15>>1] = 1;
  $16 = HEAP32[$p>>2]|0;
  HEAP32[$pColName$02>>2] = $16;
  $17 = (($pColName$02) + 40|0);
  $18 = ($14|0)>(0);
  if ($18) {
   $n$01 = $14;$pColName$02 = $17;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VdbeSetColName($p,$idx,$var,$zName,$xDel) {
 $p = $p|0;
 $idx = $idx|0;
 $var = $var|0;
 $zName = $zName|0;
 $xDel = $xDel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($p) + 84|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = Math_imul($6, $var)|0;
 $8 = (($7) + ($idx))|0;
 $9 = (($p) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($8*40)|0)|0);
 (_sqlite3VdbeMemSetStr($11,$zName,-1,1,$xDel)|0);
 STACKTOP = sp;return;
}
function _returnSingleInt($pParse,$zLabel,$0,$1) {
 $pParse = $pParse|0;
 $zLabel = $zLabel|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_sqlite3GetVdbe($pParse)|0);
 $3 = (($pParse) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$pParse>>2]|0;
 $7 = (_sqlite3DbMallocRaw($6,8)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = $9;
  HEAP32[$10>>2] = $0;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $1;
 }
 (_sqlite3VdbeAddOp4($2,26,0,$5,0,$7,-13)|0);
 _sqlite3VdbeSetNumCols($2,1);
 _sqlite3VdbeSetColName($2,0,0,$zLabel,0);
 (_sqlite3VdbeAddOp2($2,35,$5,1)|0);
 STACKTOP = sp;return;
}
function _getLockingMode($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  label = 4;
 } else {
  $1 = (_sqlite3_stricmp($z,21160)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0 = 1;
  } else {
   $3 = (_sqlite3_stricmp($z,21152)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
   } else {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3JournalModename($eMode) {
 $eMode = $eMode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eMode|0)==(6);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (22320 + ($eMode<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerJournalSizeLimit($pPager,$0,$1) {
 $pPager = $pPager|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(-1);
 $3 = ($1|0)==(-1);
 $4 = ($0>>>0)>(4294967294);
 $5 = $3 & $4;
 $6 = $2 | $5;
 $7 = (($pPager) + 160|0);
 if ($6) {
  $8 = $7;
  $9 = $8;
  HEAP32[$9>>2] = $0;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $1;
  $12 = (($pPager) + 208|0);
  $13 = HEAP32[$12>>2]|0;
  _sqlite3WalLimit($13,$0,$1);
 }
 $14 = $7;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 tempRet0 = $19;
 STACKTOP = sp;return ($16|0);
}
function _sqlite3BtreeGetAutoVacuum($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = HEAP32[$p$idx1>>2]|0;
 $1 = (($0) + 17|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = 0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = (($0) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = $6 ? 1 : 2;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _getAutoVacuum($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3_stricmp($z,22296)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_sqlite3_stricmp($z,22008)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 1;
  } else {
   $4 = (_sqlite3_stricmp($z,22304)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$0 = 2;
   } else {
    $6 = (_sqlite3Atoi($z)|0);
    $7 = ($6>>>0)<(3);
    $8 = $6 & 255;
    $9 = $7 ? $8 : 0;
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeSetAutoVacuum($p$0$0$val,$p$0$1$val,$autoVacuum) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $autoVacuum = $autoVacuum|0;
 var $$pre = 0, $$pre$phi2Z2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = (($p$0$1$val) + 22|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 2;
 $3 = ($2<<16>>16)==(0);
 $$pre = $autoVacuum & 255;
 if ($3) {
  $$pre1 = (($p$0$1$val) + 17|0);
  $$pre$phi2Z2D = $$pre1;
 } else {
  $4 = ($$pre|0)!=(0);
  $5 = $4&1;
  $6 = (($p$0$1$val) + 17|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($5|0)==($8|0);
  if ($9) {
   $$pre$phi2Z2D = $6;
  } else {
   $rc$0 = 8;
   STACKTOP = sp;return ($rc$0|0);
  }
 }
 $10 = ($$pre|0)!=(0);
 $11 = $10&1;
 HEAP8[$$pre$phi2Z2D>>0] = $11;
 $12 = ($$pre|0)==(2);
 $13 = $12&1;
 $14 = (($p$0$1$val) + 18|0);
 HEAP8[$14>>0] = $13;
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _changeTempStorage($pParse,$zStorageType) {
 $pParse = $pParse|0;
 $zStorageType = $zStorageType|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getTempStore($zStorageType)|0);
 $1 = HEAP32[$pParse>>2]|0;
 $2 = (($1) + 63|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==($0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (_invalidateTempStorage($pParse)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0&255;
 HEAP8[$2>>0] = $8;
 STACKTOP = sp;return;
}
function _invalidateTempStorage($pParse) {
 $pParse = $pParse|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($0) + 62|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $$idx = (($4) + 8|0);
  $$idx$val = HEAP8[$$idx>>0]|0;
  $9 = (_sqlite3BtreeIsInReadTrans($$idx$val)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   _sqlite3BtreeClose($4);
   $11 = HEAP32[$1>>2]|0;
   $12 = (($11) + 20|0);
   HEAP32[$12>>2] = 0;
   _sqlite3ResetAllSchemasOfConnection($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sqlite3ErrorMsg($pParse,22232,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _setAllPagerFlags($db) {
 $db = $db|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDb$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 62|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($db) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($db) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($db) + 24|0);
 $$in = $4;$pDb$02 = $7;
 while(1) {
  $9 = (($$in) + -1)|0;
  $10 = (($pDb$02) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = (($pDb$02) + 8|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = HEAP32[$8>>2]|0;
   $17 = $16 & 28;
   $18 = $17 | $15;
   $$idx$val = HEAP32[$11>>2]|0;
   $$idx1 = (($11) + 4|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   _sqlite3BtreeSetPagerFlags($$idx$val,$$idx1$val,$18);
  }
  $19 = (($pDb$02) + 16|0);
  $20 = ($9|0)>(0);
  if ($20) {
   $$in = $9;$pDb$02 = $19;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3LogEstToInt($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x << 16 >> 16;
 $1 = ($x<<16>>16)<(10);
 if ($1) {
  $29 = 0;$30 = 1;
  tempRet0 = $29;
  STACKTOP = sp;return ($30|0);
 }
 $2 = (($0|0) % 10)&-1;
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (($0|0) / 10)&-1;
 $6 = ($2>>>0)>(4);
 if ($6) {
  $7 = (_i64Add(($2|0),($4|0),-2,-1)|0);
  $8 = tempRet0;
  $17 = $7;$18 = $8;
 } else {
  $not$ = ($2|0)!=(0);
  $9 = $not$ << 31 >> 31;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Add(($9|0),($11|0),($2|0),($4|0))|0);
  $13 = tempRet0;
  $17 = $12;$18 = $13;
 }
 $sext = $5 << 16;
 $14 = $sext >> 16;
 $15 = ($sext|0)>(131072);
 if (!($15)) {
  $24 = (_i64Add(($17|0),($18|0),8,0)|0);
  $25 = tempRet0;
  $26 = (3 - ($14))|0;
  $27 = (_bitshift64Lshr(($24|0),($25|0),($26|0))|0);
  $28 = tempRet0;
  $29 = $28;$30 = $27;
  tempRet0 = $29;
  STACKTOP = sp;return ($30|0);
 }
 $16 = ($sext|0)>(3932160);
 if ($16) {
  $29 = 2147483647;$30 = -1;
  tempRet0 = $29;
  STACKTOP = sp;return ($30|0);
 }
 $19 = (_i64Add(($17|0),($18|0),8,0)|0);
 $20 = tempRet0;
 $21 = (($14) + -3)|0;
 $22 = (_bitshift64Shl(($19|0),($20|0),($21|0))|0);
 $23 = tempRet0;
 $29 = $23;$30 = $22;
 tempRet0 = $29;
 STACKTOP = sp;return ($30|0);
}
function _actionName($action) {
 $action = $action|0;
 var $0 = 0, $zName$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $action&255;
 if ((($0|0) == 7)) {
  $zName$0 = 22160;
 } else if ((($0|0) == 9)) {
  $zName$0 = 22192;
 } else if ((($0|0) == 6)) {
  $zName$0 = 22200;
 } else if ((($0|0) == 8)) {
  $zName$0 = 22176;
 } else {
  $zName$0 = 22216;
 }
 STACKTOP = sp;return ($zName$0|0);
}
function _sqlite3FkLocateIndex($pParse,$pParent,$pFKey,$ppIdx,$paiCol) {
 $pParse = $pParse|0;
 $pParent = $pParent|0;
 $pFKey = $pFKey|0;
 $ppIdx = $ppIdx|0;
 $paiCol = $paiCol|0;
 var $$ = 0, $$0 = 0, $$not = 0, $$pre = 0, $$pre32 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $aiCol$0 = 0, $brmerge = 0, $exitcond = 0, $i$01 = 0, $i1$0$lcssa = 0, $i1$08 = 0, $j$04 = 0, $j$05 = 0, $pIdx$0 = 0, $pIdx$018 = 0, $pIdx$019 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pFKey) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pFKey) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(1);
 do {
  if ($4) {
   $5 = (($pParent) + 36|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 << 16 >> 16;
   $8 = ($6<<16>>16)>(-1);
   if ($8) {
    $9 = ($3|0)==(0|0);
    if ($9) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $10 = (($pParent) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + (($7*24)|0)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_sqlite3_stricmp($13,$3)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $aiCol$0 = 0;
    }
   } else {
    $aiCol$0 = 0;
   }
  } else {
   $16 = ($paiCol|0)==(0|0);
   if ($16) {
    $aiCol$0 = 0;
   } else {
    $17 = HEAP32[$pParse>>2]|0;
    $18 = $1 << 2;
    $19 = (_sqlite3DbMallocRaw($17,$18)|0);
    $20 = ($19|0)==(0|0);
    if ($20) {
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    } else {
     HEAP32[$paiCol>>2] = $19;
     $aiCol$0 = $19;
     break;
    }
   }
  }
 } while(0);
 $21 = (($pParent) + 8|0);
 $pIdx$018 = HEAP32[$21>>2]|0;
 $22 = ($pIdx$018|0)==(0|0);
 L14: do {
  if (!($22)) {
   $23 = ($3|0)==(0|0);
   $24 = ($1|0)>(0);
   $25 = (($pParent) + 4|0);
   $26 = ($aiCol$0|0)==(0|0);
   $pIdx$019 = $pIdx$018;
   L16: while(1) {
    $27 = (($pIdx$019) + 50|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28&65535;
    $30 = ($29|0)==($1|0);
    do {
     if ($30) {
      $31 = (($pIdx$019) + 54|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       if ($23) {
        $36 = (($pIdx$019) + 55|0);
        $37 = HEAP8[$36>>0]|0;
        $38 = $37 & 3;
        $39 = ($38<<24>>24)==(2);
        if ($39) {
         label = 16;
         break L16;
        } else {
         break;
        }
       }
       L24: do {
        if ($24) {
         $34 = (($pIdx$019) + 4|0);
         $35 = (($pIdx$019) + 32|0);
         $$pre = HEAP32[$34>>2]|0;
         $$pre32 = HEAP32[$25>>2]|0;
         $$pre33 = HEAP32[$35>>2]|0;
         $i1$08 = 0;
         while(1) {
          $46 = (($$pre) + ($i1$08<<1)|0);
          $47 = HEAP16[$46>>1]|0;
          $48 = $47 << 16 >> 16;
          $49 = ((($$pre32) + (($48*24)|0)|0) + 16|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ($50|0)!=(0|0);
          $$ = $51 ? $50 : 3592;
          $52 = (($$pre33) + ($i1$08<<2)|0);
          $53 = HEAP32[$52>>2]|0;
          $54 = (_sqlite3_stricmp($53,$$)|0);
          $55 = ($54|0)==(0);
          if (!($55)) {
           $i1$0$lcssa = $i1$08;
           break L24;
          }
          $56 = (($$pre32) + (($48*24)|0)|0);
          $57 = HEAP32[$56>>2]|0;
          $j$05 = 0;
          while(1) {
           $60 = ((($pFKey) + ($j$05<<3)|0) + 40|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = (_sqlite3_stricmp($61,$57)|0);
           $63 = ($62|0)==(0);
           $59 = (($j$05) + 1)|0;
           if ($63) {
            label = 23;
            break;
           }
           $58 = ($59|0)<($1|0);
           if ($58) {
            $j$05 = $59;
           } else {
            $j$04 = $59;
            break;
           }
          }
          if ((label|0) == 23) {
           label = 0;
           if ($26) {
            $j$04 = $j$05;
           } else {
            $64 = ((($pFKey) + ($j$05<<3)|0) + 36|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = (($aiCol$0) + ($i1$08<<2)|0);
            HEAP32[$66>>2] = $65;
            $j$04 = $j$05;
           }
          }
          $67 = ($j$04|0)==($1|0);
          $45 = (($i1$08) + 1)|0;
          if ($67) {
           $i1$0$lcssa = $i1$08;
           break L24;
          }
          $44 = ($45|0)<($1|0);
          if ($44) {
           $i1$08 = $45;
          } else {
           $i1$0$lcssa = $45;
           break;
          }
         }
        } else {
         $i1$0$lcssa = 0;
        }
       } while(0);
       $68 = ($i1$0$lcssa|0)==($1|0);
       if ($68) {
        break L16;
       }
      }
     }
    } while(0);
    $69 = (($pIdx$019) + 20|0);
    $pIdx$0 = HEAP32[$69>>2]|0;
    $70 = ($pIdx$0|0)==(0|0);
    if ($70) {
     break L14;
    } else {
     $pIdx$019 = $pIdx$0;
    }
   }
   if ((label|0) == 16) {
    $$not = $24 ^ 1;
    $brmerge = $26 | $$not;
    if (!($brmerge)) {
     $i$01 = 0;
     while(1) {
      $40 = ((($pFKey) + ($i$01<<3)|0) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($aiCol$0) + ($i$01<<2)|0);
      HEAP32[$42>>2] = $41;
      $43 = (($i$01) + 1)|0;
      $exitcond = ($43|0)==($1|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $43;
      }
     }
    }
   }
   HEAP32[$ppIdx>>2] = $pIdx$019;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $71 = (($pParse) + 442|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $74 = HEAP32[$pFKey>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($pFKey) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$vararg_buffer>>2] = $75;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $77;
  _sqlite3ErrorMsg($pParse,22112,$vararg_buffer);
 }
 $78 = HEAP32[$pParse>>2]|0;
 _sqlite3DbFree($78,$aiCol$0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IndexAffinityStr($v,$pIdx) {
 $v = $v|0;
 $pIdx = $pIdx|0;
 var $$0 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$01 = 0, $v$idx$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pIdx) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $v$idx$val = HEAP32[$v>>2]|0;
 $5 = (_sqlite3VdbeDb($v$idx$val)|0);
 $6 = (($pIdx) + 52|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + 1)|0;
 $10 = (_sqlite3DbMallocRaw(0,$9)|0);
 HEAP32[$0>>2] = $10;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = (($5) + 64|0);
  HEAP8[$16>>0] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP16[$6>>1]|0;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $33 = $10;$n$0$lcssa = 0;
 } else {
  $14 = (($pIdx) + 4|0);
  $15 = (($4) + 4|0);
  $n$01 = 0;
  while(1) {
   $17 = HEAP32[$14>>2]|0;
   $18 = (($17) + ($n$01<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = ($19<<16>>16)<(0);
   if ($20) {
    $27 = 100;
   } else {
    $21 = $19 << 16 >> 16;
    $22 = HEAP32[$15>>2]|0;
    $23 = ((($22) + (($21*24)|0)|0) + 21|0);
    $24 = HEAP8[$23>>0]|0;
    $27 = $24;
   }
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + ($n$01)|0);
   HEAP8[$26>>0] = $27;
   $28 = (($n$01) + 1)|0;
   $29 = HEAP16[$6>>1]|0;
   $30 = $29&65535;
   $31 = ($28|0)<($30|0);
   if ($31) {
    $n$01 = $28;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $33 = $$pre;$n$0$lcssa = $28;
 }
 $32 = (($33) + ($n$0$lcssa)|0);
 HEAP8[$32>>0] = 0;
 $$pre2 = HEAP32[$0>>2]|0;
 $$0 = $$pre2;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3RegisterLikeFunctions($db,$caseSensitive) {
 $db = $db|0;
 $caseSensitive = $caseSensitive|0;
 var $0 = 0, $1 = 0, $likeInfoAlt$likeInfoNorm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($caseSensitive|0)!=(0);
 $likeInfoAlt$likeInfoNorm = $0 ? 22104 : 8928;
 (_sqlite3CreateFunc($db,8936,2,1,$likeInfoAlt$likeInfoNorm,83,0,0,0)|0);
 (_sqlite3CreateFunc($db,8936,3,1,$likeInfoAlt$likeInfoNorm,83,0,0,0)|0);
 (_sqlite3CreateFunc($db,8920,2,1,1720,83,0,0,0)|0);
 _setLikeOptFlag($db,8920,12);
 $1 = $0 ? 12 : 4;
 _setLikeOptFlag($db,8936,$1);
 STACKTOP = sp;return;
}
function _sqlite3ExprCacheClear($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($pParse) + 120|0);
  _cacheEntryClear($pParse,$3);
  HEAP32[$0>>2] = 0;
 }
 $4 = (($pParse) + 152|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (($pParse) + 140|0);
  _cacheEntryClear($pParse,$7);
  HEAP32[$4>>2] = 0;
 }
 $8 = (($pParse) + 172|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (($pParse) + 160|0);
  _cacheEntryClear($pParse,$11);
  HEAP32[$8>>2] = 0;
 }
 $12 = (($pParse) + 192|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = (($pParse) + 180|0);
  _cacheEntryClear($pParse,$15);
  HEAP32[$12>>2] = 0;
 }
 $16 = (($pParse) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = (($pParse) + 200|0);
  _cacheEntryClear($pParse,$19);
  HEAP32[$16>>2] = 0;
 }
 $20 = (($pParse) + 232|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = (($pParse) + 220|0);
  _cacheEntryClear($pParse,$23);
  HEAP32[$20>>2] = 0;
 }
 $24 = (($pParse) + 252|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($pParse) + 240|0);
  _cacheEntryClear($pParse,$27);
  HEAP32[$24>>2] = 0;
 }
 $28 = (($pParse) + 272|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($pParse) + 260|0);
  _cacheEntryClear($pParse,$31);
  HEAP32[$28>>2] = 0;
 }
 $32 = (($pParse) + 292|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (($pParse) + 280|0);
  _cacheEntryClear($pParse,$35);
  HEAP32[$32>>2] = 0;
 }
 $36 = (($pParse) + 312|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = (($pParse) + 300|0);
 _cacheEntryClear($pParse,$39);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3OpenTableAndIndices($pParse,$pTab,$op,$iBase,$aToOpen,$piDataCur,$piIdxCur) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $op = $op|0;
 $iBase = $iBase|0;
 $aToOpen = $aToOpen|0;
 $piDataCur = $piDataCur|0;
 $piIdxCur = $piIdxCur|0;
 var $$0 = 0, $$01 = 0, $$1$lcssa = 0, $$14 = 0, $$not = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $i$0$lcssa = 0, $i$03 = 0, $pIdx$0 = 0, $pIdx$02 = 0, $pIdx$05 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 16;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  HEAP32[$piDataCur>>2] = 0;
  HEAP32[$piIdxCur>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($pTab) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3SchemaToIndex($4,$6)|0);
 $8 = (_sqlite3GetVdbe($pParse)|0);
 $9 = ($iBase|0)<(0);
 if ($9) {
  $10 = (($pParse) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $$01 = $11;
 } else {
  $$01 = $iBase;
 }
 $12 = (($$01) + 1)|0;
 $13 = ($piDataCur|0)!=(0|0);
 if ($13) {
  HEAP32[$piDataCur>>2] = $$01;
 }
 $14 = HEAP8[$0>>0]|0;
 $15 = $14 & 32;
 $16 = ($15<<24>>24)==(0);
 do {
  if ($16) {
   $17 = ($aToOpen|0)==(0|0);
   if (!($17)) {
    $18 = HEAP8[$aToOpen>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     label = 11;
     break;
    }
   }
   _sqlite3OpenTable($pParse,$$01,$7,$pTab,$op);
  } else {
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = (($pTab) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($op|0)==(53);
  $23 = $22&1;
  $24 = HEAP32[$pTab>>2]|0;
  _sqlite3TableLock($pParse,$7,$21,$23,$24);
 }
 $25 = ($piIdxCur|0)==(0|0);
 if (!($25)) {
  HEAP32[$piIdxCur>>2] = $12;
 }
 $26 = (($pTab) + 8|0);
 $pIdx$02 = HEAP32[$26>>2]|0;
 $27 = ($pIdx$02|0)==(0|0);
 if ($27) {
  $$1$lcssa = $12;$i$0$lcssa = 0;
 } else {
  $$not = $13 ^ 1;
  $28 = ($aToOpen|0)==(0|0);
  $$14 = $12;$i$03 = 0;$pIdx$05 = $pIdx$02;
  while(1) {
   $29 = (($$14) + 1)|0;
   $30 = (($pIdx$05) + 55|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 & 3;
   $33 = ($32<<24>>24)==(2);
   if ($33) {
    $34 = HEAP8[$0>>0]|0;
    $35 = $34 & 32;
    $36 = ($35<<24>>24)==(0);
    $brmerge = $36 | $$not;
    if (!($brmerge)) {
     HEAP32[$piDataCur>>2] = $$14;
    }
   }
   $$pre$pre = (($i$03) + 1)|0;
   if ($28) {
    label = 21;
   } else {
    $37 = (($aToOpen) + ($$pre$pre)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(0);
    if (!($39)) {
     label = 21;
    }
   }
   if ((label|0) == 21) {
    label = 0;
    $40 = (($pIdx$05) + 44|0);
    $41 = HEAP32[$40>>2]|0;
    (_sqlite3VdbeAddOp3($8,$op,$$14,$41,$7)|0);
    _sqlite3VdbeSetP4KeyInfo($pParse,$pIdx$05);
   }
   $42 = (($pIdx$05) + 20|0);
   $pIdx$0 = HEAP32[$42>>2]|0;
   $43 = ($pIdx$0|0)==(0|0);
   if ($43) {
    $$1$lcssa = $29;$i$0$lcssa = $$pre$pre;
    break;
   } else {
    $$14 = $29;$i$03 = $$pre$pre;$pIdx$05 = $pIdx$0;
   }
  }
 }
 $44 = (($pParse) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($$1$lcssa|0)>($45|0);
 if (!($46)) {
  $$0 = $i$0$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$44>>2] = $$1$lcssa;
 $$0 = $i$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _setLikeOptFlag($db,$zName,$flagVal) {
 $db = $db|0;
 $zName = $zName|0;
 $flagVal = $flagVal|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Strlen30($zName)|0);
 $1 = (_sqlite3FindFunction($db,$zName,$0,2,1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $flagVal&255;
 $4 = (($1) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 | $3;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 STACKTOP = sp;return;
}
function _getTempStore($z) {
 $z = $z|0;
 var $$ = 0, $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$z>>0]|0;
 $$off = (($0) + -48)<<24>>24;
 $1 = ($$off&255)<(3);
 if ($1) {
  $2 = $0 << 24 >> 24;
  $3 = (($2) + -48)|0;
  $$0 = $3;
 } else {
  $4 = (_sqlite3_stricmp($z,21536)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = (_sqlite3_stricmp($z,4992)|0);
   $7 = ($6|0)==(0);
   $$ = $7 ? 2 : 0;
   $$0 = $$;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalLimit($pWal,$0,$1) {
 $pWal = $pWal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($pWal|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pWal) + 16|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 STACKTOP = sp;return;
}
function _releaseMemArray($p,$N) {
 $p = $p|0;
 $N = $N|0;
 var $$03 = 0, $$11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 $1 = ($N|0)==(0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$p>>2]|0;
 $3 = (($2) + 64|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($2) + 512|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = (($p) + (($N*40)|0)|0);
 $9 = ($N|0)>(0);
 if (!($7)) {
  if ($9) {
   $$03 = $p;
  } else {
   STACKTOP = sp;return;
  }
  while(1) {
   $10 = (($$03) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   _sqlite3DbFree($2,$11);
   $12 = (($$03) + 40|0);
   $13 = ($12>>>0)<($8>>>0);
   if ($13) {
    $$03 = $12;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 if ($9) {
  $$11 = $p;
  while(1) {
   $14 = (($$11) + 28|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 & 9312;
   $17 = ($16<<16>>16)==(0);
   if ($17) {
    $18 = (($$11) + 36|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     _sqlite3DbFree($2,$19);
     HEAP32[$18>>2] = 0;
    }
   } else {
    _sqlite3VdbeMemRelease($$11);
   }
   HEAP16[$14>>1] = 128;
   $21 = (($$11) + 40|0);
   $22 = ($21>>>0)<($8>>>0);
   if ($22) {
    $$11 = $21;
   } else {
    break;
   }
  }
 }
 HEAP8[$3>>0] = $4;
 STACKTOP = sp;return;
}
function _sqlite3ClearStatTables($pParse,$iDb,$zType,$zName) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $zType = $zType|0;
 $zName = $zName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $zTab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zTab = sp + 96|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($iDb<<4)|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = 1;
 (_sqlite3_snprintf(24,$zTab,23360,$vararg_buffer)|0);
 $5 = HEAP32[$pParse>>2]|0;
 $6 = (_sqlite3FindTable($5,$zTab,$4)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  HEAP32[$vararg_buffer1>>2] = $4;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $zTab;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $zType;
  $vararg_ptr6 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $zName;
  _sqlite3NestedParse($pParse,18632,$vararg_buffer1);
 }
 HEAP32[$vararg_buffer7>>2] = 2;
 (_sqlite3_snprintf(24,$zTab,23360,$vararg_buffer7)|0);
 $8 = HEAP32[$pParse>>2]|0;
 $9 = (_sqlite3FindTable($8,$zTab,$4)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  HEAP32[$vararg_buffer10>>2] = $4;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $zTab;
  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $zType;
  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
  HEAP32[$vararg_ptr15>>2] = $zName;
  _sqlite3NestedParse($pParse,18632,$vararg_buffer10);
 }
 HEAP32[$vararg_buffer16>>2] = 3;
 (_sqlite3_snprintf(24,$zTab,23360,$vararg_buffer16)|0);
 $11 = HEAP32[$pParse>>2]|0;
 $12 = (_sqlite3FindTable($11,$zTab,$4)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  HEAP32[$vararg_buffer19>>2] = $4;
  $vararg_ptr22 = (($vararg_buffer19) + 4|0);
  HEAP32[$vararg_ptr22>>2] = $zTab;
  $vararg_ptr23 = (($vararg_buffer19) + 8|0);
  HEAP32[$vararg_ptr23>>2] = $zType;
  $vararg_ptr24 = (($vararg_buffer19) + 12|0);
  HEAP32[$vararg_ptr24>>2] = $zName;
  _sqlite3NestedParse($pParse,18632,$vararg_buffer19);
 }
 HEAP32[$vararg_buffer25>>2] = 4;
 (_sqlite3_snprintf(24,$zTab,23360,$vararg_buffer25)|0);
 $14 = HEAP32[$pParse>>2]|0;
 $15 = (_sqlite3FindTable($14,$zTab,$4)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer28>>2] = $4;
 $vararg_ptr31 = (($vararg_buffer28) + 4|0);
 HEAP32[$vararg_ptr31>>2] = $zTab;
 $vararg_ptr32 = (($vararg_buffer28) + 8|0);
 HEAP32[$vararg_ptr32>>2] = $zType;
 $vararg_ptr33 = (($vararg_buffer28) + 12|0);
 HEAP32[$vararg_ptr33>>2] = $zName;
 _sqlite3NestedParse($pParse,18632,$vararg_buffer28);
 STACKTOP = sp;return;
}
function _destroyRootPage($pParse,$iTable,$iDb) {
 $pParse = $pParse|0;
 $iTable = $iTable|0;
 $iDb = $iDb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (_sqlite3GetTempReg($pParse)|0);
 (_sqlite3VdbeAddOp3($0,114,$iTable,$1,$iDb)|0);
 _sqlite3MayAbort($pParse);
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($iDb<<4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($iDb|0)==(1);
 $8 = $7 ? 15056 : 15080;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $iTable;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $1;
 _sqlite3NestedParse($pParse,23304,$vararg_buffer);
 _sqlite3ReleaseTempReg($pParse,$1);
 STACKTOP = sp;return;
}
function _sqlite3ArrayAllocate($db,$pArray,$szEntry,$pnEntry,$pIdx) {
 $db = $db|0;
 $pArray = $pArray|0;
 $szEntry = $szEntry|0;
 $pnEntry = $pnEntry|0;
 $pIdx = $pIdx|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pnEntry>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = $1 & $0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ($0|0)==(0);
  $5 = $0 << 1;
  $$ = $4 ? 1 : $5;
  $6 = Math_imul($$, $szEntry)|0;
  $7 = (_sqlite3DbRealloc($db,$pArray,$6)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   HEAP32[$pIdx>>2] = -1;
   $$0 = $pArray;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $7;
  }
 } else {
  $$01 = $pArray;
 }
 $9 = Math_imul($0, $szEntry)|0;
 $10 = (($$01) + ($9)|0);
 _memset(($10|0),0,($szEntry|0))|0;
 HEAP32[$pIdx>>2] = $0;
 $11 = HEAP32[$pnEntry>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$pnEntry>>2] = $12;
 $$0 = $$01;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3TriggersExist($pParse,$pTab,$op,$pChanges,$pMask) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $op = $op|0;
 $pChanges = $pChanges|0;
 $pMask = $pMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask$0$lcssa = 0, $mask$02 = 0, $mask$1 = 0, $p$03 = 0, $pList$04 = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pParse$idx$val$idx$val$idx = 0, $pParse$idx$val$idx$val$idx$val = 0, $pParse$idx1 = 0, $pParse$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 8388608;
 $4 = ($3|0)==(0);
 if ($4) {
  $mask$0$lcssa = 0;$pList$04 = 0;
 } else {
  $pParse$idx1 = (($pParse) + 442|0);
  $pParse$idx1$val = HEAP8[$pParse$idx1>>0]|0;
  $pParse$idx$val$idx = (($0) + 16|0);
  $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
  $pParse$idx$val$idx$val$idx = (($pParse$idx$val$idx$val) + 28|0);
  $pParse$idx$val$idx$val$idx$val = HEAP32[$pParse$idx$val$idx$val$idx>>2]|0;
  $5 = (_sqlite3TriggerList($pParse$idx$val$idx$val$idx$val,$pParse$idx1$val,$pTab)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $mask$0$lcssa = 0;$pList$04 = 0;
  } else {
   $mask$02 = 0;$p$03 = $5;
   while(1) {
    $7 = (($p$03) + 8|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = ($9|0)==($op|0);
    if ($10) {
     $11 = (($p$03) + 16|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_checkColumnOverlap($12,$pChanges)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $mask$1 = $mask$02;
     } else {
      $15 = (($p$03) + 9|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = $16&255;
      $18 = $17 | $mask$02;
      $mask$1 = $18;
     }
    } else {
     $mask$1 = $mask$02;
    }
    $19 = (($p$03) + 32|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $mask$0$lcssa = $mask$1;$pList$04 = $5;
     break;
    } else {
     $mask$02 = $mask$1;$p$03 = $20;
    }
   }
  }
 }
 $22 = ($pMask|0)==(0|0);
 if ($22) {
  $23 = ($mask$0$lcssa|0)!=(0);
  $24 = $23 ? $pList$04 : 0;
  STACKTOP = sp;return ($24|0);
 }
 HEAP32[$pMask>>2] = $mask$0$lcssa;
 $23 = ($mask$0$lcssa|0)!=(0);
 $24 = $23 ? $pList$04 : 0;
 STACKTOP = sp;return ($24|0);
}
function _sqlite3IsReadOnly($pParse,$pTab,$viewOk) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $viewOk = $viewOk|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pTab) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 16;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$pParse>>2]|0;
  $5 = (_sqlite3GetVTable($4,$pTab)|0);
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $12 = $1 & 1;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    $14 = HEAP32[$pParse>>2]|0;
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 2048;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = (($pParse) + 18|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      break;
     }
    }
   }
   $23 = ($viewOk|0)==(0);
   if (!($23)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $24 = (($pTab) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $27 = HEAP32[$pTab>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $27;
   _sqlite3ErrorMsg($pParse,24496,$vararg_buffer1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $22 = HEAP32[$pTab>>2]|0;
 HEAP32[$vararg_buffer>>2] = $22;
 _sqlite3ErrorMsg($pParse,24464,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeCountChanges($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v) + 88|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 | 16;
 HEAP16[$0>>1] = $2;
 STACKTOP = sp;return;
}
function _xferOptimization($pParse,$pDest,$pSelect,$onError,$iDbDest) {
 $pParse = $pParse|0;
 $pDest = $pDest|0;
 $pSelect = $pSelect|0;
 $onError = $onError|0;
 $iDbDest = $iDbDest|0;
 var $$$02 = 0, $$0 = 0, $$02 = 0, $$1 = 0, $$1$off = 0, $$lobit = 0, $$lobit3 = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $addr1$0 = 0, $cond = 0, $cond18 = 0, $destHasUniqueIdx$0$ = 0, $destHasUniqueIdx$0$lcssa = 0, $destHasUniqueIdx$027 = 0, $emptyDestTest$0 = 0, $emptySrcTest$0 = 0, $i$034 = 0, $or$cond = 0, $or$cond5 = 0, $pDestIdx$0 = 0, $pDestIdx$026 = 0, $pDestIdx$028 = 0, $pDestIdx$1 = 0, $pDestIdx$110 = 0, $pDestIdx$111 = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0;
 var $pParse$idx$val$idx$val$idx = 0, $pParse$idx$val$idx$val$idx$val = 0, $pParse$idx6 = 0, $pParse$idx6$val = 0, $pSrcIdx$0 = 0, $pSrcIdx$017 = 0, $pSrcIdx$019 = 0, $pSrcIdx$1 = 0, $pSrcIdx$1$lcssa = 0, $pSrcIdx$17 = 0, $pSrcIdx$18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pSelect|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pParse) + 536|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pSelect) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 $pParse$idx6 = (($pParse) + 442|0);
 $pParse$idx6$val = HEAP8[$pParse$idx6>>0]|0;
 $pParse$idx$val$idx = (($pParse$idx$val) + 16|0);
 $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
 $pParse$idx$val$idx$val$idx = (($pParse$idx$val$idx$val) + 28|0);
 $pParse$idx$val$idx$val$idx$val = HEAP32[$pParse$idx$val$idx$val$idx>>2]|0;
 $7 = (_sqlite3TriggerList($pParse$idx$val$idx$val$idx$val,$pParse$idx6$val,$pDest)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pDest) + 44|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 & 16;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($onError|0)==(10);
 if ($13) {
  $14 = (($pDest) + 36|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)>(-1);
  if ($16) {
   $17 = (($pDest) + 45|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $$02 = $19;
  } else {
   $$02 = 10;
  }
  $20 = ($$02|0)==(10);
  $$$02 = $20 ? 2 : $$02;
  $$1 = $$$02;
 } else {
  $$1 = $onError;
 }
 $21 = (($pSelect) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 if (!($24)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($22) + 8|0);
 $26 = (($22) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($pSelect) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (($pSelect) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($pSelect) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = (($pSelect) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (($pSelect) + 60|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($pSelect) + 6|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45 & 1;
 $47 = ($46<<16>>16)==(0);
 if (!($47)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = HEAP32[$pSelect>>2]|0;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(1);
 if (!($50)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = (($48) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)==(116);
 if (!($55)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = (_sqlite3LocateTableItem($pParse,0,$25)|0);
 $57 = ($56|0)==(0|0);
 $58 = ($56|0)==($pDest|0);
 $or$cond5 = $57 | $58;
 if ($or$cond5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP8[$9>>0]|0;
 $60 = ($59&255) >>> 5;
 $$lobit = $60 & 1;
 $61 = $$lobit ^ 1;
 $62 = $61&255;
 $63 = (($56) + 44|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 >>> 5;
 $$lobit3 = $66 & 1;
 $67 = $$lobit3 ^ 1;
 $68 = ($62|0)==($67|0);
 if (!($68)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = $65 & 16;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = (($56) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0|0);
 if (!($73)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = (($pDest) + 38|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = (($56) + 38|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = ($75<<16>>16)==($77<<16>>16);
 if (!($78)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = (($pDest) + 36|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = (($56) + 36|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = ($80<<16>>16)==($82<<16>>16);
 if (!($83)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $84 = ($75<<16>>16)>(0);
 L70: do {
  if ($84) {
   $85 = (($pDest) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($56) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $i$034 = 0;
   while(1) {
    $89 = ((($86) + (($i$034*24)|0)|0) + 21|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = ((($88) + (($i$034*24)|0)|0) + 21|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = ($90<<24>>24)==($92<<24>>24);
    if (!($93)) {
     $$0 = 0;
     label = 67;
     break;
    }
    $94 = ((($86) + (($i$034*24)|0)|0) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($88) + (($i$034*24)|0)|0) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (_xferCompatibleCollation($95,$97)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     $$0 = 0;
     label = 67;
     break;
    }
    $100 = ((($86) + (($i$034*24)|0)|0) + 20|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = ($101<<24>>24)==(0);
    if (!($102)) {
     $103 = ((($88) + (($i$034*24)|0)|0) + 20|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104<<24>>24)==(0);
     if ($105) {
      $$0 = 0;
      label = 67;
      break;
     }
    }
    $106 = (($i$034) + 1)|0;
    $107 = $75 << 16 >> 16;
    $108 = ($106|0)<($107|0);
    if ($108) {
     $i$034 = $106;
    } else {
     break L70;
    }
   }
   if ((label|0) == 67) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $109 = (($pDest) + 8|0);
 $pDestIdx$026 = HEAP32[$109>>2]|0;
 $110 = ($pDestIdx$026|0)==(0|0);
 L84: do {
  if ($110) {
   $destHasUniqueIdx$0$lcssa = 0;
  } else {
   $111 = (($56) + 8|0);
   $pSrcIdx$017 = HEAP32[$111>>2]|0;
   $cond18 = ($pSrcIdx$017|0)==(0|0);
   $destHasUniqueIdx$027 = 0;$pDestIdx$028 = $pDestIdx$026;
   L86: while(1) {
    $114 = (($pDestIdx$028) + 54|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(0);
    $destHasUniqueIdx$0$ = $116 ? $destHasUniqueIdx$027 : 1;
    if ($cond18) {
     $$0 = 0;
     label = 67;
     break;
    } else {
     $pSrcIdx$019 = $pSrcIdx$017;
    }
    while(1) {
     $118 = (_xferCompatibleIndex($pDestIdx$028,$pSrcIdx$019)|0);
     $119 = ($118|0)==(0);
     if (!($119)) {
      break;
     }
     $117 = (($pSrcIdx$019) + 20|0);
     $pSrcIdx$0 = HEAP32[$117>>2]|0;
     $cond = ($pSrcIdx$0|0)==(0|0);
     if ($cond) {
      $$0 = 0;
      label = 67;
      break L86;
     } else {
      $pSrcIdx$019 = $pSrcIdx$0;
     }
    }
    $112 = (($pDestIdx$028) + 20|0);
    $pDestIdx$0 = HEAP32[$112>>2]|0;
    $113 = ($pDestIdx$0|0)==(0|0);
    if ($113) {
     $destHasUniqueIdx$0$lcssa = $destHasUniqueIdx$0$;
     break L84;
    } else {
     $destHasUniqueIdx$027 = $destHasUniqueIdx$0$;$pDestIdx$028 = $pDestIdx$0;
    }
   }
   if ((label|0) == 67) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $120 = (($pDest) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)==(0|0);
 do {
  if (!($122)) {
   $123 = (($56) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (_sqlite3ExprListCompare($124,$121,-1)|0);
   $126 = ($125|0)==(0);
   if ($126) {
    break;
   } else {
    $$0 = 0;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $127 = HEAP32[$pParse>>2]|0;
 $128 = (($127) + 24|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 524288;
 $131 = ($130|0)==(0);
 do {
  if (!($131)) {
   $132 = (($pDest) + 16|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(0|0);
   if ($134) {
    break;
   } else {
    $$0 = 0;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $135 = $129 & 128;
 $136 = ($135|0)==(0);
 if (!($136)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $137 = (($56) + 68|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (_sqlite3SchemaToIndex($127,$138)|0);
 $140 = (_sqlite3GetVdbe($pParse)|0);
 _sqlite3CodeVerifySchema($pParse,$139);
 $141 = (($pParse) + 72|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + 1)|0;
 $144 = (($142) + 2)|0;
 HEAP32[$141>>2] = $144;
 $145 = (_autoIncBegin($pParse,$iDbDest,$pDest)|0);
 $146 = (_sqlite3GetTempReg($pParse)|0);
 $147 = (_sqlite3GetTempReg($pParse)|0);
 _sqlite3OpenTable($pParse,$143,$iDbDest,$pDest,53);
 $148 = HEAP16[$79>>1]|0;
 $149 = ($148<<16>>16)<(0);
 if ($149) {
  $150 = HEAP32[$109>>2]|0;
  $151 = ($150|0)==(0|0);
  $152 = ($destHasUniqueIdx$0$lcssa|0)==(0);
  $or$cond = $151 & $152;
  if ($or$cond) {
   label = 47;
  } else {
   label = 48;
  }
 } else {
  $$old = ($destHasUniqueIdx$0$lcssa|0)==(0);
  if ($$old) {
   label = 47;
  } else {
   label = 48;
  }
 }
 if ((label|0) == 47) {
  $$1$off = (($$1) + -1)|0;
  $153 = ($$1$off>>>0)>(1);
  if ($153) {
   label = 48;
  } else {
   $emptyDestTest$0 = 0;
  }
 }
 if ((label|0) == 48) {
  $154 = (_sqlite3VdbeAddOp2($140,105,$143,0)|0);
  $155 = (_sqlite3VdbeAddOp2($140,16,0,0)|0);
  _sqlite3VdbeJumpHere($140,$154);
  $emptyDestTest$0 = $155;
 }
 $156 = HEAP8[$63>>0]|0;
 $157 = $156 & 32;
 $158 = ($157<<24>>24)==(0);
 if ($158) {
  _sqlite3OpenTable($pParse,$142,$139,$56,52);
  $159 = (_sqlite3VdbeAddOp2($140,105,$142,0)|0);
  $160 = HEAP16[$79>>1]|0;
  $161 = ($160<<16>>16)>(-1);
  do {
   if ($161) {
    $162 = (_sqlite3VdbeAddOp2($140,100,$142,$147)|0);
    $163 = (_sqlite3VdbeAddOp3($140,67,$143,0,$147)|0);
    _sqlite3RowidConstraint($pParse,$$1,$pDest);
    _sqlite3VdbeJumpHere($140,$163);
    _autoIncStep($pParse,$145,$147);
    $addr1$0 = $162;
   } else {
    $164 = HEAP32[$109>>2]|0;
    $165 = ($164|0)==(0|0);
    if ($165) {
     $166 = (_sqlite3VdbeAddOp2($140,69,$143,$147)|0);
     $addr1$0 = $166;
     break;
    } else {
     $167 = (_sqlite3VdbeAddOp2($140,100,$142,$147)|0);
     $addr1$0 = $167;
     break;
    }
   }
  } while(0);
  (_sqlite3VdbeAddOp2($140,99,$142,$146)|0);
  (_sqlite3VdbeAddOp3($140,70,$143,$146,$147)|0);
  _sqlite3VdbeChangeP5($140,11);
  $168 = HEAP32[$pDest>>2]|0;
  _sqlite3VdbeChangeP4($140,-1,$168,0);
  (_sqlite3VdbeAddOp2($140,9,$142,$addr1$0)|0);
  (_sqlite3VdbeAddOp2($140,58,$142,0)|0);
  (_sqlite3VdbeAddOp2($140,58,$143,0)|0);
  $emptySrcTest$0 = $159;
 } else {
  $169 = (($pDest) + 32|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = HEAP32[$pDest>>2]|0;
  _sqlite3TableLock($pParse,$iDbDest,$170,1,$171);
  $172 = (($56) + 32|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = HEAP32[$56>>2]|0;
  _sqlite3TableLock($pParse,$139,$173,0,$174);
  $emptySrcTest$0 = 0;
 }
 $pDestIdx$110 = HEAP32[$109>>2]|0;
 $175 = ($pDestIdx$110|0)==(0|0);
 if (!($175)) {
  $176 = (($56) + 8|0);
  $pDestIdx$111 = $pDestIdx$110;
  while(1) {
   $pSrcIdx$17 = HEAP32[$176>>2]|0;
   $177 = ($pSrcIdx$17|0)==(0|0);
   L130: do {
    if ($177) {
     $pSrcIdx$1$lcssa = 0;
    } else {
     $pSrcIdx$18 = $pSrcIdx$17;
     while(1) {
      $180 = (_xferCompatibleIndex($pDestIdx$111,$pSrcIdx$18)|0);
      $181 = ($180|0)==(0);
      if (!($181)) {
       $pSrcIdx$1$lcssa = $pSrcIdx$18;
       break L130;
      }
      $178 = (($pSrcIdx$18) + 20|0);
      $pSrcIdx$1 = HEAP32[$178>>2]|0;
      $179 = ($pSrcIdx$1|0)==(0|0);
      if ($179) {
       $pSrcIdx$1$lcssa = 0;
       break;
      } else {
       $pSrcIdx$18 = $pSrcIdx$1;
      }
     }
    }
   } while(0);
   $182 = (($pSrcIdx$1$lcssa) + 44|0);
   $183 = HEAP32[$182>>2]|0;
   (_sqlite3VdbeAddOp3($140,52,$142,$183,$139)|0);
   _sqlite3VdbeSetP4KeyInfo($pParse,$pSrcIdx$1$lcssa);
   $184 = (($pDestIdx$111) + 44|0);
   $185 = HEAP32[$184>>2]|0;
   (_sqlite3VdbeAddOp3($140,53,$143,$185,$iDbDest)|0);
   _sqlite3VdbeSetP4KeyInfo($pParse,$pDestIdx$111);
   _sqlite3VdbeChangeP5($140,1);
   $186 = (_sqlite3VdbeAddOp2($140,105,$142,0)|0);
   (_sqlite3VdbeAddOp2($140,98,$142,$146)|0);
   (_sqlite3VdbeAddOp3($140,107,$143,$146,1)|0);
   $187 = (($186) + 1)|0;
   (_sqlite3VdbeAddOp2($140,9,$142,$187)|0);
   _sqlite3VdbeJumpHere($140,$186);
   (_sqlite3VdbeAddOp2($140,58,$142,0)|0);
   (_sqlite3VdbeAddOp2($140,58,$143,0)|0);
   $188 = (($pDestIdx$111) + 20|0);
   $pDestIdx$1 = HEAP32[$188>>2]|0;
   $189 = ($pDestIdx$1|0)==(0|0);
   if ($189) {
    break;
   } else {
    $pDestIdx$111 = $pDestIdx$1;
   }
  }
 }
 $190 = ($emptySrcTest$0|0)==(0);
 if (!($190)) {
  _sqlite3VdbeJumpHere($140,$emptySrcTest$0);
 }
 _sqlite3ReleaseTempReg($pParse,$147);
 _sqlite3ReleaseTempReg($pParse,$146);
 $191 = ($emptyDestTest$0|0)==(0);
 if ($191) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 (_sqlite3VdbeAddOp2($140,24,0,0)|0);
 _sqlite3VdbeJumpHere($140,$emptyDestTest$0);
 (_sqlite3VdbeAddOp2($140,58,$143,0)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _autoIncBegin($pParse,$iDb,$pTab) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $pTab = $pTab|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond3 = 0, $pInfo$0 = 0, $pInfo$02 = 0, $pInfo$04 = 0, $pInfo$1 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 8;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pParse) + 412|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $pParse$ = $6 ? $pParse : $5;
 $7 = (($pParse$) + 408|0);
 $pInfo$02 = HEAP32[$7>>2]|0;
 $cond3 = ($pInfo$02|0)==(0|0);
 L4: do {
  if ($cond3) {
   label = 5;
  } else {
   $pInfo$04 = $pInfo$02;
   while(1) {
    $8 = (($pInfo$04) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==($pTab|0);
    if ($10) {
     $pInfo$1 = $pInfo$04;
     break L4;
    }
    $pInfo$0 = HEAP32[$pInfo$04>>2]|0;
    $cond = ($pInfo$0|0)==(0|0);
    if ($cond) {
     label = 5;
     break;
    } else {
     $pInfo$04 = $pInfo$0;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $11 = HEAP32[$pParse>>2]|0;
   $12 = (_sqlite3DbMallocRaw($11,16)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $14 = HEAP32[$7>>2]|0;
    HEAP32[$12>>2] = $14;
    HEAP32[$7>>2] = $12;
    $15 = (($12) + 4|0);
    HEAP32[$15>>2] = $pTab;
    $16 = (($12) + 8|0);
    HEAP32[$16>>2] = $iDb;
    $17 = (($pParse$) + 76|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 2)|0;
    HEAP32[$17>>2] = $19;
    $20 = (($12) + 12|0);
    HEAP32[$20>>2] = $19;
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 1)|0;
    HEAP32[$17>>2] = $22;
    $pInfo$1 = $12;
    break;
   }
  }
 } while(0);
 $23 = (($pInfo$1) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $$0 = $24;
 STACKTOP = sp;return ($$0|0);
}
function _readsTable($p,$iDb,$pTab) {
 $p = $p|0;
 $iDb = $iDb|0;
 $pTab = $pTab|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $pIndex$0 = 0, $pIndex$01 = 0, $pIndex$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($p)|0);
 $$idx = (($0) + 32|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
 $2 = (($pTab) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 16;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $30 = 0;
 } else {
  $6 = HEAP32[$p>>2]|0;
  $7 = (_sqlite3GetVTable($6,$pTab)|0);
  $30 = $7;
 }
 $8 = ($1|0)>(1);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pTab) + 32|0);
 $10 = (($pTab) + 8|0);
 $i$04 = 1;
 L7: while(1) {
  $11 = (_sqlite3VdbeGetOp($0,$i$04)|0);
  $12 = HEAP8[$11>>0]|0;
  if ((($12<<24>>24) == -108)) {
   label = 12;
  } else if ((($12<<24>>24) == 52)) {
   $13 = (($11) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($iDb|0);
   if ($15) {
    $16 = (($11) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$9>>2]|0;
    $19 = ($17|0)==($18|0);
    if ($19) {
     $$0 = 1;
     label = 14;
     break;
    }
    $pIndex$01 = HEAP32[$10>>2]|0;
    $20 = ($pIndex$01|0)==(0|0);
    if (!($20)) {
     $pIndex$02 = $pIndex$01;
     while(1) {
      $23 = (($pIndex$02) + 44|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($17|0)==($24|0);
      if ($25) {
       $$0 = 1;
       label = 14;
       break L7;
      }
      $21 = (($pIndex$02) + 20|0);
      $pIndex$0 = HEAP32[$21>>2]|0;
      $22 = ($pIndex$0|0)==(0|0);
      if ($22) {
       break;
      } else {
       $pIndex$02 = $pIndex$0;
      }
     }
    }
    $26 = ($12<<24>>24)==(-108);
    if ($26) {
     label = 12;
    }
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $27 = (($11) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==($30|0);
   if ($29) {
    $$0 = 1;
    label = 14;
    break;
   }
  }
  $31 = (($i$04) + 1)|0;
  $32 = ($31|0)<($1|0);
  if ($32) {
   $i$04 = $31;
  } else {
   $$0 = 0;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3ExprCodeAndCache($pParse,$pExpr,$target) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3ExprCode($pParse,$pExpr,$target);
 $2 = (($pParse) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 (_sqlite3VdbeAddOp2($1,33,$target,$4)|0);
 _exprToRegister($pExpr,$4);
 STACKTOP = sp;return;
}
function _sqlite3TableAffinity($v,$pTab,$iReg) {
 $v = $v|0;
 $pTab = $pTab|0;
 $iReg = $iReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$1 = 0, $v$idx$val = 0, $zColAff$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $v$idx$val = HEAP32[$v>>2]|0;
  $3 = (_sqlite3VdbeDb($v$idx$val)|0);
  $4 = (($pTab) + 38|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = (($6) + 1)|0;
  $8 = (_sqlite3DbMallocRaw(0,$7)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $13 = (($3) + 64|0);
   HEAP8[$13>>0] = 1;
   STACKTOP = sp;return;
  }
  $10 = HEAP16[$4>>1]|0;
  $11 = ($10<<16>>16)>(0);
  if ($11) {
   $12 = (($pTab) + 4|0);
   $i$02 = 0;
   while(1) {
    $14 = HEAP32[$12>>2]|0;
    $15 = ((($14) + (($i$02*24)|0)|0) + 21|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (($8) + ($i$02)|0);
    HEAP8[$17>>0] = $16;
    $18 = (($i$02) + 1)|0;
    $19 = HEAP16[$4>>1]|0;
    $20 = $19 << 16 >> 16;
    $21 = ($18|0)<($20|0);
    if ($21) {
     $i$02 = $18;
    } else {
     $i$1 = $18;
     break;
    }
   }
  } else {
   $i$1 = 0;
  }
  while(1) {
   $22 = (($i$1) + -1)|0;
   $23 = (($8) + ($i$1)|0);
   HEAP8[$23>>0] = 0;
   $24 = ($i$1|0)>(0);
   if (!($24)) {
    break;
   }
   $25 = (($8) + ($22)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(98);
   if ($27) {
    $i$1 = $22;
   } else {
    break;
   }
  }
  HEAP32[$0>>2] = $8;
  $zColAff$0 = $8;
 } else {
  $zColAff$0 = $1;
 }
 $28 = (_sqlite3Strlen30($zColAff$0)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = ($iReg|0)==(0);
 if ($30) {
  _sqlite3VdbeChangeP4($v,-1,$zColAff$0,$28);
  STACKTOP = sp;return;
 } else {
  (_sqlite3VdbeAddOp4($v,47,$iReg,$28,0,$zColAff$0,$28)|0);
  STACKTOP = sp;return;
 }
}
function _sqlite3CodeRowTrigger($pParse,$pTrigger,$op,$pChanges,$tr_tm,$pTab,$reg,$orconf,$ignoreJump) {
 $pParse = $pParse|0;
 $pTrigger = $pTrigger|0;
 $op = $op|0;
 $pChanges = $pChanges|0;
 $tr_tm = $tr_tm|0;
 $pTab = $pTab|0;
 $reg = $reg|0;
 $orconf = $orconf|0;
 $ignoreJump = $ignoreJump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pTrigger|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$01 = $pTrigger;
 }
 while(1) {
  $1 = (($p$01) + 8|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($op|0);
  if ($4) {
   $5 = (($p$01) + 9|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ($7|0)==($tr_tm|0);
   if ($8) {
    $9 = (($p$01) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_checkColumnOverlap($10,$pChanges)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     _sqlite3CodeRowTriggerDirect($pParse,$p$01,$pTab,$reg,$orconf,$ignoreJump);
    }
   }
  }
  $13 = (($p$01) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   break;
  } else {
   $p$01 = $14;
  }
 }
 STACKTOP = sp;return;
}
function _autoIncStep($pParse,$memId,$regRowid) {
 $pParse = $pParse|0;
 $memId = $memId|0;
 $regRowid = $regRowid|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($memId|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($pParse) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 (_sqlite3VdbeAddOp2($2,131,$memId,$regRowid)|0);
 STACKTOP = sp;return;
}
function _sqlite3ExprCodeFactorable($pParse,$pExpr,$target) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 25|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (_sqlite3ExprIsConstant($pExpr)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   _sqlite3ExprCodeAtInit($pParse,$pExpr,$target,0);
   STACKTOP = sp;return;
  }
 }
 _sqlite3ExprCode($pParse,$pExpr,$target);
 STACKTOP = sp;return;
}
function _sqlite3VtabMakeWritable($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = (($pParse$) + 456|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 $6 = (($pParse$) + 524|0);
 $7 = HEAP32[$6>>2]|0;
 L1: do {
  if ($5) {
   $i$04 = 0;
   while(1) {
    $10 = (($7) + ($i$04<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($pTab|0);
    $9 = (($i$04) + 1)|0;
    if ($12) {
     break;
    }
    $8 = ($9|0)<($4|0);
    if ($8) {
     $i$04 = $9;
    } else {
     break L1;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $13 = $4 << 2;
 $14 = (($13) + 4)|0;
 $15 = (_sqlite3_realloc($7,$14)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $21 = HEAP32[$pParse$>>2]|0;
  $22 = (($21) + 64|0);
  HEAP8[$22>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $17 = (($pParse$) + 524|0);
  HEAP32[$17>>2] = $15;
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$3>>2] = $19;
  $20 = (($15) + ($18<<2)|0);
  HEAP32[$20>>2] = $pTab;
  STACKTOP = sp;return;
 }
}
function _sqlite3GenerateConstraintChecks($pParse,$pTab,$aRegIdx,$iDataCur,$iIdxCur,$regNewData,$regOldData,$pkChng,$overrideError,$ignoreDest,$pbMayReplace) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $aRegIdx = $aRegIdx|0;
 $iDataCur = $iDataCur|0;
 $iIdxCur = $iIdxCur|0;
 $regNewData = $regNewData|0;
 $regOldData = $regOldData|0;
 $pkChng = $pkChng|0;
 $overrideError = $overrideError|0;
 $ignoreDest = $ignoreDest|0;
 $pbMayReplace = $pbMayReplace|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$4 = 0, $$7 = 0, $$addrJump$0 = 0, $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx9 = 0, $$idx9$val = 0, $$lcssa = 0, $$off = 0, $$onError$0 = 0, $$onError$2 = 0, $$op$0 = 0, $$pre = 0;
 var $$pre$phiZ2D = 0, $$pre54 = 0, $$pre57 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addrJump$022 = 0, $bAffinityDone$028 = 0, $bAffinityDone$1 = 0, $bAffinityDone$2 = 0, $exitcond = 0, $i$048 = 0, $i$145 = 0, $i$215 = 0, $i$318 = 0;
 var $i$421 = 0, $ipkBottom$0 = 0, $ipkTop$0 = 0, $ipkTop$1 = 0, $ix$030 = 0, $nPkField$0 = 0, $onError$0 = 0, $onError$1 = 0, $onError$244 = 0, $onError$4 = 0, $onError$5 = 0, $onError$6 = 0, $onError$7 = 0, $op$023 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond8 = 0, $pIdx$0 = 0;
 var $pIdx$039 = 0, $pIdx$040 = 0, $pIdx$1 = 0, $pIdx$126 = 0, $pIdx$132 = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pPk$0 = 0, $pTrigger$012 = 0, $pTrigger2$0 = 0, $regRowid$027 = 0, $regRowid$1$lcssa = 0, $regRowid$114 = 0, $regRowid$2 = 0, $regRowid$3 = 0, $regRowid$4 = 0, $seenReplace$0 = 0, $seenReplace$1 = 0, $seenReplace$2$lcssa = 0;
 var $seenReplace$229 = 0, $seenReplace$3 = 0, $seenReplace$4 = 0, $switch = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $x$0 = 0, $zName$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($regOldData|0)!=(0);
 $1 = HEAP32[$pParse>>2]|0;
 $2 = (_sqlite3GetVdbe($pParse)|0);
 $3 = (($pTab) + 38|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (($pTab) + 44|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 32;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $nPkField$0 = 1;$pPk$0 = 0;
 } else {
  $9 = (_sqlite3PrimaryKeyIndex($pTab)|0);
  $10 = (($9) + 50|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $nPkField$0 = $12;$pPk$0 = $9;
 }
 $13 = ($4<<16>>16)>(0);
 if ($13) {
  $14 = (($pTab) + 36|0);
  $15 = (($pTab) + 4|0);
  $16 = ($overrideError<<24>>24)==(10);
  $17 = (($regNewData) + 1)|0;
  $18 = $overrideError&255;
  $19 = $4 << 16 >> 16;
  $i$048 = 0;
  while(1) {
   $20 = HEAP16[$14>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($i$048|0)==($21|0);
   do {
    if (!($22)) {
     $23 = HEAP32[$15>>2]|0;
     $24 = ((($23) + (($i$048*24)|0)|0) + 20|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = ($25<<24>>24)==(0);
     if (!($27)) {
      if ($16) {
       $28 = ($25<<24>>24)==(10);
       $$ = $28 ? 2 : $26;
       $onError$0 = $$;
      } else {
       $onError$0 = $18;
      }
      $29 = ($onError$0|0)==(5);
      if ($29) {
       $30 = ((($23) + (($i$048*24)|0)|0) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0|0);
       $$onError$0 = $32 ? 2 : 5;
       $onError$1 = $$onError$0;
      } else {
       $onError$1 = $onError$0;
      }
      if ((($onError$1|0) == 3) | (($onError$1|0) == 1)) {
       $35 = $23;
      } else if ((($onError$1|0) == 4)) {
       $39 = (($17) + ($i$048))|0;
       (_sqlite3VdbeAddOp2($2,76,$39,$ignoreDest)|0);
       break;
      } else if ((($onError$1|0) == 2)) {
       _sqlite3MayAbort($pParse);
       $$pre54 = HEAP32[$15>>2]|0;
       $35 = $$pre54;
      } else {
       $40 = (($17) + ($i$048))|0;
       $41 = (_sqlite3VdbeAddOp1($2,77,$40)|0);
       $42 = HEAP32[$15>>2]|0;
       $43 = ((($42) + (($i$048*24)|0)|0) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       _sqlite3ExprCode($pParse,$44,$40);
       _sqlite3VdbeJumpHere($2,$41);
       break;
      }
      $33 = HEAP32[$pTab>>2]|0;
      $34 = (($35) + (($i$048*24)|0)|0);
      $36 = HEAP32[$34>>2]|0;
      HEAP32[$vararg_buffer>>2] = $33;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $36;
      $37 = (_sqlite3MPrintf($1,17600,$vararg_buffer)|0);
      $38 = (($17) + ($i$048))|0;
      (_sqlite3VdbeAddOp4($2,23,1299,$onError$1,$38,$37,-1)|0);
      _sqlite3VdbeChangeP5($2,1);
     }
    }
   } while(0);
   $45 = (($i$048) + 1)|0;
   $exitcond = ($45|0)==($19|0);
   if ($exitcond) {
    break;
   } else {
    $i$048 = $45;
   }
  }
 }
 $46 = (($pTab) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if (!($48)) {
  $49 = (($1) + 24|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 8192;
  $52 = ($51|0)==(0);
  if ($52) {
   $53 = (($regNewData) + 1)|0;
   $54 = (($pParse) + 96|0);
   HEAP32[$54>>2] = $53;
   $55 = HEAP32[$47>>2]|0;
   $56 = ($55|0)>(0);
   if ($56) {
    $57 = $overrideError&255;
    $58 = ($overrideError<<24>>24)==(10);
    $$1 = $58 ? 2 : $57;
    $$idx11 = (($2) + 24|0);
    $59 = (($47) + 8|0);
    $i$145 = 0;$onError$244 = $$1;
    while(1) {
     $$idx11$val = HEAP32[$$idx11>>2]|0;
     $60 = (_sqlite3VdbeMakeLabel($$idx11$val)|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = (($61) + (($i$145*20)|0)|0);
     $63 = HEAP32[$62>>2]|0;
     _sqlite3ExprIfTrue($pParse,$63,$60,8);
     $64 = ($onError$244|0)==(4);
     if ($64) {
      (_sqlite3VdbeAddOp2($2,16,0,$ignoreDest)|0);
      $onError$4 = 4;
     } else {
      $65 = HEAP32[$59>>2]|0;
      $66 = ((($65) + (($i$145*20)|0)|0) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $69 = HEAP32[$pTab>>2]|0;
       $zName$0 = $69;
      } else {
       $zName$0 = $67;
      }
      $70 = ($onError$244|0)==(5);
      $$onError$2 = $70 ? 2 : $onError$244;
      _sqlite3HaltConstraint($pParse,275,$$onError$2,$zName$0,0,3);
      $onError$4 = $$onError$2;
     }
     _sqlite3VdbeResolveLabel($2,$60);
     $71 = (($i$145) + 1)|0;
     $72 = HEAP32[$47>>2]|0;
     $73 = ($71|0)<($72|0);
     if ($73) {
      $i$145 = $71;$onError$244 = $onError$4;
     } else {
      break;
     }
    }
   }
  }
 }
 $74 = ($pkChng<<24>>24)!=(0);
 $75 = ($pPk$0|0)==(0|0);
 $or$cond = $74 & $75;
 if ($or$cond) {
  $$idx10 = (($2) + 24|0);
  $$idx10$val = HEAP32[$$idx10>>2]|0;
  $76 = (_sqlite3VdbeMakeLabel($$idx10$val)|0);
  $77 = (($pTab) + 45|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ($overrideError<<24>>24)==(10);
  if ($79) {
   $81 = $78&255;
   $82 = ($78<<24>>24)==(10);
   $$2 = $82 ? 2 : $81;
   $onError$5 = $$2;
  } else {
   $80 = $overrideError&255;
   $onError$5 = $80;
  }
  if ($0) {
   (_sqlite3VdbeAddOp3($2,79,$regNewData,$76,$regOldData)|0);
   _sqlite3VdbeChangeP5($2,-120);
  }
  $83 = ($onError$5|0)!=(5);
  $84 = ($overrideError<<24>>24)==(5);
  $or$cond3 = $83 | $84;
  L47: do {
   if ($or$cond3) {
    $ipkTop$0 = 0;
   } else {
    $85 = (($pTab) + 8|0);
    $pIdx$039 = HEAP32[$85>>2]|0;
    $86 = ($pIdx$039|0)==(0|0);
    if ($86) {
     $ipkTop$0 = 0;
    } else {
     $pIdx$040 = $pIdx$039;
     while(1) {
      $89 = (($pIdx$040) + 54|0);
      $90 = HEAP8[$89>>0]|0;
      $$off = (($90) + -3)<<24>>24;
      $switch = ($$off&255)<(2);
      if ($switch) {
       break;
      }
      $87 = (($pIdx$040) + 20|0);
      $pIdx$0 = HEAP32[$87>>2]|0;
      $88 = ($pIdx$0|0)==(0|0);
      if ($88) {
       $ipkTop$0 = 0;
       break L47;
      } else {
       $pIdx$040 = $pIdx$0;
      }
     }
     $91 = (_sqlite3VdbeAddOp0($2,16)|0);
     $ipkTop$0 = $91;
    }
   }
  } while(0);
  (_sqlite3VdbeAddOp3($2,67,$iDataCur,$76,$regNewData)|0);
  L54: do {
   switch ($onError$5|0) {
   case 4:  {
    (_sqlite3VdbeAddOp2($2,16,0,$ignoreDest)|0);
    $seenReplace$0 = 0;
    break;
   }
   case 3: case 2: case 1:  {
    $onError$6 = $onError$5;
    label = 40;
    break;
   }
   case 5:  {
    $92 = (($1) + 24|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $93 & 262144;
    $95 = ($94|0)==(0);
    if ($95) {
     label = 43;
    } else {
     $96 = (_sqlite3TriggersExist($pParse,$pTab,109,0,0)|0);
     $97 = ($96|0)==(0|0);
     if ($97) {
      label = 43;
     } else {
      $pTrigger$012 = $96;
     }
    }
    if ((label|0) == 43) {
     $pParse$idx$val = HEAP32[$pParse>>2]|0;
     $pParse$idx$val$idx = (($pParse$idx$val) + 24|0);
     $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
     $98 = (_sqlite3FkRequired($pParse$idx$val$idx$val,$pTab,0,0)|0);
     $99 = ($98|0)==(0);
     if ($99) {
      $100 = (($pTab) + 8|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)==(0|0);
      if ($102) {
       $seenReplace$0 = 1;
       break L54;
      }
      _sqlite3MultiWrite($pParse);
      _sqlite3GenerateRowIndexDelete($pParse,$pTab,$iDataCur,$iIdxCur,0);
      $seenReplace$0 = 1;
      break L54;
     } else {
      $pTrigger$012 = 0;
     }
    }
    _sqlite3MultiWrite($pParse);
    _sqlite3GenerateRowDelete($pParse,$pTab,$pTrigger$012,$iDataCur,$iIdxCur,$regNewData,1,0,5,1);
    $seenReplace$0 = 1;
    break;
   }
   default: {
    $onError$6 = 2;
    label = 40;
   }
   }
  } while(0);
  if ((label|0) == 40) {
   _sqlite3RowidConstraint($pParse,$onError$6,$pTab);
   $seenReplace$0 = 0;
  }
  _sqlite3VdbeResolveLabel($2,$76);
  $103 = ($ipkTop$0|0)==(0);
  if ($103) {
   $ipkBottom$0 = 0;$ipkTop$1 = 0;$seenReplace$1 = $seenReplace$0;
  } else {
   $104 = (_sqlite3VdbeAddOp0($2,16)|0);
   _sqlite3VdbeJumpHere($2,$ipkTop$0);
   $ipkBottom$0 = $104;$ipkTop$1 = $ipkTop$0;$seenReplace$1 = $seenReplace$0;
  }
 } else {
  $ipkBottom$0 = 0;$ipkTop$1 = 0;$seenReplace$1 = 0;
 }
 $105 = (($pTab) + 8|0);
 $pIdx$126 = HEAP32[$105>>2]|0;
 $106 = ($pIdx$126|0)==(0|0);
 if ($106) {
  $seenReplace$2$lcssa = $seenReplace$1;
 } else {
  $107 = (($regNewData) + 1)|0;
  $$idx9 = (($2) + 24|0);
  $108 = ($pkChng<<24>>24)==(0);
  $109 = ($overrideError<<24>>24)==(10);
  $$idx = (($2) + 32|0);
  $110 = (($pPk$0) + 50|0);
  $111 = (($pPk$0) + 32|0);
  $112 = (($pPk$0) + 4|0);
  $113 = (($regOldData) + 1)|0;
  $114 = (($1) + 24|0);
  $115 = $nPkField$0&65535;
  $116 = $overrideError&255;
  $117 = (($pTab) + 36|0);
  $118 = (($pParse) + 96|0);
  $bAffinityDone$028 = 0;$ix$030 = 0;$pIdx$132 = $pIdx$126;$regRowid$027 = -1;$seenReplace$229 = $seenReplace$1;
  while(1) {
   $119 = (($aRegIdx) + ($ix$030<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120|0)==(0);
   do {
    if ($121) {
     $bAffinityDone$2 = $bAffinityDone$028;$regRowid$4 = $regRowid$027;$seenReplace$4 = $seenReplace$229;
    } else {
     $122 = ($bAffinityDone$028<<24>>24)==(0);
     if ($122) {
      _sqlite3TableAffinity($2,$pTab,$107);
      $bAffinityDone$1 = 1;
     } else {
      $bAffinityDone$1 = $bAffinityDone$028;
     }
     $123 = (($ix$030) + ($iIdxCur))|0;
     $$idx9$val = HEAP32[$$idx9>>2]|0;
     $124 = (_sqlite3VdbeMakeLabel($$idx9$val)|0);
     $125 = (($pIdx$132) + 36|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)==(0|0);
     if (!($127)) {
      $128 = HEAP32[$119>>2]|0;
      (_sqlite3VdbeAddOp2($2,28,0,$128)|0);
      HEAP32[$118>>2] = $107;
      $129 = HEAP32[$125>>2]|0;
      _sqlite3ExprIfFalse($pParse,$129,$124,8);
      HEAP32[$118>>2] = 0;
     }
     $130 = (($pIdx$132) + 52|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (_sqlite3GetTempRange($pParse,$132)|0);
     $134 = HEAP16[$130>>1]|0;
     $135 = $134&65535;
     $136 = ($134<<16>>16)==(0);
     if ($136) {
      $$lcssa = $135;$regRowid$1$lcssa = $regRowid$027;
     } else {
      $137 = (($pIdx$132) + 4|0);
      $227 = $134;$i$215 = 0;$regRowid$114 = $regRowid$027;
      while(1) {
       $138 = HEAP32[$137>>2]|0;
       $139 = (($138) + ($i$215<<1)|0);
       $140 = HEAP16[$139>>1]|0;
       $141 = $140 << 16 >> 16;
       $142 = ($140<<16>>16)<(0);
       if ($142) {
        label = 61;
       } else {
        $143 = HEAP16[$117>>1]|0;
        $144 = ($140<<16>>16)==($143<<16>>16);
        if ($144) {
         label = 61;
        } else {
         $149 = (($107) + ($141))|0;
         $$pre57 = (($i$215) + ($133))|0;
         $$pre$phiZ2D = $$pre57;$regRowid$2 = $regRowid$114;$x$0 = $149;
         label = 64;
        }
       }
       if ((label|0) == 61) {
        label = 0;
        $145 = (($i$215) + ($133))|0;
        $146 = ($regRowid$114|0)==($145|0);
        if ($146) {
         $152 = $227;$regRowid$3 = $regRowid$114;
        } else {
         $147 = HEAP32[$125>>2]|0;
         $148 = ($147|0)==(0|0);
         $$4 = $148 ? $145 : -1;
         $$pre$phiZ2D = $145;$regRowid$2 = $$4;$x$0 = $regNewData;
         label = 64;
        }
       }
       if ((label|0) == 64) {
        label = 0;
        (_sqlite3VdbeAddOp2($2,34,$x$0,$$pre$phiZ2D)|0);
        $$pre = HEAP16[$130>>1]|0;
        $152 = $$pre;$regRowid$3 = $regRowid$2;
       }
       $150 = (($i$215) + 1)|0;
       $151 = $152&65535;
       $153 = ($150|0)<($151|0);
       if ($153) {
        $227 = $152;$i$215 = $150;$regRowid$114 = $regRowid$3;
       } else {
        $$lcssa = $151;$regRowid$1$lcssa = $regRowid$3;
        break;
       }
      }
     }
     $154 = HEAP32[$119>>2]|0;
     (_sqlite3VdbeAddOp3($2,48,$133,$$lcssa,$154)|0);
     $155 = HEAP16[$130>>1]|0;
     $156 = $155&65535;
     _sqlite3ExprCacheAffinityChange($pParse,$133,$156);
     $157 = ($pPk$0|0)==($pIdx$132|0);
     $or$cond5 = $0 & $157;
     $or$cond6 = $or$cond5 & $108;
     if ($or$cond6) {
      _sqlite3VdbeResolveLabel($2,$124);
      $bAffinityDone$2 = $bAffinityDone$1;$regRowid$4 = $regRowid$1$lcssa;$seenReplace$4 = $seenReplace$229;
      break;
     }
     $158 = (($pIdx$132) + 54|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = ($159<<24>>24)==(0);
     if ($161) {
      $162 = HEAP16[$130>>1]|0;
      $163 = $162&65535;
      _sqlite3ReleaseTempRange($pParse,$133,$163);
      _sqlite3VdbeResolveLabel($2,$124);
      $bAffinityDone$2 = $bAffinityDone$1;$regRowid$4 = $regRowid$1$lcssa;$seenReplace$4 = $seenReplace$229;
      break;
     }
     if ($109) {
      $164 = ($159<<24>>24)==(10);
      $$7 = $164 ? 2 : $160;
      $onError$7 = $$7;
     } else {
      $onError$7 = $116;
     }
     $165 = (($pIdx$132) + 50|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     (_sqlite3VdbeAddOp4Int($2,64,$123,$124,$133,$167)|0);
     if ($157) {
      $173 = $133;
     } else {
      $168 = (_sqlite3GetTempRange($pParse,$nPkField$0)|0);
      $173 = $168;
     }
     $169 = ($onError$7|0)==(5);
     $or$cond8 = $0 | $169;
     do {
      if ($or$cond8) {
       $170 = HEAP8[$5>>0]|0;
       $171 = $170 & 32;
       $172 = ($171<<24>>24)==(0);
       if ($172) {
        (_sqlite3VdbeAddOp2($2,109,$123,$173)|0);
        if (!($0)) {
         break;
        }
        (_sqlite3VdbeAddOp3($2,79,$173,$124,$regOldData)|0);
        _sqlite3VdbeChangeP5($2,-120);
        break;
       }
       do {
        if (!($157)) {
         $174 = HEAP16[$110>>1]|0;
         $175 = ($174<<16>>16)==(0);
         if ($175) {
          break;
         } else {
          $i$318 = 0;
         }
         while(1) {
          $176 = HEAP32[$112>>2]|0;
          $177 = (($176) + ($i$318<<1)|0);
          $178 = HEAP16[$177>>1]|0;
          $179 = (_sqlite3ColumnOfIndex($pIdx$132,$178)|0);
          $180 = $179 << 16 >> 16;
          $181 = (($i$318) + ($173))|0;
          (_sqlite3VdbeAddOp3($2,46,$123,$180,$181)|0);
          $182 = (($i$318) + 1)|0;
          $183 = HEAP16[$110>>1]|0;
          $184 = $183&65535;
          $185 = ($182|0)<($184|0);
          if ($185) {
           $i$318 = $182;
          } else {
           break;
          }
         }
        }
       } while(0);
       if (!($0)) {
        break;
       }
       $186 = HEAP16[$110>>1]|0;
       $187 = (($pIdx$132) + 55|0);
       $188 = HEAP8[$187>>0]|0;
       $189 = $188 & 3;
       $190 = ($189<<24>>24)==(2);
       $191 = $190 ? $133 : $173;
       $192 = ($186<<16>>16)==(0);
       if ($192) {
        break;
       }
       $$idx$val = HEAP32[$$idx>>2]|0;
       $193 = $186&65535;
       $194 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
       $195 = (($193) + ($194))|0;
       $addrJump$022 = $195;$i$421 = 0;$op$023 = 78;
       while(1) {
        $196 = HEAP32[$111>>2]|0;
        $197 = (($196) + ($i$421<<2)|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = (_sqlite3LocateCollSeq($pParse,$198)|0);
        $200 = HEAP32[$112>>2]|0;
        $201 = (($200) + ($i$421<<1)|0);
        $202 = HEAP16[$201>>1]|0;
        $203 = $202 << 16 >> 16;
        $204 = HEAP16[$110>>1]|0;
        $205 = $204&65535;
        $206 = (($205) + -1)|0;
        $207 = ($i$421|0)==($206|0);
        $$addrJump$0 = $207 ? $124 : $addrJump$022;
        $$op$0 = $207 ? 79 : $op$023;
        $208 = (($113) + ($203))|0;
        $209 = (($i$421) + ($191))|0;
        (_sqlite3VdbeAddOp4($2,$$op$0,$208,$$addrJump$0,$209,$199,-4)|0);
        _sqlite3VdbeChangeP5($2,-120);
        $210 = (($i$421) + 1)|0;
        $211 = HEAP16[$110>>1]|0;
        $212 = $211&65535;
        $213 = ($210|0)<($212|0);
        if ($213) {
         $addrJump$022 = $$addrJump$0;$i$421 = $210;$op$023 = $$op$0;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((($onError$7|0) == 4)) {
      (_sqlite3VdbeAddOp2($2,16,0,$ignoreDest)|0);
      $seenReplace$3 = $seenReplace$229;
     } else if ((($onError$7|0) == 3) | (($onError$7|0) == 2) | (($onError$7|0) == 1)) {
      _sqlite3UniqueConstraint($pParse,$onError$7,$pIdx$132);
      $seenReplace$3 = $seenReplace$229;
     } else {
      _sqlite3MultiWrite($pParse);
      $214 = HEAP32[$114>>2]|0;
      $215 = $214 & 262144;
      $216 = ($215|0)==(0);
      if ($216) {
       $pTrigger2$0 = 0;
      } else {
       $217 = (_sqlite3TriggersExist($pParse,$pTab,109,0,0)|0);
       $pTrigger2$0 = $217;
      }
      $218 = $157&1;
      _sqlite3GenerateRowDelete($pParse,$pTab,$pTrigger2$0,$iDataCur,$iIdxCur,$173,$115,0,5,$218);
      $seenReplace$3 = 1;
     }
     _sqlite3VdbeResolveLabel($2,$124);
     $219 = HEAP16[$130>>1]|0;
     $220 = $219&65535;
     _sqlite3ReleaseTempRange($pParse,$133,$220);
     $221 = ($173|0)==($133|0);
     if ($221) {
      $bAffinityDone$2 = $bAffinityDone$1;$regRowid$4 = $regRowid$1$lcssa;$seenReplace$4 = $seenReplace$3;
     } else {
      _sqlite3ReleaseTempRange($pParse,$173,$nPkField$0);
      $bAffinityDone$2 = $bAffinityDone$1;$regRowid$4 = $regRowid$1$lcssa;$seenReplace$4 = $seenReplace$3;
     }
    }
   } while(0);
   $222 = (($pIdx$132) + 20|0);
   $223 = (($ix$030) + 1)|0;
   $pIdx$1 = HEAP32[$222>>2]|0;
   $224 = ($pIdx$1|0)==(0|0);
   if ($224) {
    $seenReplace$2$lcssa = $seenReplace$4;
    break;
   } else {
    $bAffinityDone$028 = $bAffinityDone$2;$ix$030 = $223;$pIdx$132 = $pIdx$1;$regRowid$027 = $regRowid$4;$seenReplace$229 = $seenReplace$4;
   }
  }
 }
 $225 = ($ipkTop$1|0)==(0);
 if ($225) {
  HEAP32[$pbMayReplace>>2] = $seenReplace$2$lcssa;
  STACKTOP = sp;return;
 }
 $226 = (($ipkTop$1) + 1)|0;
 (_sqlite3VdbeAddOp2($2,16,0,$226)|0);
 _sqlite3VdbeJumpHere($2,$ipkBottom$0);
 HEAP32[$pbMayReplace>>2] = $seenReplace$2$lcssa;
 STACKTOP = sp;return;
}
function _sqlite3FkCheck($pParse,$pTab,$regOld,$regNew,$aChange,$bChngRowid) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $regOld = $regOld|0;
 $regNew = $regNew|0;
 $aChange = $aChange|0;
 $bChngRowid = $bChngRowid|0;
 var $$idx = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi31Z2D = 0, $$pre$phiZ2D = 0, $$pre28 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aiCol$0 = 0, $aiCol2 = 0, $aiFree = 0, $i$08 = 0, $i$16 = 0;
 var $iCol = 0, $isIgnore$0$lcssa = 0, $isIgnore$05 = 0, $isIgnore$1 = 0, $pFKey$0 = 0, $pFKey$013 = 0, $pFKey$014 = 0, $pFKey$12 = 0, $pIdx = 0, $pIdx1 = 0, $pTab$idx$pre$phiZZ2D = 0, $pTab$idx$val = 0, $pTab$idx1$val = 0, $pTab$idx1$val$pre = 0, $pTo$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pIdx = sp + 16|0;
 $aiFree = sp + 12|0;
 $iCol = sp + 8|0;
 $pIdx1 = sp + 4|0;
 $aiCol2 = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 442|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($0) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 524288;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($pTab) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3SchemaToIndex($0,$8)|0);
 $10 = (($0) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<4)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($pTab) + 16|0);
 $pFKey$013 = HEAP32[$14>>2]|0;
 $15 = ($pFKey$013|0)==(0|0);
 do {
  if ($15) {
   $$pre28 = (($0) + 64|0);
   $$pre$phiZ2D = $$pre28;$pTab$idx$pre$phiZZ2D = $pTab;$pTab$idx1$val = $8;
  } else {
   $16 = ($aChange|0)==(0|0);
   $17 = ($2<<24>>24)==(0);
   $18 = (($0) + 64|0);
   $19 = (($regOld) + 1)|0;
   $20 = (($pParse) + 72|0);
   $21 = ($regOld|0)==(0);
   $22 = ($regNew|0)==(0);
   $23 = (($pTab) + 36|0);
   $24 = (($0) + 276|0);
   $pFKey$014 = $pFKey$013;
   L6: while(1) {
    HEAP32[$pIdx>>2] = 0;
    HEAP32[$aiFree>>2] = 0;
    if ($16) {
     $$phi$trans$insert = (($pFKey$014) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $34 = $$pre;
     label = 9;
    } else {
     $25 = HEAP32[$pTab>>2]|0;
     $26 = (($pFKey$014) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (_sqlite3_stricmp($25,$27)|0);
     $29 = ($28|0)==(0);
     if ($29) {
      $34 = $27;
      label = 9;
     } else {
      $30 = (_fkChildIsModified($pTab,$pFKey$014,$aChange,$bChngRowid)|0);
      $31 = ($30|0)==(0);
      if (!($31)) {
       $34 = $27;
       label = 9;
      }
     }
    }
    do {
     if ((label|0) == 9) {
      label = 0;
      $32 = HEAP8[$1>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if ($33) {
       $36 = (_sqlite3LocateTable($pParse,0,$34,$13)|0);
       $pTo$0 = $36;
      } else {
       $35 = (_sqlite3FindTable($0,$34,$13)|0);
       $pTo$0 = $35;
      }
      $37 = ($pTo$0|0)==(0|0);
      if (!($37)) {
       $38 = (_sqlite3FkLocateIndex($pParse,$pTo$0,$pFKey$014,$pIdx,$aiFree)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        $58 = HEAP32[$aiFree>>2]|0;
        $59 = ($58|0)==(0|0);
        if ($59) {
         $60 = (($pFKey$014) + 36|0);
         $61 = HEAP32[$60>>2]|0;
         HEAP32[$iCol>>2] = $61;
         $aiCol$0 = $iCol;
        } else {
         $aiCol$0 = $58;
        }
        $62 = (($pFKey$014) + 20|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = ($63|0)>(0);
        if ($64) {
         $65 = HEAP32[$pIdx>>2]|0;
         $66 = ($65|0)==(0|0);
         $67 = (($pTo$0) + 36|0);
         $68 = (($pTo$0) + 4|0);
         $69 = (($65) + 4|0);
         $i$16 = 0;$isIgnore$05 = 0;
         while(1) {
          $70 = (($aiCol$0) + ($i$16<<2)|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = HEAP16[$23>>1]|0;
          $73 = $72 << 16 >> 16;
          $74 = ($71|0)==($73|0);
          if ($74) {
           HEAP32[$70>>2] = -1;
          }
          $75 = HEAP32[$24>>2]|0;
          $76 = ($75|0)==(0|0);
          if ($76) {
           $isIgnore$1 = $isIgnore$05;
          } else {
           if ($66) {
            $$sink$in = $67;
           } else {
            $77 = HEAP32[$69>>2]|0;
            $78 = (($77) + ($i$16<<1)|0);
            $$sink$in = $78;
           }
           $$sink = HEAP16[$$sink$in>>1]|0;
           $79 = $$sink << 16 >> 16;
           $80 = HEAP32[$68>>2]|0;
           $81 = (($80) + (($79*24)|0)|0);
           $82 = HEAP32[$81>>2]|0;
           $83 = HEAP32[$pTo$0>>2]|0;
           $84 = (_sqlite3AuthReadCol($pParse,$83,$82,$9)|0);
           $85 = ($84|0)==(2);
           $86 = $85&1;
           $isIgnore$1 = $86;
          }
          $87 = (($i$16) + 1)|0;
          $88 = HEAP32[$62>>2]|0;
          $89 = ($87|0)<($88|0);
          if ($89) {
           $i$16 = $87;$isIgnore$05 = $isIgnore$1;
          } else {
           $$pre$phi31Z2D = $pTo$0;$isIgnore$0$lcssa = $isIgnore$1;
           break;
          }
         }
        } else {
         $$pre$phi31Z2D = $pTo$0;$isIgnore$0$lcssa = 0;
        }
        $90 = (($pTo$0) + 32|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = HEAP32[$$pre$phi31Z2D>>2]|0;
        _sqlite3TableLock($pParse,$9,$91,0,$92);
        $93 = HEAP32[$20>>2]|0;
        $94 = (($93) + 1)|0;
        HEAP32[$20>>2] = $94;
        if (!($21)) {
         $95 = HEAP32[$pIdx>>2]|0;
         _fkLookupParent($pParse,$9,$pTo$0,$95,$pFKey$014,$aiCol$0,$regOld,-1,$isIgnore$0$lcssa);
        }
        if (!($22)) {
         $96 = HEAP32[$pIdx>>2]|0;
         _fkLookupParent($pParse,$9,$pTo$0,$96,$pFKey$014,$aiCol$0,$regNew,1,$isIgnore$0$lcssa);
        }
        $97 = HEAP32[$aiFree>>2]|0;
        _sqlite3DbFree($0,$97);
        break;
       }
      }
      if ($17) {
       label = 58;
       break L6;
      }
      $40 = HEAP8[$18>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if (!($41)) {
       label = 58;
       break L6;
      }
      if ($37) {
       $42 = (_sqlite3GetVdbe($pParse)|0);
       $$idx = (($42) + 32|0);
       $$idx$val = HEAP32[$$idx>>2]|0;
       $43 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
       $44 = (($pFKey$014) + 20|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($43) + 1)|0;
       $47 = (($46) + ($45))|0;
       $48 = ($45|0)>(0);
       if ($48) {
        $i$08 = 0;
        while(1) {
         $49 = ((($pFKey$014) + ($i$08<<3)|0) + 36|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($19) + ($50))|0;
         (_sqlite3VdbeAddOp2($42,76,$51,$47)|0);
         $52 = (($i$08) + 1)|0;
         $53 = HEAP32[$44>>2]|0;
         $54 = ($52|0)<($53|0);
         if ($54) {
          $i$08 = $52;
         } else {
          break;
         }
        }
       }
       $55 = (($pFKey$014) + 24|0);
       $56 = HEAP8[$55>>0]|0;
       $57 = $56&255;
       (_sqlite3VdbeAddOp2($42,129,$57,-1)|0);
      }
     }
    } while(0);
    $98 = (($pFKey$014) + 4|0);
    $pFKey$0 = HEAP32[$98>>2]|0;
    $99 = ($pFKey$0|0)==(0|0);
    if ($99) {
     label = 38;
     break;
    } else {
     $pFKey$014 = $pFKey$0;
    }
   }
   if ((label|0) == 38) {
    $pTab$idx1$val$pre = HEAP32[$7>>2]|0;
    $$pre$phiZ2D = $18;$pTab$idx$pre$phiZZ2D = $pTab;$pTab$idx1$val = $pTab$idx1$val$pre;
    break;
   }
   else if ((label|0) == 58) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $pTab$idx$val = HEAP32[$pTab$idx$pre$phiZZ2D>>2]|0;
 $100 = (_sqlite3FkReferences($pTab$idx$val,$pTab$idx1$val)|0);
 $101 = ($100|0)==(0|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = ($aChange|0)==(0|0);
 $103 = (($pParse) + 412|0);
 $104 = (($pParse) + 22|0);
 $105 = (($pParse) + 72|0);
 $106 = ($regNew|0)==(0);
 $107 = ($regOld|0)==(0);
 $108 = ($2<<24>>24)==(0);
 $pFKey$12 = $100;
 L63: while(1) {
  HEAP32[$pIdx1>>2] = 0;
  HEAP32[$aiCol2>>2] = 0;
  if ($102) {
   label = 43;
  } else {
   $109 = (_fkParentIsModified($pTab,$pFKey$12,$aChange,$bChngRowid)|0);
   $110 = ($109|0)==(0);
   if (!($110)) {
    label = 43;
   }
  }
  do {
   if ((label|0) == 43) {
    label = 0;
    $111 = (($pFKey$12) + 24|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = ($112<<24>>24)==(0);
    if ($113) {
     $114 = HEAP32[$3>>2]|0;
     $115 = $114 & 16777216;
     $116 = ($115|0)==(0);
     if ($116) {
      $117 = HEAP32[$103>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $119 = HEAP8[$104>>0]|0;
       $120 = ($119<<24>>24)==(0);
       if ($120) {
        break;
       }
      }
     }
    }
    $121 = (_sqlite3FkLocateIndex($pParse,$pTab,$pFKey$12,$pIdx1,$aiCol2)|0);
    $122 = ($121|0)==(0);
    if (!($122)) {
     if ($108) {
      label = 58;
      break L63;
     }
     $123 = HEAP8[$$pre$phiZ2D>>0]|0;
     $124 = ($123<<24>>24)==(0);
     if ($124) {
      break;
     } else {
      label = 58;
      break L63;
     }
    }
    $125 = (_sqlite3SrcListAppend($0,0,0,0)|0);
    $126 = ($125|0)==(0|0);
    if (!($126)) {
     $127 = HEAP32[$pFKey$12>>2]|0;
     $128 = (($125) + 24|0);
     HEAP32[$128>>2] = $127;
     $129 = HEAP32[$pFKey$12>>2]|0;
     $130 = HEAP32[$129>>2]|0;
     $131 = (($125) + 16|0);
     HEAP32[$131>>2] = $130;
     $132 = (($127) + 40|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = (($133) + 1)<<16>>16;
     HEAP16[$132>>1] = $134;
     $135 = HEAP32[$105>>2]|0;
     $136 = (($135) + 1)|0;
     HEAP32[$105>>2] = $136;
     $137 = (($125) + 48|0);
     HEAP32[$137>>2] = $135;
     if (!($106)) {
      $138 = HEAP32[$pIdx1>>2]|0;
      $139 = HEAP32[$aiCol2>>2]|0;
      _fkScanChildren($pParse,$125,$pTab,$138,$pFKey$12,$139,$regNew,-1);
     }
     if (!($107)) {
      $140 = HEAP32[$pIdx1>>2]|0;
      $141 = HEAP32[$aiCol2>>2]|0;
      _fkScanChildren($pParse,$125,$pTab,$140,$pFKey$12,$141,$regOld,1);
     }
     HEAP32[$131>>2] = 0;
     _sqlite3SrcListDelete($0,$125);
    }
    $142 = HEAP32[$aiCol2>>2]|0;
    _sqlite3DbFree($0,$142);
   }
  } while(0);
  $143 = (($pFKey$12) + 12|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(0|0);
  if ($145) {
   label = 58;
   break;
  } else {
   $pFKey$12 = $144;
  }
 }
 if ((label|0) == 58) {
  STACKTOP = sp;return;
 }
}
function _sqlite3CompleteInsertion($pParse,$pTab,$iDataCur,$iIdxCur,$regNewData,$aRegIdx,$isUpdate,$appendBias,$useSeekResult) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $iDataCur = $iDataCur|0;
 $iIdxCur = $iIdxCur|0;
 $regNewData = $regNewData|0;
 $aRegIdx = $aRegIdx|0;
 $isUpdate = $isUpdate|0;
 $appendBias = $appendBias|0;
 $useSeekResult = $useSeekResult|0;
 var $$idx = 0, $$idx$val = 0, $$mux = 0, $$not = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bAffinityDone$0$lcssa = 0;
 var $bAffinityDone$05 = 0, $bAffinityDone$1 = 0, $brmerge = 0, $i$03 = 0, $pIdx$0 = 0, $pIdx$02 = 0, $pIdx$06 = 0, $pik_flags$01 = 0, $pik_flags$1 = 0, $pik_flags$2 = 0, $pik_flags$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (($pTab) + 8|0);
 $pIdx$02 = HEAP32[$1>>2]|0;
 $2 = ($pIdx$02|0)==(0|0);
 if ($2) {
  $$pre8 = (($pTab) + 44|0);
  $$pre$phiZ2D = $$pre8;$bAffinityDone$0$lcssa = 0;
 } else {
  $3 = ($useSeekResult|0)!=(0);
  $4 = (($pTab) + 44|0);
  $5 = $3 ? 17 : 1;
  $$idx = (($0) + 32|0);
  $bAffinityDone$05 = 0;$i$03 = 0;$pIdx$06 = $pIdx$02;
  while(1) {
   $6 = (($aRegIdx) + ($i$03<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   do {
    if ($8) {
     $bAffinityDone$1 = $bAffinityDone$05;
    } else {
     $9 = (($pIdx$06) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0|0);
     if ($11) {
      $15 = $7;
     } else {
      $$idx$val = HEAP32[$$idx>>2]|0;
      $12 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
      $13 = (($12) + 2)|0;
      (_sqlite3VdbeAddOp2($0,76,$7,$13)|0);
      $$pre = HEAP32[$6>>2]|0;
      $15 = $$pre;
     }
     $14 = (($i$03) + ($iIdxCur))|0;
     (_sqlite3VdbeAddOp2($0,107,$14,$15)|0);
     $16 = (($pIdx$06) + 55|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 & 3;
     $19 = ($18<<24>>24)==(2);
     if ($19) {
      $20 = HEAP8[$4>>0]|0;
      $21 = $20 & 32;
      $$not = ($21<<24>>24)!=(0);
      $brmerge = $$not | $3;
      $$mux = $$not ? $5 : 16;
      if ($brmerge) {
       $pik_flags$01 = $$mux;
      } else {
       $bAffinityDone$1 = 1;
       break;
      }
     } else {
      if ($3) {
       $pik_flags$01 = 16;
      } else {
       $bAffinityDone$1 = 1;
       break;
      }
     }
     _sqlite3VdbeChangeP5($0,$pik_flags$01);
     $bAffinityDone$1 = 1;
    }
   } while(0);
   $22 = (($pIdx$06) + 20|0);
   $23 = (($i$03) + 1)|0;
   $pIdx$0 = HEAP32[$22>>2]|0;
   $24 = ($pIdx$0|0)==(0|0);
   if ($24) {
    $$pre$phiZ2D = $4;$bAffinityDone$0$lcssa = $bAffinityDone$1;
    break;
   } else {
    $bAffinityDone$05 = $bAffinityDone$1;$i$03 = $23;$pIdx$06 = $pIdx$0;
   }
  }
 }
 $25 = HEAP8[$$pre$phiZ2D>>0]|0;
 $26 = $25 & 32;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = (($regNewData) + 1)|0;
 $29 = (_sqlite3GetTempReg($pParse)|0);
 $30 = (($pTab) + 38|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 << 16 >> 16;
 (_sqlite3VdbeAddOp3($0,48,$28,$32,$29)|0);
 $33 = ($bAffinityDone$0$lcssa<<24>>24)==(0);
 if ($33) {
  _sqlite3TableAffinity($0,$pTab,0);
 }
 $34 = HEAP16[$30>>1]|0;
 $35 = $34 << 16 >> 16;
 _sqlite3ExprCacheAffinityChange($pParse,$28,$35);
 $36 = (($pParse) + 18|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $39 = ($isUpdate|0)!=(0);
  $40 = $39 ? 5 : 3;
  $pik_flags$1 = $40;
 } else {
  $pik_flags$1 = 0;
 }
 $41 = ($appendBias|0)==(0);
 if ($41) {
  $pik_flags$2 = $pik_flags$1;
 } else {
  $42 = $pik_flags$1&255;
  $43 = $42 | 8;
  $44 = $43&255;
  $pik_flags$2 = $44;
 }
 $45 = ($useSeekResult|0)==(0);
 if ($45) {
  $pik_flags$3 = $pik_flags$2;
 } else {
  $46 = $pik_flags$2&255;
  $47 = $46 | 16;
  $48 = $47&255;
  $pik_flags$3 = $48;
 }
 (_sqlite3VdbeAddOp3($0,70,$iDataCur,$29,$regNewData)|0);
 $49 = HEAP8[$36>>0]|0;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  $51 = HEAP32[$pTab>>2]|0;
  _sqlite3VdbeChangeP4($0,-1,$51,0);
 }
 _sqlite3VdbeChangeP5($0,$pik_flags$3);
 STACKTOP = sp;return;
}
function _sqlite3AutoincrementEnd($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 408|0);
 $p$01 = HEAP32[$2>>2]|0;
 $3 = ($p$01|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($4) + 16|0);
 $p$02 = $p$01;
 while(1) {
  $6 = (($p$02) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = (($p$02) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_sqlite3GetTempReg($pParse)|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($8) + ($7<<4)|0) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  _sqlite3OpenTable($pParse,0,$12,$16,53);
  $17 = (($10) + 1)|0;
  $18 = (_sqlite3VdbeAddOp1($1,77,$17)|0);
  (_sqlite3VdbeAddOp2($1,69,0,$17)|0);
  _sqlite3VdbeJumpHere($1,$18);
  $19 = (($10) + -1)|0;
  (_sqlite3VdbeAddOp3($1,48,$19,2,$11)|0);
  (_sqlite3VdbeAddOp3($1,70,0,$11,$17)|0);
  _sqlite3VdbeChangeP5($1,8);
  (_sqlite3VdbeAddOp0($1,58)|0);
  _sqlite3ReleaseTempReg($pParse,$11);
  $p$0 = HEAP32[$p$02>>2]|0;
  $20 = ($p$0|0)==(0|0);
  if ($20) {
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 STACKTOP = sp;return;
}
function _fkChildIsModified($pTab,$p,$aChange,$bChngRowid) {
 $pTab = $pTab|0;
 $p = $p|0;
 $aChange = $aChange|0;
 $bChngRowid = $bChngRowid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 L1: do {
  if ($2) {
   $3 = (($pTab) + 36|0);
   $4 = ($bChngRowid|0)==(0);
   $i$01 = 0;
   while(1) {
    $7 = ((($p) + ($i$01<<3)|0) + 36|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($aChange) + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)>(-1);
    if ($11) {
     $$0 = 1;
     break L1;
    }
    $12 = HEAP16[$3>>1]|0;
    $13 = $12 << 16 >> 16;
    $14 = ($8|0)!=($13|0);
    $or$cond = $14 | $4;
    $6 = (($i$01) + 1)|0;
    if (!($or$cond)) {
     $$0 = 1;
     break L1;
    }
    $5 = ($6|0)<($1|0);
    if ($5) {
     $i$01 = $6;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fkLookupParent($pParse,$iDb,$pTab,$pIdx,$pFKey,$aiCol,$regData,$nIncr,$isIgnore) {
 $pParse = $pParse|0;
 $iDb = $iDb|0;
 $pTab = $pTab|0;
 $pIdx = $pIdx|0;
 $pFKey = $pFKey|0;
 $aiCol = $aiCol|0;
 $regData = $regData|0;
 $nIncr = $nIncr|0;
 $isIgnore = $isIgnore|0;
 var $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$lcssa = 0, $$not = 0, $$not14 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $exitcond12 = 0, $i$09 = 0, $i$15 = 0, $i$24 = 0;
 var $or$cond = 0, $or$cond1 = 0, $pParse$ = 0, $regData$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (($pParse) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $$idx3 = (($0) + 24|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $4 = (_sqlite3VdbeMakeLabel($$idx3$val)|0);
 $5 = ($nIncr|0)<(0);
 if ($5) {
  $6 = (($pFKey) + 24|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  (_sqlite3VdbeAddOp2($0,130,$8,$4)|0);
 }
 $9 = (($pFKey) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = (($regData) + 1)|0;
  $i$09 = 0;
  while(1) {
   $13 = (($aiCol) + ($i$09<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($12) + ($14))|0;
   (_sqlite3VdbeAddOp2($0,76,$15,$4)|0);
   $16 = (($i$09) + 1)|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = ($16|0)<($17|0);
   if ($18) {
    $i$09 = $16;
   } else {
    $$lcssa = $17;
    break;
   }
  }
 } else {
  $$lcssa = $10;
 }
 $19 = ($isIgnore|0)==(0);
 do {
  if ($19) {
   $20 = ($pIdx|0)==(0|0);
   if ($20) {
    $21 = (_sqlite3GetTempReg($pParse)|0);
    $22 = HEAP32[$aiCol>>2]|0;
    $23 = (($regData) + 1)|0;
    $24 = (($23) + ($22))|0;
    (_sqlite3VdbeAddOp2($0,34,$24,$21)|0);
    $25 = (_sqlite3VdbeAddOp2($0,38,$21,0)|0);
    $26 = HEAP32[$pFKey>>2]|0;
    $27 = ($26|0)==($pTab|0);
    $28 = ($nIncr|0)==(1);
    $or$cond = $27 & $28;
    if ($or$cond) {
     (_sqlite3VdbeAddOp3($0,79,$regData,$4,$21)|0);
     _sqlite3VdbeChangeP5($0,-120);
    }
    _sqlite3OpenTable($pParse,$3,$iDb,$pTab,52);
    (_sqlite3VdbeAddOp3($0,67,$3,0,$21)|0);
    (_sqlite3VdbeAddOp2($0,16,0,$4)|0);
    $$idx2 = (($0) + 32|0);
    $$idx2$val = HEAP32[$$idx2>>2]|0;
    $29 = (_sqlite3VdbeCurrentAddr($$idx2$val)|0);
    $30 = (($29) + -2)|0;
    _sqlite3VdbeJumpHere($0,$30);
    _sqlite3VdbeJumpHere($0,$25);
    _sqlite3ReleaseTempReg($pParse,$21);
    break;
   }
   $31 = (_sqlite3GetTempRange($pParse,$$lcssa)|0);
   $32 = (_sqlite3GetTempReg($pParse)|0);
   $33 = (($pIdx) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   (_sqlite3VdbeAddOp3($0,52,$3,$34,$iDb)|0);
   _sqlite3VdbeSetP4KeyInfo($pParse,$pIdx);
   $35 = ($$lcssa|0)>(0);
   if ($35) {
    $36 = (($regData) + 1)|0;
    $i$15 = 0;
    while(1) {
     $37 = (($aiCol) + ($i$15<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($36) + ($38))|0;
     $40 = (($i$15) + ($31))|0;
     (_sqlite3VdbeAddOp2($0,33,$39,$40)|0);
     $41 = (($i$15) + 1)|0;
     $exitcond12 = ($41|0)==($$lcssa|0);
     if ($exitcond12) {
      break;
     } else {
      $i$15 = $41;
     }
    }
   }
   $42 = HEAP32[$pFKey>>2]|0;
   $43 = ($42|0)==($pTab|0);
   $44 = ($nIncr|0)==(1);
   $or$cond1 = $43 & $44;
   if ($or$cond1) {
    $$idx = (($0) + 32|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $45 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
    $46 = (($$lcssa) + 1)|0;
    $47 = (($46) + ($45))|0;
    if ($35) {
     $48 = (($regData) + 1)|0;
     $49 = (($pIdx) + 4|0);
     $50 = (($pTab) + 36|0);
     $i$24 = 0;
     while(1) {
      $51 = (($aiCol) + ($i$24<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (($48) + ($52))|0;
      $54 = HEAP32[$49>>2]|0;
      $55 = (($54) + ($i$24<<1)|0);
      $56 = HEAP16[$55>>1]|0;
      $57 = $56 << 16 >> 16;
      $58 = (($57) + 1)|0;
      $59 = HEAP16[$50>>1]|0;
      $60 = ($56<<16>>16)==($59<<16>>16);
      $61 = $60 ? 0 : $58;
      $regData$ = (($61) + ($regData))|0;
      (_sqlite3VdbeAddOp3($0,78,$53,$47,$regData$)|0);
      _sqlite3VdbeChangeP5($0,8);
      $62 = (($i$24) + 1)|0;
      $exitcond = ($62|0)==($$lcssa|0);
      if ($exitcond) {
       break;
      } else {
       $i$24 = $62;
      }
     }
    }
    (_sqlite3VdbeAddOp2($0,16,0,$4)|0);
   }
   $63 = (_sqlite3IndexAffinityStr($0,$pIdx)|0);
   (_sqlite3VdbeAddOp4($0,48,$31,$$lcssa,$32,$63,$$lcssa)|0);
   (_sqlite3VdbeAddOp4Int($0,66,$3,$4,$32,0)|0);
   _sqlite3ReleaseTempReg($pParse,$32);
   _sqlite3ReleaseTempRange($pParse,$31,$$lcssa);
  }
 } while(0);
 $64 = (($pFKey) + 24|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65<<24>>24)==(0);
 if ($66) {
  $67 = HEAP32[$pParse>>2]|0;
  $68 = (($67) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 & 16777216;
  $71 = ($70|0)==(0);
  if ($71) {
   $72 = (($pParse) + 412|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0|0);
   if ($74) {
    $75 = (($pParse) + 22|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ($76<<24>>24)==(0);
    if ($77) {
     _sqlite3HaltConstraint($pParse,787,2,0,-2,4);
     _sqlite3VdbeResolveLabel($0,$4);
     (_sqlite3VdbeAddOp1($0,58,$3)|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $$not = ($nIncr|0)<(1);
 $$not14 = $66 ^ 1;
 $brmerge = $$not | $$not14;
 if ($brmerge) {
  $83 = $65;
 } else {
  $78 = (($pParse) + 412|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(0|0);
  $pParse$ = $80 ? $pParse : $79;
  $81 = (($pParse$) + 23|0);
  HEAP8[$81>>0] = 1;
  $$pre = HEAP8[$64>>0]|0;
  $83 = $$pre;
 }
 $82 = $83&255;
 (_sqlite3VdbeAddOp2($0,129,$82,$nIncr)|0);
 _sqlite3VdbeResolveLabel($0,$4);
 (_sqlite3VdbeAddOp1($0,58,$3)|0);
 STACKTOP = sp;return;
}
function _fkParentIsModified($pTab,$p,$aChange,$bChngRowid) {
 $pTab = $pTab|0;
 $p = $p|0;
 $aChange = $aChange|0;
 $bChngRowid = $bChngRowid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $iKey$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pTab) + 38|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)>(0);
 $6 = (($pTab) + 4|0);
 $7 = (($pTab) + 36|0);
 $8 = ($bChngRowid|0)==(0);
 $i$04 = 0;
 L4: while(1) {
  $9 = ((($p) + ($i$04<<3)|0) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  if ($5) {
   $11 = ($10|0)==(0|0);
   $iKey$01 = 0;
   while(1) {
    $12 = (($aChange) + ($iKey$01<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)>(-1);
    if ($14) {
     label = 7;
    } else {
     $15 = HEAP16[$7>>1]|0;
     $16 = $15 << 16 >> 16;
     $17 = ($iKey$01|0)!=($16|0);
     $or$cond = $17 | $8;
     if (!($or$cond)) {
      label = 7;
     }
    }
    do {
     if ((label|0) == 7) {
      label = 0;
      $18 = HEAP32[$6>>2]|0;
      if ($11) {
       $23 = ((($18) + (($iKey$01*24)|0)|0) + 23|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = $24 & 1;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        break;
       } else {
        $$0 = 1;
        label = 12;
        break L4;
       }
      } else {
       $19 = (($18) + (($iKey$01*24)|0)|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (_sqlite3_stricmp($20,$10)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        $$0 = 1;
        label = 12;
        break L4;
       } else {
        break;
       }
      }
     }
    } while(0);
    $27 = (($iKey$01) + 1)|0;
    $28 = $4 << 16 >> 16;
    $29 = ($27|0)<($28|0);
    if ($29) {
     $iKey$01 = $27;
    } else {
     break;
    }
   }
  }
  $30 = (($i$04) + 1)|0;
  $31 = ($30|0)<($1|0);
  if ($31) {
   $i$04 = $30;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _fkScanChildren($pParse,$pSrc,$pTab,$pIdx,$pFKey,$aiCol,$regData,$nIncr) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 $pTab = $pTab|0;
 $pIdx = $pIdx|0;
 $pFKey = $pFKey|0;
 $aiCol = $aiCol|0;
 $regData = $regData|0;
 $nIncr = $nIncr|0;
 var $$in = 0, $$pre$phi13Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $i$04 = 0, $i$12 = 0, $iFkIfZero$0 = 0, $or$cond = 0, $pAll$0$lcssa = 0, $pAll$01 = 0, $pNe$0 = 0, $pParse$ = 0, $pWhere$0$lcssa = 0, $pWhere$03 = 0, $pWhere$1 = 0, $sNameContext = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sNameContext = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3GetVdbe($pParse)|0);
 $2 = ($nIncr|0)<(0);
 if ($2) {
  $3 = (($pFKey) + 24|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = (_sqlite3VdbeAddOp2($1,130,$5,0)|0);
  $iFkIfZero$0 = $6;
 } else {
  $iFkIfZero$0 = 0;
 }
 $7 = (($pFKey) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = ($pIdx|0)==(0|0);
  $11 = ($aiCol|0)==(0|0);
  $12 = (($pFKey) + 36|0);
  $13 = (($pIdx) + 4|0);
  $i$04 = 0;$pWhere$03 = 0;
  while(1) {
   if ($10) {
    $17 = -1;
   } else {
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($i$04<<1)|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = $16;
   }
   $18 = (_exprTableRegister($pParse,$pTab,$regData,$17)|0);
   if ($11) {
    $$in = $12;
   } else {
    $19 = (($aiCol) + ($i$04<<2)|0);
    $$in = $19;
   }
   $20 = HEAP32[$$in>>2]|0;
   $sext = $20 << 16;
   $21 = $sext >> 16;
   $22 = HEAP32[$pFKey>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + (($21*24)|0)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_sqlite3Expr($0,27,$26)|0);
   $28 = (_sqlite3PExpr($pParse,79,$18,$27,0)|0);
   $29 = (_sqlite3ExprAnd($0,$pWhere$03,$28)|0);
   $30 = (($i$04) + 1)|0;
   $31 = HEAP32[$7>>2]|0;
   $32 = ($30|0)<($31|0);
   if ($32) {
    $i$04 = $30;$pWhere$03 = $29;
   } else {
    $$pre$phi13Z2D = $pFKey;$pWhere$0$lcssa = $29;
    break;
   }
  }
 } else {
  $$pre$phi13Z2D = $pFKey;$pWhere$0$lcssa = 0;
 }
 $33 = HEAP32[$$pre$phi13Z2D>>2]|0;
 $34 = ($33|0)==($pTab|0);
 $35 = ($nIncr|0)>(0);
 $or$cond = $34 & $35;
 if ($or$cond) {
  $36 = (($pTab) + 44|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 & 32;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $40 = (_exprTableRegister($pParse,$pTab,$regData,-1)|0);
   $41 = (($pSrc) + 48|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_exprTableColumn($0,$pTab,$42,-1)|0);
   $44 = (_sqlite3PExpr($pParse,78,$40,$43,0)|0);
   $pNe$0 = $44;
  } else {
   $45 = (_sqlite3PrimaryKeyIndex($pTab)|0);
   $46 = (($45) + 50|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = ($47<<16>>16)==(0);
   if ($48) {
    $pAll$0$lcssa = 0;
   } else {
    $49 = (($pIdx) + 4|0);
    $50 = (($pSrc) + 48|0);
    $i$12 = 0;$pAll$01 = 0;
    while(1) {
     $51 = HEAP32[$49>>2]|0;
     $52 = (($51) + ($i$12<<1)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = (_exprTableRegister($pParse,$pTab,$regData,$53)|0);
     $55 = HEAP32[$50>>2]|0;
     $56 = (_exprTableColumn($0,$pTab,$55,$53)|0);
     $57 = (_sqlite3PExpr($pParse,79,$54,$56,0)|0);
     $58 = (_sqlite3ExprAnd($0,$pAll$01,$57)|0);
     $59 = (($i$12) + 1)|0;
     $60 = HEAP16[$46>>1]|0;
     $61 = $60&65535;
     $62 = ($59|0)<($61|0);
     if ($62) {
      $i$12 = $59;$pAll$01 = $58;
     } else {
      $pAll$0$lcssa = $58;
      break;
     }
    }
   }
   $63 = (_sqlite3PExpr($pParse,19,$pAll$0$lcssa,0,0)|0);
   $pNe$0 = $63;
  }
  $64 = (_sqlite3ExprAnd($0,$pWhere$0$lcssa,$pNe$0)|0);
  $pWhere$1 = $64;
 } else {
  $pWhere$1 = $pWhere$0$lcssa;
 }
 ;HEAP32[$sNameContext+0>>2]=0|0;HEAP32[$sNameContext+4>>2]=0|0;HEAP32[$sNameContext+8>>2]=0|0;HEAP32[$sNameContext+12>>2]=0|0;HEAP32[$sNameContext+16>>2]=0|0;HEAP32[$sNameContext+20>>2]=0|0;HEAP32[$sNameContext+24>>2]=0|0;HEAP32[$sNameContext+28>>2]=0|0;
 $65 = (($sNameContext) + 4|0);
 HEAP32[$65>>2] = $pSrc;
 HEAP32[$sNameContext>>2] = $pParse;
 (_sqlite3ResolveExprNames($sNameContext,$pWhere$1)|0);
 $66 = (_sqlite3WhereBegin($pParse,$pSrc,$pWhere$1,0,0,0,0)|0);
 $67 = (($pFKey) + 24|0);
 if ($35) {
  $68 = HEAP8[$67>>0]|0;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $70 = (($pParse) + 412|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(0|0);
   $pParse$ = $72 ? $pParse : $71;
   $73 = (($pParse$) + 23|0);
   HEAP8[$73>>0] = 1;
  }
 }
 $74 = HEAP8[$67>>0]|0;
 $75 = $74&255;
 (_sqlite3VdbeAddOp2($1,129,$75,$nIncr)|0);
 $76 = ($66|0)==(0|0);
 if (!($76)) {
  _sqlite3WhereEnd($66);
 }
 _sqlite3ExprDelete($0,$pWhere$1);
 $77 = ($iFkIfZero$0|0)==(0);
 if ($77) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeJumpHere($1,$iFkIfZero$0);
 STACKTOP = sp;return;
}
function _exprTableRegister($pParse,$pTab,$regBase,$iCol) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $regBase = $regBase|0;
 $iCol = $iCol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pExpr$0 = 0, $zColl$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3Expr($0,159,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $pExpr$0 = 0;
  STACKTOP = sp;return ($pExpr$0|0);
 }
 $3 = $iCol << 16 >> 16;
 $4 = ($iCol<<16>>16)>(-1);
 if ($4) {
  $5 = (($pTab) + 36|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==($iCol<<16>>16);
  if (!($7)) {
   $8 = (($pTab) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($regBase) + 1)|0;
   $11 = (($10) + ($3))|0;
   $12 = (($1) + 28|0);
   HEAP32[$12>>2] = $11;
   $13 = ((($9) + (($3*24)|0)|0) + 21|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = (($1) + 1|0);
   HEAP8[$15>>0] = $14;
   $16 = ((($9) + (($3*24)|0)|0) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = (($0) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $zColl$0 = $21;
   } else {
    $zColl$0 = $17;
   }
   $22 = (_sqlite3ExprAddCollateString($pParse,$1,$zColl$0)|0);
   $pExpr$0 = $22;
   STACKTOP = sp;return ($pExpr$0|0);
  }
 }
 $23 = (($1) + 28|0);
 HEAP32[$23>>2] = $regBase;
 $24 = (($1) + 1|0);
 HEAP8[$24>>0] = 100;
 $pExpr$0 = $1;
 STACKTOP = sp;return ($pExpr$0|0);
}
function _exprTableColumn($db,$pTab,$iCursor,$iCol) {
 $db = $db|0;
 $pTab = $pTab|0;
 $iCursor = $iCursor|0;
 $iCol = $iCol|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3Expr($db,154,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (($0) + 44|0);
 HEAP32[$2>>2] = $pTab;
 $3 = (($0) + 28|0);
 HEAP32[$3>>2] = $iCursor;
 $4 = (($0) + 32|0);
 HEAP16[$4>>1] = $iCol;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3WhereBegin($pParse,$pTabList,$pWhere,$pOrderBy,$pResultSet,$wctrlFlags,$iIdxCur) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pWhere = $pWhere|0;
 $pOrderBy = $pOrderBy|0;
 $pResultSet = $pResultSet|0;
 $wctrlFlags = $wctrlFlags|0;
 $iIdxCur = $iIdxCur|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$idx$val = 0, $$idx4$pre = 0, $$idx4$pre$phiZZ2D = 0, $$idx4$val = 0, $$idx5 = 0, $$idx5$val = 0, $$idx6 = 0, $$idx6$val = 0, $$not = 0, $$pr = 0, $$pre = 0, $$pre59 = 0, $$pre63 = 0, $$pre64 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $iIndexCur$0$lcssa = 0, $iIndexCur$018 = 0, $iIndexCur$1 = 0, $ii$042 = 0, $ii$139 = 0, $ii$223 = 0, $ii$311 = 0, $n$0$lcssa = 0;
 var $n$014 = 0, $nTabList$033 = 0, $nTabList$1 = 0, $op$0 = 0, $op1$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond317 = 0, $pJ$0 = 0, $pJ$016 = 0, $pJ$019 = 0, $pLevel$024 = 0, $pTerm$029 = 0, $phitmp = 0, $sWLB = 0, $sWLB$idx$val = 0, $sWLB$idx7$val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $sWLB = sp + 4|0;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 ;HEAP32[$sWLB+0>>2]=0|0;HEAP32[$sWLB+4>>2]=0|0;HEAP32[$sWLB+8>>2]=0|0;HEAP32[$sWLB+12>>2]=0|0;HEAP32[$sWLB+16>>2]=0|0;
 $3 = (($sWLB) + 8|0);
 HEAP32[$3>>2] = $pOrderBy;
 $4 = (($2) + 60|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 32;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  $$01 = $wctrlFlags;
 } else {
  $8 = $wctrlFlags&65535;
  $9 = $8 & 64511;
  $10 = $9&65535;
  $$01 = $10;
 }
 $11 = HEAP32[$pTabList>>2]|0;
 $12 = ($11|0)>(64);
 if ($12) {
  HEAP32[$vararg_buffer>>2] = 64;
  _sqlite3ErrorMsg($pParse,23592,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $$01&65535;
 $14 = $13 & 64;
 $15 = ($14|0)!=(0);
 $$ = $15 ? 1 : $11;
 $16 = ($$*72)|0;
 $17 = (($16) + 743)|0;
 $18 = $17 & -8;
 $19 = (($18) + 72)|0;
 $20 = (_sqlite3DbMallocZero($2,$19)|0);
 $21 = (($2) + 64|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  _sqlite3DbFree($2,$20);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($20) + 60|0);
 $25 = (($20) + 64|0);
 HEAP32[$25>>2] = -1;
 HEAP32[$24>>2] = -1;
 $26 = $$&255;
 $27 = (($20) + 40|0);
 HEAP8[$27>>0] = $26;
 HEAP32[$20>>2] = $pParse;
 $28 = (($20) + 4|0);
 HEAP32[$28>>2] = $pTabList;
 $29 = (($20) + 8|0);
 HEAP32[$29>>2] = $pOrderBy;
 $30 = (($20) + 12|0);
 HEAP32[$30>>2] = $pResultSet;
 $$idx6 = (($1) + 24|0);
 $$idx6$val = HEAP32[$$idx6>>2]|0;
 $31 = (_sqlite3VdbeMakeLabel($$idx6$val)|0);
 $32 = (($20) + 52|0);
 HEAP32[$32>>2] = $31;
 $33 = (($20) + 34|0);
 HEAP16[$33>>1] = $$01;
 $34 = (($pParse) + 428|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($20) + 56|0);
 HEAP32[$36>>2] = $35;
 $37 = (($20) + 68|0);
 HEAP32[$sWLB>>2] = $20;
 $38 = (($20) + 328|0);
 $39 = (($sWLB) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($20) + ($18)|0);
 $41 = (($sWLB) + 12|0);
 HEAP32[$41>>2] = $40;
 _whereLoopInit($40);
 HEAP32[$37>>2] = 0;
 _whereClauseInit($38,$20);
 _whereSplit($38,$pWhere,72);
 $42 = HEAP32[$39>>2]|0;
 $43 = (($42) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)>(0);
 $46 = ($$|0)==(0);
 if ($45) {
  $48 = $42;$ii$042 = 0;
  while(1) {
   if ($46) {
    $55 = $48;
    label = 11;
   } else {
    $47 = (($48) + 20|0);
    $49 = HEAP32[$47>>2]|0;
    $50 = (($49) + (($ii$042*48)|0)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (_sqlite3ExprIsConstantNotJoin($51)|0);
    $53 = ($52|0)==(0);
    if (!($53)) {
     $$pre59 = HEAP32[$39>>2]|0;
     $55 = $$pre59;
     label = 11;
    }
   }
   if ((label|0) == 11) {
    label = 0;
    $54 = (($55) + 20|0);
    $56 = HEAP32[$54>>2]|0;
    $57 = (($56) + (($ii$042*48)|0)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP32[$32>>2]|0;
    _sqlite3ExprIfFalse($pParse,$58,$59,8);
    $60 = HEAP32[$39>>2]|0;
    $61 = (($60) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62) + (($ii$042*48)|0)|0) + 20|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $65 | 4;
    $67 = $66&255;
    HEAP8[$63>>0] = $67;
   }
   $68 = (($ii$042) + 1)|0;
   $69 = HEAP32[$39>>2]|0;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68|0)<($71|0);
   if ($72) {
    $48 = $69;$ii$042 = $68;
   } else {
    break;
   }
  }
 }
 if ($46) {
  $73 = ($pOrderBy|0)==(0|0);
  if (!($73)) {
   $74 = (($20) + 36|0);
   HEAP8[$74>>0] = 1;
  }
  $75 = $13 & 1024;
  $76 = ($75|0)==(0);
  if (!($76)) {
   $77 = (($20) + 39|0);
   HEAP8[$77>>0] = 1;
  }
 }
 $78 = HEAP32[$pTabList>>2]|0;
 $79 = ($78|0)>(0);
 if ($79) {
  $ii$139 = 0;
  while(1) {
   $80 = ((($pTabList) + (($ii$139*72)|0)|0) + 48|0);
   $81 = HEAP32[$80>>2]|0;
   _createMask($37,$81);
   $82 = (($ii$139) + 1)|0;
   $83 = HEAP32[$pTabList>>2]|0;
   $84 = ($82|0)<($83|0);
   if ($84) {
    $ii$139 = $82;
   } else {
    break;
   }
  }
 }
 _exprAnalyzeAll($38);
 $85 = HEAP8[$21>>0]|0;
 $86 = ($85<<24>>24)==(0);
 L33: do {
  if ($86) {
   $87 = $13 & 1024;
   $88 = ($87|0)==(0);
   do {
    if (!($88)) {
     $89 = (_isDistinctRedundant($pParse,$pTabList,$38,$pResultSet)|0);
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = (($20) + 39|0);
      HEAP8[$91>>0] = 1;
      break;
     }
     $92 = ($pOrderBy|0)==(0|0);
     if ($92) {
      $93 = HEAP16[$33>>1]|0;
      $94 = $93&65535;
      $95 = $94 | 512;
      $96 = $95&65535;
      HEAP16[$33>>1] = $96;
      HEAP32[$29>>2] = $pResultSet;
     }
    }
   } while(0);
   $97 = ($$|0)==(1);
   if ($97) {
    $sWLB$idx$val = HEAP32[$sWLB>>2]|0;
    $sWLB$idx7$val = HEAP32[$41>>2]|0;
    $98 = (_whereShortCut($sWLB$idx$val,$sWLB$idx7$val)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     label = 28;
    } else {
     label = 32;
    }
   } else {
    label = 28;
   }
   if ((label|0) == 28) {
    $100 = (_whereLoopAddAll($sWLB)|0);
    $101 = ($100|0)==(0);
    if (!($101)) {
     break;
    }
    _wherePathSolver($20,0);
    $102 = HEAP8[$21>>0]|0;
    $103 = ($102<<24>>24)==(0);
    if (!($103)) {
     break;
    }
    $104 = HEAP32[$29>>2]|0;
    $105 = ($104|0)==(0|0);
    if ($105) {
     label = 33;
    } else {
     $106 = (($20) + 32|0);
     $107 = HEAP16[$106>>1]|0;
     $108 = $107&65535;
     $109 = (($108) + 1)|0;
     $110 = $109&65535;
     _wherePathSolver($20,$110);
     $111 = HEAP8[$21>>0]|0;
     $112 = ($111<<24>>24)==(0);
     if ($112) {
      label = 32;
     } else {
      break;
     }
    }
   }
   if ((label|0) == 32) {
    $$pr = HEAP32[$29>>2]|0;
    $113 = ($$pr|0)==(0|0);
    if ($113) {
     label = 33;
    }
   }
   if ((label|0) == 33) {
    $114 = (($2) + 24|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $115 & 131072;
    $117 = ($116|0)==(0);
    if (!($117)) {
     $118 = (($20) + 24|0);
     $119 = $118;
     $120 = $119;
     HEAP32[$120>>2] = -1;
     $121 = (($119) + 4)|0;
     $122 = $121;
     HEAP32[$122>>2] = -1;
    }
   }
   $123 = (($pParse) + 68|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($124|0)==(0);
   if ($125) {
    $126 = HEAP8[$21>>0]|0;
    $127 = ($126<<24>>24)==(0);
    if ($127) {
     $128 = HEAP8[$27>>0]|0;
     $129 = ($128&255)<(2);
     $130 = ($pResultSet|0)==(0|0);
     $or$cond = $129 | $130;
     L57: do {
      if ($or$cond) {
       $nTabList$1 = $$;
      } else {
       $131 = HEAP16[$4>>1]|0;
       $132 = $131 & 1024;
       $133 = ($132<<16>>16)==(0);
       if ($133) {
        $134 = (_exprListTableUsage($37,$pResultSet)|0);
        $135 = tempRet0;
        $136 = HEAP32[$3>>2]|0;
        $137 = ($136|0)==(0|0);
        if ($137) {
         $168 = $134;$170 = $135;
        } else {
         $138 = (_exprListTableUsage($37,$136)|0);
         $139 = tempRet0;
         $140 = $138 | $134;
         $141 = $139 | $135;
         $168 = $140;$170 = $141;
        }
        $142 = ($128&255)>(1);
        if ($142) {
         $143 = (($20) + 736|0);
         $$pre = HEAP32[$28>>2]|0;
         $145 = $128;$nTabList$033 = $$;
         while(1) {
          $144 = $145&255;
          $146 = (($144) + -1)|0;
          $147 = ((($143) + (($146*72)|0)|0) + 56|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = (($148) + 16|0);
          $150 = HEAP8[$149>>0]|0;
          $151 = $150&255;
          $152 = ((($$pre) + (($151*72)|0)|0) + 44|0);
          $153 = HEAP8[$152>>0]|0;
          $154 = $153 & 8;
          $155 = ($154<<24>>24)==(0);
          if ($155) {
           $nTabList$1 = $nTabList$033;
           break L57;
          }
          if ($88) {
           $156 = (($148) + 36|0);
           $157 = HEAP32[$156>>2]|0;
           $158 = $157 & 4096;
           $159 = ($158|0)==(0);
           if ($159) {
            $nTabList$1 = $nTabList$033;
            break L57;
           }
          }
          $160 = (($148) + 8|0);
          $161 = $160;
          $162 = $161;
          $163 = HEAP32[$162>>2]|0;
          $164 = (($161) + 4)|0;
          $165 = $164;
          $166 = HEAP32[$165>>2]|0;
          $167 = $163 & $168;
          $169 = $166 & $170;
          $171 = ($167|0)==(0);
          $172 = ($169|0)==(0);
          $173 = $171 & $172;
          if (!($173)) {
           $nTabList$1 = $nTabList$033;
           break L57;
          }
          $174 = HEAP32[$39>>2]|0;
          $175 = (($174) + 20|0);
          $176 = HEAP32[$175>>2]|0;
          $177 = (($174) + 12|0);
          $178 = HEAP32[$177>>2]|0;
          $179 = (($176) + (($178*48)|0)|0);
          $180 = ($178|0)>(0);
          if ($180) {
           $pTerm$029 = $176;
           while(1) {
            $181 = (($pTerm$029) + 40|0);
            $182 = $181;
            $183 = $182;
            $184 = HEAP32[$183>>2]|0;
            $185 = (($182) + 4)|0;
            $186 = $185;
            $187 = HEAP32[$186>>2]|0;
            $188 = $163 & $184;
            $189 = $166 & $187;
            $190 = ($188|0)==(0);
            $191 = ($189|0)==(0);
            $192 = $190 & $191;
            if (!($192)) {
             $193 = HEAP32[$pTerm$029>>2]|0;
             $194 = (($193) + 4|0);
             $195 = HEAP32[$194>>2]|0;
             $196 = $195 & 1;
             $197 = ($196|0)==(0);
             if ($197) {
              $nTabList$1 = $nTabList$033;
              break L57;
             }
            }
            $198 = (($pTerm$029) + 48|0);
            $199 = ($198>>>0)<($179>>>0);
            if ($199) {
             $pTerm$029 = $198;
            } else {
             break;
            }
           }
          }
          $200 = (($145) + -1)<<24>>24;
          HEAP8[$27>>0] = $200;
          $201 = (($nTabList$033) + -1)|0;
          $202 = ($200&255)>(1);
          if ($202) {
           $145 = $200;$nTabList$033 = $201;
          } else {
           $nTabList$1 = $201;
           break;
          }
         }
        } else {
         $nTabList$1 = $$;
        }
       } else {
        $nTabList$1 = $$;
       }
      }
     } while(0);
     $203 = (($20) + 32|0);
     $204 = HEAP16[$203>>1]|0;
     $205 = $204 << 16 >> 16;
     $206 = HEAP32[$20>>2]|0;
     $207 = (($206) + 428|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = (($208) + ($205))|0;
     HEAP32[$207>>2] = $209;
     $210 = $13 & 4;
     $211 = ($210|0)==(0);
     if (!($211)) {
      $212 = (($20) + 792|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($213) + 36|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = $215 & 4096;
      $217 = ($216|0)==(0);
      if (!($217)) {
       $218 = (($20) + 37|0);
       HEAP8[$218>>0] = 1;
       $219 = (($pTabList) + 24|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (($220) + 44|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = $222 & 32;
       $224 = ($223<<24>>24)==(0);
       if ($224) {
        $225 = HEAP32[$214>>2]|0;
        $226 = $225 & -65;
        HEAP32[$214>>2] = $226;
       }
      }
     }
     $227 = (($20) + 736|0);
     $228 = ($nTabList$1|0)>(0);
     if ($228) {
      $229 = $13 & 16;
      $230 = (($20) + 37|0);
      $$idx5 = (($1) + 32|0);
      $231 = ($iIdxCur|0)==(0);
      $$not = $15 ^ 1;
      $brmerge = $231 | $$not;
      $232 = (($pParse) + 72|0);
      $ii$223 = 0;$pLevel$024 = $227;
      while(1) {
       $233 = (($pLevel$024) + 36|0);
       $234 = HEAP8[$233>>0]|0;
       $235 = $234&255;
       $236 = ((($pTabList) + (($235*72)|0)|0) + 24|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = (($237) + 68|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = (_sqlite3SchemaToIndex($2,$239)|0);
       $241 = (($pLevel$024) + 56|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($237) + 44|0);
       $244 = HEAP8[$243>>0]|0;
       $245 = $244&255;
       $246 = $245 & 2;
       $247 = ($246|0)==(0);
       do {
        if ($247) {
         $248 = (($237) + 12|0);
         $249 = HEAP32[$248>>2]|0;
         $250 = ($249|0)==(0|0);
         if ($250) {
          $251 = (($242) + 36|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = $252 & 1024;
          $254 = ($253|0)==(0);
          if (!($254)) {
           $255 = (_sqlite3GetVTable($2,$237)|0);
           $256 = ((($pTabList) + (($235*72)|0)|0) + 48|0);
           $257 = HEAP32[$256>>2]|0;
           (_sqlite3VdbeAddOp4($1,148,$257,0,0,$255,-10)|0);
           break;
          }
          $258 = $245 & 16;
          $259 = ($258|0)==(0);
          if (!($259)) {
           break;
          }
          $260 = $252 & 64;
          $261 = $260 | $229;
          $262 = ($261|0)==(0);
          if (!($262)) {
           $295 = (($237) + 32|0);
           $296 = HEAP32[$295>>2]|0;
           $297 = HEAP32[$237>>2]|0;
           _sqlite3TableLock($pParse,$240,$296,0,$297);
           break;
          }
          $263 = HEAP8[$230>>0]|0;
          $264 = ($263<<24>>24)==(0);
          $$pre63 = ((($pTabList) + (($235*72)|0)|0) + 48|0);
          if ($264) {
           $op$0 = 52;
          } else {
           $265 = HEAP32[$$pre63>>2]|0;
           HEAP32[$24>>2] = $265;
           $op$0 = 53;
          }
          $266 = HEAP32[$$pre63>>2]|0;
          _sqlite3OpenTable($pParse,$266,$240,$237,$op$0);
          $267 = HEAP8[$230>>0]|0;
          $268 = ($267<<24>>24)==(0);
          if (!($268)) {
           break;
          }
          $269 = (($237) + 38|0);
          $270 = HEAP16[$269>>1]|0;
          $271 = ($270<<16>>16)<(64);
          if (!($271)) {
           break;
          }
          $272 = HEAP8[$243>>0]|0;
          $273 = $272 & 32;
          $274 = ($273<<24>>24)==(0);
          if (!($274)) {
           break;
          }
          $275 = ((($pTabList) + (($235*72)|0)|0) + 64|0);
          $276 = $275;
          $277 = $276;
          $278 = HEAP32[$277>>2]|0;
          $279 = (($276) + 4)|0;
          $280 = $279;
          $281 = HEAP32[$280>>2]|0;
          $282 = ($278|0)==(0);
          $283 = ($281|0)==(0);
          $284 = $282 & $283;
          if ($284) {
           $n$0$lcssa = 0;
          } else {
           $285 = $278;$286 = $281;$n$014 = 0;
           while(1) {
            $287 = (_bitshift64Lshr(($285|0),($286|0),1)|0);
            $288 = tempRet0;
            $289 = (($n$014) + 1)|0;
            $290 = ($287|0)==(0);
            $291 = ($288|0)==(0);
            $292 = $290 & $291;
            if ($292) {
             break;
            } else {
             $285 = $287;$286 = $288;$n$014 = $289;
            }
           }
           $phitmp = $289;
           $n$0$lcssa = $phitmp;
          }
          $$idx5$val = HEAP32[$$idx5>>2]|0;
          $293 = (_sqlite3VdbeCurrentAddr($$idx5$val)|0);
          $294 = (($293) + -1)|0;
          _sqlite3VdbeChangeP4($1,$294,$n$0$lcssa,-14);
         }
        }
       } while(0);
       $298 = (($242) + 36|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $299 & 512;
       $301 = ($300|0)==(0);
       if (!($301)) {
        $302 = (($242) + 28|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = HEAP8[$230>>0]|0;
        $305 = ($304<<24>>24)==(0);
        do {
         if ($305) {
          if (!($brmerge)) {
           $iIndexCur$1 = $iIdxCur;$op1$0 = 52;
           break;
          }
          $314 = HEAP32[$232>>2]|0;
          $315 = (($314) + 1)|0;
          HEAP32[$232>>2] = $315;
          $iIndexCur$1 = $314;$op1$0 = 52;
         } else {
          $306 = HEAP32[$236>>2]|0;
          $307 = (($306) + 8|0);
          $pJ$016 = HEAP32[$307>>2]|0;
          $308 = ($pJ$016|0)==(0|0);
          $309 = ($pJ$016|0)==($303|0);
          $or$cond317 = $308 | $309;
          if ($or$cond317) {
           $iIndexCur$0$lcssa = $iIdxCur;
          } else {
           $iIndexCur$018 = $iIdxCur;$pJ$019 = $pJ$016;
           while(1) {
            $310 = (($iIndexCur$018) + 1)|0;
            $311 = (($pJ$019) + 20|0);
            $pJ$0 = HEAP32[$311>>2]|0;
            $312 = ($pJ$0|0)==(0|0);
            $313 = ($pJ$0|0)==($303|0);
            $or$cond3 = $312 | $313;
            if ($or$cond3) {
             $iIndexCur$0$lcssa = $310;
             break;
            } else {
             $iIndexCur$018 = $310;$pJ$019 = $pJ$0;
            }
           }
          }
          HEAP32[$25>>2] = $iIndexCur$0$lcssa;
          $iIndexCur$1 = $iIndexCur$0$lcssa;$op1$0 = 53;
         }
        } while(0);
        $316 = (($pLevel$024) + 8|0);
        HEAP32[$316>>2] = $iIndexCur$1;
        $317 = (($303) + 44|0);
        $318 = HEAP32[$317>>2]|0;
        (_sqlite3VdbeAddOp3($1,$op1$0,$iIndexCur$1,$318,$240)|0);
        _sqlite3VdbeSetP4KeyInfo($pParse,$303);
       }
       $319 = ($240|0)>(-1);
       if ($319) {
        _sqlite3CodeVerifySchema($pParse,$240);
       }
       $320 = (($ii$223) + 1)|0;
       $321 = (($pLevel$024) + 72|0);
       $exitcond = ($320|0)==($nTabList$1|0);
       if ($exitcond) {
        $$idx4$pre$phiZZ2D = $$idx5;
        break;
       } else {
        $ii$223 = $320;$pLevel$024 = $321;
       }
      }
     } else {
      $$idx4$pre = (($1) + 32|0);
      $$idx4$pre$phiZZ2D = $$idx4$pre;
     }
     $$idx4$val = HEAP32[$$idx4$pre$phiZZ2D>>2]|0;
     $322 = (_sqlite3VdbeCurrentAddr($$idx4$val)|0);
     $323 = (($20) + 44|0);
     HEAP32[$323>>2] = $322;
     $324 = HEAP8[$21>>0]|0;
     $325 = ($324<<24>>24)==(0);
     if ($325) {
      if (!($228)) {
       $$0 = $20;
       STACKTOP = sp;return ($$0|0);
      }
      $326 = (($20) + 48|0);
      $337 = -1;$338 = -1;$ii$311 = 0;
      while(1) {
       $327 = (($227) + (($ii$311*72)|0)|0);
       $328 = ((($227) + (($ii$311*72)|0)|0) + 56|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = (($329) + 36|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & 16384;
       $333 = ($332|0)==(0);
       $$pre64 = ((($227) + (($ii$311*72)|0)|0) + 36|0);
       if (!($333)) {
        $334 = HEAP8[$$pre64>>0]|0;
        $335 = $334&255;
        $336 = ((($pTabList) + (($335*72)|0)|0) + 8|0);
        _constructAutomaticIndex($pParse,$38,$336,$337,$338,$327);
        $339 = HEAP8[$21>>0]|0;
        $340 = ($339<<24>>24)==(0);
        if (!($340)) {
         break L33;
        }
       }
       $341 = HEAP8[$$pre64>>0]|0;
       $342 = $341&255;
       _explainOneScan($pParse,$pTabList,$327,$ii$311,$342,$$01);
       $$idx$val = HEAP32[$$idx4$pre$phiZZ2D>>2]|0;
       $343 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
       $344 = ((($227) + (($ii$311*72)|0)|0) + 32|0);
       HEAP32[$344>>2] = $343;
       $345 = (_codeOneLoopStart($20,$ii$311,$337,$338)|0);
       $346 = tempRet0;
       $347 = ((($227) + (($ii$311*72)|0)|0) + 24|0);
       $348 = HEAP32[$347>>2]|0;
       HEAP32[$326>>2] = $348;
       $349 = (($ii$311) + 1)|0;
       $350 = ($349|0)<($nTabList$1|0);
       if ($350) {
        $337 = $345;$338 = $346;$ii$311 = $349;
       } else {
        $$0 = $20;
        break;
       }
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 } while(0);
 $351 = ($20|0)==(0|0);
 if ($351) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $352 = HEAP32[$36>>2]|0;
 HEAP32[$34>>2] = $352;
 _whereInfoFree($2,$20);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WhereEnd($pWInfo) {
 $pWInfo = $pWInfo|0;
 var $$idx = 0, $$idx$val = 0, $$idx2$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond23 = 0, $i$019 = 0, $i$019$in = 0, $i$111 = 0, $j$013 = 0, $k$03 = 0, $k$16 = 0, $pIdx$0 = 0, $pIdx$0$in = 0, $pIn$014 = 0, $pLevel$09 = 0;
 var $pOp$04 = 0, $pOp$17 = 0, $x$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pWInfo>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pWInfo) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 _sqlite3ExprCacheClear($0);
 $6 = (($pWInfo) + 40|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $9 = $7&255;
  $i$019$in = $9;
  while(1) {
   $i$019 = (($i$019$in) + -1)|0;
   $10 = ((($pWInfo) + (($i$019*72)|0)|0) + 792|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($pWInfo) + (($i$019*72)|0)|0) + 760|0);
   $13 = HEAP32[$12>>2]|0;
   _sqlite3VdbeResolveLabel($2,$13);
   $14 = ((($pWInfo) + (($i$019*72)|0)|0) + 773|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(-101);
   if (!($16)) {
    $17 = $15&255;
    $18 = ((($pWInfo) + (($i$019*72)|0)|0) + 776|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($pWInfo) + (($i$019*72)|0)|0) + 780|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($pWInfo) + (($i$019*72)|0)|0) + 774|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    (_sqlite3VdbeAddOp3($2,$17,$19,$21,$24)|0);
    $25 = ((($pWInfo) + (($i$019*72)|0)|0) + 775|0);
    $26 = HEAP8[$25>>0]|0;
    _sqlite3VdbeChangeP5($2,$26);
   }
   $27 = (($11) + 36|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 2048;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = ((($pWInfo) + (($i$019*72)|0)|0) + 784|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)>(0);
    if ($33) {
     $34 = ((($pWInfo) + (($i$019*72)|0)|0) + 752|0);
     $35 = HEAP32[$34>>2]|0;
     _sqlite3VdbeResolveLabel($2,$35);
     $36 = HEAP32[$31>>2]|0;
     $37 = ((($pWInfo) + (($i$019*72)|0)|0) + 788|0);
     $38 = ($36|0)>(0);
     if ($38) {
      $39 = HEAP32[$37>>2]|0;
      $40 = (($36) + -1)|0;
      $41 = (($39) + (($40*12)|0)|0);
      $j$013 = $36;$pIn$014 = $41;
      while(1) {
       $42 = (($pIn$014) + 4|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (($43) + 1)|0;
       _sqlite3VdbeJumpHere($2,$44);
       $45 = (($pIn$014) + 8|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46&255;
       $48 = HEAP32[$pIn$014>>2]|0;
       $49 = HEAP32[$42>>2]|0;
       (_sqlite3VdbeAddOp2($2,$47,$48,$49)|0);
       $50 = HEAP32[$42>>2]|0;
       $51 = (($50) + -1)|0;
       _sqlite3VdbeJumpHere($2,$51);
       $52 = (($j$013) + -1)|0;
       $53 = (($pIn$014) + -12|0);
       $54 = ($52|0)>(0);
       if ($54) {
        $j$013 = $52;$pIn$014 = $53;
       } else {
        break;
       }
      }
     }
     $55 = HEAP32[$37>>2]|0;
     _sqlite3DbFree($5,$55);
    }
   }
   $56 = ((($pWInfo) + (($i$019*72)|0)|0) + 748|0);
   $57 = HEAP32[$56>>2]|0;
   _sqlite3VdbeResolveLabel($2,$57);
   $58 = ((($pWInfo) + (($i$019*72)|0)|0) + 756|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if (!($60)) {
    (_sqlite3VdbeAddOp2($2,16,0,$59)|0);
    $61 = HEAP32[$58>>2]|0;
    _sqlite3VdbeJumpHere($2,$61);
    $62 = HEAP32[$58>>2]|0;
    $63 = (($62) + -2)|0;
    _sqlite3VdbeJumpHere($2,$63);
   }
   $64 = ((($pWInfo) + (($i$019*72)|0)|0) + 736|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(0);
   if (!($66)) {
    $68 = (_sqlite3VdbeAddOp1($2,132,$65)|0);
    $69 = HEAP32[$27>>2]|0;
    $70 = $69 & 64;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = ((($4) + (($i$019*72)|0)|0) + 48|0);
     $73 = HEAP32[$72>>2]|0;
     (_sqlite3VdbeAddOp1($2,101,$73)|0);
     $$pre = HEAP32[$27>>2]|0;
     $75 = $$pre;
    } else {
     $75 = $69;
    }
    $74 = $75 & 512;
    $76 = ($74|0)==(0);
    if (!($76)) {
     $77 = ((($pWInfo) + (($i$019*72)|0)|0) + 744|0);
     $78 = HEAP32[$77>>2]|0;
     (_sqlite3VdbeAddOp1($2,101,$78)|0);
    }
    $79 = HEAP8[$14>>0]|0;
    $80 = ($79<<24>>24)==(18);
    if ($80) {
     $81 = ((($pWInfo) + (($i$019*72)|0)|0) + 776|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($pWInfo) + (($i$019*72)|0)|0) + 764|0);
     $84 = HEAP32[$83>>2]|0;
     (_sqlite3VdbeAddOp2($2,17,$82,$84)|0);
    } else {
     $85 = ((($pWInfo) + (($i$019*72)|0)|0) + 764|0);
     $86 = HEAP32[$85>>2]|0;
     (_sqlite3VdbeAddOp2($2,16,0,$86)|0);
    }
    _sqlite3VdbeJumpHere($2,$68);
   }
   $67 = ($i$019|0)>(0);
   if ($67) {
    $i$019$in = $i$019;
   } else {
    break;
   }
  }
 }
 $87 = (($pWInfo) + 52|0);
 $88 = HEAP32[$87>>2]|0;
 _sqlite3VdbeResolveLabel($2,$88);
 $89 = HEAP8[$6>>0]|0;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $201 = (($pWInfo) + 56|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($0) + 428|0);
  HEAP32[$203>>2] = $202;
  _whereInfoFree($5,$pWInfo);
  STACKTOP = sp;return;
 }
 $91 = (($pWInfo) + 736|0);
 $92 = (($pWInfo) + 34|0);
 $93 = (($pWInfo) + 37|0);
 $94 = (($pWInfo) + 64|0);
 $95 = (($5) + 64|0);
 $$idx = (($2) + 32|0);
 $i$111 = 0;$pLevel$09 = $91;
 while(1) {
  $96 = (($pLevel$09) + 36|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = ((($4) + (($98*72)|0)|0) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($pLevel$09) + 56|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($4) + (($98*72)|0)|0) + 45|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104 & 4;
  $106 = ($105<<24>>24)==(0);
  L39: do {
   if ($106) {
    label = 35;
   } else {
    $107 = HEAP8[$95>>0]|0;
    $108 = ($107<<24>>24)==(0);
    if ($108) {
     $$idx2$val = HEAP32[$$idx>>2]|0;
     $109 = (_sqlite3VdbeCurrentAddr($$idx2$val)|0);
     $110 = (($pLevel$09) + 32|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)<($109|0);
     if ($112) {
      $113 = (_sqlite3VdbeGetOp($2,$111)|0);
      $114 = (($pLevel$09) + 4|0);
      $115 = ((($4) + (($98*72)|0)|0) + 40|0);
      $k$03 = $111;$pOp$04 = $113;
      while(1) {
       $116 = (($pOp$04) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = HEAP32[$114>>2]|0;
       $119 = ($117|0)==($118|0);
       do {
        if ($119) {
         $120 = HEAP8[$pOp$04>>0]|0;
         if ((($120<<24>>24) == 100)) {
          HEAP8[$pOp$04>>0] = 28;
          HEAP32[$116>>2] = 0;
          $127 = (($pOp$04) + 12|0);
          HEAP32[$127>>2] = 0;
          break;
         } else if ((($120<<24>>24) == 46)) {
          HEAP8[$pOp$04>>0] = 33;
          $121 = (($pOp$04) + 8|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = HEAP32[$115>>2]|0;
          $124 = (($123) + ($122))|0;
          HEAP32[$116>>2] = $124;
          $125 = (($pOp$04) + 12|0);
          $126 = HEAP32[$125>>2]|0;
          HEAP32[$121>>2] = $126;
          HEAP32[$125>>2] = 0;
          break;
         } else {
          break;
         }
        }
       } while(0);
       $128 = (($k$03) + 1)|0;
       $exitcond = ($128|0)==($109|0);
       if ($exitcond) {
        break L39;
       }
       $129 = (($pOp$04) + 20|0);
       $k$03 = $128;$pOp$04 = $129;
      }
     }
    } else {
     label = 35;
    }
   }
  } while(0);
  L52: do {
   if ((label|0) == 35) {
    label = 0;
    $130 = (($100) + 44|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131 & 2;
    $133 = ($132<<24>>24)==(0);
    if ($133) {
     $134 = (($100) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==(0|0);
     if ($136) {
      $137 = HEAP16[$92>>1]|0;
      $138 = $137 & 16;
      $139 = ($138<<16>>16)==(0);
      if ($139) {
       $140 = (($102) + 36|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = HEAP8[$93>>0]|0;
       $143 = ($142<<24>>24)==(0);
       if ($143) {
        $144 = $141 & 64;
        $145 = ($144|0)==(0);
        if ($145) {
         $146 = ((($4) + (($98*72)|0)|0) + 48|0);
         $147 = HEAP32[$146>>2]|0;
         (_sqlite3VdbeAddOp1($2,58,$147)|0);
        }
       }
       $148 = $141 & 17152;
       $149 = ($148|0)==(512);
       if ($149) {
        $150 = (($pLevel$09) + 8|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = HEAP32[$94>>2]|0;
        $153 = ($151|0)==($152|0);
        if (!($153)) {
         (_sqlite3VdbeAddOp1($2,58,$151)|0);
        }
       }
      }
     }
    }
    $154 = (($102) + 36|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 & 576;
    $157 = ($156|0)==(0);
    if ($157) {
     $159 = $155 & 8192;
     $160 = ($159|0)==(0);
     if ($160) {
      break;
     }
     $161 = (($pLevel$09) + 48|0);
     $pIdx$0$in = $161;
    } else {
     $158 = (($102) + 28|0);
     $pIdx$0$in = $158;
    }
    $pIdx$0 = HEAP32[$pIdx$0$in>>2]|0;
    $162 = ($pIdx$0|0)==(0|0);
    if (!($162)) {
     $163 = HEAP8[$95>>0]|0;
     $164 = ($163<<24>>24)==(0);
     if ($164) {
      $$idx$val = HEAP32[$$idx>>2]|0;
      $165 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
      $166 = (($pLevel$09) + 32|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)<($165|0);
      if ($168) {
       $169 = (_sqlite3VdbeGetOp($2,$167)|0);
       $170 = (($pLevel$09) + 4|0);
       $171 = (($pLevel$09) + 8|0);
       $k$16 = $167;$pOp$17 = $169;
       while(1) {
        $172 = (($pOp$17) + 4|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = HEAP32[$170>>2]|0;
        $175 = ($173|0)==($174|0);
        do {
         if ($175) {
          $176 = HEAP8[$pOp$17>>0]|0;
          if ((($176<<24>>24) == 100)) {
           $193 = HEAP32[$171>>2]|0;
           HEAP32[$172>>2] = $193;
           HEAP8[$pOp$17>>0] = 109;
           break;
          } else if (!((($176<<24>>24) == 46))) {
           break;
          }
          $177 = (($pOp$17) + 8|0);
          $178 = HEAP32[$177>>2]|0;
          $179 = HEAP8[$130>>0]|0;
          $180 = $179 & 32;
          $181 = ($180<<24>>24)==(0);
          if ($181) {
           $x$0 = $178;
          } else {
           $182 = (_sqlite3PrimaryKeyIndex($100)|0);
           $183 = (($182) + 4|0);
           $184 = HEAP32[$183>>2]|0;
           $185 = (($184) + ($178<<1)|0);
           $186 = HEAP16[$185>>1]|0;
           $187 = $186 << 16 >> 16;
           $x$0 = $187;
          }
          $188 = $x$0&65535;
          $189 = (_sqlite3ColumnOfIndex($pIdx$0,$188)|0);
          $190 = ($189<<16>>16)>(-1);
          if ($190) {
           $191 = $189 << 16 >> 16;
           HEAP32[$177>>2] = $191;
           $192 = HEAP32[$171>>2]|0;
           HEAP32[$172>>2] = $192;
          }
         }
        } while(0);
        $194 = (($k$16) + 1)|0;
        $exitcond23 = ($194|0)==($165|0);
        if ($exitcond23) {
         break L52;
        }
        $195 = (($pOp$17) + 20|0);
        $k$16 = $194;$pOp$17 = $195;
       }
      }
     }
    }
   }
  } while(0);
  $196 = (($i$111) + 1)|0;
  $197 = (($pLevel$09) + 72|0);
  $198 = HEAP8[$6>>0]|0;
  $199 = $198&255;
  $200 = ($196|0)<($199|0);
  if ($200) {
   $i$111 = $196;$pLevel$09 = $197;
  } else {
   break;
  }
 }
 $201 = (($pWInfo) + 56|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($0) + 428|0);
 HEAP32[$203>>2] = $202;
 _whereInfoFree($5,$pWInfo);
 STACKTOP = sp;return;
}
function _whereInfoFree($db,$pWInfo) {
 $db = $db|0;
 $pWInfo = $pWInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWInfo|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pWInfo) + 328|0);
 _whereClauseClear($1);
 $2 = (($pWInfo) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $6 = $3;
  while(1) {
   $5 = (($6) + 48|0);
   $7 = HEAP32[$5>>2]|0;
   HEAP32[$2>>2] = $7;
   _whereLoopDelete($db,$6);
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    break;
   } else {
    $6 = $8;
   }
  }
 }
 _sqlite3DbFree($db,$pWInfo);
 STACKTOP = sp;return;
}
function _whereClauseClear($pWC) {
 $pWC = $pWC|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$02 = 0, $i$03 = 0, $i$03$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pWC>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pWC) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pWC) + 20|0);
 $6 = ($4|0)>(0);
 if ($6) {
  $7 = HEAP32[$5>>2]|0;
  $a$02 = $7;$i$03$in = $4;
  while(1) {
   $i$03 = (($i$03$in) + -1)|0;
   $8 = (($a$02) + 20|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 & 1;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $14 = $9;
   } else {
    $12 = HEAP32[$a$02>>2]|0;
    _sqlite3ExprDelete($2,$12);
    $$pre = HEAP8[$8>>0]|0;
    $14 = $$pre;
   }
   $13 = $14&255;
   $15 = $13 & 16;
   $16 = ($15|0)==(0);
   if ($16) {
    $19 = $13 & 32;
    $20 = ($19|0)==(0);
    if (!($20)) {
     $21 = (($a$02) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     _whereAndInfoDelete($2,$22);
    }
   } else {
    $17 = (($a$02) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    _whereOrInfoDelete($2,$18);
   }
   $23 = (($a$02) + 48|0);
   $24 = ($i$03|0)>(0);
   if ($24) {
    $a$02 = $23;$i$03$in = $i$03;
   } else {
    break;
   }
  }
 }
 $25 = HEAP32[$5>>2]|0;
 $26 = (($pWC) + 24|0);
 $27 = ($25|0)==($26|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 _sqlite3DbFree($2,$25);
 STACKTOP = sp;return;
}
function _whereLoopDelete($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _whereLoopClear($db,$p);
 _sqlite3DbFree($db,$p);
 STACKTOP = sp;return;
}
function _whereLoopClear($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 52|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  _sqlite3DbFree($db,$1);
 }
 _whereLoopClearUnion($db,$p);
 _whereLoopInit($p);
 STACKTOP = sp;return;
}
function _whereLoopClearUnion($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 17408;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1 & 1024;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (($p) + 28|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (($p) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   _sqlite3_free($10);
   HEAP8[$6>>0] = 0;
   HEAP32[$9>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $11 = $1 & 16384;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (($p) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = (($14) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 _sqlite3DbFree($db,$17);
 $18 = HEAP32[$13>>2]|0;
 $19 = (($18) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 _sqlite3KeyInfoUnref($20);
 $21 = HEAP32[$13>>2]|0;
 _sqlite3DbFree($db,$21);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _whereLoopInit($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 52|0);
 $1 = (($p) + 44|0);
 HEAP32[$1>>2] = $0;
 $2 = (($p) + 40|0);
 HEAP16[$2>>1] = 0;
 $3 = (($p) + 42|0);
 HEAP16[$3>>1] = 4;
 $4 = (($p) + 36|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _whereOrInfoDelete($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _whereClauseClear($p);
 _sqlite3DbFree($db,$p);
 STACKTOP = sp;return;
}
function _whereAndInfoDelete($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _whereClauseClear($p);
 _sqlite3DbFree($db,$p);
 STACKTOP = sp;return;
}
function _whereClauseInit($pWC,$pWInfo) {
 $pWC = $pWC|0;
 $pWInfo = $pWInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pWC>>2] = $pWInfo;
 $0 = (($pWC) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($pWC) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = (($pWC) + 16|0);
 HEAP32[$2>>2] = 8;
 $3 = (($pWC) + 24|0);
 $4 = (($pWC) + 20|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function _whereSplit($pWC,$pExpr,$op) {
 $pWC = $pWC|0;
 $pExpr = $pExpr|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pExpr$tr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWC) + 8|0);
 HEAP8[$0>>0] = $op;
 $1 = ($pExpr|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $pExpr$tr2 = $pExpr;
 }
 while(1) {
  $2 = HEAP8[$pExpr$tr2>>0]|0;
  $3 = ($2<<24>>24)==($op<<24>>24);
  if (!($3)) {
   break;
  }
  $4 = (($pExpr$tr2) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  _whereSplit($pWC,$5,$op);
  $6 = (($pExpr$tr2) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP8[$0>>0] = $op;
  $8 = ($7|0)==(0|0);
  if ($8) {
   label = 5;
   break;
  } else {
   $pExpr$tr2 = $7;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 (_whereClauseInsert($pWC,$pExpr$tr2,0)|0);
 STACKTOP = sp;return;
}
function _createMask($pMaskSet,$iCursor) {
 $pMaskSet = $pMaskSet|0;
 $iCursor = $iCursor|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMaskSet>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[$pMaskSet>>2] = $1;
 $2 = ((($pMaskSet) + ($0<<2)|0) + 4|0);
 HEAP32[$2>>2] = $iCursor;
 STACKTOP = sp;return;
}
function _exprAnalyzeAll($pWC) {
 $pWC = $pWC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $i$02 = 0, $i$02$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWC) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $i$02$in = $1;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $i$02 = (($i$02$in) + -1)|0;
  _exprAnalyze($pWC,$i$02);
  $3 = ($i$02|0)>(0);
  if ($3) {
   $i$02$in = $i$02;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _isDistinctRedundant($pParse,$pTabList,$pWC,$pDistinct) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pWC = $pWC|0;
 $pDistinct = $pDistinct|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$010 = 0, $i$1$lcssa = 0, $i$11 = 0, $pIdx$0 = 0;
 var $pIdx$04 = 0, $pIdx$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pTabList>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($pTabList) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pTabList) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$pDistinct>>2]|0;
 $7 = ($6|0)>(0);
 L4: do {
  if ($7) {
   $8 = (($pDistinct) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $i$010 = 0;
   while(1) {
    $10 = (($9) + (($i$010*20)|0)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_sqlite3ExprSkipCollate($11)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-102);
    if ($14) {
     $15 = (($12) + 28|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==($3|0);
     if ($17) {
      $18 = (($12) + 32|0);
      $19 = HEAP16[$18>>1]|0;
      $20 = ($19<<16>>16)<(0);
      if ($20) {
       $$0 = 1;
       break;
      }
     }
    }
    $21 = (($i$010) + 1)|0;
    $22 = ($21|0)<($6|0);
    if ($22) {
     $i$010 = $21;
    } else {
     break L4;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $23 = (($5) + 8|0);
 $pIdx$04 = HEAP32[$23>>2]|0;
 $24 = ($pIdx$04|0)==(0|0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (($5) + 4|0);
 $pIdx$05 = $pIdx$04;
 while(1) {
  $26 = (($pIdx$05) + 54|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)==(0);
  if (!($28)) {
   $29 = (($pIdx$05) + 50|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30<<16>>16)==(0);
   L21: do {
    if ($31) {
     $50 = 0;$i$1$lcssa = 0;
    } else {
     $32 = (($pIdx$05) + 4|0);
     $i$11 = 0;
     while(1) {
      $33 = HEAP32[$32>>2]|0;
      $34 = (($33) + ($i$11<<1)|0);
      $35 = HEAP16[$34>>1]|0;
      $36 = $35 << 16 >> 16;
      $37 = (_findTerm($pWC,$3,$36,-1,-1,2,$pIdx$05)|0);
      $38 = ($37|0)==(0|0);
      if ($38) {
       $39 = (_findIndexCol($pParse,$pDistinct,$3,$pIdx$05,$i$11)|0);
       $40 = ($39|0)<(0);
       if ($40) {
        break;
       }
       $41 = HEAP32[$25>>2]|0;
       $42 = ((($41) + (($36*24)|0)|0) + 20|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)==(0);
       if ($44) {
        break;
       }
      }
      $45 = (($i$11) + 1)|0;
      $46 = HEAP16[$29>>1]|0;
      $47 = $46&65535;
      $48 = ($45|0)<($47|0);
      if ($48) {
       $i$11 = $45;
      } else {
       $50 = $46;$i$1$lcssa = $45;
       break L21;
      }
     }
     $$pre = HEAP16[$29>>1]|0;
     $50 = $$pre;$i$1$lcssa = $i$11;
    }
   } while(0);
   $49 = $50&65535;
   $51 = ($i$1$lcssa|0)==($49|0);
   if ($51) {
    $$0 = 1;
    label = 20;
    break;
   }
  }
  $52 = (($pIdx$05) + 20|0);
  $pIdx$0 = HEAP32[$52>>2]|0;
  $53 = ($pIdx$0|0)==(0|0);
  if ($53) {
   $$0 = 0;
   label = 20;
   break;
  } else {
   $pIdx$05 = $pIdx$0;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _whereShortCut($pBuilder$0$0$val,$pBuilder$0$3$val) {
 $pBuilder$0$0$val = $pBuilder$0$0$val|0;
 $pBuilder$0$3$val = $pBuilder$0$3$val|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j$0$lcssa = 0, $j$01 = 0, $pIdx$0 = 0, $pIdx$04 = 0, $pIdx$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBuilder$0$0$val) + 34|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 32;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pBuilder$0$0$val) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 44|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 16;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($5) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($5) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($pBuilder$0$0$val) + 328|0);
 $18 = (($pBuilder$0$3$val) + 36|0);
 HEAP32[$18>>2] = 0;
 $19 = (($pBuilder$0$3$val) + 24|0);
 $20 = (($19) + 2|0);
 HEAP16[$20>>1] = 0;
 $21 = (_findTerm($17,$16,-1,0,0,2,0)|0);
 $22 = ($21|0)==(0|0);
 L10: do {
  if ($22) {
   $27 = (($7) + 8|0);
   $pIdx$04 = HEAP32[$27>>2]|0;
   $28 = ($pIdx$04|0)==(0|0);
   L12: do {
    if (!($28)) {
     $29 = (($pBuilder$0$3$val) + 44|0);
     $pIdx$05 = $pIdx$04;
     while(1) {
      $30 = (($pIdx$05) + 54|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = (($pIdx$05) + 36|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==(0|0);
       if ($35) {
        $36 = (($pIdx$05) + 50|0);
        $37 = HEAP16[$36>>1]|0;
        $38 = ($37&65535)>(4);
        if (!($38)) {
         $39 = (($pIdx$05) + 4|0);
         $40 = ($37<<16>>16)==(0);
         L20: do {
          if ($40) {
           $54 = 0;$j$0$lcssa = 0;
          } else {
           $j$01 = 0;
           while(1) {
            $41 = HEAP32[$39>>2]|0;
            $42 = (($41) + ($j$01<<1)|0);
            $43 = HEAP16[$42>>1]|0;
            $44 = $43 << 16 >> 16;
            $45 = (_findTerm($17,$16,$44,0,0,2,$pIdx$05)|0);
            $46 = ($45|0)==(0|0);
            if ($46) {
             break;
            }
            $47 = HEAP32[$29>>2]|0;
            $48 = (($47) + ($j$01<<2)|0);
            HEAP32[$48>>2] = $45;
            $49 = (($j$01) + 1)|0;
            $50 = HEAP16[$36>>1]|0;
            $51 = $50&65535;
            $52 = ($49|0)<($51|0);
            if ($52) {
             $j$01 = $49;
            } else {
             $54 = $50;$j$0$lcssa = $49;
             break L20;
            }
           }
           $$pre = HEAP16[$36>>1]|0;
           $54 = $$pre;$j$0$lcssa = $j$01;
          }
         } while(0);
         $53 = $54&65535;
         $55 = ($j$0$lcssa|0)==($53|0);
         if ($55) {
          break;
         }
        }
       }
      }
      $80 = (($pIdx$05) + 20|0);
      $pIdx$0 = HEAP32[$80>>2]|0;
      $81 = ($pIdx$0|0)==(0|0);
      if ($81) {
       break L12;
      } else {
       $pIdx$05 = $pIdx$0;
      }
     }
     HEAP32[$18>>2] = 4609;
     $56 = (($pIdx$05) + 55|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 & 32;
     $59 = ($58<<24>>24)==(0);
     if ($59) {
      $60 = (($5) + 64|0);
      $61 = $60;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($61) + 4)|0;
      $65 = $64;
      $66 = HEAP32[$65>>2]|0;
      $67 = (_columnsInIndex($pIdx$05)|0);
      $68 = tempRet0;
      $69 = $67 ^ -1;
      $70 = $68 ^ -1;
      $71 = $63 & $69;
      $72 = $66 & $70;
      $73 = ($71|0)==(0);
      $74 = ($72|0)==(0);
      $75 = $73 & $74;
      if ($75) {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      HEAP32[$18>>2] = 4673;
     }
     $76 = $j$0$lcssa&65535;
     $77 = (($pBuilder$0$3$val) + 40|0);
     HEAP16[$77>>1] = $76;
     HEAP16[$19>>1] = $76;
     $78 = (($pBuilder$0$3$val) + 28|0);
     HEAP32[$78>>2] = $pIdx$05;
     $79 = (($pBuilder$0$3$val) + 20|0);
     HEAP16[$79>>1] = 39;
     break L10;
    }
   } while(0);
   $$pre11 = HEAP32[$18>>2]|0;
   $82 = ($$pre11|0)==(0);
   if ($82) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   HEAP32[$18>>2] = 4353;
   $23 = (($pBuilder$0$3$val) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$24>>2] = $21;
   $25 = (($pBuilder$0$3$val) + 40|0);
   HEAP16[$25>>1] = 1;
   HEAP16[$19>>1] = 1;
   $26 = (($pBuilder$0$3$val) + 20|0);
   HEAP16[$26>>1] = 33;
  }
 } while(0);
 $83 = (($pBuilder$0$3$val) + 22|0);
 HEAP16[$83>>1] = 1;
 $84 = (($pBuilder$0$0$val) + 792|0);
 HEAP32[$84>>2] = $pBuilder$0$3$val;
 $85 = (($pBuilder$0$0$val) + 68|0);
 $86 = (_getMask($85,$16)|0);
 $87 = tempRet0;
 $88 = (($pBuilder$0$3$val) + 8|0);
 $89 = $88;
 $90 = $89;
 HEAP32[$90>>2] = $86;
 $91 = (($89) + 4)|0;
 $92 = $91;
 HEAP32[$92>>2] = $87;
 $93 = (($pBuilder$0$0$val) + 740|0);
 HEAP32[$93>>2] = $16;
 $94 = (($pBuilder$0$0$val) + 32|0);
 HEAP16[$94>>1] = 1;
 $95 = (($pBuilder$0$0$val) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(0|0);
 if (!($97)) {
  $98 = (($pBuilder$0$0$val) + 36|0);
  HEAP8[$98>>0] = 1;
 }
 $99 = HEAP16[$0>>1]|0;
 $100 = $99 & 1024;
 $101 = ($100<<16>>16)==(0);
 if ($101) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $102 = (($pBuilder$0$0$val) + 39|0);
 HEAP8[$102>>0] = 1;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _whereLoopAddAll($pBuilder) {
 $pBuilder = $pBuilder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $iTab$02 = 0, $pItem$01 = 0, $priorJoinType$04 = 0, $rc$1 = 0, $rc$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pBuilder>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + 40|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($pBuilder) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _whereLoopInit($9);
 $10 = (($4) + 64|0);
 $11 = ($6<<24>>24)==(0);
 if ($11) {
  $rc$3 = 0;
  _whereLoopClear($4,$9);
  STACKTOP = sp;return ($rc$3|0);
 }
 $12 = (($2) + 8|0);
 $13 = (($9) + 16|0);
 $14 = (($0) + 68|0);
 $15 = (($9) + 8|0);
 $31 = 0;$32 = 0;$34 = 0;$35 = 0;$iTab$02 = 0;$pItem$01 = $12;$priorJoinType$04 = 0;
 while(1) {
  $16 = $iTab$02&255;
  HEAP8[$13>>0] = $16;
  $17 = (($pItem$01) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_getMask($14,$18)|0);
  $20 = tempRet0;
  $21 = $15;
  $22 = $21;
  HEAP32[$22>>2] = $19;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = (($pItem$01) + 36|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 | $priorJoinType$04;
  $28 = $27 & 10;
  $29 = ($28<<24>>24)==(0);
  $30 = $29 ? $31 : $32;
  $33 = $29 ? $34 : $35;
  $36 = (($pItem$01) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 44|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 16;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = (_whereLoopAddBtree($pBuilder,$30,$33)|0);
   $rc$1 = $43;
  } else {
   $42 = (_whereLoopAddVirtual($pBuilder,$30,$33)|0);
   $rc$1 = $42;
  }
  $44 = ($rc$1|0)==(0);
  if (!($44)) {
   $rc$3 = $rc$1;
   label = 10;
   break;
  }
  $45 = (_whereLoopAddOr($pBuilder,$30,$33)|0);
  $46 = $15;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $48 | $32;
  $53 = $51 | $35;
  $54 = ($45|0)==(0);
  if (!($54)) {
   $rc$3 = $45;
   label = 10;
   break;
  }
  $55 = HEAP8[$10>>0]|0;
  $56 = ($55<<24>>24)==(0);
  if (!($56)) {
   $rc$3 = 0;
   label = 10;
   break;
  }
  $57 = (($iTab$02) + 1)|0;
  $58 = (($pItem$01) + 72|0);
  $59 = ($57|0)<($7|0);
  if ($59) {
   $31 = $30;$32 = $52;$34 = $33;$35 = $53;$iTab$02 = $57;$pItem$01 = $58;$priorJoinType$04 = $26;
  } else {
   $rc$3 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  _whereLoopClear($4,$9);
  STACKTOP = sp;return ($rc$3|0);
 }
 return 0|0;
}
function _wherePathSolver($pWInfo,$nRowEst) {
 $pWInfo = $pWInfo|0;
 $nRowEst = $nRowEst|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $aFrom$057 = 0, $aFrom$057$phi = 0, $aTo$058 = 0, $aTo$058$phi = 0, $aTo$058$pn = 0, $exitcond = 0, $exitcond71 = 0, $iLoop$059 = 0, $iLoop$17 = 0, $ii$065 = 0, $ii$148 = 0, $ii$210 = 0, $isOrdered$0 = 0, $isOrderedValid$0 = 0, $jj$016 = 0, $jj$1 = 0, $jj$224 = 0, $mxCost$055 = 0;
 var $mxCost$1$lcssa = 0, $mxCost$145 = 0, $mxCost$2$lcssa = 0, $mxCost$233 = 0, $mxCost$321 = 0, $mxCost$4 = 0, $mxCost$5 = 0, $mxI$054 = 0, $mxI$1$lcssa = 0, $mxI$144 = 0, $mxI$2$lcssa = 0, $mxI$231 = 0, $mxI$320 = 0, $mxI$4 = 0, $mxI$5 = 0, $mxOut$022 = 0, $mxOut$1 = 0, $nFrom$056 = 0, $nTo$0$lcssa = 0, $nTo$046 = 0;
 var $nTo$1$lcssa = 0, $nTo$135 = 0, $nTo$2 = 0, $nTo$3 = 0, $nTo$4 = 0, $notUsed = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $pFrom$063 = 0, $pFrom$147 = 0, $pFrom$2$lcssa = 0, $pFrom$2$lcssa80 = 0, $pFrom$29 = 0, $pFrom$3 = 0, $pTo$014 = 0, $pTo$1 = 0, $pTo$225 = 0, $pWLoop$0 = 0, $pWLoop$030 = 0;
 var $pWLoop$036 = 0, $pX$064 = 0, $phitmp = 0, $phitmp$ = 0, $phitmp76 = 0, $rCost$0 = 0, $rSortCost$0 = 0, $revMask = 0, $sext1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 16|0;
 $revMask = sp + 8|0;
 $notUsed = sp;
 $0 = HEAP32[$pWInfo>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pWInfo) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($3<<24>>24)==(1);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ($3<<24>>24)==(2);
  $7 = $6 ? 5 : 10;
  $11 = $7;
 }
 $8 = $4 << 3;
 $9 = (($8) + 64)|0;
 $10 = Math_imul($9, $11)|0;
 $12 = (_sqlite3DbMallocRaw($1,$10)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (($12) + ($11<<5)|0);
 ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;HEAP32[$14+24>>2]=0|0;HEAP32[$14+28>>2]=0|0;
 $$sum = $11 << 1;
 $15 = (($12) + ($$sum<<5)|0);
 $ii$065 = $$sum;$pFrom$063 = $12;$pX$064 = $15;
 while(1) {
  $16 = (($pFrom$063) + 24|0);
  HEAP32[$16>>2] = $pX$064;
  $17 = (($ii$065) + -1)|0;
  $18 = (($pFrom$063) + 32|0);
  $19 = (($pX$064) + ($4<<2)|0);
  $20 = ($17|0)>(0);
  if ($20) {
   $ii$065 = $17;$pFrom$063 = $18;$pX$064 = $19;
  } else {
   break;
  }
 }
 $21 = (($0) + 428|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)<(46);
 $phitmp = $22&65535;
 $phitmp$ = $23 ? $phitmp : 46;
 $24 = ((($12) + ($11<<5)|0) + 16|0);
 HEAP16[$24>>1] = $phitmp$;
 $25 = (($pWInfo) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 $28 = ($nRowEst<<16>>16)==(0);
 $or$cond = $27 | $28;
 if ($or$cond) {
  $29 = ((($12) + ($11<<5)|0) + 21|0);
  HEAP8[$29>>0] = 1;
  $rSortCost$0 = 0;
 } else {
  $30 = $nRowEst&65535;
  $31 = (_estLog($nRowEst)|0);
  $32 = $31&65535;
  $33 = (($32) + ($30))|0;
  $34 = $33&65535;
  $rSortCost$0 = $34;
 }
 $35 = ($3<<24>>24)==(0);
 if ($35) {
  $pFrom$2$lcssa80 = $14;
 } else {
  $36 = (($pWInfo) + 16|0);
  $37 = (($pWInfo) + 34|0);
  $38 = ($11>>>0)>(1);
  $aFrom$057 = $14;$aTo$058 = $12;$iLoop$059 = 0;$mxCost$055 = 0;$mxI$054 = 0;$nFrom$056 = 1;
  while(1) {
   $39 = ($nFrom$056|0)>(0);
   L18: do {
    if ($39) {
     $40 = $iLoop$059&65535;
     $41 = $iLoop$059 << 2;
     $42 = (($aTo$058) + 18|0);
     $43 = (($aTo$058) + 16|0);
     $ii$148 = 1;$mxCost$145 = $mxCost$055;$mxI$144 = $mxI$054;$nTo$046 = 0;$pFrom$147 = $aFrom$057;
     while(1) {
      $pWLoop$030 = HEAP32[$36>>2]|0;
      $44 = ($pWLoop$030|0)==(0|0);
      if ($44) {
       $mxCost$2$lcssa = $mxCost$145;$mxI$2$lcssa = $mxI$144;$nTo$1$lcssa = $nTo$046;
      } else {
       $45 = (($pFrom$147) + 21|0);
       $46 = (($pFrom$147) + 20|0);
       $47 = (($pFrom$147) + 16|0);
       $48 = (($pFrom$147) + 18|0);
       $49 = (($pFrom$147) + 24|0);
       $50 = (($pFrom$147) + 8|0);
       $mxCost$233 = $mxCost$145;$mxI$231 = $mxI$144;$nTo$135 = $nTo$046;$pWLoop$036 = $pWLoop$030;
       while(1) {
        $51 = $revMask;
        $52 = $51;
        HEAP32[$52>>2] = 0;
        $53 = (($51) + 4)|0;
        $54 = $53;
        HEAP32[$54>>2] = 0;
        $55 = HEAP8[$45>>0]|0;
        $56 = HEAP8[$46>>0]|0;
        $57 = $pWLoop$036;
        $58 = $57;
        $59 = HEAP32[$58>>2]|0;
        $60 = (($57) + 4)|0;
        $61 = $60;
        $62 = HEAP32[$61>>2]|0;
        $63 = $pFrom$147;
        $64 = $63;
        $65 = HEAP32[$64>>2]|0;
        $66 = (($63) + 4)|0;
        $67 = $66;
        $68 = HEAP32[$67>>2]|0;
        $69 = $65 ^ -1;
        $70 = $68 ^ -1;
        $71 = $59 & $69;
        $72 = $62 & $70;
        $73 = ($71|0)==(0);
        $74 = ($72|0)==(0);
        $75 = $73 & $74;
        L26: do {
         if ($75) {
          $76 = (($pWLoop$036) + 8|0);
          $77 = $76;
          $78 = $77;
          $79 = HEAP32[$78>>2]|0;
          $80 = (($77) + 4)|0;
          $81 = $80;
          $82 = HEAP32[$81>>2]|0;
          $83 = $79 & $65;
          $84 = $82 & $68;
          $85 = ($83|0)==(0);
          $86 = ($84|0)==(0);
          $87 = $85 & $86;
          if ($87) {
           $88 = (($pWLoop$036) + 18|0);
           $89 = HEAP16[$88>>1]|0;
           $90 = (($pWLoop$036) + 20|0);
           $91 = HEAP16[$90>>1]|0;
           $92 = $91&65535;
           $93 = HEAP16[$47>>1]|0;
           $94 = $93&65535;
           $95 = (($94) + ($92))|0;
           $96 = $95&65535;
           $97 = (_sqlite3LogEstAdd($89,$96)|0);
           $98 = HEAP16[$48>>1]|0;
           $99 = (_sqlite3LogEstAdd($97,$98)|0);
           $100 = (($pWLoop$036) + 22|0);
           $101 = HEAP16[$100>>1]|0;
           $102 = $101&65535;
           $103 = (($102) + ($94))|0;
           $104 = $103&65535;
           $105 = $79 | $65;
           $106 = $82 | $68;
           $107 = ($55<<24>>24)==(0);
           do {
            if ($107) {
             $108 = HEAP32[$25>>2]|0;
             $109 = HEAP16[$37>>1]|0;
             $110 = (_wherePathSatisfiesOrderBy($pWInfo,$108,$pFrom$147,$109,$40,$pWLoop$036,$revMask)|0);
             if ((($110|0) == 1)) {
              $isOrdered$0 = 1;$isOrderedValid$0 = 1;$rCost$0 = $99;
              break;
             } else if ((($110|0) == 0)) {
              $111 = (_sqlite3LogEstAdd($99,$rSortCost$0)|0);
              $isOrdered$0 = 0;$isOrderedValid$0 = 1;$rCost$0 = $111;
              break;
             } else {
              $isOrdered$0 = $56;$isOrderedValid$0 = 0;$rCost$0 = $99;
              break;
             }
            } else {
             $112 = $50;
             $113 = $112;
             $114 = HEAP32[$113>>2]|0;
             $115 = (($112) + 4)|0;
             $116 = $115;
             $117 = HEAP32[$116>>2]|0;
             $118 = $revMask;
             $119 = $118;
             HEAP32[$119>>2] = $114;
             $120 = (($118) + 4)|0;
             $121 = $120;
             HEAP32[$121>>2] = $117;
             $isOrdered$0 = $56;$isOrderedValid$0 = $55;$rCost$0 = $99;
            }
           } while(0);
           $122 = ($nTo$135|0)>(0);
           L36: do {
            if ($122) {
             $sext1 = $103 << 16;
             $123 = $sext1 >> 16;
             $jj$016 = 0;$pTo$014 = $aTo$058;
             L38: while(1) {
              $124 = $pTo$014;
              $125 = $124;
              $126 = HEAP32[$125>>2]|0;
              $127 = (($124) + 4)|0;
              $128 = $127;
              $129 = HEAP32[$128>>2]|0;
              $130 = ($126|0)==($105|0);
              $131 = ($129|0)==($106|0);
              $132 = $130 & $131;
              do {
               if ($132) {
                $133 = (($pTo$014) + 21|0);
                $134 = HEAP8[$133>>0]|0;
                $135 = ($134<<24>>24)==($isOrderedValid$0<<24>>24);
                if (!($135)) {
                 break;
                }
                $136 = (($pTo$014) + 18|0);
                $137 = HEAP16[$136>>1]|0;
                $138 = ($137<<16>>16)>($rCost$0<<16>>16);
                if (!($138)) {
                 $139 = (($pTo$014) + 16|0);
                 $140 = HEAP16[$139>>1]|0;
                 $141 = $140 << 16 >> 16;
                 $142 = ($141|0)>($123|0);
                 if (!($142)) {
                  $156 = $140;
                  break L38;
                 }
                }
                $143 = ($137<<16>>16)<($rCost$0<<16>>16);
                if ($143) {
                 break;
                }
                $144 = (($pTo$014) + 16|0);
                $145 = HEAP16[$144>>1]|0;
                $146 = $145 << 16 >> 16;
                $147 = ($146|0)<($123|0);
                if (!($147)) {
                 label = 33;
                 break L38;
                }
               }
              } while(0);
              $148 = (($jj$016) + 1)|0;
              $149 = (($pTo$014) + 32|0);
              $150 = ($148|0)<($nTo$135|0);
              if ($150) {
               $jj$016 = $148;$pTo$014 = $149;
              } else {
               label = 31;
               break L36;
              }
             }
             if ((label|0) == 33) {
              label = 0;
              if ($138) {
               $nTo$3 = $nTo$135;$pTo$1 = $pTo$014;
               break;
              } else {
               $156 = $145;
              }
             }
             $155 = $156 << 16 >> 16;
             $157 = ($155|0)>($123|0);
             if ($157) {
              $nTo$3 = $nTo$135;$pTo$1 = $pTo$014;
             } else {
              $mxCost$5 = $mxCost$233;$mxI$5 = $mxI$231;$nTo$4 = $nTo$135;
              break L26;
             }
            } else {
             label = 31;
            }
           } while(0);
           if ((label|0) == 31) {
            label = 0;
            $151 = ($nTo$135|0)<($11|0);
            $152 = ($rCost$0<<16>>16)<($mxCost$233<<16>>16);
            $or$cond3 = $151 | $152;
            if (!($or$cond3)) {
             $mxCost$5 = $mxCost$233;$mxI$5 = $mxI$231;$nTo$4 = $nTo$135;
             break;
            }
            $153 = $151&1;
            $nTo$2 = (($153) + ($nTo$135))|0;
            $jj$1 = $151 ? $nTo$135 : $mxI$231;
            $154 = (($aTo$058) + ($jj$1<<5)|0);
            $nTo$3 = $nTo$2;$pTo$1 = $154;
           }
           $158 = $pFrom$147;
           $159 = $158;
           $160 = HEAP32[$159>>2]|0;
           $161 = (($158) + 4)|0;
           $162 = $161;
           $163 = HEAP32[$162>>2]|0;
           $164 = $76;
           $165 = $164;
           $166 = HEAP32[$165>>2]|0;
           $167 = (($164) + 4)|0;
           $168 = $167;
           $169 = HEAP32[$168>>2]|0;
           $170 = $166 | $160;
           $171 = $169 | $163;
           $172 = $pTo$1;
           $173 = $172;
           HEAP32[$173>>2] = $170;
           $174 = (($172) + 4)|0;
           $175 = $174;
           HEAP32[$175>>2] = $171;
           $176 = $revMask;
           $177 = $176;
           $178 = HEAP32[$177>>2]|0;
           $179 = (($176) + 4)|0;
           $180 = $179;
           $181 = HEAP32[$180>>2]|0;
           $182 = (($pTo$1) + 8|0);
           $183 = $182;
           $184 = $183;
           HEAP32[$184>>2] = $178;
           $185 = (($183) + 4)|0;
           $186 = $185;
           HEAP32[$186>>2] = $181;
           $187 = (($pTo$1) + 16|0);
           HEAP16[$187>>1] = $104;
           $188 = (($pTo$1) + 18|0);
           HEAP16[$188>>1] = $rCost$0;
           $189 = (($pTo$1) + 21|0);
           HEAP8[$189>>0] = $isOrderedValid$0;
           $190 = (($pTo$1) + 20|0);
           HEAP8[$190>>0] = $isOrdered$0;
           $191 = (($pTo$1) + 24|0);
           $192 = HEAP32[$191>>2]|0;
           $193 = HEAP32[$49>>2]|0;
           _memcpy(($192|0),($193|0),($41|0))|0;
           $194 = HEAP32[$191>>2]|0;
           $195 = (($194) + ($iLoop$059<<2)|0);
           HEAP32[$195>>2] = $pWLoop$036;
           $196 = ($nTo$3|0)<($11|0);
           if ($196) {
            $mxCost$5 = $mxCost$233;$mxI$5 = $mxI$231;$nTo$4 = $nTo$3;
           } else {
            $197 = HEAP16[$42>>1]|0;
            if ($38) {
             $198 = HEAP16[$43>>1]|0;
             $aTo$058$pn = $aTo$058;$jj$224 = 1;$mxCost$321 = $197;$mxI$320 = 0;$mxOut$022 = $198;
             while(1) {
              $pTo$225 = (($aTo$058$pn) + 32|0);
              $199 = (($aTo$058$pn) + 50|0);
              $200 = HEAP16[$199>>1]|0;
              $201 = ($200<<16>>16)>($mxCost$321<<16>>16);
              do {
               if ($201) {
                $$phi$trans$insert = (($aTo$058$pn) + 48|0);
                $$pre = HEAP16[$$phi$trans$insert>>1]|0;
                $278 = $$pre;
                label = 42;
               } else {
                $202 = ($200<<16>>16)==($mxCost$321<<16>>16);
                if (!($202)) {
                 $mxCost$4 = $mxCost$321;$mxI$4 = $mxI$320;$mxOut$1 = $mxOut$022;
                 break;
                }
                $203 = (($aTo$058$pn) + 48|0);
                $204 = HEAP16[$203>>1]|0;
                $205 = ($204<<16>>16)>($mxOut$022<<16>>16);
                if ($205) {
                 $278 = $204;
                 label = 42;
                } else {
                 $mxCost$4 = $mxCost$321;$mxI$4 = $mxI$320;$mxOut$1 = $mxOut$022;
                }
               }
              } while(0);
              if ((label|0) == 42) {
               label = 0;
               $mxCost$4 = $200;$mxI$4 = $jj$224;$mxOut$1 = $278;
              }
              $206 = (($jj$224) + 1)|0;
              $207 = ($206|0)<($11|0);
              if ($207) {
               $aTo$058$pn = $pTo$225;$jj$224 = $206;$mxCost$321 = $mxCost$4;$mxI$320 = $mxI$4;$mxOut$022 = $mxOut$1;
              } else {
               $mxCost$5 = $mxCost$4;$mxI$5 = $mxI$4;$nTo$4 = $nTo$3;
               break;
              }
             }
            } else {
             $mxCost$5 = $197;$mxI$5 = 0;$nTo$4 = $nTo$3;
            }
           }
          } else {
           $mxCost$5 = $mxCost$233;$mxI$5 = $mxI$231;$nTo$4 = $nTo$135;
          }
         } else {
          $mxCost$5 = $mxCost$233;$mxI$5 = $mxI$231;$nTo$4 = $nTo$135;
         }
        } while(0);
        $208 = (($pWLoop$036) + 48|0);
        $pWLoop$0 = HEAP32[$208>>2]|0;
        $209 = ($pWLoop$0|0)==(0|0);
        if ($209) {
         $mxCost$2$lcssa = $mxCost$5;$mxI$2$lcssa = $mxI$5;$nTo$1$lcssa = $nTo$4;
         break;
        } else {
         $mxCost$233 = $mxCost$5;$mxI$231 = $mxI$5;$nTo$135 = $nTo$4;$pWLoop$036 = $pWLoop$0;
        }
       }
      }
      $exitcond71 = ($ii$148|0)==($nFrom$056|0);
      if ($exitcond71) {
       $mxCost$1$lcssa = $mxCost$2$lcssa;$mxI$1$lcssa = $mxI$2$lcssa;$nTo$0$lcssa = $nTo$1$lcssa;
       break L18;
      }
      $210 = (($pFrom$147) + 32|0);
      $phitmp76 = (($ii$148) + 1)|0;
      $ii$148 = $phitmp76;$mxCost$145 = $mxCost$2$lcssa;$mxI$144 = $mxI$2$lcssa;$nTo$046 = $nTo$1$lcssa;$pFrom$147 = $210;
     }
    } else {
     $mxCost$1$lcssa = $mxCost$055;$mxI$1$lcssa = $mxI$054;$nTo$0$lcssa = 0;
    }
   } while(0);
   $211 = (($iLoop$059) + 1)|0;
   $212 = ($211|0)<($4|0);
   if ($212) {
    $aTo$058$phi = $aFrom$057;$aFrom$057$phi = $aTo$058;$iLoop$059 = $211;$mxCost$055 = $mxCost$1$lcssa;$mxI$054 = $mxI$1$lcssa;$nFrom$056 = $nTo$0$lcssa;$aTo$058 = $aTo$058$phi;$aFrom$057 = $aFrom$057$phi;
   } else {
    break;
   }
  }
  $213 = ($nTo$0$lcssa|0)==(0);
  if ($213) {
   _sqlite3ErrorMsg($0,24056,$vararg_buffer);
   _sqlite3DbFree($1,$12);
   STACKTOP = sp;return;
  }
  $214 = ($nTo$0$lcssa|0)>(1);
  if ($214) {
   $ii$210 = 1;$pFrom$29 = $aTo$058;
   while(1) {
    $217 = (($pFrom$29) + 18|0);
    $218 = HEAP16[$217>>1]|0;
    $219 = ((($aTo$058) + ($ii$210<<5)|0) + 18|0);
    $220 = HEAP16[$219>>1]|0;
    $221 = ($218<<16>>16)>($220<<16>>16);
    if ($221) {
     $222 = (($aTo$058) + ($ii$210<<5)|0);
     $pFrom$3 = $222;
    } else {
     $pFrom$3 = $pFrom$29;
    }
    $223 = (($ii$210) + 1)|0;
    $exitcond = ($223|0)==($nTo$0$lcssa|0);
    if ($exitcond) {
     $pFrom$2$lcssa = $pFrom$3;
     break;
    } else {
     $ii$210 = $223;$pFrom$29 = $pFrom$3;
    }
   }
  } else {
   $pFrom$2$lcssa = $aTo$058;
  }
  if ($35) {
   $pFrom$2$lcssa80 = $pFrom$2$lcssa;
  } else {
   $215 = (($pFrom$2$lcssa) + 24|0);
   $216 = (($pWInfo) + 4|0);
   $iLoop$17 = 0;
   while(1) {
    $224 = HEAP32[$215>>2]|0;
    $225 = (($224) + ($iLoop$17<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ((($pWInfo) + (($iLoop$17*72)|0)|0) + 792|0);
    HEAP32[$227>>2] = $226;
    $228 = (($226) + 16|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = ((($pWInfo) + (($iLoop$17*72)|0)|0) + 772|0);
    HEAP8[$230>>0] = $229;
    $231 = $229&255;
    $232 = HEAP32[$216>>2]|0;
    $233 = ((($232) + (($231*72)|0)|0) + 48|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ((($pWInfo) + (($iLoop$17*72)|0)|0) + 740|0);
    HEAP32[$235>>2] = $234;
    $236 = (($iLoop$17) + 1)|0;
    $237 = ($236|0)<($4|0);
    if ($237) {
     $iLoop$17 = $236;
    } else {
     $pFrom$2$lcssa80 = $pFrom$2$lcssa;
     break;
    }
   }
  }
 }
 $238 = (($pWInfo) + 34|0);
 $239 = HEAP16[$238>>1]|0;
 $240 = $239 & 1536;
 $241 = ($240<<16>>16)==(1024);
 if ($241) {
  $242 = (($pWInfo) + 39|0);
  $243 = HEAP8[$242>>0]|0;
  $244 = ($243<<24>>24)!=(0);
  $or$cond6 = $244 | $28;
  if (!($or$cond6)) {
   $245 = (($pWInfo) + 12|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($4) + -1)|0;
   $248 = $247&65535;
   $249 = (($pFrom$2$lcssa80) + 24|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = (($250) + ($247<<2)|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (_wherePathSatisfiesOrderBy($pWInfo,$246,$pFrom$2$lcssa80,512,$248,$252,$notUsed)|0);
   $254 = ($253|0)==(1);
   if ($254) {
    HEAP8[$242>>0] = 2;
   }
  }
 }
 $255 = (($pFrom$2$lcssa80) + 20|0);
 $256 = HEAP8[$255>>0]|0;
 $257 = ($256<<24>>24)==(0);
 do {
  if (!($257)) {
   $258 = HEAP16[$238>>1]|0;
   $259 = $258 & 512;
   $260 = ($259<<16>>16)==(0);
   if ($260) {
    $262 = (($pWInfo) + 36|0);
    HEAP8[$262>>0] = 1;
    $263 = (($pFrom$2$lcssa80) + 8|0);
    $264 = $263;
    $265 = $264;
    $266 = HEAP32[$265>>2]|0;
    $267 = (($264) + 4)|0;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($pWInfo) + 24|0);
    $271 = $270;
    $272 = $271;
    HEAP32[$272>>2] = $266;
    $273 = (($271) + 4)|0;
    $274 = $273;
    HEAP32[$274>>2] = $269;
    break;
   } else {
    $261 = (($pWInfo) + 39|0);
    HEAP8[$261>>0] = 2;
    break;
   }
  }
 } while(0);
 $275 = (($pFrom$2$lcssa80) + 16|0);
 $276 = HEAP16[$275>>1]|0;
 $277 = (($pWInfo) + 32|0);
 HEAP16[$277>>1] = $276;
 _sqlite3DbFree($1,$12);
 STACKTOP = sp;return;
}
function _exprListTableUsage($pMaskSet,$pList) {
 $pMaskSet = $pMaskSet|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  $15 = 0;$16 = 0;
 } else {
  $1 = HEAP32[$pList>>2]|0;
  $2 = ($1|0)>(0);
  if ($2) {
   $3 = (($pList) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $10 = 0;$12 = 0;$i$01 = 0;
   while(1) {
    $5 = (($4) + (($i$01*20)|0)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_exprTableUsage($pMaskSet,$6)|0);
    $8 = tempRet0;
    $9 = $7 | $10;
    $11 = $8 | $12;
    $13 = (($i$01) + 1)|0;
    $14 = ($13|0)<($1|0);
    if ($14) {
     $10 = $9;$12 = $11;$i$01 = $13;
    } else {
     $15 = $11;$16 = $9;
     break;
    }
   }
  } else {
   $15 = 0;$16 = 0;
  }
 }
 tempRet0 = $15;
 STACKTOP = sp;return ($16|0);
}
function _getMask($pMaskSet,$iCursor) {
 $pMaskSet = $pMaskSet|0;
 $iCursor = $iCursor|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMaskSet>>2]|0;
 $1 = ($0|0)>(0);
 L1: do {
  if ($1) {
   $i$02 = 0;
   while(1) {
    $4 = ((($pMaskSet) + ($i$02<<2)|0) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==($iCursor|0);
    $3 = (($i$02) + 1)|0;
    if ($6) {
     break;
    }
    $2 = ($3|0)<($0|0);
    if ($2) {
     $i$02 = $3;
    } else {
     $10 = 0;$9 = 0;
     break L1;
    }
   }
   $7 = (_bitshift64Shl(1,0,($i$02|0))|0);
   $8 = tempRet0;
   $10 = $7;$9 = $8;
  } else {
   $10 = 0;$9 = 0;
  }
 } while(0);
 tempRet0 = $9;
 STACKTOP = sp;return ($10|0);
}
function _constructAutomaticIndex($pParse,$pWC,$pSrc,$0,$1,$pLevel) {
 $pParse = $pParse|0;
 $pWC = $pWC|0;
 $pSrc = $pSrc|0;
 $0 = $0|0;
 $1 = $1|0;
 $pLevel = $pLevel|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond33 = 0, $i$014 = 0, $i$14 = 0, $i$21 = 0, $n$0$lcssa = 0, $n$09 = 0, $n$1 = 0, $n$2$lcssa = 0, $n$25 = 0, $n$3 = 0;
 var $n$42 = 0, $n$5 = 0, $nKeyCol$0$lcssa = 0, $nKeyCol$026 = 0, $nKeyCol$1 = 0, $nKeyCol$2$ = 0, $nKeyCol$2$lcssa = 0, $nKeyCol$215 = 0, $nKeyCol$4 = 0, $pTerm$025 = 0, $pTerm$110 = 0, $sentWarning$023 = 0, $sentWarning$1 = 0, $sentWarning$2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $zNotUsed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $zNotUsed = sp + 8|0;
 $2 = (($pParse) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3CodeOnce($pParse)|0);
 $5 = (($pSrc) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pWC) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pWC) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($8*48)|0)|0);
 $12 = (($pLevel) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($8|0)>(0);
 L1: do {
  if ($14) {
   $15 = (($6) + 4|0);
   $16 = (($13) + 44|0);
   $31 = 0;$34 = 0;$nKeyCol$026 = 0;$pTerm$025 = $10;$sentWarning$023 = 0;
   while(1) {
    $17 = (_termCanDriveIndex($pTerm$025,$pSrc,$0,$1)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $187 = $31;$188 = $34;$nKeyCol$1 = $nKeyCol$026;$sentWarning$2 = $sentWarning$023;
    } else {
     $19 = (($pTerm$025) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)>(63);
     if ($21) {
      $30 = 0;$33 = -2147483648;
     } else {
      $22 = (_bitshift64Shl(1,0,($20|0))|0);
      $23 = tempRet0;
      $30 = $22;$33 = $23;
     }
     $24 = ($sentWarning$023<<24>>24)==(0);
     if ($24) {
      $25 = HEAP32[$6>>2]|0;
      $26 = HEAP32[$15>>2]|0;
      $27 = (($26) + (($20*24)|0)|0);
      $28 = HEAP32[$27>>2]|0;
      HEAP32[$vararg_buffer>>2] = $25;
      $vararg_ptr1 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $28;
      _sqlite3_log(284,24008,$vararg_buffer);
      $sentWarning$1 = 1;
     } else {
      $sentWarning$1 = $sentWarning$023;
     }
     $29 = $30 & $31;
     $32 = $33 & $34;
     $35 = ($29|0)==(0);
     $36 = ($32|0)==(0);
     $37 = $35 & $36;
     if ($37) {
      $38 = HEAP32[$pParse>>2]|0;
      $39 = (($nKeyCol$026) + 1)|0;
      $40 = (_whereLoopResize($38,$13,$39)|0);
      $41 = ($40|0)==(0);
      if (!($41)) {
       break;
      }
      $42 = HEAP32[$16>>2]|0;
      $43 = (($42) + ($nKeyCol$026<<2)|0);
      HEAP32[$43>>2] = $pTerm$025;
      $44 = $30 | $31;
      $45 = $33 | $34;
      $187 = $44;$188 = $45;$nKeyCol$1 = $39;$sentWarning$2 = $sentWarning$1;
     } else {
      $187 = $31;$188 = $34;$nKeyCol$1 = $nKeyCol$026;$sentWarning$2 = $sentWarning$1;
     }
    }
    $46 = (($pTerm$025) + 48|0);
    $47 = ($46>>>0)<($11>>>0);
    if ($47) {
     $31 = $187;$34 = $188;$nKeyCol$026 = $nKeyCol$1;$pTerm$025 = $46;$sentWarning$023 = $sentWarning$2;
    } else {
     $60 = $188;$62 = $187;$nKeyCol$0$lcssa = $nKeyCol$1;
     break L1;
    }
   }
   STACKTOP = sp;return;
  } else {
   $60 = 0;$62 = 0;$nKeyCol$0$lcssa = 0;
  }
 } while(0);
 $48 = $nKeyCol$0$lcssa&65535;
 $49 = (($13) + 40|0);
 HEAP16[$49>>1] = $48;
 $50 = (($13) + 24|0);
 HEAP16[$50>>1] = $48;
 $51 = (($13) + 36|0);
 HEAP32[$51>>2] = 16961;
 $52 = (($pSrc) + 56|0);
 $53 = $52;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = $60 | -2147483648;
 $61 = $62 ^ -1;
 $63 = $59 ^ 2147483647;
 $64 = $55 & $61;
 $65 = $58 & $63;
 $66 = (($6) + 38|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $69 = ($67<<16>>16)>(0);
 if ($69) {
  $70 = ($67<<16>>16)<(63);
  $71 = $70 ? $68 : 63;
  $i$014 = 0;$nKeyCol$215 = $nKeyCol$0$lcssa;
  while(1) {
   $72 = (_bitshift64Shl(1,0,($i$014|0))|0);
   $73 = tempRet0;
   $74 = $72 & $64;
   $75 = $73 & $65;
   $76 = ($74|0)!=(0);
   $77 = ($75|0)!=(0);
   $78 = $76 | $77;
   $79 = $78&1;
   $nKeyCol$2$ = (($79) + ($nKeyCol$215))|0;
   $80 = (($i$014) + 1)|0;
   $exitcond33 = ($80|0)==($71|0);
   if ($exitcond33) {
    $nKeyCol$2$lcssa = $nKeyCol$2$;
    break;
   } else {
    $i$014 = $80;$nKeyCol$215 = $nKeyCol$2$;
   }
  }
 } else {
  $nKeyCol$2$lcssa = $nKeyCol$0$lcssa;
 }
 $81 = ($58|0)<(0);
 if ($81) {
  $82 = (($nKeyCol$2$lcssa) + -63)|0;
  $83 = (($82) + ($68))|0;
  $nKeyCol$4 = $83;
 } else {
  $nKeyCol$4 = $nKeyCol$2$lcssa;
 }
 HEAP32[$51>>2] = 16961;
 $84 = HEAP32[$pParse>>2]|0;
 $85 = (($nKeyCol$4) + 1)|0;
 $86 = $85&65535;
 $87 = (_sqlite3AllocateIndexObject($84,$86,0,$zNotUsed)|0);
 $88 = ($87|0)==(0|0);
 if ($88) {
  STACKTOP = sp;return;
 }
 $89 = (($13) + 28|0);
 HEAP32[$89>>2] = $87;
 HEAP32[$87>>2] = 24040;
 $90 = (($87) + 12|0);
 HEAP32[$90>>2] = $6;
 $91 = HEAP32[$9>>2]|0;
 $92 = ($91>>>0)<($11>>>0);
 if ($92) {
  $93 = (($87) + 4|0);
  $94 = (($87) + 32|0);
  $108 = 0;$111 = 0;$n$09 = 0;$pTerm$110 = $91;
  while(1) {
   $99 = (_termCanDriveIndex($pTerm$110,$pSrc,$0,$1)|0);
   $100 = ($99|0)==(0);
   if ($100) {
    $189 = $108;$190 = $111;$n$1 = $n$09;
   } else {
    $101 = (($pTerm$110) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)>(63);
    if ($103) {
     $107 = 0;$110 = -2147483648;
    } else {
     $104 = (_bitshift64Shl(1,0,($102|0))|0);
     $105 = tempRet0;
     $107 = $104;$110 = $105;
    }
    $106 = $107 & $108;
    $109 = $110 & $111;
    $112 = ($106|0)==(0);
    $113 = ($109|0)==(0);
    $114 = $112 & $113;
    if ($114) {
     $115 = HEAP32[$pTerm$110>>2]|0;
     $116 = $107 | $108;
     $117 = $110 | $111;
     $118 = $102&65535;
     $119 = HEAP32[$93>>2]|0;
     $120 = (($119) + ($n$09<<1)|0);
     HEAP16[$120>>1] = $118;
     $121 = (($115) + 12|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (($115) + 16|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_sqlite3BinaryCompareCollSeq($pParse,$122,$124)|0);
     $126 = ($125|0)==(0|0);
     if ($126) {
      $130 = 3592;
     } else {
      $127 = HEAP32[$125>>2]|0;
      $130 = $127;
     }
     $128 = HEAP32[$94>>2]|0;
     $129 = (($128) + ($n$09<<2)|0);
     HEAP32[$129>>2] = $130;
     $131 = (($n$09) + 1)|0;
     $189 = $116;$190 = $117;$n$1 = $131;
    } else {
     $189 = $108;$190 = $111;$n$1 = $n$09;
    }
   }
   $132 = (($pTerm$110) + 48|0);
   $133 = ($132>>>0)<($11>>>0);
   if ($133) {
    $108 = $189;$111 = $190;$n$09 = $n$1;$pTerm$110 = $132;
   } else {
    $n$0$lcssa = $n$1;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 if ($69) {
  $95 = (($87) + 4|0);
  $96 = (($87) + 32|0);
  $97 = ($67<<16>>16)<(63);
  $98 = $97 ? $68 : 63;
  $i$14 = 0;$n$25 = $n$0$lcssa;
  while(1) {
   $134 = (_bitshift64Shl(1,0,($i$14|0))|0);
   $135 = tempRet0;
   $136 = $134 & $64;
   $137 = $135 & $65;
   $138 = ($136|0)==(0);
   $139 = ($137|0)==(0);
   $140 = $138 & $139;
   if ($140) {
    $n$3 = $n$25;
   } else {
    $141 = $i$14&65535;
    $142 = HEAP32[$95>>2]|0;
    $143 = (($142) + ($n$25<<1)|0);
    HEAP16[$143>>1] = $141;
    $144 = HEAP32[$96>>2]|0;
    $145 = (($144) + ($n$25<<2)|0);
    HEAP32[$145>>2] = 3592;
    $146 = (($n$25) + 1)|0;
    $n$3 = $146;
   }
   $147 = (($i$14) + 1)|0;
   $exitcond = ($147|0)==($98|0);
   if ($exitcond) {
    $n$2$lcssa = $n$3;
    break;
   } else {
    $i$14 = $147;$n$25 = $n$3;
   }
  }
 } else {
  $n$2$lcssa = $n$0$lcssa;
 }
 $148 = $52;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)<(0);
 if ($154) {
  $155 = HEAP16[$66>>1]|0;
  $156 = ($155<<16>>16)>(63);
  if ($156) {
   $157 = (($87) + 4|0);
   $158 = (($87) + 32|0);
   $i$21 = 63;$n$42 = $n$2$lcssa;
   while(1) {
    $159 = $i$21&65535;
    $160 = HEAP32[$157>>2]|0;
    $161 = (($160) + ($n$42<<1)|0);
    HEAP16[$161>>1] = $159;
    $162 = HEAP32[$158>>2]|0;
    $163 = (($162) + ($n$42<<2)|0);
    HEAP32[$163>>2] = 3592;
    $164 = (($n$42) + 1)|0;
    $165 = (($i$21) + 1)|0;
    $166 = HEAP16[$66>>1]|0;
    $167 = $166 << 16 >> 16;
    $168 = ($165|0)<($167|0);
    if ($168) {
     $i$21 = $165;$n$42 = $164;
    } else {
     $n$5 = $164;
     break;
    }
   }
  } else {
   $n$5 = $n$2$lcssa;
  }
 } else {
  $n$5 = $n$2$lcssa;
 }
 $169 = (($87) + 4|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($170) + ($n$5<<1)|0);
 HEAP16[$171>>1] = -1;
 $172 = (($87) + 32|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($173) + ($n$5<<2)|0);
 HEAP32[$174>>2] = 3592;
 $175 = (($pParse) + 72|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + 1)|0;
 HEAP32[$175>>2] = $177;
 $178 = (($pLevel) + 8|0);
 HEAP32[$178>>2] = $176;
 (_sqlite3VdbeAddOp2($3,54,$176,$85)|0);
 _sqlite3VdbeSetP4KeyInfo($pParse,$87);
 $179 = (($pLevel) + 4|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (_sqlite3VdbeAddOp1($3,105,$180)|0);
 $182 = (_sqlite3GetTempReg($pParse)|0);
 $183 = HEAP32[$179>>2]|0;
 (_sqlite3GenerateIndexKey($pParse,$87,$183,$182,0,0,0,0)|0);
 $184 = HEAP32[$178>>2]|0;
 (_sqlite3VdbeAddOp2($3,107,$184,$182)|0);
 _sqlite3VdbeChangeP5($3,16);
 $185 = HEAP32[$179>>2]|0;
 $186 = (($181) + 1)|0;
 (_sqlite3VdbeAddOp2($3,9,$185,$186)|0);
 _sqlite3VdbeChangeP5($3,3);
 _sqlite3VdbeJumpHere($3,$181);
 _sqlite3ReleaseTempReg($pParse,$182);
 _sqlite3VdbeJumpHere($3,$4);
 STACKTOP = sp;return;
}
function _explainOneScan($pParse,$pTabList,$pLevel,$iLevel,$iFrom,$wctrlFlags) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pLevel = $pLevel|0;
 $iLevel = $iLevel|0;
 $iFrom = $iFrom|0;
 $wctrlFlags = $wctrlFlags|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer39 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $zMsg$0 = 0, $zMsg$1 = 0, $zMsg$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer39 = sp + 104|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 454|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pLevel) + 36|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($pParse) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$pParse>>2]|0;
 $9 = (($pParse) + 468|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($pLevel) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 8192;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $wctrlFlags&65535;
 $18 = $17 & 64;
 $19 = ($18|0)==(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $14 & 48;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $22 = $14 & 1024;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = (($12) + 24|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==(0);
    if (!($26)) {
     $29 = 23664;
     break;
    }
   }
   $27 = $17 & 3;
   $28 = ($27|0)!=(0);
   $phitmp = $28 ? 23664 : 23672;
   $29 = $phitmp;
  } else {
   $29 = 23664;
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $29;
 $30 = (_sqlite3MPrintf($8,1712,$vararg_buffer)|0);
 $31 = ((($pTabList) + (($5*72)|0)|0) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $38 = ((($pTabList) + (($5*72)|0)|0) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $30;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $39;
  $40 = (_sqlite3MAppendf($8,$30,23696,$vararg_buffer5)|0);
  $zMsg$0 = $40;
 } else {
  $34 = ((($pTabList) + (($5*72)|0)|0) + 46|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  HEAP32[$vararg_buffer1>>2] = $30;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $36;
  $37 = (_sqlite3MAppendf($8,$30,23680,$vararg_buffer1)|0);
  $zMsg$0 = $37;
 }
 $41 = ((($pTabList) + (($5*72)|0)|0) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $zMsg$1 = $zMsg$0;
 } else {
  HEAP32[$vararg_buffer9>>2] = $zMsg$0;
  $vararg_ptr12 = (($vararg_buffer9) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $42;
  $44 = (_sqlite3MAppendf($8,$zMsg$0,23712,$vararg_buffer9)|0);
  $zMsg$1 = $44;
 }
 $45 = $14 & 1280;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = (($12) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   label = 16;
  } else {
   $50 = ((($pTabList) + (($5*72)|0)|0) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $$idx = (($51) + 4|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $52 = (_explainIndexRange($8,$12,$$idx$val)|0);
   $53 = $14 & 16384;
   $54 = ($53|0)!=(0);
   $55 = $54 ? 23728 : 23768;
   $56 = $14 & 64;
   $57 = ($56|0)!=(0);
   $58 = $57 ? 23792 : 1728;
   $59 = HEAP32[$47>>2]|0;
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $zMsg$1;
   $vararg_ptr16 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $58;
   $vararg_ptr17 = (($vararg_buffer13) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $60;
   $vararg_ptr18 = (($vararg_buffer13) + 12|0);
   HEAP32[$vararg_ptr18>>2] = $52;
   $61 = (_sqlite3MAppendf($8,$zMsg$1,$55,$vararg_buffer13)|0);
   _sqlite3DbFree($8,$52);
   $zMsg$2 = $61;
  }
 } else {
  label = 16;
 }
 do {
  if ((label|0) == 16) {
   $62 = $14 & 256;
   $63 = ($62|0)==(0);
   $64 = $14 & 15;
   $65 = ($64|0)==(0);
   $or$cond = $63 | $65;
   if ($or$cond) {
    $78 = $14 & 1024;
    $79 = ($78|0)==(0);
    if ($79) {
     $zMsg$2 = $zMsg$1;
     break;
    }
    $80 = (($12) + 24|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($12) + 32|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$vararg_buffer34>>2] = $zMsg$1;
    $vararg_ptr37 = (($vararg_buffer34) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $81;
    $vararg_ptr38 = (($vararg_buffer34) + 8|0);
    HEAP32[$vararg_ptr38>>2] = $83;
    $84 = (_sqlite3MAppendf($8,$zMsg$1,23920,$vararg_buffer34)|0);
    $zMsg$2 = $84;
    break;
   }
   HEAP32[$vararg_buffer19>>2] = $zMsg$1;
   $66 = (_sqlite3MAppendf($8,$zMsg$1,23808,$vararg_buffer19)|0);
   $67 = $14 & 5;
   $68 = ($67|0)==(0);
   if (!($68)) {
    HEAP32[$vararg_buffer22>>2] = $66;
    $69 = (_sqlite3MAppendf($8,$66,23840,$vararg_buffer22)|0);
    $zMsg$2 = $69;
    break;
   }
   $70 = ($20|0)==(48);
   if ($70) {
    HEAP32[$vararg_buffer25>>2] = $66;
    $71 = (_sqlite3MAppendf($8,$66,23856,$vararg_buffer25)|0);
    $zMsg$2 = $71;
    break;
   }
   $72 = $14 & 32;
   $73 = ($72|0)==(0);
   if (!($73)) {
    HEAP32[$vararg_buffer28>>2] = $66;
    $74 = (_sqlite3MAppendf($8,$66,23888,$vararg_buffer28)|0);
    $zMsg$2 = $74;
    break;
   }
   $75 = $14 & 16;
   $76 = ($75|0)==(0);
   if ($76) {
    $zMsg$2 = $66;
   } else {
    HEAP32[$vararg_buffer31>>2] = $66;
    $77 = (_sqlite3MAppendf($8,$66,23904,$vararg_buffer31)|0);
    $zMsg$2 = $77;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer39>>2] = $zMsg$2;
 $85 = (_sqlite3MAppendf($8,$zMsg$2,1712,$vararg_buffer39)|0);
 (_sqlite3VdbeAddOp4($7,156,$10,$iLevel,$iFrom,$85,-1)|0);
 STACKTOP = sp;return;
}
function _codeOneLoopStart($pWInfo,$iLevel,$0,$1) {
 $pWInfo = $pWInfo|0;
 $iLevel = $iLevel|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$6 = 0, $$7 = 0, $$bSeekPastNull$0 = 0, $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx11 = 0, $$idx11$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13$val = 0, $$idx14$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9 = 0, $$idx9$val = 0;
 var $$lcssa = 0, $$op = 0, $$op73 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre58 = 0, $$pre59 = 0, $$pre70 = 0, $$pre71 = 0, $$sum = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addrNotFound$0$lcssa = 0, $addrNotFound$051 = 0, $addrNotFound$1 = 0, $bSeekPastNull$0 = 0, $bSeekPastNull$1 = 0, $bSeekPastNull$2 = 0, $bStopAtNull$0 = 0, $cEndAff = 0, $endEq$0 = 0, $exitcond = 0;
 var $iTerm$035 = 0, $ii$028 = 0, $j$052 = 0, $j$148 = 0, $j$2 = 0, $j$3 = 0, $j$443 = 0, $j$522 = 0, $j$619 = 0, $j$717 = 0, $k$040 = 0, $memEndValue$0 = 0, $nConstraint2$0 = 0, $nConstraint2$1 = 0, $nExtraReg$0 = 0, $nExtraReg$1 = 0, $nExtraReg$2 = 0, $or$cond = 0, $or$cond3 = 0, $pAndExpr$034 = 0;
 var $pAndExpr$1 = 0, $pAndExpr$2 = 0, $pCov$0$c = 0, $pCov$026 = 0, $pCov$1 = 0, $pCov$2 = 0, $pEnd$0 = 0, $pEnd$0$pStart$0 = 0, $pOrExpr$0 = 0, $pOrTab$0 = 0, $pRangeEnd$0 = 0, $pRangeEnd$1 = 0, $pRangeStart$0 = 0, $pRangeStart$1 = 0, $pStart$0 = 0, $pStart$0$pEnd$0 = 0, $pTerm$021 = 0, $pTerm$118 = 0, $pTerm$216 = 0, $rTemp = 0;
 var $regRowid$0 = 0, $regRowset$0 = 0, $startEq$0 = 0, $start_constraints$0 = 0, $testOp$0 = 0, $testOp$1 = 0, $tmp = 0, $untestedTerms$0$ = 0, $untestedTerms$0$lcssa75 = 0, $untestedTerms$027 = 0, $untestedTerms$2 = 0, $zStartAff = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rTemp = sp + 4|0;
 $zStartAff = sp;
 $cEndAff = sp + 8|0;
 $2 = HEAP32[$pWInfo>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pWInfo) + 328|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($pWInfo) + (($iLevel*72)|0)|0) + 736|0);
 $8 = ((($pWInfo) + (($iLevel*72)|0)|0) + 792|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($pWInfo) + (($iLevel*72)|0)|0) + 772|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($pWInfo) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14) + (($12*72)|0)|0) + 8|0);
 $16 = ((($14) + (($12*72)|0)|0) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($pWInfo) + 68|0);
 $19 = (_getMask($18,$17)|0);
 $20 = tempRet0;
 $21 = $19 ^ -1;
 $22 = $20 ^ -1;
 $23 = $21 & $0;
 $24 = $22 & $1;
 $25 = ((($pWInfo) + (($iLevel*72)|0)|0) + 800|0);
 $26 = $25;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $24;
 $30 = (($pWInfo) + 24|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_bitshift64Lshr(($33|0),($36|0),($iLevel|0))|0);
 $38 = tempRet0;
 $39 = $37 & 1;
 $40 = (($9) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 64;
 $43 = ($42|0)==(0);
 if ($43) {
  $637 = 0;
 } else {
  $44 = (($pWInfo) + 34|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 32;
  $47 = ($46<<16>>16)==(0);
  $637 = $47;
 }
 $$idx15 = (($4) + 24|0);
 $$idx15$val = HEAP32[$$idx15>>2]|0;
 $48 = (_sqlite3VdbeMakeLabel($$idx15$val)|0);
 $49 = ((($pWInfo) + (($iLevel*72)|0)|0) + 752|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($pWInfo) + (($iLevel*72)|0)|0) + 748|0);
 HEAP32[$50>>2] = $48;
 $$idx14$val = HEAP32[$$idx15>>2]|0;
 $51 = (_sqlite3VdbeMakeLabel($$idx14$val)|0);
 $52 = ((($pWInfo) + (($iLevel*72)|0)|0) + 760|0);
 HEAP32[$52>>2] = $51;
 $53 = HEAP8[$10>>0]|0;
 $54 = ($53<<24>>24)==(0);
 if (!($54)) {
  $55 = ((($14) + (($12*72)|0)|0) + 44|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 & 8;
  $58 = ($57<<24>>24)==(0);
  if (!($58)) {
   $59 = (($2) + 76|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   HEAP32[$7>>2] = $61;
   (_sqlite3VdbeAddOp2($4,25,0,$61)|0);
  }
 }
 $62 = ((($14) + (($12*72)|0)|0) + 45|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 & 4;
 $65 = ($64<<24>>24)==(0);
 do {
  if ($65) {
   $73 = HEAP32[$40>>2]|0;
   $74 = $73 & 1024;
   $75 = ($74|0)==(0);
   if (!($75)) {
    $76 = (($9) + 40|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77&65535;
    _sqlite3ExprCachePush($2);
    $79 = (($78) + 2)|0;
    $80 = (_sqlite3GetTempRange($2,$79)|0);
    $81 = HEAP32[$50>>2]|0;
    $82 = ($77<<16>>16)==(0);
    if ($82) {
     $addrNotFound$0$lcssa = $81;
    } else {
     $83 = (($80) + 2)|0;
     $84 = (($9) + 44|0);
     $addrNotFound$051 = $81;$j$052 = 0;
     while(1) {
      $85 = (($83) + ($j$052))|0;
      $86 = HEAP32[$84>>2]|0;
      $87 = (($86) + ($j$052<<2)|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(0|0);
      do {
       if ($89) {
        $addrNotFound$1 = $addrNotFound$051;
       } else {
        $90 = (($88) + 18|0);
        $91 = HEAP16[$90>>1]|0;
        $92 = $91 & 1;
        $93 = ($92<<16>>16)==(0);
        if ($93) {
         $95 = HEAP32[$88>>2]|0;
         $96 = (($95) + 16|0);
         $97 = HEAP32[$96>>2]|0;
         _sqlite3ExprCode($2,$97,$85);
         $addrNotFound$1 = $addrNotFound$051;
         break;
        } else {
         (_codeEqualityTerm($2,$88,$7,$j$052,$39,$85)|0);
         $94 = HEAP32[$49>>2]|0;
         $addrNotFound$1 = $94;
         break;
        }
       }
      } while(0);
      $98 = (($j$052) + 1)|0;
      $99 = ($98|0)<($78|0);
      if ($99) {
       $addrNotFound$051 = $addrNotFound$1;$j$052 = $98;
      } else {
       $addrNotFound$0$lcssa = $addrNotFound$1;
       break;
      }
     }
    }
    $100 = (($9) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    (_sqlite3VdbeAddOp2($4,25,$101,$80)|0);
    $102 = (($80) + 1)|0;
    (_sqlite3VdbeAddOp2($4,25,$78,$102)|0);
    $103 = (($9) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($9) + 28|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = ($106<<24>>24)!=(0);
    $108 = $107 ? -11 : -2;
    (_sqlite3VdbeAddOp4($4,14,$17,$addrNotFound$0$lcssa,$80,$104,$108)|0);
    HEAP8[$105>>0] = 0;
    if (!($82)) {
     $109 = (($9) + 30|0);
     $110 = (($9) + 44|0);
     $111 = ($77&65535)>(1);
     $$op = (0 - ($78))|0;
     $112 = $111 ? $$op : -1;
     $113 = ($112>>>0)>(4294967280);
     $$op73 = (0 - ($112))|0;
     $114 = $113 ? $$op73 : 16;
     $j$148 = 0;
     while(1) {
      $115 = HEAP16[$109>>1]|0;
      $116 = $115&65535;
      $117 = 1 << $j$148;
      $118 = $116 & $117;
      $119 = ($118|0)==(0);
      if (!($119)) {
       $120 = HEAP32[$110>>2]|0;
       $121 = (($120) + ($j$148<<2)|0);
       $122 = HEAP32[$121>>2]|0;
       _disableTerm($7,$122);
      }
      $123 = (($j$148) + 1)|0;
      $exitcond = ($123|0)==($114|0);
      if ($exitcond) {
       break;
      } else {
       $j$148 = $123;
      }
     }
    }
    $124 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
    HEAP8[$124>>0] = -106;
    $125 = ((($pWInfo) + (($iLevel*72)|0)|0) + 776|0);
    HEAP32[$125>>2] = $17;
    $$idx12 = (($4) + 32|0);
    $$idx12$val = HEAP32[$$idx12>>2]|0;
    $126 = (_sqlite3VdbeCurrentAddr($$idx12$val)|0);
    $127 = ((($pWInfo) + (($iLevel*72)|0)|0) + 780|0);
    HEAP32[$127>>2] = $126;
    _sqlite3ReleaseTempRange($2,$80,$79);
    _sqlite3ExprCachePop($2);
    break;
   }
   $128 = $73 & 256;
   $129 = ($128|0)==(0);
   $130 = $73 & 5;
   $131 = ($130|0)==(0);
   $or$cond3 = $129 | $131;
   if (!($or$cond3)) {
    $132 = (($9) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = HEAP32[$133>>2]|0;
    $135 = (($2) + 76|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + 1)|0;
    HEAP32[$135>>2] = $137;
    $138 = (_codeEqualityTerm($2,$134,$7,0,$39,$137)|0);
    $139 = ($138|0)==($137|0);
    if (!($139)) {
     _sqlite3ReleaseTempReg($2,$137);
    }
    $140 = HEAP32[$49>>2]|0;
    (_sqlite3VdbeAddOp2($4,38,$138,$140)|0);
    (_sqlite3VdbeAddOp3($4,67,$17,$140,$138)|0);
    _sqlite3ExprCacheAffinityChange($2,$138,1);
    _sqlite3ExprCacheStore($2,$17,-1,$138);
    $141 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
    HEAP8[$141>>0] = -101;
    break;
   }
   $142 = $73 & 258;
   $143 = ($142|0)==(258);
   if ($143) {
    $144 = $73 & 32;
    $145 = ($144|0)==(0);
    if ($145) {
     $j$2 = 0;$pStart$0 = 0;
    } else {
     $146 = (($9) + 44|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = HEAP32[$147>>2]|0;
     $j$2 = 1;$pStart$0 = $148;
    }
    $149 = $73 & 16;
    $150 = ($149|0)==(0);
    if ($150) {
     $pEnd$0 = 0;
    } else {
     $151 = (($9) + 44|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($152) + ($j$2<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $pEnd$0 = $154;
    }
    $155 = ($39|0)!=(0);
    $pStart$0$pEnd$0 = $155 ? $pStart$0 : $pEnd$0;
    $pEnd$0$pStart$0 = $155 ? $pEnd$0 : $pStart$0;
    $156 = ($pEnd$0$pStart$0|0)==(0|0);
    if ($156) {
     $168 = $155 ? 102 : 105;
     (_sqlite3VdbeAddOp2($4,$168,$17,$48)|0);
    } else {
     $157 = HEAP32[$pEnd$0$pStart$0>>2]|0;
     $158 = (($157) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (_sqlite3ExprCodeTemp($2,$159,$rTemp)|0);
     $161 = HEAP8[$157>>0]|0;
     $162 = $161&255;
     $163 = (($162) + -80)|0;
     $164 = (23624 + ($163)|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     (_sqlite3VdbeAddOp3($4,$166,$17,$48,$160)|0);
     _sqlite3ExprCacheAffinityChange($2,$160,1);
     $167 = HEAP32[$rTemp>>2]|0;
     _sqlite3ReleaseTempReg($2,$167);
     _disableTerm($7,$pEnd$0$pStart$0);
    }
    $169 = ($pStart$0$pEnd$0|0)==(0|0);
    if ($169) {
     $memEndValue$0 = 0;$testOp$1 = 155;
    } else {
     $170 = HEAP32[$pStart$0$pEnd$0>>2]|0;
     $171 = (($2) + 76|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + 1)|0;
     HEAP32[$171>>2] = $173;
     $174 = (($170) + 16|0);
     $175 = HEAP32[$174>>2]|0;
     _sqlite3ExprCode($2,$175,$173);
     $176 = HEAP8[$170>>0]|0;
     if ((($176<<24>>24) == 80) | (($176<<24>>24) == 82)) {
      $177 = $39 << 1;
      $178 = $177 ^ 83;
      $testOp$0 = $178;
     } else {
      $179 = $39 << 1;
      $180 = $179 | 80;
      $testOp$0 = $180;
     }
     _disableTerm($7,$pStart$0$pEnd$0);
     $memEndValue$0 = $173;$testOp$1 = $testOp$0;
    }
    $$idx11 = (($4) + 32|0);
    $$idx11$val = HEAP32[$$idx11>>2]|0;
    $181 = (_sqlite3VdbeCurrentAddr($$idx11$val)|0);
    $182 = $39 ^ 9;
    $183 = $182&255;
    $184 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
    HEAP8[$184>>0] = $183;
    $185 = ((($pWInfo) + (($iLevel*72)|0)|0) + 776|0);
    HEAP32[$185>>2] = $17;
    $186 = ((($pWInfo) + (($iLevel*72)|0)|0) + 780|0);
    HEAP32[$186>>2] = $181;
    $187 = ($testOp$1|0)==(155);
    if ($187) {
     break;
    }
    $188 = (($2) + 76|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + 1)|0;
    HEAP32[$188>>2] = $190;
    (_sqlite3VdbeAddOp2($4,100,$17,$190)|0);
    _sqlite3ExprCacheStore($2,$17,-1,$190);
    (_sqlite3VdbeAddOp3($4,$testOp$1,$memEndValue$0,$48,$190)|0);
    _sqlite3VdbeChangeP5($4,107);
    break;
   }
   $191 = $73 & 512;
   $192 = ($191|0)==(0);
   if ($192) {
    $367 = $73 & 8192;
    $368 = ($367|0)==(0);
    if ($368) {
     $503 = $63 & 8;
     $504 = ($503<<24>>24)==(0);
     if ($504) {
      $506 = (23648 + ($39)|0);
      $507 = HEAP8[$506>>0]|0;
      $508 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
      HEAP8[$508>>0] = $507;
      $509 = ((($pWInfo) + (($iLevel*72)|0)|0) + 776|0);
      HEAP32[$509>>2] = $17;
      $510 = (23656 + ($39)|0);
      $511 = HEAP8[$510>>0]|0;
      $512 = $511&255;
      $513 = (_sqlite3VdbeAddOp2($4,$512,$17,$48)|0);
      $514 = (($513) + 1)|0;
      $515 = ((($pWInfo) + (($iLevel*72)|0)|0) + 780|0);
      HEAP32[$515>>2] = $514;
      $516 = ((($pWInfo) + (($iLevel*72)|0)|0) + 775|0);
      HEAP8[$516>>0] = 1;
      break;
     } else {
      $505 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
      HEAP8[$505>>0] = -101;
      break;
     }
    }
    $369 = (($2) + 72|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = (($370) + 1)|0;
    HEAP32[$369>>2] = $371;
    $372 = (($2) + 76|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = (($373) + 1)|0;
    HEAP32[$372>>2] = $374;
    $$idx13$val = HEAP32[$$idx15>>2]|0;
    $375 = (_sqlite3VdbeMakeLabel($$idx13$val)|0);
    $376 = (($9) + 44|0);
    $377 = HEAP32[$376>>2]|0;
    $378 = HEAP32[$377>>2]|0;
    $379 = (($378) + 12|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
    HEAP8[$381>>0] = 18;
    $382 = ((($pWInfo) + (($iLevel*72)|0)|0) + 776|0);
    HEAP32[$382>>2] = $374;
    $383 = (($pWInfo) + 40|0);
    $384 = HEAP8[$383>>0]|0;
    $385 = ($384&255)>(1);
    if ($385) {
     $386 = $384&255;
     $387 = (($386) - ($iLevel))|0;
     $388 = (($387) + -1)|0;
     $389 = ($388*72)|0;
     $390 = (($389) + 80)|0;
     $391 = (_sqlite3DbMallocRaw($6,$390)|0);
     $392 = ($391|0)==(0|0);
     if ($392) {
      $635 = $1;$636 = $0;
      tempRet0 = $635;
      STACKTOP = sp;return ($636|0);
     }
     $393 = $387 & 255;
     $394 = (($391) + 4|0);
     HEAP32[$394>>2] = $393;
     HEAP32[$391>>2] = $393;
     $395 = (($391) + 8|0);
     dest=$395+0|0; src=$15+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $396 = HEAP32[$13>>2]|0;
     $397 = ($387|0)<(2);
     if ($397) {
      $pOrTab$0 = $391;
     } else {
      $k$040 = 1;
      while(1) {
       $398 = (($395) + (($k$040*72)|0)|0);
       $$sum = (($k$040) + ($iLevel))|0;
       $399 = ((($pWInfo) + (($$sum*72)|0)|0) + 772|0);
       $400 = HEAP8[$399>>0]|0;
       $401 = $400&255;
       $402 = ((($396) + (($401*72)|0)|0) + 8|0);
       dest=$398+0|0; src=$402+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $403 = (($k$040) + 1)|0;
       $404 = ($k$040|0)<($388|0);
       if ($404) {
        $k$040 = $403;
       } else {
        $pOrTab$0 = $391;
        break;
       }
      }
     }
    } else {
     $405 = HEAP32[$13>>2]|0;
     $pOrTab$0 = $405;
    }
    $406 = (($pWInfo) + 34|0);
    $407 = HEAP16[$406>>1]|0;
    $408 = $407 & 8;
    $409 = ($408<<16>>16)==(0);
    if ($409) {
     $410 = HEAP32[$372>>2]|0;
     $411 = (($410) + 1)|0;
     $412 = (($410) + 2)|0;
     HEAP32[$372>>2] = $412;
     (_sqlite3VdbeAddOp2($4,28,0,$411)|0);
     $regRowid$0 = $412;$regRowset$0 = $411;
    } else {
     $regRowid$0 = 0;$regRowset$0 = 0;
    }
    $413 = (_sqlite3VdbeAddOp2($4,25,0,$374)|0);
    $414 = (($pWInfo) + 340|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = ($415|0)>(1);
    if ($416) {
     $417 = (($pWInfo) + 348|0);
     $638 = $415;$iTerm$035 = 0;$pAndExpr$034 = 0;
     while(1) {
      $418 = HEAP32[$417>>2]|0;
      $419 = (($418) + (($iTerm$035*48)|0)|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = ($419|0)==($378|0);
      if ($421) {
       $438 = $638;$pAndExpr$1 = $pAndExpr$034;
      } else {
       $422 = (($420) + 4|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = $423 & 1;
       $425 = ($424|0)==(0);
       if ($425) {
        $426 = ((($418) + (($iTerm$035*48)|0)|0) + 20|0);
        $427 = HEAP8[$426>>0]|0;
        $428 = $427 & 18;
        $429 = ($428<<24>>24)==(0);
        if ($429) {
         $430 = ((($418) + (($iTerm$035*48)|0)|0) + 18|0);
         $431 = HEAP16[$430>>1]|0;
         $432 = $431 & 4095;
         $433 = ($432<<16>>16)==(0);
         if ($433) {
          $438 = $638;$pAndExpr$1 = $pAndExpr$034;
         } else {
          $434 = (_sqlite3ExprDup($6,$420,0)|0);
          $435 = (_sqlite3ExprAnd($6,$pAndExpr$034,$434)|0);
          $$pre = HEAP32[$414>>2]|0;
          $438 = $$pre;$pAndExpr$1 = $435;
         }
        } else {
         $438 = $638;$pAndExpr$1 = $pAndExpr$034;
        }
       } else {
        $438 = $638;$pAndExpr$1 = $pAndExpr$034;
       }
      }
      $436 = (($iTerm$035) + 1)|0;
      $437 = ($436|0)<($438|0);
      if ($437) {
       $638 = $438;$iTerm$035 = $436;$pAndExpr$034 = $pAndExpr$1;
      } else {
       break;
      }
     }
     $439 = ($pAndExpr$1|0)==(0|0);
     if ($439) {
      $pAndExpr$2 = 0;
     } else {
      $440 = (_sqlite3PExpr($2,72,0,$pAndExpr$1,0)|0);
      $pAndExpr$2 = $440;
     }
    } else {
     $pAndExpr$2 = 0;
    }
    $441 = (($380) + 12|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = ($442|0)>(0);
    if ($443) {
     $445 = (($380) + 20|0);
     $446 = ($pAndExpr$2|0)==(0|0);
     $447 = ((($14) + (($12*72)|0)|0) + 24|0);
     $$idx9 = (($4) + 32|0);
     $448 = (($pAndExpr$2) + 12|0);
     $ii$028 = 0;$pCov$026 = 0;$untestedTerms$027 = 0;
     while(1) {
      $449 = HEAP32[$445>>2]|0;
      $450 = ((($449) + (($ii$028*48)|0)|0) + 8|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = ($451|0)==($17|0);
      if ($452) {
       label = 121;
      } else {
       $453 = ((($449) + (($ii$028*48)|0)|0) + 18|0);
       $454 = HEAP16[$453>>1]|0;
       $455 = $454 & 512;
       $456 = ($455<<16>>16)==(0);
       if ($456) {
        $pCov$2 = $pCov$026;$untestedTerms$2 = $untestedTerms$027;
       } else {
        label = 121;
       }
      }
      if ((label|0) == 121) {
       label = 0;
       $457 = (($449) + (($ii$028*48)|0)|0);
       $458 = HEAP32[$457>>2]|0;
       do {
        if ($446) {
         $pOrExpr$0 = $458;
        } else {
         $459 = (($458) + 4|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = $460 & 1;
         $462 = ($461|0)==(0);
         if (!($462)) {
          $pOrExpr$0 = $458;
          break;
         }
         HEAP32[$448>>2] = $458;
         $pOrExpr$0 = $pAndExpr$2;
        }
       } while(0);
       $463 = (_sqlite3WhereBegin($2,$pOrTab$0,$pOrExpr$0,0,0,240,$370)|0);
       $464 = ($463|0)==(0|0);
       if ($464) {
        $pCov$2 = $pCov$026;$untestedTerms$2 = $untestedTerms$027;
       } else {
        $465 = (($463) + 736|0);
        $466 = HEAP8[$10>>0]|0;
        $467 = $466&255;
        _explainOneScan($2,$pOrTab$0,$465,$iLevel,$467,0);
        $468 = HEAP16[$406>>1]|0;
        $469 = $468 & 8;
        $470 = ($469<<16>>16)==(0);
        if ($470) {
         $471 = HEAP32[$441>>2]|0;
         $472 = (($471) + -1)|0;
         $473 = ($ii$028|0)==($472|0);
         $474 = $473 ? -1 : $ii$028;
         $475 = HEAP32[$447>>2]|0;
         $476 = (_sqlite3ExprCodeGetColumn($2,$475,-1,$17,$regRowid$0,0)|0);
         $$idx9$val = HEAP32[$$idx9>>2]|0;
         $477 = (_sqlite3VdbeCurrentAddr($$idx9$val)|0);
         $478 = (($477) + 2)|0;
         (_sqlite3VdbeAddOp4Int($4,126,$regRowset$0,$478,$476,$474)|0);
        }
        (_sqlite3VdbeAddOp2($4,17,$374,$375)|0);
        $479 = (($463) + 38|0);
        $480 = HEAP8[$479>>0]|0;
        $481 = ($480<<24>>24)==(0);
        $untestedTerms$0$ = $481 ? $untestedTerms$027 : 1;
        $482 = (($463) + 792|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (($483) + 36|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = $485 & 512;
        $487 = ($486|0)==(0);
        do {
         if ($487) {
          $pCov$1 = 0;
         } else {
          $488 = ($ii$028|0)==(0);
          $$phi$trans$insert = (($483) + 28|0);
          $$pre70 = HEAP32[$$phi$trans$insert>>2]|0;
          if ($488) {
           $639 = $$pre70;
          } else {
           $489 = ($$pre70|0)==($pCov$026|0);
           if ($489) {
            $639 = $pCov$026;
           } else {
            $pCov$1 = 0;
            break;
           }
          }
          $pCov$1 = $639;
         }
        } while(0);
        _sqlite3WhereEnd($463);
        $pCov$2 = $pCov$1;$untestedTerms$2 = $untestedTerms$0$;
       }
      }
      $490 = (($ii$028) + 1)|0;
      $491 = HEAP32[$441>>2]|0;
      $492 = ($490|0)<($491|0);
      if ($492) {
       $ii$028 = $490;$pCov$026 = $pCov$2;$untestedTerms$027 = $untestedTerms$2;
      } else {
       break;
      }
     }
     $493 = ((($pWInfo) + (($iLevel*72)|0)|0) + 784|0);
     $pCov$0$c = $pCov$2;
     HEAP32[$493>>2] = $pCov$0$c;
     $494 = ($pCov$2|0)==(0|0);
     if ($494) {
      $untestedTerms$0$lcssa75 = $untestedTerms$2;
     } else {
      $495 = ((($pWInfo) + (($iLevel*72)|0)|0) + 744|0);
      HEAP32[$495>>2] = $370;
      $untestedTerms$0$lcssa75 = $untestedTerms$2;
     }
    } else {
     $444 = ((($pWInfo) + (($iLevel*72)|0)|0) + 784|0);
     HEAP32[$444>>2] = 0;
     $untestedTerms$0$lcssa75 = 0;
    }
    $496 = ($pAndExpr$2|0)==(0|0);
    if (!($496)) {
     $497 = (($pAndExpr$2) + 12|0);
     HEAP32[$497>>2] = 0;
     _sqlite3ExprDelete($6,$pAndExpr$2);
    }
    $$idx8 = (($4) + 32|0);
    $$idx8$val = HEAP32[$$idx8>>2]|0;
    $498 = (_sqlite3VdbeCurrentAddr($$idx8$val)|0);
    _sqlite3VdbeChangeP1($4,$413,$498);
    $499 = HEAP32[$50>>2]|0;
    (_sqlite3VdbeAddOp2($4,16,0,$499)|0);
    _sqlite3VdbeResolveLabel($4,$375);
    $500 = HEAP8[$383>>0]|0;
    $501 = ($500&255)>(1);
    if ($501) {
     _sqlite3DbFree($6,$pOrTab$0);
    }
    $502 = ($untestedTerms$0$lcssa75|0)==(0);
    if (!($502)) {
     break;
    }
    _disableTerm($7,$378);
    break;
   }
   $193 = (($9) + 24|0);
   $194 = HEAP16[$193>>1]|0;
   HEAP8[$cEndAff>>0] = 0;
   $195 = (($9) + 28|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($pWInfo) + (($iLevel*72)|0)|0) + 744|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($pWInfo) + 34|0);
   $200 = HEAP16[$199>>1]|0;
   $201 = $200 & 1;
   $202 = ($201<<16>>16)==(0);
   if ($202) {
    $bSeekPastNull$0 = 0;$nExtraReg$0 = 0;
   } else {
    $203 = (($pWInfo) + 36|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    if ($205) {
     $bSeekPastNull$0 = 0;$nExtraReg$0 = 0;
    } else {
     $206 = (($196) + 50|0);
     $207 = HEAP16[$206>>1]|0;
     $208 = ($207&65535)>($194&65535);
     $$ = $208&1;
     $$6 = $208&1;
     $bSeekPastNull$0 = $$;$nExtraReg$0 = $$6;
    }
   }
   $209 = $194&65535;
   $210 = $73 & 32;
   $211 = ($210|0)==(0);
   if ($211) {
    $j$3 = $209;$nExtraReg$1 = $nExtraReg$0;$pRangeStart$0 = 0;
   } else {
    $212 = (($209) + 1)|0;
    $213 = (($9) + 44|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + ($209<<2)|0);
    $216 = HEAP32[$215>>2]|0;
    $j$3 = $212;$nExtraReg$1 = 1;$pRangeStart$0 = $216;
   }
   $217 = $73 & 16;
   $218 = ($217|0)==(0);
   if ($218) {
    $bSeekPastNull$1 = $bSeekPastNull$0;$nExtraReg$2 = $nExtraReg$1;$pRangeEnd$0 = 0;
   } else {
    $219 = (($9) + 44|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (($220) + ($j$3<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ($pRangeStart$0|0)==(0|0);
    if ($223) {
     $224 = (($196) + 4|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + ($209<<1)|0);
     $227 = HEAP16[$226>>1]|0;
     $228 = ($227<<16>>16)>(-1);
     if ($228) {
      $229 = $227 << 16 >> 16;
      $230 = (($196) + 12|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = (($231) + 4|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = ((($233) + (($229*24)|0)|0) + 20|0);
      $235 = HEAP8[$234>>0]|0;
      $236 = ($235<<24>>24)==(0);
      $$bSeekPastNull$0 = $236 ? 1 : $bSeekPastNull$0;
      $bSeekPastNull$1 = $$bSeekPastNull$0;$nExtraReg$2 = 1;$pRangeEnd$0 = $222;
     } else {
      $bSeekPastNull$1 = $bSeekPastNull$0;$nExtraReg$2 = 1;$pRangeEnd$0 = $222;
     }
    } else {
     $bSeekPastNull$1 = $bSeekPastNull$0;$nExtraReg$2 = 1;$pRangeEnd$0 = $222;
    }
   }
   $237 = (_codeAllEqualityTerms($2,$7,$39,$nExtraReg$2,$zStartAff)|0);
   $238 = HEAP32[$zStartAff>>2]|0;
   $239 = ($238|0)==(0|0);
   if (!($239)) {
    $240 = (($238) + ($209)|0);
    $241 = HEAP8[$240>>0]|0;
    HEAP8[$cEndAff>>0] = $241;
   }
   $242 = HEAP32[$49>>2]|0;
   $243 = (($196) + 50|0);
   $244 = HEAP16[$243>>1]|0;
   $245 = ($194&65535)<($244&65535);
   if ($245) {
    $246 = (($196) + 28|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($209)|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = ($249<<24>>24)==(0);
    $251 = $37 & 1;
    $252 = ($251|0)!=(0);
    $253 = (0)!=(0);
    $254 = $252 | $253;
    $tmp = $250 ^ $254;
    if ($tmp) {
     label = 55;
    } else {
     label = 56;
    }
   } else {
    label = 55;
   }
   if ((label|0) == 55) {
    $255 = ($39|0)!=(0);
    $256 = ($244<<16>>16)==($194<<16>>16);
    $or$cond = $255 & $256;
    if ($or$cond) {
     label = 56;
    } else {
     $bSeekPastNull$2 = $bSeekPastNull$1;$bStopAtNull$0 = 0;$pRangeEnd$1 = $pRangeEnd$0;$pRangeStart$1 = $pRangeStart$0;
    }
   }
   if ((label|0) == 56) {
    $bSeekPastNull$2 = 0;$bStopAtNull$0 = $bSeekPastNull$1;$pRangeEnd$1 = $pRangeStart$0;$pRangeStart$1 = $pRangeEnd$0;
   }
   $257 = ($pRangeStart$1|0)!=(0|0);
   if ($257) {
    $258 = (($pRangeStart$1) + 18|0);
    $259 = HEAP16[$258>>1]|0;
    $260 = $259 & 40;
    $261 = ($260<<16>>16)!=(0);
    $263 = $261;
   } else {
    $263 = 1;
   }
   $262 = $263&1;
   $264 = ($pRangeEnd$1|0)!=(0|0);
   if ($264) {
    $265 = (($pRangeEnd$1) + 18|0);
    $266 = HEAP16[$265>>1]|0;
    $267 = $266 & 40;
    $268 = ($267<<16>>16)!=(0);
    $270 = $268;
   } else {
    $270 = 1;
   }
   $269 = $270&1;
   $271 = ($194<<16>>16)!=(0);
   $$7 = $257 | $271;
   $272 = $$7&1;
   if ($257) {
    $273 = HEAP32[$pRangeStart$1>>2]|0;
    $274 = (($273) + 16|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($237) + ($209))|0;
    _sqlite3ExprCode($2,$275,$276);
    $277 = (_sqlite3ExprCanBeNull($275)|0);
    $278 = ($277|0)==(0);
    if (!($278)) {
     (_sqlite3VdbeAddOp2($4,76,$276,$242)|0);
    }
    do {
     if (!($239)) {
      $279 = (($238) + ($209)|0);
      $280 = HEAP8[$279>>0]|0;
      $281 = (_sqlite3CompareAffinity($275,$280)|0);
      $282 = ($281<<24>>24)==(98);
      if ($282) {
       HEAP8[$279>>0] = 98;
       $283 = 98;
      } else {
       $$pre71 = HEAP8[$279>>0]|0;
       $283 = $$pre71;
      }
      $284 = (_sqlite3ExprNeedsNoAffinityChange($275,$283)|0);
      $285 = ($284|0)==(0);
      if ($285) {
       break;
      }
      HEAP8[$279>>0] = 98;
     }
    } while(0);
    $286 = (($209) + 1)|0;
    $nConstraint2$0 = $286;$startEq$0 = $262;$start_constraints$0 = $272;
   } else {
    $287 = ($bSeekPastNull$2<<24>>24)==(0);
    if ($287) {
     $nConstraint2$0 = $209;$startEq$0 = $262;$start_constraints$0 = $272;
    } else {
     $288 = (($237) + ($209))|0;
     (_sqlite3VdbeAddOp2($4,28,0,$288)|0);
     $289 = (($209) + 1)|0;
     $nConstraint2$0 = $289;$startEq$0 = 0;$start_constraints$0 = 1;
    }
   }
   $290 = $bSeekPastNull$2&255;
   $291 = (($nConstraint2$0) - ($290))|0;
   _codeApplyAffinity($2,$237,$291,$238);
   $292 = $start_constraints$0 << 2;
   $293 = $startEq$0 << 1;
   $294 = $292 | $39;
   $295 = $294 | $293;
   $296 = (23632 + ($295)|0);
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&255;
   (_sqlite3VdbeAddOp4Int($4,$298,$198,$242,$237,$nConstraint2$0)|0);
   if ($264) {
    $299 = HEAP32[$pRangeEnd$1>>2]|0;
    $300 = (($299) + 16|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = (($237) + ($209))|0;
    _sqlite3ExprCacheRemove($2,$302,1);
    _sqlite3ExprCode($2,$301,$302);
    $303 = (_sqlite3ExprCanBeNull($301)|0);
    $304 = ($303|0)==(0);
    if (!($304)) {
     (_sqlite3VdbeAddOp2($4,76,$302,$242)|0);
    }
    $305 = HEAP8[$cEndAff>>0]|0;
    $306 = (_sqlite3CompareAffinity($301,$305)|0);
    $307 = ($306<<24>>24)==(98);
    do {
     if (!($307)) {
      $308 = HEAP8[$cEndAff>>0]|0;
      $309 = (_sqlite3ExprNeedsNoAffinityChange($301,$308)|0);
      $310 = ($309|0)==(0);
      if (!($310)) {
       break;
      }
      _codeApplyAffinity($2,$302,1,$cEndAff);
     }
    } while(0);
    $311 = (($209) + 1)|0;
    $endEq$0 = $269;$nConstraint2$1 = $311;
   } else {
    $312 = ($bStopAtNull$0<<24>>24)==(0);
    if ($312) {
     $endEq$0 = $269;$nConstraint2$1 = $209;
    } else {
     $313 = (($237) + ($209))|0;
     (_sqlite3VdbeAddOp2($4,28,0,$313)|0);
     $314 = (($209) + 1)|0;
     $endEq$0 = 0;$nConstraint2$1 = $314;
    }
   }
   _sqlite3DbFree($6,$238);
   $$idx10 = (($4) + 32|0);
   $$idx10$val = HEAP32[$$idx10>>2]|0;
   $315 = (_sqlite3VdbeCurrentAddr($$idx10$val)|0);
   $316 = ((($pWInfo) + (($iLevel*72)|0)|0) + 780|0);
   HEAP32[$316>>2] = $315;
   $317 = ($nConstraint2$1|0)==(0);
   if (!($317)) {
    $318 = $39 << 1;
    $319 = $endEq$0 | $318;
    $320 = (23640 + ($319)|0);
    $321 = HEAP8[$320>>0]|0;
    $322 = $321&255;
    (_sqlite3VdbeAddOp4Int($4,$322,$198,$242,$237,$nConstraint2$1)|0);
   }
   _disableTerm($7,$pRangeStart$1);
   _disableTerm($7,$pRangeEnd$1);
   do {
    if (!($637)) {
     $323 = (($196) + 12|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (($324) + 44|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326 & 32;
     $328 = ($327<<24>>24)==(0);
     if ($328) {
      $329 = (($2) + 76|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (($330) + 1)|0;
      HEAP32[$329>>2] = $331;
      (_sqlite3VdbeAddOp2($4,109,$198,$331)|0);
      _sqlite3ExprCacheStore($2,$17,-1,$331);
      (_sqlite3VdbeAddOp2($4,63,$17,$331)|0);
      break;
     }
     $332 = (_sqlite3PrimaryKeyIndex($324)|0);
     $333 = (($332) + 50|0);
     $334 = HEAP16[$333>>1]|0;
     $335 = $334&65535;
     $336 = (_sqlite3GetTempRange($2,$335)|0);
     $337 = HEAP16[$333>>1]|0;
     $338 = $337&65535;
     $339 = ($337<<16>>16)==(0);
     if ($339) {
      $$lcssa = $338;
     } else {
      $340 = (($332) + 4|0);
      $j$443 = 0;
      while(1) {
       $341 = HEAP32[$340>>2]|0;
       $342 = (($341) + ($j$443<<1)|0);
       $343 = HEAP16[$342>>1]|0;
       $344 = (_sqlite3ColumnOfIndex($196,$343)|0);
       $345 = $344 << 16 >> 16;
       $346 = (($j$443) + ($336))|0;
       (_sqlite3VdbeAddOp3($4,46,$198,$345,$346)|0);
       $347 = (($j$443) + 1)|0;
       $348 = HEAP16[$333>>1]|0;
       $349 = $348&65535;
       $350 = ($347|0)<($349|0);
       if ($350) {
        $j$443 = $347;
       } else {
        $$lcssa = $349;
        break;
       }
      }
     }
     (_sqlite3VdbeAddOp4Int($4,65,$17,$51,$336,$$lcssa)|0);
    }
   } while(0);
   $351 = HEAP32[$40>>2]|0;
   $352 = $351 & 4096;
   $353 = ($352|0)==(0);
   do {
    if ($353) {
     $355 = ($39|0)==(0);
     $356 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
     if ($355) {
      HEAP8[$356>>0] = 9;
      break;
     } else {
      HEAP8[$356>>0] = 8;
      break;
     }
    } else {
     $354 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
     HEAP8[$354>>0] = -101;
    }
   } while(0);
   $357 = ((($pWInfo) + (($iLevel*72)|0)|0) + 776|0);
   HEAP32[$357>>2] = $198;
   $358 = HEAP32[$40>>2]|0;
   $359 = $358 >>> 16;
   $360 = $359 & 1;
   $361 = $360&255;
   $362 = ((($pWInfo) + (($iLevel*72)|0)|0) + 774|0);
   HEAP8[$362>>0] = $361;
   $363 = HEAP32[$40>>2]|0;
   $364 = $363 & 15;
   $365 = ($364|0)==(0);
   if (!($365)) {
    break;
   }
   $366 = ((($pWInfo) + (($iLevel*72)|0)|0) + 775|0);
   HEAP8[$366>>0] = 1;
  } else {
   $66 = ((($14) + (($12*72)|0)|0) + 36|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($14) + (($12*72)|0)|0) + 32|0);
   $69 = HEAP32[$68>>2]|0;
   (_sqlite3VdbeAddOp3($4,20,$67,0,$69)|0);
   $70 = (_sqlite3VdbeAddOp2($4,22,$67,$48)|0);
   $71 = ((($pWInfo) + (($iLevel*72)|0)|0) + 780|0);
   HEAP32[$71>>2] = $70;
   $72 = ((($pWInfo) + (($iLevel*72)|0)|0) + 773|0);
   HEAP8[$72>>0] = 16;
  }
 } while(0);
 $517 = (($pWInfo) + 348|0);
 $518 = (($pWInfo) + 340|0);
 $519 = HEAP32[$518>>2]|0;
 $520 = ($519|0)>(0);
 if ($520) {
  $521 = HEAP32[$517>>2]|0;
  $522 = (($pWInfo) + 38|0);
  $j$522 = $519;$pTerm$021 = $521;
  while(1) {
   $523 = (($pTerm$021) + 20|0);
   $524 = HEAP8[$523>>0]|0;
   $525 = $524 & 6;
   $526 = ($525<<24>>24)==(0);
   do {
    if ($526) {
     $527 = (($pTerm$021) + 40|0);
     $528 = $527;
     $529 = $528;
     $530 = HEAP32[$529>>2]|0;
     $531 = (($528) + 4)|0;
     $532 = $531;
     $533 = HEAP32[$532>>2]|0;
     $534 = $25;
     $535 = $534;
     $536 = HEAP32[$535>>2]|0;
     $537 = (($534) + 4)|0;
     $538 = $537;
     $539 = HEAP32[$538>>2]|0;
     $540 = $536 & $530;
     $541 = $539 & $533;
     $542 = ($540|0)==(0);
     $543 = ($541|0)==(0);
     $544 = $542 & $543;
     if (!($544)) {
      HEAP8[$522>>0] = 1;
      break;
     }
     $545 = HEAP32[$pTerm$021>>2]|0;
     $546 = HEAP32[$7>>2]|0;
     $547 = ($546|0)==(0);
     if (!($547)) {
      $548 = (($545) + 4|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = $549 & 1;
      $551 = ($550|0)==(0);
      if ($551) {
       break;
      }
     }
     _sqlite3ExprIfFalse($2,$545,$51,8);
     $552 = HEAP8[$523>>0]|0;
     $553 = $552&255;
     $554 = $553 | 4;
     $555 = $554&255;
     HEAP8[$523>>0] = $555;
    }
   } while(0);
   $556 = (($j$522) + -1)|0;
   $557 = (($pTerm$021) + 48|0);
   $558 = ($556|0)>(0);
   if ($558) {
    $j$522 = $556;$pTerm$021 = $557;
   } else {
    break;
   }
  }
  $$pre58 = HEAP32[$518>>2]|0;
  $559 = ($$pre58|0)>(0);
  if ($559) {
   $560 = HEAP32[$517>>2]|0;
   $j$619 = $$pre58;$pTerm$118 = $560;
   while(1) {
    $561 = (($pTerm$118) + 20|0);
    $562 = HEAP8[$561>>0]|0;
    $563 = $562 & 6;
    $564 = ($563<<24>>24)==(0);
    if ($564) {
     $565 = (($pTerm$118) + 18|0);
     $566 = HEAP16[$565>>1]|0;
     $567 = ($566<<16>>16)==(1026);
     if ($567) {
      $568 = (($pTerm$118) + 8|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ($569|0)==($17|0);
      if ($570) {
       $571 = HEAP32[$7>>2]|0;
       $572 = ($571|0)==(0);
       if ($572) {
        $573 = HEAP32[$pTerm$118>>2]|0;
        $574 = (($pTerm$118) + 12|0);
        $575 = HEAP32[$574>>2]|0;
        $576 = (_findTerm($5,$17,$575,$0,$1,3,0)|0);
        $577 = ($576|0)==(0|0);
        if (!($577)) {
         $578 = (($576) + 20|0);
         $579 = HEAP8[$578>>0]|0;
         $580 = $579 & 4;
         $581 = ($580<<24>>24)==(0);
         if ($581) {
          $582 = (_sqlite3DbMallocRaw($6,48)|0);
          $583 = ($582|0)==(0|0);
          if (!($583)) {
           $584 = HEAP32[$576>>2]|0;
           dest=$582+0|0; src=$584+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $585 = (($573) + 12|0);
           $586 = HEAP32[$585>>2]|0;
           $587 = (($582) + 12|0);
           HEAP32[$587>>2] = $586;
           _sqlite3ExprIfFalse($2,$582,$51,8);
           _sqlite3DbFree($6,$582);
          }
         }
        }
       }
      }
     }
    }
    $588 = (($j$619) + -1)|0;
    $589 = (($pTerm$118) + 48|0);
    $590 = ($588|0)>(0);
    if ($590) {
     $j$619 = $588;$pTerm$118 = $589;
    } else {
     $$pre$phiZ2D = $7;
     break;
    }
   }
  } else {
   label = 154;
  }
 } else {
  label = 154;
 }
 if ((label|0) == 154) {
  $$pre$phiZ2D = $7;
 }
 $591 = HEAP32[$$pre$phiZ2D>>2]|0;
 $592 = ($591|0)==(0);
 if (!($592)) {
  $$idx = (($4) + 32|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $593 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
  $594 = ((($pWInfo) + (($iLevel*72)|0)|0) + 764|0);
  HEAP32[$594>>2] = $593;
  (_sqlite3VdbeAddOp2($4,25,1,$591)|0);
  _sqlite3ExprCacheClear($2);
  $595 = HEAP32[$518>>2]|0;
  $596 = ($595|0)>(0);
  if ($596) {
   $597 = HEAP32[$517>>2]|0;
   $640 = $595;$j$717 = 0;$pTerm$216 = $597;
   while(1) {
    $598 = (($pTerm$216) + 20|0);
    $599 = HEAP8[$598>>0]|0;
    $600 = $599 & 6;
    $601 = ($600<<24>>24)==(0);
    if ($601) {
     $602 = (($pTerm$216) + 40|0);
     $603 = $602;
     $604 = $603;
     $605 = HEAP32[$604>>2]|0;
     $606 = (($603) + 4)|0;
     $607 = $606;
     $608 = HEAP32[$607>>2]|0;
     $609 = $25;
     $610 = $609;
     $611 = HEAP32[$610>>2]|0;
     $612 = (($609) + 4)|0;
     $613 = $612;
     $614 = HEAP32[$613>>2]|0;
     $615 = $611 & $605;
     $616 = $614 & $608;
     $617 = ($615|0)==(0);
     $618 = ($616|0)==(0);
     $619 = $617 & $618;
     if ($619) {
      $620 = HEAP32[$pTerm$216>>2]|0;
      _sqlite3ExprIfFalse($2,$620,$51,8);
      $621 = HEAP8[$598>>0]|0;
      $622 = $621&255;
      $623 = $622 | 4;
      $624 = $623&255;
      HEAP8[$598>>0] = $624;
      $$pre59 = HEAP32[$518>>2]|0;
      $628 = $$pre59;
     } else {
      $628 = $640;
     }
    } else {
     $628 = $640;
    }
    $625 = (($j$717) + 1)|0;
    $626 = (($pTerm$216) + 48|0);
    $627 = ($625|0)<($628|0);
    if ($627) {
     $640 = $628;$j$717 = $625;$pTerm$216 = $626;
    } else {
     break;
    }
   }
  }
 }
 $629 = $25;
 $630 = $629;
 $631 = HEAP32[$630>>2]|0;
 $632 = (($629) + 4)|0;
 $633 = $632;
 $634 = HEAP32[$633>>2]|0;
 $635 = $634;$636 = $631;
 tempRet0 = $635;
 STACKTOP = sp;return ($636|0);
}
function _codeEqualityTerm($pParse,$pTerm,$pLevel,$iEq,$bRev,$iTarget) {
 $pParse = $pParse|0;
 $pTerm = $pTerm|0;
 $pLevel = $pLevel|0;
 $iEq = $iEq|0;
 $bRev = $bRev|0;
 $iTarget = $iTarget|0;
 var $$0 = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $iReg$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pTerm>>2]|0;
 $1 = (($pParse) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$0>>0]|0;
 if ((($3<<24>>24) == 79)) {
  $4 = (($0) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_sqlite3ExprCodeTarget($pParse,$5,$iTarget)|0);
  $iReg$0 = $6;
  _disableTerm($pLevel,$pTerm);
  STACKTOP = sp;return ($iReg$0|0);
 } else if ((($3<<24>>24) == 76)) {
  (_sqlite3VdbeAddOp2($2,28,0,$iTarget)|0);
  $iReg$0 = $iTarget;
  _disableTerm($pLevel,$pTerm);
  STACKTOP = sp;return ($iReg$0|0);
 } else {
  $7 = (($pLevel) + 56|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 1024;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (($8) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = $bRev;
   } else {
    $16 = (($14) + 28|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($iEq)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $$0 = $bRev;
    } else {
     $21 = ($bRev|0)==(0);
     $22 = $21&1;
     $$0 = $22;
    }
   }
  } else {
   $$0 = $bRev;
  }
  $23 = (_sqlite3FindInIndex($pParse,$0,0)|0);
  $24 = ($23|0)==(4);
  if ($24) {
   $25 = ($$0|0)==(0);
   $26 = $25&1;
   $$1 = $26;
  } else {
   $$1 = $$0;
  }
  $27 = (($0) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($$1|0)!=(0);
  $30 = $29 ? 102 : 105;
  (_sqlite3VdbeAddOp2($2,$30,$28,0)|0);
  $31 = HEAP32[$9>>2]|0;
  $32 = $31 | 2048;
  HEAP32[$9>>2] = $32;
  $33 = (($pLevel) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $$idx = (($2) + 24|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $36 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
   $37 = (($pLevel) + 16|0);
   HEAP32[$37>>2] = $36;
   $$pre = HEAP32[$33>>2]|0;
   $39 = $$pre;
  } else {
   $39 = $34;
  }
  $38 = (($39) + 1)|0;
  HEAP32[$33>>2] = $38;
  $40 = HEAP32[$pParse>>2]|0;
  $41 = (($pLevel) + 52|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($38*12)|0;
  $44 = (_sqlite3DbReallocOrFree($40,$42,$43)|0);
  HEAP32[$41>>2] = $44;
  $45 = ($44|0)==(0|0);
  if ($45) {
   HEAP32[$33>>2] = 0;
   $iReg$0 = $iTarget;
   _disableTerm($pLevel,$pTerm);
   STACKTOP = sp;return ($iReg$0|0);
  }
  $46 = HEAP32[$33>>2]|0;
  $47 = (($46) + -1)|0;
  $48 = (($44) + (($47*12)|0)|0);
  HEAP32[$48>>2] = $28;
  $49 = ($23|0)==(1);
  if ($49) {
   $50 = (_sqlite3VdbeAddOp2($2,100,$28,$iTarget)|0);
   $51 = ((($44) + (($47*12)|0)|0) + 4|0);
   HEAP32[$51>>2] = $50;
  } else {
   $52 = (_sqlite3VdbeAddOp3($2,46,$28,0,$iTarget)|0);
   $53 = ((($44) + (($47*12)|0)|0) + 4|0);
   HEAP32[$53>>2] = $52;
  }
  $54 = $29 ? 6 : 7;
  $55 = ((($44) + (($47*12)|0)|0) + 8|0);
  HEAP8[$55>>0] = $54;
  (_sqlite3VdbeAddOp1($2,76,$iTarget)|0);
  $iReg$0 = $iTarget;
  _disableTerm($pLevel,$pTerm);
  STACKTOP = sp;return ($iReg$0|0);
 }
 return 0|0;
}
function _disableTerm($pLevel,$pTerm) {
 $pLevel = $pLevel|0;
 $pTerm = $pTerm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pTerm$tr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pTerm|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pLevel) + 64|0);
 $pTerm$tr1 = $pTerm;
 while(1) {
  $2 = (($pTerm$tr1) + 20|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 & 4;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = HEAP32[$pLevel>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = HEAP32[$pTerm$tr1>>2]|0;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 1;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 10;
    break;
   }
  }
  $13 = $1;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($pTerm$tr1) + 40|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $22 & $15;
  $27 = $25 & $18;
  $28 = ($26|0)==(0);
  $29 = ($27|0)==(0);
  $30 = $28 & $29;
  if (!($30)) {
   label = 10;
   break;
  }
  $31 = $3&255;
  $32 = $31 | 4;
  $33 = $32&255;
  HEAP8[$2>>0] = $33;
  $34 = (($pTerm$tr1) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(-1);
  if (!($36)) {
   label = 10;
   break;
  }
  $37 = (($pTerm$tr1) + 24|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40) + (($35*48)|0)|0) + 21|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = (($42) + -1)<<24>>24;
  HEAP8[$41>>0] = $43;
  $44 = ($43<<24>>24)==(0);
  if (!($44)) {
   label = 10;
   break;
  }
  $45 = (($40) + (($35*48)|0)|0);
  $46 = ($45|0)==(0|0);
  if ($46) {
   label = 10;
   break;
  } else {
   $pTerm$tr1 = $45;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
}
function _codeAllEqualityTerms($pParse,$pLevel,$bRev,$nExtraReg,$pzAff) {
 $pParse = $pParse|0;
 $pLevel = $pLevel|0;
 $bRev = $bRev|0;
 $nExtraReg = $nExtraReg|0;
 $pzAff = $pzAff|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $j$03 = 0, $j$12 = 0, $regBase$0$lcssa = 0, $regBase$01 = 0, $regBase$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pLevel) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (($4) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = (($3) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pParse) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = $5&65535;
 $14 = (($13) + ($nExtraReg))|0;
 $15 = (($11) + ($14))|0;
 HEAP32[$10>>2] = $15;
 $16 = HEAP32[$pParse>>2]|0;
 $17 = (_sqlite3IndexAffinityStr($1,$9)|0);
 $18 = (_sqlite3DbStrDup($16,$17)|0);
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  $20 = HEAP32[$pParse>>2]|0;
  $21 = (($20) + 64|0);
  HEAP8[$21>>0] = 1;
 }
 $22 = ($7<<16>>16)==(0);
 if (!($22)) {
  $23 = (($pLevel) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($bRev|0)!=(0);
  $26 = $25 ? 102 : 105;
  (_sqlite3VdbeAddOp1($1,$26,$24)|0);
  $27 = (_sqlite3VdbeAddOp0($1,16)|0);
  $28 = $25 ? 59 : 62;
  $29 = $7&65535;
  $30 = (_sqlite3VdbeAddOp4Int($1,$28,$24,0,$12,$29)|0);
  $31 = (($pLevel) + 20|0);
  HEAP32[$31>>2] = $30;
  _sqlite3VdbeJumpHere($1,$27);
  $j$03 = 0;
  while(1) {
   $32 = (($j$03) + ($12))|0;
   (_sqlite3VdbeAddOp3($1,46,$24,$j$03,$32)|0);
   $33 = (($j$03) + 1)|0;
   $34 = ($33|0)<($29|0);
   if ($34) {
    $j$03 = $33;
   } else {
    break;
   }
  }
 }
 $35 = ($7&65535)<($5&65535);
 if (!($35)) {
  $regBase$0$lcssa = $12;
  HEAP32[$pzAff>>2] = $18;
  STACKTOP = sp;return ($regBase$0$lcssa|0);
 }
 $36 = $7&65535;
 $37 = (($3) + 44|0);
 $38 = (($pLevel) + 12|0);
 $39 = ($14|0)==(1);
 $j$12 = $36;$regBase$01 = $12;
 while(1) {
  $40 = HEAP32[$37>>2]|0;
  $41 = (($40) + ($j$12<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($j$12) + ($regBase$01))|0;
  $44 = (_codeEqualityTerm($pParse,$42,$pLevel,$j$12,$bRev,$43)|0);
  $45 = ($44|0)==($43|0);
  do {
   if ($45) {
    $regBase$1 = $regBase$01;
   } else {
    if ($39) {
     _sqlite3ReleaseTempReg($pParse,$regBase$01);
     $regBase$1 = $44;
     break;
    } else {
     (_sqlite3VdbeAddOp2($1,34,$44,$43)|0);
     $regBase$1 = $regBase$01;
     break;
    }
   }
  } while(0);
  $46 = (($42) + 18|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 & 129;
  $49 = ($48<<16>>16)==(0);
  if ($49) {
   $50 = HEAP32[$42>>2]|0;
   $51 = (($50) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_sqlite3ExprCanBeNull($52)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $55 = (($regBase$1) + ($j$12))|0;
    $56 = HEAP32[$38>>2]|0;
    (_sqlite3VdbeAddOp2($1,76,$55,$56)|0);
   }
   if ($19) {
    $57 = (($18) + ($j$12)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = (_sqlite3CompareAffinity($52,$58)|0);
    $60 = ($59<<24>>24)==(98);
    if ($60) {
     HEAP8[$57>>0] = 98;
     $61 = 98;
    } else {
     $$pre = HEAP8[$57>>0]|0;
     $61 = $$pre;
    }
    $62 = (_sqlite3ExprNeedsNoAffinityChange($52,$61)|0);
    $63 = ($62|0)==(0);
    if (!($63)) {
     HEAP8[$57>>0] = 98;
    }
   }
  }
  $64 = (($j$12) + 1)|0;
  $65 = ($64|0)<($13|0);
  if ($65) {
   $j$12 = $64;$regBase$01 = $regBase$1;
  } else {
   $regBase$0$lcssa = $regBase$1;
   break;
  }
 }
 HEAP32[$pzAff>>2] = $18;
 STACKTOP = sp;return ($regBase$0$lcssa|0);
}
function _sqlite3ExprCanBeNull($p) {
 $p = $p|0;
 var $$0$lcssa = 0, $$01 = 0, $$03 = 0, $$lcssa = 0, $$off = 0, $$off2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $$off2 = (($0) + 99)<<24>>24;
 $1 = ($$off2&255)<(2);
 if ($1) {
  $$03 = $p;
  while(1) {
   $2 = (($$03) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = HEAP8[$3>>0]|0;
   $$off = (($4) + 99)<<24>>24;
   $5 = ($$off&255)<(2);
   if ($5) {
    $$03 = $3;
   } else {
    $$0$lcssa = $3;$$lcssa = $4;
    break;
   }
  }
 } else {
  $$0$lcssa = $p;$$lcssa = $0;
 }
 $6 = ($$lcssa<<24>>24)==(-97);
 if ($6) {
  $7 = (($$0$lcssa) + 38|0);
  $8 = HEAP8[$7>>0]|0;
  $op$0 = $8;
 } else {
  $op$0 = $$lcssa;
 }
 $9 = $op$0&255;
 if ((($9|0) == 134) | (($9|0) == 133) | (($9|0) == 97) | (($9|0) == 132)) {
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $$01 = 1;
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3ExprNeedsNoAffinityChange($p,$aff) {
 $p = $p|0;
 $aff = $aff|0;
 var $$0 = 0, $$01$lcssa = 0, $$017 = 0, $$3 = 0, $$lcssa = 0, $$off = 0, $$off6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aff$off = 0, $aff$off5 = 0, $op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($aff<<24>>24)==(98);
 L1: do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = HEAP8[$p>>0]|0;
   $$off6 = (($1) + 99)<<24>>24;
   $2 = ($$off6&255)<(2);
   if ($2) {
    $$017 = $p;
    while(1) {
     $3 = (($$017) + 12|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = HEAP8[$4>>0]|0;
     $$off = (($5) + 99)<<24>>24;
     $6 = ($$off&255)<(2);
     if ($6) {
      $$017 = $4;
     } else {
      $$01$lcssa = $4;$$lcssa = $5;
      break;
     }
    }
   } else {
    $$01$lcssa = $p;$$lcssa = $1;
   }
   $7 = ($$lcssa<<24>>24)==(-97);
   if ($7) {
    $8 = (($$01$lcssa) + 38|0);
    $9 = HEAP8[$8>>0]|0;
    $op$0 = $9;
   } else {
    $op$0 = $$lcssa;
   }
   $10 = $op$0&255;
   switch ($10|0) {
   case 133:  {
    $13 = ($aff<<24>>24)==(101);
    $14 = ($aff<<24>>24)==(99);
    $$3 = $13 | $14;
    $15 = $$3&1;
    $$0 = $15;
    break L1;
    break;
   }
   case 97:  {
    $16 = ($aff<<24>>24)==(97);
    $17 = $16&1;
    $$0 = $17;
    break L1;
    break;
   }
   case 132:  {
    $aff$off5 = (($aff) + -99)<<24>>24;
    $11 = ($aff$off5&255)<(2);
    $12 = $11&1;
    $$0 = $12;
    break L1;
    break;
   }
   case 154:  {
    $18 = (($$01$lcssa) + 32|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ($19<<16>>16)<(0);
    if ($20) {
     $aff$off = (($aff) + -99)<<24>>24;
     $21 = ($aff$off&255)<(2);
     $23 = $21;
    } else {
     $23 = 0;
    }
    $22 = $23&1;
    $$0 = $22;
    break L1;
    break;
   }
   case 134:  {
    $$0 = 1;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _codeApplyAffinity($pParse,$base,$n,$zAff) {
 $pParse = $pParse|0;
 $base = $base|0;
 $n = $n|0;
 $zAff = $zAff|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$017 = 0, $$02$lcssa = 0, $$026 = 0, $$08 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($zAff|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($n|0)>(0);
 L4: do {
  if ($3) {
   $$017 = $zAff;$$026 = $n;$$08 = $base;
   while(1) {
    $4 = HEAP8[$$017>>0]|0;
    $5 = ($4<<24>>24)==(98);
    if (!($5)) {
     $$0$lcssa = $$08;$$01$lcssa = $$017;$$02$lcssa = $$026;
     break L4;
    }
    $6 = (($$026) + -1)|0;
    $7 = (($$08) + 1)|0;
    $8 = (($$017) + 1|0);
    $9 = ($6|0)>(0);
    if ($9) {
     $$017 = $8;$$026 = $6;$$08 = $7;
    } else {
     $$0$lcssa = $7;$$01$lcssa = $8;$$02$lcssa = $6;
     break;
    }
   }
  } else {
   $$0$lcssa = $base;$$01$lcssa = $zAff;$$02$lcssa = $n;
  }
 } while(0);
 $$1 = $$02$lcssa;
 while(1) {
  $10 = ($$1|0)>(1);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = (($$1) + -1)|0;
  $12 = (($$01$lcssa) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(98);
  if ($14) {
   $$1 = $11;
  } else {
   break;
  }
 }
 if ((label|0) == 8) {
  $15 = ($$1|0)>(0);
  if (!($15)) {
   STACKTOP = sp;return;
  }
 }
 (_sqlite3VdbeAddOp2($1,47,$$0$lcssa,$$1)|0);
 _sqlite3VdbeChangeP4($1,-1,$$01$lcssa,$$1);
 _sqlite3ExprCacheAffinityChange($pParse,$$0$lcssa,$$1);
 STACKTOP = sp;return;
}
function _findTerm($pWC,$iCur,$iColumn,$0,$1,$op,$pIdx) {
 $pWC = $pWC|0;
 $iCur = $iCur|0;
 $iColumn = $iColumn|0;
 $0 = $0|0;
 $1 = $1|0;
 $op = $op|0;
 $pIdx = $pIdx|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$pResult$0 = 0, $p$02 = 0, $pResult$01 = 0, $pResult$1 = 0, $scan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $scan = sp;
 $2 = (_whereScanInit($scan,$pWC,$iCur,$iColumn,$op,$pIdx)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$02 = $2;$pResult$01 = 0;
 }
 while(1) {
  $4 = (($p$02) + 32|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $7 & $0;
  $12 = $10 & $1;
  $13 = ($11|0)==(0);
  $14 = ($12|0)==(0);
  $15 = $13 & $14;
  if ($15) {
   $16 = ($7|0)==(0);
   $17 = ($10|0)==(0);
   $18 = $16 & $17;
   if ($18) {
    $19 = (($p$02) + 18|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 & 2;
    $22 = ($21<<16>>16)==(0);
    if (!($22)) {
     $$0 = $p$02;
     label = 7;
     break;
    }
   }
   $23 = ($pResult$01|0)==(0|0);
   $p$0$pResult$0 = $23 ? $p$02 : $pResult$01;
   $pResult$1 = $p$0$pResult$0;
  } else {
   $pResult$1 = $pResult$01;
  }
  $24 = (_whereScanNext($scan)|0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   $$0 = $pResult$1;
   label = 7;
   break;
  } else {
   $p$02 = $24;$pResult$01 = $pResult$1;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _whereScanInit($pScan,$pWC,$iCur,$iColumn,$opMask,$pIdx) {
 $pScan = $pScan|0;
 $pWC = $pWC|0;
 $iCur = $iCur|0;
 $iColumn = $iColumn|0;
 $opMask = $opMask|0;
 $pIdx = $pIdx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$0$lcssa = 0;
 var $j$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pScan>>2] = $pWC;
 $0 = (($pScan) + 4|0);
 HEAP32[$0>>2] = $pWC;
 $1 = ($pIdx|0)!=(0|0);
 $2 = ($iColumn|0)>(-1);
 $or$cond = $1 & $2;
 if ($or$cond) {
  $3 = (($pIdx) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6) + (($iColumn*24)|0)|0) + 21|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (($pScan) + 12|0);
  HEAP8[$9>>0] = $8;
  $10 = (($pIdx) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ($13|0)==($iColumn|0);
  L3: do {
   if ($14) {
    $j$0$lcssa = 0;
   } else {
    $15 = (($pIdx) + 50|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = $16&65535;
    $j$02 = 0;
    while(1) {
     $23 = ($j$02|0)<($17|0);
     $19 = (($j$02) + 1)|0;
     if (!($23)) {
      $$0 = 0;
      break;
     }
     $18 = (($11) + ($19<<1)|0);
     $20 = HEAP16[$18>>1]|0;
     $21 = $20 << 16 >> 16;
     $22 = ($21|0)==($iColumn|0);
     if ($22) {
      $j$0$lcssa = $19;
      break L3;
     } else {
      $j$02 = $19;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $24 = (($pIdx) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($j$0$lcssa<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($pScan) + 8|0);
  HEAP32[$28>>2] = $27;
 } else {
  $29 = (($pScan) + 12|0);
  HEAP8[$29>>0] = 0;
  $30 = (($pScan) + 8|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = (($pScan) + 16|0);
 HEAP32[$31>>2] = $opMask;
 $32 = (($pScan) + 20|0);
 HEAP32[$32>>2] = 0;
 $33 = (($pScan) + 24|0);
 HEAP32[$33>>2] = $iCur;
 $34 = (($pScan) + 28|0);
 HEAP32[$34>>2] = $iColumn;
 $35 = (($pScan) + 13|0);
 HEAP8[$35>>0] = 2;
 $36 = (($pScan) + 14|0);
 HEAP8[$36>>0] = 2;
 $37 = (_whereScanNext($pScan)|0);
 $$0 = $37;
 STACKTOP = sp;return ($$0|0);
}
function _whereScanNext($pScan) {
 $pScan = $pScan|0;
 var $$0 = 0, $$pre = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $$pre27 = 0, $$pre38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j$0$lcssa = 0, $j$01 = 0, $k$018 = 0, $k$113 = 0, $k$27 = 0;
 var $pColl$0 = 0, $pTerm$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pScan) + 20|0);
 $1 = (($pScan) + 14|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($pScan) + 13|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($2&255)>($4&255);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $2&255;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($pScan) + 4|0);
 $9 = (($pScan) + 16|0);
 $10 = (($pScan) + 8|0);
 $11 = (($pScan) + 24|0);
 $12 = (($pScan) + 28|0);
 $13 = (($pScan) + 12|0);
 $$pre = HEAP32[$8>>2]|0;
 $146 = $4;$147 = $2;$15 = $6;$22 = $$pre;$k$018 = $7;
 L4: while(1) {
  $14 = (($15) + -2)|0;
  $16 = ((($pScan) + ($14<<2)|0) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + -1)|0;
  $19 = ((($pScan) + ($18<<2)|0) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($22|0)==(0|0);
  if ($21) {
   $140 = $147;$145 = $146;
  } else {
   $24 = $22;$k$113 = $k$018;
   while(1) {
    $23 = (($24) + 12|0);
    $25 = HEAP32[$23>>2]|0;
    $26 = ($k$113|0)<($25|0);
    if ($26) {
     $27 = (($24) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + (($k$113*48)|0)|0);
     $k$27 = $k$113;$pTerm$05 = $29;
     while(1) {
      $30 = (($pTerm$05) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==($17|0);
      do {
       if ($32) {
        $33 = (($pTerm$05) + 12|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==($20|0);
        if ($35) {
         $36 = HEAP8[$1>>0]|0;
         $37 = ($36&255)<(3);
         if (!($37)) {
          $38 = HEAP32[$pTerm$05>>2]|0;
          $39 = (($38) + 4|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = $40 & 1;
          $42 = ($41|0)==(0);
          if (!($42)) {
           break;
          }
         }
         $43 = (($pTerm$05) + 18|0);
         $44 = HEAP16[$43>>1]|0;
         $45 = $44 & 1024;
         $46 = ($45<<16>>16)==(0);
         if ($46) {
          $85 = $44;
         } else {
          $47 = HEAP8[$3>>0]|0;
          $48 = ($47&255)<(22);
          if ($48) {
           $49 = HEAP32[$pTerm$05>>2]|0;
           $50 = (($49) + 16|0);
           $51 = HEAP32[$50>>2]|0;
           $52 = (_sqlite3ExprSkipCollate($51)|0);
           $53 = ($47<<24>>24)==(0);
           L22: do {
            if ($53) {
             $70 = 0;$j$0$lcssa = 0;
            } else {
             $54 = (($52) + 28|0);
             $55 = HEAP32[$54>>2]|0;
             $56 = (($52) + 32|0);
             $j$01 = 0;
             while(1) {
              $57 = ((($pScan) + ($j$01<<2)|0) + 24|0);
              $58 = HEAP32[$57>>2]|0;
              $59 = ($58|0)==($55|0);
              if ($59) {
               $60 = $j$01 | 1;
               $61 = ((($pScan) + ($60<<2)|0) + 24|0);
               $62 = HEAP32[$61>>2]|0;
               $63 = HEAP16[$56>>1]|0;
               $64 = $63 << 16 >> 16;
               $65 = ($62|0)==($64|0);
               if ($65) {
                $70 = $47;$j$0$lcssa = $j$01;
                break L22;
               }
              }
              $66 = (($j$01) + 2)|0;
              $67 = $47&255;
              $68 = ($66|0)<($67|0);
              if ($68) {
               $j$01 = $66;
              } else {
               $70 = $47;$j$0$lcssa = $66;
               break;
              }
             }
            }
           } while(0);
           $69 = $70&255;
           $71 = ($j$0$lcssa|0)==($69|0);
           if ($71) {
            $72 = (($52) + 28|0);
            $73 = HEAP32[$72>>2]|0;
            $74 = ((($pScan) + ($j$0$lcssa<<2)|0) + 24|0);
            HEAP32[$74>>2] = $73;
            $75 = (($52) + 32|0);
            $76 = HEAP16[$75>>1]|0;
            $77 = $76 << 16 >> 16;
            $78 = $j$0$lcssa | 1;
            $79 = ((($pScan) + ($78<<2)|0) + 24|0);
            HEAP32[$79>>2] = $77;
            $80 = HEAP8[$3>>0]|0;
            $81 = $80&255;
            $82 = (($81) + 2)|0;
            $83 = $82&255;
            HEAP8[$3>>0] = $83;
            $$pre27 = HEAP16[$43>>1]|0;
            $85 = $$pre27;
           } else {
            $85 = $44;
           }
          } else {
           $85 = $44;
          }
         }
         $84 = $85&65535;
         $86 = HEAP32[$9>>2]|0;
         $87 = $84 & $86;
         $88 = ($87|0)==(0);
         if (!($88)) {
          $89 = HEAP32[$10>>2]|0;
          $90 = ($89|0)==(0|0);
          if ($90) {
           $113 = $85;
          } else {
           $91 = $84 & 128;
           $92 = ($91|0)==(0);
           if ($92) {
            $93 = HEAP32[$24>>2]|0;
            $94 = HEAP32[$93>>2]|0;
            $95 = HEAP32[$pTerm$05>>2]|0;
            $96 = HEAP8[$13>>0]|0;
            $97 = (_sqlite3IndexAffinityOk($95,$96)|0);
            $98 = ($97|0)==(0);
            if ($98) {
             break;
            }
            $99 = (($95) + 12|0);
            $100 = HEAP32[$99>>2]|0;
            $101 = (($95) + 16|0);
            $102 = HEAP32[$101>>2]|0;
            $103 = (_sqlite3BinaryCompareCollSeq($94,$100,$102)|0);
            $104 = ($103|0)==(0|0);
            if ($104) {
             $105 = HEAP32[$94>>2]|0;
             $106 = (($105) + 8|0);
             $107 = HEAP32[$106>>2]|0;
             $pColl$0 = $107;
            } else {
             $pColl$0 = $103;
            }
            $108 = HEAP32[$pColl$0>>2]|0;
            $109 = HEAP32[$10>>2]|0;
            $110 = (_sqlite3_stricmp($108,$109)|0);
            $111 = ($110|0)==(0);
            if (!($111)) {
             break;
            }
            $$pre38 = HEAP16[$43>>1]|0;
            $113 = $$pre38;
           } else {
            $113 = $85;
           }
          }
          $112 = $113 & 2;
          $114 = ($112<<16>>16)==(0);
          if ($114) {
           break L4;
          }
          $115 = HEAP32[$pTerm$05>>2]|0;
          $116 = (($115) + 16|0);
          $117 = HEAP32[$116>>2]|0;
          $118 = HEAP8[$117>>0]|0;
          $119 = ($118<<24>>24)==(-102);
          if (!($119)) {
           break L4;
          }
          $120 = (($117) + 28|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = HEAP32[$11>>2]|0;
          $123 = ($121|0)==($122|0);
          if (!($123)) {
           break L4;
          }
          $124 = (($117) + 32|0);
          $125 = HEAP16[$124>>1]|0;
          $126 = $125 << 16 >> 16;
          $127 = HEAP32[$12>>2]|0;
          $128 = ($126|0)==($127|0);
          if (!($128)) {
           break L4;
          }
         }
        }
       }
      } while(0);
      $130 = (($k$27) + 1)|0;
      $131 = (($pTerm$05) + 48|0);
      $132 = HEAP32[$23>>2]|0;
      $133 = ($130|0)<($132|0);
      if ($133) {
       $k$27 = $130;$pTerm$05 = $131;
      } else {
       break;
      }
     }
     $$pre26 = HEAP32[$8>>2]|0;
     $135 = $$pre26;
    } else {
     $135 = $24;
    }
    $134 = (($135) + 4|0);
    $136 = HEAP32[$134>>2]|0;
    HEAP32[$8>>2] = $136;
    $137 = ($136|0)==(0|0);
    if ($137) {
     break;
    } else {
     $24 = $136;$k$113 = 0;
    }
   }
   $$pre24 = HEAP8[$1>>0]|0;
   $$pre25 = HEAP8[$3>>0]|0;
   $140 = $$pre24;$145 = $$pre25;
  }
  $138 = HEAP32[$pScan>>2]|0;
  HEAP32[$8>>2] = $138;
  $139 = $140&255;
  $141 = (($139) + 2)|0;
  $142 = $141&255;
  HEAP8[$1>>0] = $142;
  $143 = $141 & 255;
  $144 = ($142&255)>($145&255);
  if ($144) {
   $$0 = 0;
   label = 37;
   break;
  } else {
   $146 = $145;$147 = $142;$15 = $143;$22 = $138;$k$018 = 0;
  }
 }
 if ((label|0) == 37) {
  STACKTOP = sp;return ($$0|0);
 }
 $129 = (($k$27) + 1)|0;
 HEAP32[$0>>2] = $129;
 $$0 = $pTerm$05;
 STACKTOP = sp;return ($$0|0);
}
function _explainIndexRange($db,$pLoop,$pTab$0$1$val) {
 $db = $db|0;
 $pLoop = $pLoop|0;
 $pTab$0$1$val = $pTab$0$1$val|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $i$1 = 0, $smax = 0, $txt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $txt = sp;
 $0 = (($pLoop) + 24|0);
 $1 = (($pLoop) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP16[$0>>1]|0;
 $4 = (($0) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (($2) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3&65535;
 $9 = ($3<<16>>16)==(0);
 do {
  if ($9) {
   $10 = (($pLoop) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 48;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    _sqlite3StrAccumInit($txt,0,0,1000000000);
    HEAP32[$txt>>2] = $db;
    _sqlite3StrAccumAppend($txt,23952,2);
    if ($9) {
     $i$0$lcssa = 0;
     break;
    } else {
     label = 5;
     break;
    }
   }
  } else {
   _sqlite3StrAccumInit($txt,0,0,1000000000);
   HEAP32[$txt>>2] = $db;
   _sqlite3StrAccumAppend($txt,23952,2);
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $14 = (($2) + 50|0);
  $15 = $5&65535;
  $16 = ($8>>>0)>(1);
  $i$02 = 0;
  while(1) {
   $17 = HEAP16[$14>>1]|0;
   $18 = $17&65535;
   $19 = ($i$02|0)==($18|0);
   if ($19) {
    $26 = 10144;
   } else {
    $20 = (($7) + ($i$02<<1)|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = (($pTab$0$1$val) + (($22*24)|0)|0);
    $24 = HEAP32[$23>>2]|0;
    $26 = $24;
   }
   $25 = ($i$02|0)<($15|0);
   if ($25) {
    $27 = ($i$02|0)==(0);
    if (!($27)) {
     _sqlite3StrAccumAppend($txt,23968,5);
    }
    _sqlite3StrAccumAppend($txt,23976,4);
    _sqlite3StrAccumAppendAll($txt,$26);
    _sqlite3StrAccumAppend($txt,23984,1);
   } else {
    _explainAppendTerm($txt,$i$02,$26,23960);
   }
   $28 = (($i$02) + 1)|0;
   $29 = ($28|0)<($8|0);
   if ($29) {
    $i$02 = $28;
   } else {
    break;
   }
  }
  $smax = $16 ? $8 : 1;
  $i$0$lcssa = $smax;
 }
 $30 = (($pLoop) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 32;
 $33 = ($32|0)==(0);
 if ($33) {
  $46 = $31;$i$1 = $i$0$lcssa;
 } else {
  $34 = (($2) + 50|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = ($i$0$lcssa|0)==($36|0);
  if ($37) {
   $44 = 10144;
  } else {
   $38 = (($7) + ($i$0$lcssa<<1)|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = (($pTab$0$1$val) + (($40*24)|0)|0);
   $42 = HEAP32[$41>>2]|0;
   $44 = $42;
  }
  $43 = (($i$0$lcssa) + 1)|0;
  _explainAppendTerm($txt,$i$0$lcssa,$44,23992);
  $$pre = HEAP32[$30>>2]|0;
  $46 = $$pre;$i$1 = $43;
 }
 $45 = $46 & 16;
 $47 = ($45|0)==(0);
 if (!($47)) {
  $48 = (($2) + 50|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($i$0$lcssa|0)==($50|0);
  if ($51) {
   $57 = 10144;
  } else {
   $52 = (($7) + ($i$0$lcssa<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53 << 16 >> 16;
   $55 = (($pTab$0$1$val) + (($54*24)|0)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56;
  }
  _explainAppendTerm($txt,$i$1,$57,24000);
 }
 _sqlite3StrAccumAppend($txt,23984,1);
 $58 = (_sqlite3StrAccumFinish($txt)|0);
 $$0 = $58;
 STACKTOP = sp;return ($$0|0);
}
function _explainAppendTerm($pStr,$iTerm,$zColumn,$zOp) {
 $pStr = $pStr|0;
 $iTerm = $iTerm|0;
 $zColumn = $zColumn|0;
 $zOp = $zOp|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iTerm|0)==(0);
 if (!($0)) {
  _sqlite3StrAccumAppend($pStr,23968,5);
 }
 _sqlite3StrAccumAppendAll($pStr,$zColumn);
 _sqlite3StrAccumAppend($pStr,$zOp,1);
 _sqlite3StrAccumAppend($pStr,19152,1);
 STACKTOP = sp;return;
}
function _termCanDriveIndex($pTerm,$pSrc,$0,$1) {
 $pTerm = $pTerm|0;
 $pSrc = $pSrc|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pTerm) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pSrc) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pTerm) + 18|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 2;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($pTerm) + 32|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $14 & $0;
 $19 = $17 & $1;
 $20 = ($18|0)==(0);
 $21 = ($19|0)==(0);
 $22 = $20 & $21;
 if (!($22)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($pTerm) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)<(0);
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($pSrc) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29) + (($24*24)|0)|0) + 21|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = HEAP32[$pTerm>>2]|0;
 $33 = (_sqlite3IndexAffinityOk($32,$31)|0);
 $not$ = ($33|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _whereLoopResize($db,$p,$n) {
 $db = $db|0;
 $p = $p|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 42|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($2|0)<($n|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($n) + 7)|0;
 $5 = $4 & -8;
 $6 = $5 << 2;
 $7 = (_sqlite3DbMallocRaw($db,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($p) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP16[$0>>1]|0;
 $12 = $11&65535;
 $13 = $12 << 2;
 _memcpy(($7|0),($10|0),($13|0))|0;
 $14 = HEAP32[$9>>2]|0;
 $15 = (($p) + 52|0);
 $16 = ($14|0)==($15|0);
 if (!($16)) {
  _sqlite3DbFree($db,$14);
 }
 HEAP32[$9>>2] = $7;
 $17 = $5&65535;
 HEAP16[$0>>1] = $17;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3AllocateIndexObject($db,$nCol,$nExtra,$ppExtra) {
 $db = $db|0;
 $nCol = $nCol|0;
 $nExtra = $nExtra|0;
 $ppExtra = $ppExtra|0;
 var $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $nCol << 16 >> 16;
 $1 = $0 << 2;
 $2 = (($1) + 63)|0;
 $3 = $2 & -8;
 $4 = (($1) + 4)|0;
 $5 = $0 << 1;
 $6 = (($0) + 7)|0;
 $7 = (($6) + ($5))|0;
 $8 = (($7) + ($4))|0;
 $9 = $8 & -8;
 $10 = (($9) + ($3))|0;
 $11 = (($10) + ($nExtra))|0;
 $12 = (_sqlite3DbMallocZero($db,$11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return ($12|0);
 }
 $14 = (($12) + 56|0);
 $15 = (($12) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = (($12) + ($3)|0);
 $17 = (($12) + 8|0);
 HEAP32[$17>>2] = $16;
 $$sum1 = (($3) + ($4))|0;
 $18 = (($12) + ($$sum1)|0);
 $19 = (($12) + 4|0);
 HEAP32[$19>>2] = $18;
 $$sum2 = (($$sum1) + ($5))|0;
 $20 = (($12) + ($$sum2)|0);
 $21 = (($12) + 28|0);
 HEAP32[$21>>2] = $20;
 $22 = (($12) + 52|0);
 HEAP16[$22>>1] = $nCol;
 $23 = (($0) + 65535)|0;
 $24 = $23&65535;
 $25 = (($12) + 50|0);
 HEAP16[$25>>1] = $24;
 $26 = (($12) + ($10)|0);
 HEAP32[$ppExtra>>2] = $26;
 STACKTOP = sp;return ($12|0);
}
function _exprTableUsage($pMaskSet,$p) {
 $pMaskSet = $pMaskSet|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $32 = 0;$33 = 0;
  tempRet0 = $32;
  STACKTOP = sp;return ($33|0);
 }
 $1 = HEAP8[$p>>0]|0;
 $2 = ($1<<24>>24)==(-102);
 if ($2) {
  $3 = (($p) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_getMask($pMaskSet,$4)|0);
  $6 = tempRet0;
  $32 = $6;$33 = $5;
  tempRet0 = $32;
  STACKTOP = sp;return ($33|0);
 }
 $7 = (($p) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_exprTableUsage($pMaskSet,$8)|0);
 $10 = tempRet0;
 $11 = (($p) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_exprTableUsage($pMaskSet,$12)|0);
 $14 = tempRet0;
 $15 = $13 | $9;
 $16 = $14 | $10;
 $17 = (($p) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 2048;
 $20 = ($19|0)==(0);
 $21 = (($p) + 20|0);
 if ($20) {
  $25 = HEAP32[$21>>2]|0;
  $26 = (_exprListTableUsage($pMaskSet,$25)|0);
  $27 = tempRet0;
  $29 = $26;$31 = $27;
 } else {
  $22 = HEAP32[$21>>2]|0;
  $23 = (_exprSelectTableUsage($pMaskSet,$22)|0);
  $24 = tempRet0;
  $29 = $23;$31 = $24;
 }
 $28 = $15 | $29;
 $30 = $16 | $31;
 $32 = $30;$33 = $28;
 tempRet0 = $32;
 STACKTOP = sp;return ($33|0);
}
function _exprSelectTableUsage($pMaskSet,$pS) {
 $pMaskSet = $pMaskSet|0;
 $pS = $pS|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pS|0)==(0|0);
 if ($0) {
  $56 = 0;$57 = 0;
  tempRet0 = $56;
  STACKTOP = sp;return ($57|0);
 } else {
  $$04 = $pS;$7 = 0;$9 = 0;
 }
 while(1) {
  $1 = (($$04) + 40|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$$04>>2]|0;
  $4 = (_exprListTableUsage($pMaskSet,$3)|0);
  $5 = tempRet0;
  $6 = $4 | $7;
  $8 = $5 | $9;
  $10 = (($$04) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_exprListTableUsage($pMaskSet,$11)|0);
  $13 = tempRet0;
  $14 = $6 | $12;
  $15 = $8 | $13;
  $16 = (($$04) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_exprListTableUsage($pMaskSet,$17)|0);
  $19 = tempRet0;
  $20 = $14 | $18;
  $21 = $15 | $19;
  $22 = (($$04) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_exprTableUsage($pMaskSet,$23)|0);
  $25 = tempRet0;
  $26 = $20 | $24;
  $27 = $21 | $25;
  $28 = (($$04) + 52|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_exprTableUsage($pMaskSet,$29)|0);
  $31 = tempRet0;
  $32 = $26 | $30;
  $33 = $27 | $31;
  $34 = ($2|0)==(0|0);
  if ($34) {
   $58 = $32;$59 = $33;
  } else {
   $35 = HEAP32[$2>>2]|0;
   $36 = ($35|0)>(0);
   if ($36) {
    $42 = $32;$44 = $33;$i$02 = 0;
    while(1) {
     $37 = ((($2) + (($i$02*72)|0)|0) + 28|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_exprSelectTableUsage($pMaskSet,$38)|0);
     $40 = tempRet0;
     $41 = $39 | $42;
     $43 = $40 | $44;
     $45 = ((($2) + (($i$02*72)|0)|0) + 52|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (_exprTableUsage($pMaskSet,$46)|0);
     $48 = tempRet0;
     $49 = $41 | $47;
     $50 = $43 | $48;
     $51 = (($i$02) + 1)|0;
     $52 = ($51|0)<($35|0);
     if ($52) {
      $42 = $49;$44 = $50;$i$02 = $51;
     } else {
      $58 = $49;$59 = $50;
      break;
     }
    }
   } else {
    $58 = $32;$59 = $33;
   }
  }
  $53 = (($$04) + 60|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $56 = $59;$57 = $58;
   break;
  } else {
   $$04 = $54;$7 = $58;$9 = $59;
  }
 }
 tempRet0 = $56;
 STACKTOP = sp;return ($57|0);
}
function _estLog($N) {
 $N = $N|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $N << 16 >> 16;
 $1 = ($0|0)<(0);
 $2 = $1 << 31 >> 31;
 $3 = (_sqlite3LogEst($0,$2)|0);
 $4 = ($3<<16>>16)>(33);
 if (!($4)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $5 = $3&65535;
 $6 = (($5) + 65503)|0;
 $phitmp = $6&65535;
 $7 = $phitmp;
 STACKTOP = sp;return ($7|0);
}
function _sqlite3LogEstAdd($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 16 >> 16;
 $1 = $b << 16 >> 16;
 $2 = ($a<<16>>16)<($b<<16>>16);
 do {
  if ($2) {
   $15 = (($0) + 49)|0;
   $16 = ($1|0)>($15|0);
   if ($16) {
    $$0 = $b;
   } else {
    $17 = (($0) + 31)|0;
    $18 = ($1|0)>($17|0);
    if ($18) {
     $19 = (($1) + 1)|0;
     $20 = $19&65535;
     $$0 = $20;
     break;
    } else {
     $21 = (($1) - ($0))|0;
     $22 = (24080 + ($21)|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = (($24) + ($1))|0;
     $26 = $25&65535;
     $$0 = $26;
     break;
    }
   }
  } else {
   $3 = (($1) + 49)|0;
   $4 = ($0|0)>($3|0);
   if ($4) {
    $$0 = $a;
   } else {
    $5 = (($1) + 31)|0;
    $6 = ($0|0)>($5|0);
    if ($6) {
     $7 = (($0) + 1)|0;
     $8 = $7&65535;
     $$0 = $8;
     break;
    } else {
     $9 = (($0) - ($1))|0;
     $10 = (24080 + ($9)|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = $11&255;
     $13 = (($12) + ($0))|0;
     $14 = $13&65535;
     $$0 = $14;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _wherePathSatisfiesOrderBy($pWInfo,$pOrderBy,$pPath,$wctrlFlags,$nLoop,$pLast,$pRevMask) {
 $pWInfo = $pWInfo|0;
 $pOrderBy = $pOrderBy|0;
 $pPath = $pPath|0;
 $wctrlFlags = $wctrlFlags|0;
 $nLoop = $nLoop|0;
 $pLast = $pLast|0;
 $pRevMask = $pRevMask|0;
 var $$ = 0, $$0 = 0, $$7 = 0, $$bOnce$0 = 0, $$distinctColumns$0 = 0, $$isOrderDistinct$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bOnce$019 = 0, $bOnce$2 = 0, $distinctColumns$029 = 0, $distinctColumns$045 = 0, $distinctColumns$2 = 0, $i$012 = 0, $i$117 = 0, $i$258 = 0, $iColumn$09 = 0, $iLoop$069 = 0, $isOrderDistinct$0$lcssa = 0, $isOrderDistinct$072 = 0, $isOrderDistinct$1103 = 0;
 var $isOrderDistinct$2$ = 0, $isOrderDistinct$249 = 0, $isOrderDistinct$3 = 0, $isOrderDistinct$4 = 0, $isOrderDistinct$5 = 0, $isOrderDistinct$5$ = 0, $isOrderDistinct$6 = 0, $j$042 = 0, $nKeyCol$0101 = 0, $not$ = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $pColl$0 = 0, $pColl$1 = 0, $pColl$2 = 0, $pIndex$0102 = 0, $pLoop$070 = 0, $rev$050 = 0;
 var $rev$1 = 0, $revIdx$011 = 0, $revSet$051 = 0, $revSet$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pWInfo>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pLast) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1024;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (($pLast) + 29|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = $nLoop&65535;
 $10 = ($nLoop<<16>>16)==(0);
 if (!($10)) {
  $11 = (($1) + 60|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 & 128;
  $14 = ($13<<16>>16)==(0);
  if (!($14)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $15 = HEAP32[$pOrderBy>>2]|0;
 $16 = $15 & 65535;
 $17 = ($16>>>0)>(63);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_bitshift64Shl(1,0,($16|0))|0);
 $19 = tempRet0;
 $20 = (_i64Add(($18|0),($19|0),-1,-1)|0);
 $21 = tempRet0;
 $22 = ($20|0)==(0);
 $23 = ($21|0)==(0);
 $24 = $22 & $23;
 L12: do {
  if ($24) {
   $302 = 0;$304 = 0;$isOrderDistinct$0$lcssa = 1;
  } else {
   $25 = (($pPath) + 24|0);
   $26 = (($pWInfo) + 4|0);
   $27 = ($16|0)==(0);
   $28 = (($pOrderBy) + 8|0);
   $29 = $wctrlFlags & 768;
   $30 = ($29<<16>>16)==(0);
   $31 = (($1) + 8|0);
   $32 = (($pWInfo) + 34|0);
   $33 = (($pWInfo) + 68|0);
   $34 = (($pWInfo) + 328|0);
   $257 = 0;$259 = 0;$306 = 0;$307 = 0;$44 = 0;$46 = 0;$iLoop$069 = 0;$isOrderDistinct$072 = 1;$pLoop$070 = 0;
   L14: while(1) {
    $35 = ($iLoop$069|0)>(0);
    if ($35) {
     $36 = (($pLoop$070) + 8|0);
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $43 = $39 | $44;
     $45 = $42 | $46;
     $59 = $43;$61 = $45;
    } else {
     $59 = $44;$61 = $46;
    }
    $47 = ($iLoop$069|0)<($9|0);
    if ($47) {
     $48 = HEAP32[$25>>2]|0;
     $49 = (($48) + ($iLoop$069<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $52 = $50;
    } else {
     $52 = $pLast;
    }
    $51 = (($52) + 16|0);
    $53 = HEAP8[$51>>0]|0;
    $54 = $53&255;
    $55 = HEAP32[$26>>2]|0;
    $56 = ((($55) + (($54*72)|0)|0) + 48|0);
    $57 = HEAP32[$56>>2]|0;
    if ($27) {
     $308 = $306;$309 = $307;
    } else {
     $58 = $59 ^ -1;
     $60 = $61 ^ -1;
     $65 = $306;$67 = $307;$i$012 = 0;
     while(1) {
      $62 = (_bitshift64Shl(1,0,($i$012|0))|0);
      $63 = tempRet0;
      $64 = $62 & $65;
      $66 = $63 & $67;
      $68 = ($64|0)==(0);
      $69 = ($66|0)==(0);
      $70 = $68 & $69;
      do {
       if ($70) {
        $71 = HEAP32[$28>>2]|0;
        $72 = (($71) + (($i$012*20)|0)|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (_sqlite3ExprSkipCollate($73)|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = ($75<<24>>24)==(-102);
        if ($76) {
         $77 = (($74) + 28|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = ($78|0)==($57|0);
         if ($79) {
          $80 = (($74) + 32|0);
          $81 = HEAP16[$80>>1]|0;
          $82 = $81 << 16 >> 16;
          $83 = (_findTerm($34,$57,$82,$58,$60,130,0)|0);
          $84 = ($83|0)==(0|0);
          if ($84) {
           $310 = $65;$311 = $67;
          } else {
           $85 = (($83) + 18|0);
           $86 = HEAP16[$85>>1]|0;
           $87 = $86 & 2;
           $88 = ($87<<16>>16)==(0);
           if (!($88)) {
            $89 = HEAP16[$80>>1]|0;
            $90 = ($89<<16>>16)>(-1);
            if ($90) {
             $91 = HEAP32[$pWInfo>>2]|0;
             $92 = HEAP32[$28>>2]|0;
             $93 = (($92) + (($i$012*20)|0)|0);
             $94 = HEAP32[$93>>2]|0;
             $95 = (_sqlite3ExprCollSeq($91,$94)|0);
             $96 = ($95|0)==(0|0);
             if ($96) {
              $97 = HEAP32[$31>>2]|0;
              $pColl$0 = $97;
             } else {
              $pColl$0 = $95;
             }
             $98 = HEAP32[$pColl$0>>2]|0;
             $99 = HEAP32[$pWInfo>>2]|0;
             $100 = HEAP32[$83>>2]|0;
             $101 = (_sqlite3ExprCollSeq($99,$100)|0);
             $102 = ($101|0)==(0|0);
             if ($102) {
              $103 = HEAP32[$31>>2]|0;
              $pColl$1 = $103;
             } else {
              $pColl$1 = $101;
             }
             $104 = HEAP32[$pColl$1>>2]|0;
             $105 = (_sqlite3_stricmp($98,$104)|0);
             $106 = ($105|0)==(0);
             if (!($106)) {
              $310 = $65;$311 = $67;
              break;
             }
            }
           }
           $107 = $62 | $65;
           $108 = $63 | $67;
           $310 = $107;$311 = $108;
          }
         } else {
          $310 = $65;$311 = $67;
         }
        } else {
         $310 = $65;$311 = $67;
        }
       } else {
        $310 = $65;$311 = $67;
       }
      } while(0);
      $109 = (($i$012) + 1)|0;
      $110 = ($109|0)<($16|0);
      if ($110) {
       $65 = $310;$67 = $311;$i$012 = $109;
      } else {
       $308 = $310;$309 = $311;
       break;
      }
     }
    }
    $111 = (($52) + 36|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 & 4096;
    $114 = ($113|0)==(0);
    if ($114) {
     $115 = $112 & 256;
     $116 = ($115|0)==(0);
     if ($116) {
      $117 = (($52) + 28|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$0 = 0;
       label = 72;
       break;
      }
      $120 = (($118) + 55|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = $121 & 4;
      $123 = ($122<<24>>24)==(0);
      if (!($123)) {
       $$0 = 0;
       label = 72;
       break;
      }
      $124 = (($118) + 50|0);
      $125 = HEAP16[$124>>1]|0;
      $126 = (($118) + 52|0);
      $127 = HEAP16[$126>>1]|0;
      $128 = (($118) + 54|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = ($129<<24>>24)!=(0);
      $131 = $130&1;
      $132 = $127&65535;
      $133 = ($127<<16>>16)==(0);
      if ($133) {
       $314 = $308;$315 = $309;$distinctColumns$029 = 0;$isOrderDistinct$5 = $131;
      } else {
       $246 = $132;$isOrderDistinct$1103 = $131;$nKeyCol$0101 = $125;$pIndex$0102 = $118;
       label = 32;
      }
     } else {
      $246 = 1;$isOrderDistinct$1103 = $isOrderDistinct$072;$nKeyCol$0101 = 0;$pIndex$0102 = 0;
      label = 32;
     }
     L49: do {
      if ((label|0) == 32) {
       label = 0;
       $134 = (($52) + 24|0);
       $135 = (($134) + 2|0);
       $136 = (($52) + 44|0);
       $137 = ($pIndex$0102|0)==(0|0);
       $138 = (($pIndex$0102) + 32|0);
       $139 = (_bitshift64Shl(1,0,($iLoop$069|0))|0);
       $140 = tempRet0;
       $141 = (($pIndex$0102) + 4|0);
       $142 = (($pIndex$0102) + 28|0);
       $143 = (($pIndex$0102) + 12|0);
       $180 = $308;$182 = $309;$distinctColumns$045 = 0;$isOrderDistinct$249 = $isOrderDistinct$1103;$j$042 = 0;$rev$050 = 0;$revSet$051 = 0;
       L51: while(1) {
        $144 = HEAP16[$134>>1]|0;
        $145 = $144&65535;
        $146 = ($j$042|0)<($145|0);
        if ($146) {
         $147 = HEAP16[$135>>1]|0;
         $148 = ($147<<16>>16)==(0);
         if ($148) {
          $149 = HEAP32[$136>>2]|0;
          $150 = (($149) + ($j$042<<2)|0);
          $151 = HEAP32[$150>>2]|0;
          $152 = (($151) + 18|0);
          $153 = HEAP16[$152>>1]|0;
          $154 = $153&65535;
          $155 = $154 & 130;
          $156 = ($155|0)==(0);
          if ($156) {
           label = 37;
          } else {
           $157 = $154 & 128;
           $158 = ($157|0)==(0);
           $isOrderDistinct$2$ = $158 ? $isOrderDistinct$249 : 0;
           $316 = $180;$317 = $182;$distinctColumns$2 = $distinctColumns$045;$isOrderDistinct$4 = $isOrderDistinct$2$;$rev$1 = $rev$050;$revSet$1 = $revSet$051;
          }
         } else {
          label = 37;
         }
        } else {
         label = 37;
        }
        do {
         if ((label|0) == 37) {
          label = 0;
          if ($137) {
           $318 = 0;$iColumn$09 = -1;$isOrderDistinct$3 = $isOrderDistinct$249;$revIdx$011 = 0;
          } else {
           $159 = HEAP32[$141>>2]|0;
           $160 = (($159) + ($j$042<<1)|0);
           $161 = HEAP16[$160>>1]|0;
           $162 = $161 << 16 >> 16;
           $163 = HEAP32[$142>>2]|0;
           $164 = (($163) + ($j$042)|0);
           $165 = HEAP8[$164>>0]|0;
           $166 = HEAP32[$143>>2]|0;
           $167 = (($166) + 36|0);
           $168 = HEAP16[$167>>1]|0;
           $169 = ($161<<16>>16)==($168<<16>>16);
           $$ = $169 ? -1 : $162;
           $170 = ($isOrderDistinct$249<<24>>24)!=(0);
           $171 = ($$|0)>(-1);
           $or$cond4 = $170 & $171;
           if ($or$cond4) {
            if ($146) {
             $318 = 1;$iColumn$09 = $$;$isOrderDistinct$3 = $isOrderDistinct$249;$revIdx$011 = $165;
            } else {
             $172 = (($166) + 4|0);
             $173 = HEAP32[$172>>2]|0;
             $174 = ((($173) + (($$*24)|0)|0) + 20|0);
             $175 = HEAP8[$174>>0]|0;
             $176 = ($175<<24>>24)==(0);
             $$isOrderDistinct$2 = $176 ? 0 : $isOrderDistinct$249;
             $318 = 1;$iColumn$09 = $$;$isOrderDistinct$3 = $$isOrderDistinct$2;$revIdx$011 = $165;
            }
           } else {
            $318 = $171;$iColumn$09 = $$;$isOrderDistinct$3 = $isOrderDistinct$249;$revIdx$011 = $165;
           }
          }
          if ($27) {
           break L51;
          } else {
           $bOnce$019 = 1;$i$117 = 0;
          }
          L64: while(1) {
           $177 = (_bitshift64Shl(1,0,($i$117|0))|0);
           $178 = tempRet0;
           $179 = $177 & $180;
           $181 = $178 & $182;
           $183 = ($179|0)==(0);
           $184 = ($181|0)==(0);
           $185 = $183 & $184;
           do {
            if ($185) {
             $186 = HEAP32[$28>>2]|0;
             $187 = (($186) + (($i$117*20)|0)|0);
             $188 = HEAP32[$187>>2]|0;
             $189 = (_sqlite3ExprSkipCollate($188)|0);
             $$bOnce$0 = $30 ? 0 : $bOnce$019;
             $190 = HEAP8[$189>>0]|0;
             $191 = ($190<<24>>24)==(-102);
             if (!($191)) {
              $bOnce$2 = $$bOnce$0;
              break;
             }
             $192 = (($189) + 28|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = ($193|0)==($57|0);
             if (!($194)) {
              $bOnce$2 = $$bOnce$0;
              break;
             }
             $195 = (($189) + 32|0);
             $196 = HEAP16[$195>>1]|0;
             $197 = $196 << 16 >> 16;
             $198 = ($197|0)==($iColumn$09|0);
             if (!($198)) {
              $bOnce$2 = $$bOnce$0;
              break;
             }
             if (!($318)) {
              break L64;
             }
             $199 = HEAP32[$pWInfo>>2]|0;
             $200 = (_sqlite3ExprCollSeq($199,$188)|0);
             $201 = ($200|0)==(0|0);
             if ($201) {
              $202 = HEAP32[$31>>2]|0;
              $pColl$2 = $202;
             } else {
              $pColl$2 = $200;
             }
             $203 = HEAP32[$pColl$2>>2]|0;
             $204 = HEAP32[$138>>2]|0;
             $205 = (($204) + ($j$042<<2)|0);
             $206 = HEAP32[$205>>2]|0;
             $207 = (_sqlite3_stricmp($203,$206)|0);
             $208 = ($207|0)==(0);
             if ($208) {
              break L64;
             } else {
              $bOnce$2 = $$bOnce$0;
             }
            } else {
             $bOnce$2 = $bOnce$019;
            }
           } while(0);
           $209 = (($i$117) + 1)|0;
           $210 = ($bOnce$2<<24>>24)!=(0);
           $211 = ($209|0)<($16|0);
           $or$cond5 = $210 & $211;
           if ($or$cond5) {
            $bOnce$019 = $bOnce$2;$i$117 = $209;
           } else {
            break L51;
           }
          }
          $212 = ($iColumn$09|0)<(0);
          $$distinctColumns$0 = $212 ? 1 : $distinctColumns$045;
          $213 = $177 | $180;
          $214 = $178 | $182;
          $215 = HEAP16[$32>>1]|0;
          $216 = $215 & 256;
          $217 = ($216<<16>>16)==(0);
          if ($217) {
           $218 = ($revSet$051<<24>>24)==(0);
           if (!($218)) {
            $219 = $revIdx$011 ^ $rev$050;
            $220 = HEAP32[$28>>2]|0;
            $221 = ((($220) + (($i$117*20)|0)|0) + 12|0);
            $222 = HEAP8[$221>>0]|0;
            $223 = ($219<<24>>24)==($222<<24>>24);
            if ($223) {
             $316 = $213;$317 = $214;$distinctColumns$2 = $$distinctColumns$0;$isOrderDistinct$4 = $isOrderDistinct$3;$rev$1 = $rev$050;$revSet$1 = $revSet$051;
             break;
            } else {
             $$0 = 0;
             label = 72;
             break L14;
            }
           }
           $224 = HEAP32[$28>>2]|0;
           $225 = ((($224) + (($i$117*20)|0)|0) + 12|0);
           $226 = HEAP8[$225>>0]|0;
           $227 = $226 ^ $revIdx$011;
           $228 = ($revIdx$011<<24>>24)==($226<<24>>24);
           if ($228) {
            $316 = $213;$317 = $214;$distinctColumns$2 = $$distinctColumns$0;$isOrderDistinct$4 = $isOrderDistinct$3;$rev$1 = $227;$revSet$1 = 1;
            break;
           }
           $229 = $pRevMask;
           $230 = $229;
           $231 = HEAP32[$230>>2]|0;
           $232 = (($229) + 4)|0;
           $233 = $232;
           $234 = HEAP32[$233>>2]|0;
           $235 = $231 | $139;
           $236 = $234 | $140;
           $237 = $pRevMask;
           $238 = $237;
           HEAP32[$238>>2] = $235;
           $239 = (($237) + 4)|0;
           $240 = $239;
           HEAP32[$240>>2] = $236;
           $316 = $213;$317 = $214;$distinctColumns$2 = $$distinctColumns$0;$isOrderDistinct$4 = $isOrderDistinct$3;$rev$1 = $227;$revSet$1 = 1;
          } else {
           $316 = $213;$317 = $214;$distinctColumns$2 = $$distinctColumns$0;$isOrderDistinct$4 = $isOrderDistinct$3;$rev$1 = $rev$050;$revSet$1 = $revSet$051;
          }
         }
        } while(0);
        $244 = (($j$042) + 1)|0;
        $245 = ($244|0)<($246|0);
        if ($245) {
         $180 = $316;$182 = $317;$distinctColumns$045 = $distinctColumns$2;$isOrderDistinct$249 = $isOrderDistinct$4;$j$042 = $244;$rev$050 = $rev$1;$revSet$051 = $revSet$1;
        } else {
         $314 = $316;$315 = $317;$distinctColumns$029 = $distinctColumns$2;$isOrderDistinct$5 = $isOrderDistinct$4;
         break L49;
        }
       }
       $241 = ($j$042|0)==(0);
       if (!($241)) {
        $242 = $nKeyCol$0101&65535;
        $243 = ($j$042|0)<($242|0);
        if (!($243)) {
         $314 = $180;$315 = $182;$distinctColumns$029 = $distinctColumns$045;$isOrderDistinct$5 = $isOrderDistinct$3;
         break;
        }
       }
       $314 = $180;$315 = $182;$distinctColumns$029 = $distinctColumns$045;$isOrderDistinct$5 = 0;
      }
     } while(0);
     $247 = ($distinctColumns$029<<24>>24)==(0);
     $isOrderDistinct$5$ = $247 ? $isOrderDistinct$5 : 1;
     $312 = $314;$313 = $315;$isOrderDistinct$6 = $isOrderDistinct$5$;
    } else {
     $312 = $308;$313 = $309;$isOrderDistinct$6 = $isOrderDistinct$072;
    }
    $248 = ($isOrderDistinct$6<<24>>24)==(0);
    if ($248) {
     $302 = $312;$304 = $313;$isOrderDistinct$0$lcssa = 0;
     break L12;
    }
    $249 = (($52) + 8|0);
    $250 = $249;
    $251 = $250;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($250) + 4)|0;
    $254 = $253;
    $255 = HEAP32[$254>>2]|0;
    $256 = $252 | $257;
    $258 = $255 | $259;
    if ($27) {
     $294 = $313;$297 = $312;
    } else {
     $260 = $256 ^ -1;
     $261 = $258 ^ -1;
     $265 = $312;$267 = $313;$i$258 = 0;
     while(1) {
      $262 = (_bitshift64Shl(1,0,($i$258|0))|0);
      $263 = tempRet0;
      $264 = $262 & $265;
      $266 = $263 & $267;
      $268 = ($264|0)==(0);
      $269 = ($266|0)==(0);
      $270 = $268 & $269;
      do {
       if ($270) {
        $271 = HEAP32[$28>>2]|0;
        $272 = (($271) + (($i$258*20)|0)|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = (_exprTableUsage($33,$273)|0);
        $275 = tempRet0;
        $276 = ($274|0)==(0);
        $277 = ($275|0)==(0);
        $278 = $276 & $277;
        if ($278) {
         $279 = (_sqlite3ExprIsConstant($273)|0);
         $280 = ($279|0)==(0);
         if ($280) {
          $319 = $265;$320 = $267;
          break;
         }
        }
        $281 = $274 & $260;
        $282 = $275 & $261;
        $283 = ($281|0)==(0);
        $284 = ($282|0)==(0);
        $285 = $283 & $284;
        $286 = $285 ? $262 : 0;
        $287 = $285 ? $263 : 0;
        $288 = $286 | $265;
        $289 = $287 | $267;
        $319 = $288;$320 = $289;
       } else {
        $319 = $265;$320 = $267;
       }
      } while(0);
      $290 = (($i$258) + 1)|0;
      $291 = ($290|0)<($16|0);
      if ($291) {
       $265 = $319;$267 = $320;$i$258 = $290;
      } else {
       $294 = $320;$297 = $319;
       break;
      }
     }
    }
    $292 = (($iLoop$069) + 1)|0;
    $293 = ($294>>>0)>($21>>>0);
    $295 = ($294|0)==($21|0);
    $296 = ($297>>>0)>=($20>>>0);
    $298 = $295 & $296;
    $299 = $293 | $298;
    $or$cond$not = $299 | $248;
    $300 = ($iLoop$069|0)>=($9|0);
    $or$cond3 = $or$cond$not | $300;
    if ($or$cond3) {
     $302 = $297;$304 = $294;$isOrderDistinct$0$lcssa = $isOrderDistinct$6;
     break L12;
    } else {
     $257 = $256;$259 = $258;$306 = $297;$307 = $294;$44 = $59;$46 = $61;$iLoop$069 = $292;$isOrderDistinct$072 = $isOrderDistinct$6;$pLoop$070 = $52;
    }
   }
   if ((label|0) == 72) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $301 = ($302|0)==($20|0);
 $303 = ($304|0)==($21|0);
 $305 = $301 & $303;
 if ($305) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $not$ = ($isOrderDistinct$0$lcssa<<24>>24)!=(0);
 $$7 = $not$ << 31 >> 31;
 $$0 = $$7;
 STACKTOP = sp;return ($$0|0);
}
function _whereLoopAddVirtual($pBuilder,$0,$1) {
 $pBuilder = $pBuilder|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$lcssa = 0, $$mux = 0, $$mxTerm$0 = 0, $$not4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $i$05 = 0, $i$111 = 0, $i$220 = 0, $iPhase$029 = 0, $iPhase$1 = 0, $mxTerm$0$lcssa = 0, $mxTerm$022 = 0, $mxTerm$2 = 0, $or$cond = 0, $or$cond1 = 0;
 var $pBuilder$idx$val = 0, $pBuilder$idx2 = 0, $pBuilder$idx2$val = 0, $pIdxCons$06 = 0, $pIdxCons$123 = 0, $phitmp = 0, $rc$1 = 0, $seenIn$027 = 0, $seenIn$1$ = 0, $seenIn$1$lcssa = 0, $seenIn$17 = 0, $seenIn$3 = 0, $seenVar$028 = 0, $seenVar$1$lcssa = 0, $seenVar$18 = 0, $seenVar$2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$pBuilder>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pBuilder) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pBuilder) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 16|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($2) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13) + (($11*72)|0)|0) + 8|0);
 $15 = ((($13) + (($11*72)|0)|0) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($pBuilder) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_allocateIndexInfo($3,$6,$14,$18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = $8;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($8) + 18|0);
 HEAP16[$25>>1] = 0;
 $26 = (($8) + 36|0);
 HEAP32[$26>>2] = 1024;
 $27 = (($8) + 40|0);
 HEAP16[$27>>1] = 0;
 $28 = (($8) + 28|0);
 HEAP8[$28>>0] = 0;
 $29 = (($19) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$19>>2]|0;
 $32 = (_whereLoopResize($4,$8,$31)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  _sqlite3DbFree($4,$19);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($19) + 4|0);
 $35 = (($19) + 28|0);
 $36 = (($19) + 24|0);
 $37 = (($19) + 20|0);
 $38 = (($19) + 32|0);
 $39 = (($19) + 40|0);
 $40 = (($19) + 48|0);
 $41 = ($31|0)>(0);
 $42 = (($8) + 30|0);
 $43 = (($8) + 24|0);
 $44 = (($8) + 32|0);
 $45 = (($19) + 8|0);
 $46 = (($8) + 29|0);
 $47 = (($8) + 20|0);
 $48 = (($8) + 22|0);
 $pBuilder$idx2 = (($pBuilder) + 16|0);
 $49 = (($6) + 12|0);
 $50 = (($8) + 44|0);
 $51 = (($6) + 20|0);
 $iPhase$029 = 0;$seenIn$027 = 0;$seenVar$028 = 0;
 L8: while(1) {
  $52 = ($seenIn$027|0)==(0);
  if ($52) {
   $53 = $iPhase$029 & 1;
   $54 = ($53|0)==(0);
   if ($54) {
    $iPhase$1 = $iPhase$029;
   } else {
    $55 = (($iPhase$029) + 1)|0;
    $56 = ($iPhase$029|0)>(2);
    if ($56) {
     $rc$1 = 0;
     break;
    } else {
     $iPhase$1 = $55;
    }
   }
  } else {
   $iPhase$1 = $iPhase$029;
  }
  $57 = ($seenVar$028|0)==(0);
  $58 = ($iPhase$1|0)>(1);
  $or$cond = $57 & $58;
  if ($or$cond) {
   $rc$1 = 0;
   break;
  }
  $59 = HEAP32[$19>>2]|0;
  $60 = ($59|0)>(0);
  if ($60) {
   $61 = HEAP32[$34>>2]|0;
   $i$05 = 0;$pIdxCons$06 = $61;$seenIn$17 = $seenIn$027;$seenVar$18 = $seenVar$028;
   while(1) {
    $62 = (($pIdxCons$06) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$51>>2]|0;
    if ((($iPhase$1|0) == 1)) {
     $80 = ((($64) + (($63*48)|0)|0) + 32|0);
     $81 = $80;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($81) + 4)|0;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $87 = ($83|0)==(0);
     $88 = ($86|0)==(0);
     $89 = $87 & $88;
     $90 = $89&1;
     $91 = (($pIdxCons$06) + 5|0);
     HEAP8[$91>>0] = $90;
     $seenIn$3 = $seenIn$17;$seenVar$2 = $seenVar$18;
    } else if ((($iPhase$1|0) == 2)) {
     $92 = ((($64) + (($63*48)|0)|0) + 18|0);
     $93 = HEAP16[$92>>1]|0;
     $94 = $93 & 1;
     $95 = $94 ^ 1;
     $96 = $95&255;
     $97 = (($pIdxCons$06) + 5|0);
     HEAP8[$97>>0] = $96;
     $seenIn$3 = $seenIn$17;$seenVar$2 = $seenVar$18;
    } else if ((($iPhase$1|0) == 0)) {
     $65 = (($pIdxCons$06) + 5|0);
     HEAP8[$65>>0] = 0;
     $66 = ((($64) + (($63*48)|0)|0) + 18|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67 & 1;
     $69 = ($68<<16>>16)==(0);
     $seenIn$1$ = $69 ? $seenIn$17 : 1;
     $70 = ((($64) + (($63*48)|0)|0) + 32|0);
     $71 = $70;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (($71) + 4)|0;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = ($73|0)!=(0);
     $78 = ($76|0)!=(0);
     $79 = $77 | $78;
     $$not4 = $69 ^ 1;
     $brmerge = $79 | $$not4;
     $$mux = $79 ? 1 : $seenVar$18;
     if ($brmerge) {
      $seenIn$3 = $seenIn$1$;$seenVar$2 = $$mux;
     } else {
      HEAP8[$65>>0] = 1;
      $seenIn$3 = $seenIn$1$;$seenVar$2 = $seenVar$18;
     }
    } else {
     $98 = (($pIdxCons$06) + 5|0);
     HEAP8[$98>>0] = 1;
     $seenIn$3 = $seenIn$17;$seenVar$2 = $seenVar$18;
    }
    $99 = (($i$05) + 1)|0;
    $100 = (($pIdxCons$06) + 12|0);
    $101 = HEAP32[$19>>2]|0;
    $102 = ($99|0)<($101|0);
    if ($102) {
     $i$05 = $99;$pIdxCons$06 = $100;$seenIn$17 = $seenIn$3;$seenVar$18 = $seenVar$2;
    } else {
     $$lcssa = $101;$seenIn$1$lcssa = $seenIn$3;$seenVar$1$lcssa = $seenVar$2;
     break;
    }
   }
  } else {
   $$lcssa = $59;$seenIn$1$lcssa = $seenIn$027;$seenVar$1$lcssa = $seenVar$028;
  }
  $103 = $$lcssa << 3;
  _memset(($30|0),0,($103|0))|0;
  $104 = HEAP32[$35>>2]|0;
  $105 = ($104|0)==(0);
  if (!($105)) {
   $106 = HEAP32[$36>>2]|0;
   _sqlite3_free($106);
  }
  ;HEAP32[$37+0>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;HEAP32[$37+12>>2]=0|0;
  HEAPF64[$39>>3] = 4.99999999999999983668E+98;
  $107 = $40;
  $108 = $107;
  HEAP32[$108>>2] = 25;
  $109 = (($107) + 4)|0;
  $110 = $109;
  HEAP32[$110>>2] = 0;
  $111 = (_vtabBestIndex($3,$16,$19)|0);
  $112 = ($111|0)==(0);
  if (!($112)) {
   $rc$1 = $111;
   break;
  }
  $113 = HEAP32[$34>>2]|0;
  $114 = $8;
  $115 = $114;
  HEAP32[$115>>2] = $0;
  $116 = (($114) + 4)|0;
  $117 = $116;
  HEAP32[$117>>2] = $1;
  L31: do {
   if ($41) {
    $i$111 = 0;
    while(1) {
     $118 = HEAP32[$50>>2]|0;
     $119 = (($118) + ($i$111<<2)|0);
     HEAP32[$119>>2] = 0;
     $120 = (($i$111) + 1)|0;
     $exitcond = ($120|0)==($31|0);
     if ($exitcond) {
      break;
     } else {
      $i$111 = $120;
     }
    }
    HEAP16[$42>>1] = 0;
    if ($41) {
     $146 = $0;$148 = $1;$160 = 0;$i$220 = 0;$mxTerm$022 = -1;$pIdxCons$123 = $113;
     while(1) {
      $121 = (($30) + ($i$220<<3)|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + -1)|0;
      $124 = ($122|0)>(0);
      if ($124) {
       $125 = (($pIdxCons$123) + 8|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($122|0)>($31|0);
       $128 = ($126|0)<(0);
       $or$cond1 = $127 | $128;
       if ($or$cond1) {
        label = 29;
        break L8;
       }
       $129 = HEAP32[$49>>2]|0;
       $130 = ($126|0)<($129|0);
       if (!($130)) {
        label = 29;
        break L8;
       }
       $131 = HEAP32[$50>>2]|0;
       $132 = (($131) + ($123<<2)|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if (!($134)) {
        label = 29;
        break L8;
       }
       $136 = HEAP32[$51>>2]|0;
       $137 = (($136) + (($126*48)|0)|0);
       $138 = ((($136) + (($126*48)|0)|0) + 32|0);
       $139 = $138;
       $140 = $139;
       $141 = HEAP32[$140>>2]|0;
       $142 = (($139) + 4)|0;
       $143 = $142;
       $144 = HEAP32[$143>>2]|0;
       $145 = $146 | $141;
       $147 = $148 | $144;
       $149 = $8;
       $150 = $149;
       HEAP32[$150>>2] = $145;
       $151 = (($149) + 4)|0;
       $152 = $151;
       HEAP32[$152>>2] = $147;
       HEAP32[$132>>2] = $137;
       $153 = ($123|0)>($mxTerm$022|0);
       $$mxTerm$0 = $153 ? $123 : $mxTerm$022;
       $154 = ($122|0)<(17);
       if ($154) {
        $155 = ((($30) + ($i$220<<3)|0) + 4|0);
        $156 = HEAP8[$155>>0]|0;
        $157 = ($156<<24>>24)==(0);
        if ($157) {
         $204 = $160;
        } else {
         $158 = 1 << $123;
         $159 = $160&65535;
         $161 = $159 | $158;
         $162 = $161&65535;
         HEAP16[$42>>1] = $162;
         $204 = $162;
        }
       } else {
        $204 = $160;
       }
       $163 = ((($136) + (($126*48)|0)|0) + 18|0);
       $164 = HEAP16[$163>>1]|0;
       $165 = $164 & 1;
       $166 = ($165<<16>>16)==(0);
       if ($166) {
        $201 = $204;$202 = $145;$203 = $147;$mxTerm$2 = $$mxTerm$0;
       } else {
        $167 = ((($30) + ($i$220<<3)|0) + 4|0);
        $168 = HEAP8[$167>>0]|0;
        $169 = ($168<<24>>24)==(0);
        if ($169) {
         break L31;
        }
        HEAP32[$38>>2] = 0;
        $201 = $204;$202 = $145;$203 = $147;$mxTerm$2 = $$mxTerm$0;
       }
      } else {
       $201 = $160;$202 = $146;$203 = $148;$mxTerm$2 = $mxTerm$022;
      }
      $170 = (($i$220) + 1)|0;
      $171 = (($pIdxCons$123) + 12|0);
      $172 = ($170|0)<($31|0);
      if ($172) {
       $146 = $202;$148 = $203;$160 = $201;$i$220 = $170;$mxTerm$022 = $mxTerm$2;$pIdxCons$123 = $171;
      } else {
       $mxTerm$0$lcssa = $mxTerm$2;
       label = 37;
       break;
      }
     }
    } else {
     $mxTerm$0$lcssa = -1;
     label = 37;
    }
   } else {
    HEAP16[$42>>1] = 0;
    $mxTerm$0$lcssa = -1;
    label = 37;
   }
  } while(0);
  if ((label|0) == 37) {
   label = 0;
   $173 = (($mxTerm$0$lcssa) + 1)|0;
   $174 = $173&65535;
   HEAP16[$27>>1] = $174;
   $175 = HEAP32[$37>>2]|0;
   HEAP32[$43>>2] = $175;
   $176 = HEAP32[$35>>2]|0;
   $177 = $176&255;
   HEAP8[$28>>0] = $177;
   HEAP32[$35>>2] = 0;
   $178 = HEAP32[$36>>2]|0;
   HEAP32[$44>>2] = $178;
   $179 = HEAP32[$45>>2]|0;
   $180 = ($179|0)==(0);
   if ($180) {
    $183 = 0;
   } else {
    $181 = HEAP32[$38>>2]|0;
    $182 = ($181|0)!=(0);
    $phitmp = $182&1;
    $183 = $phitmp;
   }
   HEAP8[$46>>0] = $183;
   HEAP16[$25>>1] = 0;
   $184 = +HEAPF64[$39>>3];
   $185 = (_sqlite3LogEstFromDouble($184)|0);
   HEAP16[$47>>1] = $185;
   $186 = $40;
   $187 = $186;
   $188 = HEAP32[$187>>2]|0;
   $189 = (($186) + 4)|0;
   $190 = $189;
   $191 = HEAP32[$190>>2]|0;
   $192 = (_sqlite3LogEst($188,$191)|0);
   HEAP16[$48>>1] = $192;
   $pBuilder$idx$val = HEAP32[$pBuilder>>2]|0;
   $pBuilder$idx2$val = HEAP32[$pBuilder$idx2>>2]|0;
   (_whereLoopInsert($pBuilder$idx$val,$pBuilder$idx2$val,$8)|0);
   $193 = HEAP8[$28>>0]|0;
   $194 = ($193<<24>>24)==(0);
   if (!($194)) {
    $195 = HEAP32[$44>>2]|0;
    _sqlite3_free($195);
    HEAP8[$28>>0] = 0;
   }
  }
  $196 = (($iPhase$1) + 1)|0;
  $197 = ($196|0)<(4);
  if ($197) {
   $iPhase$029 = $196;$seenIn$027 = $seenIn$1$lcssa;$seenVar$028 = $seenVar$1$lcssa;
  } else {
   $rc$1 = 0;
   break;
  }
 }
 if ((label|0) == 29) {
  $135 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $135;
  _sqlite3ErrorMsg($3,24112,$vararg_buffer);
  $rc$1 = 1;
 }
 $198 = HEAP32[$35>>2]|0;
 $199 = ($198|0)==(0);
 if (!($199)) {
  $200 = HEAP32[$36>>2]|0;
  _sqlite3_free($200);
 }
 _sqlite3DbFree($4,$19);
 $$0 = $rc$1;
 STACKTOP = sp;return ($$0|0);
}
function _whereLoopAddBtree($pBuilder,$0,$1) {
 $pBuilder = $pBuilder|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aiColumnPk = 0;
 var $aiRowEstPk = 0, $iSortIdx$015 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond814 = 0, $pBuilder$idx$val = 0, $pBuilder$idx10$val = 0, $pBuilder$idx11$val = 0, $pBuilder$idx12$val = 0, $pBuilder$idx13$val = 0, $pBuilder$idx9$val = 0, $pProbe$0 = 0, $pProbe$119 = 0, $pTerm$022 = 0, $rc$1 = 0, $rc$2$ph = 0, $rc$3 = 0, $rc$4 = 0, $sPk = 0;
 var $storemerge = 0, $storemerge26 = 0, $storemerge26$in = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sPk = sp + 8|0;
 $aiRowEstPk = sp;
 $aiColumnPk = sp + 64|0;
 HEAP16[$aiColumnPk>>1] = -1;
 $2 = (($pBuilder) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$pBuilder>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + 16|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($6) + (($9*72)|0)|0) + 8|0);
 $11 = ((($6) + (($9*72)|0)|0) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($pBuilder) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($6) + (($9*72)|0)|0) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 do {
  if ($17) {
   $18 = (($12) + 44|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 & 32;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = (($12) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $pProbe$0 = $23;
    break;
   }
   dest=$sPk+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $24 = (($sPk) + 50|0);
   HEAP16[$24>>1] = 1;
   $25 = (($sPk) + 4|0);
   HEAP32[$25>>2] = $aiColumnPk;
   $26 = (($sPk) + 8|0);
   HEAP32[$26>>2] = $aiRowEstPk;
   $27 = (($sPk) + 54|0);
   HEAP8[$27>>0] = 5;
   $28 = (($sPk) + 12|0);
   HEAP32[$28>>2] = $12;
   $29 = (($12) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$aiRowEstPk>>2] = $30;
   $31 = (($aiRowEstPk) + 4|0);
   HEAP32[$31>>2] = 1;
   $32 = ((($6) + (($9*72)|0)|0) + 45|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $36 = HEAP32[$11>>2]|0;
    $37 = (($36) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($sPk) + 20|0);
    HEAP32[$39>>2] = $38;
    $pProbe$0 = $sPk;
   } else {
    $pProbe$0 = $sPk;
   }
  } else {
   $pProbe$0 = $16;
  }
 } while(0);
 $40 = (($12) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_sqlite3LogEst($41,0)|0);
 $43 = (_estLog($42)|0);
 $44 = (($pBuilder) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = HEAP32[$4>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 24|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 1048576;
  $52 = ($51|0)==(0);
  if ($52) {
   $rc$2$ph = 0;
  } else {
   $53 = HEAP32[$15>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $55 = ((($6) + (($9*72)|0)|0) + 45|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 & 5;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $59 = (($12) + 44|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 & 32;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $63 = $56 & 10;
      $64 = ($63<<24>>24)==(0);
      if ($64) {
       $84 = (($14) + 20|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($14) + 12|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (($85) + (($87*48)|0)|0);
       $89 = ($87|0)>(0);
       if ($89) {
        $90 = (($3) + 8|0);
        $91 = (($3) + 24|0);
        $92 = (($91) + 2|0);
        $93 = (($3) + 28|0);
        $94 = (($3) + 40|0);
        $95 = (($3) + 44|0);
        $96 = $43&65535;
        $97 = $42&65535;
        $98 = (($97) + 28)|0;
        $99 = (($98) + ($96))|0;
        $100 = $99&65535;
        $101 = (($3) + 18|0);
        $102 = (($3) + 22|0);
        $103 = (($3) + 20|0);
        $104 = (($3) + 36|0);
        $pTerm$022 = $85;
        while(1) {
         $105 = (($pTerm$022) + 32|0);
         $106 = $105;
         $107 = $106;
         $108 = HEAP32[$107>>2]|0;
         $109 = (($106) + 4)|0;
         $110 = $109;
         $111 = HEAP32[$110>>2]|0;
         $112 = $90;
         $113 = $112;
         $114 = HEAP32[$113>>2]|0;
         $115 = (($112) + 4)|0;
         $116 = $115;
         $117 = HEAP32[$116>>2]|0;
         $118 = $114 & $108;
         $119 = $117 & $111;
         $120 = ($118|0)==(0);
         $121 = ($119|0)==(0);
         $122 = $120 & $121;
         if ($122) {
          $123 = (_termCanDriveIndex($pTerm$022,$10,0,0)|0);
          $124 = ($123|0)==(0);
          if ($124) {
           $rc$1 = 0;
          } else {
           HEAP16[$91>>1] = 1;
           HEAP16[$92>>1] = 0;
           HEAP32[$93>>2] = 0;
           HEAP16[$94>>1] = 1;
           $125 = HEAP32[$95>>2]|0;
           HEAP32[$125>>2] = $pTerm$022;
           HEAP16[$101>>1] = $100;
           HEAP16[$102>>1] = 43;
           $126 = (_sqlite3LogEstAdd($43,43)|0);
           HEAP16[$103>>1] = $126;
           HEAP32[$104>>2] = 16384;
           $127 = $105;
           $128 = $127;
           $129 = HEAP32[$128>>2]|0;
           $130 = (($127) + 4)|0;
           $131 = $130;
           $132 = HEAP32[$131>>2]|0;
           $133 = $129 | $0;
           $134 = $132 | $1;
           $135 = $3;
           $136 = $135;
           HEAP32[$136>>2] = $133;
           $137 = (($135) + 4)|0;
           $138 = $137;
           HEAP32[$138>>2] = $134;
           $pBuilder$idx12$val = HEAP32[$pBuilder>>2]|0;
           $pBuilder$idx13$val = HEAP32[$44>>2]|0;
           $139 = (_whereLoopInsert($pBuilder$idx12$val,$pBuilder$idx13$val,$3)|0);
           $rc$1 = $139;
          }
         } else {
          $rc$1 = 0;
         }
         $140 = (($pTerm$022) + 48|0);
         $141 = ($rc$1|0)==(0);
         $142 = ($140>>>0)<($88>>>0);
         $or$cond7 = $141 & $142;
         if ($or$cond7) {
          $pTerm$022 = $140;
         } else {
          $rc$2$ph = $rc$1;
          break;
         }
        }
       } else {
        $rc$2$ph = 0;
       }
      } else {
       $rc$2$ph = 0;
      }
     } else {
      $rc$2$ph = 0;
     }
    } else {
     $rc$2$ph = 0;
    }
   } else {
    $rc$2$ph = 0;
   }
  }
 } else {
  $rc$2$ph = 0;
 }
 $65 = (($3) + 36|0);
 $66 = ($rc$2$ph|0)!=(0);
 $67 = ($pProbe$0|0)==(0|0);
 $or$cond814 = $66 | $67;
 if ($or$cond814) {
  $rc$4 = $rc$2$ph;
  STACKTOP = sp;return ($rc$4|0);
 }
 $68 = (($3) + 24|0);
 $69 = (($68) + 2|0);
 $70 = (($3) + 40|0);
 $71 = (($3) + 17|0);
 $72 = (($3) + 18|0);
 $73 = (($3) + 22|0);
 $74 = (($3) + 28|0);
 $75 = ((($6) + (($9*72)|0)|0) + 48|0);
 $76 = (($3) + 20|0);
 $77 = ((($6) + (($9*72)|0)|0) + 64|0);
 $78 = (($12) + 42|0);
 $79 = $42&65535;
 $80 = $43&65535;
 $81 = (($80) + ($79))|0;
 $82 = (($12) + 44|0);
 $83 = (($4) + 34|0);
 $iSortIdx$015 = 1;$pProbe$119 = $pProbe$0;
 L26: while(1) {
  $143 = (($pProbe$119) + 36|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(0|0);
  if ($145) {
   label = 22;
  } else {
   $146 = HEAP8[$7>>0]|0;
   $147 = $146&255;
   $148 = (_whereUsablePartialIndex($147,$14,$144)|0);
   $149 = ($148|0)==(0);
   if ($149) {
    $rc$3 = 0;
   } else {
    label = 22;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP16[$68>>1] = 0;
   HEAP16[$69>>1] = 0;
   HEAP16[$70>>1] = 0;
   HEAP8[$71>>0] = 0;
   HEAP16[$72>>1] = 0;
   $150 = $3;
   $151 = $150;
   HEAP32[$151>>2] = $0;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $1;
   HEAP16[$73>>1] = $42;
   HEAP32[$74>>2] = $pProbe$119;
   $154 = HEAP32[$75>>2]|0;
   $155 = (_indexMightHelpWithOrderBy($pBuilder,$pProbe$119,$154)|0);
   $156 = (($pProbe$119) + 44|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)<(1);
   do {
    if ($158) {
     HEAP32[$65>>2] = 256;
     $159 = ($155|0)!=(0);
     $160 = $iSortIdx$015&255;
     $161 = $159 ? $160 : 0;
     HEAP8[$71>>0] = $161;
     $162 = (_sqlite3LogEstAdd($42,$43)|0);
     $163 = $162&65535;
     $164 = (($163) + 16)|0;
     $165 = $164&65535;
     HEAP16[$76>>1] = $165;
     _whereLoopOutputAdjust($14,$3);
     $pBuilder$idx10$val = HEAP32[$pBuilder>>2]|0;
     $pBuilder$idx11$val = HEAP32[$44>>2]|0;
     $166 = (_whereLoopInsert($pBuilder$idx10$val,$pBuilder$idx11$val,$3)|0);
     HEAP16[$73>>1] = $42;
     $167 = ($166|0)==(0);
     if (!($167)) {
      $rc$4 = $166;
      label = 38;
      break L26;
     }
    } else {
     $168 = (($pProbe$119) + 55|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $169 & 32;
     $171 = ($170<<24>>24)==(0);
     if ($171) {
      $172 = $77;
      $173 = $172;
      $174 = HEAP32[$173>>2]|0;
      $175 = (($172) + 4)|0;
      $176 = $175;
      $177 = HEAP32[$176>>2]|0;
      $178 = (_columnsInIndex($pProbe$119)|0);
      $179 = tempRet0;
      $180 = $178 ^ -1;
      $181 = $179 ^ -1;
      $182 = $174 & $180;
      $183 = $177 & $181;
      $184 = ($182|0)==(0);
      $185 = ($183|0)==(0);
      $186 = $184 & $185;
      $187 = $186 ? 576 : 512;
      $193 = $182;$195 = $183;$storemerge = $187;
     } else {
      $193 = 0;$195 = 0;$storemerge = 576;
     }
     HEAP32[$65>>2] = $storemerge;
     $188 = ($155|0)!=(0);
     if (!($188)) {
      $189 = HEAP8[$82>>0]|0;
      $190 = $189 & 32;
      $191 = ($190<<24>>24)==(0);
      if ($191) {
       $192 = ($193|0)==(0);
       $194 = ($195|0)==(0);
       $196 = $192 & $194;
       if (!($196)) {
        break;
       }
       $197 = HEAP8[$168>>0]|0;
       $198 = $197 & 4;
       $199 = ($198<<24>>24)==(0);
       if (!($199)) {
        break;
       }
       $200 = (($pProbe$119) + 48|0);
       $201 = HEAP16[$200>>1]|0;
       $202 = HEAP16[$78>>1]|0;
       $203 = ($201<<16>>16)<($202<<16>>16);
       if (!($203)) {
        break;
       }
       $204 = HEAP16[$83>>1]|0;
       $205 = $204 & 4;
       $206 = ($205<<16>>16)==(0);
       $207 = HEAP32[((384 + 16|0))>>2]|0;
       $208 = ($207|0)!=(0);
       $or$cond = $206 & $208;
       if (!($or$cond)) {
        break;
       }
       $209 = HEAP32[$4>>2]|0;
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 60|0);
       $212 = HEAP16[$211>>1]|0;
       $213 = $212 & 64;
       $214 = ($213<<16>>16)==(0);
       if (!($214)) {
        break;
       }
      }
     }
     $215 = $iSortIdx$015&255;
     $216 = $188 ? $215 : 0;
     HEAP8[$71>>0] = $216;
     $217 = ($193|0)==(0);
     $218 = ($195|0)==(0);
     $219 = $217 & $218;
     if ($219) {
      $220 = (_sqlite3LogEstAdd($42,$43)|0);
      $221 = $220&65535;
      $222 = (($221) + 1)|0;
      $223 = (($pProbe$119) + 48|0);
      $224 = HEAP16[$223>>1]|0;
      $225 = $224 << 16 >> 16;
      $226 = ($225*15)|0;
      $227 = HEAP16[$78>>1]|0;
      $228 = $227 << 16 >> 16;
      $229 = (($226|0) / ($228|0))&-1;
      $230 = (($222) + ($229))|0;
      $storemerge26$in = $230;
     } else {
      $storemerge26$in = $81;
     }
     $storemerge26 = $storemerge26$in&65535;
     HEAP16[$76>>1] = $storemerge26;
     _whereLoopOutputAdjust($14,$3);
     $pBuilder$idx$val = HEAP32[$pBuilder>>2]|0;
     $pBuilder$idx9$val = HEAP32[$44>>2]|0;
     $231 = (_whereLoopInsert($pBuilder$idx$val,$pBuilder$idx9$val,$3)|0);
     HEAP16[$73>>1] = $42;
     $232 = ($231|0)==(0);
     if (!($232)) {
      $rc$4 = $231;
      label = 38;
      break L26;
     }
    }
   } while(0);
   $233 = (_whereLoopAddBtreeIndex($pBuilder,$10,$pProbe$119,0)|0);
   $234 = HEAP32[$15>>2]|0;
   $235 = ($234|0)==(0|0);
   if ($235) {
    $rc$3 = $233;
   } else {
    $rc$4 = $233;
    label = 38;
    break;
   }
  }
  $236 = (($pProbe$119) + 20|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($iSortIdx$015) + 1)|0;
  $239 = ($rc$3|0)!=(0);
  $240 = ($237|0)==(0|0);
  $or$cond8 = $239 | $240;
  if ($or$cond8) {
   $rc$4 = $rc$3;
   label = 38;
   break;
  } else {
   $iSortIdx$015 = $238;$pProbe$119 = $237;
  }
 }
 if ((label|0) == 38) {
  STACKTOP = sp;return ($rc$4|0);
 }
 return 0|0;
}
function _whereLoopAddOr($pBuilder,$0,$1) {
 $pBuilder = $pBuilder|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$04 = 0, $i$112 = 0, $j$03 = 0, $once$09 = 0, $once$1 = 0, $pBuilder$idx$val = 0, $pBuilder$idx2 = 0, $pBuilder$idx2$val = 0, $pOrTerm$08 = 0, $pTerm$017 = 0, $rc$17 = 0, $rc$2 = 0, $rc$3 = 0, $rc$4 = 0, $sCur = 0;
 var $sPrev = 0, $sSubBuild = 0, $sSum = 0, $storemerge = 0, $tempWC = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $tempWC = sp + 168|0;
 $sSubBuild = sp + 576|0;
 $sSum = sp + 112|0;
 $sCur = sp + 56|0;
 $sPrev = sp;
 $2 = HEAP32[$pBuilder>>2]|0;
 $3 = (($pBuilder) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 34|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 128;
 $8 = ($7<<16>>16)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($4) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($4) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + (($12*48)|0)|0);
 $14 = (($pBuilder) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 dest=$sSum+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $16 = (($2) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 16|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ((($17) + (($20*72)|0)|0) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 44|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 32;
 $26 = ($25<<24>>24)==(0);
 if (!($26)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($17) + (($20*72)|0)|0) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($12|0)>(0);
 if (!($29)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (($15) + 8|0);
 $31 = (($sSubBuild) + 8|0);
 $32 = (($sSubBuild) + 16|0);
 $33 = (($15) + 40|0);
 $34 = (($15) + 44|0);
 $35 = (($15) + 36|0);
 $36 = (($15) + 18|0);
 $37 = (($15) + 17|0);
 $38 = (($15) + 24|0);
 $39 = (($15) + 20|0);
 $40 = (($15) + 22|0);
 $pBuilder$idx2 = (($pBuilder) + 16|0);
 $41 = (($tempWC) + 4|0);
 $42 = (($tempWC) + 8|0);
 $43 = (($tempWC) + 12|0);
 $44 = (($tempWC) + 20|0);
 $45 = (($sSubBuild) + 4|0);
 $pTerm$017 = $10;
 L10: while(1) {
  $46 = (($pTerm$017) + 18|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 & 256;
  $49 = ($48<<16>>16)==(0);
  L12: do {
   if (!($49)) {
    $50 = (($pTerm$017) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + 408|0);
    $53 = $52;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $30;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + 4)|0;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = $61 & $55;
    $66 = $64 & $58;
    $67 = ($65|0)==(0);
    $68 = ($66|0)==(0);
    $69 = $67 & $68;
    if (!($69)) {
     $70 = (($51) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($51) + 20|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + (($71*48)|0)|0);
     ;HEAP32[$sSubBuild+0>>2]=HEAP32[$pBuilder+0>>2]|0;HEAP32[$sSubBuild+4>>2]=HEAP32[$pBuilder+4>>2]|0;HEAP32[$sSubBuild+8>>2]=HEAP32[$pBuilder+8>>2]|0;HEAP32[$sSubBuild+12>>2]=HEAP32[$pBuilder+12>>2]|0;
     HEAP32[$31>>2] = 0;
     HEAP32[$32>>2] = $sCur;
     $75 = HEAP32[$72>>2]|0;
     $76 = ($75>>>0)<($74>>>0);
     L15: do {
      if ($76) {
       $once$09 = 1;$pOrTerm$08 = $75;$rc$17 = 0;
       L16: while(1) {
        $77 = (($pOrTerm$08) + 18|0);
        $78 = HEAP16[$77>>1]|0;
        $79 = $78 & 512;
        $80 = ($79<<16>>16)==(0);
        if ($80) {
         $83 = (($pOrTerm$08) + 8|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = ($84|0)==($28|0);
         if ($85) {
          $86 = HEAP32[$4>>2]|0;
          HEAP32[$tempWC>>2] = $86;
          HEAP32[$41>>2] = $4;
          HEAP8[$42>>0] = 72;
          HEAP32[$43>>2] = 1;
          HEAP32[$44>>2] = $pOrTerm$08;
          $storemerge = $tempWC;
          label = 12;
         } else {
          $once$1 = $once$09;$rc$3 = $rc$17;
         }
        } else {
         $81 = (($pOrTerm$08) + 12|0);
         $82 = HEAP32[$81>>2]|0;
         $storemerge = $82;
         label = 12;
        }
        do {
         if ((label|0) == 12) {
          label = 0;
          HEAP32[$45>>2] = $storemerge;
          HEAP16[$sCur>>1] = 0;
          $87 = HEAP32[$21>>2]|0;
          $88 = (($87) + 44|0);
          $89 = HEAP8[$88>>0]|0;
          $90 = $89 & 16;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           $93 = (_whereLoopAddBtree($sSubBuild,$0,$1)|0);
           $rc$2 = $93;
          } else {
           $92 = (_whereLoopAddVirtual($sSubBuild,$0,$1)|0);
           $rc$2 = $92;
          }
          $94 = HEAP16[$sCur>>1]|0;
          $95 = ($94<<16>>16)==(0);
          if ($95) {
           break L16;
          }
          $96 = ($once$09|0)==(0);
          if (!($96)) {
           _whereOrMove($sSum,$sCur);
           $once$1 = 0;$rc$3 = $rc$2;
           break;
          }
          _whereOrMove($sPrev,$sSum);
          HEAP16[$sSum>>1] = 0;
          $97 = HEAP16[$sPrev>>1]|0;
          $98 = ($97<<16>>16)==(0);
          if ($98) {
           $once$1 = 0;$rc$3 = $rc$2;
          } else {
           $99 = $97&65535;
           $$pre = HEAP16[$sCur>>1]|0;
           $101 = $$pre;$i$04 = 0;
           while(1) {
            $100 = ($101<<16>>16)==(0);
            if ($100) {
             $164 = 0;
            } else {
             $102 = ((($sPrev) + ($i$04<<4)|0) + 8|0);
             $103 = $102;
             $104 = $103;
             $105 = HEAP32[$104>>2]|0;
             $106 = (($103) + 4)|0;
             $107 = $106;
             $108 = HEAP32[$107>>2]|0;
             $109 = ((($sPrev) + ($i$04<<4)|0) + 16|0);
             $110 = HEAP16[$109>>1]|0;
             $111 = ((($sPrev) + ($i$04<<4)|0) + 18|0);
             $112 = HEAP16[$111>>1]|0;
             $j$03 = 0;
             while(1) {
              $113 = ((($sCur) + ($j$03<<4)|0) + 8|0);
              $114 = $113;
              $115 = $114;
              $116 = HEAP32[$115>>2]|0;
              $117 = (($114) + 4)|0;
              $118 = $117;
              $119 = HEAP32[$118>>2]|0;
              $120 = $116 | $105;
              $121 = $119 | $108;
              $122 = ((($sCur) + ($j$03<<4)|0) + 16|0);
              $123 = HEAP16[$122>>1]|0;
              $124 = (_sqlite3LogEstAdd($110,$123)|0);
              $125 = ((($sCur) + ($j$03<<4)|0) + 18|0);
              $126 = HEAP16[$125>>1]|0;
              $127 = (_sqlite3LogEstAdd($112,$126)|0);
              _whereOrInsert($sSum,$120,$121,$124,$127);
              $128 = (($j$03) + 1)|0;
              $129 = HEAP16[$sCur>>1]|0;
              $130 = $129&65535;
              $131 = ($128|0)<($130|0);
              if ($131) {
               $j$03 = $128;
              } else {
               $164 = $129;
               break;
              }
             }
            }
            $132 = (($i$04) + 1)|0;
            $133 = ($132|0)<($99|0);
            if ($133) {
             $101 = $164;$i$04 = $132;
            } else {
             $once$1 = 0;$rc$3 = $rc$2;
             break;
            }
           }
          }
         }
        } while(0);
        $134 = (($pOrTerm$08) + 48|0);
        $135 = ($134>>>0)<($74>>>0);
        if ($135) {
         $once$09 = $once$1;$pOrTerm$08 = $134;$rc$17 = $rc$3;
        } else {
         $rc$4 = $rc$3;
         break L15;
        }
       }
       HEAP16[$sSum>>1] = 0;
       $rc$4 = $rc$2;
      } else {
       $rc$4 = 0;
      }
     } while(0);
     HEAP16[$33>>1] = 1;
     $136 = HEAP32[$34>>2]|0;
     HEAP32[$136>>2] = $pTerm$017;
     HEAP32[$35>>2] = 8192;
     HEAP16[$36>>1] = 0;
     HEAP8[$37>>0] = 0;
     ;HEAP32[$38+0>>2]=0|0;HEAP32[$38+4>>2]=0|0;HEAP32[$38+8>>2]=0|0;
     $137 = ($rc$4|0)==(0);
     if (!($137)) {
      $$0 = $rc$4;
      label = 31;
      break L10;
     }
     $138 = HEAP16[$sSum>>1]|0;
     $139 = $138&65535;
     $i$112 = 0;
     while(1) {
      $140 = ($i$112|0)<($139|0);
      if (!($140)) {
       break L12;
      }
      $141 = ((($sSum) + ($i$112<<4)|0) + 16|0);
      $142 = HEAP16[$141>>1]|0;
      $143 = $142&65535;
      $144 = (($143) + 18)|0;
      $145 = $144&65535;
      HEAP16[$39>>1] = $145;
      $146 = ((($sSum) + ($i$112<<4)|0) + 18|0);
      $147 = HEAP16[$146>>1]|0;
      HEAP16[$40>>1] = $147;
      $148 = ((($sSum) + ($i$112<<4)|0) + 8|0);
      $149 = $148;
      $150 = $149;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($149) + 4)|0;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = $15;
      $156 = $155;
      HEAP32[$156>>2] = $151;
      $157 = (($155) + 4)|0;
      $158 = $157;
      HEAP32[$158>>2] = $154;
      $pBuilder$idx$val = HEAP32[$pBuilder>>2]|0;
      $pBuilder$idx2$val = HEAP32[$pBuilder$idx2>>2]|0;
      $159 = (_whereLoopInsert($pBuilder$idx$val,$pBuilder$idx2$val,$15)|0);
      $160 = (($i$112) + 1)|0;
      $161 = ($159|0)==(0);
      if ($161) {
       $i$112 = $160;
      } else {
       $$0 = $159;
       label = 31;
       break L10;
      }
     }
    }
   }
  } while(0);
  $162 = (($pTerm$017) + 48|0);
  $163 = ($162>>>0)<($13>>>0);
  if ($163) {
   $pTerm$017 = $162;
  } else {
   $$0 = 0;
   label = 31;
   break;
  }
 }
 if ((label|0) == 31) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _whereOrMove($pDest,$pSrc) {
 $pDest = $pDest|0;
 $pSrc = $pSrc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$pSrc>>1]|0;
 HEAP16[$pDest>>1] = $0;
 $1 = (($pDest) + 8|0);
 $2 = (($pSrc) + 8|0);
 $3 = $0&65535;
 $4 = $3 << 4;
 _memcpy(($1|0),($2|0),($4|0))|0;
 STACKTOP = sp;return;
}
function _whereOrInsert($pSet,$0,$1,$rRun,$nOut) {
 $pSet = $pSet|0;
 $0 = $0|0;
 $1 = $1|0;
 $rRun = $rRun|0;
 $nOut = $nOut|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $indvars$iv = 0, $indvars$iv$next = 0;
 var $p$08 = 0, $p$12 = 0, $p$2 = 0, $p$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$pSet>>1]|0;
 $3 = (($pSet) + 8|0);
 $4 = ($2<<16>>16)==(0);
 L1: do {
  if ($4) {
   label = 9;
  } else {
   $i$07 = $2;$p$08 = $3;
   while(1) {
    $5 = (($p$08) + 8|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = ($6<<16>>16)<($rRun<<16>>16);
    if (!($7)) {
     $8 = $p$08;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $10 & $0;
     $15 = $13 & $1;
     $16 = ($14|0)==($0|0);
     $17 = ($15|0)==($1|0);
     $18 = $16 & $17;
     if ($18) {
      $p$3 = $p$08;
      break L1;
     }
    }
    $19 = ($6<<16>>16)>($rRun<<16>>16);
    if (!($19)) {
     $20 = $p$08;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     $23 = (($20) + 4)|0;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = $22 & $0;
     $27 = $25 & $1;
     $28 = ($26|0)==($22|0);
     $29 = ($27|0)==($25|0);
     $30 = $28 & $29;
     if ($30) {
      label = 16;
      break;
     }
    }
    $31 = (($i$07) + -1)<<16>>16;
    $32 = (($p$08) + 16|0);
    $33 = ($31<<16>>16)==(0);
    if ($33) {
     break;
    } else {
     $i$07 = $31;$p$08 = $32;
    }
   }
   if ((label|0) == 16) {
    STACKTOP = sp;return;
   }
   $34 = ($2&65535)<(3);
   if ($34) {
    label = 9;
   } else {
    $35 = (($pSet) + 16|0);
    $36 = HEAP16[$35>>1]|0;
    $44 = $36;$indvars$iv = 1;$p$12 = $3;
    while(1) {
     $41 = ((($pSet) + ($indvars$iv<<4)|0) + 16|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = ($44<<16>>16)>($42<<16>>16);
     if ($43) {
      $45 = ((($pSet) + ($indvars$iv<<4)|0) + 8|0);
      $p$2 = $45;
     } else {
      $p$2 = $p$12;
     }
     $indvars$iv$next = (($indvars$iv) + 1)|0;
     $46 = $indvars$iv$next&65535;
     $47 = ($46&65535)<($2&65535);
     $48 = (($p$2) + 8|0);
     $49 = HEAP16[$48>>1]|0;
     if ($47) {
      $44 = $49;$indvars$iv = $indvars$iv$next;$p$12 = $p$2;
     } else {
      break;
     }
    }
    $50 = ($49<<16>>16)>($rRun<<16>>16);
    if ($50) {
     $p$3 = $p$2;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $37 = $2&65535;
  $38 = (($2) + 1)<<16>>16;
  HEAP16[$pSet>>1] = $38;
  $39 = ((($pSet) + ($37<<4)|0) + 8|0);
  $40 = ((($pSet) + ($37<<4)|0) + 18|0);
  HEAP16[$40>>1] = $nOut;
  $p$3 = $39;
 }
 $51 = $p$3;
 $52 = $51;
 HEAP32[$52>>2] = $0;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = $1;
 $55 = (($p$3) + 8|0);
 HEAP16[$55>>1] = $rRun;
 $56 = (($p$3) + 10|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = ($57<<16>>16)>($nOut<<16>>16);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 HEAP16[$56>>1] = $nOut;
 STACKTOP = sp;return;
}
function _whereLoopInsert($pBuilder$0$0$val,$pBuilder$0$4$val,$pTemplate) {
 $pBuilder$0$0$val = $pBuilder$0$0$val|0;
 $pBuilder$0$4$val = $pBuilder$0$4$val|0;
 $pTemplate = $pTemplate|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $p$0 = 0, $p$0$in$lcssa = 0, $p$0$in19 = 0, $p$0$in5 = 0, $p$018 = 0, $p$020 = 0, $p$1 = 0, $pNext$0 = 0, $pNext$0$in = 0;
 var $pNext$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pBuilder$0$0$val>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($pBuilder$0$4$val|0)==(0|0);
 if (!($2)) {
  $3 = $pTemplate;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($pTemplate) + 20|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = (($pTemplate) + 22|0);
  $12 = HEAP16[$11>>1]|0;
  _whereOrInsert($pBuilder$0$4$val,$5,$8,$10,$12);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($pBuilder$0$0$val) + 16|0);
 $p$018 = HEAP32[$13>>2]|0;
 $14 = ($p$018|0)==(0|0);
 L5: do {
  if ($14) {
   $p$0$in$lcssa = $13;
   label = 21;
  } else {
   $15 = (($pTemplate) + 16|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = (($pTemplate) + 17|0);
   $18 = (($pTemplate) + 18|0);
   $19 = (($pTemplate) + 20|0);
   $20 = (($pTemplate) + 22|0);
   $p$0$in19 = $13;$p$020 = $p$018;
   while(1) {
    $21 = (($p$020) + 16|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==($16<<24>>24);
    if ($23) {
     $24 = (($p$020) + 17|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = HEAP8[$17>>0]|0;
     $27 = ($25<<24>>24)==($26<<24>>24);
     if ($27) {
      $28 = $p$020;
      $29 = $28;
      $30 = HEAP32[$29>>2]|0;
      $31 = (($28) + 4)|0;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = $pTemplate;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = (($34) + 4)|0;
      $38 = $37;
      $39 = HEAP32[$38>>2]|0;
      $40 = $36 & $30;
      $41 = $39 & $33;
      $42 = ($40|0)==($30|0);
      $43 = ($41|0)==($33|0);
      $44 = $42 & $43;
      if ($44) {
       $45 = (($p$020) + 18|0);
       $46 = HEAP16[$45>>1]|0;
       $47 = HEAP16[$18>>1]|0;
       $48 = ($46<<16>>16)>($47<<16>>16);
       if (!($48)) {
        $49 = (($p$020) + 20|0);
        $50 = HEAP16[$49>>1]|0;
        $51 = HEAP16[$19>>1]|0;
        $52 = ($50<<16>>16)>($51<<16>>16);
        if (!($52)) {
         $53 = $51 << 16 >> 16;
         $54 = $50 << 16 >> 16;
         $55 = (($p$020) + 22|0);
         $56 = HEAP16[$55>>1]|0;
         $57 = HEAP16[$20>>1]|0;
         $58 = ($56<<16>>16)>($57<<16>>16);
         if (!($58)) {
          label = 11;
          break;
         }
        }
       }
      }
      $84 = ($40|0)==($36|0);
      $85 = ($41|0)==($39|0);
      $86 = $84 & $85;
      if ($86) {
       $87 = (($p$020) + 20|0);
       $88 = HEAP16[$87>>1]|0;
       $89 = HEAP16[$19>>1]|0;
       $90 = ($88<<16>>16)<($89<<16>>16);
       if (!($90)) {
        $91 = (($p$020) + 22|0);
        $92 = HEAP16[$91>>1]|0;
        $93 = HEAP16[$20>>1]|0;
        $94 = ($92<<16>>16)<($93<<16>>16);
        if (!($94)) {
         break;
        }
       }
      }
     }
    }
    $95 = (($p$020) + 48|0);
    $p$0 = HEAP32[$95>>2]|0;
    $96 = ($p$0|0)==(0|0);
    if ($96) {
     $p$0$in$lcssa = $95;
     label = 21;
     break L5;
    } else {
     $p$0$in19 = $95;$p$020 = $p$0;
    }
   }
   if ((label|0) == 11) {
    $59 = ($30|0)==($36|0);
    $60 = ($33|0)==($39|0);
    $61 = $59 & $60;
    if (!($61)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $62 = (($p$020) + 40|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = (($pTemplate) + 40|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = ($63&65535)<($66&65535);
    if (!($68)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $69 = (($p$020) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($pTemplate) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $70 & 512;
    $74 = $73 & $72;
    $75 = ($74|0)==(0);
    if ($75) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $76 = (($p$020) + 28|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($pTemplate) + 28|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($77|0)==($79|0);
    if (!($80)) {
     $81 = (($64) + ($53))|0;
     $82 = (($67) + ($54))|0;
     $83 = ($81|0)>($82|0);
     if ($83) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
   $pNext$0$in = (($p$020) + 48|0);
   $pNext$0 = HEAP32[$pNext$0$in>>2]|0;
   $p$0$in5 = $p$0$in19;$p$1 = $p$020;$pNext$01 = $pNext$0;
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $97 = (_sqlite3DbMallocRaw($1,72)|0);
   $98 = ($97|0)==(0|0);
   if ($98) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    _whereLoopInit($97);
    $p$0$in5 = $p$0$in$lcssa;$p$1 = $97;$pNext$01 = 0;
    break;
   }
  }
 } while(0);
 _whereLoopXfer($1,$p$1,$pTemplate);
 $99 = (($p$1) + 48|0);
 HEAP32[$99>>2] = $pNext$01;
 HEAP32[$p$0$in5>>2] = $p$1;
 $100 = (($p$1) + 36|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $101 & 1024;
 $103 = ($102|0)==(0);
 if (!($103)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $104 = (($p$1) + 28|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ($105|0)==(0|0);
 if ($106) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $107 = (($105) + 44|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(0);
 if (!($109)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$104>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _whereLoopXfer($db,$pTo,$pFrom) {
 $db = $db|0;
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _whereLoopClearUnion($db,$pTo);
 $0 = (($pFrom) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (_whereLoopResize($db,$pTo,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($pTo) + 24|0);
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 dest=$pTo+0|0; src=$pFrom+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));HEAP16[$pTo+40>>1]=HEAP16[$pFrom+40>>1]|0;
 $6 = (($pTo) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pFrom) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pTo) + 40|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 << 2;
 _memcpy(($7|0),($9|0),($13|0))|0;
 $14 = (($pFrom) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1024;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = (($pFrom) + 28|0);
  HEAP8[$18>>0] = 0;
  STACKTOP = sp;return;
 }
 $19 = $15 & 16384;
 $20 = ($19|0)==(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = (($pFrom) + 28|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _whereUsablePartialIndex($iTab,$pWC,$pWhere) {
 $iTab = $iTab|0;
 $pWC = $pWC|0;
 $pWhere = $pWhere|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $pTerm$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWC) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pWC) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $i$01 = 0;$pTerm$02 = $4;
 while(1) {
  $5 = HEAP32[$pTerm$02>>2]|0;
  $6 = (_sqlite3ExprImpliesExpr($5,$pWhere,$iTab)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = 1;
   label = 5;
   break;
  }
  $8 = (($i$01) + 1)|0;
  $9 = (($pTerm$02) + 48|0);
  $10 = ($8|0)<($1|0);
  if ($10) {
   $i$01 = $8;$pTerm$02 = $9;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _indexMightHelpWithOrderBy($pBuilder,$pIndex,$iCursor) {
 $pBuilder = $pBuilder|0;
 $pIndex = $pIndex|0;
 $iCursor = $iCursor|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ii$05 = 0, $jj$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIndex) + 55|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 4;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$pBuilder>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ($8|0)>(0);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($6) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pIndex) + 50|0);
 $13 = (($pIndex) + 4|0);
 $ii$05 = 0;
 L10: while(1) {
  $14 = (($11) + (($ii$05*20)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_sqlite3ExprSkipCollate($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(-102);
  if (!($18)) {
   $$0 = 0;
   label = 12;
   break;
  }
  $19 = (($16) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==($iCursor|0);
  if ($21) {
   $22 = HEAP16[$12>>1]|0;
   $23 = ($22<<16>>16)==(0);
   if (!($23)) {
    $24 = (($16) + 32|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = HEAP32[$13>>2]|0;
    $jj$02 = 0;
    while(1) {
     $30 = (($26) + ($jj$02<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = ($25<<16>>16)==($31<<16>>16);
     $29 = (($jj$02) + 1)|0;
     if ($32) {
      $$0 = 1;
      label = 12;
      break L10;
     }
     $27 = $22&65535;
     $28 = ($29|0)<($27|0);
     if ($28) {
      $jj$02 = $29;
     } else {
      break;
     }
    }
   }
  }
  $33 = (($ii$05) + 1)|0;
  $34 = ($33|0)<($8|0);
  if ($34) {
   $ii$05 = $33;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _whereLoopOutputAdjust($pWC,$pLoop) {
 $pWC = $pWC|0;
 $pLoop = $pLoop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $i$09 = 0, $j$04 = 0;
 var $j$04$in = 0, $pTerm$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pLoop;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pLoop) + 8|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $9 | $2;
 $14 = $12 | $5;
 $15 = $13 ^ -1;
 $16 = $14 ^ -1;
 $17 = HEAP32[$pWC>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 60|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 & 4096;
 $23 = ($22<<16>>16)==(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = (($pWC) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = (($pWC) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($pLoop) + 40|0);
 $30 = (($pLoop) + 22|0);
 $31 = (($pLoop) + 44|0);
 $i$09 = $25;$pTerm$05 = $28;
 while(1) {
  $32 = (($pTerm$05) + 20|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 & 2;
  $35 = ($34<<24>>24)==(0);
  if (!($35)) {
   label = 17;
   break;
  }
  $36 = (($pTerm$05) + 40|0);
  $37 = $36;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $9 & $39;
  $44 = $12 & $42;
  $45 = ($43|0)==(0);
  $46 = ($44|0)==(0);
  $47 = $45 & $46;
  L10: do {
   if (!($47)) {
    $48 = $39 & $15;
    $49 = $42 & $16;
    $50 = ($48|0)==(0);
    $51 = ($49|0)==(0);
    $52 = $50 & $51;
    if ($52) {
     $53 = HEAP16[$29>>1]|0;
     $54 = ($53<<16>>16)==(0);
     L13: do {
      if (!($54)) {
       $55 = $53&65535;
       $56 = HEAP32[$31>>2]|0;
       $j$04$in = $55;
       while(1) {
        $j$04 = (($j$04$in) + -1)|0;
        $57 = (($56) + ($j$04<<2)|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)==(0|0);
        if (!($59)) {
         $60 = ($58|0)==($pTerm$05|0);
         if ($60) {
          break;
         }
         $61 = (($58) + 4|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = ($62|0)>(-1);
         if ($63) {
          $65 = (($28) + (($62*48)|0)|0);
          $66 = ($65|0)==($pTerm$05|0);
          if ($66) {
           break;
          }
         }
        }
        $64 = ($j$04|0)>(0);
        if ($64) {
         $j$04$in = $j$04;
        } else {
         break L13;
        }
       }
       $67 = ($j$04$in|0)<(1);
       if (!($67)) {
        break L10;
       }
      }
     } while(0);
     $68 = (($pTerm$05) + 16|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69&65535;
     $71 = HEAP16[$30>>1]|0;
     $72 = $71&65535;
     $73 = (($72) + ($70))|0;
     $74 = $73&65535;
     HEAP16[$30>>1] = $74;
    }
   }
  } while(0);
  $75 = (($i$09) + -1)|0;
  $76 = (($pTerm$05) + 48|0);
  $77 = ($75|0)>(0);
  if ($77) {
   $i$09 = $75;$pTerm$05 = $76;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _columnsInIndex($pIdx) {
 $pIdx = $pIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$0 = 0, $j$0$in = 0, $j$0$in$ph = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($pIdx) + 4|0);
 $13 = 0;$15 = 0;$j$0$in$ph = $2;
 L1: while(1) {
  $j$0$in = $j$0$in$ph;
  while(1) {
   $j$0 = (($j$0$in) + -1)|0;
   $4 = ($j$0$in|0)>(0);
   if (!($4)) {
    break L1;
   }
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($j$0<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($7&65535)<(63);
   if ($8) {
    break;
   } else {
    $j$0$in = $j$0;
   }
  }
  $9 = $7 << 16 >> 16;
  $10 = (_bitshift64Shl(1,0,($9|0))|0);
  $11 = tempRet0;
  $12 = $10 | $13;
  $14 = $11 | $15;
  $13 = $12;$15 = $14;$j$0$in$ph = $j$0;
 }
 tempRet0 = $15;
 STACKTOP = sp;return ($13|0);
}
function _whereLoopAddBtreeIndex($pBuilder,$pSrc,$pProbe,$nInMul) {
 $pBuilder = $pBuilder|0;
 $pSrc = $pSrc|0;
 $pProbe = $pProbe|0;
 $nInMul = $nInMul|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iCol$0 = 0, $nIn$0 = 0, $nIn$1 = 0, $nRowEst$0 = 0, $opMask$0 = 0, $opMask$0$ = 0, $or$cond = 0, $or$cond1 = 0, $pBtm$07 = 0, $pBtm$1 = 0, $pBtm$2 = 0, $pBuilder$idx$val = 0, $pBuilder$idx3 = 0;
 var $pBuilder$idx3$val = 0, $pTerm$08 = 0, $pTop$06 = 0, $pTop$1 = 0, $pTop$2 = 0, $phitmp = 0, $phitmp$ = 0, $rc$0$lcssa = 0, $rc$1 = 0, $scan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $scan = sp;
 $0 = HEAP32[$pBuilder>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pBuilder) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 64|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($4) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 32;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($pProbe) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(1);
  if ($14) {
   $opMask$0 = 63;
  } else {
   $15 = (($pSrc) + 36|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 & 8;
   $18 = ($17<<24>>24)==(0);
   $$2 = $18 ? 191 : 63;
   $opMask$0 = $$2;
  }
 } else {
  $opMask$0 = 24;
 }
 $19 = (($pProbe) + 55|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 4;
 $22 = ($21<<24>>24)==(0);
 $23 = $opMask$0 & 131;
 $opMask$0$ = $22 ? $opMask$0 : $23;
 $24 = (($4) + 24|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = (($pProbe) + 50|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($25&65535)<($28&65535);
 if ($29) {
  $30 = (($pProbe) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($26<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = (($26) + 1)|0;
  $36 = (($pProbe) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($35<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_sqlite3LogEst($39,0)|0);
  $41 = ($40<<16>>16)==(0);
  if ($41) {
   $42 = (($pProbe) + 54|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(0);
   $$ = $44&1;
   $$pre$phiZ2D = $36;$iCol$0 = $34;$nRowEst$0 = $$;
  } else {
   $$pre$phiZ2D = $36;$iCol$0 = $34;$nRowEst$0 = $40;
  }
 } else {
  $$pre13 = (($pProbe) + 8|0);
  $$pre$phiZ2D = $$pre13;$iCol$0 = -1;$nRowEst$0 = 0;
 }
 $45 = (($pBuilder) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($pSrc) + 40|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_whereScanInit($scan,$46,$48,$iCol$0,$opMask$0$,$pProbe)|0);
 $50 = HEAP16[$24>>1]|0;
 $51 = (($24) + 2|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = (($4) + 40|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = HEAP32[$8>>2]|0;
 $56 = $4;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($4) + 22|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = (($4) + 18|0);
 HEAP16[$64>>1] = 0;
 $65 = HEAP32[$$pre$phiZ2D>>2]|0;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_sqlite3LogEst($66,0)|0);
 $68 = (_estLog($67)|0);
 $69 = ($49|0)==(0|0);
 $70 = ($50<<16>>16)==($52<<16>>16);
 $or$cond = $69 & $70;
 if ($or$cond) {
  $71 = $50&65535;
  $72 = (($71) + 1)|0;
  $73 = HEAP16[$27>>1]|0;
  $74 = $73&65535;
  $75 = ($72>>>0)<($74>>>0);
  if ($75) {
   $76 = (($65) + ($72<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77>>>0)>(17);
   if ($78) {
    $79 = $54&65535;
    $80 = (($79) + 1)|0;
    $81 = (_whereLoopResize($2,$4,$80)|0);
    $82 = ($81|0)==(0);
    if ($82) {
     $83 = HEAP16[$24>>1]|0;
     $84 = (($83) + 1)<<16>>16;
     HEAP16[$24>>1] = $84;
     $85 = HEAP16[$51>>1]|0;
     $86 = (($85) + 1)<<16>>16;
     HEAP16[$51>>1] = $86;
     $87 = HEAP16[$53>>1]|0;
     $88 = (($87) + 1)<<16>>16;
     HEAP16[$53>>1] = $88;
     $89 = $87&65535;
     $90 = (($4) + 44|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($91) + ($89<<2)|0);
     HEAP32[$92>>2] = 0;
     $93 = HEAP32[$8>>2]|0;
     $94 = $93 | 32768;
     HEAP32[$8>>2] = $94;
     $95 = HEAP32[$$pre$phiZ2D>>2]|0;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($95) + ($72<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($96>>>0) / ($98>>>0))&-1;
     $100 = (_sqlite3LogEst($99,0)|0);
     $101 = $68&65535;
     $102 = $100 << 16 >> 16;
     $103 = (($102) + ($101))|0;
     $104 = $103&65535;
     $105 = (($4) + 20|0);
     HEAP16[$105>>1] = $104;
     $106 = HEAP16[$62>>1]|0;
     $107 = $106&65535;
     $108 = (($107) + ($102))|0;
     $109 = $108&65535;
     HEAP16[$62>>1] = $109;
     (_whereLoopAddBtreeIndex($pBuilder,$pSrc,$pProbe,$100)|0);
     HEAP16[$62>>1] = $63;
     label = 14;
    } else {
     $rc$0$lcssa = $81;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   if ($69) {
    $rc$0$lcssa = 0;
   } else {
    $110 = ($iCol$0|0)<(0);
    $111 = (($pSrc) + 16|0);
    $112 = (($4) + 8|0);
    $113 = $54&65535;
    $114 = (($113) + 1)|0;
    $115 = (($4) + 44|0);
    $116 = (($4) + 20|0);
    $117 = $nRowEst$0&65535;
    $118 = $nInMul&65535;
    $119 = (($118) + 10)|0;
    $120 = (($119) + ($117))|0;
    $121 = $120&65535;
    $122 = (($117) + ($118))|0;
    $123 = $122&65535;
    $124 = ($nInMul<<16>>16)==(0);
    $125 = ($iCol$0|0)>(-1);
    $126 = (($pProbe) + 54|0);
    $127 = ($68<<16>>16)>(27);
    $128 = $68&65535;
    $129 = (($128) + 65519)|0;
    $phitmp = $129&65535;
    $pBuilder$idx3 = (($pBuilder) + 16|0);
    $pBtm$07 = 0;$pTerm$08 = $49;$pTop$06 = 0;
    while(1) {
     $130 = (($pTerm$08) + 18|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = ($131<<16>>16)==(128);
     if ($132) {
      if ($110) {
       $pBtm$2 = $pBtm$07;$pTop$2 = $pTop$06;$rc$1 = 0;
      } else {
       $133 = HEAP32[$111>>2]|0;
       $134 = (($133) + 4|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ((($135) + (($iCol$0*24)|0)|0) + 20|0);
       $137 = HEAP8[$136>>0]|0;
       $138 = ($137<<24>>24)==(0);
       if ($138) {
        label = 19;
       } else {
        $pBtm$2 = $pBtm$07;$pTop$2 = $pTop$06;$rc$1 = 0;
       }
      }
     } else {
      label = 19;
     }
     if ((label|0) == 19) {
      label = 0;
      $139 = (($pTerm$08) + 32|0);
      $140 = $139;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = (($140) + 4)|0;
      $144 = $143;
      $145 = HEAP32[$144>>2]|0;
      $146 = $112;
      $147 = $146;
      $148 = HEAP32[$147>>2]|0;
      $149 = (($146) + 4)|0;
      $150 = $149;
      $151 = HEAP32[$150>>2]|0;
      $152 = $148 & $142;
      $153 = $151 & $145;
      $154 = ($152|0)==(0);
      $155 = ($153|0)==(0);
      $156 = $154 & $155;
      if ($156) {
       HEAP32[$8>>2] = $55;
       HEAP16[$24>>1] = $50;
       HEAP16[$53>>1] = $54;
       $157 = (_whereLoopResize($2,$4,$114)|0);
       $158 = ($157|0)==(0);
       if (!($158)) {
        $rc$0$lcssa = 0;
        break L18;
       }
       $159 = HEAP16[$53>>1]|0;
       $160 = (($159) + 1)<<16>>16;
       HEAP16[$53>>1] = $160;
       $161 = $159&65535;
       $162 = HEAP32[$115>>2]|0;
       $163 = (($162) + ($161<<2)|0);
       HEAP32[$163>>2] = $pTerm$08;
       $164 = $139;
       $165 = $164;
       $166 = HEAP32[$165>>2]|0;
       $167 = (($164) + 4)|0;
       $168 = $167;
       $169 = HEAP32[$168>>2]|0;
       $170 = $166 | $58;
       $171 = $169 | $61;
       $172 = $112;
       $173 = $172;
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 4)|0;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $178 = $174 ^ -1;
       $179 = $177 ^ -1;
       $180 = $170 & $178;
       $181 = $171 & $179;
       $182 = $4;
       $183 = $182;
       HEAP32[$183>>2] = $180;
       $184 = (($182) + 4)|0;
       $185 = $184;
       HEAP32[$185>>2] = $181;
       HEAP16[$116>>1] = $68;
       $186 = HEAP16[$130>>1]|0;
       $187 = $186&65535;
       $188 = $187 & 1;
       $189 = ($188|0)==(0);
       do {
        if ($189) {
         $212 = $187 & 2;
         $213 = ($212|0)==(0);
         if ($213) {
          $228 = $187 & 128;
          $229 = ($228|0)==(0);
          if (!($229)) {
           $230 = HEAP32[$8>>2]|0;
           $231 = $230 | 8;
           HEAP32[$8>>2] = $231;
           $232 = HEAP16[$24>>1]|0;
           $233 = (($232) + 1)<<16>>16;
           HEAP16[$24>>1] = $233;
           HEAP16[$62>>1] = $121;
           $247 = $231;$nIn$1 = 10;$pBtm$1 = $pBtm$07;$pTop$1 = $pTop$06;
           break;
          }
          $234 = $187 & 36;
          $235 = ($234|0)==(0);
          $236 = HEAP32[$8>>2]|0;
          if (!($235)) {
           $237 = $236 | 34;
           HEAP32[$8>>2] = $237;
           $247 = $237;$nIn$1 = 0;$pBtm$1 = $pTerm$08;$pTop$1 = 0;
           break;
          }
          $238 = $236 | 18;
          HEAP32[$8>>2] = $238;
          $239 = $236 & 32;
          $240 = ($239|0)==(0);
          if ($240) {
           $247 = $238;$nIn$1 = 0;$pBtm$1 = 0;$pTop$1 = $pTerm$08;
           break;
          }
          $241 = $160&65535;
          $242 = (($241) + -2)|0;
          $243 = HEAP32[$115>>2]|0;
          $244 = (($243) + ($242<<2)|0);
          $245 = HEAP32[$244>>2]|0;
          $247 = $238;$nIn$1 = 0;$pBtm$1 = $245;$pTop$1 = $pTerm$08;
          break;
         }
         $214 = HEAP32[$8>>2]|0;
         $215 = $214 | 1;
         HEAP32[$8>>2] = $215;
         if ($110) {
          label = 34;
         } else {
          if ($124) {
           $216 = HEAP16[$24>>1]|0;
           $217 = $216&65535;
           $218 = HEAP16[$27>>1]|0;
           $219 = $218&65535;
           $220 = (($219) + -1)|0;
           $221 = ($217|0)==($220|0);
           if ($221) {
            if ($125) {
             $222 = HEAP8[$126>>0]|0;
             $223 = ($222<<24>>24)==(0);
             if ($223) {
              $224 = $214 | 65537;
              HEAP32[$8>>2] = $224;
              $280 = $224;
             } else {
              label = 34;
             }
            } else {
             label = 34;
            }
           } else {
            $280 = $215;
           }
          } else {
           $280 = $215;
          }
         }
         if ((label|0) == 34) {
          label = 0;
          $225 = $214 | 4097;
          HEAP32[$8>>2] = $225;
          $280 = $225;
         }
         $226 = HEAP16[$24>>1]|0;
         $227 = (($226) + 1)<<16>>16;
         HEAP16[$24>>1] = $227;
         HEAP16[$62>>1] = $123;
         $247 = $280;$nIn$1 = 0;$pBtm$1 = $pBtm$07;$pTop$1 = $pTop$06;
        } else {
         $190 = HEAP32[$pTerm$08>>2]|0;
         $191 = HEAP32[$8>>2]|0;
         $192 = $191 | 4;
         HEAP32[$8>>2] = $192;
         $193 = (($190) + 4|0);
         $194 = HEAP32[$193>>2]|0;
         $195 = $194 & 2048;
         $196 = ($195|0)==(0);
         if ($196) {
          $197 = (($190) + 20|0);
          $198 = HEAP32[$197>>2]|0;
          $199 = ($198|0)==(0|0);
          if ($199) {
           $nIn$0 = 0;
          } else {
           $200 = HEAP32[$198>>2]|0;
           $201 = ($200|0)==(0);
           if ($201) {
            $nIn$0 = 0;
           } else {
            $202 = ($200|0)<(0);
            $203 = $202 << 31 >> 31;
            $204 = (_sqlite3LogEst($200,$203)|0);
            $205 = $204 << 16 >> 16;
            $nIn$0 = $205;
           }
          }
         } else {
          $nIn$0 = 46;
         }
         $206 = (($128) + ($nIn$0))|0;
         $207 = $206&65535;
         HEAP16[$116>>1] = $207;
         $208 = HEAP16[$24>>1]|0;
         $209 = (($208) + 1)<<16>>16;
         HEAP16[$24>>1] = $209;
         $210 = (($122) + ($nIn$0))|0;
         $211 = $210&65535;
         HEAP16[$62>>1] = $211;
         $247 = $192;$nIn$1 = $nIn$0;$pBtm$1 = $pBtm$07;$pTop$1 = $pTop$06;
        }
       } while(0);
       $246 = $247 & 2;
       $248 = ($246|0)==(0);
       if ($248) {
        $250 = $247;
       } else {
        _whereRangeScanEst($pBtm$1,$pTop$1,$4);
        $$pre = HEAP32[$8>>2]|0;
        $250 = $$pre;
       }
       $249 = $250 & 320;
       $251 = ($249|0)==(0);
       $252 = HEAP16[$116>>1]|0;
       if ($251) {
        $phitmp$ = $127 ? $phitmp : 10;
        $253 = (_sqlite3LogEstAdd($252,$phitmp$)|0);
        HEAP16[$116>>1] = $253;
        $255 = $253;
       } else {
        $255 = $252;
       }
       $254 = HEAP16[$62>>1]|0;
       $256 = (_sqlite3LogEstAdd($255,$254)|0);
       HEAP16[$116>>1] = $256;
       $257 = HEAP32[$45>>2]|0;
       _whereLoopOutputAdjust($257,$4);
       $pBuilder$idx$val = HEAP32[$pBuilder>>2]|0;
       $pBuilder$idx3$val = HEAP32[$pBuilder$idx3>>2]|0;
       $258 = (_whereLoopInsert($pBuilder$idx$val,$pBuilder$idx3$val,$4)|0);
       $259 = HEAP32[$8>>2]|0;
       $260 = $259 & 16;
       $261 = ($260|0)==(0);
       if ($261) {
        $262 = HEAP16[$24>>1]|0;
        $263 = $262&65535;
        $264 = HEAP16[$27>>1]|0;
        $265 = $264&65535;
        $266 = HEAP32[$pProbe>>2]|0;
        $267 = ($266|0)!=(0|0);
        $268 = $267&1;
        $269 = (($268) + ($265))|0;
        $270 = ($263|0)<($269|0);
        if ($270) {
         $271 = (($nIn$1) + ($118))|0;
         $272 = $271&65535;
         (_whereLoopAddBtreeIndex($pBuilder,$pSrc,$pProbe,$272)|0);
        }
       }
       HEAP16[$62>>1] = $63;
       $pBtm$2 = $pBtm$1;$pTop$2 = $pTop$1;$rc$1 = $258;
      } else {
       $pBtm$2 = $pBtm$07;$pTop$2 = $pTop$06;$rc$1 = 0;
      }
     }
     $273 = (_whereScanNext($scan)|0);
     $274 = ($rc$1|0)!=(0);
     $275 = ($273|0)==(0|0);
     $or$cond1 = $274 | $275;
     if ($or$cond1) {
      $rc$0$lcssa = $rc$1;
      break;
     } else {
      $pBtm$07 = $pBtm$2;$pTerm$08 = $273;$pTop$06 = $pTop$2;
     }
    }
   }
  }
 } while(0);
 $276 = $4;
 $277 = $276;
 HEAP32[$277>>2] = $58;
 $278 = (($276) + 4)|0;
 $279 = $278;
 HEAP32[$279>>2] = $61;
 HEAP16[$24>>1] = $50;
 HEAP16[$51>>1] = $52;
 HEAP32[$8>>2] = $55;
 HEAP16[$62>>1] = $63;
 HEAP16[$53>>1] = $54;
 $$0 = $rc$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _whereRangeScanEst($pLower,$pUpper,$pLoop) {
 $pLower = $pLower|0;
 $pUpper = $pUpper|0;
 $pLoop = $pLoop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nNew$0 = 0, $nNew$1 = 0;
 var $nOut$0 = 0, $nOut$1 = 0, $nOut$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pLoop) + 22|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($pLower|0)==(0|0);
 if ($3) {
  $nNew$0 = $1;$nOut$0 = $2;
 } else {
  $4 = $1&65535;
  $5 = (($4) + 65516)|0;
  $6 = $5&65535;
  $7 = (($2) + -1)|0;
  $nNew$0 = $6;$nOut$0 = $7;
 }
 $8 = ($pUpper|0)==(0|0);
 if ($8) {
  $nNew$1 = $nNew$0;$nOut$1 = $nOut$0;
 } else {
  $9 = $nNew$0&65535;
  $10 = (($9) + 65516)|0;
  $11 = $10&65535;
  $12 = (($nOut$0) + -1)|0;
  $nNew$1 = $11;$nOut$1 = $12;
 }
 $13 = ($nNew$1<<16>>16)<(10);
 $14 = $nNew$1 << 16 >> 16;
 $15 = $13 ? 10 : $14;
 $16 = ($15|0)<($nOut$1|0);
 $nOut$2 = $16 ? $15 : $nOut$1;
 $17 = $nOut$2&65535;
 HEAP16[$0>>1] = $17;
 STACKTOP = sp;return;
}
function _sqlite3ExprImpliesExpr($pE1,$pE2,$iTab) {
 $pE1 = $pE1|0;
 $pE2 = $pE2|0;
 $iTab = $iTab|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3ExprCompare($pE1,$pE2,$iTab)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 1;
  } else {
   $2 = HEAP8[$pE2>>0]|0;
   if ((($2<<24>>24) == 77)) {
    label = 6;
   } else if ((($2<<24>>24) == 71)) {
    $3 = (($pE2) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (_sqlite3ExprImpliesExpr($pE1,$4,$iTab)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     $$0 = 1;
     break;
    }
    $7 = (($pE2) + 16|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_sqlite3ExprImpliesExpr($pE1,$8,$iTab)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     $$0 = 1;
     break;
    }
    $11 = ($2<<24>>24)==(77);
    if ($11) {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    $12 = (($pE1) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($pE2) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_sqlite3ExprCompare($13,$15,$iTab)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP8[$pE1>>0]|0;
     if (!((($18<<24>>24) == 73) | (($18<<24>>24) == 76))) {
      $$0 = 1;
      break;
     }
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _allocateIndexInfo($pParse,$pWC,$pSrc,$pOrderBy) {
 $pParse = $pParse|0;
 $pWC = $pWC|0;
 $pSrc = $pSrc|0;
 $pOrderBy = $pOrderBy|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$mask = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $exitcond = 0, $i$012 = 0, $i$1$lcssa = 0, $i$17 = 0, $i$25 = 0, $i$32 = 0, $j$04 = 0, $j$1 = 0, $nOrderBy$0 = 0;
 var $nTerm$0$ = 0, $nTerm$0$lcssa = 0, $nTerm$011 = 0, $nTerm$1 = 0, $not$ = 0, $pTerm$010 = 0, $pTerm$13 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pWC) + 20|0);
 $1 = (($pWC) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($pSrc) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $i$012 = 0;$nTerm$011 = 0;$pTerm$010 = $4;
  while(1) {
   $7 = (($pTerm$010) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($6|0);
   if ($9) {
    $10 = (($pTerm$010) + 18|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & -1153;
    $not$ = ($12<<16>>16)!=(0);
    $13 = $not$&1;
    $nTerm$0$ = (($13) + ($nTerm$011))|0;
    $nTerm$1 = $nTerm$0$;
   } else {
    $nTerm$1 = $nTerm$011;
   }
   $14 = (($i$012) + 1)|0;
   $15 = (($pTerm$010) + 48|0);
   $16 = ($14|0)<($2|0);
   if ($16) {
    $i$012 = $14;$nTerm$011 = $nTerm$1;$pTerm$010 = $15;
   } else {
    $nTerm$0$lcssa = $nTerm$1;
    break;
   }
  }
 } else {
  $nTerm$0$lcssa = 0;
 }
 $17 = ($pOrderBy|0)==(0|0);
 if ($17) {
  $nOrderBy$0 = 0;
 } else {
  $18 = HEAP32[$pOrderBy>>2]|0;
  $19 = ($18|0)>(0);
  L11: do {
   if ($19) {
    $20 = (($pOrderBy) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($pSrc) + 40|0);
    $i$17 = 0;
    while(1) {
     $25 = (($21) + (($i$17*20)|0)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(-102);
     if (!($28)) {
      $i$1$lcssa = $i$17;
      break L11;
     }
     $29 = (($26) + 28|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = HEAP32[$22>>2]|0;
     $32 = ($30|0)==($31|0);
     $24 = (($i$17) + 1)|0;
     if (!($32)) {
      $i$1$lcssa = $i$17;
      break L11;
     }
     $23 = ($24|0)<($18|0);
     if ($23) {
      $i$17 = $24;
     } else {
      $i$1$lcssa = $24;
      break;
     }
    }
   } else {
    $i$1$lcssa = 0;
   }
  } while(0);
  $33 = ($i$1$lcssa|0)==($18|0);
  $$1 = $33 ? $18 : 0;
  $nOrderBy$0 = $$1;
 }
 $34 = HEAP32[$pParse>>2]|0;
 $35 = ($nTerm$0$lcssa*20)|0;
 $36 = (($35) + 56)|0;
 $37 = $nOrderBy$0 << 3;
 $38 = (($36) + ($37))|0;
 $39 = (_sqlite3DbMallocZero($34,$38)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  _sqlite3ErrorMsg($pParse,5600,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (($39) + 56|0);
 $42 = (($41) + (($nTerm$0$lcssa*12)|0)|0);
 $43 = (($42) + ($nOrderBy$0<<3)|0);
 HEAP32[$39>>2] = $nTerm$0$lcssa;
 $44 = (($39) + 8|0);
 HEAP32[$44>>2] = $nOrderBy$0;
 $45 = (($39) + 4|0);
 HEAP32[$45>>2] = $41;
 $46 = (($39) + 12|0);
 HEAP32[$46>>2] = $42;
 $47 = (($39) + 16|0);
 HEAP32[$47>>2] = $43;
 $48 = HEAP32[$1>>2]|0;
 $49 = ($48|0)>(0);
 L23: do {
  if ($49) {
   $50 = HEAP32[$0>>2]|0;
   $51 = (($pSrc) + 40|0);
   $85 = $48;$i$25 = 0;$j$04 = 0;$pTerm$13 = $50;
   while(1) {
    $54 = (($pTerm$13) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$51>>2]|0;
    $57 = ($55|0)==($56|0);
    if ($57) {
     $58 = (($pTerm$13) + 18|0);
     $59 = HEAP16[$58>>1]|0;
     $60 = $59 & -1153;
     $61 = ($60<<16>>16)==(0);
     if ($61) {
      $72 = $85;$j$1 = $j$04;
     } else {
      $62 = (($pTerm$13) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($41) + (($j$04*12)|0)|0);
      HEAP32[$64>>2] = $63;
      $65 = ((($41) + (($j$04*12)|0)|0) + 8|0);
      HEAP32[$65>>2] = $i$25;
      $66 = $59&255;
      $$mask = $59 & 255;
      $67 = ($$mask<<16>>16)==(1);
      $$ = $67 ? 2 : $66;
      $68 = ((($41) + (($j$04*12)|0)|0) + 4|0);
      HEAP8[$68>>0] = $$;
      $69 = (($j$04) + 1)|0;
      $$pre = HEAP32[$1>>2]|0;
      $72 = $$pre;$j$1 = $69;
     }
    } else {
     $72 = $85;$j$1 = $j$04;
    }
    $70 = (($i$25) + 1)|0;
    $71 = ($70|0)<($72|0);
    if (!($71)) {
     break L23;
    }
    $73 = (($pTerm$13) + 48|0);
    $85 = $72;$i$25 = $70;$j$04 = $j$1;$pTerm$13 = $73;
   }
  }
 } while(0);
 $52 = ($nOrderBy$0|0)>(0);
 if (!($52)) {
  $$0 = $39;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($pOrderBy) + 8|0);
 $i$32 = 0;
 while(1) {
  $74 = HEAP32[$53>>2]|0;
  $75 = (($74) + (($i$32*20)|0)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 32|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = (($42) + ($i$32<<3)|0);
  HEAP32[$80>>2] = $79;
  $81 = ((($74) + (($i$32*20)|0)|0) + 12|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = ((($42) + ($i$32<<3)|0) + 4|0);
  HEAP8[$83>>0] = $82;
  $84 = (($i$32) + 1)|0;
  $exitcond = ($84|0)==($nOrderBy$0|0);
  if ($exitcond) {
   $$0 = $39;
   break;
  } else {
   $i$32 = $84;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vtabBestIndex($pParse,$pTab,$p) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3GetVTable($0,$pTab)|0);
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 255]($3,$p)|0);
 do {
  if ((($7|0) == 7)) {
   $8 = HEAP32[$pParse>>2]|0;
   $9 = (($8) + 64|0);
   HEAP8[$9>>0] = 1;
  } else if (!((($7|0) == 0))) {
   $10 = (($3) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = (_sqlite3ErrStr($7)|0);
    HEAP32[$vararg_buffer>>2] = $13;
    _sqlite3ErrorMsg($pParse,1712,$vararg_buffer);
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $11;
    _sqlite3ErrorMsg($pParse,1712,$vararg_buffer1);
    break;
   }
  }
 } while(0);
 $14 = (($3) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _sqlite3_free($15);
 HEAP32[$14>>2] = 0;
 $16 = HEAP32[$p>>2]|0;
 $17 = ($16|0)>(0);
 if (!($17)) {
  $32 = (($pParse) + 68|0);
  $33 = HEAP32[$32>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 $18 = (($p) + 4|0);
 $19 = (($p) + 16|0);
 $34 = $16;$i$01 = 0;
 while(1) {
  $20 = HEAP32[$18>>2]|0;
  $21 = ((($20) + (($i$01*12)|0)|0) + 5|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $24 = HEAP32[$19>>2]|0;
   $25 = (($24) + ($i$01<<3)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)>(0);
   if ($27) {
    $28 = HEAP32[$pTab>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $28;
    _sqlite3ErrorMsg($pParse,24144,$vararg_buffer4);
    $$pre = HEAP32[$p>>2]|0;
    $31 = $$pre;
   } else {
    $31 = $34;
   }
  } else {
   $31 = $34;
  }
  $29 = (($i$01) + 1)|0;
  $30 = ($29|0)<($31|0);
  if ($30) {
   $34 = $31;$i$01 = $29;
  } else {
   break;
  }
 }
 $32 = (($pParse) + 68|0);
 $33 = HEAP32[$32>>2]|0;
 STACKTOP = sp;return ($33|0);
}
function _sqlite3LogEstFromDouble($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = !($x <= 1.0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = !($x <= 2.0E+9);
 if ($3) {
  $7 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
  $8 = tempRet0;
  $9 = (_i64Add(($7|0),($8|0),64514,0)|0);
  $10 = tempRet0;
  $sext = $9 << 16;
  $11 = $sext >> 16;
  $12 = ($11*10)|0;
  $13 = $12&65535;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = (~~$x)>>>0;
  $5 = +Math_abs($x) >= 1.0 ? $x > 0.0 ? (Math_min(+Math_floor($x / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($x - +(~~$x >>> 0)) / 4294967296.0) >>> 0 : 0;
  $6 = (_sqlite3LogEst($4,$5)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _findIndexCol($pParse,$pList,$iBase,$pIdx,$iCol) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 $iBase = $iBase|0;
 $pIdx = $pIdx|0;
 $iCol = $iCol|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($iCol<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$pList>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pList) + 8|0);
 $7 = (($pIdx) + 4|0);
 $i$01 = 0;
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = (($8) + (($i$01*20)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_sqlite3ExprSkipCollate($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(-102);
  if ($13) {
   $14 = (($11) + 32|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = HEAP32[$7>>2]|0;
   $17 = (($16) + ($iCol<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = ($15<<16>>16)==($18<<16>>16);
   if ($19) {
    $20 = (($11) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($iBase|0);
    if ($22) {
     $23 = (_sqlite3ExprCollSeq($pParse,$10)|0);
     $24 = ($23|0)==(0|0);
     if (!($24)) {
      $25 = HEAP32[$23>>2]|0;
      $26 = (_sqlite3_stricmp($25,$3)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $$0 = $i$01;
       label = 9;
       break;
      }
     }
    }
   }
  }
  $28 = (($i$01) + 1)|0;
  $29 = HEAP32[$pList>>2]|0;
  $30 = ($28|0)<($29|0);
  if ($30) {
   $i$01 = $28;
  } else {
   $$0 = -1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _exprAnalyze($pWC,$idxTerm) {
 $pWC = $pWC|0;
 $idxTerm = $idxTerm|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $eExtraOp$0 = 0, $isComplete = 0, $noCase = 0, $pDup$0 = 0;
 var $pNew$0 = 0, $pStr1 = 0, $pTerm$0 = 0, $pTerm$2 = 0, $pTerm$3 = 0, $pTerm$4 = 0, $sCollSeqName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pStr1 = sp + 16|0;
 $isComplete = sp + 12|0;
 $noCase = sp + 8|0;
 $sCollSeqName = sp;
 $0 = HEAP32[$pWC>>2]|0;
 HEAP32[$pStr1>>2] = 0;
 HEAP32[$isComplete>>2] = 0;
 HEAP32[$noCase>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 64|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($pWC) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($idxTerm*48)|0)|0);
 $9 = (($0) + 68|0);
 $10 = HEAP32[$8>>2]|0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_exprTableUsage($9,$12)|0);
 $14 = tempRet0;
 $15 = HEAP8[$10>>0]|0;
 $16 = $15&255;
 do {
  if ((($15<<24>>24) == 75)) {
   $17 = (($10) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 2048;
   $20 = ($19|0)==(0);
   $21 = (($10) + 20|0);
   if ($20) {
    $30 = HEAP32[$21>>2]|0;
    $31 = (_exprListTableUsage($9,$30)|0);
    $32 = tempRet0;
    $33 = ((($7) + (($idxTerm*48)|0)|0) + 32|0);
    $34 = $33;
    $35 = $34;
    HEAP32[$35>>2] = $31;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $84 = $31;$86 = $32;
    break;
   } else {
    $22 = HEAP32[$21>>2]|0;
    $23 = (_exprSelectTableUsage($9,$22)|0);
    $24 = tempRet0;
    $25 = ((($7) + (($idxTerm*48)|0)|0) + 32|0);
    $26 = $25;
    $27 = $26;
    HEAP32[$27>>2] = $23;
    $28 = (($26) + 4)|0;
    $29 = $28;
    HEAP32[$29>>2] = $24;
    $84 = $23;$86 = $24;
    break;
   }
  } else if ((($15<<24>>24) == 76)) {
   $38 = ((($7) + (($idxTerm*48)|0)|0) + 32|0);
   $39 = $38;
   $40 = $39;
   HEAP32[$40>>2] = 0;
   $41 = (($39) + 4)|0;
   $42 = $41;
   HEAP32[$42>>2] = 0;
   $84 = 0;$86 = 0;
  } else {
   $43 = (($10) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_exprTableUsage($9,$44)|0);
   $46 = tempRet0;
   $47 = ((($7) + (($idxTerm*48)|0)|0) + 32|0);
   $48 = $47;
   $49 = $48;
   HEAP32[$49>>2] = $45;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $46;
   $84 = $45;$86 = $46;
  }
 } while(0);
 $52 = (_exprTableUsage($9,$10)|0);
 $53 = tempRet0;
 $54 = (($10) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 & 1;
 $57 = ($56|0)==(0);
 if ($57) {
  $146 = 0;$148 = 0;$70 = $52;$73 = $53;
 } else {
  $58 = (($10) + 36|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = (_getMask($9,$60)|0);
  $62 = tempRet0;
  $63 = $61 | $52;
  $64 = $62 | $53;
  $65 = (_i64Add(($61|0),($62|0),-1,-1)|0);
  $66 = tempRet0;
  $146 = $65;$148 = $66;$70 = $63;$73 = $64;
 }
 $67 = ((($7) + (($idxTerm*48)|0)|0) + 40|0);
 $68 = $67;
 $69 = $68;
 HEAP32[$69>>2] = $70;
 $71 = (($68) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $73;
 $74 = ((($7) + (($idxTerm*48)|0)|0) + 8|0);
 HEAP32[$74>>2] = -1;
 $75 = ((($7) + (($idxTerm*48)|0)|0) + 4|0);
 HEAP32[$75>>2] = -1;
 $76 = ((($7) + (($idxTerm*48)|0)|0) + 18|0);
 HEAP16[$76>>1] = 0;
 $77 = (_allowedOp($16)|0);
 $78 = ($77|0)==(0);
 do {
  if ($78) {
   $168 = HEAP8[$10>>0]|0;
   if ((($168<<24>>24) == 71)) {
    _exprAnalyzeOrTerm($pWC,$idxTerm);
    $195 = HEAP32[$6>>2]|0;
    $196 = (($195) + (($idxTerm*48)|0)|0);
    $pTerm$2 = $196;
    break;
   } else if (!((($168<<24>>24) == 74))) {
    $pTerm$2 = $8;
    break;
   }
   $169 = (($pWC) + 8|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = ($170<<24>>24)==(72);
   if ($171) {
    $172 = (($10) + 20|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + 8|0);
    $175 = (_sqlite3ExprDup($2,$12,0)|0);
    $176 = HEAP32[$174>>2]|0;
    $177 = HEAP32[$176>>2]|0;
    $178 = (_sqlite3ExprDup($2,$177,0)|0);
    $179 = (_sqlite3PExpr($1,83,$175,$178,0)|0);
    _transferJoinMarkings($179,$10);
    $180 = (_whereClauseInsert($pWC,$179,3)|0);
    _exprAnalyze($pWC,$180);
    $181 = HEAP32[$6>>2]|0;
    $182 = ((($181) + (($180*48)|0)|0) + 4|0);
    HEAP32[$182>>2] = $idxTerm;
    $183 = HEAP32[$11>>2]|0;
    $184 = (_sqlite3ExprDup($2,$183,0)|0);
    $185 = HEAP32[$174>>2]|0;
    $186 = (($185) + 20|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (_sqlite3ExprDup($2,$187,0)|0);
    $189 = (_sqlite3PExpr($1,81,$184,$188,0)|0);
    _transferJoinMarkings($189,$10);
    $190 = (_whereClauseInsert($pWC,$189,3)|0);
    _exprAnalyze($pWC,$190);
    $191 = HEAP32[$6>>2]|0;
    $192 = ((($191) + (($190*48)|0)|0) + 4|0);
    HEAP32[$192>>2] = $idxTerm;
    $193 = (($191) + (($idxTerm*48)|0)|0);
    $194 = ((($191) + (($idxTerm*48)|0)|0) + 21|0);
    HEAP8[$194>>0] = 2;
    $pTerm$2 = $193;
   } else {
    $pTerm$2 = $8;
   }
  } else {
   $79 = (_sqlite3ExprSkipCollate($12)|0);
   $80 = (($10) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (_sqlite3ExprSkipCollate($81)|0);
   $83 = $84 & $13;
   $85 = $86 & $14;
   $87 = ($83|0)==(0);
   $88 = ($85|0)==(0);
   $89 = $87 & $88;
   $90 = $89 ? 4095 : 1024;
   $91 = HEAP8[$79>>0]|0;
   $92 = ($91<<24>>24)==(-102);
   if ($92) {
    $93 = (($79) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    HEAP32[$74>>2] = $94;
    $95 = (($79) + 32|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = $96 << 16 >> 16;
    $98 = ((($7) + (($idxTerm*48)|0)|0) + 12|0);
    HEAP32[$98>>2] = $97;
    $99 = (_operatorMask($16)|0);
    $100 = $99 & $90;
    HEAP16[$76>>1] = $100;
    $105 = $94;
   } else {
    $105 = -1;
   }
   $101 = ($82|0)==(0|0);
   if ($101) {
    $pTerm$2 = $8;
   } else {
    $102 = HEAP8[$82>>0]|0;
    $103 = ($102<<24>>24)==(-102);
    if ($103) {
     $104 = ($105|0)>(-1);
     if ($104) {
      $106 = (_sqlite3ExprDup($2,$10,0)|0);
      $107 = HEAP8[$3>>0]|0;
      $108 = ($107<<24>>24)==(0);
      if (!($108)) {
       _sqlite3ExprDelete($2,$106);
       STACKTOP = sp;return;
      }
      $109 = (_whereClauseInsert($pWC,$106,3)|0);
      $110 = ($109|0)==(0);
      if ($110) {
       STACKTOP = sp;return;
      }
      $111 = HEAP32[$6>>2]|0;
      $112 = (($111) + (($109*48)|0)|0);
      $113 = ((($111) + (($109*48)|0)|0) + 4|0);
      HEAP32[$113>>2] = $idxTerm;
      $114 = (($111) + (($idxTerm*48)|0)|0);
      $115 = ((($111) + (($idxTerm*48)|0)|0) + 21|0);
      HEAP8[$115>>0] = 1;
      $116 = ((($111) + (($idxTerm*48)|0)|0) + 20|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = $118 | 8;
      $120 = $119&255;
      HEAP8[$116>>0] = $120;
      $121 = HEAP8[$10>>0]|0;
      $122 = ($121<<24>>24)==(79);
      if ($122) {
       $123 = HEAP32[$54>>2]|0;
       $124 = $123 & 1;
       $125 = ($124|0)==(0);
       if ($125) {
        $126 = (($2) + 60|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 & 512;
        $129 = ($128<<16>>16)==(0);
        if ($129) {
         $130 = ((($111) + (($idxTerm*48)|0)|0) + 18|0);
         $131 = HEAP16[$130>>1]|0;
         $132 = $131&65535;
         $133 = $132 | 1024;
         $134 = $133&65535;
         HEAP16[$130>>1] = $134;
         $eExtraOp$0 = 1024;$pDup$0 = $106;$pNew$0 = $112;$pTerm$0 = $114;
        } else {
         $eExtraOp$0 = 0;$pDup$0 = $106;$pNew$0 = $112;$pTerm$0 = $114;
        }
       } else {
        $eExtraOp$0 = 0;$pDup$0 = $106;$pNew$0 = $112;$pTerm$0 = $114;
       }
      } else {
       $eExtraOp$0 = 0;$pDup$0 = $106;$pNew$0 = $112;$pTerm$0 = $114;
      }
     } else {
      $eExtraOp$0 = 0;$pDup$0 = $10;$pNew$0 = $8;$pTerm$0 = $8;
     }
     _exprCommute($1,$pDup$0);
     $135 = (($pDup$0) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (_sqlite3ExprSkipCollate($136)|0);
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($pNew$0) + 8|0);
     HEAP32[$140>>2] = $139;
     $141 = (($137) + 32|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142 << 16 >> 16;
     $144 = (($pNew$0) + 12|0);
     HEAP32[$144>>2] = $143;
     $145 = $146 | $13;
     $147 = $148 | $14;
     $149 = (($pNew$0) + 32|0);
     $150 = $149;
     $151 = $150;
     HEAP32[$151>>2] = $145;
     $152 = (($150) + 4)|0;
     $153 = $152;
     HEAP32[$153>>2] = $147;
     $154 = (($pNew$0) + 40|0);
     $155 = $154;
     $156 = $155;
     HEAP32[$156>>2] = $70;
     $157 = (($155) + 4)|0;
     $158 = $157;
     HEAP32[$158>>2] = $73;
     $159 = HEAP8[$pDup$0>>0]|0;
     $160 = $159&255;
     $161 = (_operatorMask($160)|0);
     $162 = $161&65535;
     $163 = (($162) + ($eExtraOp$0))|0;
     $164 = $90&65535;
     $165 = $163 & $164;
     $166 = $165&65535;
     $167 = (($pNew$0) + 18|0);
     HEAP16[$167>>1] = $166;
     $pTerm$2 = $pTerm$0;
    } else {
     $pTerm$2 = $8;
    }
   }
  }
 } while(0);
 $197 = (($pWC) + 8|0);
 $198 = HEAP8[$197>>0]|0;
 $199 = ($198<<24>>24)==(72);
 if ($199) {
  $200 = (_isLikeOrGlob($1,$10,$pStr1,$isComplete,$noCase)|0);
  $201 = ($200|0)==(0);
  if ($201) {
   $pTerm$3 = $pTerm$2;
  } else {
   $202 = (($10) + 20|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) + 8|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = (($205) + 20|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = HEAP32[$pStr1>>2]|0;
   $209 = (_sqlite3ExprDup($2,$208,0)|0);
   $210 = HEAP8[$3>>0]|0;
   $211 = ($210<<24>>24)==(0);
   if ($211) {
    $212 = (($209) + 8|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = (_sqlite3Strlen30($213)|0);
    $215 = (($214) + -1)|0;
    $216 = (($213) + ($215)|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = HEAP32[$noCase>>2]|0;
    $219 = ($218|0)==(0);
    if ($219) {
     $c$0 = $217;
    } else {
     $220 = $217&255;
     $221 = ($217<<24>>24)==(64);
     if ($221) {
      HEAP32[$isComplete>>2] = 0;
     }
     $222 = (960 + ($220)|0);
     $223 = HEAP8[$222>>0]|0;
     $c$0 = $223;
    }
    $224 = $c$0&255;
    $225 = (($224) + 1)|0;
    $226 = $225&255;
    HEAP8[$216>>0] = $226;
    $228 = $218;
   } else {
    $$pre = HEAP32[$noCase>>2]|0;
    $228 = $$pre;
   }
   $227 = ($228|0)!=(0);
   $229 = $227 ? 3608 : 3592;
   HEAP32[$sCollSeqName>>2] = $229;
   $230 = (($sCollSeqName) + 4|0);
   HEAP32[$230>>2] = 6;
   $231 = (_sqlite3ExprDup($2,$207,0)|0);
   $232 = (_sqlite3ExprAddCollateToken($1,$231,$sCollSeqName)|0);
   $233 = (_sqlite3PExpr($1,83,$232,$208,0)|0);
   _transferJoinMarkings($233,$10);
   $234 = (_whereClauseInsert($pWC,$233,3)|0);
   _exprAnalyze($pWC,$234);
   $235 = (_sqlite3ExprDup($2,$207,0)|0);
   $236 = (_sqlite3ExprAddCollateToken($1,$235,$sCollSeqName)|0);
   $237 = (_sqlite3PExpr($1,82,$236,$209,0)|0);
   _transferJoinMarkings($237,$10);
   $238 = (_whereClauseInsert($pWC,$237,3)|0);
   _exprAnalyze($pWC,$238);
   $239 = HEAP32[$6>>2]|0;
   $240 = (($239) + (($idxTerm*48)|0)|0);
   $241 = HEAP32[$isComplete>>2]|0;
   $242 = ($241|0)==(0);
   if ($242) {
    $pTerm$3 = $240;
   } else {
    $243 = ((($239) + (($234*48)|0)|0) + 4|0);
    HEAP32[$243>>2] = $idxTerm;
    $244 = ((($239) + (($238*48)|0)|0) + 4|0);
    HEAP32[$244>>2] = $idxTerm;
    $245 = ((($239) + (($idxTerm*48)|0)|0) + 21|0);
    HEAP8[$245>>0] = 2;
    $pTerm$3 = $240;
   }
  }
 } else {
  $pTerm$3 = $pTerm$2;
 }
 $246 = (_isMatchOfColumn($10)|0);
 $247 = ($246|0)==(0);
 if ($247) {
  $pTerm$4 = $pTerm$3;
 } else {
  $248 = (($10) + 20|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + 8|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = HEAP32[$251>>2]|0;
  $253 = (($251) + 20|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (_exprTableUsage($9,$252)|0);
  $256 = tempRet0;
  $257 = (_exprTableUsage($9,$254)|0);
  $258 = tempRet0;
  $259 = $257 & $255;
  $260 = $258 & $256;
  $261 = ($259|0)==(0);
  $262 = ($260|0)==(0);
  $263 = $261 & $262;
  if ($263) {
   $264 = (_sqlite3ExprDup($2,$252,0)|0);
   $265 = (_sqlite3PExpr($1,51,0,$264,0)|0);
   $266 = (_whereClauseInsert($pWC,$265,3)|0);
   $267 = HEAP32[$6>>2]|0;
   $268 = ((($267) + (($266*48)|0)|0) + 32|0);
   $269 = $268;
   $270 = $269;
   HEAP32[$270>>2] = $255;
   $271 = (($269) + 4)|0;
   $272 = $271;
   HEAP32[$272>>2] = $256;
   $273 = (($254) + 28|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = ((($267) + (($266*48)|0)|0) + 8|0);
   HEAP32[$275>>2] = $274;
   $276 = (($254) + 32|0);
   $277 = HEAP16[$276>>1]|0;
   $278 = $277 << 16 >> 16;
   $279 = ((($267) + (($266*48)|0)|0) + 12|0);
   HEAP32[$279>>2] = $278;
   $280 = ((($267) + (($266*48)|0)|0) + 18|0);
   HEAP16[$280>>1] = 64;
   $281 = ((($267) + (($266*48)|0)|0) + 4|0);
   HEAP32[$281>>2] = $idxTerm;
   $282 = (($267) + (($idxTerm*48)|0)|0);
   $283 = ((($267) + (($idxTerm*48)|0)|0) + 21|0);
   HEAP8[$283>>0] = 1;
   $284 = ((($267) + (($idxTerm*48)|0)|0) + 20|0);
   $285 = HEAP8[$284>>0]|0;
   $286 = $285&255;
   $287 = $286 | 8;
   $288 = $287&255;
   HEAP8[$284>>0] = $288;
   $289 = ((($267) + (($idxTerm*48)|0)|0) + 40|0);
   $290 = $289;
   $291 = $290;
   $292 = HEAP32[$291>>2]|0;
   $293 = (($290) + 4)|0;
   $294 = $293;
   $295 = HEAP32[$294>>2]|0;
   $296 = ((($267) + (($266*48)|0)|0) + 40|0);
   $297 = $296;
   $298 = $297;
   HEAP32[$298>>2] = $292;
   $299 = (($297) + 4)|0;
   $300 = $299;
   HEAP32[$300>>2] = $295;
   $pTerm$4 = $282;
  } else {
   $pTerm$4 = $pTerm$3;
  }
 }
 $301 = (($pTerm$4) + 32|0);
 $302 = $301;
 $303 = $302;
 $304 = HEAP32[$303>>2]|0;
 $305 = (($302) + 4)|0;
 $306 = $305;
 $307 = HEAP32[$306>>2]|0;
 $308 = $304 | $146;
 $309 = $307 | $148;
 $310 = $301;
 $311 = $310;
 HEAP32[$311>>2] = $308;
 $312 = (($310) + 4)|0;
 $313 = $312;
 HEAP32[$313>>2] = $309;
 STACKTOP = sp;return;
}
function _allowedOp($op) {
 $op = $op|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $op$off = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($op|0)==(75);
 $op$off = (($op) + -79)|0;
 $1 = ($op$off>>>0)<(5);
 $or$cond = $0 | $1;
 $2 = ($op|0)==(76);
 $$ = $or$cond | $2;
 $3 = $$&1;
 STACKTOP = sp;return ($3|0);
}
function _operatorMask($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $2 = 0, $c$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($op|0) == 76)) {
  $c$0 = 128;
 } else if ((($op|0) == 75)) {
  $c$0 = 1;
 } else {
  $0 = (($op) + -79)|0;
  $1 = 2 << $0;
  $2 = $1&65535;
  $c$0 = $2;
 }
 STACKTOP = sp;return ($c$0|0);
}
function _whereClauseInsert($pWC,$p,$wtFlags) {
 $pWC = $pWC|0;
 $p = $p|0;
 $wtFlags = $wtFlags|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWC) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pWC) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $$pre1 = (($pWC) + 20|0);
 do {
  if ($4) {
   $22 = $1;
  } else {
   $5 = HEAP32[$$pre1>>2]|0;
   $6 = HEAP32[$pWC>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($3*96)|0;
   $10 = (_sqlite3DbMallocRaw($8,$9)|0);
   HEAP32[$$pre1>>2] = $10;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $14 = HEAP32[$0>>2]|0;
    $15 = ($14*48)|0;
    _memcpy(($10|0),($5|0),($15|0))|0;
    $16 = (($pWC) + 24|0);
    $17 = ($5|0)==($16|0);
    if (!($17)) {
     _sqlite3DbFree($8,$5);
    }
    $18 = HEAP32[$$pre1>>2]|0;
    $19 = (_sqlite3DbMallocSize($8,$18)|0);
    $20 = (($19>>>0) / 48)&-1;
    HEAP32[$2>>2] = $20;
    $$pre = HEAP32[$0>>2]|0;
    $22 = $$pre;
    break;
   }
   $12 = $wtFlags & 1;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    _sqlite3ExprDelete($8,$p);
   }
   HEAP32[$$pre1>>2] = $5;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $21 = (($22) + 1)|0;
 HEAP32[$0>>2] = $21;
 $23 = HEAP32[$$pre1>>2]|0;
 $24 = ($p|0)==(0|0);
 if ($24) {
  label = 12;
 } else {
  $25 = (($p) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 262144;
  $28 = ($27|0)==(0);
  if ($28) {
   label = 12;
  } else {
   $29 = (($p) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)<(0);
   $32 = $31 << 31 >> 31;
   $33 = (_sqlite3LogEst($30,$32)|0);
   $34 = $33&65535;
   $35 = (($34) + 65437)|0;
   $36 = $35&65535;
   $37 = ((($23) + (($22*48)|0)|0) + 16|0);
   HEAP16[$37>>1] = $36;
  }
 }
 if ((label|0) == 12) {
  $38 = ((($23) + (($22*48)|0)|0) + 16|0);
  HEAP16[$38>>1] = -1;
 }
 $39 = (_sqlite3ExprSkipCollate($p)|0);
 $40 = (($23) + (($22*48)|0)|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($23) + (($22*48)|0)|0) + 20|0);
 HEAP8[$41>>0] = $wtFlags;
 $42 = ((($23) + (($22*48)|0)|0) + 24|0);
 HEAP32[$42>>2] = $pWC;
 $43 = ((($23) + (($22*48)|0)|0) + 4|0);
 HEAP32[$43>>2] = -1;
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function _exprCommute($pParse,$pExpr) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pExpr) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 256;
 $5 = (($pExpr) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 256;
 $10 = ($4|0)==($9|0);
 do {
  if ($10) {
   $11 = ($4|0)==(0);
   if (!($11)) {
    $12 = $3 & -257;
    HEAP32[$2>>2] = $12;
    $19 = $6;
    break;
   }
   $13 = (_sqlite3ExprCollSeq($pParse,$6)|0);
   $14 = ($13|0)==(0|0);
   $$pre = HEAP32[$5>>2]|0;
   if ($14) {
    $19 = $$pre;
   } else {
    $15 = (($$pre) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 | 256;
    HEAP32[$15>>2] = $17;
    $19 = $$pre;
   }
  } else {
   $19 = $6;
  }
 } while(0);
 $18 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $19;
 HEAP32[$5>>2] = $18;
 $20 = HEAP8[$pExpr>>0]|0;
 $21 = ($20&255)>(79);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $20&255;
 $23 = (($22) + 176)|0;
 $24 = $23 ^ 2;
 $25 = (($24) + 80)|0;
 $26 = $25&255;
 HEAP8[$pExpr>>0] = $26;
 STACKTOP = sp;return;
}
function _transferJoinMarkings($pDerived,$pBase) {
 $pDerived = $pDerived|0;
 $pBase = $pBase|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pDerived|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($pBase) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = (($pDerived) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 | $3;
 HEAP32[$4>>2] = $6;
 $7 = (($pBase) + 36|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (($pDerived) + 36|0);
 HEAP16[$9>>1] = $8;
 STACKTOP = sp;return;
}
function _exprAnalyzeOrTerm($pWC,$idxTerm) {
 $pWC = $pWC|0;
 $idxTerm = $idxTerm|0;
 var $$c = 0, $$c1 = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$044 = 0, $i$044$in = 0, $i$117 = 0, $i$117$in = 0, $i$223 = 0, $i$39 = 0, $i$39$in = 0;
 var $iCursor$031 = 0, $j$034 = 0, $j2$032 = 0, $okToChngToIN$263 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $pAndTerm$033 = 0, $pLeft$0$lcssa = 0, $pLeft$08 = 0, $pLeft$1 = 0, $pList$0$lcssa = 0, $pList$07 = 0, $pList$1 = 0, $pOrTerm$043 = 0, $pOrTerm$115 = 0, $pOrTerm$222 = 0, $pOrTerm$36 = 0, $pTerm$0 = 0, $phitmp = 0;
 var $phitmp60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pWC>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pWC) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + (($idxTerm*48)|0)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3DbMallocZero($2,416)|0);
 $8 = ((($4) + (($idxTerm*48)|0)|0) + 12|0);
 $$c = $7;
 HEAP32[$8>>2] = $$c;
 $9 = ($7|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($4) + (($idxTerm*48)|0)|0) + 20|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 | 16;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 _whereClauseInit($7,$0);
 _whereSplit($7,$6,71);
 _exprAnalyzeAll($7);
 $15 = (($2) + 64|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($7) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($7) + 20|0);
 $21 = ($19|0)<(1);
 if ($21) {
  $22 = (($7) + 408|0);
  $23 = $22;
  $24 = $23;
  HEAP32[$24>>2] = -1;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = -1;
  $27 = ((($4) + (($idxTerm*48)|0)|0) + 18|0);
  HEAP16[$27>>1] = 256;
  $138 = -1;$140 = -1;
 } else {
  $28 = HEAP32[$20>>2]|0;
  $29 = (($0) + 68|0);
  $100 = -1;$102 = -1;$70 = -1;$73 = -1;$i$044$in = $19;$pOrTerm$043 = $28;
  while(1) {
   $i$044 = (($i$044$in) + -1)|0;
   $30 = (($pOrTerm$043) + 18|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 & 255;
   $33 = ($32<<16>>16)==(0);
   if ($33) {
    $34 = (_sqlite3DbMallocRaw($2,408)|0);
    $35 = ($34|0)==(0|0);
    if ($35) {
     $108 = $70;$110 = $73;$119 = 0;$121 = 0;
    } else {
     $36 = (($pOrTerm$043) + 12|0);
     $$c1 = $34;
     HEAP32[$36>>2] = $$c1;
     $37 = (($pOrTerm$043) + 20|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 | 32;
     $41 = $40&255;
     HEAP8[$37>>0] = $41;
     HEAP16[$30>>1] = 512;
     $42 = HEAP32[$pWC>>2]|0;
     _whereClauseInit($34,$42);
     $43 = HEAP32[$pOrTerm$043>>2]|0;
     _whereSplit($34,$43,72);
     _exprAnalyzeAll($34);
     $44 = (($34) + 4|0);
     HEAP32[$44>>2] = $pWC;
     $45 = HEAP8[$15>>0]|0;
     $46 = ($45<<24>>24)==(0);
     if ($46) {
      $47 = (($34) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)>(0);
      if ($49) {
       $50 = (($34) + 20|0);
       $51 = HEAP32[$50>>2]|0;
       $62 = 0;$64 = 0;$j$034 = 0;$pAndTerm$033 = $51;
       while(1) {
        $52 = HEAP32[$pAndTerm$033>>2]|0;
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (_allowedOp($54)|0);
        $56 = ($55|0)==(0);
        if ($56) {
         $206 = $62;$207 = $64;
        } else {
         $57 = (($pAndTerm$033) + 8|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = (_getMask($29,$58)|0);
         $60 = tempRet0;
         $61 = $59 | $62;
         $63 = $60 | $64;
         $206 = $61;$207 = $63;
        }
        $65 = (($j$034) + 1)|0;
        $66 = (($pAndTerm$033) + 48|0);
        $67 = ($65|0)<($48|0);
        if ($67) {
         $62 = $206;$64 = $207;$j$034 = $65;$pAndTerm$033 = $66;
        } else {
         $69 = $206;$72 = $207;
         break;
        }
       }
      } else {
       $69 = 0;$72 = 0;
      }
     } else {
      $69 = 0;$72 = 0;
     }
     $68 = $69 & $70;
     $71 = $72 & $73;
     $108 = $68;$110 = $71;$119 = 0;$121 = 0;
    }
   } else {
    $74 = (($pOrTerm$043) + 20|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75 & 8;
    $77 = ($76<<24>>24)==(0);
    if ($77) {
     $78 = (($pOrTerm$043) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (_getMask($29,$79)|0);
     $81 = tempRet0;
     $82 = $75 & 2;
     $83 = ($82<<24>>24)==(0);
     if ($83) {
      $94 = $80;$96 = $81;
     } else {
      $84 = (($pOrTerm$043) + 4|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = HEAP32[$20>>2]|0;
      $87 = ((($86) + (($85*48)|0)|0) + 8|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (_getMask($29,$88)|0);
      $90 = tempRet0;
      $91 = $89 | $80;
      $92 = $90 | $81;
      $94 = $91;$96 = $92;
     }
     $93 = $94 & $70;
     $95 = $96 & $73;
     $97 = $31 & 2;
     $98 = ($97<<16>>16)==(0);
     $99 = $94 & $100;
     $101 = $96 & $102;
     $103 = $98 ? 0 : $99;
     $104 = $98 ? 0 : $101;
     $108 = $93;$110 = $95;$119 = $103;$121 = $104;
    } else {
     $108 = $70;$110 = $73;$119 = $100;$121 = $102;
    }
   }
   $105 = (($pOrTerm$043) + 48|0);
   $106 = ($i$044$in|0)<(2);
   $107 = ($108|0)==(0);
   $109 = ($110|0)==(0);
   $111 = $107 & $109;
   $or$cond = $106 | $111;
   if ($or$cond) {
    break;
   } else {
    $100 = $119;$102 = $121;$70 = $108;$73 = $110;$i$044$in = $i$044;$pOrTerm$043 = $105;
   }
  }
  $phitmp = $111 ? 0 : 256;
  $112 = (($7) + 408|0);
  $113 = $112;
  $114 = $113;
  HEAP32[$114>>2] = $108;
  $115 = (($113) + 4)|0;
  $116 = $115;
  HEAP32[$116>>2] = $110;
  $117 = ((($4) + (($idxTerm*48)|0)|0) + 18|0);
  HEAP16[$117>>1] = $phitmp;
  $118 = ($119|0)==(0);
  $120 = ($121|0)==(0);
  $122 = $118 & $120;
  if ($122) {
   STACKTOP = sp;return;
  } else {
   $138 = $119;$140 = $121;
  }
 }
 $123 = (($0) + 68|0);
 $iCursor$031 = -1;$j2$032 = 1;
 L33: while(1) {
  $124 = HEAP32[$18>>2]|0;
  $125 = ($124|0)>(0);
  if (!($125)) {
   label = 47;
   break;
  }
  $126 = HEAP32[$20>>2]|0;
  $i$117$in = $124;$pOrTerm$115 = $126;
  while(1) {
   $i$117 = (($i$117$in) + -1)|0;
   $127 = (($pOrTerm$115) + 20|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = $129 & 191;
   $131 = $130&255;
   HEAP8[$127>>0] = $131;
   $132 = (($pOrTerm$115) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==($iCursor$031|0);
   if (!($134)) {
    $135 = (_getMask($123,$133)|0);
    $136 = tempRet0;
    $137 = $135 & $138;
    $139 = $136 & $140;
    $141 = ($137|0)==(0);
    $142 = ($139|0)==(0);
    $143 = $141 & $142;
    if (!($143)) {
     break;
    }
   }
   $144 = (($pOrTerm$115) + 48|0);
   $145 = ($i$117|0)>(0);
   if ($145) {
    $i$117$in = $i$117;$pOrTerm$115 = $144;
   } else {
    label = 47;
    break L33;
   }
  }
  $146 = (($pOrTerm$115) + 12|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($i$117$in|0)<(1);
  if ($148) {
   label = 47;
   break;
  } else {
   $150 = $133;$i$223 = $i$117;$pOrTerm$222 = $pOrTerm$115;
  }
  while(1) {
   $149 = ($150|0)==($133|0);
   if ($149) {
    $156 = (($pOrTerm$222) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($147|0);
    if (!($158)) {
     $okToChngToIN$263 = 1;
     break;
    }
    $159 = HEAP32[$pOrTerm$222>>2]|0;
    $160 = (($159) + 16|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (_sqlite3ExprAffinity($161)|0);
    $163 = HEAP32[$pOrTerm$222>>2]|0;
    $164 = (($163) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (_sqlite3ExprAffinity($165)|0);
    $167 = ($162<<24>>24)==(0);
    $168 = ($162<<24>>24)==($166<<24>>24);
    $or$cond4 = $167 | $168;
    if (!($or$cond4)) {
     $okToChngToIN$263 = 1;
     break;
    }
    $169 = (($pOrTerm$222) + 20|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = $171 | 64;
    $173 = $172&255;
    HEAP8[$169>>0] = $173;
   } else {
    $151 = (($pOrTerm$222) + 20|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = $153 & 191;
    $155 = $154&255;
    HEAP8[$151>>0] = $155;
   }
   $174 = ($i$223|0)<(1);
   if ($174) {
    $okToChngToIN$263 = 0;
    break;
   }
   $175 = (($pOrTerm$222) + 48|0);
   $176 = (($i$223) + -1)|0;
   $$phi$trans$insert = (($pOrTerm$222) + 56|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $150 = $$pre;$i$223 = $176;$pOrTerm$222 = $175;
  }
  $177 = ($j2$032|0)<(2);
  $or$cond2 = $177 & $okToChngToIN$263;
  if (!($or$cond2)) {
   label = 37;
   break;
  }
  $phitmp60 = (($j2$032) + 1)|0;
  $iCursor$031 = $133;$j2$032 = $phitmp60;
 }
 if ((label|0) == 37) {
  if ($okToChngToIN$263) {
   STACKTOP = sp;return;
  }
  $178 = HEAP32[$18>>2]|0;
  $179 = ($178|0)>(0);
  if ($179) {
   $180 = HEAP32[$20>>2]|0;
   $i$39$in = $178;$pLeft$08 = 0;$pList$07 = 0;$pOrTerm$36 = $180;
   while(1) {
    $i$39 = (($i$39$in) + -1)|0;
    $181 = (($pOrTerm$36) + 20|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182 & 64;
    $184 = ($183<<24>>24)==(0);
    if ($184) {
     $pLeft$1 = $pLeft$08;$pList$1 = $pList$07;
    } else {
     $185 = HEAP32[$pOrTerm$36>>2]|0;
     $186 = (($185) + 16|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (_sqlite3ExprDup($2,$187,0)|0);
     $189 = HEAP32[$0>>2]|0;
     $$idx$val = HEAP32[$189>>2]|0;
     $190 = (_sqlite3ExprListAppend($$idx$val,$pList$07,$188)|0);
     $191 = HEAP32[$pOrTerm$36>>2]|0;
     $192 = (($191) + 12|0);
     $193 = HEAP32[$192>>2]|0;
     $pLeft$1 = $193;$pList$1 = $190;
    }
    $194 = (($pOrTerm$36) + 48|0);
    $195 = ($i$39|0)>(0);
    if ($195) {
     $i$39$in = $i$39;$pLeft$08 = $pLeft$1;$pList$07 = $pList$1;$pOrTerm$36 = $194;
    } else {
     $pLeft$0$lcssa = $pLeft$1;$pList$0$lcssa = $pList$1;
     break;
    }
   }
  } else {
   $pLeft$0$lcssa = 0;$pList$0$lcssa = 0;
  }
  $196 = (_sqlite3ExprDup($2,$pLeft$0$lcssa,0)|0);
  $197 = (_sqlite3PExpr($1,75,$196,0,0)|0);
  $198 = ($197|0)==(0|0);
  if ($198) {
   _sqlite3ExprListDelete($2,$pList$0$lcssa);
   $pTerm$0 = $5;
  } else {
   _transferJoinMarkings($197,$6);
   $199 = (($197) + 20|0);
   HEAP32[$199>>2] = $pList$0$lcssa;
   $200 = (_whereClauseInsert($pWC,$197,3)|0);
   _exprAnalyze($pWC,$200);
   $201 = HEAP32[$3>>2]|0;
   $202 = (($201) + (($idxTerm*48)|0)|0);
   $203 = ((($201) + (($200*48)|0)|0) + 4|0);
   HEAP32[$203>>2] = $idxTerm;
   $204 = ((($201) + (($idxTerm*48)|0)|0) + 21|0);
   HEAP8[$204>>0] = 1;
   $pTerm$0 = $202;
  }
  $205 = (($pTerm$0) + 18|0);
  HEAP16[$205>>1] = 2048;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 47) {
  STACKTOP = sp;return;
 }
}
function _isLikeOrGlob($pParse,$pExpr,$ppPrefix,$pisComplete,$pnoCase) {
 $pParse = $pParse|0;
 $pExpr = $pExpr|0;
 $ppPrefix = $ppPrefix|0;
 $pisComplete = $pisComplete|0;
 $pnoCase = $pnoCase|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$04 = 0, $pVal$0 = 0, $pVal$03 = 0, $wc = 0, $z$0 = 0;
 var $z$1 = 0, $z$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $wc = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (_sqlite3IsLikeFunction($0,$pExpr,$pnoCase,$wc)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pExpr) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(-102);
 if (!($10)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_sqlite3ExprAffinity($8)|0);
 $12 = ($11<<24>>24)==(97);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($8) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 44|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 & 16;
 $18 = ($17<<24>>24)==(0);
 if (!($18)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_sqlite3ExprSkipCollate($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(-121);
 if ($23) {
  $24 = (($pParse) + 480|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($21) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = (_sqlite3VdbeGetBoundValue($25,$28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   $z$0 = 0;
  } else {
   $31 = (_sqlite3_value_type($29)|0);
   $32 = ($31|0)==(3);
   if ($32) {
    $33 = (_sqlite3_value_text($29)|0);
    $z$0 = $33;
   } else {
    $z$0 = 0;
   }
  }
  $34 = (($pParse) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _sqlite3VdbeSetVarmask($35,$28);
  $pVal$0 = $29;$z$1 = $z$0;
  label = 12;
 } else {
  $36 = ($22<<24>>24)==(97);
  if ($36) {
   $37 = (($21) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $pVal$0 = 0;$z$1 = $38;
   label = 12;
  } else {
   $pVal$03 = 0;$z$2 = 0;
  }
 }
 if ((label|0) == 12) {
  $39 = ($z$1|0)==(0|0);
  if ($39) {
   $pVal$03 = $pVal$0;$z$2 = 0;
  } else {
   $40 = HEAP8[$z$1>>0]|0;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $pVal$03 = $pVal$0;$z$2 = 0;
   } else {
    $42 = (($wc) + 2|0);
    $43 = (($wc) + 1|0);
    $44 = HEAP8[$wc>>0]|0;
    $45 = HEAP8[$43>>0]|0;
    $46 = HEAP8[$42>>0]|0;
    $52 = $40;$cnt$04 = 0;
    while(1) {
     $51 = ($52<<24>>24)==($44<<24>>24);
     if ($51) {
      $$lcssa = $44;$cnt$0$lcssa = $cnt$04;
      break;
     }
     $53 = ($52<<24>>24)==($45<<24>>24);
     if ($53) {
      $$lcssa = $45;$cnt$0$lcssa = $cnt$04;
      break;
     }
     $54 = ($52<<24>>24)==($46<<24>>24);
     $48 = (($cnt$04) + 1)|0;
     if ($54) {
      $$lcssa = $46;$cnt$0$lcssa = $cnt$04;
      break;
     }
     $47 = (($z$1) + ($48)|0);
     $49 = HEAP8[$47>>0]|0;
     $50 = ($49<<24>>24)==(0);
     if ($50) {
      $$lcssa = 0;$cnt$0$lcssa = $48;
      break;
     } else {
      $52 = $49;$cnt$04 = $48;
     }
    }
    $55 = ($cnt$0$lcssa|0)==(0);
    if ($55) {
     $pVal$03 = $pVal$0;$z$2 = 0;
    } else {
     $56 = (($cnt$0$lcssa) + -1)|0;
     $57 = (($z$1) + ($56)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($58<<24>>24)==(-1);
     if ($59) {
      $pVal$03 = $pVal$0;$z$2 = 0;
     } else {
      $60 = HEAP8[$wc>>0]|0;
      $61 = ($$lcssa<<24>>24)==($60<<24>>24);
      if ($61) {
       $62 = (($cnt$0$lcssa) + 1)|0;
       $63 = (($z$1) + ($62)|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ($64<<24>>24)==(0);
       $67 = $65;
      } else {
       $67 = 0;
      }
      $66 = $67&1;
      HEAP32[$pisComplete>>2] = $66;
      $68 = (_sqlite3Expr($0,97,$z$1)|0);
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       $70 = (($68) + 8|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($71) + ($cnt$0$lcssa)|0);
       HEAP8[$72>>0] = 0;
      }
      HEAP32[$ppPrefix>>2] = $68;
      if ($23) {
       $73 = (($pParse) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($21) + 32|0);
       $76 = HEAP16[$75>>1]|0;
       $77 = $76 << 16 >> 16;
       _sqlite3VdbeSetVarmask($74,$77);
       $78 = HEAP32[$pisComplete>>2]|0;
       $79 = ($78|0)==(0);
       if ($79) {
        $pVal$03 = $pVal$0;$z$2 = $z$1;
       } else {
        $80 = (($21) + 8|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($81) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = ($83<<24>>24)==(0);
        if ($84) {
         $pVal$03 = $pVal$0;$z$2 = $z$1;
        } else {
         $85 = (_sqlite3GetTempReg($pParse)|0);
         (_sqlite3ExprCodeTarget($pParse,$21,$85)|0);
         $$idx = (($74) + 32|0);
         $$idx$val = HEAP32[$$idx>>2]|0;
         $86 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
         $87 = (($86) + -1)|0;
         _sqlite3VdbeChangeP3($74,$87,0);
         _sqlite3ReleaseTempReg($pParse,$85);
         $pVal$03 = $pVal$0;$z$2 = $z$1;
        }
       }
      } else {
       $pVal$03 = $pVal$0;$z$2 = $z$1;
      }
     }
    }
   }
  }
 }
 _sqlite3ValueFree($pVal$03);
 $88 = ($z$2|0)!=(0|0);
 $89 = $88&1;
 $$0 = $89;
 STACKTOP = sp;return ($$0|0);
}
function _isMatchOfColumn($pExpr) {
 $pExpr = $pExpr|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pExpr>>0]|0;
 $1 = ($0<<24>>24)==(-103);
 if ($1) {
  $2 = (($pExpr) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_sqlite3_stricmp($3,21600)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (($pExpr) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = (($7) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(-102);
    $$ = $15&1;
    $$0 = $$;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3IsLikeFunction($db,$pExpr,$pIsNocase,$aWc) {
 $db = $db|0;
 $pExpr = $pExpr|0;
 $pIsNocase = $pIsNocase|0;
 $aWc = $aWc|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pExpr>>0]|0;
 $1 = ($0<<24>>24)==(-103);
 if ($1) {
  $2 = (($pExpr) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(2);
   if ($6) {
    $7 = (($pExpr) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_sqlite3Strlen30($8)|0);
    $10 = (_sqlite3FindFunction($db,$8,$9,2,1,0)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = 0;
    } else {
     $12 = (($10) + 2|0);
     $13 = HEAP16[$12>>1]|0;
     $14 = $13 & 4;
     $15 = ($14<<16>>16)==(0);
     if ($15) {
      $$0 = 0;
     } else {
      $16 = (($10) + 4|0);
      $17 = HEAP32[$16>>2]|0;
      ;HEAP8[$aWc+0>>0]=HEAP8[$17+0>>0]|0;HEAP8[$aWc+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$aWc+2>>0]=HEAP8[$17+2>>0]|0;
      $18 = HEAP16[$12>>1]|0;
      $19 = ($18&65535) >>> 3;
      $$lobit = $19 & 1;
      $20 = $$lobit ^ 1;
      $21 = $20&65535;
      HEAP32[$pIsNocase>>2] = $21;
      $$0 = 1;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeGetBoundValue($v,$iVar) {
 $v = $v|0;
 $iVar = $iVar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($iVar) + -1)|0;
  $2 = (($v) + 60|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + (($1*40)|0)|0);
  $5 = ((($3) + (($1*40)|0)|0) + 28|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & 1;
  $8 = ($7<<16>>16)==(0);
  if ($8) {
   $9 = HEAP32[$v>>2]|0;
   $10 = (_sqlite3ValueNew($9)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0 = 0;
   } else {
    _sqlite3VdbeMemCopy($10,$4);
    _sqlite3ValueApplyAffinity($10,98,1);
    $$0 = $10;
   }
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeSetVarmask($v,$iVar) {
 $v = $v|0;
 $iVar = $iVar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iVar|0)>(32);
 if ($0) {
  $1 = (($v) + 188|0);
  HEAP32[$1>>2] = -1;
  STACKTOP = sp;return;
 } else {
  $2 = (($iVar) + -1)|0;
  $3 = 1 << $2;
  $4 = (($v) + 188|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 | $3;
  HEAP32[$4>>2] = $6;
  STACKTOP = sp;return;
 }
}
function _sqlite3RowidConstraint($pParse,$onError,$pTab) {
 $pParse = $pParse|0;
 $onError = $onError|0;
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $zMsg$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pTab) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)>(-1);
 $3 = HEAP32[$pParse>>2]|0;
 $4 = HEAP32[$pTab>>2]|0;
 if ($2) {
  $5 = $1 << 16 >> 16;
  $6 = (($pTab) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + (($5*24)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $10 = (_sqlite3MPrintf($3,17600,$vararg_buffer)|0);
  $rc$0 = 1555;$zMsg$0 = $10;
  _sqlite3HaltConstraint($pParse,$rc$0,$onError,$zMsg$0,-1,2);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer2>>2] = $4;
  $11 = (_sqlite3MPrintf($3,24448,$vararg_buffer2)|0);
  $rc$0 = 2579;$zMsg$0 = $11;
  _sqlite3HaltConstraint($pParse,$rc$0,$onError,$zMsg$0,-1,2);
  STACKTOP = sp;return;
 }
}
function _sqlite3FkRequired($pParse$0$0$val$0$6$val,$pTab,$aChange,$chngRowid) {
 $pParse$0$0$val$0$6$val = $pParse$0$0$val$0$6$val|0;
 $pTab = $pTab|0;
 $aChange = $aChange|0;
 $chngRowid = $chngRowid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$03 = 0, $p$04 = 0, $p$11 = 0, $pTab$idx$val = 0, $pTab$idx1 = 0, $pTab$idx1$val = 0, $pTab$idx2$val = 0, $pTab$idx3 = 0, $pTab$idx3$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pParse$0$0$val$0$6$val & 524288;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($aChange|0)==(0|0);
 if ($2) {
  $pTab$idx2$val = HEAP32[$pTab>>2]|0;
  $pTab$idx3 = (($pTab) + 68|0);
  $pTab$idx3$val = HEAP32[$pTab$idx3>>2]|0;
  $3 = (_sqlite3FkReferences($pTab$idx2$val,$pTab$idx3$val)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = (($pTab) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)!=(0|0);
   $9 = $7;
  } else {
   $9 = 1;
  }
  $8 = $9&1;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pTab) + 16|0);
 $p$03 = HEAP32[$10>>2]|0;
 $11 = ($p$03|0)==(0|0);
 L11: do {
  if (!($11)) {
   $p$04 = $p$03;
   while(1) {
    $14 = (_fkChildIsModified($pTab,$p$04,$aChange,$chngRowid)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $$0 = 1;
     break;
    }
    $12 = (($p$04) + 4|0);
    $p$0 = HEAP32[$12>>2]|0;
    $13 = ($p$0|0)==(0|0);
    if ($13) {
     break L11;
    } else {
     $p$04 = $p$0;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $pTab$idx$val = HEAP32[$pTab>>2]|0;
 $pTab$idx1 = (($pTab) + 68|0);
 $pTab$idx1$val = HEAP32[$pTab$idx1>>2]|0;
 $16 = (_sqlite3FkReferences($pTab$idx$val,$pTab$idx1$val)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $p$11 = $16;
 }
 while(1) {
  $18 = (_fkParentIsModified($pTab,$p$11,$aChange,$chngRowid)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $$0 = 1;
   label = 12;
   break;
  }
  $20 = (($p$11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 0;
   label = 12;
   break;
  } else {
   $p$11 = $21;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3MultiWrite($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $pParse$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = (($pParse$) + 22|0);
 HEAP8[$3>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3GenerateRowDelete($pParse,$pTab,$pTrigger,$iDataCur,$iIdxCur,$iPk,$nPk,$count,$onconf,$bNoSeek) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pTrigger = $pTrigger|0;
 $iDataCur = $iDataCur|0;
 $iIdxCur = $iIdxCur|0;
 $iPk = $iPk|0;
 $nPk = $nPk|0;
 $count = $count|0;
 $onconf = $onconf|0;
 $bNoSeek = $bNoSeek|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iCol$03 = 0, $iOld$0 = 0;
 var $or$cond = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx2 = (($1) + 24|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $2 = (_sqlite3VdbeMakeLabel($$idx2$val)|0);
 $3 = (($pTab) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 4;
 $6 = $5 & 2;
 $7 = $6 ^ 67;
 $8 = ($bNoSeek<<24>>24)==(0);
 if ($8) {
  $9 = $7&255;
  $10 = $nPk << 16 >> 16;
  (_sqlite3VdbeAddOp4Int($1,$9,$iDataCur,$2,$iPk,$10)|0);
 }
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 $pParse$idx$val$idx = (($pParse$idx$val) + 24|0);
 $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
 $11 = (_sqlite3FkRequired($pParse$idx$val$idx$val,$pTab,0,0)|0);
 $12 = ($11|0)==(0);
 $13 = ($pTrigger|0)==(0|0);
 $or$cond = $12 & $13;
 if ($or$cond) {
  $iOld$0 = 0;
 } else {
  $14 = $onconf&255;
  $15 = (_sqlite3TriggerColmask($pParse,$pTrigger,0,0,3,$pTab,$14)|0);
  $16 = (_sqlite3FkOldmask($pParse,$pTab)|0);
  $17 = $16 | $15;
  $18 = (($pParse) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = (($pTab) + 38|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = (($20) + ($23))|0;
  HEAP32[$18>>2] = $24;
  (_sqlite3VdbeAddOp2($1,33,$iPk,$20)|0);
  $25 = HEAP16[$21>>1]|0;
  $26 = ($25<<16>>16)>(0);
  if ($26) {
   $27 = ($17|0)==(-1);
   $28 = (($19) + 2)|0;
   $51 = $25;$iCol$03 = 0;
   while(1) {
    if ($27) {
     label = 9;
    } else {
     $29 = ($iCol$03|0)<(32);
     if ($29) {
      $30 = 1 << $iCol$03;
      $31 = $30 & $17;
      $32 = ($31|0)==(0);
      if ($32) {
       $36 = $51;
      } else {
       label = 9;
      }
     } else {
      $36 = $51;
     }
    }
    if ((label|0) == 9) {
     label = 0;
     $33 = (($28) + ($iCol$03))|0;
     _sqlite3ExprCodeGetColumnOfTable($1,$pTab,$iDataCur,$iCol$03,$33);
     $$pre = HEAP16[$21>>1]|0;
     $36 = $$pre;
    }
    $34 = (($iCol$03) + 1)|0;
    $35 = $36 << 16 >> 16;
    $37 = ($34|0)<($35|0);
    if ($37) {
     $51 = $36;$iCol$03 = $34;
    } else {
     break;
    }
   }
  }
  $$idx1 = (($1) + 32|0);
  $$idx1$val = HEAP32[$$idx1>>2]|0;
  $38 = (_sqlite3VdbeCurrentAddr($$idx1$val)|0);
  _sqlite3CodeRowTrigger($pParse,$pTrigger,109,0,1,$pTab,$20,$14,$2);
  $$idx$val = HEAP32[$$idx1>>2]|0;
  $39 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
  $40 = ($38|0)<($39|0);
  if ($40) {
   $41 = $7&255;
   $42 = $nPk << 16 >> 16;
   (_sqlite3VdbeAddOp4Int($1,$41,$iDataCur,$2,$iPk,$42)|0);
  }
  _sqlite3FkCheck($pParse,$pTab,$20,0,0,0);
  $iOld$0 = $20;
 }
 $43 = (($pTab) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  _sqlite3FkActions($pParse,$pTab,0,$iOld$0,0,0);
  $50 = $onconf&255;
  _sqlite3CodeRowTrigger($pParse,$pTrigger,109,0,2,$pTab,$iOld$0,$50,$2);
  _sqlite3VdbeResolveLabel($1,$2);
  STACKTOP = sp;return;
 }
 _sqlite3GenerateRowIndexDelete($pParse,$pTab,$iDataCur,$iIdxCur,0);
 $46 = ($count<<24>>24)!=(0);
 $47 = $46&1;
 (_sqlite3VdbeAddOp2($1,74,$iDataCur,$47)|0);
 $48 = ($count<<24>>24)==(0);
 if ($48) {
  _sqlite3FkActions($pParse,$pTab,0,$iOld$0,0,0);
  $50 = $onconf&255;
  _sqlite3CodeRowTrigger($pParse,$pTrigger,109,0,2,$pTab,$iOld$0,$50,$2);
  _sqlite3VdbeResolveLabel($1,$2);
  STACKTOP = sp;return;
 }
 $49 = HEAP32[$pTab>>2]|0;
 _sqlite3VdbeChangeP4($1,-1,$49,0);
 _sqlite3FkActions($pParse,$pTab,0,$iOld$0,0,0);
 $50 = $onconf&255;
 _sqlite3CodeRowTrigger($pParse,$pTrigger,109,0,2,$pTab,$iOld$0,$50,$2);
 _sqlite3VdbeResolveLabel($1,$2);
 STACKTOP = sp;return;
}
function _sqlite3GenerateRowIndexDelete($pParse,$pTab,$iDataCur,$iIdxCur,$aRegIdx) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $iDataCur = $iDataCur|0;
 $iIdxCur = $iIdxCur|0;
 $aRegIdx = $aRegIdx|0;
 var $$old = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $iPartIdxLabel = 0, $or$cond = 0, $pIdx$0 = 0, $pIdx$01 = 0, $pIdx$06 = 0, $pPrior$02 = 0, $pPrior$1 = 0, $r1$03 = 0;
 var $r1$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $iPartIdxLabel = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pTab) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 32;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $14 = 0;
 } else {
  $6 = (_sqlite3PrimaryKeyIndex($pTab)|0);
  $14 = $6;
 }
 $7 = (($pTab) + 8|0);
 $pIdx$01 = HEAP32[$7>>2]|0;
 $8 = ($pIdx$01|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($aRegIdx|0)==(0|0);
 $i$04 = 0;$pIdx$06 = $pIdx$01;$pPrior$02 = 0;$r1$03 = -1;
 while(1) {
  if ($9) {
   $$old = ($pIdx$06|0)==($14|0);
   if ($$old) {
    $pPrior$1 = $pPrior$02;$r1$1 = $r1$03;
   } else {
    label = 8;
   }
  } else {
   $10 = (($aRegIdx) + ($i$04<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $13 = ($pIdx$06|0)==($14|0);
   $or$cond = $12 | $13;
   if ($or$cond) {
    $pPrior$1 = $pPrior$02;$r1$1 = $r1$03;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $15 = (_sqlite3GenerateIndexKey($pParse,$pIdx$06,$iDataCur,0,1,$iPartIdxLabel,$pPrior$02,$r1$03)|0);
   $16 = (($i$04) + ($iIdxCur))|0;
   $17 = (($pIdx$06) + 55|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 8;
   $20 = ($19<<24>>24)==(0);
   $21 = (($pIdx$06) + 50|0);
   $22 = (($pIdx$06) + 52|0);
   $$sink$in = $20 ? $22 : $21;
   $$sink = HEAP16[$$sink$in>>1]|0;
   $23 = $$sink&65535;
   (_sqlite3VdbeAddOp3($1,108,$16,$15,$23)|0);
   $24 = HEAP32[$iPartIdxLabel>>2]|0;
   _sqlite3VdbeResolveLabel($1,$24);
   $pPrior$1 = $pIdx$06;$r1$1 = $15;
  }
  $25 = (($i$04) + 1)|0;
  $26 = (($pIdx$06) + 20|0);
  $pIdx$0 = HEAP32[$26>>2]|0;
  $27 = ($pIdx$0|0)==(0|0);
  if ($27) {
   break;
  } else {
   $i$04 = $25;$pIdx$06 = $pIdx$0;$pPrior$02 = $pPrior$1;$r1$03 = $r1$1;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3TriggerColmask($pParse,$pTrigger,$pChanges,$isNew,$tr_tm,$pTab,$orconf) {
 $pParse = $pParse|0;
 $pTrigger = $pTrigger|0;
 $pChanges = $pChanges|0;
 $isNew = $isNew|0;
 $tr_tm = $tr_tm|0;
 $pTab = $pTab|0;
 $orconf = $orconf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask$0$lcssa = 0, $mask$02 = 0, $mask$1 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pChanges|0)!=(0|0);
 $1 = $0 ? 110 : 109;
 $2 = ($pTrigger|0)==(0|0);
 if ($2) {
  $mask$0$lcssa = 0;
  STACKTOP = sp;return ($mask$0$lcssa|0);
 } else {
  $mask$02 = 0;$p$01 = $pTrigger;
 }
 while(1) {
  $3 = (($p$01) + 8|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($1|0);
  if ($6) {
   $7 = (($p$01) + 9|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = $9 & $tr_tm;
   $11 = ($10|0)==(0);
   if ($11) {
    $mask$1 = $mask$02;
   } else {
    $12 = (($p$01) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_checkColumnOverlap($13,$pChanges)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $mask$1 = $mask$02;
    } else {
     $16 = (_getRowTrigger($pParse,$p$01,$pTab,$orconf)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      $mask$1 = $mask$02;
     } else {
      $18 = ((($16) + ($isNew<<2)|0) + 16|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 | $mask$02;
      $mask$1 = $20;
     }
    }
   }
  } else {
   $mask$1 = $mask$02;
  }
  $21 = (($p$01) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   $mask$0$lcssa = $mask$1;
   break;
  } else {
   $mask$02 = $mask$1;$p$01 = $22;
  }
 }
 STACKTOP = sp;return ($mask$0$lcssa|0);
}
function _sqlite3FkOldmask($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $$ = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$011 = 0, $i$13 = 0, $mask$0$lcssa = 0, $mask$015 = 0, $mask$1$lcssa = 0, $mask$110 = 0, $mask$25 = 0, $mask$32 = 0, $mask$4 = 0, $mask$5 = 0, $p$0 = 0, $p$014 = 0, $p$016 = 0, $p$16 = 0, $pIdx = 0, $pTab$idx$val = 0, $pTab$idx1 = 0, $pTab$idx1$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pIdx = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if ($4) {
  $mask$5 = 0;
  STACKTOP = sp;return ($mask$5|0);
 }
 $5 = (($pTab) + 16|0);
 $p$014 = HEAP32[$5>>2]|0;
 $6 = ($p$014|0)==(0|0);
 if ($6) {
  $mask$0$lcssa = 0;
 } else {
  $mask$015 = 0;$p$016 = $p$014;
  while(1) {
   $7 = (($p$016) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)>(0);
   if ($9) {
    $i$011 = 0;$mask$110 = $mask$015;
    while(1) {
     $10 = ((($p$016) + ($i$011<<3)|0) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)>(31);
     $13 = 1 << $11;
     $$ = $12 ? -1 : $13;
     $14 = $$ | $mask$110;
     $15 = (($i$011) + 1)|0;
     $16 = ($15|0)<($8|0);
     if ($16) {
      $i$011 = $15;$mask$110 = $14;
     } else {
      $mask$1$lcssa = $14;
      break;
     }
    }
   } else {
    $mask$1$lcssa = $mask$015;
   }
   $17 = (($p$016) + 4|0);
   $p$0 = HEAP32[$17>>2]|0;
   $18 = ($p$0|0)==(0|0);
   if ($18) {
    $mask$0$lcssa = $mask$1$lcssa;
    break;
   } else {
    $mask$015 = $mask$1$lcssa;$p$016 = $p$0;
   }
  }
 }
 $pTab$idx$val = HEAP32[$pTab>>2]|0;
 $pTab$idx1 = (($pTab) + 68|0);
 $pTab$idx1$val = HEAP32[$pTab$idx1>>2]|0;
 $19 = (_sqlite3FkReferences($pTab$idx$val,$pTab$idx1$val)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $mask$5 = $mask$0$lcssa;
  STACKTOP = sp;return ($mask$5|0);
 } else {
  $mask$25 = $mask$0$lcssa;$p$16 = $19;
 }
 while(1) {
  HEAP32[$pIdx>>2] = 0;
  (_sqlite3FkLocateIndex($pParse,$pTab,$p$16,$pIdx,0)|0);
  $21 = HEAP32[$pIdx>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $mask$4 = $mask$25;
  } else {
   $23 = (($21) + 50|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = ($24<<16>>16)==(0);
   if ($25) {
    $mask$4 = $mask$25;
   } else {
    $26 = $24&65535;
    $$phi$trans$insert = (($21) + 4|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $i$13 = 0;$mask$32 = $mask$25;
    while(1) {
     $27 = (($$pre) + ($i$13<<1)|0);
     $28 = HEAP16[$27>>1]|0;
     $29 = ($28<<16>>16)>(31);
     if ($29) {
      $33 = -1;
     } else {
      $30 = $28 << 16 >> 16;
      $31 = 1 << $30;
      $33 = $31;
     }
     $32 = $33 | $mask$32;
     $34 = (($i$13) + 1)|0;
     $35 = ($34|0)<($26|0);
     if ($35) {
      $i$13 = $34;$mask$32 = $32;
     } else {
      $mask$4 = $32;
      break;
     }
    }
   }
  }
  $36 = (($p$16) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   $mask$5 = $mask$4;
   break;
  } else {
   $mask$25 = $mask$4;$p$16 = $37;
  }
 }
 STACKTOP = sp;return ($mask$5|0);
}
function _sqlite3FkActions($pParse,$pTab,$pChanges,$regOld,$aChange,$bChngRowid) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pChanges = $pChanges|0;
 $regOld = $regOld|0;
 $aChange = $aChange|0;
 $bChngRowid = $bChngRowid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFKey$02 = 0, $pTab$idx$val = 0, $pTab$idx1 = 0, $pTab$idx1$val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $pTab$idx$val = HEAP32[$pTab>>2]|0;
 $pTab$idx1 = (($pTab) + 68|0);
 $pTab$idx1$val = HEAP32[$pTab$idx1>>2]|0;
 $5 = (_sqlite3FkReferences($pTab$idx$val,$pTab$idx1$val)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ($aChange|0)==(0|0);
 $pFKey$02 = $5;
 while(1) {
  if ($7) {
   label = 6;
  } else {
   $8 = (_fkParentIsModified($pTab,$pFKey$02,$aChange,$bChngRowid)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $10 = (_fkActionTrigger($pParse,$pTab,$pFKey$02,$pChanges)|0);
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _sqlite3CodeRowTriggerDirect($pParse,$10,$pTab,$regOld,2,0);
   }
  }
  $12 = (($pFKey$02) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   break;
  } else {
   $pFKey$02 = $13;
  }
 }
 STACKTOP = sp;return;
}
function _fkActionTrigger($pParse,$pTab,$pFKey,$pChanges) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pFKey = $pFKey|0;
 $pChanges = $pChanges|0;
 var $$0 = 0, $$in = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aiCol = 0, $i$05 = 0, $or$cond = 0;
 var $pIdx = 0, $pList$0$lcssa = 0, $pList$04 = 0, $pList$1 = 0, $pNew$0 = 0, $pParse$idx$val = 0, $pParse$idx2$val = 0, $pSelect$0 = 0, $pStep$0 = 0, $pWhen$0$lcssa = 0, $pWhen$06 = 0, $pWhen$1 = 0, $pWhen$2 = 0, $pWhere$0$lcssa = 0, $pWhere$03 = 0, $pWhere$1 = 0, $tFrom = 0, $tFromCol = 0, $tNew = 0, $tOld = 0;
 var $tToCol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $pIdx = sp + 44|0;
 $aiCol = sp + 40|0;
 $tOld = sp + 8|0;
 $tNew = sp;
 $tFromCol = sp + 32|0;
 $tToCol = sp + 24|0;
 $tFrom = sp + 16|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = ($pChanges|0)!=(0|0);
 $2 = $1&1;
 $3 = ((($pFKey) + ($2)|0) + 25|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($pFKey) + ($2<<2)|0) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4<<24>>24)!=(0);
 $9 = ($7|0)==(0|0);
 $or$cond = $8 & $9;
 if (!($or$cond)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$pIdx>>2] = 0;
 HEAP32[$aiCol>>2] = 0;
 $10 = (_sqlite3FkLocateIndex($pParse,$pTab,$pFKey,$pIdx,$aiCol)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($pFKey) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = 24392;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = 24400;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($pFKey) + 36|0);
  $28 = HEAP32[$pIdx>>2]|0;
  $29 = ($28|0)==(0|0);
  $30 = (($tToCol) + 4|0);
  $31 = (($tFromCol) + 4|0);
  $32 = (($28) + 4|0);
  $33 = (($pTab) + 4|0);
  $i$05 = 0;$pList$04 = 0;$pWhen$06 = 0;$pWhere$03 = 0;
  while(1) {
   $34 = $tOld;
   $35 = $34;
   HEAP32[$35>>2] = $17;
   $36 = (($34) + 4)|0;
   $37 = $36;
   HEAP32[$37>>2] = $20;
   $38 = $tNew;
   $39 = $38;
   HEAP32[$39>>2] = $23;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = $26;
   $42 = HEAP32[$aiCol>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $$in = $27;
   } else {
    $44 = (($42) + ($i$05<<2)|0);
    $$in = $44;
   }
   $45 = HEAP32[$$in>>2]|0;
   if ($29) {
    $53 = 24408;
   } else {
    $46 = HEAP32[$32>>2]|0;
    $47 = (($46) + ($i$05<<1)|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48 << 16 >> 16;
    $50 = HEAP32[$33>>2]|0;
    $51 = (($50) + (($49*24)|0)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52;
   }
   HEAP32[$tToCol>>2] = $53;
   $54 = HEAP32[$pFKey>>2]|0;
   $55 = (($54) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + (($45*24)|0)|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$tFromCol>>2] = $58;
   $59 = (_sqlite3Strlen30($53)|0);
   HEAP32[$30>>2] = $59;
   $60 = (_sqlite3Strlen30($58)|0);
   HEAP32[$31>>2] = $60;
   $61 = (_sqlite3PExpr($pParse,27,0,0,$tOld)|0);
   $62 = (_sqlite3PExpr($pParse,27,0,0,$tToCol)|0);
   $63 = (_sqlite3PExpr($pParse,122,$61,$62,0)|0);
   $64 = (_sqlite3PExpr($pParse,27,0,0,$tFromCol)|0);
   $65 = (_sqlite3PExpr($pParse,79,$63,$64,0)|0);
   $66 = (_sqlite3ExprAnd($0,$pWhere$03,$65)|0);
   if ($1) {
    $67 = (_sqlite3PExpr($pParse,27,0,0,$tOld)|0);
    $68 = (_sqlite3PExpr($pParse,27,0,0,$tToCol)|0);
    $69 = (_sqlite3PExpr($pParse,122,$67,$68,0)|0);
    $70 = (_sqlite3PExpr($pParse,27,0,0,$tNew)|0);
    $71 = (_sqlite3PExpr($pParse,27,0,0,$tToCol)|0);
    $72 = (_sqlite3PExpr($pParse,122,$70,$71,0)|0);
    $73 = (_sqlite3PExpr($pParse,73,$69,$72,0)|0);
    $74 = (_sqlite3ExprAnd($0,$pWhen$06,$73)|0);
    $pWhen$1 = $74;
   } else {
    $pWhen$1 = $pWhen$06;
   }
   do {
    if ((($4<<24>>24) == 9)) {
     if ($1) {
      $75 = (_sqlite3PExpr($pParse,27,0,0,$tNew)|0);
      $76 = (_sqlite3PExpr($pParse,27,0,0,$tToCol)|0);
      $77 = (_sqlite3PExpr($pParse,122,$75,$76,0)|0);
      $pNew$0 = $77;
      label = 19;
     } else {
      $pList$1 = $pList$04;
     }
    } else if ((($4<<24>>24) == 8)) {
     $78 = HEAP32[$pFKey>>2]|0;
     $79 = (($78) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80) + (($45*24)|0)|0) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      $85 = (_sqlite3PExpr($pParse,101,0,0,0)|0);
      $pNew$0 = $85;
      label = 19;
      break;
     } else {
      $84 = (_sqlite3ExprDup($0,$82,0)|0);
      $pNew$0 = $84;
      label = 19;
      break;
     }
    } else if ((($4<<24>>24) == 6)) {
     $pList$1 = $pList$04;
    } else {
     $86 = (_sqlite3PExpr($pParse,101,0,0,0)|0);
     $pNew$0 = $86;
     label = 19;
    }
   } while(0);
   if ((label|0) == 19) {
    label = 0;
    $pParse$idx2$val = HEAP32[$pParse>>2]|0;
    $87 = (_sqlite3ExprListAppend($pParse$idx2$val,$pList$04,$pNew$0)|0);
    _sqlite3ExprListSetName($pParse,$87,$tFromCol,0);
    $pList$1 = $87;
   }
   $88 = (($i$05) + 1)|0;
   $89 = HEAP32[$12>>2]|0;
   $90 = ($88|0)<($89|0);
   if ($90) {
    $i$05 = $88;$pList$04 = $pList$1;$pWhen$06 = $pWhen$1;$pWhere$03 = $66;
   } else {
    $$pre$phiZ2D = $pFKey;$pList$0$lcssa = $pList$1;$pWhen$0$lcssa = $pWhen$1;$pWhere$0$lcssa = $66;
    break;
   }
  }
 } else {
  $$pre$phiZ2D = $pFKey;$pList$0$lcssa = 0;$pWhen$0$lcssa = 0;$pWhere$0$lcssa = 0;
 }
 $91 = HEAP32[$aiCol>>2]|0;
 _sqlite3DbFree($0,$91);
 $92 = HEAP32[$$pre$phiZ2D>>2]|0;
 $93 = HEAP32[$92>>2]|0;
 $94 = (_sqlite3Strlen30($93)|0);
 $95 = ($4<<24>>24)==(6);
 if ($95) {
  HEAP32[$tFrom>>2] = $93;
  $96 = (($tFrom) + 4|0);
  HEAP32[$96>>2] = $94;
  $97 = (_sqlite3Expr($0,57,24416)|0);
  $98 = ($97|0)==(0|0);
  if (!($98)) {
   $99 = (($97) + 1|0);
   HEAP8[$99>>0] = 2;
  }
  $pParse$idx$val = HEAP32[$pParse>>2]|0;
  $100 = (_sqlite3ExprListAppend($pParse$idx$val,0,$97)|0);
  $101 = (_sqlite3SrcListAppend($0,0,$tFrom,0)|0);
  $102 = (_sqlite3SelectNew($pParse,$100,$101,$pWhere$0$lcssa,0,0,0,0,0,0)|0);
  $pSelect$0 = $102;$pWhere$1 = 0;
 } else {
  $pSelect$0 = 0;$pWhere$1 = $pWhere$0$lcssa;
 }
 $103 = (($0) + 242|0);
 $104 = HEAP8[$103>>0]|0;
 HEAP8[$103>>0] = 0;
 $105 = (($94) + 77)|0;
 $106 = (_sqlite3DbMallocZero($0,$105)|0);
 $107 = ($106|0)==(0|0);
 if ($107) {
  $pStep$0 = 0;$pWhen$2 = $pWhen$0$lcssa;
 } else {
  $108 = (($106) + 36|0);
  $109 = (($106) + 28|0);
  HEAP32[$109>>2] = $108;
  $110 = (($106) + 76|0);
  $111 = (($106) + 48|0);
  HEAP32[$111>>2] = $110;
  $112 = (($106) + 52|0);
  HEAP32[$112>>2] = $94;
  _memcpy(($110|0),($93|0),($94|0))|0;
  $113 = (_sqlite3ExprDup($0,$pWhere$1,1)|0);
  $114 = (($106) + 56|0);
  HEAP32[$114>>2] = $113;
  $115 = (_sqlite3ExprListDup($0,$pList$0$lcssa,1)|0);
  $116 = (($106) + 60|0);
  HEAP32[$116>>2] = $115;
  $117 = (_sqlite3SelectDup($0,$pSelect$0,1)|0);
  $118 = (($106) + 44|0);
  HEAP32[$118>>2] = $117;
  $119 = ($pWhen$0$lcssa|0)==(0|0);
  if ($119) {
   $pStep$0 = $108;$pWhen$2 = 0;
  } else {
   $120 = (_sqlite3PExpr($pParse,19,$pWhen$0$lcssa,0,0)|0);
   $121 = (_sqlite3ExprDup($0,$120,1)|0);
   $122 = (($106) + 12|0);
   HEAP32[$122>>2] = $121;
   $pStep$0 = $108;$pWhen$2 = $120;
  }
 }
 HEAP8[$103>>0] = $104;
 _sqlite3ExprDelete($0,$pWhere$1);
 _sqlite3ExprDelete($0,$pWhen$2);
 _sqlite3ExprListDelete($0,$pList$0$lcssa);
 _sqlite3SelectDelete($0,$pSelect$0);
 $123 = (($0) + 64|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = ($124<<24>>24)==(1);
 if ($125) {
  _fkTriggerDelete($0,$106);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($5|0) == 6)) {
  HEAP8[$pStep$0>>0] = 119;
 } else if ((($5|0) == 9)) {
  if ($1) {
   label = 34;
  } else {
   HEAP8[$pStep$0>>0] = 109;
  }
 } else {
  label = 34;
 }
 if ((label|0) == 34) {
  HEAP8[$pStep$0>>0] = 110;
 }
 $126 = (($pStep$0) + 4|0);
 HEAP32[$126>>2] = $106;
 $127 = (($pTab) + 68|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($106) + 20|0);
 HEAP32[$129>>2] = $128;
 $130 = HEAP32[$127>>2]|0;
 $131 = (($106) + 24|0);
 HEAP32[$131>>2] = $130;
 HEAP32[$6>>2] = $106;
 $132 = $1 ? 110 : 109;
 $133 = (($106) + 8|0);
 HEAP8[$133>>0] = $132;
 $$0 = $106;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3CodeRowTriggerDirect($pParse,$p,$pTab,$reg,$orconf,$ignoreJump) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pTab = $pTab|0;
 $reg = $reg|0;
 $orconf = $orconf|0;
 $ignoreJump = $ignoreJump|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (_getRowTrigger($pParse,$p,$pTab,$orconf)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$p>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $15 = 0;
 } else {
  $5 = HEAP32[$pParse>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 18;
  $$lobit = $8 & 1;
  $9 = $$lobit ^ 1;
  $phitmp = $9&255;
  $15 = $phitmp;
 }
 $10 = (($pParse) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 (_sqlite3VdbeAddOp3($0,127,$reg,$ignoreJump,$12)|0);
 $13 = (($1) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _sqlite3VdbeChangeP4($0,-1,$14,-18);
 _sqlite3VdbeChangeP5($0,$15);
 STACKTOP = sp;return;
}
function _getRowTrigger($pParse,$pTrigger,$pTab,$orconf) {
 $pParse = $pParse|0;
 $pTrigger = $pTrigger|0;
 $pTab = $pTab|0;
 $orconf = $orconf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$ = 0, $pPrg$0 = 0, $pPrg$05 = 0, $pPrg$06 = 0, $pPrg$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = (($pParse$) + 532|0);
 $pPrg$05 = HEAP32[$3>>2]|0;
 $4 = ($pPrg$05|0)==(0|0);
 L1: do {
  if (!($4)) {
   $pPrg$06 = $pPrg$05;
   while(1) {
    $5 = HEAP32[$pPrg$06>>2]|0;
    $6 = ($5|0)==($pTrigger|0);
    if ($6) {
     $7 = (($pPrg$06) + 12|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)==($orconf|0);
     if ($9) {
      $pPrg$1 = $pPrg$06;
      break;
     }
    }
    $10 = (($pPrg$06) + 4|0);
    $pPrg$0 = HEAP32[$10>>2]|0;
    $11 = ($pPrg$0|0)==(0|0);
    if ($11) {
     break L1;
    } else {
     $pPrg$06 = $pPrg$0;
    }
   }
   STACKTOP = sp;return ($pPrg$1|0);
  }
 } while(0);
 $12 = (_codeRowTrigger($pParse,$pTrigger,$pTab,$orconf)|0);
 $pPrg$1 = $12;
 STACKTOP = sp;return ($pPrg$1|0);
}
function _codeRowTrigger($pParse,$pTrigger,$pTab,$orconf) {
 $pParse = $pParse|0;
 $pTrigger = $pTrigger|0;
 $pTab = $pTab|0;
 $orconf = $orconf|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $iEndTrigger$0 = 0, $iEndTrigger$1 = 0, $pParse$ = 0, $sNC = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $sNC = sp + 8|0;
 $0 = (($pParse) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $pParse$ = $2 ? $pParse : $1;
 $3 = HEAP32[$pParse>>2]|0;
 $4 = (_sqlite3DbMallocZero($3,24)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pParse$) + 532|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + 4|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$6>>2] = $4;
 $9 = (_sqlite3DbMallocZero($3,28)|0);
 $10 = (($4) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($pParse$) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 _sqlite3VdbeLinkSubProgram($13,$9);
 HEAP32[$4>>2] = $pTrigger;
 $14 = (($4) + 12|0);
 HEAP32[$14>>2] = $orconf;
 $15 = (($4) + 16|0);
 HEAP32[$15>>2] = -1;
 $16 = (($4) + 20|0);
 HEAP32[$16>>2] = -1;
 $17 = (_sqlite3DbMallocZero($3,540)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
 HEAP32[$sNC>>2] = $17;
 HEAP32[$17>>2] = $3;
 $19 = (($17) + 416|0);
 HEAP32[$19>>2] = $pTab;
 $20 = (($17) + 412|0);
 HEAP32[$20>>2] = $pParse$;
 $21 = HEAP32[$pTrigger>>2]|0;
 $22 = (($17) + 496|0);
 HEAP32[$22>>2] = $21;
 $23 = (($pTrigger) + 8|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($17) + 440|0);
 HEAP8[$25>>0] = $24;
 $26 = (($pParse) + 428|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($17) + 428|0);
 HEAP32[$28>>2] = $27;
 $29 = (_sqlite3GetVdbe($17)|0);
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = HEAP32[$pTrigger>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $32 = (_sqlite3MPrintf($3,24192,$vararg_buffer)|0);
  _sqlite3VdbeChangeP4($29,-1,$32,-1);
  $33 = (($pTrigger) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $iEndTrigger$1 = 0;
  } else {
   $36 = (_sqlite3ExprDup($3,$34,0)|0);
   $37 = (_sqlite3ResolveExprNames($sNC,$36)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = (($3) + 64|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $$idx = (($29) + 24|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $42 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
     _sqlite3ExprIfFalse($17,$36,$42,8);
     $iEndTrigger$0 = $42;
    } else {
     $iEndTrigger$0 = 0;
    }
   } else {
    $iEndTrigger$0 = 0;
   }
   _sqlite3ExprDelete($3,$36);
   $iEndTrigger$1 = $iEndTrigger$0;
  }
  $43 = (($pTrigger) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  _codeTriggerProgram($17,$44,$orconf);
  $45 = ($iEndTrigger$1|0)==(0);
  if (!($45)) {
   _sqlite3VdbeResolveLabel($29,$iEndTrigger$1);
  }
  (_sqlite3VdbeAddOp0($29,24)|0);
  _transferParseError($pParse,$17);
  $46 = (($3) + 64|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = ($47<<24>>24)==(0);
  if ($48) {
   $49 = (($9) + 4|0);
   $50 = (($pParse$) + 396|0);
   $51 = (_sqlite3VdbeTakeOpArray($29,$49,$50)|0);
   HEAP32[$9>>2] = $51;
  }
  $52 = (($17) + 76|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($9) + 8|0);
  HEAP32[$54>>2] = $53;
  $55 = (($17) + 72|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($9) + 12|0);
  HEAP32[$57>>2] = $56;
  $58 = (($17) + 84|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($9) + 16|0);
  HEAP32[$60>>2] = $59;
  $61 = (($9) + 20|0);
  HEAP32[$61>>2] = $pTrigger;
  $62 = (($17) + 432|0);
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$15>>2] = $63;
  $64 = (($17) + 436|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$16>>2] = $65;
  _sqlite3VdbeDelete($29);
 }
 _sqlite3ParserReset($17);
 _sqlite3DbFree($3,$17);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeLinkSubProgram($pVdbe,$p) {
 $pVdbe = $pVdbe|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVdbe) + 192|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 24|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$0>>2] = $p;
 STACKTOP = sp;return;
}
function _codeTriggerProgram($pParse,$pStepList,$orconf) {
 $pParse = $pParse|0;
 $pStepList = $pStepList|0;
 $orconf = $orconf|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pStep$01 = 0, $sDest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sDest = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = ($pStepList|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ($orconf|0)==(10);
 $5 = (($pParse) + 441|0);
 $6 = $orconf&255;
 $pStep$01 = $pStepList;
 while(1) {
  if ($4) {
   $7 = (($pStep$01) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   $$sink = $8;
  } else {
   $$sink = $6;
  }
  HEAP8[$5>>0] = $$sink;
  $9 = HEAP8[$pStep$01>>0]|0;
  $10 = $9&255;
  if ((($10|0) == 110)) {
   $11 = (_targetSrcList($pParse,$pStep$01)|0);
   $12 = (($pStep$01) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_sqlite3ExprListDup($2,$13,0)|0);
   $15 = (($pStep$01) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_sqlite3ExprDup($2,$16,0)|0);
   $18 = HEAP8[$5>>0]|0;
   $19 = $18&255;
   _sqlite3Update($pParse,$11,$14,$17,$19);
  } else if ((($10|0) == 108)) {
   $20 = (_targetSrcList($pParse,$pStep$01)|0);
   $21 = (($pStep$01) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_sqlite3SelectDup($2,$22,0)|0);
   $24 = (($pStep$01) + 28|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_sqlite3IdListDup($2,$25)|0);
   $27 = HEAP8[$5>>0]|0;
   $28 = $27&255;
   _sqlite3Insert($pParse,$20,$23,$26,$28);
  } else if ((($10|0) == 109)) {
   $29 = (_targetSrcList($pParse,$pStep$01)|0);
   $30 = (($pStep$01) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_sqlite3ExprDup($2,$31,0)|0);
   _sqlite3DeleteFrom($pParse,$29,$32);
  } else {
   $33 = (($pStep$01) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_sqlite3SelectDup($2,$34,0)|0);
   _sqlite3SelectDestInit($sDest,4,0);
   (_sqlite3Select($pParse,$35,$sDest)|0);
   _sqlite3SelectDelete($2,$35);
  }
  $36 = HEAP8[$pStep$01>>0]|0;
  $37 = ($36<<24>>24)==(119);
  if (!($37)) {
   (_sqlite3VdbeAddOp0($1,75)|0);
  }
  $38 = (($pStep$01) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   break;
  } else {
   $pStep$01 = $39;
  }
 }
 STACKTOP = sp;return;
}
function _transferParseError($pTo,$pFrom) {
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTo) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (($pFrom) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($pTo) + 4|0);
  HEAP32[$5>>2] = $4;
  $6 = (($pFrom) + 68|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[$pFrom>>2]|0;
  $9 = (($pFrom) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _sqlite3DbFree($8,$10);
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeTakeOpArray($p,$pnOp,$pnMaxArg) {
 $p = $p|0;
 $pnOp = $pnOp|0;
 $pnMaxArg = $pnMaxArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _resolveP2Values($p,$pnMaxArg);
 $2 = (($p) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$pnOp>>2] = $3;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return ($1|0);
}
function _resolveP2Values($p,$pMaxFuncArgs) {
 $p = $p|0;
 $pMaxFuncArgs = $pMaxFuncArgs|0;
 var $$nMaxArgs$0 = 0, $$nMaxArgs$01 = 0, $$nMaxArgs$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0;
 var $i$07$in = 0, $nMaxArgs$0$lcssa = 0, $nMaxArgs$06 = 0, $nMaxArgs$1 = 0, $pOp$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMaxFuncArgs>>2]|0;
 $1 = (($p) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 116|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($p) + 88|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & -769;
 $8 = $7 | 256;
 HEAP16[$5>>1] = $8;
 $9 = (($p) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 if (!($11)) {
  $nMaxArgs$0$lcssa = $0;
  $53 = HEAP32[$p>>2]|0;
  $54 = HEAP32[$3>>2]|0;
  _sqlite3DbFree($53,$54);
  HEAP32[$3>>2] = 0;
  $55 = (($2) + 112|0);
  HEAP32[$55>>2] = 0;
  HEAP32[$pMaxFuncArgs>>2] = $nMaxArgs$0$lcssa;
  STACKTOP = sp;return;
 }
 $12 = (($p) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $i$07$in = $10;$nMaxArgs$06 = $0;$pOp$04 = $13;
 while(1) {
  $i$07 = (($i$07$in) + -1)|0;
  $14 = HEAP8[$pOp$04>>0]|0;
  $15 = $14&255;
  switch ($15|0) {
  case 2: case 3:  {
   label = 7;
   break;
  }
  case 6: case 8:  {
   $38 = (($pOp$04) + 16|0);
   HEAP32[$38>>2] = (172);
   $39 = (($pOp$04) + 1|0);
   HEAP8[$39>>0] = -19;
   $nMaxArgs$1 = $nMaxArgs$06;
   break;
  }
  case 12: case 13: case 11:  {
   $27 = HEAP16[$5>>1]|0;
   $28 = $27 & -769;
   $29 = $28 | 512;
   HEAP16[$5>>1] = $29;
   $nMaxArgs$1 = $nMaxArgs$06;
   break;
  }
  case 14:  {
   $33 = (($pOp$04) + -16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)>($nMaxArgs$06|0);
   $$nMaxArgs$02 = $35 ? $34 : $nMaxArgs$06;
   $nMaxArgs$1 = $$nMaxArgs$02;
   break;
  }
  case 10: case 1:  {
   $16 = (($pOp$04) + 3|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)>($nMaxArgs$06|0);
   $$nMaxArgs$0 = $19 ? $18 : $nMaxArgs$06;
   $nMaxArgs$1 = $$nMaxArgs$0;
   break;
  }
  case 5: case 7: case 9:  {
   $36 = (($pOp$04) + 16|0);
   HEAP32[$36>>2] = (171);
   $37 = (($pOp$04) + 1|0);
   HEAP8[$37>>0] = -19;
   $nMaxArgs$1 = $nMaxArgs$06;
   break;
  }
  case 4:  {
   $20 = (($pOp$04) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    label = 7;
   } else {
    $23 = HEAP16[$5>>1]|0;
    $24 = $23 & -257;
    HEAP16[$5>>1] = $24;
    label = 7;
   }
   break;
  }
  case 15:  {
   $30 = (($pOp$04) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)>($nMaxArgs$06|0);
   $$nMaxArgs$01 = $32 ? $31 : $nMaxArgs$06;
   $nMaxArgs$1 = $$nMaxArgs$01;
   break;
  }
  default: {
   $nMaxArgs$1 = $nMaxArgs$06;
  }
  }
  if ((label|0) == 7) {
   label = 0;
   $25 = HEAP16[$5>>1]|0;
   $26 = $25 | 512;
   HEAP16[$5>>1] = $26;
   $nMaxArgs$1 = $nMaxArgs$06;
  }
  $40 = (24208 + ($15)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = (($pOp$04) + 2|0);
  HEAP8[$42>>0] = $41;
  $43 = $41 & 1;
  $44 = ($43<<24>>24)==(0);
  if (!($44)) {
   $45 = (($pOp$04) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<(0);
   if ($47) {
    $48 = $46 ^ -1;
    $49 = (($4) + ($48<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[$45>>2] = $50;
   }
  }
  $51 = (($pOp$04) + 20|0);
  $52 = ($i$07|0)>(0);
  if ($52) {
   $i$07$in = $i$07;$nMaxArgs$06 = $nMaxArgs$1;$pOp$04 = $51;
  } else {
   $nMaxArgs$0$lcssa = $nMaxArgs$1;
   break;
  }
 }
 $53 = HEAP32[$p>>2]|0;
 $54 = HEAP32[$3>>2]|0;
 _sqlite3DbFree($53,$54);
 HEAP32[$3>>2] = 0;
 $55 = (($2) + 112|0);
 HEAP32[$55>>2] = 0;
 HEAP32[$pMaxFuncArgs>>2] = $nMaxArgs$0$lcssa;
 STACKTOP = sp;return;
}
function _sqlite3BtreeNext($pCur,$pRes) {
 $pCur = $pCur|0;
 $pRes = $pRes|0;
 var $$0 = 0, $$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = (($pCur) + 86|0);
 $2 = (($pCur) + 58|0);
 $3 = (($pCur) + 82|0);
 $4 = (($pCur) + 76|0);
 L1: while(1) {
  $5 = HEAP8[$0>>0]|0;
  $6 = ($5<<24>>24)==(1);
  if (!($6)) {
   $7 = ($5&255)>(2);
   if ($7) {
    $8 = (_btreeRestoreCursorPosition($pCur)|0);
    $9 = ($8|0)==(0);
    if (!($9)) {
     label = 6;
     break;
    }
    $$pre19 = HEAP8[$0>>0]|0;
    $11 = $$pre19;
   } else {
    $11 = $5;
   }
   $10 = ($11<<24>>24)==(0);
   if ($10) {
    label = 8;
    break;
   }
   $12 = HEAP32[$4>>2]|0;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP8[$0>>0] = 1;
    $14 = ($12|0)>(0);
    HEAP32[$4>>2] = 0;
    if ($14) {
     label = 11;
     break;
    }
   }
  }
  $15 = HEAP16[$1>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = ((($pCur) + ($16<<2)|0) + 128|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($pCur) + ($16<<1)|0) + 88|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = (($20) + 1)<<16>>16;
  HEAP16[$19>>1] = $21;
  HEAP16[$2>>1] = 0;
  HEAP8[$3>>0] = 0;
  $22 = (($18) + 16|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = ($21&65535)<($23&65535);
  if ($24) {
   label = 22;
   break;
  }
  $25 = (($18) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   label = 15;
   break;
  }
  $$pre = HEAP16[$1>>1]|0;
  $40 = $$pre;
  while(1) {
   $39 = ($40<<16>>16)==(0);
   if ($39) {
    label = 19;
    break L1;
   }
   _moveToParent($pCur);
   $41 = HEAP16[$1>>1]|0;
   $42 = $41 << 16 >> 16;
   $43 = ((($pCur) + ($42<<2)|0) + 128|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($pCur) + ($42<<1)|0) + 88|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = (($44) + 16|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = ($46&65535)<($48&65535);
   if ($49) {
    break;
   } else {
    $40 = $41;
   }
  }
  HEAP32[$pRes>>2] = 0;
  $50 = (($44) + 2|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $$0 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$pRes>>2] = 0;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  HEAP32[$pRes>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 11) {
  HEAP32[$pRes>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  $28 = (($18) + 5|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($30) + 8)|0;
  $32 = (($18) + 56|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($31)|0);
  $35 = (_sqlite3Get4byte($34)|0);
  $36 = (_moveToChild($pCur,$35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = (_moveToLeftmost($pCur)|0);
   HEAP32[$pRes>>2] = 0;
   $$0 = $38;
   STACKTOP = sp;return ($$0|0);
  } else {
   HEAP32[$pRes>>2] = 0;
   $$0 = $36;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 19) {
  HEAP32[$pRes>>2] = 1;
  HEAP8[$0>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  HEAP32[$pRes>>2] = 0;
  $53 = (($18) + 3|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $56 = (_moveToLeftmost($pCur)|0);
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3BtreePrevious($pCur,$pRes) {
 $pCur = $pCur|0;
 $pRes = $pRes|0;
 var $$0 = 0, $$pre = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 81|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pCur) + 83|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(1);
 if (!($3)) {
  $4 = ($2&255)>(2);
  do {
   if ($4) {
    $5 = (_btreeRestoreCursorPosition($pCur)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $$pre = HEAP8[$1>>0]|0;
     $8 = $$pre;
     break;
    }
    HEAP32[$pRes>>2] = 0;
    $$0 = $5;
    STACKTOP = sp;return ($$0|0);
   } else {
    $8 = $2;
   }
  } while(0);
  $7 = ($8<<24>>24)==(0);
  if ($7) {
   HEAP32[$pRes>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($pCur) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   HEAP8[$1>>0] = 1;
   $12 = ($10|0)<(0);
   HEAP32[$9>>2] = 0;
   if ($12) {
    HEAP32[$pRes>>2] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $13 = (($pCur) + 86|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ((($pCur) + ($15<<2)|0) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 $21 = ((($pCur) + ($15<<1)|0) + 88|0);
 $22 = HEAP16[$21>>1]|0;
 do {
  if ($20) {
   $24 = $22&65535;
   $25 = (($17) + 56|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($17) + 18|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = $24 << 1;
   $31 = (($17) + 64|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($30)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 << 8;
   $$sum1 = $30 | 1;
   $37 = (($32) + ($$sum1)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $36 | $39;
   $41 = $40 & $29;
   $42 = (($26) + ($41)|0);
   $43 = (_sqlite3Get4byte($42)|0);
   $44 = (_moveToChild($pCur,$43)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = (_moveToRightmost($pCur)|0);
    $rc$0 = $46;
    break;
   }
   HEAP32[$pRes>>2] = 0;
   $$0 = $44;
   STACKTOP = sp;return ($$0|0);
  } else {
   $23 = ($22<<16>>16)==(0);
   L20: do {
    if ($23) {
     $48 = $14;
     while(1) {
      $47 = ($48<<16>>16)==(0);
      if ($47) {
       break;
      }
      _moveToParent($pCur);
      $49 = HEAP16[$13>>1]|0;
      $50 = $49 << 16 >> 16;
      $51 = ((($pCur) + ($50<<1)|0) + 88|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52<<16>>16)==(0);
      if ($53) {
       $48 = $49;
      } else {
       $57 = $49;
       break L20;
      }
     }
     HEAP8[$1>>0] = 0;
     HEAP32[$pRes>>2] = 1;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $57 = $14;
    }
   } while(0);
   $54 = (($pCur) + 58|0);
   HEAP16[$54>>1] = 0;
   $55 = (($pCur) + 82|0);
   HEAP8[$55>>0] = 0;
   $56 = $57 << 16 >> 16;
   $58 = ((($pCur) + ($56<<1)|0) + 88|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = (($59) + -1)<<16>>16;
   HEAP16[$58>>1] = $60;
   $61 = HEAP16[$13>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = ((($pCur) + ($62<<2)|0) + 128|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 2|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)==(0);
   if ($67) {
    $rc$0 = 0;
   } else {
    $68 = (($64) + 3|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = ($69<<24>>24)==(0);
    if ($70) {
     $71 = (_sqlite3BtreePrevious($pCur,$pRes)|0);
     $rc$0 = $71;
    } else {
     $rc$0 = 0;
    }
   }
  }
 } while(0);
 HEAP32[$pRes>>2] = 0;
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _btreeRestoreCursorPosition($pCur) {
 $pCur = $pCur|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(4);
 if ($2) {
  $3 = (($pCur) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 } else {
  HEAP8[$0>>0] = 0;
  $5 = (($pCur) + 72|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($pCur) + 64|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($pCur) + 76|0);
  $15 = (_btreeMoveto($pCur,$6,$10,$13,0,$14)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = HEAP32[$5>>2]|0;
   _sqlite3_free($17);
   HEAP32[$5>>2] = 0;
   $18 = HEAP32[$14>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $$0 = 0;
   } else {
    $20 = HEAP8[$0>>0]|0;
    $21 = ($20<<24>>24)==(1);
    if ($21) {
     HEAP8[$0>>0] = 2;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  } else {
   $$0 = $15;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _moveToChild($pCur,$newPgno) {
 $pCur = $pCur|0;
 $newPgno = $newPgno|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pNewPage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pNewPage = sp;
 $0 = (($pCur) + 86|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($1<<16>>16)>(18);
 if ($3) {
  _sqlite3CorruptError(55058);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pCur) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pCur) + 80|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = $8 ? 2 : 0;
 $10 = (_getAndInitPage($5,$newPgno,$pNewPage,$9)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$pNewPage>>2]|0;
 $13 = (($2) + 1)|0;
 $14 = ((($pCur) + ($13<<2)|0) + 128|0);
 HEAP32[$14>>2] = $12;
 $15 = ((($pCur) + ($13<<1)|0) + 88|0);
 HEAP16[$15>>1] = 0;
 $16 = HEAP16[$0>>1]|0;
 $17 = (($16) + 1)<<16>>16;
 HEAP16[$0>>1] = $17;
 $18 = (($pCur) + 58|0);
 HEAP16[$18>>1] = 0;
 $19 = (($pCur) + 82|0);
 HEAP8[$19>>0] = 0;
 $20 = (($12) + 16|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)==(0);
 if (!($22)) {
  $23 = (($12) + 2|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ((($pCur) + ($2<<2)|0) + 128|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($24<<24>>24)==($28<<24>>24);
  if ($29) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sqlite3CorruptError(55070);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _moveToRightmost($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 86|0);
 while(1) {
  $1 = HEAP16[$0>>1]|0;
  $2 = $1 << 16 >> 16;
  $3 = ((($pCur) + ($2<<2)|0) + 128|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 3|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   break;
  }
  $8 = (($4) + 5|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($10) + 8)|0;
  $12 = (($4) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11)|0);
  $15 = (_sqlite3Get4byte($14)|0);
  $16 = (($4) + 16|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = ((($pCur) + ($2<<1)|0) + 88|0);
  HEAP16[$18>>1] = $17;
  $19 = (_moveToChild($pCur,$15)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $rc$03 = $19;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($rc$03|0);
 }
 $21 = (($4) + 16|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = (($23) + 65535)|0;
 $25 = $24&65535;
 $26 = ((($pCur) + ($2<<1)|0) + 88|0);
 HEAP16[$26>>1] = $25;
 $27 = (($pCur) + 58|0);
 HEAP16[$27>>1] = 0;
 $28 = (($pCur) + 82|0);
 HEAP8[$28>>0] = 0;
 $rc$03 = 0;
 STACKTOP = sp;return ($rc$03|0);
}
function _moveToParent($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 86|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($pCur) + ($2<<2)|0) + 128|0);
 $4 = HEAP32[$3>>2]|0;
 _releasePage($4);
 $5 = HEAP16[$0>>1]|0;
 $6 = (($5) + -1)<<16>>16;
 HEAP16[$0>>1] = $6;
 $7 = (($pCur) + 58|0);
 HEAP16[$7>>1] = 0;
 $8 = (($pCur) + 82|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function _getAndInitPage($pBt,$pgno,$ppPage,$bReadonly) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 $ppPage = $ppPage|0;
 $bReadonly = $bReadonly|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pBt$idx = 0, $pBt$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pBt$idx = (($pBt) + 44|0);
 $pBt$idx$val = HEAP32[$pBt$idx>>2]|0;
 $0 = (_btreePagecount($pBt$idx$val)|0);
 $1 = ($0>>>0)<($pgno>>>0);
 if ($1) {
  _sqlite3CorruptError(52469);
  $rc$0 = 11;
 } else {
  $2 = (_btreeGetPage($pBt,$pgno,$ppPage,$bReadonly)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = HEAP32[$ppPage>>2]|0;
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (_btreeInitPage($4)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     $rc$0 = 0;
    } else {
     $9 = HEAP32[$ppPage>>2]|0;
     _releasePage($9);
     $rc$0 = $7;
    }
   } else {
    $rc$0 = 0;
   }
  } else {
   $rc$0 = $2;
  }
 }
 STACKTOP = sp;return ($rc$0|0);
}
function _btreePagecount($pBt$0$18$val) {
 $pBt$0$18$val = $pBt$0$18$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pBt$0$18$val|0);
}
function _btreeGetPage($pBt,$pgno,$ppPage,$flags) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 $ppPage = $ppPage|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pDbPage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pDbPage = sp;
 $0 = HEAP32[$pBt>>2]|0;
 $1 = (_sqlite3PagerAcquire($0,$pgno,$pDbPage,$flags)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$pDbPage>>2]|0;
 $4 = (_btreePageFromDbPage($3,$pgno,$pBt)|0);
 HEAP32[$ppPage>>2] = $4;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _btreePageFromDbPage($pDbPage,$pgno,$pBt) {
 $pDbPage = $pDbPage|0;
 $pgno = $pgno|0;
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pDbPage$idx = 0, $pDbPage$idx$val = 0, $pDbPage$idx1 = 0, $pDbPage$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $pDbPage$idx1 = (($pDbPage) + 8|0);
 $pDbPage$idx1$val = HEAP32[$pDbPage$idx1>>2]|0;
 $0 = (_sqlite3PagerGetExtra($pDbPage$idx1$val)|0);
 $pDbPage$idx = (($pDbPage) + 4|0);
 $pDbPage$idx$val = HEAP32[$pDbPage$idx>>2]|0;
 $1 = (_sqlite3PagerGetData($pDbPage$idx$val)|0);
 $2 = (($0) + 56|0);
 HEAP32[$2>>2] = $1;
 $3 = (($0) + 68|0);
 HEAP32[$3>>2] = $pDbPage;
 $4 = (($0) + 52|0);
 HEAP32[$4>>2] = $pBt;
 $5 = (($0) + 72|0);
 HEAP32[$5>>2] = $pgno;
 $6 = ($pgno|0)==(1);
 $7 = $6 ? 100 : 0;
 $8 = (($0) + 5|0);
 HEAP8[$8>>0] = $7;
 STACKTOP = sp;return ($0|0);
}
function _btreeMoveto($pCur,$pKey,$0,$1,$bias,$pRes) {
 $pCur = $pCur|0;
 $pKey = $pKey|0;
 $0 = $0|0;
 $1 = $1|0;
 $bias = $bias|0;
 $pRes = $pRes|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $aSpace = 0, $pFree = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $aSpace = sp + 8|0;
 $pFree = sp;
 HEAP32[$pFree>>2] = 0;
 $2 = ($pKey|0)==(0|0);
 if ($2) {
  $3 = (_sqlite3BtreeMovetoUnpacked($pCur,0,$0,$1,$bias,$pRes)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pCur) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_sqlite3VdbeAllocUnpackedRecord($5,$aSpace,200,$pFree)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$4>>2]|0;
 _sqlite3VdbeRecordUnpack($8,$0,$pKey,$6);
 $9 = (($6) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $12 = HEAP32[$4>>2]|0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$pFree>>2]|0;
  _sqlite3DbFree($14,$15);
  _sqlite3CorruptError(51517);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$pFree>>2]|0;
 $16 = (_sqlite3BtreeMovetoUnpacked($pCur,$6,$0,$1,$bias,$pRes)|0);
 $17 = ($$pre|0)==(0|0);
 if ($17) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($pCur) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 _sqlite3DbFree($21,$$pre);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeAllocUnpackedRecord($pKeyInfo,$pSpace,$szSpace,$ppFree) {
 $pKeyInfo = $pKeyInfo|0;
 $pSpace = $pSpace|0;
 $szSpace = $szSpace|0;
 $ppFree = $ppFree|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pSpace;
 $1 = (0 - ($0))|0;
 $2 = $1 & 7;
 $3 = (($pKeyInfo) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($5*40)|0;
 $7 = (($6) + 64)|0;
 $8 = (($2) + ($szSpace))|0;
 $9 = ($7|0)>($8|0);
 do {
  if ($9) {
   $10 = (($pKeyInfo) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_sqlite3DbMallocRaw($11,$7)|0);
   HEAP32[$ppFree>>2] = $12;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pre = HEAP16[$3>>1]|0;
    $18 = $$pre;$p$0$in = $12;
    break;
   }
  } else {
   $14 = (($pSpace) + ($2)|0);
   HEAP32[$ppFree>>2] = 0;
   $18 = $4;$p$0$in = $14;
  }
 } while(0);
 $15 = (($p$0$in) + 24|0);
 $16 = (($p$0$in) + 8|0);
 HEAP32[$16>>2] = $15;
 HEAP32[$p$0$in>>2] = $pKeyInfo;
 $17 = $18&65535;
 $19 = (($17) + 1)|0;
 $20 = $19&65535;
 $21 = (($p$0$in) + 4|0);
 HEAP16[$21>>1] = $20;
 $$0 = $p$0$in;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeRecordUnpack($pKeyInfo,$nKey,$pKey,$p) {
 $pKeyInfo = $pKeyInfo|0;
 $nKey = $nKey|0;
 $pKey = $pKey|0;
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d$02 = 0, $idx$03 = 0;
 var $or$cond = 0, $pMem$05 = 0, $serial_type = 0, $szHdr = 0, $u$0$lcssa = 0, $u$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $szHdr = sp + 4|0;
 $serial_type = sp;
 $0 = (($p) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 6|0);
 HEAP8[$2>>0] = 0;
 $3 = HEAP8[$pKey>>0]|0;
 $4 = ($3<<24>>24)>(-1);
 if ($4) {
  $5 = $3&255;
  HEAP32[$szHdr>>2] = $5;
  $10 = $5;$8 = 1;
 } else {
  $6 = (_sqlite3GetVarint32($pKey,$szHdr)|0);
  $$pre = HEAP32[$szHdr>>2]|0;
  $10 = $$pre;$8 = $6;
 }
 $7 = $8&255;
 $9 = ($7>>>0)<($10>>>0);
 $11 = (($p) + 4|0);
 if (!($9)) {
  $u$0$lcssa = 0;
  HEAP16[$11>>1] = $u$0$lcssa;
  STACKTOP = sp;return;
 }
 $12 = (($pKeyInfo) + 4|0);
 $13 = (($pKeyInfo) + 12|0);
 $d$02 = $10;$idx$03 = $7;$pMem$05 = $1;$u$04 = 0;
 while(1) {
  $14 = HEAP16[$11>>1]|0;
  $15 = ($u$04&65535)>=($14&65535);
  $16 = ($d$02|0)>($nKey|0);
  $or$cond = $15 | $16;
  if ($or$cond) {
   $u$0$lcssa = $u$04;
   label = 11;
   break;
  }
  $17 = (($pKey) + ($idx$03)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)>(-1);
  if ($19) {
   $20 = $18&255;
   HEAP32[$serial_type>>2] = $20;
   $23 = 1;
  } else {
   $21 = (_sqlite3GetVarint32($17,$serial_type)|0);
   $23 = $21;
  }
  $22 = $23&255;
  $24 = (($22) + ($idx$03))|0;
  $25 = HEAP8[$12>>0]|0;
  $26 = (($pMem$05) + 30|0);
  HEAP8[$26>>0] = $25;
  $27 = HEAP32[$13>>2]|0;
  HEAP32[$pMem$05>>2] = $27;
  $28 = (($pMem$05) + 36|0);
  HEAP32[$28>>2] = 0;
  $29 = (($pKey) + ($d$02)|0);
  $30 = HEAP32[$serial_type>>2]|0;
  $31 = (_sqlite3VdbeSerialGet($29,$30,$pMem$05)|0);
  $32 = (($31) + ($d$02))|0;
  $33 = (($pMem$05) + 40|0);
  $34 = (($u$04) + 1)<<16>>16;
  $35 = HEAP32[$szHdr>>2]|0;
  $36 = ($24>>>0)<($35>>>0);
  if ($36) {
   $d$02 = $32;$idx$03 = $24;$pMem$05 = $33;$u$04 = $34;
  } else {
   $u$0$lcssa = $34;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  HEAP16[$11>>1] = $u$0$lcssa;
  STACKTOP = sp;return;
 }
}
function _sqlite3BtreeMovetoUnpacked($pCur,$pIdxKey,$0,$1,$biasRight,$pRes) {
 $pCur = $pCur|0;
 $pIdxKey = $pIdxKey|0;
 $0 = $0|0;
 $1 = $1|0;
 $biasRight = $biasRight|0;
 $pRes = $pRes|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum2 = 0, $$sum45 = 0, $$sum6 = 0, $$sum89 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $chldPg$0 = 0, $idx$0 = 0, $idx$1 = 0, $idx$2 = 0, $lwr$0 = 0, $lwr$1 = 0, $lwr$2 = 0;
 var $lwr$3 = 0, $lwr$4 = 0, $lwr$5 = 0, $nCellKey = 0, $or$cond = 0, $pCell$0 = 0, $pCell$1 = 0, $rc$0 = 0, $upr$0 = 0, $upr$1 = 0, $upr$2 = 0, $upr$3 = 0, $xRecordCompare$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nCellKey = sp;
 $2 = (($pCur) + 83|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(1);
 if ($4) {
  $5 = (($pCur) + 82|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $8 = (($pCur) + 128|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 2|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if (!($12)) {
    $13 = (($pCur) + 32|0);
    $14 = $13;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = ($16|0)==($0|0);
    $21 = ($19|0)==($1|0);
    $22 = $20 & $21;
    if ($22) {
     HEAP32[$pRes>>2] = 0;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $23 = (($pCur) + 81|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)!=(0);
    $26 = ($19|0)<($1|0);
    $27 = ($19|0)==($1|0);
    $28 = ($16>>>0)<($0>>>0);
    $29 = $27 & $28;
    $30 = $26 | $29;
    $or$cond = $25 & $30;
    if ($or$cond) {
     HEAP32[$pRes>>2] = -1;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $31 = ($pIdxKey|0)==(0|0);
 if ($31) {
  $xRecordCompare$0 = 0;
 } else {
  $32 = (_sqlite3VdbeFindCompare($pIdxKey)|0);
  $xRecordCompare$0 = $32;
 }
 $33 = (_moveToRoot($pCur)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = HEAP8[$2>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  HEAP32[$pRes>>2] = -1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($pCur) + 86|0);
 $38 = (1 - ($biasRight))|0;
 $39 = ($xRecordCompare$0|0)==(0|0);
 $40 = (($pCur) + 32|0);
 $41 = (($pCur) + 82|0);
 $42 = (($pCur) + 32|0);
 L22: while(1) {
  $43 = HEAP16[$37>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = ((($pCur) + ($44<<2)|0) + 128|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 16|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = (($49) + -1)|0;
  $51 = $50 >> $38;
  $52 = $51&65535;
  $53 = ((($pCur) + ($44<<1)|0) + 88|0);
  HEAP16[$53>>1] = $52;
  $54 = (($46) + 56|0);
  $55 = (($46) + 18|0);
  $56 = (($46) + 64|0);
  $57 = (($46) + 6|0);
  L24: do {
   if ($39) {
    $58 = (($46) + 4|0);
    $59 = (($46) + 60|0);
    $idx$0 = $51;$lwr$0 = 0;$upr$0 = $50;
    while(1) {
     $62 = HEAP32[$54>>2]|0;
     $63 = HEAP16[$55>>1]|0;
     $64 = $63&65535;
     $65 = $idx$0 << 1;
     $66 = HEAP32[$56>>2]|0;
     $67 = (($66) + ($65)|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $69 << 8;
     $$sum89 = $65 | 1;
     $71 = (($66) + ($$sum89)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $70 | $73;
     $75 = $74 & $64;
     $76 = HEAP8[$57>>0]|0;
     $77 = $76&255;
     $$sum10 = (($75) + ($77))|0;
     $78 = (($62) + ($$sum10)|0);
     $79 = HEAP8[$58>>0]|0;
     $80 = ($79<<24>>24)==(0);
     L28: do {
      if ($80) {
       $pCell$1 = $78;
      } else {
       $pCell$0 = $78;
       while(1) {
        $81 = (($pCell$0) + 1|0);
        $82 = HEAP8[$pCell$0>>0]|0;
        $83 = ($82<<24>>24)<(0);
        if (!($83)) {
         $pCell$1 = $81;
         break L28;
        }
        $84 = HEAP32[$59>>2]|0;
        $85 = ($81>>>0)<($84>>>0);
        if ($85) {
         $pCell$0 = $81;
        } else {
         label = 20;
         break L22;
        }
       }
      }
     } while(0);
     (_sqlite3GetVarint($pCell$1,$nCellKey)|0);
     $86 = $nCellKey;
     $87 = $86;
     $88 = HEAP32[$87>>2]|0;
     $89 = (($86) + 4)|0;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)<($1|0);
     $93 = ($91|0)==($1|0);
     $94 = ($88>>>0)<($0>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $97 = (($idx$0) + 1)|0;
      $98 = ($idx$0|0)<($upr$0|0);
      if ($98) {
       $lwr$1 = $97;$upr$1 = $upr$0;
      } else {
       $c$1 = -1;$idx$2 = $idx$0;$lwr$4 = $97;
       label = 44;
       break L24;
      }
     } else {
      $99 = ($91|0)>($1|0);
      $100 = ($91|0)==($1|0);
      $101 = ($88>>>0)>($0>>>0);
      $102 = $100 & $101;
      $103 = $99 | $102;
      if (!($103)) {
       break;
      }
      $104 = (($idx$0) + -1)|0;
      $105 = ($lwr$0|0)>($104|0);
      if ($105) {
       $c$1 = 1;$idx$2 = $idx$0;$lwr$4 = $lwr$0;
       label = 44;
       break L24;
      } else {
       $lwr$1 = $lwr$0;$upr$1 = $104;
      }
     }
     $117 = (($upr$1) + ($lwr$1))|0;
     $118 = $117 >> 1;
     $idx$0 = $118;$lwr$0 = $lwr$1;$upr$0 = $upr$1;
    }
    HEAP8[$41>>0] = 1;
    $106 = $42;
    $107 = $106;
    HEAP32[$107>>2] = $88;
    $108 = (($106) + 4)|0;
    $109 = $108;
    HEAP32[$109>>2] = $91;
    $110 = $idx$0&65535;
    $111 = HEAP16[$37>>1]|0;
    $112 = $111 << 16 >> 16;
    $113 = ((($pCur) + ($112<<1)|0) + 88|0);
    HEAP16[$113>>1] = $110;
    $114 = (($46) + 3|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if ($116) {
     $lwr$5 = $idx$0;
    } else {
     label = 26;
     break L22;
    }
   } else {
    $60 = (($46) + 7|0);
    $61 = (($46) + 8|0);
    $idx$1 = $51;$lwr$2 = 0;$upr$2 = $50;
    while(1) {
     $119 = HEAP32[$54>>2]|0;
     $120 = HEAP16[$55>>1]|0;
     $121 = $120&65535;
     $122 = $idx$1 << 1;
     $123 = HEAP32[$56>>2]|0;
     $124 = (($123) + ($122)|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = $125&255;
     $127 = $126 << 8;
     $$sum1 = $122 | 1;
     $128 = (($123) + ($$sum1)|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $127 | $130;
     $132 = $131 & $121;
     $133 = HEAP8[$57>>0]|0;
     $134 = $133&255;
     $$sum = (($132) + ($134))|0;
     $135 = (($119) + ($$sum)|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = HEAP8[$60>>0]|0;
     $139 = ($136&255)>($138&255);
     $$sum2 = (($$sum) + 1)|0;
     $140 = (($119) + ($$sum2)|0);
     do {
      if ($139) {
       $142 = HEAP8[$140>>0]|0;
       $143 = $142&255;
       $144 = $143 & 128;
       $145 = ($144|0)==(0);
       if ($145) {
        $146 = $137 << 7;
        $147 = $146 & 16256;
        $148 = (($143) + ($147))|0;
        $149 = HEAP16[$61>>1]|0;
        $150 = $149&65535;
        $151 = ($148|0)>($150|0);
        if (!($151)) {
         $$sum6 = (($$sum) + 2)|0;
         $152 = (($119) + ($$sum6)|0);
         $153 = (FUNCTION_TABLE_iiiii[$xRecordCompare$0 & 255]($148,$152,$pIdxKey,0)|0);
         $c$0 = $153;
         break;
        }
       }
       $154 = (($119) + ($132)|0);
       _btreeParseCellPtr($46,$154,$40);
       $155 = $40;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $161 = (_sqlite3Malloc($157)|0);
       $162 = ($161|0)==(0|0);
       if ($162) {
        $rc$0 = 7;
        break L22;
       }
       $163 = $idx$1&65535;
       $164 = HEAP16[$37>>1]|0;
       $165 = $164 << 16 >> 16;
       $166 = ((($pCur) + ($165<<1)|0) + 88|0);
       HEAP16[$166>>1] = $163;
       $167 = (_accessPayload($pCur,0,$157,$161,0)|0);
       $168 = ($167|0)==(0);
       if (!($168)) {
        label = 35;
        break L22;
       }
       $169 = (FUNCTION_TABLE_iiiii[$xRecordCompare$0 & 255]($157,$161,$pIdxKey,0)|0);
       _sqlite3_free($161);
       $c$0 = $169;
      } else {
       $141 = (FUNCTION_TABLE_iiiii[$xRecordCompare$0 & 255]($137,$140,$pIdxKey,0)|0);
       $c$0 = $141;
      }
     } while(0);
     $170 = ($c$0|0)<(0);
     if ($170) {
      $171 = (($idx$1) + 1)|0;
      $lwr$3 = $171;$upr$3 = $upr$2;
     } else {
      $172 = ($c$0|0)>(0);
      if (!($172)) {
       label = 41;
       break L22;
      }
      $173 = (($idx$1) + -1)|0;
      $lwr$3 = $lwr$2;$upr$3 = $173;
     }
     $178 = ($lwr$3|0)>($upr$3|0);
     if ($178) {
      $c$1 = $c$0;$idx$2 = $idx$1;$lwr$4 = $lwr$3;
      label = 44;
      break L24;
     }
     $179 = (($upr$3) + ($lwr$3))|0;
     $180 = $179 >> 1;
     $idx$1 = $180;$lwr$2 = $lwr$3;$upr$2 = $upr$3;
    }
   }
  } while(0);
  if ((label|0) == 44) {
   label = 0;
   $181 = (($46) + 3|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = ($182<<24>>24)==(0);
   if ($183) {
    $lwr$5 = $lwr$4;
   } else {
    label = 45;
    break;
   }
  }
  $188 = HEAP16[$47>>1]|0;
  $189 = $188&65535;
  $190 = ($lwr$5|0)<($189|0);
  if ($190) {
   $199 = (($46) + 56|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($46) + 18|0);
   $202 = HEAP16[$201>>1]|0;
   $203 = $202&65535;
   $204 = $lwr$5 << 1;
   $205 = (($46) + 64|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($206) + ($204)|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = $209 << 8;
   $$sum45 = $204 | 1;
   $211 = (($206) + ($$sum45)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = $210 | $213;
   $215 = $214 & $203;
   $216 = (($200) + ($215)|0);
   $217 = (_sqlite3Get4byte($216)|0);
   $chldPg$0 = $217;
  } else {
   $191 = (($46) + 5|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = (($193) + 8)|0;
   $195 = (($46) + 56|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196) + ($194)|0);
   $198 = (_sqlite3Get4byte($197)|0);
   $chldPg$0 = $198;
  }
  $218 = $lwr$5&65535;
  $219 = HEAP16[$37>>1]|0;
  $220 = $219 << 16 >> 16;
  $221 = ((($pCur) + ($220<<1)|0) + 88|0);
  HEAP16[$221>>1] = $218;
  $222 = (_moveToChild($pCur,$chldPg$0)|0);
  $223 = ($222|0)==(0);
  if (!($223)) {
   $rc$0 = $222;
   break;
  }
 }
 if ((label|0) == 20) {
  _sqlite3CorruptError(55438);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  HEAP32[$pRes>>2] = 0;
  $rc$0 = 0;
 }
 else if ((label|0) == 35) {
  _sqlite3_free($161);
  $rc$0 = $167;
 }
 else if ((label|0) == 41) {
  HEAP32[$pRes>>2] = 0;
  $174 = $idx$1&65535;
  $175 = HEAP16[$37>>1]|0;
  $176 = $175 << 16 >> 16;
  $177 = ((($pCur) + ($176<<1)|0) + 88|0);
  HEAP16[$177>>1] = $174;
  $rc$0 = 0;
 }
 else if ((label|0) == 45) {
  $184 = $idx$2&65535;
  $185 = HEAP16[$37>>1]|0;
  $186 = $185 << 16 >> 16;
  $187 = ((($pCur) + ($186<<1)|0) + 88|0);
  HEAP16[$187>>1] = $184;
  HEAP32[$pRes>>2] = $c$1;
  $rc$0 = 0;
 }
 $224 = (($pCur) + 58|0);
 HEAP16[$224>>1] = 0;
 HEAP8[$41>>0] = 0;
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeFindCompare($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = (($0) + 8|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + ($3))|0;
 $8 = ($7|0)<(14);
 if ($8) {
  $9 = (($p) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 28|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (($0) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(0);
  $18 = (($p) + 12|0);
  if ($17) {
   HEAP32[$18>>2] = -1;
   $20 = (($p) + 16|0);
   HEAP32[$20>>2] = 1;
  } else {
   HEAP32[$18>>2] = 1;
   $19 = (($p) + 16|0);
   HEAP32[$19>>2] = -1;
  }
  $21 = $13 & 4;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = 173;
   STACKTOP = sp;return ($$0|0);
  }
  $23 = $13 & 25;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = (($0) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $$0 = 174;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 175;
 STACKTOP = sp;return ($$0|0);
}
function _moveToRoot($pCur) {
 $pCur = $pCur|0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)>(2);
 do {
  if ($2) {
   $3 = ($1<<24>>24)==(4);
   if (!($3)) {
    _sqlite3BtreeClearCursor($pCur);
    break;
   }
   $4 = (($pCur) + 76|0);
   $5 = HEAP32[$4>>2]|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $6 = (($pCur) + 86|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)>(-1);
 do {
  if ($8) {
   $9 = ($7<<16>>16)==(0);
   if (!($9)) {
    $11 = $7;
    while(1) {
     $10 = (($11) + -1)<<16>>16;
     HEAP16[$6>>1] = $10;
     $12 = $11 << 16 >> 16;
     $13 = ((($pCur) + ($12<<2)|0) + 128|0);
     $14 = HEAP32[$13>>2]|0;
     _releasePage($14);
     $$pr = HEAP16[$6>>1]|0;
     $15 = ($$pr<<16>>16)==(0);
     if ($15) {
      break;
     } else {
      $11 = $$pr;
     }
    }
   }
   $$pre = (($pCur) + 128|0);
   $$pre$phiZ2D = $$pre;
  } else {
   $16 = (($pCur) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$0>>0] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $19 = HEAP32[$pCur>>2]|0;
   $20 = (($19) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($pCur) + 128|0);
   $23 = (($pCur) + 80|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(0);
   $26 = $25 ? 2 : 0;
   $27 = (_getAndInitPage($21,$17,$22,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP16[$6>>1] = 0;
    $$pre$phiZ2D = $22;
    break;
   }
   HEAP8[$0>>0] = 0;
   $$0 = $27;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $29 = HEAP32[$$pre$phiZ2D>>2]|0;
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = (($pCur) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  $35 = $34&1;
  $36 = (($29) + 2|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($35|0)==($38|0);
  if ($39) {
   $40 = (($pCur) + 88|0);
   HEAP16[$40>>1] = 0;
   $41 = (($pCur) + 58|0);
   HEAP16[$41>>1] = 0;
   $42 = (($pCur) + 81|0);
   HEAP8[$42>>0] = 0;
   $43 = (($pCur) + 82|0);
   HEAP8[$43>>0] = 0;
   $44 = (($29) + 16|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = ($45<<16>>16)==(0);
   if (!($46)) {
    HEAP8[$0>>0] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $47 = (($29) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)==(0);
   if (!($49)) {
    HEAP8[$0>>0] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $50 = (($29) + 72|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(1);
   if ($52) {
    $53 = (($29) + 5|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = (($55) + 8)|0;
    $57 = (($29) + 56|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + ($56)|0);
    $60 = (_sqlite3Get4byte($59)|0);
    HEAP8[$0>>0] = 1;
    $61 = (_moveToChild($pCur,$60)|0);
    $$0 = $61;
    STACKTOP = sp;return ($$0|0);
   } else {
    _sqlite3CorruptError(55207);
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _sqlite3CorruptError(55195);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3GetVarint($p,$v) {
 $p = $p|0;
 $v = $v|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 & 128;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0&255;
  $5 = $v;
  $6 = $5;
  HEAP32[$6>>2] = $4;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($p) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 128;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $1 << 7;
  $15 = $14 & 16256;
  $16 = $11 | $15;
  $17 = $v;
  $18 = $17;
  HEAP32[$18>>2] = $16;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = 0;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($p) + 2|0);
 $22 = $1 << 14;
 $23 = HEAP8[$21>>0]|0;
 $24 = $23&255;
 $25 = $24 | $22;
 $26 = $24 & 128;
 $27 = ($26|0)==(0);
 $28 = $25 & 2080895;
 if ($27) {
  $29 = $11 << 7;
  $30 = $29 & 16256;
  $31 = $28 | $30;
  $32 = $v;
  $33 = $32;
  HEAP32[$33>>2] = $31;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = (($p) + 3|0);
 $37 = $11 << 14;
 $38 = HEAP8[$36>>0]|0;
 $39 = $38&255;
 $40 = $39 | $37;
 $41 = $39 & 128;
 $42 = ($41|0)==(0);
 $43 = $40 & 2080895;
 if ($42) {
  $44 = $28 << 7;
  $45 = $43 | $44;
  $46 = $v;
  $47 = $46;
  HEAP32[$47>>2] = $45;
  $48 = (($46) + 4)|0;
  $49 = $48;
  HEAP32[$49>>2] = 0;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (($p) + 4|0);
 $51 = $28 << 14;
 $52 = HEAP8[$50>>0]|0;
 $53 = $52&255;
 $54 = $53 | $51;
 $55 = $53 & 128;
 $56 = ($55|0)==(0);
 if ($56) {
  $57 = $43 << 7;
  $58 = $54 | $57;
  $59 = $28 >>> 18;
  $60 = $v;
  $61 = $60;
  HEAP32[$61>>2] = $58;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $59;
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = $28 << 7;
 $65 = $43 | $64;
 $66 = (($p) + 5|0);
 $67 = $43 << 14;
 $68 = HEAP8[$66>>0]|0;
 $69 = $68&255;
 $70 = $69 | $67;
 $71 = $69 & 128;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = $54 << 7;
  $74 = $73 & 266354560;
  $75 = $70 | $74;
  $76 = $65 >>> 18;
  $77 = $v;
  $78 = $77;
  HEAP32[$78>>2] = $75;
  $79 = (($77) + 4)|0;
  $80 = $79;
  HEAP32[$80>>2] = $76;
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $81 = (($p) + 6|0);
 $82 = $54 << 14;
 $83 = HEAP8[$81>>0]|0;
 $84 = $83&255;
 $85 = $84 | $82;
 $86 = $84 & 128;
 $87 = ($86|0)==(0);
 if ($87) {
  $88 = $85 & -266354561;
  $89 = $70 << 7;
  $90 = $89 & 266354560;
  $91 = $88 | $90;
  $92 = $65 >>> 11;
  $93 = $v;
  $94 = $93;
  HEAP32[$94>>2] = $91;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = $85 & 2080895;
 $98 = (($p) + 7|0);
 $99 = $70 << 14;
 $100 = HEAP8[$98>>0]|0;
 $101 = $100&255;
 $102 = $101 | $99;
 $103 = $101 & 128;
 $104 = ($103|0)==(0);
 if ($104) {
  $105 = $102 & -266354561;
  $106 = $97 << 7;
  $107 = $105 | $106;
  $108 = $65 >>> 4;
  $109 = $v;
  $110 = $109;
  HEAP32[$110>>2] = $107;
  $111 = (($109) + 4)|0;
  $112 = $111;
  HEAP32[$112>>2] = $108;
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 } else {
  $113 = (($p) + 8|0);
  $114 = $97 << 15;
  $115 = HEAP8[$113>>0]|0;
  $116 = $115&255;
  $117 = $102 << 8;
  $118 = $117 & 532709120;
  $119 = $118 | $114;
  $120 = $119 | $116;
  $121 = $65 << 4;
  $122 = $53 >>> 3;
  $123 = $122 & 15;
  $124 = $123 | $121;
  $125 = $v;
  $126 = $125;
  HEAP32[$126>>2] = $120;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = $124;
  $$0 = 9;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _btreeParseCellPtr($pPage,$pCell,$pInfo) {
 $pPage = $pPage|0;
 $pCell = $pCell|0;
 $pInfo = $pInfo|0;
 var $$ = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $n$0$in = 0, $n$1 = 0, $n$1$in = 0, $nPayload = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nPayload = sp;
 $0 = (($pInfo) + 8|0);
 HEAP32[$0>>2] = $pCell;
 $1 = (($pPage) + 6|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($pPage) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $20 = (($pInfo) + 12|0);
  HEAP32[$20>>2] = 0;
  $21 = $2&255;
  $22 = (($pCell) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = ($23<<24>>24)>(-1);
  if ($24) {
   $25 = $23&255;
   HEAP32[$nPayload>>2] = $25;
   $28 = 1;$32 = $25;
  } else {
   $26 = (_sqlite3GetVarint32($22,$nPayload)|0);
   $$pre = HEAP32[$nPayload>>2]|0;
   $28 = $26;$32 = $$pre;
  }
  $27 = $28&255;
  $29 = (($27) + ($21))|0;
  $30 = $pInfo;
  $31 = $30;
  HEAP32[$31>>2] = $32;
  $33 = (($30) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = 0;
  $36 = $32;$n$1$in = $29;
 } else {
  $6 = (($pPage) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  do {
   if ($8) {
    HEAP32[$nPayload>>2] = 0;
    $19 = 0;$n$0$in = $2;
   } else {
    $9 = HEAP8[$pCell>>0]|0;
    $10 = ($9<<24>>24)>(-1);
    if ($10) {
     $11 = $9&255;
     HEAP32[$nPayload>>2] = $11;
     $19 = $11;$n$0$in = 1;
     break;
    } else {
     $12 = (_sqlite3GetVarint32($pCell,$nPayload)|0);
     $$pre1 = HEAP32[$nPayload>>2]|0;
     $19 = $$pre1;$n$0$in = $12;
     break;
    }
   }
  } while(0);
  $13 = $n$0$in&255;
  $14 = (($pCell) + ($13)|0);
  $15 = (_sqlite3GetVarint($14,$pInfo)|0);
  $16 = $15&255;
  $17 = (($16) + ($13))|0;
  $18 = (($pInfo) + 12|0);
  HEAP32[$18>>2] = $19;
  $36 = $19;$n$1$in = $17;
 }
 $n$1 = $n$1$in&65535;
 $35 = (($pInfo) + 16|0);
 HEAP32[$35>>2] = $36;
 $37 = (($pInfo) + 20|0);
 HEAP16[$37>>1] = $n$1;
 $38 = (($pPage) + 8|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = ($36>>>0)>($40>>>0);
 if (!($41)) {
  $42 = (($36) + ($n$1$in))|0;
  $43 = $42&65535;
  $44 = (($pInfo) + 26|0);
  $45 = $42 & 65532;
  $46 = ($45>>>0)<(4);
  $$ = $46 ? 4 : $43;
  HEAP16[$44>>1] = $$;
  $47 = $36&65535;
  $48 = (($pInfo) + 22|0);
  HEAP16[$48>>1] = $47;
  $49 = (($pInfo) + 24|0);
  HEAP16[$49>>1] = 0;
  STACKTOP = sp;return;
 }
 $50 = (($pPage) + 10|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = (($36) - ($52))|0;
 $54 = (($pPage) + 52|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + -4)|0;
 $59 = (($53>>>0) % ($58>>>0))&-1;
 $60 = (($59) + ($52))|0;
 $61 = ($60|0)>($40|0);
 if ($61) {
  $64 = (($pInfo) + 22|0);
  HEAP16[$64>>1] = $51;
  $66 = $51;
 } else {
  $62 = $60&65535;
  $63 = (($pInfo) + 22|0);
  HEAP16[$63>>1] = $62;
  $66 = $62;
 }
 $65 = $66&65535;
 $67 = (($65) + ($n$1$in))|0;
 $68 = $67&65535;
 $69 = (($pInfo) + 24|0);
 HEAP16[$69>>1] = $68;
 $70 = (($67) + 4)|0;
 $71 = $70&65535;
 $72 = (($pInfo) + 26|0);
 HEAP16[$72>>1] = $71;
 STACKTOP = sp;return;
}
function _accessPayload($pCur,$offset,$amt,$pBuf,$eOp) {
 $pCur = $pCur|0;
 $offset = $offset|0;
 $amt = $amt|0;
 $pBuf = $pBuf|0;
 $eOp = $eOp|0;
 var $$$14 = 0, $$0 = 0, $$02 = 0, $$03 = 0, $$07 = 0, $$1$ph = 0, $$120 = 0, $$1419 = 0, $$1818 = 0, $$2 = 0, $$25 = 0, $$29 = 0, $$3 = 0, $$36 = 0, $$amt = 0, $$idx = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre25 = 0;
 var $$rc$0 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $iIdx$0$ph = 0, $iIdx$017 = 0, $nextPage = 0, $or$cond = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $pDbPage = 0, $rc$0 = 0, $rc$1 = 0, $rc$126 = 0;
 var $rc$127 = 0, $rc$3 = 0, $rc$4 = 0, $rc$5 = 0, $rc$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nextPage = sp + 4|0;
 $pDbPage = sp;
 $0 = (($pCur) + 86|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($pCur) + ($2<<2)|0) + 128|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pCur) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($pCur) + 32|0);
 $8 = (($pCur) + 58|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = ((($pCur) + ($2<<1)|0) + 88|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  _btreeParseCell($4,$13,$7);
  $14 = (($pCur) + 82|0);
  HEAP8[$14>>0] = 1;
 }
 $15 = (($pCur) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($pCur) + 52|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (($4) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $23 = $7;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $33 = $25;
 } else {
  $33 = 0;
 }
 $29 = (($amt) + ($offset))|0;
 $30 = (($pCur) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($33))|0;
 $34 = ($29>>>0)>($32>>>0);
 if (!($34)) {
  $35 = (($pCur) + 54|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $$sum = (($37) + ($19))|0;
  $38 = (($16) + ($$sum)|0);
  $39 = (($6) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($4) + 56|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($40)|0);
  $44 = ($38>>>0)>($43>>>0);
  if (!($44)) {
   $45 = ($37>>>0)>($offset>>>0);
   if ($45) {
    $46 = ($29>>>0)>($37>>>0);
    $47 = (($37) - ($offset))|0;
    $$amt = $46 ? $47 : $amt;
    $$sum11 = (($19) + ($offset))|0;
    $48 = (($16) + ($$sum11)|0);
    $49 = (($4) + 68|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_copyPayload($48,$pBuf,$$amt,$eOp,$50)|0);
    $52 = (($pBuf) + ($$amt)|0);
    $53 = (($amt) - ($$amt))|0;
    $$02 = 0;$$03 = $53;$$07 = $52;$rc$0 = $51;
   } else {
    $54 = (($offset) - ($37))|0;
    $$02 = $54;$$03 = $amt;$$07 = $pBuf;$rc$0 = 0;
   }
   $55 = ($rc$0|0)!=(0);
   $56 = ($$03|0)==(0);
   $or$cond = $55 | $56;
   L14: do {
    if ($or$cond) {
     $$36 = $$03;$rc$6 = $rc$0;
    } else {
     $57 = HEAP32[$39>>2]|0;
     $58 = (($57) + -4)|0;
     $59 = HEAP16[$35>>1]|0;
     $60 = $59&65535;
     $$sum10 = (($60) + ($19))|0;
     $61 = (($16) + ($$sum10)|0);
     $62 = (_sqlite3Get4byte($61)|0);
     HEAP32[$nextPage>>2] = $62;
     $63 = (($pCur) + 84|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(0);
     $$phi$trans$insert = (($pCur) + 20|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     do {
      if ($65) {
       $80 = $$pre;$rc$1 = 0;
       label = 16;
      } else {
       $66 = ($$pre|0)==(0|0);
       if ($66) {
        $68 = (($pCur) + 48|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($57) + -5)|0;
        $71 = (($70) + ($69))|0;
        $72 = (($71) - ($60))|0;
        $73 = (($72>>>0) / ($58>>>0))&-1;
        $74 = $73 << 2;
        $75 = (_sqlite3MallocZero($74)|0);
        HEAP32[$$phi$trans$insert>>2] = $75;
        $76 = ($73|0)!=(0);
        $77 = ($75|0)==(0|0);
        $or$cond12 = $76 & $77;
        $$rc$0 = $or$cond12 ? 7 : 0;
        $80 = $75;$rc$1 = $$rc$0;
        label = 16;
        break;
       } else {
        $67 = (($pCur) + 20|0);
        $123 = $67;$83 = $$pre;$rc$126 = 0;
        label = 17;
        break;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      $78 = (($pCur) + 20|0);
      $79 = ($80|0)==(0|0);
      if ($79) {
       $$1$ph = $$02;$124 = $62;$93 = $78;$iIdx$0$ph = 0;$rc$127 = $rc$1;
      } else {
       $123 = $78;$83 = $80;$rc$126 = $rc$1;
       label = 17;
      }
     }
     if ((label|0) == 17) {
      $81 = (($$02>>>0) / ($58>>>0))&-1;
      $82 = (($83) + ($81<<2)|0);
      $84 = HEAP32[$82>>2]|0;
      $85 = ($84|0)==(0);
      if ($85) {
       $$1$ph = $$02;$124 = $62;$93 = $123;$iIdx$0$ph = 0;$rc$127 = $rc$126;
      } else {
       HEAP32[$nextPage>>2] = $84;
       $86 = (($$02>>>0) % ($58>>>0))&-1;
       $$1$ph = $86;$124 = $84;$93 = $123;$iIdx$0$ph = $81;$rc$127 = $rc$126;
      }
     }
     $87 = ($rc$127|0)==(0);
     if (!($87)) {
      $$0 = $rc$127;
      STACKTOP = sp;return ($$0|0);
     }
     $88 = ($eOp|0)==(0);
     $89 = $88 ? 2 : 0;
     $$120 = $$1$ph;$$1419 = $$03;$$1818 = $$07;$91 = $124;$iIdx$017 = $iIdx$0$ph;
     while(1) {
      $90 = ($91|0)==(0);
      if ($90) {
       $$36 = $$1419;$rc$6 = 0;
       break L14;
      }
      $92 = HEAP32[$93>>2]|0;
      $94 = ($92|0)==(0|0);
      if (!($94)) {
       $95 = (($92) + ($iIdx$017<<2)|0);
       HEAP32[$95>>2] = $91;
      }
      $96 = ($$120>>>0)<($58>>>0);
      if ($96) {
       $103 = (($$120) + ($$1419))|0;
       $104 = ($103>>>0)>($58>>>0);
       $105 = (($58) - ($$120))|0;
       $$$14 = $104 ? $105 : $$1419;
       $106 = HEAP32[$6>>2]|0;
       $107 = (_sqlite3PagerAcquire($106,$91,$pDbPage,$89)|0);
       $108 = ($107|0)==(0);
       if ($108) {
        $109 = HEAP32[$pDbPage>>2]|0;
        $$idx = (($109) + 4|0);
        $$idx$val = HEAP32[$$idx>>2]|0;
        $110 = (_sqlite3PagerGetData($$idx$val)|0);
        $111 = (_sqlite3Get4byte($110)|0);
        HEAP32[$nextPage>>2] = $111;
        $112 = (($$120) + 4)|0;
        $113 = (($110) + ($112)|0);
        $114 = (_copyPayload($113,$$1818,$$$14,$eOp,$109)|0);
        $115 = HEAP32[$pDbPage>>2]|0;
        _sqlite3PagerUnref($115);
        $$2 = 0;$rc$4 = $114;
       } else {
        $$2 = $$120;$rc$4 = $107;
       }
       $116 = (($$1419) - ($$$14))|0;
       $117 = (($$1818) + ($$$14)|0);
       $$25 = $116;$$29 = $117;$$3 = $$2;$rc$5 = $rc$4;
      } else {
       if ($94) {
        label = 28;
       } else {
        $97 = (($iIdx$017) + 1)|0;
        $98 = (($92) + ($97<<2)|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($99|0)==(0);
        if ($100) {
         label = 28;
        } else {
         HEAP32[$nextPage>>2] = $99;
         $rc$3 = 0;
        }
       }
       if ((label|0) == 28) {
        label = 0;
        $101 = (_getOverflowPage($6,$91,0,$nextPage)|0);
        $rc$3 = $101;
       }
       $102 = (($$120) - ($58))|0;
       $$25 = $$1419;$$29 = $$1818;$$3 = $102;$rc$5 = $rc$3;
      }
      $118 = ($rc$5|0)!=(0);
      $119 = ($$25|0)==(0);
      $or$cond13 = $118 | $119;
      if ($or$cond13) {
       $$36 = $$25;$rc$6 = $rc$5;
       break L14;
      }
      $120 = (($iIdx$017) + 1)|0;
      $$pre25 = HEAP32[$nextPage>>2]|0;
      $$120 = $$3;$$1419 = $$25;$$1818 = $$29;$91 = $$pre25;$iIdx$017 = $120;
     }
    }
   } while(0);
   $121 = ($rc$6|0)!=(0);
   $122 = ($$36|0)==(0);
   $or$cond14 = $121 | $122;
   if ($or$cond14) {
    $$0 = $rc$6;
    STACKTOP = sp;return ($$0|0);
   }
   _sqlite3CorruptError(54925);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sqlite3CorruptError(54789);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _btreeParseCell($pPage,$iCell,$pInfo) {
 $pPage = $pPage|0;
 $iCell = $iCell|0;
 $pInfo = $pInfo|0;
 var $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $iCell << 1;
 $6 = (($pPage) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $$sum1 = $5 | 1;
 $12 = (($7) + ($$sum1)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $11 | $14;
 $16 = $15 & $4;
 $17 = (($1) + ($16)|0);
 _btreeParseCellPtr($pPage,$17,$pInfo);
 STACKTOP = sp;return;
}
function _copyPayload($pPayload,$pBuf,$nByte,$eOp,$pDbPage) {
 $pPayload = $pPayload|0;
 $pBuf = $pBuf|0;
 $nByte = $nByte|0;
 $eOp = $eOp|0;
 $pDbPage = $pDbPage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($eOp|0)==(0);
 if ($0) {
  _memcpy(($pBuf|0),($pPayload|0),($nByte|0))|0;
  $$0 = 0;
 } else {
  $1 = (_sqlite3PagerWrite($pDbPage)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   _memcpy(($pPayload|0),($pBuf|0),($nByte|0))|0;
   $$0 = 0;
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _getOverflowPage($pBt,$ovfl,$ppPage,$pPgnoNext) {
 $pBt = $pBt|0;
 $ovfl = $ovfl|0;
 $ppPage = $ppPage|0;
 $pPgnoNext = $pPgnoNext|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eType = 0, $iGuess$0 = 0, $iGuess$0$ = 0, $iGuess$0$in = 0, $next$04 = 0, $next$1 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $pBt$idx = 0, $pBt$idx$val = 0, $pPage = 0, $pgno = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPage = sp + 4|0;
 $pgno = sp;
 $eType = sp + 8|0;
 HEAP32[$pPage>>2] = 0;
 $0 = (($pBt) + 17|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $next$04 = 0;
  label = 6;
 } else {
  $3 = HEAP32[1648>>2]|0;
  $4 = (($pBt) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3>>>0) / ($5>>>0))&-1;
  $iGuess$0$in = $ovfl;
  while(1) {
   $iGuess$0 = (($iGuess$0$in) + 1)|0;
   $7 = (_ptrmapPageno($pBt,$iGuess$0)|0);
   $8 = ($7|0)==($iGuess$0|0);
   $9 = ($iGuess$0$in|0)==($6|0);
   $or$cond5 = $8 | $9;
   if ($or$cond5) {
    $iGuess$0$in = $iGuess$0;
   } else {
    break;
   }
  }
  $pBt$idx = (($pBt) + 44|0);
  $pBt$idx$val = HEAP32[$pBt$idx>>2]|0;
  $10 = (_btreePagecount($pBt$idx$val)|0);
  $11 = ($iGuess$0>>>0)>($10>>>0);
  if ($11) {
   $next$04 = 0;
   label = 6;
  } else {
   $12 = (_ptrmapGet($pBt,$iGuess$0,$eType,$pgno)|0);
   $13 = ($12|0)==(0);
   $14 = HEAP8[$eType>>0]|0;
   $15 = ($14<<24>>24)==(4);
   $or$cond = $13 & $15;
   $16 = HEAP32[$pgno>>2]|0;
   $17 = ($16|0)==($ovfl|0);
   $or$cond3 = $or$cond & $17;
   $iGuess$0$ = $or$cond3 ? $iGuess$0 : 0;
   $$ = $or$cond3 ? 101 : $12;
   $18 = ($$|0)==(0);
   if ($18) {
    $next$04 = $iGuess$0$;
    label = 6;
   } else {
    $28 = 0;$next$1 = $iGuess$0$;$rc$1 = $$;
   }
  }
 }
 if ((label|0) == 6) {
  $19 = ($ppPage|0)==(0|0);
  $20 = $19 ? 2 : 0;
  $21 = (_btreeGetPage($pBt,$ovfl,$pPage,$20)|0);
  $22 = ($21|0)==(0);
  $23 = HEAP32[$pPage>>2]|0;
  if ($22) {
   $24 = (($23) + 56|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_sqlite3Get4byte($25)|0);
   $28 = $23;$next$1 = $26;$rc$1 = 0;
  } else {
   $28 = $23;$next$1 = $next$04;$rc$1 = $21;
  }
 }
 HEAP32[$pPgnoNext>>2] = $next$1;
 $27 = ($ppPage|0)==(0|0);
 if ($27) {
  _releasePage($28);
  $29 = ($rc$1|0)==(101);
  $30 = $29 ? 0 : $rc$1;
  STACKTOP = sp;return ($30|0);
 } else {
  HEAP32[$ppPage>>2] = $28;
  $29 = ($rc$1|0)==(101);
  $30 = $29 ? 0 : $rc$1;
  STACKTOP = sp;return ($30|0);
 }
 return 0|0;
}
function _ptrmapPageno($pBt,$pgno) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 var $$ = 0, $$$v = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pgno>>>0)<(2);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pBt) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2>>>0) / 5)&-1;
 $4 = (($3) + 1)|0;
 $5 = (($pgno) + -2)|0;
 $6 = (($5>>>0) % ($4>>>0))&-1;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[1648>>2]|0;
 $9 = (($pBt) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8>>>0) / ($10>>>0))&-1;
 $12 = (($7) + 1)|0;
 $13 = ($12|0)==($11|0);
 $$$v = $13 ? 3 : 2;
 $$ = (($$$v) + ($7))|0;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _ptrmapGet($pBt,$key,$pEType,$pPgno) {
 $pBt = $pBt|0;
 $key = $key|0;
 $pEType = $pEType|0;
 $pPgno = $pPgno|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pDbPage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pDbPage = sp;
 $0 = (_ptrmapPageno($pBt,$key)|0);
 $1 = HEAP32[$pBt>>2]|0;
 $2 = (_sqlite3PagerAcquire($1,$0,$pDbPage,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$pDbPage>>2]|0;
 $$idx = (($4) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $5 = (_sqlite3PagerGetData($$idx$val)|0);
 $6 = (($key) - ($0))|0;
 $7 = ($6*5)|0;
 $8 = (($7) + -5)|0;
 $9 = ($8|0)<(0);
 if ($9) {
  _sqlite3PagerUnref($4);
  _sqlite3CorruptError(51690);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($5) + ($8)|0);
 $11 = HEAP8[$10>>0]|0;
 HEAP8[$pEType>>0] = $11;
 $12 = ($pPgno|0)==(0|0);
 if (!($12)) {
  $13 = (($7) + -4)|0;
  $14 = (($5) + ($13)|0);
  $15 = (_sqlite3Get4byte($14)|0);
  HEAP32[$pPgno>>2] = $15;
 }
 _sqlite3PagerUnref($4);
 $16 = HEAP8[$pEType>>0]|0;
 $17 = ($16<<24>>24)==(0);
 $18 = ($16&255)>(5);
 $or$cond = $17 | $18;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3CorruptError(51698);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3GetVarint32($p,$v) {
 $p = $p|0;
 $v = $v|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $v64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v64 = sp;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = (($p) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 128;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1 << 7;
  $8 = $7 & 16256;
  $9 = $8 | $4;
  HEAP32[$v>>2] = $9;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($p) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 128;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $1 << 14;
  $16 = $12 | $15;
  $17 = $16 & 2080895;
  $18 = $4 << 7;
  $19 = $18 & 16256;
  $20 = $17 | $19;
  HEAP32[$v>>2] = $20;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 } else {
  $21 = (_sqlite3GetVarint($p,$v64)|0);
  $22 = $v64;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)==($24|0);
  $29 = (0)==($27|0);
  $30 = $28 & $29;
  $storemerge = $30 ? $24 : -1;
  HEAP32[$v>>2] = $storemerge;
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vdbeRecordCompareInt($nKey1,$pKey1,$pPKey2,$bSkip) {
 $nKey1 = $nKey1|0;
 $pKey1 = $pKey1|0;
 $pPKey2 = $pPKey2|0;
 $bSkip = $bSkip|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$pKey1>>0]|0;
 $1 = $0&255;
 $2 = $1 & 63;
 $3 = (($pKey1) + ($2)|0);
 $4 = (($pKey1) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($pPKey2) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 16|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 switch ($6|0) {
 case 3:  {
  $29 = HEAP8[$3>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = $30 << 16;
  $$sum15 = (($2) + 1)|0;
  $32 = (($pKey1) + ($$sum15)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $35 | $31;
  $$sum16 = (($2) + 2)|0;
  $37 = (($pKey1) + ($$sum16)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  $41 = ($40|0)<(0);
  $42 = $41 << 31 >> 31;
  $126 = $42;$129 = $40;
  break;
 }
 case 4:  {
  $43 = HEAP8[$3>>0]|0;
  $44 = $43&255;
  $45 = $44 << 24;
  $$sum12 = (($2) + 1)|0;
  $46 = (($pKey1) + ($$sum12)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 16;
  $50 = $49 | $45;
  $$sum13 = (($2) + 2)|0;
  $51 = (($pKey1) + ($$sum13)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $53 << 8;
  $55 = $50 | $54;
  $$sum14 = (($2) + 3)|0;
  $56 = (($pKey1) + ($$sum14)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $55 | $58;
  $60 = ($59|0)<(0);
  $61 = $60 << 31 >> 31;
  $126 = $61;$129 = $59;
  break;
 }
 case 5:  {
  $$sum7 = (($2) + 2)|0;
  $62 = (($pKey1) + ($$sum7)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $64 << 24;
  $$sum8 = (($2) + 3)|0;
  $66 = (($pKey1) + ($$sum8)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 << 16;
  $70 = $69 | $65;
  $$sum9 = (($2) + 4)|0;
  $71 = (($pKey1) + ($$sum9)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 << 8;
  $75 = $70 | $74;
  $$sum10 = (($2) + 5)|0;
  $76 = (($pKey1) + ($$sum10)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $75 | $78;
  $80 = HEAP8[$3>>0]|0;
  $81 = $80 << 24 >> 24;
  $82 = $81 << 8;
  $$sum11 = (($2) + 1)|0;
  $83 = (($pKey1) + ($$sum11)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $82 | $85;
  $87 = ($86|0)<(0);
  $87 << 31 >> 31;
  $126 = $86;$129 = $79;
  break;
 }
 case 7: case 0:  {
  $123 = (_sqlite3VdbeRecordCompare($nKey1,$pKey1,$pPKey2,0)|0);
  $$0 = $123;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $20 = HEAP8[$3>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $21 << 8;
  $$sum17 = (($2) + 1)|0;
  $23 = (($pKey1) + ($$sum17)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $22 | $25;
  $27 = ($26|0)<(0);
  $28 = $27 << 31 >> 31;
  $126 = $28;$129 = $26;
  break;
 }
 case 1:  {
  $16 = HEAP8[$3>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $126 = $19;$129 = $17;
  break;
 }
 case 8:  {
  $126 = 0;$129 = 0;
  break;
 }
 case 6:  {
  $88 = HEAP8[$3>>0]|0;
  $89 = $88&255;
  $90 = $89 << 24;
  $$sum = (($2) + 1)|0;
  $91 = (($pKey1) + ($$sum)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 << 16;
  $95 = $94 | $90;
  $$sum1 = (($2) + 2)|0;
  $96 = (($pKey1) + ($$sum1)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = $95 | $99;
  $$sum2 = (($2) + 3)|0;
  $101 = (($pKey1) + ($$sum2)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $100 | $103;
  $$sum3 = (($2) + 4)|0;
  $105 = (($pKey1) + ($$sum3)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $107 << 24;
  $$sum4 = (($2) + 5)|0;
  $109 = (($pKey1) + ($$sum4)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $111 << 16;
  $113 = $112 | $108;
  $$sum5 = (($2) + 6)|0;
  $114 = (($pKey1) + ($$sum5)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 << 8;
  $118 = $113 | $117;
  $$sum6 = (($2) + 7)|0;
  $119 = (($pKey1) + ($$sum6)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $118 | $121;
  $126 = $104;$129 = $122;
  break;
 }
 case 9:  {
  $126 = 0;$129 = 1;
  break;
 }
 default: {
  $124 = (_sqlite3VdbeRecordCompare($nKey1,$pKey1,$pPKey2,0)|0);
  $$0 = $124;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $125 = ($15|0)>($126|0);
 $127 = ($15|0)==($126|0);
 $128 = ($12>>>0)>($129>>>0);
 $130 = $127 & $128;
 $131 = $125 | $130;
 if ($131) {
  $132 = (($pPKey2) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $$0 = $133;
  STACKTOP = sp;return ($$0|0);
 }
 $134 = ($15|0)<($126|0);
 $135 = ($15|0)==($126|0);
 $136 = ($12>>>0)<($129>>>0);
 $137 = $135 & $136;
 $138 = $134 | $137;
 if ($138) {
  $139 = (($pPKey2) + 16|0);
  $140 = HEAP32[$139>>2]|0;
  $$0 = $140;
  STACKTOP = sp;return ($$0|0);
 }
 $141 = (($pPKey2) + 4|0);
 $142 = HEAP16[$141>>1]|0;
 $143 = ($142&65535)>(1);
 if ($143) {
  $144 = (_sqlite3VdbeRecordCompare($nKey1,$pKey1,$pPKey2,1)|0);
  $$0 = $144;
  STACKTOP = sp;return ($$0|0);
 } else {
  $145 = (($pPKey2) + 6|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146 << 24 >> 24;
  $$0 = $147;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vdbeRecordCompareString($nKey1,$pKey1,$pPKey2,$bSkip) {
 $nKey1 = $nKey1|0;
 $pKey1 = $pKey1|0;
 $pPKey2 = $pPKey2|0;
 $bSkip = $bSkip|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $serial_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $serial_type = sp;
 $0 = (($pKey1) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1&255;
  HEAP32[$serial_type>>2] = $3;
  $5 = $3;
 } else {
  (_sqlite3GetVarint32($0,$serial_type)|0);
  $$pr = HEAP32[$serial_type>>2]|0;
  $5 = $$pr;
 }
 $4 = ($5|0)<(12);
 if ($4) {
  $6 = (($pPKey2) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (($pPKey2) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP8[$pKey1>>0]|0;
 $13 = $12&255;
 $14 = (($5) + -12)|0;
 $15 = (($14|0) / 2)&-1;
 $16 = (($13) + ($15))|0;
 $17 = ($16|0)>($nKey1|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($pPKey2) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($15|0);
 $$ = $22 ? $21 : $15;
 $23 = (($pKey1) + ($13)|0);
 $24 = (($19) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_memcmp($23,$25,$$)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $42 = ($26|0)>(0);
  if ($42) {
   $43 = (($pPKey2) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $$0 = $44;
   STACKTOP = sp;return ($$0|0);
  } else {
   $45 = (($pPKey2) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $$0 = $46;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $28 = ($15|0)==($21|0);
 if ($28) {
  $29 = (($pPKey2) + 4|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = ($30&65535)>(1);
  if ($31) {
   $32 = (_sqlite3VdbeRecordCompare($nKey1,$pKey1,$pPKey2,1)|0);
   $$0 = $32;
   STACKTOP = sp;return ($$0|0);
  } else {
   $33 = (($pPKey2) + 6|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $$0 = $35;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $36 = (($15) - ($21))|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = (($pPKey2) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $$0 = $39;
   STACKTOP = sp;return ($$0|0);
  } else {
   $40 = (($pPKey2) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $$0 = $41;
   STACKTOP = sp;return ($$0|0);
  }
 }
 return 0|0;
}
function _sqlite3VdbeRecordCompare($nKey1,$pKey1,$pPKey2,$bSkip) {
 $nKey1 = $nKey1|0;
 $pKey1 = $pKey1|0;
 $pPKey2 = $pPKey2|0;
 $bSkip = $bSkip|0;
 var $$ = 0, $$0 = 0, $$3 = 0, $$pr = 0, $$pre = 0, $$pre8 = 0, $$pre9 = 0, $$rc$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d1$0 = 0, $d1$0$ph = 0, $i$0 = 0, $i$0$ph = 0, $idx1$0 = 0, $idx1$0$ph = 0, $lhs3$0 = 0.0, $mem1 = 0, $or$cond = 0, $or$cond4 = 0, $pRhs$0 = 0, $pRhs$0$ph = 0, $rc$1 = 0, $rc$1$ = 0, $rc$15 = 0, $s1 = 0;
 var $serial_type = 0, $szHdr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $szHdr1 = sp + 48|0;
 $mem1 = sp;
 $s1 = sp + 44|0;
 $serial_type = sp + 40|0;
 $0 = (($pPKey2) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pPKey2>>2]|0;
 $3 = ($bSkip|0)==(0);
 do {
  if ($3) {
   $18 = HEAP8[$pKey1>>0]|0;
   $19 = ($18<<24>>24)>(-1);
   if ($19) {
    $20 = $18&255;
    HEAP32[$szHdr1>>2] = $20;
    $23 = $20;$25 = 1;
   } else {
    $21 = (_sqlite3GetVarint32($pKey1,$szHdr1)|0);
    $$pre = HEAP32[$szHdr1>>2]|0;
    $23 = $$pre;$25 = $21;
   }
   $22 = ($23>>>0)>($nKey1>>>0);
   if ($22) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $24 = $25&255;
    $d1$0$ph = $23;$i$0$ph = 0;$idx1$0$ph = $24;$pRhs$0$ph = $1;
    break;
   }
  } else {
   $4 = (($pKey1) + 1|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)>(-1);
   if ($6) {
    $7 = $5&255;
    HEAP32[$s1>>2] = $7;
    $10 = 1;$14 = $7;
   } else {
    $8 = (_sqlite3GetVarint32($4,$s1)|0);
    $$pre8 = HEAP32[$s1>>2]|0;
    $10 = $8;$14 = $$pre8;
   }
   $9 = $10&255;
   $11 = (($9) + 1)|0;
   $12 = HEAP8[$pKey1>>0]|0;
   $13 = $12&255;
   HEAP32[$szHdr1>>2] = $13;
   $15 = (_sqlite3VdbeSerialTypeLen($14)|0);
   $16 = (($15) + ($13))|0;
   $17 = (($1) + 40|0);
   $d1$0$ph = $16;$i$0$ph = 1;$idx1$0$ph = $11;$pRhs$0$ph = $17;
  }
 } while(0);
 $26 = (($mem1) + 24|0);
 $27 = (($2) + 4|0);
 $28 = (($mem1) + 30|0);
 $29 = (($2) + 12|0);
 $30 = (($mem1) + 28|0);
 $31 = (($mem1) + 4|0);
 $32 = (($mem1) + 8|0);
 $33 = (($mem1) + 16|0);
 $34 = (($pPKey2) + 4|0);
 $d1$0 = $d1$0$ph;$i$0 = $i$0$ph;$idx1$0 = $idx1$0$ph;$pRhs$0 = $pRhs$0$ph;
 L16: while(1) {
  $35 = (($pRhs$0) + 28|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 & 4;
  $39 = ($38|0)==(0);
  do {
   if ($39) {
    $76 = $37 & 8;
    $77 = ($76|0)==(0);
    if (!($77)) {
     $78 = (($pKey1) + ($idx1$0)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     HEAP32[$serial_type>>2] = $80;
     $81 = ($79&255)>(11);
     if ($81) {
      $rc$15 = 1;
      label = 48;
      break L16;
     }
     $82 = ($79<<24>>24)==(0);
     if ($82) {
      $rc$15 = -1;
      label = 48;
      break L16;
     }
     $83 = (($pRhs$0) + 8|0);
     $84 = +HEAPF64[$83>>3];
     $85 = (($pKey1) + ($d1$0)|0);
     (_sqlite3VdbeSerialGet($85,$80,$mem1)|0);
     $86 = ($79<<24>>24)==(7);
     if ($86) {
      $87 = +HEAPF64[$32>>3];
      $lhs3$0 = $87;
     } else {
      $88 = $33;
      $89 = $88;
      $90 = HEAP32[$89>>2]|0;
      $91 = (($88) + 4)|0;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (+($90>>>0)) + (4294967296.0*(+($93|0)));
      $lhs3$0 = $94;
     }
     $95 = $lhs3$0 < $84;
     if ($95) {
      $rc$15 = -1;
      label = 48;
      break L16;
     }
     $96 = $lhs3$0 > $84;
     if ($96) {
      $rc$15 = 1;
      label = 48;
      break L16;
     } else {
      break;
     }
    }
    $97 = $37 & 2;
    $98 = ($97|0)==(0);
    if ($98) {
     $128 = $37 & 16;
     $129 = ($128|0)==(0);
     $130 = (($pKey1) + ($idx1$0)|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = $131&255;
     if ($129) {
      HEAP32[$serial_type>>2] = $132;
      $151 = ($131<<24>>24)!=(0);
      $152 = $151&1;
      $rc$1 = $152;
      label = 47;
      break;
     }
     $133 = ($131<<24>>24)>(-1);
     if ($133) {
      HEAP32[$serial_type>>2] = $132;
      $135 = $132;
     } else {
      (_sqlite3GetVarint32($130,$serial_type)|0);
      $$pre9 = HEAP32[$serial_type>>2]|0;
      $135 = $$pre9;
     }
     $134 = ($135>>>0)>(11);
     $136 = $135 & 1;
     $137 = ($136|0)==(0);
     $or$cond = $134 & $137;
     if (!($or$cond)) {
      $rc$15 = -1;
      label = 48;
      break L16;
     }
     $138 = (($135) + -12)|0;
     $139 = $138 >>> 1;
     $140 = (($139) + ($d1$0))|0;
     $141 = ($140>>>0)>($nKey1>>>0);
     if ($141) {
      $rc$15 = 1;
      label = 48;
      break L16;
     }
     $142 = (($pRhs$0) + 24|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($139|0)<($143|0);
     $$3 = $144 ? $139 : $143;
     $145 = (($pKey1) + ($d1$0)|0);
     $146 = (($pRhs$0) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (_memcmp($145,$147,$$3)|0);
     $149 = ($148|0)==(0);
     if (!($149)) {
      $rc$15 = $148;
      label = 48;
      break L16;
     }
     $150 = (($139) - ($143))|0;
     $rc$1 = $150;
     label = 47;
     break;
    }
    $99 = (($pKey1) + ($idx1$0)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100<<24>>24)>(-1);
    if ($101) {
     $102 = $100&255;
     HEAP32[$serial_type>>2] = $102;
     $104 = $102;
    } else {
     (_sqlite3GetVarint32($99,$serial_type)|0);
     $$pr = HEAP32[$serial_type>>2]|0;
     $104 = $$pr;
    }
    $103 = ($104>>>0)<(12);
    if ($103) {
     $rc$15 = -1;
     label = 48;
     break L16;
    }
    $105 = $104 & 1;
    $106 = ($105|0)==(0);
    if ($106) {
     $rc$15 = 1;
     label = 48;
     break L16;
    }
    $107 = (($104) + -12)|0;
    $108 = $107 >>> 1;
    HEAP32[$26>>2] = $108;
    $109 = (($108) + ($d1$0))|0;
    $110 = ($109>>>0)>($nKey1>>>0);
    if ($110) {
     $rc$15 = 1;
     label = 48;
     break L16;
    }
    $111 = ((($2) + ($i$0<<2)|0) + 20|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(0|0);
    if (!($113)) {
     $114 = HEAP8[$27>>0]|0;
     HEAP8[$28>>0] = $114;
     $115 = HEAP32[$29>>2]|0;
     HEAP32[$mem1>>2] = $115;
     HEAP16[$30>>1] = 2;
     $116 = (($pKey1) + ($d1$0)|0);
     HEAP32[$31>>2] = $116;
     $117 = HEAP32[$111>>2]|0;
     $118 = (_vdbeCompareMemString($mem1,$pRhs$0,$117)|0);
     $rc$1 = $118;
     label = 47;
     break;
    }
    $119 = (($pRhs$0) + 24|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($108|0)<($120|0);
    $$ = $121 ? $108 : $120;
    $122 = (($pKey1) + ($d1$0)|0);
    $123 = (($pRhs$0) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (_memcmp($122,$124,$$)|0);
    $126 = ($125|0)==(0);
    if (!($126)) {
     $rc$15 = $125;
     label = 48;
     break L16;
    }
    $127 = (($108) - ($120))|0;
    $rc$1 = $127;
    label = 47;
   } else {
    $40 = (($pKey1) + ($idx1$0)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    HEAP32[$serial_type>>2] = $42;
    $43 = ($41&255)>(11);
    if ($43) {
     $rc$15 = 1;
     label = 48;
     break L16;
    }
    if ((($41<<24>>24) == 0)) {
     $rc$15 = -1;
     label = 48;
     break L16;
    } else if ((($41<<24>>24) == 7)) {
     $44 = (($pRhs$0) + 16|0);
     $45 = $44;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = (+($47>>>0)) + (4294967296.0*(+($50|0)));
     $52 = (($pKey1) + ($d1$0)|0);
     (_sqlite3VdbeSerialGet($52,$42,$mem1)|0);
     $53 = +HEAPF64[$32>>3];
     $54 = $53 < $51;
     if ($54) {
      $rc$15 = -1;
      label = 48;
      break L16;
     }
     $55 = $53 > $51;
     if ($55) {
      $rc$15 = 1;
      label = 48;
      break L16;
     } else {
      break;
     }
    } else {
     $56 = (($pKey1) + ($d1$0)|0);
     $57 = (_vdbeRecordDecodeInt($42,$56)|0);
     $58 = tempRet0;
     $59 = (($pRhs$0) + 16|0);
     $60 = $59;
     $61 = $60;
     $62 = HEAP32[$61>>2]|0;
     $63 = (($60) + 4)|0;
     $64 = $63;
     $65 = HEAP32[$64>>2]|0;
     $66 = ($58|0)<($65|0);
     $67 = ($58|0)==($65|0);
     $68 = ($57>>>0)<($62>>>0);
     $69 = $67 & $68;
     $70 = $66 | $69;
     if ($70) {
      $rc$15 = -1;
      label = 48;
      break L16;
     }
     $71 = ($58|0)>($65|0);
     $72 = ($58|0)==($65|0);
     $73 = ($57>>>0)>($62>>>0);
     $74 = $72 & $73;
     $75 = $71 | $74;
     $$rc$0 = $75&1;
     $rc$1 = $$rc$0;
     label = 47;
     break;
    }
   }
  } while(0);
  if ((label|0) == 47) {
   label = 0;
   $153 = ($rc$1|0)==(0);
   if (!($153)) {
    $rc$15 = $rc$1;
    label = 48;
    break;
   }
  }
  $160 = (($i$0) + 1)|0;
  $161 = HEAP32[$serial_type>>2]|0;
  $162 = (_sqlite3VdbeSerialTypeLen($161)|0);
  $163 = (($162) + ($d1$0))|0;
  $164 = (_sqlite3VarintLen($161,0)|0);
  $165 = (($164) + ($idx1$0))|0;
  $166 = HEAP32[$szHdr1>>2]|0;
  $167 = ($165>>>0)<($166>>>0);
  if (!($167)) {
   label = 51;
   break;
  }
  $168 = (($pRhs$0) + 40|0);
  $169 = HEAP16[$34>>1]|0;
  $170 = $169&65535;
  $171 = ($160|0)>=($170|0);
  $172 = ($163>>>0)>($nKey1>>>0);
  $or$cond4 = $171 | $172;
  if ($or$cond4) {
   label = 51;
   break;
  } else {
   $d1$0 = $163;$i$0 = $160;$idx1$0 = $165;$pRhs$0 = $168;
  }
 }
 if ((label|0) == 48) {
  $154 = (($2) + 16|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + ($i$0)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($157<<24>>24)==(0);
  $159 = (0 - ($rc$15))|0;
  $rc$1$ = $158 ? $rc$15 : $159;
  $$0 = $rc$1$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 51) {
  $173 = (($pPKey2) + 6|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174 << 24 >> 24;
  $$0 = $175;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3VdbeSerialTypeLen($serial_type) {
 $serial_type = $serial_type|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($serial_type>>>0)>(11);
 if ($0) {
  $1 = (($serial_type) + -12)|0;
  $2 = $1 >>> 1;
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (24376 + ($serial_type)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3VdbeSerialGet($buf,$serial_type,$pMem) {
 $buf = $buf|0;
 $serial_type = $serial_type|0;
 $pMem = $pMem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($serial_type|0) {
 case 4:  {
  $46 = HEAP8[$buf>>0]|0;
  $47 = $46&255;
  $48 = $47 << 24;
  $49 = (($buf) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 << 16;
  $53 = $52 | $48;
  $54 = (($buf) + 2|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 << 8;
  $58 = $53 | $57;
  $59 = (($buf) + 3|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $58 | $61;
  $63 = ($62|0)<(0);
  $64 = $63 << 31 >> 31;
  $65 = (($pMem) + 16|0);
  $66 = $65;
  $67 = $66;
  HEAP32[$67>>2] = $62;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $64;
  $70 = (($pMem) + 28|0);
  HEAP16[$70>>1] = 4;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $26 = HEAP8[$buf>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = $27 << 16;
  $29 = (($buf) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 << 8;
  $33 = $32 | $28;
  $34 = (($buf) + 2|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $33 | $36;
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = (($pMem) + 16|0);
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = $37;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($pMem) + 28|0);
  HEAP16[$45>>1] = 4;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 7: case 6:  {
  $103 = HEAP8[$buf>>0]|0;
  $104 = $103&255;
  $105 = $104 << 24;
  $106 = (($buf) + 1|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $108 << 16;
  $110 = $109 | $105;
  $111 = (($buf) + 2|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = $113 << 8;
  $115 = $110 | $114;
  $116 = (($buf) + 3|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $115 | $118;
  $120 = (($buf) + 4|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = $122 << 24;
  $124 = (($buf) + 5|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = $126 << 16;
  $128 = $127 | $123;
  $129 = (($buf) + 6|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = $131 << 8;
  $133 = $128 | $132;
  $134 = (($buf) + 7|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = $133 | $136;
  $138 = ($serial_type|0)==(6);
  if ($138) {
   $139 = (($pMem) + 16|0);
   $140 = $139;
   $141 = $140;
   HEAP32[$141>>2] = $137;
   $142 = (($140) + 4)|0;
   $143 = $142;
   HEAP32[$143>>2] = $119;
   $144 = (($pMem) + 28|0);
   HEAP16[$144>>1] = 4;
   $$0 = 8;
   STACKTOP = sp;return ($$0|0);
  } else {
   $145 = (($pMem) + 8|0);
   $146 = $145;
   $147 = $146;
   HEAP32[$147>>2] = $137;
   $148 = (($146) + 4)|0;
   $149 = $148;
   HEAP32[$149>>2] = $119;
   HEAP32[tempDoublePtr>>2] = $137;HEAP32[tempDoublePtr+4>>2] = $119;$150 = +HEAPF64[tempDoublePtr>>3];
   $151 = (_sqlite3IsNaN($150)|0);
   $152 = ($151|0)!=(0);
   $153 = $152 ? 1 : 8;
   $154 = (($pMem) + 28|0);
   HEAP16[$154>>1] = $153;
   $$0 = 8;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $71 = (($buf) + 2|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 << 24;
  $75 = (($buf) + 3|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 << 16;
  $79 = $78 | $74;
  $80 = (($buf) + 4|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 << 8;
  $84 = $79 | $83;
  $85 = (($buf) + 5|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $84 | $87;
  $89 = HEAP8[$buf>>0]|0;
  $90 = $89 << 24 >> 24;
  $91 = $90 << 8;
  $92 = (($buf) + 1|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = $91 | $94;
  $96 = ($95|0)<(0);
  $96 << 31 >> 31;
  $97 = (($pMem) + 16|0);
  $98 = $97;
  $99 = $98;
  HEAP32[$99>>2] = $88;
  $100 = (($98) + 4)|0;
  $101 = $100;
  HEAP32[$101>>2] = $95;
  $102 = (($pMem) + 28|0);
  HEAP16[$102>>1] = 4;
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 9: case 8:  {
  $155 = (($serial_type) + -8)|0;
  $156 = (($pMem) + 16|0);
  $157 = $156;
  $158 = $157;
  HEAP32[$158>>2] = $155;
  $159 = (($157) + 4)|0;
  $160 = $159;
  HEAP32[$160>>2] = 0;
  $161 = (($pMem) + 28|0);
  HEAP16[$161>>1] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $11 = HEAP8[$buf>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = $12 << 8;
  $14 = (($buf) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $13 | $16;
  $18 = ($17|0)<(0);
  $19 = $18 << 31 >> 31;
  $20 = (($pMem) + 16|0);
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($pMem) + 28|0);
  HEAP16[$25>>1] = 4;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $1 = HEAP8[$buf>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = ($2|0)<(0);
  $4 = $3 << 31 >> 31;
  $5 = (($pMem) + 16|0);
  $6 = $5;
  $7 = $6;
  HEAP32[$7>>2] = $2;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $4;
  $10 = (($pMem) + 28|0);
  HEAP16[$10>>1] = 4;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0: case 11: case 10:  {
  $0 = (($pMem) + 28|0);
  HEAP16[$0>>1] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $162 = (($serial_type) + -12)|0;
  $163 = $162 >>> 1;
  $164 = (($pMem) + 4|0);
  HEAP32[$164>>2] = $buf;
  $165 = (($pMem) + 24|0);
  HEAP32[$165>>2] = $163;
  $166 = (($pMem) + 32|0);
  HEAP32[$166>>2] = 0;
  $167 = $serial_type & 1;
  $168 = (24368 + ($167<<1)|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = (($pMem) + 28|0);
  HEAP16[$170>>1] = $169;
  $$0 = $163;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return 0|0;
}
function _vdbeRecordDecodeInt($serial_type,$aKey) {
 $serial_type = $serial_type|0;
 $aKey = $aKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($serial_type|0) {
 case 5:  {
  $46 = (($aKey) + 2|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 24;
  $50 = (($aKey) + 3|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 << 16;
  $54 = $53 | $49;
  $55 = (($aKey) + 4|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $57 << 8;
  $59 = $54 | $58;
  $60 = (($aKey) + 5|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $59 | $62;
  $64 = HEAP8[$aKey>>0]|0;
  $65 = $64 << 24 >> 24;
  $66 = $65 << 8;
  $67 = (($aKey) + 1|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $66 | $69;
  $71 = ($70|0)<(0);
  $71 << 31 >> 31;
  $108 = $70;$109 = $63;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 case 4:  {
  $27 = HEAP8[$aKey>>0]|0;
  $28 = $27&255;
  $29 = $28 << 24;
  $30 = (($aKey) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = $33 | $29;
  $35 = (($aKey) + 2|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 8;
  $39 = $34 | $38;
  $40 = (($aKey) + 3|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $39 | $42;
  $44 = ($43|0)<(0);
  $45 = $44 << 31 >> 31;
  $108 = $45;$109 = $43;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 case 6:  {
  $72 = HEAP8[$aKey>>0]|0;
  $73 = $72&255;
  $74 = $73 << 24;
  $75 = (($aKey) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 << 16;
  $79 = $78 | $74;
  $80 = (($aKey) + 2|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 << 8;
  $84 = $79 | $83;
  $85 = (($aKey) + 3|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $84 | $87;
  $89 = (($aKey) + 4|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 24;
  $93 = (($aKey) + 5|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 << 16;
  $97 = $96 | $92;
  $98 = (($aKey) + 6|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $100 << 8;
  $102 = $97 | $101;
  $103 = (($aKey) + 7|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $102 | $105;
  $108 = $88;$109 = $106;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 case 3:  {
  $13 = HEAP8[$aKey>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = $14 << 16;
  $16 = (($aKey) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = $19 | $15;
  $21 = (($aKey) + 2|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $20 | $23;
  $25 = ($24|0)<(0);
  $26 = $25 << 31 >> 31;
  $108 = $26;$109 = $24;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 case 2:  {
  $4 = HEAP8[$aKey>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = $5 << 8;
  $7 = (($aKey) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $6 | $9;
  $11 = ($10|0)<(0);
  $12 = $11 << 31 >> 31;
  $108 = $12;$109 = $10;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 case 1: case 0:  {
  $0 = HEAP8[$aKey>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = ($1|0)<(0);
  $3 = $2 << 31 >> 31;
  $108 = $3;$109 = $1;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
  break;
 }
 default: {
  $107 = (($serial_type) + -8)|0;
  $108 = 0;$109 = $107;
  tempRet0 = $108;
  STACKTOP = sp;return ($109|0);
 }
 }
 return 0|0;
}
function _sqlite3VarintLen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;$4 = $1;$i$0 = 0;
 while(1) {
  $2 = (($i$0) + 1)|0;
  $5 = (_bitshift64Lshr(($3|0),($4|0),7)|0);
  $6 = tempRet0;
  $7 = ($5|0)!=(0);
  $8 = ($6|0)!=(0);
  $9 = $7 | $8;
  $10 = ($2|0)<(9);
  $or$cond = $9 & $10;
  if ($or$cond) {
   $3 = $5;$4 = $6;$i$0 = $2;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _sqlite3IsNaN($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $y = 0.0, $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $y = $x;
 $0 = $y;
 $z = $0;
 $1 = $y;
 $2 = $z;
 $3 = $1 != $2;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _moveToLeftmost($pCur) {
 $pCur = $pCur|0;
 var $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 86|0);
 while(1) {
  $1 = HEAP16[$0>>1]|0;
  $2 = $1 << 16 >> 16;
  $3 = ((($pCur) + ($2<<2)|0) + 128|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 3|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $rc$0$lcssa = 0;
   label = 4;
   break;
  }
  $8 = (($4) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($4) + 18|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ((($pCur) + ($2<<1)|0) + 88|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = $15 << 1;
  $17 = (($4) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $$sum1 = $16 | 1;
  $23 = (($18) + ($$sum1)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $22 | $25;
  $27 = $26 & $12;
  $28 = (($9) + ($27)|0);
  $29 = (_sqlite3Get4byte($28)|0);
  $30 = (_moveToChild($pCur,$29)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   $rc$0$lcssa = $30;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 return 0|0;
}
function _targetSrcList($pParse,$pStep) {
 $pParse = $pParse|0;
 $pStep = $pStep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pStep) + 12|0);
 $2 = (_sqlite3SrcListAppend($0,0,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return ($2|0);
 }
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($pStep) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3SchemaToIndex($4,$8)|0);
 $10 = ($9|0)==(0);
 $11 = ($9|0)>(1);
 $or$cond = $10 | $11;
 if (!($or$cond)) {
  STACKTOP = sp;return ($2|0);
 }
 $12 = (($4) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9<<4)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_sqlite3DbStrDup($4,$15)|0);
 $17 = HEAP32[$2>>2]|0;
 $18 = (($17) + -1)|0;
 $19 = ((($2) + (($18*72)|0)|0) + 12|0);
 HEAP32[$19>>2] = $16;
 STACKTOP = sp;return ($2|0);
}
function _fkTriggerDelete($dbMem,$p) {
 $dbMem = $dbMem|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($p) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3ExprDelete($dbMem,$4);
 $5 = (($2) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _sqlite3ExprListDelete($dbMem,$6);
 $7 = (($2) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _sqlite3SelectDelete($dbMem,$8);
 $9 = (($p) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 _sqlite3ExprDelete($dbMem,$10);
 _sqlite3DbFree($dbMem,$p);
 STACKTOP = sp;return;
}
function _checkColumnOverlap($pIdList,$pEList) {
 $pIdList = $pIdList|0;
 $pEList = $pEList|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pIdList|0)==(0|0);
 $1 = ($pEList|0)==(0|0);
 $or$cond = $0 | $1;
 L1: do {
  if ($or$cond) {
   $$0 = 1;
  } else {
   $2 = HEAP32[$pEList>>2]|0;
   $3 = ($2|0)>(0);
   if ($3) {
    $4 = (($pEList) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $e$01 = 0;
    while(1) {
     $8 = ((($5) + (($e$01*20)|0)|0) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (_sqlite3IdListIndex($pIdList,$9)|0);
     $11 = ($10|0)>(-1);
     $7 = (($e$01) + 1)|0;
     if ($11) {
      $$0 = 1;
      break L1;
     }
     $6 = ($7|0)<($2|0);
     if ($6) {
      $e$01 = $7;
     } else {
      $$0 = 0;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _xferCompatibleCollation($z1,$z2) {
 $z1 = $z1|0;
 $z2 = $z2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z1|0)==(0|0);
 $1 = ($z2|0)==(0|0);
 if ($0) {
  $2 = $1&1;
  $$0 = $2;
 } else {
  if ($1) {
   $$0 = 0;
  } else {
   $3 = (_sqlite3_stricmp($z1,$z2)|0);
   $4 = ($3|0)==(0);
   $5 = $4&1;
   $$0 = $5;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _xferCompatibleIndex($pDest,$pSrc) {
 $pDest = $pDest|0;
 $pSrc = $pSrc|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pDest) + 50|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($pSrc) + 50|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($1<<16>>16)==($3<<16>>16);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pDest) + 54|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($pSrc) + 54|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($6<<24>>24)==($8<<24>>24);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($1<<16>>16)==(0);
 L7: do {
  if (!($10)) {
   $11 = (($pSrc) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($pDest) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($pSrc) + 28|0);
   $16 = (($pDest) + 28|0);
   $17 = (($pSrc) + 32|0);
   $18 = (($pDest) + 32|0);
   $i$01 = 0;
   while(1) {
    $22 = (($12) + ($i$01<<1)|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = (($14) + ($i$01<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($23<<16>>16)==($25<<16>>16);
    if (!($26)) {
     $$0 = 0;
     label = 10;
     break;
    }
    $27 = HEAP32[$15>>2]|0;
    $28 = (($27) + ($i$01)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = HEAP32[$16>>2]|0;
    $31 = (($30) + ($i$01)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($29<<24>>24)==($32<<24>>24);
    if (!($33)) {
     $$0 = 0;
     label = 10;
     break;
    }
    $34 = HEAP32[$17>>2]|0;
    $35 = (($34) + ($i$01<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$18>>2]|0;
    $38 = (($37) + ($i$01<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (_xferCompatibleCollation($36,$39)|0);
    $41 = ($40|0)==(0);
    $21 = (($i$01) + 1)|0;
    if ($41) {
     $$0 = 0;
     label = 10;
     break;
    }
    $19 = $1&65535;
    $20 = ($21|0)<($19|0);
    if ($20) {
     $i$01 = $21;
    } else {
     break L7;
    }
   }
   if ((label|0) == 10) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $42 = (($pSrc) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($pDest) + 36|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_sqlite3ExprCompare($43,$45,-1)|0);
 $47 = ($46|0)==(0);
 $$ = $47&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _updateVirtualTable($pParse,$pSrc,$pTab,$pChanges,$pRowid,$aXRef,$pWhere,$onError) {
 $pParse = $pParse|0;
 $pSrc = $pSrc|0;
 $pTab = $pTab|0;
 $pChanges = $pChanges|0;
 $pRowid = $pRowid|0;
 $aXRef = $aXRef|0;
 $pWhere = $pWhere|0;
 $onError = $onError|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dest = 0, $i$04 = 0, $i$13 = 0, $pEList$1$lcssa = 0, $pEList$1$ph = 0, $pEList$15 = 0, $pExpr$0 = 0, $pParse$idx$val = 0, $pParse$idx1$val = 0, $pParse$idx2$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $dest = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (_sqlite3GetVTable($2,$pTab)|0);
 $4 = (_sqlite3Expr($2,27,24576)|0);
 $pParse$idx2$val = HEAP32[$pParse>>2]|0;
 $5 = (_sqlite3ExprListAppend($pParse$idx2$val,0,$4)|0);
 $6 = ($pRowid|0)!=(0|0);
 if ($6) {
  $7 = (_sqlite3ExprDup($2,$pRowid,0)|0);
  $pParse$idx1$val = HEAP32[$pParse>>2]|0;
  $8 = (_sqlite3ExprListAppend($pParse$idx1$val,$5,$7)|0);
  $pEList$1$ph = $8;
 } else {
  $pEList$1$ph = $5;
 }
 $9 = (($pTab) + 38|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)>(0);
 if ($11) {
  $12 = (($pChanges) + 8|0);
  $13 = (($pTab) + 4|0);
  $i$04 = 0;$pEList$15 = $pEList$1$ph;
  while(1) {
   $14 = (($aXRef) + ($i$04<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(-1);
   if ($16) {
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + (($15*20)|0)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_sqlite3ExprDup($2,$19,0)|0);
    $pExpr$0 = $20;
   } else {
    $21 = HEAP32[$13>>2]|0;
    $22 = (($21) + (($i$04*24)|0)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_sqlite3Expr($2,27,$23)|0);
    $pExpr$0 = $24;
   }
   $pParse$idx$val = HEAP32[$pParse>>2]|0;
   $25 = (_sqlite3ExprListAppend($pParse$idx$val,$pEList$15,$pExpr$0)|0);
   $26 = (($i$04) + 1)|0;
   $27 = HEAP16[$9>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = ($26|0)<($28|0);
   if ($29) {
    $i$04 = $26;$pEList$15 = $25;
   } else {
    $pEList$1$lcssa = $25;
    break;
   }
  }
 } else {
  $pEList$1$lcssa = $pEList$1$ph;
 }
 $30 = (_sqlite3SelectNew($pParse,$pEList$1$lcssa,$pSrc,$pWhere,0,0,0,0,0,0)|0);
 $31 = (($pParse) + 72|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $34 = HEAP16[$9>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = $6&1;
 $37 = $6 ? 2 : 1;
 $38 = (($37) + ($35))|0;
 (_sqlite3VdbeAddOp2($1,55,$32,$38)|0);
 _sqlite3VdbeChangeP5($1,8);
 _sqlite3SelectDestInit($dest,10,$32);
 (_sqlite3Select($pParse,$30,$dest)|0);
 $39 = (($pParse) + 76|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 $42 = HEAP16[$9>>1]|0;
 $43 = $42 << 16 >> 16;
 $44 = (($40) + 2)|0;
 $45 = (($44) + ($43))|0;
 HEAP32[$39>>2] = $45;
 $46 = (_sqlite3VdbeAddOp2($1,105,$32,0)|0);
 (_sqlite3VdbeAddOp3($1,46,$32,0,$41)|0);
 (_sqlite3VdbeAddOp3($1,46,$32,$36,$44)|0);
 $47 = HEAP16[$9>>1]|0;
 $48 = ($47<<16>>16)>(0);
 if (!($48)) {
  _sqlite3VtabMakeWritable($pParse,$pTab);
  $56 = HEAP16[$9>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = (($57) + 2)|0;
  (_sqlite3VdbeAddOp4($1,15,0,$58,$41,$3,-10)|0);
  $59 = ($onError|0)==(10);
  $60 = $onError&255;
  $61 = $59 ? 2 : $60;
  _sqlite3VdbeChangeP5($1,$61);
  _sqlite3MayAbort($pParse);
  $62 = (($46) + 1)|0;
  (_sqlite3VdbeAddOp2($1,9,$32,$62)|0);
  _sqlite3VdbeJumpHere($1,$46);
  (_sqlite3VdbeAddOp2($1,58,$32,0)|0);
  _sqlite3SelectDelete($2,$30);
  STACKTOP = sp;return;
 }
 $49 = (($40) + 3)|0;
 $i$13 = 0;
 while(1) {
  $50 = (($i$13) + 1)|0;
  $51 = (($50) + ($36))|0;
  $52 = (($49) + ($i$13))|0;
  (_sqlite3VdbeAddOp3($1,46,$32,$51,$52)|0);
  $53 = HEAP16[$9>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = ($50|0)<($54|0);
  if ($55) {
   $i$13 = $50;
  } else {
   break;
  }
 }
 _sqlite3VtabMakeWritable($pParse,$pTab);
 $56 = HEAP16[$9>>1]|0;
 $57 = $56 << 16 >> 16;
 $58 = (($57) + 2)|0;
 (_sqlite3VdbeAddOp4($1,15,0,$58,$41,$3,-10)|0);
 $59 = ($onError|0)==(10);
 $60 = $onError&255;
 $61 = $59 ? 2 : $60;
 _sqlite3VdbeChangeP5($1,$61);
 _sqlite3MayAbort($pParse);
 $62 = (($46) + 1)|0;
 (_sqlite3VdbeAddOp2($1,9,$32,$62)|0);
 _sqlite3VdbeJumpHere($1,$46);
 (_sqlite3VdbeAddOp2($1,58,$32,0)|0);
 _sqlite3SelectDelete($2,$30);
 STACKTOP = sp;return;
}
function _sqlite3AuthContextPush($pParse,$pContext,$zContext) {
 $pParse = $pParse|0;
 $pContext = $pContext|0;
 $zContext = $zContext|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pContext) + 4|0);
 HEAP32[$0>>2] = $pParse;
 $1 = (($pParse) + 496|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$pContext>>2] = $2;
 HEAP32[$1>>2] = $zContext;
 STACKTOP = sp;return;
}
function _sqlite3MaterializeView($pParse,$pView,$pWhere,$iCur) {
 $pParse = $pParse|0;
 $pView = $pView|0;
 $pWhere = $pWhere|0;
 $iCur = $iCur|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $dest = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pView) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3SchemaToIndex($0,$2)|0);
 $4 = (_sqlite3ExprDup($0,$pWhere,0)|0);
 $5 = (_sqlite3SrcListAppend($0,0,0,0)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$pView>>2]|0;
  $8 = (_sqlite3DbStrDup($0,$7)|0);
  $9 = (($5) + 16|0);
  HEAP32[$9>>2] = $8;
  $10 = (($0) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($3<<4)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_sqlite3DbStrDup($0,$13)|0);
  $15 = (($5) + 12|0);
  HEAP32[$15>>2] = $14;
 }
 $16 = (_sqlite3SelectNew($pParse,0,$5,$4,0,0,0,0,0,0)|0);
 _sqlite3SelectDestInit($dest,8,$iCur);
 (_sqlite3Select($pParse,$16,$dest)|0);
 _sqlite3SelectDelete($0,$16);
 STACKTOP = sp;return;
}
function _sqlite3WhereOkOnePass($pWInfo,$aiCur) {
 $pWInfo = $pWInfo|0;
 $aiCur = $aiCur|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWInfo) + 60|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $aiCur;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = (($pWInfo) + 37|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 STACKTOP = sp;return ($13|0);
}
function _sqlite3AuthContextPop($pContext) {
 $pContext = $pContext|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pContext) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$pContext>>2]|0;
 $4 = (($1) + 496|0);
 HEAP32[$4>>2] = $3;
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3SrcListEnlarge($db,$pSrc,$nExtra,$iStart) {
 $db = $db|0;
 $pSrc = $pSrc|0;
 $nExtra = $nExtra|0;
 $iStart = $iStart|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$04$in = 0, $i$12 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pSrc>>2]|0;
 $1 = (($0) + ($nExtra))|0;
 $2 = (($pSrc) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 do {
  if ($4) {
   $5 = ($1*72)|0;
   $6 = (($5) + 8)|0;
   $7 = (_sqlite3DbRealloc($db,$pSrc,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = $pSrc;
    STACKTOP = sp;return ($$0|0);
   } else {
    $9 = (_sqlite3DbMallocSize($db,$7)|0);
    $10 = (($9) + -80)|0;
    $11 = (($10>>>0) / 72)&-1;
    $12 = (($11) + 1)|0;
    $13 = (($7) + 4|0);
    HEAP32[$13>>2] = $12;
    $$pre = HEAP32[$7>>2]|0;
    $$01 = $7;$15 = $$pre;
    break;
   }
  } else {
   $$01 = $pSrc;$15 = $0;
  }
 } while(0);
 $14 = ($15|0)>($iStart|0);
 if ($14) {
  $i$04$in = $15;
  while(1) {
   $i$04 = (($i$04$in) + -1)|0;
   $16 = (($i$04) + ($nExtra))|0;
   $17 = ((($$01) + (($16*72)|0)|0) + 8|0);
   $18 = ((($$01) + (($i$04*72)|0)|0) + 8|0);
   dest=$17+0|0; src=$18+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $19 = ($i$04|0)>($iStart|0);
   if ($19) {
    $i$04$in = $i$04;
   } else {
    break;
   }
  }
  $$pre6 = HEAP32[$$01>>2]|0;
  $21 = $$pre6;
 } else {
  $21 = $15;
 }
 $20 = (($21) + ($nExtra))|0;
 HEAP32[$$01>>2] = $20;
 $22 = ((($$01) + (($iStart*72)|0)|0) + 8|0);
 $23 = ($nExtra*72)|0;
 _memset(($22|0),0,($23|0))|0;
 $24 = (($iStart) + ($nExtra))|0;
 $25 = ($nExtra|0)>(0);
 if ($25) {
  $i$12 = $iStart;
 } else {
  $$0 = $$01;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $26 = ((($$01) + (($i$12*72)|0)|0) + 48|0);
  HEAP32[$26>>2] = -1;
  $27 = (($i$12) + 1)|0;
  $28 = ($27|0)<($24|0);
  if ($28) {
   $i$12 = $27;
  } else {
   $$0 = $$01;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _checkForMultiColumnSelectError($pParse,$pDest,$nExpr) {
 $pParse = $pParse|0;
 $pDest = $pDest|0;
 $nExpr = $nExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($nExpr|0)>(1);
 if ($0) {
  $1 = HEAP8[$pDest>>0]|0;
  $2 = $1 & -2;
  $3 = ($2<<24>>24)==(6);
  if ($3) {
   _sqlite3ErrorMsg($pParse,25384,$vararg_buffer);
   $$0 = 1;
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3SelectExprHeight($p) {
 $p = $p|0;
 var $0 = 0, $nHeight = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nHeight = sp;
 HEAP32[$nHeight>>2] = 0;
 _heightOfSelect($p,$nHeight);
 $0 = HEAP32[$nHeight>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _flattenSubquery($pParse,$p,$iFrom,$isAgg,$subqueryIsAgg) {
 $pParse = $pParse|0;
 $p = $p|0;
 $iFrom = $iFrom|0;
 $isAgg = $isAgg|0;
 $subqueryIsAgg = $subqueryIsAgg|0;
 var $$0 = 0, $$not = 0, $$not1 = 0, $$not3 = 0, $$not42 = 0, $$not43 = 0, $$not45 = 0, $$phi$trans$insert = 0, $$phi$trans$insert39 = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $$pre37 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge2 = 0, $brmerge4 = 0, $brmerge41 = 0, $brmerge44 = 0, $brmerge46 = 0, $exitcond = 0, $i$05 = 0, $i$16 = 0;
 var $ii$022 = 0, $jointype$0 = 0, $not$ = 0, $or$cond = 0, $pParent$011 = 0, $pParse$ = 0, $pSrc$0 = 0, $pSrc$1 = 0, $pSub$0 = 0, $pSub$014 = 0, $pSub$015 = 0, $pSub$110 = 0, $pSub1$026 = 0, $pWhere$0 = 0, $storemerge = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 496|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & 1;
 $6 = ($5<<16>>16)==(0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($p) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8) + (($iFrom*72)|0)|0) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8) + (($iFrom*72)|0)|0) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($isAgg|0)!=(0);
 $$not = $13 ^ 1;
 $14 = ($subqueryIsAgg|0)==(0);
 $or$cond = $14 | $$not;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($subqueryIsAgg|0)!=(0);
 if ($15) {
  $16 = HEAP32[$8>>2]|0;
  $17 = ($16|0)>(1);
  if ($17) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = (($12) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($12) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = (($p) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $26 = (($12) + 72|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($p) + 6|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30 & 4096;
 $32 = ($31<<16>>16)==(0);
 $brmerge41 = $32 | $22;
 if (!($brmerge41)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = HEAP32[$19>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($12) + 6|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 & 1;
 $38 = ($37<<16>>16)==(0);
 if (!($38)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = ($21|0)==(0|0);
 $not$ = $32 ^ 1;
 $40 = $39 | $not$;
 if (!($40)) {
  $41 = HEAP32[$8>>2]|0;
  $42 = ($41|0)>(1);
  $brmerge = $42 | $13;
  if ($brmerge) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $43 = $30 & 1;
 $44 = ($43<<16>>16)==(0);
 $$not1 = $15 ^ 1;
 $brmerge2 = $44 | $$not1;
 if (!($brmerge2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = (($p) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  $48 = (($12) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if ($13) {
  $51 = (($12) + 56|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 if (!($40)) {
  $54 = (($p) + 44|0);
  $55 = HEAP32[$54>>2]|0;
  $$not42 = ($55|0)!=(0|0);
  $$not43 = $44 ^ 1;
  $brmerge44 = $$not42 | $$not43;
  if ($brmerge44) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $56 = $36 & 2048;
 $57 = ($56<<16>>16)==(0);
 if (!($57)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = $30 & 2048;
 $59 = ($58<<16>>16)==(0);
 if (!($59)) {
  $60 = (($12) + 60|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0|0);
  if (!($62)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $63 = ((($8) + (($iFrom*72)|0)|0) + 44|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64 & 32;
 $66 = ($65<<24>>24)==(0);
 if (!($66)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $67 = (($12) + 60|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0|0);
 L56: do {
  if (!($69)) {
   $70 = (($12) + 56|0);
   $71 = HEAP32[$70>>2]|0;
   $$not3 = ($71|0)!=(0|0);
   $brmerge4 = $$not3 | $13;
   $$not45 = $44 ^ 1;
   $brmerge46 = $brmerge4 | $$not45;
   if ($brmerge46) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $72 = HEAP32[$8>>2]|0;
   $73 = ($72|0)==(1);
   if (!($73)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $74 = ($12|0)==(0|0);
   L64: do {
    if (!($74)) {
     $76 = $36;$pSub1$026 = $12;
     while(1) {
      $75 = $76 & 5;
      $77 = ($75<<16>>16)==(0);
      if (!($77)) {
       $$0 = 0;
       label = 84;
       break;
      }
      $78 = (($pSub1$026) + 60|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if (!($80)) {
       $81 = (($pSub1$026) + 4|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($82<<24>>24)==(116);
       if (!($83)) {
        $$0 = 0;
        label = 84;
        break;
       }
      }
      $84 = (($pSub1$026) + 40|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)<(1);
      if ($87) {
       $$0 = 0;
       label = 84;
       break;
      }
      $88 = HEAP32[$12>>2]|0;
      $89 = HEAP32[$88>>2]|0;
      $90 = HEAP32[$pSub1$026>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if (!($92)) {
       $$0 = 0;
       label = 84;
       break;
      }
      if ($80) {
       break L64;
      }
      $$phi$trans$insert = (($79) + 6|0);
      $$pre37 = HEAP16[$$phi$trans$insert>>1]|0;
      $76 = $$pre37;$pSub1$026 = $79;
     }
     if ((label|0) == 84) {
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ($47) {
    break;
   }
   $93 = HEAP32[$46>>2]|0;
   $94 = ($93|0)>(0);
   if (!($94)) {
    break;
   }
   $$phi$trans$insert39 = (($46) + 8|0);
   $$pre40 = HEAP32[$$phi$trans$insert39>>2]|0;
   $ii$022 = 0;
   while(1) {
    $97 = ((($$pre40) + (($ii$022*20)|0)|0) + 16|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = ($98<<16>>16)==(0);
    $96 = (($ii$022) + 1)|0;
    if ($99) {
     $$0 = 0;
     break;
    }
    $95 = ($96|0)<($93|0);
    if ($95) {
     $ii$022 = $96;
    } else {
     break L56;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $100 = ((($8) + (($iFrom*72)|0)|0) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$0>>2] = $101;
 (_sqlite3AuthCheck($pParse,21,0,0,0)|0);
 HEAP32[$0>>2] = $1;
 $pSub$014 = HEAP32[$67>>2]|0;
 $102 = ($pSub$014|0)==(0|0);
 L88: do {
  if (!($102)) {
   $103 = (($p) + 68|0);
   $104 = (($p) + 72|0);
   $105 = (($p) + 60|0);
   $106 = (($p) + 4|0);
   $107 = (($2) + 64|0);
   $$pre31 = HEAP32[$105>>2]|0;
   $116 = $$pre31;$pSub$015 = $pSub$014;
   while(1) {
    $110 = HEAP32[$45>>2]|0;
    $111 = HEAP32[$103>>2]|0;
    $112 = HEAP32[$104>>2]|0;
    HEAP32[$45>>2] = 0;
    HEAP32[$7>>2] = 0;
    HEAP32[$105>>2] = 0;
    HEAP32[$103>>2] = 0;
    HEAP32[$104>>2] = 0;
    $113 = (_sqlite3SelectDup($2,$p,0)|0);
    HEAP32[$104>>2] = $112;
    HEAP32[$103>>2] = $111;
    HEAP32[$45>>2] = $110;
    HEAP32[$7>>2] = $8;
    HEAP8[$106>>0] = 116;
    $114 = ($113|0)==(0|0);
    if ($114) {
     $storemerge = $116;
    } else {
     $115 = (($113) + 60|0);
     HEAP32[$115>>2] = $116;
     $117 = ($116|0)==(0|0);
     if (!($117)) {
      $118 = (($116) + 64|0);
      HEAP32[$118>>2] = $113;
     }
     $119 = (($113) + 64|0);
     HEAP32[$119>>2] = $p;
     $storemerge = $113;
    }
    HEAP32[$105>>2] = $storemerge;
    $120 = HEAP8[$107>>0]|0;
    $121 = ($120<<24>>24)==(0);
    if (!($121)) {
     $$0 = 1;
     break;
    }
    $108 = (($pSub$015) + 60|0);
    $pSub$0 = HEAP32[$108>>2]|0;
    $109 = ($pSub$0|0)==(0|0);
    if ($109) {
     break L88;
    } else {
     $116 = $storemerge;$pSub$015 = $pSub$0;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $122 = HEAP32[$11>>2]|0;
 $123 = ((($8) + (($iFrom*72)|0)|0) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 _sqlite3DbFree($2,$124);
 $125 = HEAP32[$100>>2]|0;
 _sqlite3DbFree($2,$125);
 $126 = ((($8) + (($iFrom*72)|0)|0) + 20|0);
 $127 = HEAP32[$126>>2]|0;
 _sqlite3DbFree($2,$127);
 HEAP32[$123>>2] = 0;
 HEAP32[$100>>2] = 0;
 HEAP32[$126>>2] = 0;
 HEAP32[$11>>2] = 0;
 $128 = ((($8) + (($iFrom*72)|0)|0) + 24|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)==(0|0);
 if (!($130)) {
  $131 = (($129) + 40|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = ($132<<16>>16)==(1);
  if ($133) {
   $134 = (($pParse) + 412|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(0|0);
   $pParse$ = $136 ? $pParse : $135;
   $137 = (($pParse$) + 528|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($129) + 72|0);
   HEAP32[$139>>2] = $138;
   HEAP32[$137>>2] = $129;
  } else {
   $140 = (($132) + -1)<<16>>16;
   HEAP16[$131>>1] = $140;
  }
  HEAP32[$128>>2] = 0;
 }
 $141 = ($p|0)==(0|0);
 L108: do {
  if (!($141)) {
   $142 = (($iFrom) + 1)|0;
   $143 = (($2) + 64|0);
   $pParent$011 = $p;$pSub$110 = $122;
   while(1) {
    $144 = (($pSub$110) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$145>>2]|0;
    $147 = (($pParent$011) + 40|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    if ($149) {
     $151 = (_sqlite3SrcListAppend($2,0,0,0)|0);
     HEAP32[$147>>2] = $151;
     $152 = ($151|0)==(0|0);
     if ($152) {
      break L108;
     } else {
      $jointype$0 = 0;$pSrc$0 = $151;
     }
    } else {
     $150 = HEAP8[$63>>0]|0;
     $jointype$0 = $150;$pSrc$0 = $148;
    }
    $153 = ($146|0)>(1);
    if ($153) {
     $154 = (($146) + -1)|0;
     $155 = (_sqlite3SrcListEnlarge($2,$pSrc$0,$154,$142)|0);
     HEAP32[$147>>2] = $155;
     $156 = HEAP8[$143>>0]|0;
     $157 = ($156<<24>>24)==(0);
     if ($157) {
      $pSrc$1 = $155;
     } else {
      break L108;
     }
    } else {
     $pSrc$1 = $pSrc$0;
    }
    $158 = ($146|0)>(0);
    if ($158) {
     $i$05 = 0;
     while(1) {
      $159 = (($i$05) + ($iFrom))|0;
      $160 = ((($pSrc$1) + (($159*72)|0)|0) + 8|0);
      $161 = ((($pSrc$1) + (($159*72)|0)|0) + 56|0);
      $162 = HEAP32[$161>>2]|0;
      _sqlite3IdListDelete($2,$162);
      $163 = ((($145) + (($i$05*72)|0)|0) + 8|0);
      dest=$160+0|0; src=$163+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      dest=$163+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      $164 = (($i$05) + 1)|0;
      $exitcond = ($164|0)==($146|0);
      if ($exitcond) {
       break;
      } else {
       $i$05 = $164;
      }
     }
    }
    $165 = ((($pSrc$1) + (($iFrom*72)|0)|0) + 44|0);
    HEAP8[$165>>0] = $jointype$0;
    $166 = HEAP32[$pParent$011>>2]|0;
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)>(0);
    if ($168) {
     $169 = (($166) + 8|0);
     $236 = $167;$i$16 = 0;
     while(1) {
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($170) + (($i$16*20)|0)|0) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = ((($170) + (($i$16*20)|0)|0) + 8|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = (_sqlite3DbStrDup($2,$175)|0);
       _sqlite3Dequote($176);
       $177 = HEAP32[$169>>2]|0;
       $178 = ((($177) + (($i$16*20)|0)|0) + 4|0);
       HEAP32[$178>>2] = $176;
       $$pre30 = HEAP32[$166>>2]|0;
       $181 = $$pre30;
      } else {
       $181 = $236;
      }
      $179 = (($i$16) + 1)|0;
      $180 = ($179|0)<($181|0);
      if ($180) {
       $236 = $181;$i$16 = $179;
      } else {
       break;
      }
     }
     $$pre = HEAP32[$pParent$011>>2]|0;
     $183 = $$pre;
    } else {
     $183 = $166;
    }
    $182 = HEAP32[$pSub$110>>2]|0;
    _substExprList($2,$183,$10,$182);
    if ($13) {
     $184 = (($pParent$011) + 48|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = HEAP32[$pSub$110>>2]|0;
     _substExprList($2,$185,$10,$186);
     $187 = (($pParent$011) + 52|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = HEAP32[$pSub$110>>2]|0;
     $190 = (_substExpr($2,$188,$10,$189)|0);
     HEAP32[$187>>2] = $190;
    }
    $191 = (($pSub$110) + 56|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)==(0|0);
    $194 = (($pParent$011) + 56|0);
    do {
     if ($193) {
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==(0|0);
      if ($196) {
       break;
      }
      $197 = HEAP32[$pSub$110>>2]|0;
      _substExprList($2,$195,$10,$197);
     } else {
      HEAP32[$194>>2] = $192;
      HEAP32[$191>>2] = 0;
     }
    } while(0);
    $198 = (($pSub$110) + 44|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($199|0)==(0|0);
    if ($200) {
     $pWhere$0 = 0;
    } else {
     $201 = (_sqlite3ExprDup($2,$199,0)|0);
     $pWhere$0 = $201;
    }
    $202 = (($pParent$011) + 44|0);
    $203 = HEAP32[$202>>2]|0;
    if ($15) {
     $204 = (($pParent$011) + 52|0);
     HEAP32[$204>>2] = $203;
     HEAP32[$202>>2] = $pWhere$0;
     $205 = HEAP32[$pSub$110>>2]|0;
     $206 = (_substExpr($2,$203,$10,$205)|0);
     HEAP32[$204>>2] = $206;
     $207 = (($pSub$110) + 52|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = (_sqlite3ExprDup($2,$208,0)|0);
     $210 = (_sqlite3ExprAnd($2,$206,$209)|0);
     HEAP32[$204>>2] = $210;
     $211 = (($pSub$110) + 48|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = (_sqlite3ExprListDup($2,$212,0)|0);
     $214 = (($pParent$011) + 48|0);
     HEAP32[$214>>2] = $213;
    } else {
     $215 = HEAP32[$pSub$110>>2]|0;
     $216 = (_substExpr($2,$203,$10,$215)|0);
     HEAP32[$202>>2] = $216;
     $217 = (_sqlite3ExprAnd($2,$216,$pWhere$0)|0);
     HEAP32[$202>>2] = $217;
    }
    $218 = (($pSub$110) + 6|0);
    $219 = HEAP16[$218>>1]|0;
    $220 = $219&65535;
    $221 = $220 & 1;
    $222 = (($pParent$011) + 6|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223&65535;
    $225 = $224 | $221;
    $226 = $225&65535;
    HEAP16[$222>>1] = $226;
    $227 = (($pSub$110) + 68|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)==(0|0);
    if (!($229)) {
     $230 = (($pParent$011) + 68|0);
     HEAP32[$230>>2] = $228;
     HEAP32[$227>>2] = 0;
    }
    $231 = (($pParent$011) + 60|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($pSub$110) + 60|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ($232|0)==(0|0);
    if ($235) {
     break;
    } else {
     $pParent$011 = $232;$pSub$110 = $234;
    }
   }
  }
 } while(0);
 _sqlite3SelectDelete($2,$122);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ClearTempRegCache($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 19|0);
 HEAP8[$0>>0] = 0;
 $1 = (($pParse) + 60|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _multiSelect($pParse,$p,$pDest) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pDest = $pDest|0;
 var $$ = 0, $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4$val = 0, $$idx5 = 0, $$idx5$val = 0, $$pre = 0, $$pre$phi16Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0, $apColl$010 = 0, $dest = 0, $exitcond = 0, $i$09 = 0, $i$16 = 0, $iSub1$0 = 0, $iSub2$0 = 0, $intersectdest = 0, $nLimit = 0, $or$cond = 0, $pDelete$0 = 0, $pDelete$1 = 0, $pFirst$0 = 0, $pFirst8$0 = 0;
 var $pLoop$08 = 0, $rc$0 = 0, $rc$1 = 0, $unionTab$0 = 0, $uniondest = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dest = sp + 72|0;
 $nLimit = sp + 68|0;
 $uniondest = sp + 48|0;
 $intersectdest = sp + 28|0;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($p) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 ;HEAP32[$dest+0>>2]=HEAP32[$pDest+0>>2]|0;HEAP32[$dest+4>>2]=HEAP32[$pDest+4>>2]|0;HEAP32[$dest+8>>2]=HEAP32[$pDest+8>>2]|0;HEAP32[$dest+12>>2]=HEAP32[$pDest+12>>2]|0;HEAP32[$dest+16>>2]=HEAP32[$pDest+16>>2]|0;
 $3 = (($2) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $10 = (($2) + 68|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (($p) + 4|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = (_selectOpName($15)|0);
    HEAP32[$vararg_buffer1>>2] = $16;
    _sqlite3ErrorMsg($pParse,25088,$vararg_buffer1);
    $pDelete$1 = 0;$rc$1 = 1;
    break;
   }
   $17 = (_sqlite3GetVdbe($pParse)|0);
   $18 = HEAP8[$dest>>0]|0;
   $19 = ($18<<24>>24)==(8);
   if ($19) {
    $20 = (($dest) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$p>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    (_sqlite3VdbeAddOp2($17,55,$21,$23)|0);
    _sqlite3VdbeChangeP5($17,8);
    HEAP8[$dest>>0] = 10;
    $$pre$phi16Z2D = $p;$114 = 10;
   } else {
    $$pre$phi16Z2D = $p;$114 = $18;
   }
   $24 = HEAP32[$$pre$phi16Z2D>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$2>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)==($27|0);
   $29 = (($p) + 6|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   if (!($28)) {
    $32 = $31 & 128;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = (($p) + 4|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = (_selectOpName($36)|0);
     HEAP32[$vararg_buffer6>>2] = $37;
     _sqlite3ErrorMsg($pParse,25184,$vararg_buffer6);
     $pDelete$1 = 0;$rc$1 = 1;
     break;
    } else {
     _sqlite3ErrorMsg($pParse,25136,$vararg_buffer4);
     $pDelete$1 = 0;$rc$1 = 1;
     break;
    }
   }
   $38 = $31 & 2048;
   $39 = ($38|0)==(0);
   do {
    if ($39) {
     $40 = (($p) + 56|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if (!($42)) {
      $43 = (_multiSelectOrderBy($pParse,$p,$pDest)|0);
      $$0 = $43;
      STACKTOP = sp;return ($$0|0);
     }
     $44 = (($p) + 4|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     if ((($46|0) == 115) | (($46|0) == 117)) {
      $113 = ($114<<24>>24)==(1);
      if ($113) {
       $115 = (($dest) + 4|0);
       $116 = HEAP32[$115>>2]|0;
       $unionTab$0 = $116;
      } else {
       $117 = (($pParse) + 72|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($118) + 1)|0;
       HEAP32[$117>>2] = $119;
       $120 = (_sqlite3VdbeAddOp2($17,55,$118,0)|0);
       $121 = (($p) + 16|0);
       HEAP32[$121>>2] = $120;
       $122 = (_findRightmost($p)|0);
       $123 = (($122) + 6|0);
       $124 = HEAP16[$123>>1]|0;
       $125 = $124&65535;
       $126 = $125 | 8;
       $127 = $126&65535;
       HEAP16[$123>>1] = $127;
       $unionTab$0 = $118;
      }
      _sqlite3SelectDestInit($uniondest,1,$unionTab$0);
      $128 = (($pParse) + 472|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (_sqlite3Select($pParse,$2,$uniondest)|0);
      $131 = ($130|0)==(0);
      if (!($131)) {
       $pDelete$1 = 0;$rc$1 = $130;
       break L1;
      }
      $132 = HEAP8[$44>>0]|0;
      $133 = ($132<<24>>24)==(117);
      $$ = $133 ? 2 : 1;
      HEAP32[$1>>2] = 0;
      $134 = (($p) + 68|0);
      $135 = HEAP32[$134>>2]|0;
      HEAP32[$134>>2] = 0;
      $136 = (($p) + 72|0);
      $137 = HEAP32[$136>>2]|0;
      HEAP32[$136>>2] = 0;
      HEAP8[$uniondest>>0] = $$;
      $138 = HEAP32[$128>>2]|0;
      $139 = (_sqlite3Select($pParse,$p,$uniondest)|0);
      $140 = HEAP32[$40>>2]|0;
      _sqlite3ExprListDelete($0,$140);
      $141 = HEAP32[$1>>2]|0;
      HEAP32[$1>>2] = $2;
      HEAP32[$40>>2] = 0;
      $142 = HEAP8[$44>>0]|0;
      $143 = ($142<<24>>24)==(115);
      if ($143) {
       $144 = (($2) + 32|0);
       $145 = $144;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $148 = (($145) + 4)|0;
       $149 = $148;
       $150 = HEAP32[$149>>2]|0;
       $151 = (($p) + 32|0);
       $152 = $151;
       $153 = $152;
       $154 = HEAP32[$153>>2]|0;
       $155 = (($152) + 4)|0;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (_i64Add(($154|0),($157|0),($147|0),($150|0))|0);
       $159 = tempRet0;
       $160 = $151;
       $161 = $160;
       HEAP32[$161>>2] = $158;
       $162 = (($160) + 4)|0;
       $163 = $162;
       HEAP32[$163>>2] = $159;
      }
      $164 = HEAP32[$134>>2]|0;
      _sqlite3ExprDelete($0,$164);
      HEAP32[$134>>2] = $135;
      HEAP32[$136>>2] = $137;
      $165 = (($p) + 8|0);
      HEAP32[$165>>2] = 0;
      $166 = (($p) + 12|0);
      HEAP32[$166>>2] = 0;
      $167 = HEAP8[$dest>>0]|0;
      if ((($167<<24>>24) == 5)) {
       $pFirst$0 = $p;
       while(1) {
        $168 = (($pFirst$0) + 60|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ($169|0)==(0|0);
        if ($170) {
         break;
        } else {
         $pFirst$0 = $169;
        }
       }
       $171 = HEAP32[$pFirst$0>>2]|0;
       _generateColumnNames($pParse,0,$171);
      } else if ((($167<<24>>24) == 1)) {
       $$pre$phiZ2D = $44;$iSub1$0 = $129;$iSub2$0 = $138;$pDelete$0 = $141;$rc$0 = $139;
       break;
      }
      $$idx5 = (($17) + 24|0);
      $$idx5$val = HEAP32[$$idx5>>2]|0;
      $172 = (_sqlite3VdbeMakeLabel($$idx5$val)|0);
      $$idx4$val = HEAP32[$$idx5>>2]|0;
      $173 = (_sqlite3VdbeMakeLabel($$idx4$val)|0);
      _computeLimitRegisters($pParse,$p,$172);
      (_sqlite3VdbeAddOp2($17,105,$unionTab$0,$172)|0);
      $$idx = (($17) + 32|0);
      $$idx$val = HEAP32[$$idx>>2]|0;
      $174 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
      $175 = HEAP32[$$pre$phi16Z2D>>2]|0;
      _selectInnerLoop($pParse,$p,$175,$unionTab$0,0,0,$dest,$173,$172);
      _sqlite3VdbeResolveLabel($17,$173);
      (_sqlite3VdbeAddOp2($17,9,$unionTab$0,$174)|0);
      _sqlite3VdbeResolveLabel($17,$172);
      (_sqlite3VdbeAddOp2($17,58,$unionTab$0,0)|0);
      $$pre$phiZ2D = $44;$iSub1$0 = $129;$iSub2$0 = $138;$pDelete$0 = $141;$rc$0 = $139;
      break;
     } else if ((($46|0) == 116)) {
      $47 = (($p) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($2) + 8|0);
      HEAP32[$49>>2] = $48;
      $50 = (($p) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($2) + 12|0);
      HEAP32[$52>>2] = $51;
      $53 = (($p) + 68|0);
      $54 = HEAP32[$53>>2]|0;
      HEAP32[$10>>2] = $54;
      $55 = (($p) + 72|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($2) + 72|0);
      HEAP32[$57>>2] = $56;
      $58 = (($pParse) + 472|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (_sqlite3Select($pParse,$2,$dest)|0);
      HEAP32[$53>>2] = 0;
      HEAP32[$55>>2] = 0;
      $61 = ($60|0)==(0);
      if (!($61)) {
       $pDelete$1 = 0;$rc$1 = $60;
       break L1;
      }
      HEAP32[$1>>2] = 0;
      $62 = HEAP32[$49>>2]|0;
      HEAP32[$47>>2] = $62;
      $63 = HEAP32[$52>>2]|0;
      HEAP32[$50>>2] = $63;
      $64 = ($62|0)==(0);
      if ($64) {
       $addr$0 = 0;
      } else {
       $65 = (_sqlite3VdbeAddOp1($17,135,$62)|0);
       $addr$0 = $65;
      }
      $66 = HEAP32[$58>>2]|0;
      $67 = (_sqlite3Select($pParse,$p,$dest)|0);
      $68 = HEAP32[$1>>2]|0;
      HEAP32[$1>>2] = $2;
      $69 = (($2) + 32|0);
      $70 = $69;
      $71 = $70;
      $72 = HEAP32[$71>>2]|0;
      $73 = (($70) + 4)|0;
      $74 = $73;
      $75 = HEAP32[$74>>2]|0;
      $76 = (($p) + 32|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (_i64Add(($79|0),($82|0),($72|0),($75|0))|0);
      $84 = tempRet0;
      $85 = $76;
      $86 = $85;
      HEAP32[$86>>2] = $83;
      $87 = (($85) + 4)|0;
      $88 = $87;
      HEAP32[$88>>2] = $84;
      $89 = HEAP32[$10>>2]|0;
      $90 = ($89|0)==(0|0);
      if (!($90)) {
       $91 = (_sqlite3ExprIsInteger($89,$nLimit)|0);
       $92 = ($91|0)!=(0);
       $93 = HEAP32[$nLimit>>2]|0;
       $94 = ($93|0)>(0);
       $or$cond = $92 & $94;
       if ($or$cond) {
        $95 = $76;
        $96 = $95;
        $97 = HEAP32[$96>>2]|0;
        $98 = (($95) + 4)|0;
        $99 = $98;
        $100 = HEAP32[$99>>2]|0;
        $101 = ($93|0)<(0);
        $102 = $101 << 31 >> 31;
        $103 = ($100>>>0)>($102>>>0);
        $104 = ($100|0)==($102|0);
        $105 = ($97>>>0)>($93>>>0);
        $106 = $104 & $105;
        $107 = $103 | $106;
        if ($107) {
         $108 = $76;
         $109 = $108;
         HEAP32[$109>>2] = $93;
         $110 = (($108) + 4)|0;
         $111 = $110;
         HEAP32[$111>>2] = $102;
        }
       }
      }
      $112 = ($addr$0|0)==(0);
      if ($112) {
       $$pre$phiZ2D = $44;$iSub1$0 = $59;$iSub2$0 = $66;$pDelete$0 = $68;$rc$0 = $67;
       break;
      }
      _sqlite3VdbeJumpHere($17,$addr$0);
      $$pre$phiZ2D = $44;$iSub1$0 = $59;$iSub2$0 = $66;$pDelete$0 = $68;$rc$0 = $67;
      break;
     } else {
      $176 = (($pParse) + 72|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($177) + 1)|0;
      $179 = (($177) + 2)|0;
      HEAP32[$176>>2] = $179;
      $180 = (_sqlite3VdbeAddOp2($17,55,$177,0)|0);
      $181 = (($p) + 16|0);
      HEAP32[$181>>2] = $180;
      $182 = (_findRightmost($p)|0);
      $183 = (($182) + 6|0);
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = $185 | 8;
      $187 = $186&65535;
      HEAP16[$183>>1] = $187;
      _sqlite3SelectDestInit($intersectdest,1,$177);
      $188 = (($pParse) + 472|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = (_sqlite3Select($pParse,$2,$intersectdest)|0);
      $191 = ($190|0)==(0);
      if (!($191)) {
       $pDelete$1 = 0;$rc$1 = $190;
       break L1;
      }
      $192 = (_sqlite3VdbeAddOp2($17,55,$178,0)|0);
      $193 = (($p) + 20|0);
      HEAP32[$193>>2] = $192;
      HEAP32[$1>>2] = 0;
      $194 = (($p) + 68|0);
      $195 = HEAP32[$194>>2]|0;
      HEAP32[$194>>2] = 0;
      $196 = (($p) + 72|0);
      $197 = HEAP32[$196>>2]|0;
      HEAP32[$196>>2] = 0;
      $198 = (($intersectdest) + 4|0);
      HEAP32[$198>>2] = $178;
      $199 = HEAP32[$188>>2]|0;
      $200 = (_sqlite3Select($pParse,$p,$intersectdest)|0);
      $201 = HEAP32[$1>>2]|0;
      HEAP32[$1>>2] = $2;
      $202 = (($p) + 32|0);
      $203 = $202;
      $204 = $203;
      $205 = HEAP32[$204>>2]|0;
      $206 = (($203) + 4)|0;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($2) + 32|0);
      $210 = $209;
      $211 = $210;
      $212 = HEAP32[$211>>2]|0;
      $213 = (($210) + 4)|0;
      $214 = $213;
      $215 = HEAP32[$214>>2]|0;
      $216 = ($208>>>0)>($215>>>0);
      $217 = ($208|0)==($215|0);
      $218 = ($205>>>0)>($212>>>0);
      $219 = $217 & $218;
      $220 = $216 | $219;
      if ($220) {
       $221 = $202;
       $222 = $221;
       HEAP32[$222>>2] = $212;
       $223 = (($221) + 4)|0;
       $224 = $223;
       HEAP32[$224>>2] = $215;
      }
      $225 = HEAP32[$194>>2]|0;
      _sqlite3ExprDelete($0,$225);
      HEAP32[$194>>2] = $195;
      HEAP32[$196>>2] = $197;
      $226 = HEAP8[$dest>>0]|0;
      $227 = ($226<<24>>24)==(5);
      if ($227) {
       $pFirst8$0 = $p;
       while(1) {
        $228 = (($pFirst8$0) + 60|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ($229|0)==(0|0);
        if ($230) {
         break;
        } else {
         $pFirst8$0 = $229;
        }
       }
       $231 = HEAP32[$pFirst8$0>>2]|0;
       _generateColumnNames($pParse,0,$231);
      }
      $$idx3 = (($17) + 24|0);
      $$idx3$val = HEAP32[$$idx3>>2]|0;
      $232 = (_sqlite3VdbeMakeLabel($$idx3$val)|0);
      $$idx2$val = HEAP32[$$idx3>>2]|0;
      $233 = (_sqlite3VdbeMakeLabel($$idx2$val)|0);
      _computeLimitRegisters($pParse,$p,$232);
      (_sqlite3VdbeAddOp2($17,105,$177,$232)|0);
      $234 = (_sqlite3GetTempReg($pParse)|0);
      $235 = (_sqlite3VdbeAddOp2($17,98,$177,$234)|0);
      (_sqlite3VdbeAddOp4Int($17,65,$178,$233,$234,0)|0);
      _sqlite3ReleaseTempReg($pParse,$234);
      $236 = HEAP32[$$pre$phi16Z2D>>2]|0;
      _selectInnerLoop($pParse,$p,$236,$177,0,0,$dest,$233,$232);
      _sqlite3VdbeResolveLabel($17,$233);
      (_sqlite3VdbeAddOp2($17,9,$177,$235)|0);
      _sqlite3VdbeResolveLabel($17,$232);
      (_sqlite3VdbeAddOp2($17,58,$178,0)|0);
      (_sqlite3VdbeAddOp2($17,58,$177,0)|0);
      $$pre$phiZ2D = $44;$iSub1$0 = $189;$iSub2$0 = $199;$pDelete$0 = $201;$rc$0 = $200;
      break;
     }
    } else {
     _generateWithRecursiveQuery($pParse,$p,$dest);
     $$pre = (($p) + 4|0);
     $$pre$phiZ2D = $$pre;$iSub1$0 = 0;$iSub2$0 = 0;$pDelete$0 = 0;$rc$0 = 0;
    }
   } while(0);
   $237 = HEAP8[$$pre$phiZ2D>>0]|0;
   $238 = $237&255;
   $239 = ($237<<24>>24)!=(116);
   $240 = $239&1;
   _explainComposite($pParse,$238,$iSub1$0,$iSub2$0,$240);
   $241 = HEAP16[$29>>1]|0;
   $242 = $241 & 8;
   $243 = ($242<<16>>16)==(0);
   if ($243) {
    $pDelete$1 = $pDelete$0;$rc$1 = $rc$0;
   } else {
    $244 = HEAP32[$$pre$phi16Z2D>>2]|0;
    $245 = HEAP32[$244>>2]|0;
    $246 = (_sqlite3KeyInfoAlloc($0,$245,1)|0);
    $247 = ($246|0)==(0|0);
    if ($247) {
     $pDelete$1 = $pDelete$0;$rc$1 = 7;
    } else {
     $248 = ($245|0)>(0);
     if ($248) {
      $249 = (($246) + 20|0);
      $250 = (($0) + 8|0);
      $apColl$010 = $249;$i$09 = 0;
      while(1) {
       $252 = (_multiSelectCollSeq($pParse,$p,$i$09)|0);
       HEAP32[$apColl$010>>2] = $252;
       $253 = ($252|0)==(0|0);
       if ($253) {
        $254 = HEAP32[$250>>2]|0;
        HEAP32[$apColl$010>>2] = $254;
       }
       $255 = (($i$09) + 1)|0;
       $256 = (($apColl$010) + 4|0);
       $exitcond = ($255|0)==($245|0);
       if ($exitcond) {
        break;
       } else {
        $apColl$010 = $256;$i$09 = $255;
       }
      }
     }
     $251 = ($p|0)==(0|0);
     if (!($251)) {
      $pLoop$08 = $p;
      while(1) {
       $i$16 = 0;
       while(1) {
        $257 = ((($pLoop$08) + ($i$16<<2)|0) + 16|0);
        $258 = HEAP32[$257>>2]|0;
        $259 = ($258|0)<(0);
        if ($259) {
         break;
        }
        _sqlite3VdbeChangeP2($17,$258,$245);
        $260 = (_sqlite3KeyInfoRef($246)|0);
        _sqlite3VdbeChangeP4($17,$258,$260,-6);
        HEAP32[$257>>2] = -1;
        $261 = (($i$16) + 1)|0;
        $262 = ($261|0)<(2);
        if ($262) {
         $i$16 = $261;
        } else {
         break;
        }
       }
       $263 = (($pLoop$08) + 60|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = ($264|0)==(0|0);
       if ($265) {
        break;
       } else {
        $pLoop$08 = $264;
       }
      }
     }
     _sqlite3KeyInfoUnref($246);
     $pDelete$1 = $pDelete$0;$rc$1 = $rc$0;
    }
   }
  } else {
   $6 = (($p) + 4|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (_selectOpName($8)|0);
   HEAP32[$vararg_buffer>>2] = $9;
   _sqlite3ErrorMsg($pParse,25040,$vararg_buffer);
   $pDelete$1 = 0;$rc$1 = 1;
  }
 } while(0);
 $266 = (($dest) + 8|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (($pDest) + 8|0);
 HEAP32[$268>>2] = $267;
 $269 = (($dest) + 12|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (($pDest) + 12|0);
 HEAP32[$271>>2] = $270;
 _sqlite3SelectDelete($0,$pDelete$1);
 $$0 = $rc$1;
 STACKTOP = sp;return ($$0|0);
}
function _keyInfoFromExprList($pParse,$pList) {
 $pParse = $pParse|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $i$02 = 0, $or$cond = 0, $pColl$0 = 0, $pItem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = HEAP32[$pList>>2]|0;
 $2 = (_sqlite3KeyInfoAlloc($0,$1,1)|0);
 $3 = ($2|0)!=(0|0);
 $4 = ($1|0)>(0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  STACKTOP = sp;return ($2|0);
 }
 $5 = (($pList) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 8|0);
 $8 = (($2) + 16|0);
 $i$02 = 0;$pItem$01 = $6;
 while(1) {
  $9 = HEAP32[$pItem$01>>2]|0;
  $10 = (_sqlite3ExprCollSeq($pParse,$9)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = HEAP32[$7>>2]|0;
   $pColl$0 = $12;
  } else {
   $pColl$0 = $10;
  }
  $13 = ((($2) + ($i$02<<2)|0) + 20|0);
  HEAP32[$13>>2] = $pColl$0;
  $14 = (($pItem$01) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = HEAP32[$8>>2]|0;
  $17 = (($16) + ($i$02)|0);
  HEAP8[$17>>0] = $15;
  $18 = (($i$02) + 1)|0;
  $19 = (($pItem$01) + 20|0);
  $exitcond = ($18|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $18;$pItem$01 = $19;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _computeLimitRegisters($pParse,$p,$iBreak) {
 $pParse = $pParse|0;
 $p = $p|0;
 $iBreak = $iBreak|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (($p) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 _sqlite3ExprCacheClear($pParse);
 $3 = (($p) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 HEAP32[$0>>2] = $8;
 $9 = (_sqlite3GetVdbe($pParse)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = (_sqlite3ExprIsInteger($10,$n)|0);
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $34 = HEAP32[$3>>2]|0;
   _sqlite3ExprCode($pParse,$34,$8);
   (_sqlite3VdbeAddOp1($9,38,$8)|0);
   (_sqlite3VdbeAddOp2($9,135,$8,$iBreak)|0);
  } else {
   $13 = HEAP32[$n>>2]|0;
   (_sqlite3VdbeAddOp2($9,25,$13,$8)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    (_sqlite3VdbeAddOp2($9,16,0,$iBreak)|0);
    break;
   }
   $15 = ($13|0)>(-1);
   if ($15) {
    $16 = (($p) + 32|0);
    $17 = $16;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($17) + 4)|0;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = ($13|0)<(0);
    $24 = $23 << 31 >> 31;
    $25 = ($22>>>0)>($24>>>0);
    $26 = ($22|0)==($24|0);
    $27 = ($19>>>0)>($13>>>0);
    $28 = $26 & $27;
    $29 = $25 | $28;
    if ($29) {
     $30 = $16;
     $31 = $30;
     HEAP32[$31>>2] = $13;
     $32 = (($30) + 4)|0;
     $33 = $32;
     HEAP32[$33>>2] = $24;
    }
   }
  }
 } while(0);
 $35 = (($p) + 72|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$6>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$6>>2] = $39;
 $40 = (($p) + 12|0);
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[$6>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$6>>2] = $42;
 _sqlite3ExprCode($pParse,$36,$39);
 (_sqlite3VdbeAddOp1($9,38,$39)|0);
 $43 = (_sqlite3VdbeAddOp1($9,132,$39)|0);
 (_sqlite3VdbeAddOp2($9,25,0,$39)|0);
 _sqlite3VdbeJumpHere($9,$43);
 $44 = (($38) + 2)|0;
 (_sqlite3VdbeAddOp3($9,89,$8,$39,$44)|0);
 $45 = (_sqlite3VdbeAddOp1($9,132,$8)|0);
 (_sqlite3VdbeAddOp2($9,25,-1,$44)|0);
 _sqlite3VdbeJumpHere($9,$45);
 STACKTOP = sp;return;
}
function _sqlite3WhereOutputRowCount($pWInfo$0$6$val) {
 $pWInfo$0$6$val = $pWInfo$0$6$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3LogEstToInt($pWInfo$0$6$val)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3WhereIsDistinct($pWInfo$0$11$val) {
 $pWInfo$0$11$val = $pWInfo$0$11$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pWInfo$0$11$val&255;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3WhereIsOrdered($pWInfo$0$8$val) {
 $pWInfo$0$8$val = $pWInfo$0$8$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWInfo$0$8$val<<24>>24)!=(0);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _selectInnerLoop($pParse,$p,$pEList,$srcTab,$pOrderBy,$pDistinct,$pDest,$iContinue,$iBreak) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pEList = $pEList|0;
 $srcTab = $srcTab|0;
 $pOrderBy = $pOrderBy|0;
 $pDistinct = $pDistinct|0;
 $pDest = $pDest|0;
 $iContinue = $iContinue|0;
 $iBreak = $iBreak|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addrTest$02$ph = 0, $exitcond = 0, $exitcond15 = 0, $exitcond16 = 0, $i$013 = 0;
 var $i$18 = 0, $i$27 = 0, $or$cond = 0, $phitmp = 0, $phitmp6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$pDest>>0]|0;
 $3 = $2&255;
 $4 = (($pDest) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($pDistinct|0)==(0|0);
 if ($6) {
  $10 = 1;
 } else {
  $7 = (($pDistinct) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $phitmp6 = ($8<<24>>24)==(0);
  $10 = $phitmp6;
 }
 $9 = ($pOrderBy|0)==(0|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($p) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  _codeOffset($1,$12,$iContinue);
 }
 $13 = HEAP32[$pEList>>2]|0;
 $14 = (($pDest) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (($pParse) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$14>>2] = $19;
  $20 = HEAP32[$17>>2]|0;
  $21 = (($20) + ($13))|0;
  HEAP32[$17>>2] = $21;
 } else {
  $22 = (($15) + ($13))|0;
  $23 = (($pParse) + 76|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)>($24|0);
  if ($25) {
   $26 = (($24) + ($13))|0;
   HEAP32[$23>>2] = $26;
  }
 }
 $27 = (($pDest) + 12|0);
 HEAP32[$27>>2] = $13;
 $28 = HEAP32[$14>>2]|0;
 $29 = ($srcTab|0)>(-1);
 do {
  if ($29) {
   $30 = ($13|0)>(0);
   if ($30) {
    $i$013 = 0;
    while(1) {
     $31 = (($i$013) + ($28))|0;
     (_sqlite3VdbeAddOp3($1,46,$srcTab,$i$013,$31)|0);
     $32 = (($i$013) + 1)|0;
     $exitcond16 = ($32|0)==($13|0);
     if ($exitcond16) {
      break;
     } else {
      $i$013 = $32;
     }
    }
   }
  } else {
   if ((($2<<24>>24) == 5)) {
    $34 = 1;
   } else if ((($2<<24>>24) == 3)) {
    break;
   } else {
    $33 = ($2<<24>>24)==(9);
    $phitmp = $33&1;
    $34 = $phitmp;
   }
   _sqlite3ExprCodeExprList($pParse,$pEList,$28,$34);
  }
 } while(0);
 if (!($10)) {
  $35 = (($pDistinct) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  if ((($37|0) == 1)) {
   $61 = (($pDistinct) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   _sqlite3VdbeChangeToNoop($1,$62);
  } else if ((($37|0) == 2)) {
   $38 = (($pParse) + 76|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1)|0;
   $41 = (($39) + ($13))|0;
   HEAP32[$38>>2] = $41;
   $42 = (($pDistinct) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   _sqlite3VdbeChangeToNoop($1,$43);
   $44 = HEAP32[$42>>2]|0;
   $45 = (_sqlite3VdbeGetOp($1,$44)|0);
   HEAP8[$45>>0] = 28;
   $46 = (($45) + 4|0);
   HEAP32[$46>>2] = 1;
   $47 = (($45) + 8|0);
   HEAP32[$47>>2] = $40;
   $$idx1 = (($1) + 32|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   $48 = (_sqlite3VdbeCurrentAddr($$idx1$val)|0);
   $49 = (($48) + ($13))|0;
   $50 = ($13|0)>(0);
   if ($50) {
    $51 = (($pEList) + 8|0);
    $52 = (($13) + -1)|0;
    $i$18 = 0;
    while(1) {
     $53 = HEAP32[$51>>2]|0;
     $54 = (($53) + (($i$18*20)|0)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (_sqlite3ExprCollSeq($pParse,$55)|0);
     $57 = ($i$18|0)<($52|0);
     $58 = (($i$18) + ($28))|0;
     $59 = (($i$18) + ($40))|0;
     if ($57) {
      (_sqlite3VdbeAddOp3($1,78,$58,$49,$59)|0);
     } else {
      (_sqlite3VdbeAddOp3($1,79,$58,$iContinue,$59)|0);
     }
     _sqlite3VdbeChangeP4($1,-1,$56,-4);
     _sqlite3VdbeChangeP5($1,-128);
     $60 = (($i$18) + 1)|0;
     $exitcond15 = ($60|0)==($13|0);
     if ($exitcond15) {
      $$pre$phiZ2D = $52;
      break;
     } else {
      $i$18 = $60;
     }
    }
   } else {
    $$pre = (($13) + -1)|0;
    $$pre$phiZ2D = $$pre;
   }
   (_sqlite3VdbeAddOp3($1,33,$28,$40,$$pre$phiZ2D)|0);
  } else {
   $63 = (($pDistinct) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   _codeDistinct($pParse,$64,$iContinue,$13,$28);
  }
  if ($9) {
   $65 = (($p) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   _codeOffset($1,$66,$iContinue);
  }
 }
 L40: do {
  switch ($3|0) {
  case 2:  {
   (_sqlite3VdbeAddOp3($1,108,$5,$28,$13)|0);
   label = 59;
   break;
  }
  case 6:  {
   if ($9) {
    _sqlite3ExprCodeMove($pParse,$28,$5,1);
    break L40;
   }
   _pushOntoSorter($pParse,$pOrderBy,$p,$28);
   STACKTOP = sp;return;
   break;
  }
  case 8: case 10: case 11:  {
   $68 = (_sqlite3GetTempReg($pParse)|0);
   (_sqlite3VdbeAddOp3($1,48,$28,$13,$68)|0);
   $69 = ($2<<24>>24)==(11);
   if ($69) {
    $$idx = (($1) + 32|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $70 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
    $71 = (($70) + 4)|0;
    $72 = (($5) + 1)|0;
    (_sqlite3VdbeAddOp4Int($1,66,$72,$71,$68,0)|0);
    (_sqlite3VdbeAddOp2($1,107,$72,$68)|0);
   }
   if ($9) {
    $73 = (_sqlite3GetTempReg($pParse)|0);
    (_sqlite3VdbeAddOp2($1,69,$5,$73)|0);
    (_sqlite3VdbeAddOp3($1,70,$5,$68,$73)|0);
    _sqlite3VdbeChangeP5($1,8);
    _sqlite3ReleaseTempReg($pParse,$73);
   } else {
    _pushOntoSorter($pParse,$pOrderBy,$p,$68);
   }
   _sqlite3ReleaseTempReg($pParse,$68);
   label = 59;
   break;
  }
  case 3:  {
   (_sqlite3VdbeAddOp2($1,25,1,$5)|0);
   label = 59;
   break;
  }
  case 7:  {
   $74 = (($pEList) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($pDest) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = (_sqlite3CompareAffinity($76,$78)|0);
   HEAP8[$77>>0] = $79;
   if ($9) {
    $80 = (_sqlite3GetTempReg($pParse)|0);
    (_sqlite3VdbeAddOp4($1,48,$28,1,$80,$77,1)|0);
    _sqlite3ExprCacheAffinityChange($pParse,$28,1);
    (_sqlite3VdbeAddOp2($1,107,$5,$80)|0);
    _sqlite3ReleaseTempReg($pParse,$80);
    break L40;
   }
   _pushOntoSorter($pParse,$pOrderBy,$p,$28);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $67 = (_sqlite3GetTempReg($pParse)|0);
   (_sqlite3VdbeAddOp3($1,48,$28,$13,$67)|0);
   (_sqlite3VdbeAddOp2($1,107,$5,$67)|0);
   _sqlite3ReleaseTempReg($pParse,$67);
   label = 59;
   break;
  }
  case 12: case 13:  {
   $84 = (($pDest) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = (_sqlite3GetTempReg($pParse)|0);
   $88 = (($86) + 2)|0;
   $89 = (_sqlite3GetTempRange($pParse,$88)|0);
   $90 = (($89) + ($86))|0;
   $91 = (($90) + 1)|0;
   $92 = ($2<<24>>24)==(13);
   if ($92) {
    $93 = (($5) + 1)|0;
    $94 = (_sqlite3VdbeAddOp4Int($1,66,$93,0,$28,$13)|0);
    (_sqlite3VdbeAddOp3($1,48,$28,$13,$91)|0);
    (_sqlite3VdbeAddOp2($1,107,$93,$91)|0);
    _sqlite3VdbeChangeP5($1,16);
    $addrTest$02$ph = $94;
   } else {
    (_sqlite3VdbeAddOp3($1,48,$28,$13,$91)|0);
    $addrTest$02$ph = 0;
   }
   $95 = ($86|0)>(0);
   if ($95) {
    $96 = (($85) + 8|0);
    $97 = (($28) + -1)|0;
    $i$27 = 0;
    while(1) {
     $98 = HEAP32[$96>>2]|0;
     $99 = ((($98) + (($i$27*20)|0)|0) + 16|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100&65535;
     $102 = (($97) + ($101))|0;
     $103 = (($i$27) + ($89))|0;
     (_sqlite3VdbeAddOp2($1,34,$102,$103)|0);
     $104 = (($i$27) + 1)|0;
     $exitcond = ($104|0)==($86|0);
     if ($exitcond) {
      break;
     } else {
      $i$27 = $104;
     }
    }
   }
   (_sqlite3VdbeAddOp2($1,68,$5,$90)|0);
   (_sqlite3VdbeAddOp3($1,48,$89,$88,$87)|0);
   (_sqlite3VdbeAddOp2($1,107,$5,$87)|0);
   $105 = ($addrTest$02$ph|0)==(0);
   if (!($105)) {
    _sqlite3VdbeJumpHere($1,$addrTest$02$ph);
   }
   _sqlite3ReleaseTempReg($pParse,$87);
   _sqlite3ReleaseTempRange($pParse,$89,$88);
   label = 59;
   break;
  }
  case 5: case 9:  {
   if (!($9)) {
    $81 = (_sqlite3GetTempReg($pParse)|0);
    (_sqlite3VdbeAddOp3($1,48,$28,$13,$81)|0);
    _pushOntoSorter($pParse,$pOrderBy,$p,$81);
    _sqlite3ReleaseTempReg($pParse,$81);
    STACKTOP = sp;return;
   }
   $82 = ($2<<24>>24)==(9);
   if ($82) {
    $83 = HEAP32[$4>>2]|0;
    (_sqlite3VdbeAddOp1($1,22,$83)|0);
    break L40;
   } else {
    (_sqlite3VdbeAddOp2($1,35,$28,$13)|0);
    _sqlite3ExprCacheAffinityChange($pParse,$28,$13);
    label = 59;
    break L40;
   }
   break;
  }
  default: {
   label = 59;
  }
  }
 } while(0);
 if ((label|0) == 59) {
  if (!($9)) {
   STACKTOP = sp;return;
  }
 }
 $106 = (($p) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0);
 if ($108) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp3($1,135,$107,$iBreak,-1)|0);
 STACKTOP = sp;return;
}
function _sqlite3WhereContinueLabel($pWInfo$0$14$val) {
 $pWInfo$0$14$val = $pWInfo$0$14$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pWInfo$0$14$val|0);
}
function _sqlite3WhereBreakLabel($pWInfo$0$15$val) {
 $pWInfo$0$15$val = $pWInfo$0$15$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pWInfo$0$15$val|0);
}
function _sqlite3ExprAnalyzeAggList($pNC,$pList) {
 $pNC = $pNC|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pItem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pList) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $i$02 = 0;$pItem$01 = $4;
 while(1) {
  $5 = HEAP32[$pItem$01>>2]|0;
  _sqlite3ExprAnalyzeAggregates($pNC,$5);
  $6 = (($i$02) + 1)|0;
  $7 = (($pItem$01) + 20|0);
  $8 = HEAP32[$pList>>2]|0;
  $9 = ($6|0)<($8|0);
  if ($9) {
   $i$02 = $6;$pItem$01 = $7;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3ExprAnalyzeAggregates($pNC,$pExpr) {
 $pNC = $pNC|0;
 $pExpr = $pExpr|0;
 var $0 = 0, $1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $w = sp;
 ;HEAP32[$w+0>>2]=0|0;HEAP32[$w+4>>2]=0|0;HEAP32[$w+8>>2]=0|0;HEAP32[$w+12>>2]=0|0;HEAP32[$w+16>>2]=0|0;
 HEAP32[$w>>2] = 176;
 $0 = (($w) + 4|0);
 HEAP32[$0>>2] = 177;
 $1 = (($w) + 20|0);
 HEAP32[$1>>2] = $pNC;
 (_sqlite3WalkExpr($w,$pExpr)|0);
 STACKTOP = sp;return;
}
function _explainTempTable($pParse,$zUsage) {
 $pParse = $pParse|0;
 $zUsage = $zUsage|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 454|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pParse) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pParse>>2]|0;
 HEAP32[$vararg_buffer>>2] = $zUsage;
 $6 = (_sqlite3MPrintf($5,25016,$vararg_buffer)|0);
 $7 = (($pParse) + 468|0);
 $8 = HEAP32[$7>>2]|0;
 (_sqlite3VdbeAddOp4($4,156,$8,0,0,$6,-1)|0);
 STACKTOP = sp;return;
}
function _sqlite3ExprCodeMove($pParse,$iFrom,$iTo,$nReg) {
 $pParse = $pParse|0;
 $iFrom = $iFrom|0;
 $iTo = $iTo|0;
 $nReg = $nReg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond4 = 0;
 var $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($nReg) + -1)|0;
 (_sqlite3VdbeAddOp3($1,32,$iFrom,$iTo,$2)|0);
 $3 = (($nReg) + ($iFrom))|0;
 $4 = (($iTo) - ($iFrom))|0;
 $5 = (($pParse) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>=($iFrom|0);
 $8 = ($6|0)<($3|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = (($4) + ($6))|0;
  HEAP32[$5>>2] = $9;
 }
 $10 = (($pParse) + 152|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>=($iFrom|0);
 $13 = ($11|0)<($3|0);
 $or$cond3 = $12 & $13;
 if ($or$cond3) {
  $14 = (($4) + ($11))|0;
  HEAP32[$10>>2] = $14;
 }
 $15 = (($pParse) + 172|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>=($iFrom|0);
 $18 = ($16|0)<($3|0);
 $or$cond4 = $17 & $18;
 if ($or$cond4) {
  $19 = (($4) + ($16))|0;
  HEAP32[$15>>2] = $19;
 }
 $20 = (($pParse) + 192|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>=($iFrom|0);
 $23 = ($21|0)<($3|0);
 $or$cond5 = $22 & $23;
 if ($or$cond5) {
  $24 = (($4) + ($21))|0;
  HEAP32[$20>>2] = $24;
 }
 $25 = (($pParse) + 212|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)>=($iFrom|0);
 $28 = ($26|0)<($3|0);
 $or$cond6 = $27 & $28;
 if ($or$cond6) {
  $29 = (($4) + ($26))|0;
  HEAP32[$25>>2] = $29;
 }
 $30 = (($pParse) + 232|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)>=($iFrom|0);
 $33 = ($31|0)<($3|0);
 $or$cond7 = $32 & $33;
 if ($or$cond7) {
  $34 = (($4) + ($31))|0;
  HEAP32[$30>>2] = $34;
 }
 $35 = (($pParse) + 252|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>=($iFrom|0);
 $38 = ($36|0)<($3|0);
 $or$cond8 = $37 & $38;
 if ($or$cond8) {
  $39 = (($4) + ($36))|0;
  HEAP32[$35>>2] = $39;
 }
 $40 = (($pParse) + 272|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)>=($iFrom|0);
 $43 = ($41|0)<($3|0);
 $or$cond9 = $42 & $43;
 if ($or$cond9) {
  $44 = (($4) + ($41))|0;
  HEAP32[$40>>2] = $44;
 }
 $45 = (($pParse) + 292|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>=($iFrom|0);
 $48 = ($46|0)<($3|0);
 $or$cond10 = $47 & $48;
 if ($or$cond10) {
  $49 = (($4) + ($46))|0;
  HEAP32[$45>>2] = $49;
 }
 $50 = (($pParse) + 312|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)>=($iFrom|0);
 $53 = ($51|0)<($3|0);
 $or$cond11 = $52 & $53;
 if (!($or$cond11)) {
  STACKTOP = sp;return;
 }
 $54 = (($4) + ($51))|0;
 HEAP32[$50>>2] = $54;
 STACKTOP = sp;return;
}
function _updateAccumulator($pParse,$pAggInfo) {
 $pParse = $pParse|0;
 $pAggInfo = $pAggInfo|0;
 var $$idx = 0, $$idx$val = 0, $$not = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $addrHitTest$0 = 0, $addrNext$0 = 0, $i$011 = 0, $i$12 = 0, $j$05 = 0, $nArg$0 = 0, $or$cond = 0, $pC$01 = 0;
 var $pColl$1 = 0, $pF$010 = 0, $pItem$04 = 0, $regAgg$0 = 0, $regHit$09 = 0, $regHit$1 = 0, $regHit$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$pAggInfo>>0] = 1;
 $2 = (($pAggInfo) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = (($pAggInfo) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $$idx = (($1) + 24|0);
  $7 = (($pAggInfo) + 36|0);
  $8 = (($pParse) + 76|0);
  $i$011 = 0;$pF$010 = $6;$regHit$09 = 0;
  while(1) {
   $9 = HEAP32[$pF$010>>2]|0;
   $10 = (($9) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $nArg$0 = 0;$regAgg$0 = 0;
   } else {
    $13 = HEAP32[$11>>2]|0;
    $14 = (_sqlite3GetTempRange($pParse,$13)|0);
    _sqlite3ExprCodeExprList($pParse,$11,$14,1);
    $nArg$0 = $13;$regAgg$0 = $14;
   }
   $15 = (($pF$010) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)>(-1);
   if ($17) {
    $$idx$val = HEAP32[$$idx>>2]|0;
    $18 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
    $19 = HEAP32[$15>>2]|0;
    _codeDistinct($pParse,$19,$18,1,$regAgg$0);
    $addrNext$0 = $18;
   } else {
    $addrNext$0 = 0;
   }
   $20 = (($pF$010) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 2|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 & 32;
   $25 = ($24<<16>>16)==(0);
   if ($25) {
    $45 = $21;$regHit$2 = $regHit$09;
   } else {
    $26 = ($nArg$0|0)>(0);
    if ($26) {
     $27 = (($11) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $j$05 = 0;$pItem$04 = $28;
     while(1) {
      $29 = HEAP32[$pItem$04>>2]|0;
      $30 = (_sqlite3ExprCollSeq($pParse,$29)|0);
      $31 = (($j$05) + 1)|0;
      $32 = (($pItem$04) + 20|0);
      $33 = ($30|0)!=(0|0);
      $$not = $33 ^ 1;
      $34 = ($31|0)<($nArg$0|0);
      $or$cond = $34 & $$not;
      if ($or$cond) {
       $j$05 = $31;$pItem$04 = $32;
      } else {
       break;
      }
     }
     if ($33) {
      $pColl$1 = $30;
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $35 = HEAP32[$pParse>>2]|0;
     $36 = (($35) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $pColl$1 = $37;
    }
    $38 = ($regHit$09|0)==(0);
    if ($38) {
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)==(0);
     if ($40) {
      $regHit$1 = 0;
     } else {
      $41 = HEAP32[$8>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$8>>2] = $42;
      $regHit$1 = $42;
     }
    } else {
     $regHit$1 = $regHit$09;
    }
    (_sqlite3VdbeAddOp4($1,36,$regHit$1,0,0,$pColl$1,-4)|0);
    $$pre = HEAP32[$20>>2]|0;
    $45 = $$pre;$regHit$2 = $regHit$1;
   }
   $43 = (($pF$010) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   (_sqlite3VdbeAddOp4($1,10,0,$regAgg$0,$44,$45,-5)|0);
   $46 = $nArg$0&255;
   _sqlite3VdbeChangeP5($1,$46);
   _sqlite3ExprCacheAffinityChange($pParse,$regAgg$0,$nArg$0);
   _sqlite3ReleaseTempRange($pParse,$regAgg$0,$nArg$0);
   $47 = ($addrNext$0|0)==(0);
   if (!($47)) {
    _sqlite3VdbeResolveLabel($1,$addrNext$0);
    _sqlite3ExprCacheClear($pParse);
   }
   $48 = (($i$011) + 1)|0;
   $49 = (($pF$010) + 16|0);
   $50 = HEAP32[$2>>2]|0;
   $51 = ($48|0)<($50|0);
   if ($51) {
    $i$011 = $48;$pF$010 = $49;$regHit$09 = $regHit$2;
   } else {
    break;
   }
  }
  $52 = ($regHit$2|0)==(0);
  if ($52) {
   $addrHitTest$0 = 0;
  } else {
   $53 = (_sqlite3VdbeAddOp1($1,44,$regHit$2)|0);
   $addrHitTest$0 = $53;
  }
 } else {
  $addrHitTest$0 = 0;
 }
 _sqlite3ExprCacheClear($pParse);
 $54 = (($pAggInfo) + 36|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)>(0);
 if ($56) {
  $57 = (($pAggInfo) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  $i$12 = 0;$pC$01 = $58;
  while(1) {
   $59 = (($pC$01) + 20|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($pC$01) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   _sqlite3ExprCode($pParse,$60,$62);
   $63 = (($i$12) + 1)|0;
   $64 = (($pC$01) + 24|0);
   $65 = HEAP32[$54>>2]|0;
   $66 = ($63|0)<($65|0);
   if ($66) {
    $i$12 = $63;$pC$01 = $64;
   } else {
    break;
   }
  }
 }
 HEAP8[$pAggInfo>>0] = 0;
 _sqlite3ExprCacheClear($pParse);
 $67 = ($addrHitTest$0|0)==(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeJumpHere($1,$addrHitTest$0);
 STACKTOP = sp;return;
}
function _finalizeAggFunctions($pParse$0$2$val,$pAggInfo) {
 $pParse$0$2$val = $pParse$0$2$val|0;
 $pAggInfo = $pAggInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0;
 var $pF$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pAggInfo) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pAggInfo) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $i$02 = 0;$pF$01 = $4;
 while(1) {
  $5 = HEAP32[$pF$01>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($pF$01) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==(0|0);
  if ($10) {
   $14 = 0;
  } else {
   $11 = HEAP32[$7>>2]|0;
   $14 = $11;
  }
  $12 = (($pF$01) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  (_sqlite3VdbeAddOp4($pParse$0$2$val,136,$9,$14,0,$13,-5)|0);
  $15 = (($i$02) + 1)|0;
  $16 = (($pF$01) + 16|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ($15|0)<($17|0);
  if ($18) {
   $i$02 = $15;$pF$01 = $16;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _resetAccumulator($pParse,$pAggInfo) {
 $pParse = $pParse|0;
 $pAggInfo = $pAggInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pFunc$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pAggInfo) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pAggInfo) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (0 - ($5))|0;
 $7 = ($3|0)==($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($pAggInfo) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pAggInfo) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 (_sqlite3VdbeAddOp3($1,28,0,$9,$11)|0);
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($pAggInfo) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $i$02 = 0;$pFunc$01 = $15;
 while(1) {
  $16 = (($pFunc$01) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(-1);
  do {
   if ($18) {
    $19 = HEAP32[$pFunc$01>>2]|0;
    $20 = (($19) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$21>>2]|0;
     $24 = ($23|0)==(1);
     if ($24) {
      $25 = (_keyInfoFromExprList($pParse,$21)|0);
      $26 = HEAP32[$16>>2]|0;
      (_sqlite3VdbeAddOp4($1,55,$26,0,0,$25,-6)|0);
      break;
     }
    }
    _sqlite3ErrorMsg($pParse,24960,$vararg_buffer);
    HEAP32[$16>>2] = -1;
   }
  } while(0);
  $27 = (($i$02) + 1)|0;
  $28 = (($pFunc$01) + 16|0);
  $29 = HEAP32[$2>>2]|0;
  $30 = ($27|0)<($29|0);
  if ($30) {
   $i$02 = $27;$pFunc$01 = $28;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _isSimpleCount($p,$pAggInfo$0$11$val,$pAggInfo$0$12$val) {
 $p = $p|0;
 $pAggInfo$0$11$val = $pAggInfo$0$11$val|0;
 $pAggInfo$0$12$val = $pAggInfo$0$12$val|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[$p>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(1);
  if ($5) {
   $6 = (($p) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = (($7) + 28|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $13 = (($7) + 24|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($3) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($14) + 44|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19 & 16;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      $22 = HEAP8[$17>>0]|0;
      $23 = ($22<<24>>24)!=(-101);
      $24 = ($pAggInfo$0$12$val|0)==(0);
      $or$cond = $23 | $24;
      if ($or$cond) {
       $$0 = 0;
      } else {
       $25 = (($pAggInfo$0$11$val) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (($26) + 2|0);
       $28 = HEAP16[$27>>1]|0;
       $29 = $28 & 256;
       $30 = ($29<<16>>16)==(0);
       if ($30) {
        $$0 = 0;
       } else {
        $31 = (($17) + 4|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = $32 & 16;
        $34 = ($33|0)==(0);
        $$ = $34 ? $14 : 0;
        $$0 = $$;
       }
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _explainSimpleCount($pParse,$pTab,$pIdx) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $pIdx = $pIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 454|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$pParse>>2]|0;
 $4 = HEAP32[$pTab>>2]|0;
 $5 = ($pIdx|0)!=(0|0);
 $6 = $5 ? 24936 : 1728;
 if ($5) {
  $7 = HEAP32[$pIdx>>2]|0;
  $8 = $7;
 } else {
  $8 = 1728;
 }
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 $9 = (_sqlite3MPrintf($3,24912,$vararg_buffer)|0);
 $10 = (($pParse) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($pParse) + 468|0);
 $13 = HEAP32[$12>>2]|0;
 (_sqlite3VdbeAddOp4($11,156,$13,0,0,$9,-1)|0);
 STACKTOP = sp;return;
}
function _minMaxQuery($pAggInfo,$ppMinMax) {
 $pAggInfo = $pAggInfo|0;
 $ppMinMax = $ppMinMax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $eRet$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$ppMinMax>>2] = 0;
 $0 = (($pAggInfo) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1);
 do {
  if ($2) {
   $3 = (($pAggInfo) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $eRet$0 = 0;
   } else {
    $9 = HEAP32[$7>>2]|0;
    $10 = ($9|0)==(1);
    if ($10) {
     $11 = (($7) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = HEAP32[$12>>2]|0;
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(-100);
     if ($15) {
      $16 = (($5) + 8|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_sqlite3_stricmp($17,8472)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       HEAP32[$ppMinMax>>2] = $7;
       $eRet$0 = 1;
       break;
      }
      $20 = (_sqlite3_stricmp($17,8480)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       HEAP32[$ppMinMax>>2] = $7;
       $eRet$0 = 2;
      } else {
       $eRet$0 = 0;
      }
     } else {
      $eRet$0 = 0;
     }
    } else {
     $eRet$0 = 0;
    }
   }
  } else {
   $eRet$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($eRet$0|0);
}
function _generateSortTail($pParse,$p,$v,$nColumn,$pDest) {
 $pParse = $pParse|0;
 $p = $p|0;
 $v = $v|0;
 $nColumn = $nColumn|0;
 $pDest = $pDest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$0 = 0, $addr$0$in = 0, $exitcond = 0, $i$05 = 0, $pseudoTab$0 = 0, $regRowid$0 = 0, $v$idx$val = 0, $v$idx4 = 0;
 var $v$idx4$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $v$idx4 = (($v) + 24|0);
 $v$idx4$val = HEAP32[$v$idx4>>2]|0;
 $0 = (_sqlite3VdbeMakeLabel($v$idx4$val)|0);
 $v$idx$val = HEAP32[$v$idx4>>2]|0;
 $1 = (_sqlite3VdbeMakeLabel($v$idx$val)|0);
 $2 = (($p) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$pDest>>0]|0;
 $5 = $4&255;
 $6 = (($pDest) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3GetTempReg($pParse)|0);
 $11 = ($4<<24>>24)==(5);
 if ((($4<<24>>24) == 5) | (($4<<24>>24) == 9)) {
  $12 = (($pParse) + 72|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  (_sqlite3VdbeAddOp3($v,57,$13,$10,$nColumn)|0);
  $pseudoTab$0 = $13;$regRowid$0 = 0;
 } else {
  $15 = (_sqlite3GetTempReg($pParse)|0);
  $pseudoTab$0 = 0;$regRowid$0 = $15;
 }
 $16 = (($p) + 6|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & 64;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  $33 = (_sqlite3VdbeAddOp2($v,104,$9,$0)|0);
  $34 = (($p) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  _codeOffset($v,$35,$1);
  $36 = HEAP32[$3>>2]|0;
  $37 = (($36) + 1)|0;
  (_sqlite3VdbeAddOp3($v,46,$9,$37,$10)|0);
  $addr$0$in = $33;
 } else {
  $20 = (($pParse) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$20>>2] = $22;
  $23 = (($pParse) + 72|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$23>>2] = $25;
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 2)|0;
  (_sqlite3VdbeAddOp3($v,57,$24,$22,$27)|0);
  $28 = (_sqlite3VdbeAddOp2($v,103,$9,$0)|0);
  $29 = (($p) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  _codeOffset($v,$30,$1);
  (_sqlite3VdbeAddOp2($v,95,$9,$22)|0);
  $31 = HEAP32[$3>>2]|0;
  $32 = (($31) + 1)|0;
  (_sqlite3VdbeAddOp3($v,46,$24,$32,$10)|0);
  _sqlite3VdbeChangeP5($v,32);
  $addr$0$in = $28;
 }
 $addr$0 = (($addr$0$in) + 1)|0;
 do {
  if ((($5|0) == 6)) {
   _sqlite3ExprCodeMove($pParse,$10,$7,1);
  } else if ((($5|0) == 7)) {
   $40 = (($pDest) + 1|0);
   (_sqlite3VdbeAddOp4($v,48,$10,1,$regRowid$0,$40,1)|0);
   _sqlite3ExprCacheAffinityChange($pParse,$10,1);
   (_sqlite3VdbeAddOp2($v,107,$7,$regRowid$0)|0);
  } else if ((($5|0) == 8) | (($5|0) == 10)) {
   (_sqlite3VdbeAddOp2($v,69,$7,$regRowid$0)|0);
   (_sqlite3VdbeAddOp3($v,70,$7,$10,$regRowid$0)|0);
   _sqlite3VdbeChangeP5($v,8);
  } else {
   $38 = ($nColumn|0)>(0);
   if ($38) {
    $39 = (($pDest) + 8|0);
    $i$05 = 0;
    while(1) {
     $41 = HEAP32[$39>>2]|0;
     $42 = (($41) + ($i$05))|0;
     (_sqlite3VdbeAddOp3($v,46,$pseudoTab$0,$i$05,$42)|0);
     $43 = ($i$05|0)==(0);
     if ($43) {
      _sqlite3VdbeChangeP5($v,32);
     }
     $44 = (($i$05) + 1)|0;
     $exitcond = ($44|0)==($nColumn|0);
     if ($exitcond) {
      break;
     } else {
      $i$05 = $44;
     }
    }
   }
   if ($11) {
    $45 = (($pDest) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    (_sqlite3VdbeAddOp2($v,35,$46,$nColumn)|0);
    $47 = HEAP32[$45>>2]|0;
    _sqlite3ExprCacheAffinityChange($pParse,$47,$nColumn);
    break;
   } else {
    $48 = HEAP32[$6>>2]|0;
    (_sqlite3VdbeAddOp1($v,22,$48)|0);
    break;
   }
  }
 } while(0);
 _sqlite3ReleaseTempReg($pParse,$10);
 _sqlite3ReleaseTempReg($pParse,$regRowid$0);
 _sqlite3VdbeResolveLabel($v,$1);
 $49 = HEAP16[$16>>1]|0;
 $50 = $49 & 64;
 $51 = ($50<<16>>16)==(0);
 if ($51) {
  (_sqlite3VdbeAddOp2($v,9,$9,$addr$0)|0);
 } else {
  (_sqlite3VdbeAddOp2($v,5,$9,$addr$0)|0);
 }
 _sqlite3VdbeResolveLabel($v,$0);
 if (!((($4<<24>>24) == 5) | (($4<<24>>24) == 9))) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($v,58,$pseudoTab$0,0)|0);
 STACKTOP = sp;return;
}
function _generateColumnNames($pParse,$pTabList,$pEList) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pEList = $pEList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $iCol$0 = 0, $j$0$lcssa = 0, $j$01 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $zCol$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pParse>>2]|0;
 $3 = (($pParse) + 454|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($pParse) + 16|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 $9 = ($1|0)==(0|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + 64|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 HEAP8[$6>>0] = 1;
 $13 = (($2) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 32;
 $16 = ($15|0)==(0);
 $17 = HEAP32[$pEList>>2]|0;
 _sqlite3VdbeSetNumCols($1,$17);
 $18 = HEAP32[$pEList>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = (($pEList) + 8|0);
  $21 = ($pTabList|0)==(0|0);
  $22 = $14 & 96;
  $23 = ($22|0)==(0);
  $i$03 = 0;
  while(1) {
   $24 = HEAP32[$20>>2]|0;
   $25 = (($24) + (($i$03*20)|0)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   do {
    if (!($27)) {
     $28 = ((($24) + (($i$03*20)|0)|0) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0|0);
     if (!($30)) {
      _sqlite3VdbeSetColName($1,$i$03,0,$29,(-1));
      break;
     }
     $31 = HEAP8[$26>>0]|0;
     if ((($31<<24>>24) == -100) | (($31<<24>>24) == -102)) {
      if (!($21)) {
       $32 = (($26) + 32|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = $33 << 16 >> 16;
       $35 = HEAP32[$pTabList>>2]|0;
       $36 = ($35|0)>(0);
       L22: do {
        if ($36) {
         $37 = (($26) + 28|0);
         $38 = HEAP32[$37>>2]|0;
         $j$01 = 0;
         while(1) {
          $41 = ((($pTabList) + (($j$01*72)|0)|0) + 48|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($42|0)==($38|0);
          $40 = (($j$01) + 1)|0;
          if ($43) {
           $j$0$lcssa = $j$01;
           break L22;
          }
          $39 = ($40|0)<($35|0);
          if ($39) {
           $j$01 = $40;
          } else {
           $j$0$lcssa = $40;
           break;
          }
         }
        } else {
         $j$0$lcssa = 0;
        }
       } while(0);
       $44 = ((($pTabList) + (($j$0$lcssa*72)|0)|0) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($33<<16>>16)<(0);
       if ($46) {
        $47 = (($45) + 36|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48 << 16 >> 16;
        $iCol$0 = $49;
       } else {
        $iCol$0 = $34;
       }
       $50 = ($iCol$0|0)<(0);
       if ($50) {
        $zCol$0 = 10144;
       } else {
        $51 = (($45) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($52) + (($iCol$0*24)|0)|0);
        $54 = HEAP32[$53>>2]|0;
        $zCol$0 = $54;
       }
       if ($23) {
        $55 = ((($24) + (($i$03*20)|0)|0) + 8|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = (_sqlite3DbStrDup($2,$56)|0);
        _sqlite3VdbeSetColName($1,$i$03,0,$57,145);
        break;
       }
       if ($16) {
        _sqlite3VdbeSetColName($1,$i$03,0,$zCol$0,(-1));
        break;
       } else {
        $58 = HEAP32[$45>>2]|0;
        HEAP32[$vararg_buffer>>2] = $58;
        $vararg_ptr1 = (($vararg_buffer) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $zCol$0;
        $59 = (_sqlite3MPrintf($2,17600,$vararg_buffer)|0);
        _sqlite3VdbeSetColName($1,$i$03,0,$59,145);
        break;
       }
      }
     }
     $60 = ((($24) + (($i$03*20)|0)|0) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = (($i$03) + 1)|0;
      HEAP32[$vararg_buffer2>>2] = $63;
      $64 = (_sqlite3MPrintf($2,24896,$vararg_buffer2)|0);
      $66 = $64;
     } else {
      $65 = (_sqlite3DbStrDup($2,$61)|0);
      $66 = $65;
     }
     _sqlite3VdbeSetColName($1,$i$03,0,$66,145);
    }
   } while(0);
   $67 = (($i$03) + 1)|0;
   $68 = HEAP32[$pEList>>2]|0;
   $69 = ($67|0)<($68|0);
   if ($69) {
    $i$03 = $67;
   } else {
    break;
   }
  }
 }
 _generateColumnTypes($pParse,$pTabList,$pEList);
 STACKTOP = sp;return;
}
function _generateColumnTypes($pParse,$pTabList,$pEList) {
 $pParse = $pParse|0;
 $pTabList = $pTabList|0;
 $pEList = $pEList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $sNC = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sNC = sp;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($sNC) + 4|0);
 HEAP32[$2>>2] = $pTabList;
 HEAP32[$sNC>>2] = $pParse;
 $3 = HEAP32[$pEList>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($pEList) + 8|0);
 $i$01 = 0;
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + (($i$01*20)|0)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_columnTypeImpl($sNC,$8,0)|0);
  _sqlite3VdbeSetColName($1,$i$01,1,$9,(-1));
  $10 = (($i$01) + 1)|0;
  $11 = HEAP32[$pEList>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $i$01 = $10;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _codeOffset($v,$iOffset,$iContinue) {
 $v = $v|0;
 $iOffset = $iOffset|0;
 $iContinue = $iContinue|0;
 var $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($iOffset|0)<(1);
 $1 = ($iContinue|0)==(0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 (_sqlite3VdbeAddOp2($v,37,$iOffset,-1)|0);
 $2 = (_sqlite3VdbeAddOp1($v,134,$iOffset)|0);
 (_sqlite3VdbeAddOp2($v,16,0,$iContinue)|0);
 _sqlite3VdbeJumpHere($v,$2);
 STACKTOP = sp;return;
}
function _codeDistinct($pParse,$iTab,$addrRepeat,$N,$iMem) {
 $pParse = $pParse|0;
 $iTab = $iTab|0;
 $addrRepeat = $addrRepeat|0;
 $N = $N|0;
 $iMem = $iMem|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3GetTempReg($pParse)|0);
 (_sqlite3VdbeAddOp4Int($1,66,$iTab,$addrRepeat,$iMem,$N)|0);
 (_sqlite3VdbeAddOp3($1,48,$iMem,$N,$2)|0);
 (_sqlite3VdbeAddOp2($1,107,$iTab,$2)|0);
 _sqlite3ReleaseTempReg($pParse,$2);
 STACKTOP = sp;return;
}
function _analyzeAggregate($pWalker,$pExpr) {
 $pWalker = $pWalker|0;
 $pExpr = $pExpr|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$011 = 0, $i$1$lcssa = 0, $i$115 = 0, $i$2 = 0, $j$02 = 0, $k$0$lcssa = 0, $k$04 = 0, $k$1 = 0, $pCol$05 = 0, $pItem$010 = 0, $pItem1$016 = 0, $pTerm$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWalker) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP8[$pExpr>>0]|0;
 $8 = $7&255;
 if ((($8|0) == 154) | (($8|0) == 156)) {
  $9 = ($4|0)==(0|0);
  if ($9) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $10 = HEAP32[$4>>2]|0;
  $11 = ($10|0)>(0);
  if (!($11)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = (($4) + 8|0);
  $13 = (($pExpr) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $i$011 = 0;$pItem$010 = $12;
  while(1) {
   $15 = (($pItem$010) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    break;
   }
   $82 = (($i$011) + 1)|0;
   $83 = (($pItem$010) + 72|0);
   $84 = ($82|0)<($10|0);
   if ($84) {
    $i$011 = $82;$pItem$010 = $83;
   } else {
    $$0 = 1;
    label = 38;
    break;
   }
  }
  if ((label|0) == 38) {
   STACKTOP = sp;return ($$0|0);
  }
  $18 = (($6) + 28|0);
  $19 = (($6) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)>(0);
  L15: do {
   if ($21) {
    $22 = HEAP32[$18>>2]|0;
    $23 = (($pExpr) + 32|0);
    $k$04 = 0;$pCol$05 = $22;
    while(1) {
     $24 = (($pCol$05) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==($14|0);
     if ($26) {
      $27 = (($pCol$05) + 8|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = HEAP16[$23>>1]|0;
      $30 = $29 << 16 >> 16;
      $31 = ($28|0)==($30|0);
      if ($31) {
       $k$0$lcssa = $k$04;
       break L15;
      }
     }
     $32 = (($k$04) + 1)|0;
     $33 = (($pCol$05) + 24|0);
     $34 = ($32|0)<($20|0);
     if ($34) {
      $k$04 = $32;$pCol$05 = $33;
     } else {
      $k$0$lcssa = $32;
      break;
     }
    }
   } else {
    $k$0$lcssa = 0;
   }
  } while(0);
  $35 = ($k$0$lcssa|0)<($20|0);
  L23: do {
   if ($35) {
    $k$1 = $k$0$lcssa;
   } else {
    $36 = HEAP32[$2>>2]|0;
    $37 = (_addAggInfoColumn($36,$6)|0);
    $38 = ($37|0)>(-1);
    if ($38) {
     $39 = HEAP32[$18>>2]|0;
     $40 = (($pExpr) + 44|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($39) + (($37*24)|0)|0);
     HEAP32[$42>>2] = $41;
     $43 = HEAP32[$13>>2]|0;
     $44 = ((($39) + (($37*24)|0)|0) + 4|0);
     HEAP32[$44>>2] = $43;
     $45 = (($pExpr) + 32|0);
     $46 = HEAP16[$45>>1]|0;
     $47 = $46 << 16 >> 16;
     $48 = ((($39) + (($37*24)|0)|0) + 8|0);
     HEAP32[$48>>2] = $47;
     $49 = (($2) + 76|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + 1)|0;
     HEAP32[$49>>2] = $51;
     $52 = ((($39) + (($37*24)|0)|0) + 16|0);
     HEAP32[$52>>2] = $51;
     $53 = ((($39) + (($37*24)|0)|0) + 12|0);
     HEAP32[$53>>2] = -1;
     $54 = ((($39) + (($37*24)|0)|0) + 20|0);
     HEAP32[$54>>2] = $pExpr;
     $55 = (($6) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(0|0);
     L26: do {
      if (!($57)) {
       $58 = HEAP32[$56>>2]|0;
       $59 = ($58|0)>(0);
       if ($59) {
        $60 = (($56) + 8|0);
        $61 = HEAP32[$60>>2]|0;
        $j$02 = 0;$pTerm$03 = $61;
        while(1) {
         $62 = HEAP32[$pTerm$03>>2]|0;
         $63 = HEAP8[$62>>0]|0;
         $64 = ($63<<24>>24)==(-102);
         if ($64) {
          $65 = (($62) + 28|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = HEAP32[$13>>2]|0;
          $68 = ($66|0)==($67|0);
          if ($68) {
           $69 = (($62) + 32|0);
           $70 = HEAP16[$69>>1]|0;
           $71 = ($70<<16>>16)==($46<<16>>16);
           if ($71) {
            break;
           }
          }
         }
         $72 = (($j$02) + 1)|0;
         $73 = (($pTerm$03) + 20|0);
         $74 = ($72|0)<($58|0);
         if ($74) {
          $j$02 = $72;$pTerm$03 = $73;
         } else {
          break L26;
         }
        }
        HEAP32[$53>>2] = $j$02;
        $75 = ($j$02|0)<(0);
        if (!($75)) {
         $k$1 = $37;
         break L23;
        }
       }
      }
     } while(0);
     $76 = (($6) + 12|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + 1)|0;
     HEAP32[$76>>2] = $78;
     HEAP32[$53>>2] = $77;
     $k$1 = $37;
    } else {
     $k$1 = $37;
    }
   }
  } while(0);
  $79 = (($pExpr) + 40|0);
  HEAP32[$79>>2] = $6;
  HEAP8[$pExpr>>0] = -100;
  $80 = $k$1&65535;
  $81 = (($pExpr) + 34|0);
  HEAP16[$81>>1] = $80;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($8|0) == 155)) {
  $85 = (($1) + 28|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 & 8;
  $88 = ($87<<24>>24)==(0);
  if (!($88)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $89 = (($pWalker) + 16|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($pExpr) + 38|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = ($90|0)==($93|0);
  if (!($94)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $95 = (($6) + 40|0);
  $96 = (($6) + 44|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)>(0);
  L47: do {
   if ($98) {
    $99 = HEAP32[$95>>2]|0;
    $i$115 = 0;$pItem1$016 = $99;
    while(1) {
     $100 = HEAP32[$pItem1$016>>2]|0;
     $101 = (_sqlite3ExprCompare($100,$pExpr,-1)|0);
     $102 = ($101|0)==(0);
     if ($102) {
      $i$1$lcssa = $i$115;
      break L47;
     }
     $103 = (($i$115) + 1)|0;
     $104 = (($pItem1$016) + 16|0);
     $105 = ($103|0)<($97|0);
     if ($105) {
      $i$115 = $103;$pItem1$016 = $104;
     } else {
      $i$1$lcssa = $103;
      break;
     }
    }
   } else {
    $i$1$lcssa = 0;
   }
  } while(0);
  $106 = ($i$1$lcssa|0)<($97|0);
  do {
   if ($106) {
    $i$2 = $i$1$lcssa;
   } else {
    $107 = HEAP32[$2>>2]|0;
    $108 = (($107) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 77|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = (_addAggInfoFunc($107,$6)|0);
    $115 = ($114|0)>(-1);
    if ($115) {
     $116 = HEAP32[$95>>2]|0;
     $117 = (($116) + ($114<<4)|0);
     HEAP32[$117>>2] = $pExpr;
     $118 = (($2) + 76|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 1)|0;
     HEAP32[$118>>2] = $120;
     $121 = ((($116) + ($114<<4)|0) + 8|0);
     HEAP32[$121>>2] = $120;
     $122 = HEAP32[$2>>2]|0;
     $123 = (($pExpr) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_sqlite3Strlen30($124)|0);
     $126 = (($pExpr) + 20|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(0|0);
     if ($128) {
      $130 = 0;
     } else {
      $129 = HEAP32[$127>>2]|0;
      $130 = $129;
     }
     $131 = (_sqlite3FindFunction($122,$124,$125,$130,$113,0)|0);
     $132 = ((($116) + ($114<<4)|0) + 4|0);
     HEAP32[$132>>2] = $131;
     $133 = (($pExpr) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & 16;
     $136 = ($135|0)==(0);
     if ($136) {
      $141 = ((($116) + ($114<<4)|0) + 12|0);
      HEAP32[$141>>2] = -1;
      $i$2 = $114;
      break;
     } else {
      $137 = (($2) + 72|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$137>>2] = $139;
      $140 = ((($116) + ($114<<4)|0) + 12|0);
      HEAP32[$140>>2] = $138;
      $i$2 = $114;
      break;
     }
    } else {
     $i$2 = $114;
    }
   }
  } while(0);
  $142 = $i$2&65535;
  $143 = (($pExpr) + 34|0);
  HEAP16[$143>>1] = $142;
  $144 = (($pExpr) + 40|0);
  HEAP32[$144>>2] = $6;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _analyzeAggregatesInSelect($pWalker,$pSelect) {
 $pWalker = $pWalker|0;
 $pSelect = $pSelect|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _addAggInfoColumn($db,$pInfo) {
 $db = $db|0;
 $pInfo = $pInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 $0 = (($pInfo) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pInfo) + 32|0);
 $3 = (_sqlite3ArrayAllocate($db,$1,24,$2,$i)|0);
 HEAP32[$0>>2] = $3;
 $4 = HEAP32[$i>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _addAggInfoFunc($db,$pInfo) {
 $db = $db|0;
 $pInfo = $pInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $i = sp;
 $0 = (($pInfo) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pInfo) + 44|0);
 $3 = (_sqlite3ArrayAllocate($db,$1,16,$2,$i)|0);
 HEAP32[$0>>2] = $3;
 $4 = HEAP32[$i>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _pushOntoSorter($pParse,$pOrderBy,$pSelect,$regData) {
 $pParse = $pParse|0;
 $pOrderBy = $pOrderBy|0;
 $pSelect = $pSelect|0;
 $regData = $regData|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iLimit$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pOrderBy>>2]|0;
 $3 = (($2) + 2)|0;
 $4 = (_sqlite3GetTempRange($pParse,$3)|0);
 $5 = (_sqlite3GetTempReg($pParse)|0);
 _sqlite3ExprCacheClear($pParse);
 _sqlite3ExprCodeExprList($pParse,$pOrderBy,$4,0);
 $6 = (($pOrderBy) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($2))|0;
 (_sqlite3VdbeAddOp2($1,68,$7,$8)|0);
 $9 = (($8) + 1)|0;
 _sqlite3ExprCodeMove($pParse,$regData,$9,1);
 (_sqlite3VdbeAddOp3($1,48,$4,$3,$5)|0);
 $10 = (($pSelect) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 64;
 $13 = ($12<<16>>16)==(0);
 $$ = $13 ? 107 : 106;
 $14 = HEAP32[$6>>2]|0;
 (_sqlite3VdbeAddOp2($1,$$,$14,$5)|0);
 _sqlite3ReleaseTempReg($pParse,$5);
 _sqlite3ReleaseTempRange($pParse,$4,$3);
 $15 = (($pSelect) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = (($pSelect) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $21 = (($19) + 1)|0;
 $iLimit$0 = $20 ? $16 : $21;
 $22 = (_sqlite3VdbeAddOp1($1,135,$iLimit$0)|0);
 (_sqlite3VdbeAddOp2($1,37,$iLimit$0,-1)|0);
 $23 = (_sqlite3VdbeAddOp0($1,16)|0);
 _sqlite3VdbeJumpHere($1,$22);
 $24 = HEAP32[$6>>2]|0;
 (_sqlite3VdbeAddOp1($1,102,$24)|0);
 $25 = HEAP32[$6>>2]|0;
 (_sqlite3VdbeAddOp1($1,74,$25)|0);
 _sqlite3VdbeJumpHere($1,$23);
 STACKTOP = sp;return;
}
function _selectOpName($id) {
 $id = $id|0;
 var $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($id|0) == 116)) {
  $z$0 = 25336;
 } else if ((($id|0) == 118)) {
  $z$0 = 25352;
 } else if ((($id|0) == 117)) {
  $z$0 = 25368;
 } else {
  $z$0 = 25376;
 }
 STACKTOP = sp;return ($z$0|0);
}
function _generateWithRecursiveQuery($pParse,$p,$pDest) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pDest = $pDest|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $destQueue = 0, $eDest$0 = 0, $i$03 = 0, $iCurrent$0 = 0, $iDistinct$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $destQueue = sp;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$p>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pParse) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3AuthCheck($pParse,33,0,0,0)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $$idx1 = (($5) + 24|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $10 = (_sqlite3VdbeMakeLabel($$idx1$val)|0);
 _computeLimitRegisters($pParse,$p,$10);
 $11 = (($p) + 68|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($p) + 72|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($p) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($p) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$13>>2] = 0;
 HEAP32[$11>>2] = 0;
 HEAP32[$17>>2] = 0;
 HEAP32[$15>>2] = 0;
 $19 = (($p) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $22 = ($21|0)>(0);
 L4: do {
  if ($22) {
   $i$03 = 0;
   while(1) {
    $25 = ((($1) + (($i$03*72)|0)|0) + 45|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 & 8;
    $28 = ($27<<24>>24)==(0);
    $24 = (($i$03) + 1)|0;
    if (!($28)) {
     break;
    }
    $23 = ($24|0)<($21|0);
    if ($23) {
     $i$03 = $24;
    } else {
     $iCurrent$0 = 0;
     break L4;
    }
   }
   $29 = ((($1) + (($i$03*72)|0)|0) + 48|0);
   $30 = HEAP32[$29>>2]|0;
   $iCurrent$0 = $30;
  } else {
   $iCurrent$0 = 0;
  }
 } while(0);
 $31 = (($pParse) + 72|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $34 = (($p) + 4|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(115);
 $37 = ($20|0)!=(0|0);
 if ($36) {
  $38 = $37 ? 13 : 11;
  $39 = (($32) + 2)|0;
  HEAP32[$31>>2] = $39;
  $eDest$0 = $38;$iDistinct$0 = $33;
 } else {
  $40 = $37 ? 12 : 10;
  $eDest$0 = $40;$iDistinct$0 = 0;
 }
 _sqlite3SelectDestInit($destQueue,$eDest$0,$32);
 $41 = (($pParse) + 76|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 (_sqlite3VdbeAddOp3($5,57,$iCurrent$0,$43,$3)|0);
 if ($37) {
  $44 = (_multiSelectOrderByKeyInfo($pParse,$p)|0);
  $45 = HEAP32[$20>>2]|0;
  $46 = (($45) + 2)|0;
  (_sqlite3VdbeAddOp4($5,55,$32,$46,0,$44,-6)|0);
  $47 = (($destQueue) + 16|0);
  HEAP32[$47>>2] = $20;
 } else {
  (_sqlite3VdbeAddOp2($5,55,$32,$3)|0);
 }
 $48 = ($iDistinct$0|0)==(0);
 if (!($48)) {
  $49 = (_sqlite3VdbeAddOp2($5,55,$iDistinct$0,0)|0);
  $50 = (($p) + 16|0);
  HEAP32[$50>>2] = $49;
  $51 = (($p) + 6|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = $53 | 8;
  $55 = $54&65535;
  HEAP16[$51>>1] = $55;
 }
 HEAP32[$19>>2] = 0;
 $56 = (($7) + 64|0);
 HEAP32[$56>>2] = 0;
 $57 = (_sqlite3Select($pParse,$7,$destQueue)|0);
 HEAP32[$56>>2] = $p;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = (_sqlite3VdbeAddOp2($5,105,$32,$10)|0);
  (_sqlite3VdbeAddOp1($5,101,$iCurrent$0)|0);
  if ($37) {
   $60 = HEAP32[$20>>2]|0;
   $61 = (($60) + 1)|0;
   (_sqlite3VdbeAddOp3($5,46,$32,$61,$43)|0);
  } else {
   (_sqlite3VdbeAddOp2($5,99,$32,$43)|0);
  }
  (_sqlite3VdbeAddOp1($5,74,$32)|0);
  $$idx$val = HEAP32[$$idx1>>2]|0;
  $62 = (_sqlite3VdbeMakeLabel($$idx$val)|0);
  _codeOffset($5,$18,$62);
  $63 = HEAP32[$p>>2]|0;
  _selectInnerLoop($pParse,$p,$63,$iCurrent$0,0,0,$pDest,$62,$10);
  $64 = ($16|0)==(0);
  if (!($64)) {
   (_sqlite3VdbeAddOp3($5,135,$16,$10,-1)|0);
  }
  _sqlite3VdbeResolveLabel($5,$62);
  HEAP32[$6>>2] = 0;
  (_sqlite3Select($pParse,$p,$destQueue)|0);
  HEAP32[$6>>2] = $7;
  (_sqlite3VdbeAddOp2($5,16,0,$59)|0);
  _sqlite3VdbeResolveLabel($5,$10);
 }
 HEAP32[$19>>2] = $20;
 HEAP32[$11>>2] = $12;
 HEAP32[$13>>2] = $14;
 STACKTOP = sp;return;
}
function _multiSelectOrderBy($pParse,$p,$pDest) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pDest = $pDest|0;
 var $$0 = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9$val = 0, $$not = 0, $$off = 0, $$off6 = 0, $$pre = 0, $$pre$phi42Z2D = 0, $$pre41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addrAeqB$0 = 0, $addrAltB$0 = 0, $addrEofA$0 = 0, $addrEofA_noB$0 = 0, $addrEofB$0 = 0, $addrOutB$0 = 0, $brmerge = 0, $destA = 0, $destB = 0, $exitcond = 0, $exitcond32 = 0, $i$0$c = 0, $i$028 = 0, $i$113 = 0, $i$212 = 0, $j$0$lcssa = 0, $j$016 = 0, $nOrderBy$027 = 0, $nOrderBy$1 = 0;
 var $nOrderBy$2 = 0, $pFirst$0 = 0, $pItem$017 = 0, $pItem1$014 = 0, $pKeyDup$0 = 0, $pKeyMerge$0 = 0, $pOrderBy$026 = 0, $pOrderBy$1 = 0, $pOrderBy$2 = 0, $pParse$idx$val = 0, $regLimitA$0 = 0, $regLimitB$0 = 0, $regPrev$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $destA = sp + 20|0;
 $destB = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $$idx10 = (($2) + 24|0);
 $$idx10$val = HEAP32[$$idx10>>2]|0;
 $3 = (_sqlite3VdbeMakeLabel($$idx10$val)|0);
 $$idx9$val = HEAP32[$$idx10>>2]|0;
 $4 = (_sqlite3VdbeMakeLabel($$idx9$val)|0);
 $5 = (($p) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($p) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($p) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($6<<24>>24)==(116);
 L1: do {
  if ($12) {
   $nOrderBy$2 = $11;$pOrderBy$2 = $10;
  } else {
   $13 = (($0) + 64|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(0);
   if ($15) {
    $i$028 = 1;$nOrderBy$027 = $11;$pOrderBy$026 = $10;
    while(1) {
     $16 = HEAP32[$p>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = ($i$028|0)>($17|0);
     if ($18) {
      $nOrderBy$2 = $nOrderBy$027;$pOrderBy$2 = $pOrderBy$026;
      break L1;
     }
     $19 = ($nOrderBy$027|0)>(0);
     L7: do {
      if ($19) {
       $20 = (($pOrderBy$026) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       $j$016 = 0;$pItem$017 = $21;
       while(1) {
        $22 = (($pItem$017) + 16|0);
        $23 = HEAP16[$22>>1]|0;
        $24 = $23&65535;
        $25 = ($24|0)==($i$028|0);
        if ($25) {
         $j$0$lcssa = $j$016;
         break L7;
        }
        $26 = (($j$016) + 1)|0;
        $27 = (($pItem$017) + 20|0);
        $28 = ($26|0)<($nOrderBy$027|0);
        if ($28) {
         $j$016 = $26;$pItem$017 = $27;
        } else {
         $j$0$lcssa = $26;
         break;
        }
       }
      } else {
       $j$0$lcssa = 0;
      }
     } while(0);
     $29 = ($j$0$lcssa|0)==($nOrderBy$027|0);
     if ($29) {
      $30 = (_sqlite3Expr($0,132,0)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$0 = 7;
       break;
      }
      $32 = (($30) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 | 1024;
      HEAP32[$32>>2] = $34;
      $35 = (($30) + 8|0);
      $i$0$c = $i$028;
      HEAP32[$35>>2] = $i$0$c;
      $pParse$idx$val = HEAP32[$pParse>>2]|0;
      $36 = (_sqlite3ExprListAppend($pParse$idx$val,$pOrderBy$026,$30)|0);
      $37 = ($36|0)==(0|0);
      if ($37) {
       $nOrderBy$1 = $nOrderBy$027;$pOrderBy$1 = 0;
      } else {
       $38 = $i$028&65535;
       $39 = (($nOrderBy$027) + 1)|0;
       $40 = (($36) + 8|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($41) + (($nOrderBy$027*20)|0)|0) + 16|0);
       HEAP16[$42>>1] = $38;
       $nOrderBy$1 = $39;$pOrderBy$1 = $36;
      }
     } else {
      $nOrderBy$1 = $nOrderBy$027;$pOrderBy$1 = $pOrderBy$026;
     }
     $43 = HEAP8[$13>>0]|0;
     $44 = ($43<<24>>24)==(0);
     if (!($44)) {
      $nOrderBy$2 = $nOrderBy$1;$pOrderBy$2 = $pOrderBy$1;
      break L1;
     }
     $45 = (($i$028) + 1)|0;
     $i$028 = $45;$nOrderBy$027 = $nOrderBy$1;$pOrderBy$026 = $pOrderBy$1;
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $nOrderBy$2 = $11;$pOrderBy$2 = $10;
   }
  }
 } while(0);
 $46 = $nOrderBy$2 << 2;
 $47 = (_sqlite3DbMallocRaw($0,$46)|0);
 $48 = ($47|0)==(0|0);
 if ($48) {
  $pKeyMerge$0 = 0;
 } else {
  $49 = ($nOrderBy$2|0)>(0);
  if ($49) {
   $50 = (($pOrderBy$2) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $i$113 = 0;$pItem1$014 = $51;
   while(1) {
    $52 = (($pItem1$014) + 16|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53&65535;
    $55 = (($54) + -1)|0;
    $56 = (($47) + ($i$113<<2)|0);
    HEAP32[$56>>2] = $55;
    $57 = (($i$113) + 1)|0;
    $58 = (($pItem1$014) + 20|0);
    $exitcond32 = ($57|0)==($nOrderBy$2|0);
    if ($exitcond32) {
     break;
    } else {
     $i$113 = $57;$pItem1$014 = $58;
    }
   }
  }
  $59 = (_multiSelectOrderByKeyInfo($pParse,$p)|0);
  $pKeyMerge$0 = $59;
 }
 HEAP32[$9>>2] = $pOrderBy$2;
 $60 = HEAP32[$pParse>>2]|0;
 $61 = (_sqlite3ExprListDup($60,$pOrderBy$2,0)|0);
 $62 = (($8) + 56|0);
 HEAP32[$62>>2] = $61;
 if ($12) {
  $pKeyDup$0 = 0;$regPrev$0 = 0;
 } else {
  $63 = HEAP32[$p>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($pParse) + 76|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 1)|0;
  $68 = (($64) + 1)|0;
  $69 = (($68) + ($66))|0;
  HEAP32[$65>>2] = $69;
  (_sqlite3VdbeAddOp2($2,25,0,$67)|0);
  $70 = (_sqlite3KeyInfoAlloc($0,$64,1)|0);
  $71 = ($70|0)==(0|0);
  if ($71) {
   $pKeyDup$0 = 0;$regPrev$0 = $67;
  } else {
   $72 = ($64|0)>(0);
   if ($72) {
    $73 = (($70) + 16|0);
    $i$212 = 0;
    while(1) {
     $74 = (_multiSelectCollSeq($pParse,$p,$i$212)|0);
     $75 = ((($70) + ($i$212<<2)|0) + 20|0);
     HEAP32[$75>>2] = $74;
     $76 = HEAP32[$73>>2]|0;
     $77 = (($76) + ($i$212)|0);
     HEAP8[$77>>0] = 0;
     $78 = (($i$212) + 1)|0;
     $exitcond = ($78|0)==($64|0);
     if ($exitcond) {
      $pKeyDup$0 = $70;$regPrev$0 = $67;
      break;
     } else {
      $i$212 = $78;
     }
    }
   } else {
    $pKeyDup$0 = $70;$regPrev$0 = $67;
   }
  }
 }
 HEAP32[$7>>2] = 0;
 $79 = (($8) + 64|0);
 HEAP32[$79>>2] = 0;
 $80 = HEAP32[$9>>2]|0;
 (_sqlite3ResolveOrderGroupBy($pParse,$p,$80,16632)|0);
 $81 = (($8) + 60|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $84 = HEAP32[$62>>2]|0;
  (_sqlite3ResolveOrderGroupBy($pParse,$8,$84,16632)|0);
 }
 _computeLimitRegisters($pParse,$p,$3);
 $85 = (($p) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)==(0);
 $$not = $12 ^ 1;
 $brmerge = $87 | $$not;
 $$pre = (($pParse) + 76|0);
 if ($brmerge) {
  $$pre41 = (($p) + 12|0);
  $$pre$phi42Z2D = $$pre41;$regLimitA$0 = 0;$regLimitB$0 = 0;
 } else {
  $88 = HEAP32[$$pre>>2]|0;
  $89 = (($88) + 1)|0;
  $90 = (($88) + 2)|0;
  HEAP32[$$pre>>2] = $90;
  $91 = (($p) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)==(0);
  if ($93) {
   $95 = HEAP32[$85>>2]|0;
   $96 = $95;
  } else {
   $94 = (($92) + 1)|0;
   $96 = $94;
  }
  (_sqlite3VdbeAddOp2($2,33,$96,$89)|0);
  (_sqlite3VdbeAddOp2($2,33,$89,$90)|0);
  $$pre$phi42Z2D = $91;$regLimitA$0 = $89;$regLimitB$0 = $90;
 }
 $97 = (($p) + 68|0);
 $98 = HEAP32[$97>>2]|0;
 _sqlite3ExprDelete($0,$98);
 HEAP32[$97>>2] = 0;
 $99 = (($p) + 72|0);
 $100 = HEAP32[$99>>2]|0;
 _sqlite3ExprDelete($0,$100);
 HEAP32[$99>>2] = 0;
 $101 = HEAP32[$$pre>>2]|0;
 $102 = (($101) + 1)|0;
 $103 = (($101) + 2)|0;
 $104 = (($101) + 3)|0;
 $105 = (($101) + 4)|0;
 HEAP32[$$pre>>2] = $105;
 _sqlite3SelectDestInit($destA,9,$102);
 _sqlite3SelectDestInit($destB,9,$103);
 $$idx8 = (($2) + 32|0);
 $$idx8$val = HEAP32[$$idx8>>2]|0;
 $106 = (_sqlite3VdbeCurrentAddr($$idx8$val)|0);
 $107 = (($106) + 1)|0;
 $108 = (_sqlite3VdbeAddOp3($2,20,$102,0,$107)|0);
 $109 = (($8) + 8|0);
 HEAP32[$109>>2] = $regLimitA$0;
 $110 = (($pParse) + 472|0);
 $111 = HEAP32[$110>>2]|0;
 (_sqlite3Select($pParse,$8,$destA)|0);
 (_sqlite3VdbeAddOp1($2,21,$102)|0);
 _sqlite3VdbeJumpHere($2,$108);
 $$idx7$val = HEAP32[$$idx8>>2]|0;
 $112 = (_sqlite3VdbeCurrentAddr($$idx7$val)|0);
 $113 = (($112) + 1)|0;
 $114 = (_sqlite3VdbeAddOp3($2,20,$103,0,$113)|0);
 $115 = HEAP32[$85>>2]|0;
 $116 = HEAP32[$$pre$phi42Z2D>>2]|0;
 HEAP32[$85>>2] = $regLimitB$0;
 HEAP32[$$pre$phi42Z2D>>2] = 0;
 $117 = HEAP32[$110>>2]|0;
 (_sqlite3Select($pParse,$p,$destB)|0);
 HEAP32[$85>>2] = $115;
 HEAP32[$$pre$phi42Z2D>>2] = $116;
 (_sqlite3VdbeAddOp1($2,21,$103)|0);
 $118 = (_generateOutputSubroutine($pParse,$p,$destA,$pDest,$104,$regPrev$0,$pKeyDup$0,$3)|0);
 $$off = (($6) + -115)<<24>>24;
 $119 = ($$off&255)<(2);
 if ($119) {
  $120 = (_generateOutputSubroutine($pParse,$p,$destB,$pDest,$105,$regPrev$0,$pKeyDup$0,$3)|0);
  $addrOutB$0 = $120;
 } else {
  $addrOutB$0 = 0;
 }
 _sqlite3KeyInfoUnref($pKeyDup$0);
 $121 = ($6<<24>>24)==(118);
 $$off6 = (($6) + -117)<<24>>24;
 $122 = ($$off6&255)<(2);
 if ($122) {
  $addrEofA$0 = $3;$addrEofA_noB$0 = $3;
 } else {
  $123 = (_sqlite3VdbeAddOp2($2,17,$105,$addrOutB$0)|0);
  $124 = (_sqlite3VdbeAddOp2($2,22,$103,$3)|0);
  (_sqlite3VdbeAddOp2($2,16,0,$123)|0);
  $125 = (($8) + 32|0);
  $126 = $125;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = (($126) + 4)|0;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($p) + 32|0);
  $133 = $132;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (_i64Add(($135|0),($138|0),($128|0),($131|0))|0);
  $140 = tempRet0;
  $141 = $132;
  $142 = $141;
  HEAP32[$142>>2] = $139;
  $143 = (($141) + 4)|0;
  $144 = $143;
  HEAP32[$144>>2] = $140;
  $addrEofA$0 = $123;$addrEofA_noB$0 = $124;
 }
 if ($121) {
  $145 = (($p) + 32|0);
  $146 = $145;
  $147 = $146;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($146) + 4)|0;
  $150 = $149;
  $151 = HEAP32[$150>>2]|0;
  $152 = (($8) + 32|0);
  $153 = $152;
  $154 = $153;
  $155 = HEAP32[$154>>2]|0;
  $156 = (($153) + 4)|0;
  $157 = $156;
  $158 = HEAP32[$157>>2]|0;
  $159 = ($151>>>0)>($158>>>0);
  $160 = ($151|0)==($158|0);
  $161 = ($148>>>0)>($155>>>0);
  $162 = $160 & $161;
  $163 = $159 | $162;
  if ($163) {
   $164 = $145;
   $165 = $164;
   HEAP32[$165>>2] = $155;
   $166 = (($164) + 4)|0;
   $167 = $166;
   HEAP32[$167>>2] = $158;
   $addrEofB$0 = $addrEofA$0;
  } else {
   $addrEofB$0 = $addrEofA$0;
  }
 } else {
  $168 = (_sqlite3VdbeAddOp2($2,17,$104,$118)|0);
  (_sqlite3VdbeAddOp2($2,22,$102,$3)|0);
  (_sqlite3VdbeAddOp2($2,16,0,$168)|0);
  $addrEofB$0 = $168;
 }
 $169 = (_sqlite3VdbeAddOp2($2,17,$104,$118)|0);
 (_sqlite3VdbeAddOp2($2,22,$102,$addrEofA$0)|0);
 (_sqlite3VdbeAddOp2($2,16,0,$4)|0);
 do {
  if ($12) {
   $addrAeqB$0 = $169;$addrAltB$0 = $169;
  } else {
   if ($121) {
    $170 = (($169) + 1)|0;
    $addrAeqB$0 = $169;$addrAltB$0 = $170;
    break;
   } else {
    $171 = (_sqlite3VdbeAddOp2($2,22,$102,$addrEofA$0)|0);
    (_sqlite3VdbeAddOp2($2,16,0,$4)|0);
    $addrAeqB$0 = $171;$addrAltB$0 = $169;
    break;
   }
  }
 } while(0);
 $$idx$val = HEAP32[$$idx8>>2]|0;
 $172 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
 if ($119) {
  (_sqlite3VdbeAddOp2($2,17,$105,$addrOutB$0)|0);
 }
 (_sqlite3VdbeAddOp2($2,22,$103,$addrEofB$0)|0);
 (_sqlite3VdbeAddOp2($2,16,0,$4)|0);
 _sqlite3VdbeJumpHere($2,$114);
 (_sqlite3VdbeAddOp2($2,22,$102,$addrEofA_noB$0)|0);
 (_sqlite3VdbeAddOp2($2,22,$103,$addrEofB$0)|0);
 _sqlite3VdbeResolveLabel($2,$4);
 (_sqlite3VdbeAddOp4($2,40,0,0,0,$47,-15)|0);
 $173 = (($destA) + 8|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = (($destB) + 8|0);
 $176 = HEAP32[$175>>2]|0;
 (_sqlite3VdbeAddOp4($2,41,$174,$176,$nOrderBy$2,$pKeyMerge$0,-6)|0);
 _sqlite3VdbeChangeP5($2,1);
 (_sqlite3VdbeAddOp3($2,42,$addrAltB$0,$addrAeqB$0,$172)|0);
 _sqlite3VdbeResolveLabel($2,$3);
 $177 = HEAP8[$pDest>>0]|0;
 $178 = ($177<<24>>24)==(5);
 if ($178) {
  $pFirst$0 = $8;
  while(1) {
   $179 = (($pFirst$0) + 60|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0|0);
   if ($181) {
    break;
   } else {
    $pFirst$0 = $180;
   }
  }
  $182 = HEAP32[$pFirst$0>>2]|0;
  _generateColumnNames($pParse,0,$182);
 }
 $183 = HEAP32[$7>>2]|0;
 $184 = ($183|0)==(0|0);
 if (!($184)) {
  _sqlite3SelectDelete($0,$183);
 }
 HEAP32[$7>>2] = $8;
 HEAP32[$79>>2] = $p;
 $185 = HEAP8[$5>>0]|0;
 $186 = $185&255;
 _explainComposite($pParse,$186,$111,$117,0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _explainComposite($pParse,$op,$iSub1,$iSub2,$bUseTmp) {
 $pParse = $pParse|0;
 $op = $op|0;
 $iSub1 = $iSub1|0;
 $iSub2 = $iSub2|0;
 $bUseTmp = $bUseTmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pParse) + 454|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(2);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pParse) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$pParse>>2]|0;
 $6 = ($bUseTmp|0)!=(0);
 $7 = $6 ? 25312 : 1728;
 $8 = (_selectOpName($op)|0);
 HEAP32[$vararg_buffer>>2] = $iSub1;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $iSub2;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $8;
 $9 = (_sqlite3MPrintf($5,25272,$vararg_buffer)|0);
 $10 = (($pParse) + 468|0);
 $11 = HEAP32[$10>>2]|0;
 (_sqlite3VdbeAddOp4($4,156,$11,0,0,$9,-1)|0);
 STACKTOP = sp;return;
}
function _multiSelectCollSeq($pParse,$p,$iCol) {
 $pParse = $pParse|0;
 $p = $p|0;
 $iCol = $iCol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pRet$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (_multiSelectCollSeq($pParse,$1,$iCol)|0);
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $pRet$1 = $3;
   STACKTOP = sp;return ($pRet$1|0);
  }
 }
 $5 = HEAP32[$p>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($iCol|0);
 if (!($7)) {
  $pRet$1 = 0;
  STACKTOP = sp;return ($pRet$1|0);
 }
 $8 = (($5) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($iCol*20)|0)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_sqlite3ExprCollSeq($pParse,$11)|0);
 $pRet$1 = $12;
 STACKTOP = sp;return ($pRet$1|0);
}
function _multiSelectOrderByKeyInfo($pParse,$p) {
 $pParse = $pParse|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $or$cond = 0;
 var $pColl$0 = 0, $pColl$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$pParse>>2]|0;
 $4 = (($2) + 1)|0;
 $5 = (_sqlite3KeyInfoAlloc($3,$4,1)|0);
 $6 = ($5|0)!=(0|0);
 $7 = ($2|0)>(0);
 $or$cond = $6 & $7;
 if (!($or$cond)) {
  STACKTOP = sp;return ($5|0);
 }
 $8 = (($1) + 8|0);
 $9 = (($3) + 8|0);
 $10 = (($5) + 16|0);
 $i$01 = 0;
 while(1) {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + (($i$01*20)|0)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 256;
  $17 = ($16|0)==(0);
  if ($17) {
   $19 = ((($11) + (($i$01*20)|0)|0) + 16|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = (($21) + -1)|0;
   $23 = (_multiSelectCollSeq($pParse,$p,$22)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = HEAP32[$9>>2]|0;
    $pColl$0 = $25;
   } else {
    $pColl$0 = $23;
   }
   $26 = HEAP32[$pColl$0>>2]|0;
   $27 = (_sqlite3ExprAddCollateString($pParse,$13,$26)|0);
   $28 = HEAP32[$8>>2]|0;
   $29 = (($28) + (($i$01*20)|0)|0);
   HEAP32[$29>>2] = $27;
   $pColl$1 = $pColl$0;
  } else {
   $18 = (_sqlite3ExprCollSeq($pParse,$13)|0);
   $pColl$1 = $18;
  }
  $30 = ((($5) + ($i$01<<2)|0) + 20|0);
  HEAP32[$30>>2] = $pColl$1;
  $31 = HEAP32[$8>>2]|0;
  $32 = ((($31) + (($i$01*20)|0)|0) + 12|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = HEAP32[$10>>2]|0;
  $35 = (($34) + ($i$01)|0);
  HEAP8[$35>>0] = $33;
  $36 = (($i$01) + 1)|0;
  $exitcond = ($36|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $36;
  }
 }
 STACKTOP = sp;return ($5|0);
}
function _generateOutputSubroutine($pParse,$p,$pIn,$pDest,$regReturn,$regPrev,$pKeyInfo,$iBreak) {
 $pParse = $pParse|0;
 $p = $p|0;
 $pIn = $pIn|0;
 $pDest = $pDest|0;
 $regReturn = $regReturn|0;
 $regPrev = $regPrev|0;
 $pKeyInfo = $pKeyInfo|0;
 $iBreak = $iBreak|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$idx = (($1) + 32|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $2 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
 $$idx1 = (($1) + 24|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $3 = (_sqlite3VdbeMakeLabel($$idx1$val)|0);
 $4 = ($regPrev|0)==(0);
 if (!($4)) {
  $5 = (_sqlite3VdbeAddOp1($1,45,$regPrev)|0);
  $6 = (($pIn) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($regPrev) + 1)|0;
  $9 = (($pIn) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_sqlite3KeyInfoRef($pKeyInfo)|0);
  $12 = (_sqlite3VdbeAddOp4($1,41,$7,$8,$10,$11,-6)|0);
  $13 = (($12) + 2)|0;
  (_sqlite3VdbeAddOp3($1,42,$13,$3,$13)|0);
  _sqlite3VdbeJumpHere($1,$5);
  $14 = HEAP32[$6>>2]|0;
  $15 = HEAP32[$9>>2]|0;
  $16 = (($15) + -1)|0;
  (_sqlite3VdbeAddOp3($1,33,$14,$8,$16)|0);
  (_sqlite3VdbeAddOp2($1,25,1,$regPrev)|0);
 }
 $17 = HEAP32[$pParse>>2]|0;
 $18 = (($17) + 64|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if (!($20)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($p) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 _codeOffset($1,$22,$3);
 $23 = HEAP8[$pDest>>0]|0;
 $24 = $23&255;
 switch ($24|0) {
 case 7:  {
  $34 = HEAP32[$p>>2]|0;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($pDest) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = (_sqlite3CompareAffinity($37,$39)|0);
  HEAP8[$38>>0] = $40;
  $41 = (_sqlite3GetTempReg($pParse)|0);
  $42 = (($pIn) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  (_sqlite3VdbeAddOp4($1,48,$43,1,$41,$38,1)|0);
  $44 = HEAP32[$42>>2]|0;
  _sqlite3ExprCacheAffinityChange($pParse,$44,1);
  $45 = (($pDest) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  (_sqlite3VdbeAddOp2($1,107,$46,$41)|0);
  _sqlite3ReleaseTempReg($pParse,$41);
  break;
 }
 case 9:  {
  $51 = (($pDest) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = (($pIn) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (_sqlite3GetTempRange($pParse,$55)|0);
   HEAP32[$51>>2] = $56;
   $57 = HEAP32[$54>>2]|0;
   $58 = (($pDest) + 12|0);
   HEAP32[$58>>2] = $57;
   $61 = $56;$62 = $57;
  } else {
   $$phi$trans$insert = (($pDest) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $61 = $52;$62 = $$pre;
  }
  $59 = (($pIn) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  _sqlite3ExprCodeMove($pParse,$60,$61,$62);
  $63 = (($pDest) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  (_sqlite3VdbeAddOp1($1,22,$64)|0);
  break;
 }
 case 8: case 10:  {
  $25 = (_sqlite3GetTempReg($pParse)|0);
  $26 = (_sqlite3GetTempReg($pParse)|0);
  $27 = (($pIn) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($pIn) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  (_sqlite3VdbeAddOp3($1,48,$28,$30,$25)|0);
  $31 = (($pDest) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  (_sqlite3VdbeAddOp2($1,69,$32,$26)|0);
  $33 = HEAP32[$31>>2]|0;
  (_sqlite3VdbeAddOp3($1,70,$33,$25,$26)|0);
  _sqlite3VdbeChangeP5($1,8);
  _sqlite3ReleaseTempReg($pParse,$26);
  _sqlite3ReleaseTempReg($pParse,$25);
  break;
 }
 case 6:  {
  $47 = (($pIn) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($pDest) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  _sqlite3ExprCodeMove($pParse,$48,$50,1);
  break;
 }
 default: {
  $65 = (($pIn) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($pIn) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  (_sqlite3VdbeAddOp2($1,35,$66,$68)|0);
  $69 = HEAP32[$65>>2]|0;
  $70 = HEAP32[$67>>2]|0;
  _sqlite3ExprCacheAffinityChange($pParse,$69,$70);
 }
 }
 $71 = (($p) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0);
 if (!($73)) {
  (_sqlite3VdbeAddOp3($1,135,$72,$iBreak,-1)|0);
 }
 _sqlite3VdbeResolveLabel($1,$3);
 (_sqlite3VdbeAddOp1($1,18,$regReturn)|0);
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _substExprList($db,$pList,$iTable,$pEList) {
 $db = $db|0;
 $pList = $pList|0;
 $iTable = $iTable|0;
 $pEList = $pEList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pList|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$pList>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pList) + 8|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + (($i$01*20)|0)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_substExpr($db,$6,$iTable,$pEList)|0);
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + (($i$01*20)|0)|0);
  HEAP32[$9>>2] = $7;
  $10 = (($i$01) + 1)|0;
  $11 = HEAP32[$pList>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $i$01 = $10;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _substExpr($db,$pExpr,$iTable,$pEList) {
 $db = $db|0;
 $pExpr = $pExpr|0;
 $iTable = $iTable|0;
 $pEList = $pEList|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pExpr|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$pExpr>>0]|0;
 $2 = ($1<<24>>24)==(-102);
 if ($2) {
  $3 = (($pExpr) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($iTable|0);
  if ($5) {
   $6 = (($pExpr) + 32|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($7<<16>>16)<(0);
   if ($8) {
    HEAP8[$pExpr>>0] = 101;
    $$0 = $pExpr;
    STACKTOP = sp;return ($$0|0);
   } else {
    $9 = $7 << 16 >> 16;
    $10 = (($pEList) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + (($9*20)|0)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_sqlite3ExprDup($db,$13,0)|0);
    _sqlite3ExprDelete($db,$pExpr);
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $15 = (($pExpr) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_substExpr($db,$16,$iTable,$pEList)|0);
 HEAP32[$15>>2] = $17;
 $18 = (($pExpr) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_substExpr($db,$19,$iTable,$pEList)|0);
 HEAP32[$18>>2] = $20;
 $21 = (($pExpr) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 2048;
 $24 = ($23|0)==(0);
 $25 = (($pExpr) + 20|0);
 if ($24) {
  $27 = HEAP32[$25>>2]|0;
  _substExprList($db,$27,$iTable,$pEList);
  $$0 = $pExpr;
  STACKTOP = sp;return ($$0|0);
 } else {
  $26 = HEAP32[$25>>2]|0;
  _substSelect($db,$26,$iTable,$pEList);
  $$0 = $pExpr;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _substSelect($db,$p,$iTable,$pEList) {
 $db = $db|0;
 $p = $p|0;
 $iTable = $iTable|0;
 $pEList = $pEList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $pItem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 _substExprList($db,$1,$iTable,$pEList);
 $2 = (($p) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 _substExprList($db,$3,$iTable,$pEList);
 $4 = (($p) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 _substExprList($db,$5,$iTable,$pEList);
 $6 = (($p) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_substExpr($db,$7,$iTable,$pEList)|0);
 HEAP32[$6>>2] = $8;
 $9 = (($p) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_substExpr($db,$10,$iTable,$pEList)|0);
 HEAP32[$9>>2] = $11;
 $12 = (($p) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 _substSelect($db,$13,$iTable,$pEList);
 $14 = (($p) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)>(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = (($15) + 8|0);
 $i$02 = $17;$pItem$01 = $19;
 while(1) {
  $20 = (($pItem$01) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _substSelect($db,$21,$iTable,$pEList);
  $22 = (($i$02) + -1)|0;
  $23 = (($pItem$01) + 72|0);
  $24 = ($22|0)>(0);
  if ($24) {
   $i$02 = $22;$pItem$01 = $23;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3FkDropTable($pParse,$pName,$pTab) {
 $pParse = $pParse|0;
 $pName = $pName|0;
 $pTab = $pTab|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iSkip$0 = 0, $p$0 = 0;
 var $p$05 = 0, $p$06 = 0, $pTab$idx$val = 0, $pTab$idx2 = 0, $pTab$idx2$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($pTab) + 44|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 16;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($pTab) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (_sqlite3GetVdbe($pParse)|0);
 $pTab$idx$val = HEAP32[$pTab>>2]|0;
 $pTab$idx2 = (($pTab) + 68|0);
 $pTab$idx2$val = HEAP32[$pTab$idx2>>2]|0;
 $13 = (_sqlite3FkReferences($pTab$idx$val,$pTab$idx2$val)|0);
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   $15 = (($pTab) + 16|0);
   $p$05 = HEAP32[$15>>2]|0;
   $16 = ($p$05|0)==(0|0);
   if ($16) {
    STACKTOP = sp;return;
   } else {
    $p$06 = $p$05;
   }
   while(1) {
    $19 = (($p$06) + 24|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if (!($21)) {
     label = 9;
     break;
    }
    $22 = HEAP32[$1>>2]|0;
    $23 = $22 & 16777216;
    $24 = ($23|0)==(0);
    if (!($24)) {
     label = 9;
     break;
    }
    $17 = (($p$06) + 4|0);
    $p$0 = HEAP32[$17>>2]|0;
    $18 = ($p$0|0)==(0|0);
    if ($18) {
     label = 14;
     break;
    } else {
     $p$06 = $p$0;
    }
   }
   if ((label|0) == 9) {
    $$idx1 = (($12) + 24|0);
    $$idx1$val = HEAP32[$$idx1>>2]|0;
    $25 = (_sqlite3VdbeMakeLabel($$idx1$val)|0);
    (_sqlite3VdbeAddOp2($12,130,1,$25)|0);
    $iSkip$0 = $25;
    break;
   }
   else if ((label|0) == 14) {
    STACKTOP = sp;return;
   }
  } else {
   $iSkip$0 = 0;
  }
 } while(0);
 $26 = (($pParse) + 442|0);
 HEAP8[$26>>0] = 1;
 $27 = (_sqlite3SrcListDup($0,$pName,0)|0);
 _sqlite3DeleteFrom($pParse,$27,0);
 HEAP8[$26>>0] = 0;
 $28 = HEAP32[$1>>2]|0;
 $29 = $28 & 16777216;
 $30 = ($29|0)==(0);
 if ($30) {
  $$idx = (($12) + 32|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $31 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
  $32 = (($31) + 2)|0;
  (_sqlite3VdbeAddOp2($12,130,0,$32)|0);
  _sqlite3HaltConstraint($pParse,787,2,0,-2,4);
 }
 $33 = ($iSkip$0|0)==(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 _sqlite3VdbeResolveLabel($12,$iSkip$0);
 STACKTOP = sp;return;
}
function _sqlite3CodeDropTable($pParse,$pTab,$iDb,$isView) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $iDb = $iDb|0;
 $isView = $isView|0;
 var $$pre = 0, $$pre$phi6Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pParse$idx$val = 0, $pParse$idx$val$idx = 0, $pParse$idx$val$idx$val = 0, $pParse$idx$val$idx$val$idx = 0, $pParse$idx$val$idx$val$idx$val = 0, $pParse$idx1 = 0, $pParse$idx1$val = 0;
 var $pTrigger$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sqlite3GetVdbe($pParse)|0);
 _sqlite3BeginWriteOperation($pParse,1,$iDb);
 $4 = (($pTab) + 44|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 16;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  (_sqlite3VdbeAddOp0($3,140)|0);
 }
 $pParse$idx$val = HEAP32[$pParse>>2]|0;
 $pParse$idx1 = (($pParse) + 442|0);
 $pParse$idx1$val = HEAP8[$pParse$idx1>>0]|0;
 $pParse$idx$val$idx = (($pParse$idx$val) + 16|0);
 $pParse$idx$val$idx$val = HEAP32[$pParse$idx$val$idx>>2]|0;
 $pParse$idx$val$idx$val$idx = (($pParse$idx$val$idx$val) + 28|0);
 $pParse$idx$val$idx$val$idx$val = HEAP32[$pParse$idx$val$idx$val$idx>>2]|0;
 $8 = (_sqlite3TriggerList($pParse$idx$val$idx$val$idx$val,$pParse$idx1$val,$pTab)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $pTrigger$02 = $8;
  while(1) {
   _sqlite3DropTriggerPtr($pParse,$pTrigger$02);
   $10 = (($pTrigger$02) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $pTrigger$02 = $11;
   }
  }
 }
 $13 = HEAP8[$4>>0]|0;
 $14 = $13 & 8;
 $15 = ($14<<24>>24)==(0);
 $$pre = (($2) + ($iDb<<4)|0);
 if ($15) {
  $$pre$phi6Z2D = $pTab;
 } else {
  $16 = HEAP32[$$pre>>2]|0;
  $17 = HEAP32[$pTab>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _sqlite3NestedParse($pParse,25624,$vararg_buffer);
  $$pre$phi6Z2D = $pTab;
 }
 $18 = HEAP32[$$pre>>2]|0;
 $19 = ($iDb|0)==(1);
 $20 = $19 ? 15056 : 15080;
 $21 = HEAP32[$$pre$phi6Z2D>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $18;
 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $20;
 $vararg_ptr6 = (($vararg_buffer2) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $21;
 _sqlite3NestedParse($pParse,25672,$vararg_buffer2);
 $22 = ($isView|0)==(0);
 if ($22) {
  $23 = HEAP8[$4>>0]|0;
  $24 = $23 & 16;
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   _destroyTable($pParse,$pTab);
  }
 }
 $26 = HEAP8[$4>>0]|0;
 $27 = $26 & 16;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
  (_sqlite3VdbeAddOp4($3,120,$iDb,0,0,$30,0)|0);
  _sqlite3ChangeCookie($pParse,$iDb);
  _sqliteViewResetAll($0,$iDb);
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$$pre$phi6Z2D>>2]|0;
 (_sqlite3VdbeAddOp4($3,142,$iDb,0,0,$29,0)|0);
 $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
 (_sqlite3VdbeAddOp4($3,120,$iDb,0,0,$30,0)|0);
 _sqlite3ChangeCookie($pParse,$iDb);
 _sqliteViewResetAll($0,$iDb);
 STACKTOP = sp;return;
}
function _destroyTable($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDestroyed$0 = 0, $iLargest$0 = 0, $iLargest$1$lcssa = 0;
 var $iLargest$14 = 0, $iLargest$2 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $pIdx$0 = 0, $pIdx$03 = 0, $pIdx$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pTab) + 8|0);
 $3 = (($pTab) + 68|0);
 $iDestroyed$0 = 0;
 while(1) {
  $4 = ($iDestroyed$0|0)==(0);
  $5 = ($1|0)<($iDestroyed$0|0);
  $or$cond = $4 | $5;
  $iLargest$0 = $or$cond ? $1 : 0;
  $pIdx$03 = HEAP32[$2>>2]|0;
  $6 = ($pIdx$03|0)==(0|0);
  if ($6) {
   $iLargest$1$lcssa = $iLargest$0;
  } else {
   $iLargest$14 = $iLargest$0;$pIdx$05 = $pIdx$03;
   while(1) {
    $7 = (($pIdx$05) + 44|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)<($iDestroyed$0|0);
    $or$cond1 = $4 | $9;
    $10 = ($8|0)>($iLargest$14|0);
    $or$cond2 = $or$cond1 & $10;
    $iLargest$2 = $or$cond2 ? $8 : $iLargest$14;
    $11 = (($pIdx$05) + 20|0);
    $pIdx$0 = HEAP32[$11>>2]|0;
    $12 = ($pIdx$0|0)==(0|0);
    if ($12) {
     $iLargest$1$lcssa = $iLargest$2;
     break;
    } else {
     $iLargest$14 = $iLargest$2;$pIdx$05 = $pIdx$0;
    }
   }
  }
  $13 = ($iLargest$1$lcssa|0)==(0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$pParse>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (_sqlite3SchemaToIndex($14,$15)|0);
  _destroyRootPage($pParse,$iLargest$1$lcssa,$16);
  $iDestroyed$0 = $iLargest$1$lcssa;
 }
 STACKTOP = sp;return;
}
function _sqliteViewResetAll($db,$idx) {
 $db = $db|0;
 $idx = $idx|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert4 = 0, $$pre = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$01 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($idx<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 78|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 2;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($3) + 16|0);
 $i$01 = HEAP32[$8>>2]|0;
 $9 = ($i$01|0)==(0|0);
 if ($9) {
  $19 = $3;$21 = $5;
 } else {
  $i$02 = $i$01;
  while(1) {
   $10 = (($i$02) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    _sqliteDeleteColumnNames($db,$11);
    $15 = (($11) + 4|0);
    HEAP32[$15>>2] = 0;
    $16 = (($11) + 38|0);
    HEAP16[$16>>1] = 0;
   }
   $i$0 = HEAP32[$i$02>>2]|0;
   $17 = ($i$0|0)==(0|0);
   if ($17) {
    break;
   } else {
    $i$02 = $i$0;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $$phi$trans$insert = ((($$pre) + ($idx<<4)|0) + 12|0);
  $$pre3 = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert4 = (($$pre3) + 78|0);
  $$pre5 = HEAP16[$$phi$trans$insert4>>1]|0;
  $19 = $$pre3;$21 = $$pre5;
 }
 $18 = (($19) + 78|0);
 $20 = $21&65535;
 $22 = $20 & 65533;
 $23 = $22&65535;
 HEAP16[$18>>1] = $23;
 STACKTOP = sp;return;
}
function _sqliteDeleteColumnNames($db,$pTable) {
 $db = $db|0;
 $pTable = $pTable|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$01 = 0, $pCol$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTable) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($pTable) + 38|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)>(0);
 if ($5) {
  $i$01 = 0;$pCol$02 = $1;
  while(1) {
   $6 = HEAP32[$pCol$02>>2]|0;
   _sqlite3DbFree($db,$6);
   $7 = (($pCol$02) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   _sqlite3ExprDelete($db,$8);
   $9 = (($pCol$02) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   _sqlite3DbFree($db,$10);
   $11 = (($pCol$02) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   _sqlite3DbFree($db,$12);
   $13 = (($pCol$02) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   _sqlite3DbFree($db,$14);
   $15 = (($i$01) + 1)|0;
   $16 = (($pCol$02) + 24|0);
   $17 = HEAP16[$3>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = ($15|0)<($18|0);
   if ($19) {
    $i$01 = $15;$pCol$02 = $16;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $20 = $$pre;
 } else {
  $20 = $1;
 }
 _sqlite3DbFree($db,$20);
 STACKTOP = sp;return;
}
function _sqlite3ResolveSelfReference($pParse,$pTab,$type,$pExpr,$pList) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 $type = $type|0;
 $pExpr = $pExpr|0;
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, $or$cond = 0, $sNC = 0, $sSrc = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $sSrc = sp;
 $sNC = sp + 80|0;
 ;HEAP32[$sNC+0>>2]=0|0;HEAP32[$sNC+4>>2]=0|0;HEAP32[$sNC+8>>2]=0|0;HEAP32[$sNC+12>>2]=0|0;HEAP32[$sNC+16>>2]=0|0;HEAP32[$sNC+20>>2]=0|0;HEAP32[$sNC+24>>2]=0|0;HEAP32[$sNC+28>>2]=0|0;
 dest=$sSrc+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$sSrc>>2] = 1;
 $0 = HEAP32[$pTab>>2]|0;
 $1 = (($sSrc) + 16|0);
 HEAP32[$1>>2] = $0;
 $2 = (($sSrc) + 24|0);
 HEAP32[$2>>2] = $pTab;
 $3 = (($sSrc) + 48|0);
 HEAP32[$3>>2] = -1;
 HEAP32[$sNC>>2] = $pParse;
 $4 = (($sNC) + 4|0);
 HEAP32[$4>>2] = $sSrc;
 $5 = $type&255;
 $6 = (($sNC) + 28|0);
 HEAP8[$6>>0] = $5;
 $7 = (_sqlite3ResolveExprNames($sNC,$pExpr)|0);
 $8 = ($7|0)!=(0);
 $9 = ($pList|0)==(0|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $10 = (($pList) + 8|0);
 $11 = HEAP32[$pList>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = HEAP32[$10>>2]|0;
  $17 = (($16) + (($i$01*20)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_sqlite3ResolveExprNames($sNC,$18)|0);
  $20 = ($19|0)==(0);
  $15 = (($i$01) + 1)|0;
  if (!($20)) {
   label = 5;
   break;
  }
  $13 = HEAP32[$pList>>2]|0;
  $14 = ($15|0)<($13|0);
  if ($14) {
   $i$01 = $15;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _hasColumn($aiCol,$nCol,$x) {
 $aiCol = $aiCol|0;
 $nCol = $nCol|0;
 $x = $x|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $nCol;$$02 = $aiCol;
 while(1) {
  $0 = ($$01|0)>(0);
  if (!($0)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $1 = (($$01) + -1)|0;
  $2 = (($$02) + 2|0);
  $3 = HEAP16[$$02>>1]|0;
  $4 = $3 << 16 >> 16;
  $5 = ($4|0)==($x|0);
  if ($5) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $$01 = $1;$$02 = $2;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _estimateIndexWidth($pIdx) {
 $pIdx = $pIdx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $phitmp = 0, $wIndex$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pIdx) + 52|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $21 = 0;$22 = 0;
  $23 = (_sqlite3LogEst($21,$22)|0);
  $24 = (($pIdx) + 48|0);
  HEAP16[$24>>1] = $23;
  STACKTOP = sp;return;
 }
 $7 = (($pIdx) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&65535;
 $i$01 = 0;$wIndex$02 = 0;
 while(1) {
  $10 = (($8) + ($i$01<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)<(0);
  if ($12) {
   $18 = 1;
  } else {
   $13 = $11 << 16 >> 16;
   $14 = ((($3) + (($13*24)|0)|0) + 22|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $18 = $16;
  }
  $17 = (($18) + ($wIndex$02))|0;
  $19 = (($i$01) + 1)|0;
  $20 = ($19|0)<($9|0);
  if ($20) {
   $i$01 = $19;$wIndex$02 = $17;
  } else {
   break;
  }
 }
 $phitmp = $17 << 2;
 $21 = $phitmp;$22 = 0;
 $23 = (_sqlite3LogEst($21,$22)|0);
 $24 = (($pIdx) + 48|0);
 HEAP16[$24>>1] = $23;
 STACKTOP = sp;return;
}
function _freeIndex($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($db) + 512|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $4 = (($p) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  _sqlite3KeyInfoUnref($5);
 }
 $6 = (($p) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 _sqlite3ExprDelete($db,$7);
 $8 = (($p) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _sqlite3DbFree($db,$9);
 $10 = (($p) + 55|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 & 16;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  _sqlite3DbFree($db,$p);
  STACKTOP = sp;return;
 }
 $14 = (($p) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 _sqlite3DbFree($db,$15);
 _sqlite3DbFree($db,$p);
 STACKTOP = sp;return;
}
function _sqlite3ExprIsConstantOrFunction($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_exprIsConst($p,2)|0);
 STACKTOP = sp;return ($0|0);
}
function _convertToWithoutRowidTable($pParse,$pTab) {
 $pParse = $pParse|0;
 $pTab = $pTab|0;
 var $$n$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre22 = 0, $$pre25 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$018 = 0, $i$14 = 0, $i$29 = 0, $i$32 = 0, $j$08 = 0, $j$1 = 0, $j$21 = 0, $j$3 = 0, $n$05 = 0, $pIdx$0 = 0, $pIdx$013 = 0, $pIdx$014 = 0, $pParse$idx$val = 0;
 var $pPk$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($pParse) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pParse) + 420|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_sqlite3VdbeGetOp($2,$4)|0);
  HEAP8[$6>>0] = 116;
 }
 $7 = (($pParse) + 424|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (_sqlite3VdbeGetOp($2,$8)|0);
  HEAP8[$10>>0] = 16;
 }
 $11 = (($pTab) + 36|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12<<16>>16)>(-1);
 do {
  if ($13) {
   $pParse$idx$val = HEAP32[$pParse>>2]|0;
   $14 = (_sqlite3ExprListAppend($pParse$idx$val,0,0)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    STACKTOP = sp;return;
   }
   $16 = HEAP32[$pParse>>2]|0;
   $17 = HEAP16[$11>>1]|0;
   $18 = $17 << 16 >> 16;
   $19 = (($pTab) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + (($18*24)|0)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_sqlite3DbStrDup($16,$22)|0);
   $24 = (($14) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 4|0);
   HEAP32[$26>>2] = $23;
   $27 = (($pParse) + 452|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = HEAP32[$24>>2]|0;
   $30 = (($29) + 12|0);
   HEAP8[$30>>0] = $28;
   $31 = (($pTab) + 45|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = (_sqlite3CreateIndex($pParse,0,0,0,$14,$33,0,0,0,0)|0);
   $35 = ($34|0)==(0|0);
   if ($35) {
    STACKTOP = sp;return;
   } else {
    $36 = (($34) + 55|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 & -4;
    $39 = $38 | 2;
    HEAP8[$36>>0] = $39;
    HEAP16[$11>>1] = -1;
    $pPk$0 = $34;
    break;
   }
  } else {
   $40 = (_sqlite3PrimaryKeyIndex($pTab)|0);
   $pPk$0 = $40;
  }
 } while(0);
 $41 = (($pPk$0) + 55|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 | 32;
 HEAP8[$41>>0] = $43;
 $44 = (($pPk$0) + 50|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = ($45<<16>>16)==(0);
 if ($47) {
  $59 = $43;
 } else {
  $48 = (($pPk$0) + 4|0);
  $49 = (($pTab) + 4|0);
  $i$018 = 0;
  while(1) {
   $50 = HEAP32[$48>>2]|0;
   $51 = (($50) + ($i$018<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = HEAP32[$49>>2]|0;
   $55 = ((($54) + (($53*24)|0)|0) + 20|0);
   HEAP8[$55>>0] = 1;
   $56 = (($i$018) + 1)|0;
   $57 = ($56|0)<($46|0);
   if ($57) {
    $i$018 = $56;
   } else {
    break;
   }
  }
  $$pre = HEAP8[$41>>0]|0;
  $59 = $$pre;
 }
 $58 = $59 | 8;
 HEAP8[$41>>0] = $58;
 $60 = (($pTab) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($pPk$0) + 44|0);
 HEAP32[$62>>2] = $61;
 $63 = (($pTab) + 8|0);
 $pIdx$013 = HEAP32[$63>>2]|0;
 $64 = ($pIdx$013|0)==(0|0);
 L23: do {
  if (!($64)) {
   $65 = (($pPk$0) + 4|0);
   $66 = (($pPk$0) + 32|0);
   $pIdx$014 = $pIdx$013;
   L25: while(1) {
    $67 = (($pIdx$014) + 55|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 & 3;
    $70 = ($69<<24>>24)==(2);
    L27: do {
     if (!($70)) {
      if ($47) {
       $$phi$trans$insert = (($pIdx$014) + 50|0);
       $$pre25 = HEAP16[$$phi$trans$insert>>1]|0;
       $88 = $$pre25;
      } else {
       $71 = (($pIdx$014) + 4|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (($pIdx$014) + 50|0);
       $74 = HEAP16[$73>>1]|0;
       $75 = $74&65535;
       $76 = HEAP32[$65>>2]|0;
       $i$14 = 0;$n$05 = 0;
       while(1) {
        $77 = (($76) + ($i$14<<1)|0);
        $78 = HEAP16[$77>>1]|0;
        $79 = $78 << 16 >> 16;
        $80 = (_hasColumn($72,$75,$79)|0);
        $81 = ($80|0)==(0);
        $82 = $81&1;
        $$n$0 = (($82) + ($n$05))|0;
        $83 = (($i$14) + 1)|0;
        $84 = ($83|0)<($46|0);
        if ($84) {
         $i$14 = $83;$n$05 = $$n$0;
        } else {
         break;
        }
       }
       $85 = ($$n$0|0)==(0);
       $86 = (($pIdx$014) + 50|0);
       if ($85) {
        $88 = $74;
       } else {
        $89 = $74&65535;
        $90 = (($89) + ($$n$0))|0;
        $91 = (_resizeIndexObject($0,$pIdx$014,$90)|0);
        $92 = ($91|0)==(0);
        if (!($92)) {
         break L25;
        }
        if ($47) {
         break;
        }
        $93 = HEAP16[$86>>1]|0;
        $94 = $93&65535;
        $95 = (($pIdx$014) + 4|0);
        $96 = (($pIdx$014) + 32|0);
        $99 = $93;$i$29 = 0;$j$08 = $94;
        while(1) {
         $97 = HEAP32[$95>>2]|0;
         $98 = $99&65535;
         $100 = HEAP32[$65>>2]|0;
         $101 = (($100) + ($i$29<<1)|0);
         $102 = HEAP16[$101>>1]|0;
         $103 = $102 << 16 >> 16;
         $104 = (_hasColumn($97,$98,$103)|0);
         $105 = ($104|0)==(0);
         if ($105) {
          $106 = (($97) + ($j$08<<1)|0);
          HEAP16[$106>>1] = $102;
          $107 = HEAP32[$66>>2]|0;
          $108 = (($107) + ($i$29<<2)|0);
          $109 = HEAP32[$108>>2]|0;
          $110 = HEAP32[$96>>2]|0;
          $111 = (($110) + ($j$08<<2)|0);
          HEAP32[$111>>2] = $109;
          $112 = (($j$08) + 1)|0;
          $j$1 = $112;
         } else {
          $j$1 = $j$08;
         }
         $113 = (($i$29) + 1)|0;
         $114 = ($113|0)<($46|0);
         if (!($114)) {
          break L27;
         }
         $$pre26 = HEAP16[$86>>1]|0;
         $99 = $$pre26;$i$29 = $113;$j$08 = $j$1;
        }
       }
      }
      $87 = (($pIdx$014) + 52|0);
      HEAP16[$87>>1] = $88;
     }
    } while(0);
    $115 = (($pIdx$014) + 20|0);
    $pIdx$0 = HEAP32[$115>>2]|0;
    $116 = ($pIdx$0|0)==(0|0);
    if ($116) {
     break L23;
    } else {
     $pIdx$014 = $pIdx$0;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $117 = (($pTab) + 38|0);
 $118 = HEAP16[$117>>1]|0;
 $119 = $118 << 16 >> 16;
 $120 = ($46|0)<($119|0);
 if (!($120)) {
  $139 = (($pPk$0) + 52|0);
  HEAP16[$139>>1] = $118;
  STACKTOP = sp;return;
 }
 $121 = (_resizeIndexObject($0,$pPk$0,$119)|0);
 $122 = ($121|0)==(0);
 if (!($122)) {
  STACKTOP = sp;return;
 }
 $123 = HEAP16[$117>>1]|0;
 $124 = ($123<<16>>16)>(0);
 if (!($124)) {
  STACKTOP = sp;return;
 }
 $125 = (($pPk$0) + 4|0);
 $126 = (($pPk$0) + 32|0);
 $140 = $123;$i$32 = 0;$j$21 = $46;
 while(1) {
  $127 = HEAP32[$125>>2]|0;
  $128 = (_hasColumn($127,$j$21,$i$32)|0);
  $129 = ($128|0)==(0);
  if ($129) {
   $130 = $i$32&65535;
   $131 = (($127) + ($j$21<<1)|0);
   HEAP16[$131>>1] = $130;
   $132 = HEAP32[$126>>2]|0;
   $133 = (($132) + ($j$21<<2)|0);
   HEAP32[$133>>2] = 3592;
   $134 = (($j$21) + 1)|0;
   $$pre22 = HEAP16[$117>>1]|0;
   $137 = $$pre22;$j$3 = $134;
  } else {
   $137 = $140;$j$3 = $j$21;
  }
  $135 = (($i$32) + 1)|0;
  $136 = $137 << 16 >> 16;
  $138 = ($135|0)<($136|0);
  if ($138) {
   $140 = $137;$i$32 = $135;$j$21 = $j$3;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _estimateTableWidth($pTab) {
 $pTab = $pTab|0;
 var $$lobit = 0, $$wTable$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$03 = 0, $pTabCol$02 = 0, $wTable$0$lcssa = 0, $wTable$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)>(0);
 if ($2) {
  $3 = (($pTab) + 4|0);
  $4 = $1 << 16 >> 16;
  $5 = HEAP32[$3>>2]|0;
  $i$03 = $4;$pTabCol$02 = $5;$wTable$01 = 0;
  while(1) {
   $6 = (($pTabCol$02) + 22|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = (($8) + ($wTable$01))|0;
   $10 = (($i$03) + -1)|0;
   $11 = (($pTabCol$02) + 24|0);
   $12 = ($10|0)>(0);
   if ($12) {
    $i$03 = $10;$pTabCol$02 = $11;$wTable$01 = $9;
   } else {
    $wTable$0$lcssa = $9;
    break;
   }
  }
 } else {
  $wTable$0$lcssa = 0;
 }
 $13 = (($pTab) + 36|0);
 $14 = HEAP16[$13>>1]|0;
 $$lobit = ($14&65535) >>> 15;
 $15 = $$lobit&65535;
 $$wTable$0 = (($15) + ($wTable$0$lcssa))|0;
 $16 = $$wTable$0 << 2;
 $17 = (_sqlite3LogEst($16,0)|0);
 $18 = (($pTab) + 42|0);
 HEAP16[$18>>1] = $17;
 STACKTOP = sp;return;
}
function _createTableStmt($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$012 = 0, $i$16 = 0, $k = 0, $n$0$lcssa = 0, $n$010 = 0, $pCol$011 = 0, $pCol$15 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $zSep$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $k = sp + 20|0;
 $0 = (($p) + 4|0);
 $1 = (($p) + 38|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($2<<16>>16)>(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $i$012 = 0;$n$010 = 0;$pCol$011 = $5;
  while(1) {
   $6 = HEAP32[$pCol$011>>2]|0;
   $7 = (_identLength($6)|0);
   $8 = (($n$010) + 5)|0;
   $9 = (($8) + ($7))|0;
   $10 = (($i$012) + 1)|0;
   $11 = (($pCol$011) + 24|0);
   $12 = ($10|0)<($3|0);
   if ($12) {
    $i$012 = $10;$n$010 = $9;$pCol$011 = $11;
   } else {
    $n$0$lcssa = $9;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $13 = HEAP32[$p>>2]|0;
 $14 = (_identLength($13)|0);
 $15 = (($14) + ($n$0$lcssa))|0;
 $16 = ($15|0)<(50);
 $$1 = $16 ? 9928 : 26904;
 $$2 = $16 ? 23984 : 26912;
 $17 = ($3*6)|0;
 $18 = (($17) + 35)|0;
 $19 = (($18) + ($15))|0;
 $20 = (_sqlite3DbMallocRaw(0,$19)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (($db) + 64|0);
  HEAP8[$22>>0] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_sqlite3_snprintf($19,$20,26920,$vararg_buffer)|0);
 $23 = (_sqlite3Strlen30($20)|0);
 HEAP32[$k>>2] = $23;
 $24 = HEAP32[$p>>2]|0;
 _identPut($20,$k,$24);
 $25 = HEAP32[$k>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$k>>2] = $26;
 $27 = (($20) + ($25)|0);
 HEAP8[$27>>0] = 40;
 $28 = HEAP16[$1>>1]|0;
 $29 = ($28<<16>>16)>(0);
 $30 = (($19) - ($26))|0;
 $31 = (($20) + ($26)|0);
 if ($29) {
  $32 = HEAP32[$0>>2]|0;
  $$ = $16 ? 1728 : 26896;
  $33 = $30;$34 = $31;$36 = $26;$i$16 = 0;$pCol$15 = $32;$zSep$14 = $$;
  while(1) {
   (_sqlite3_snprintf($33,$34,$zSep$14,$vararg_buffer1)|0);
   $35 = (($20) + ($36)|0);
   $37 = (_sqlite3Strlen30($35)|0);
   $38 = (($37) + ($36))|0;
   HEAP32[$k>>2] = $38;
   $39 = HEAP32[$pCol$15>>2]|0;
   _identPut($20,$k,$39);
   $40 = (($pCol$15) + 21|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = (($42) + -97)|0;
   $44 = (26936 + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (_sqlite3Strlen30($45)|0);
   $47 = HEAP32[$k>>2]|0;
   $48 = (($20) + ($47)|0);
   _memcpy(($48|0),($45|0),($46|0))|0;
   $49 = (($47) + ($46))|0;
   HEAP32[$k>>2] = $49;
   $50 = (($i$16) + 1)|0;
   $51 = (($pCol$15) + 24|0);
   $52 = HEAP16[$1>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = ($50|0)<($53|0);
   $55 = (($19) - ($49))|0;
   $56 = (($20) + ($49)|0);
   if ($54) {
    $33 = $55;$34 = $56;$36 = $49;$i$16 = $50;$pCol$15 = $51;$zSep$14 = $$1;
   } else {
    $$lcssa = $55;$$lcssa3 = $56;
    break;
   }
  }
 } else {
  $$lcssa = $30;$$lcssa3 = $31;
 }
 HEAP32[$vararg_buffer3>>2] = $$2;
 (_sqlite3_snprintf($$lcssa,$$lcssa3,1712,$vararg_buffer3)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _identLength($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $n$0 = 0, $n$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $z;$n$0 = 0;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  if ((($0<<24>>24) == 34)) {
   $1 = (($n$0) + 1)|0;
   $n$1 = $1;
  } else if ((($0<<24>>24) == 0)) {
   break;
  } else {
   $n$1 = $n$0;
  }
  $2 = (($n$1) + 1)|0;
  $3 = (($$0) + 1|0);
  $$0 = $3;$n$0 = $2;
 }
 $4 = (($n$0) + 2)|0;
 STACKTOP = sp;return ($4|0);
}
function _identPut($z,$pIdx,$zSignedIdent) {
 $z = $z|0;
 $pIdx = $pIdx|0;
 $zSignedIdent = $zSignedIdent|0;
 var $$ = 0, $$ph = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$1$lcssa = 0, $i$1$ph = 0, $i$12 = 0, $i$2 = 0, $i$3 = 0, $j$0$lcssa = 0, $j$03 = 0, $j$11 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pIdx>>2]|0;
 $1 = HEAP8[$zSignedIdent>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $20 = 0;$j$0$lcssa = 0;
  } else {
   $8 = $1;$j$03 = 0;
   while(1) {
    $7 = $8&255;
    $9 = (48 + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 & 6;
    $12 = ($11<<24>>24)!=(0);
    $13 = ($8<<24>>24)==(95);
    $or$cond = $12 | $13;
    $4 = (($j$03) + 1)|0;
    if (!($or$cond)) {
     $20 = $8;$j$0$lcssa = $j$03;
     break L1;
    }
    $3 = (($zSignedIdent) + ($4)|0);
    $5 = HEAP8[$3>>0]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $20 = 0;$j$0$lcssa = $4;
     break;
    } else {
     $8 = $5;$j$03 = $4;
    }
   }
  }
 } while(0);
 $14 = $1&255;
 $15 = (($14) + -48)|0;
 $16 = ($15>>>0)<(10);
 if ($16) {
  label = 7;
 } else {
  $17 = (_sqlite3KeywordCode($zSignedIdent,$j$0$lcssa)|0);
  $18 = ($17|0)==(27);
  if ($18) {
   $19 = ($j$0$lcssa|0)==(0);
   $not$ = ($20<<24>>24)!=(0);
   $$ = $19 | $not$;
   if ($$) {
    label = 7;
   } else {
    $$ph = 0;$24 = $1;$i$1$ph = $0;
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = (($0) + 1)|0;
  $22 = (($z) + ($0)|0);
  HEAP8[$22>>0] = 34;
  $$pre = HEAP8[$zSignedIdent>>0]|0;
  $$ph = 1;$24 = $$pre;$i$1$ph = $21;
 }
 $23 = ($24<<24>>24)==(0);
 if ($23) {
  $i$1$lcssa = $i$1$ph;
 } else {
  $27 = $24;$29 = $zSignedIdent;$i$12 = $i$1$ph;$j$11 = 0;
  while(1) {
   $25 = (($i$12) + 1)|0;
   $26 = (($z) + ($i$12)|0);
   HEAP8[$26>>0] = $27;
   $28 = HEAP8[$29>>0]|0;
   $30 = ($28<<24>>24)==(34);
   if ($30) {
    $31 = (($i$12) + 2)|0;
    $32 = (($z) + ($25)|0);
    HEAP8[$32>>0] = 34;
    $i$2 = $31;
   } else {
    $i$2 = $25;
   }
   $33 = (($j$11) + 1)|0;
   $34 = (($zSignedIdent) + ($33)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $i$1$lcssa = $i$2;
    break;
   } else {
    $27 = $35;$29 = $34;$i$12 = $i$2;$j$11 = $33;
   }
  }
 }
 if (!($$ph)) {
  $i$3 = $i$1$lcssa;
  $39 = (($z) + ($i$3)|0);
  HEAP8[$39>>0] = 0;
  HEAP32[$pIdx>>2] = $i$3;
  STACKTOP = sp;return;
 }
 $37 = (($i$1$lcssa) + 1)|0;
 $38 = (($z) + ($i$1$lcssa)|0);
 HEAP8[$38>>0] = 34;
 $i$3 = $37;
 $39 = (($z) + ($i$3)|0);
 HEAP8[$39>>0] = 0;
 HEAP32[$pIdx>>2] = $i$3;
 STACKTOP = sp;return;
}
function _resizeIndexObject($db,$pIdx,$N) {
 $db = $db|0;
 $pIdx = $pIdx|0;
 $N = $N|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pIdx) + 52|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($2|0)<($N|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($N*7)|0;
 $5 = (_sqlite3DbMallocZero($db,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pIdx) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP16[$0>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 2;
 _memcpy(($5|0),($8|0),($11|0))|0;
 HEAP32[$7>>2] = $5;
 $12 = $N << 2;
 $13 = (($5) + ($12)|0);
 $14 = (($pIdx) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP16[$0>>1]|0;
 $17 = $16&65535;
 $18 = $17 << 1;
 _memcpy(($13|0),($15|0),($18|0))|0;
 HEAP32[$14>>2] = $13;
 $19 = $N << 1;
 $$sum = (($12) + ($19))|0;
 $20 = (($5) + ($$sum)|0);
 $21 = (($pIdx) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP16[$0>>1]|0;
 $24 = $23&65535;
 _memcpy(($20|0),($22|0),($24|0))|0;
 HEAP32[$21>>2] = $20;
 $25 = $N&65535;
 HEAP16[$0>>1] = $25;
 $26 = (($pIdx) + 55|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 | 16;
 HEAP8[$26>>0] = $28;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _codeTableLocks($pParse) {
 $pParse = $pParse|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3GetVdbe($pParse)|0);
 $1 = (($pParse) + 400|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($pParse) + 404|0);
 $i$01 = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($i$01<<4)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($5) + ($i$01<<4)|0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($5) + ($i$01<<4)|0) + 8|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ((($5) + ($i$01<<4)|0) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  (_sqlite3VdbeAddOp4($0,139,$7,$9,$12,$14,-2)|0);
  $15 = (($i$01) + 1)|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = ($15|0)<($16|0);
  if ($17) {
   $i$01 = $15;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3AutoincrementBegin($pParse) {
 $pParse = $pParse|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pParse) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pParse) + 408|0);
 $p$01 = HEAP32[$2>>2]|0;
 $3 = ($p$01|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$pParse>>2]|0;
 $5 = (($4) + 16|0);
 $$idx = (($1) + 32|0);
 $p$02 = $p$01;
 while(1) {
  $6 = (($p$02) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = (($p$02) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($8) + ($7<<4)|0) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  _sqlite3OpenTable($pParse,0,$7,$14,52);
  $15 = (($10) + 1)|0;
  (_sqlite3VdbeAddOp3($1,28,0,$10,$15)|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $16 = (_sqlite3VdbeCurrentAddr($$idx$val)|0);
  $17 = (($10) + -1)|0;
  $18 = (($p$02) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  (_sqlite3VdbeAddOp4($1,97,0,$17,0,$20,0)|0);
  $21 = (($16) + 9)|0;
  (_sqlite3VdbeAddOp2($1,105,0,$21)|0);
  (_sqlite3VdbeAddOp3($1,46,0,0,$10)|0);
  $22 = (($16) + 7)|0;
  (_sqlite3VdbeAddOp3($1,78,$17,$22,$10)|0);
  _sqlite3VdbeChangeP5($1,8);
  (_sqlite3VdbeAddOp2($1,100,0,$15)|0);
  (_sqlite3VdbeAddOp3($1,46,0,1,$10)|0);
  (_sqlite3VdbeAddOp2($1,16,0,$21)|0);
  $23 = (($16) + 2)|0;
  (_sqlite3VdbeAddOp2($1,9,0,$23)|0);
  (_sqlite3VdbeAddOp2($1,25,0,$10)|0);
  (_sqlite3VdbeAddOp0($1,58)|0);
  $p$0 = HEAP32[$p$02>>2]|0;
  $24 = ($p$0|0)==(0|0);
  if ($24) {
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 STACKTOP = sp;return;
}
function _yyStackOverflow($yypParser) {
 $yypParser = $yypParser|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($yypParser) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$yypParser>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$yypParser>>2] = $3;
 $4 = ($2|0)>(0);
 if ($4) {
  while(1) {
   _yy_pop_parser_stack($yypParser);
   $$pr = HEAP32[$yypParser>>2]|0;
   $5 = ($$pr|0)>(-1);
   if (!($5)) {
    break;
   }
  }
 }
 _sqlite3ErrorMsg($1,27176,$vararg_buffer);
 HEAP32[$0>>2] = $1;
 STACKTOP = sp;return;
}
function _sqlite3Prepare($db,$zSql,$nBytes,$saveSqlFlag,$pReprepare,$ppStmt,$pzTail) {
 $db = $db|0;
 $zSql = $zSql|0;
 $nBytes = $nBytes|0;
 $saveSqlFlag = $saveSqlFlag|0;
 $pReprepare = $pReprepare|0;
 $ppStmt = $ppStmt|0;
 $pzTail = $pzTail|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $i$06 = 0, $i$12 = 0, $iFirst$0$ph = 0, $mx$0$ph = 0;
 var $phitmp = 0, $rc$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $zErrMsg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zErrMsg = sp + 28|0;
 HEAP32[$zErrMsg>>2] = 0;
 $0 = (_sqlite3DbMallocZero($db,540)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $rc$0 = 7;
  _sqlite3ParserReset($0);
  _sqlite3DbFree($db,$0);
  $91 = (_sqlite3ApiExit($db,$rc$0)|0);
  STACKTOP = sp;return ($91|0);
 }
 $2 = (($0) + 480|0);
 HEAP32[$2>>2] = $pReprepare;
 $3 = (($db) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 L4: do {
  if ($5) {
   $6 = (($db) + 16|0);
   $92 = $4;$i$06 = 0;
   while(1) {
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($7) + ($i$06<<4)|0) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     $18 = $92;
    } else {
     $11 = (_sqlite3BtreeSchemaLocked($9)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      break;
     }
     $$pre16 = HEAP32[$3>>2]|0;
     $18 = $$pre16;
    }
    $16 = (($i$06) + 1)|0;
    $17 = ($16|0)<($18|0);
    if ($17) {
     $92 = $18;$i$06 = $16;
    } else {
     break L4;
    }
   }
   $13 = HEAP32[$6>>2]|0;
   $14 = (($13) + ($i$06<<4)|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer>>2] = $15;
   _sqlite3Error($db,$11,30928,$vararg_buffer);
   $rc$0 = $11;
   _sqlite3ParserReset($0);
   _sqlite3DbFree($db,$0);
   $91 = (_sqlite3ApiExit($db,$rc$0)|0);
   STACKTOP = sp;return ($91|0);
  }
 } while(0);
 _sqlite3VtabUnlockList($db);
 HEAP32[$0>>2] = $db;
 $19 = (($0) + 428|0);
 HEAP32[$19>>2] = 0;
 $20 = ($nBytes|0)>(-1);
 do {
  if ($20) {
   $21 = ($nBytes|0)==(0);
   if (!($21)) {
    $22 = (($nBytes) + -1)|0;
    $23 = (($zSql) + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     label = 17;
     break;
    }
   }
   $26 = (($db) + 92|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)<($nBytes|0);
   if ($28) {
    _sqlite3Error($db,18,30960,$vararg_buffer1);
    $29 = (_sqlite3ApiExit($db,18)|0);
    $rc$0 = $29;
    _sqlite3ParserReset($0);
    _sqlite3DbFree($db,$0);
    $91 = (_sqlite3ApiExit($db,$rc$0)|0);
    STACKTOP = sp;return ($91|0);
   }
   $30 = (_sqlite3DbStrNDup($db,$zSql,$nBytes)|0);
   $31 = ($30|0)==(0|0);
   if ($31) {
    $38 = (($zSql) + ($nBytes)|0);
    $39 = (($0) + 484|0);
    HEAP32[$39>>2] = $38;
    break;
   } else {
    (_sqlite3RunParser($0,$30,$zErrMsg)|0);
    _sqlite3DbFree($db,$30);
    $32 = (($0) + 484|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33;
    $35 = $30;
    $36 = (($34) - ($35))|0;
    $37 = (($zSql) + ($36)|0);
    HEAP32[$32>>2] = $37;
    break;
   }
  } else {
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  (_sqlite3RunParser($0,$zSql,$zErrMsg)|0);
 }
 $40 = (($db) + 64|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41<<24>>24)==(0);
 $$phi$trans$insert = (($0) + 12|0);
 if ($42) {
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $phitmp = ($$pre|0)==(101);
  $44 = (($0) + 12|0);
  if ($phitmp) {
   HEAP32[$44>>2] = 0;
   $50 = $44;
  } else {
   $50 = $44;
  }
 } else {
  HEAP32[$$phi$trans$insert>>2] = 7;
  $43 = (($0) + 12|0);
  $50 = $43;
 }
 $45 = (($0) + 17|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  _schemaIsValid($0);
 }
 $48 = HEAP8[$40>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  HEAP32[$50>>2] = 7;
 }
 $51 = ($pzTail|0)==(0|0);
 if (!($51)) {
  $52 = (($0) + 484|0);
  $53 = HEAP32[$52>>2]|0;
  HEAP32[$pzTail>>2] = $53;
 }
 $54 = HEAP32[$50>>2]|0;
 $55 = ($54|0)==(0);
 do {
  if ($55) {
   $56 = (($0) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if (!($58)) {
    $59 = (($0) + 454|0);
    $60 = HEAP8[$59>>0]|0;
    if ((($60<<24>>24) == 2)) {
     _sqlite3VdbeSetNumCols($57,4);
     $iFirst$0$ph = 8;$mx$0$ph = 12;
    } else if ((($60<<24>>24) == 0)) {
     break;
    } else {
     _sqlite3VdbeSetNumCols($57,8);
     $iFirst$0$ph = 0;$mx$0$ph = 8;
    }
    $i$12 = $iFirst$0$ph;
    while(1) {
     $61 = HEAP32[$56>>2]|0;
     $62 = (($i$12) - ($iFirst$0$ph))|0;
     $63 = (30984 + ($i$12<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     _sqlite3VdbeSetColName($61,$62,0,$64,0);
     $65 = (($i$12) + 1)|0;
     $66 = ($65|0)<($mx$0$ph|0);
     if ($66) {
      $i$12 = $65;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 $67 = (($db) + 137|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)==(0);
 $70 = (($0) + 8|0);
 if ($69) {
  $71 = HEAP32[$70>>2]|0;
  $72 = (($0) + 484|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73;
  $75 = $zSql;
  $76 = (($74) - ($75))|0;
  _sqlite3VdbeSetSql($71,$zSql,$76,$saveSqlFlag);
 }
 $77 = HEAP32[$70>>2]|0;
 $78 = ($77|0)==(0|0);
 do {
  if ($78) {
   label = 41;
  } else {
   if ($55) {
    $79 = HEAP8[$40>>0]|0;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     label = 41;
     break;
    }
   }
   (_sqlite3VdbeFinalize($77)|0);
  }
 } while(0);
 if ((label|0) == 41) {
  HEAP32[$ppStmt>>2] = $77;
 }
 $81 = HEAP32[$zErrMsg>>2]|0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  _sqlite3Error($db,$54,0,$vararg_buffer6);
 } else {
  HEAP32[$vararg_buffer3>>2] = $81;
  _sqlite3Error($db,$54,1712,$vararg_buffer3);
  _sqlite3DbFree($db,$81);
 }
 $83 = (($0) + 532|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $rc$0 = $54;
  _sqlite3ParserReset($0);
  _sqlite3DbFree($db,$0);
  $91 = (_sqlite3ApiExit($db,$rc$0)|0);
  STACKTOP = sp;return ($91|0);
 } else {
  $87 = $84;
 }
 while(1) {
  $86 = (($87) + 4|0);
  $88 = HEAP32[$86>>2]|0;
  HEAP32[$83>>2] = $88;
  _sqlite3DbFree($db,$87);
  $89 = HEAP32[$83>>2]|0;
  $90 = ($89|0)==(0|0);
  if ($90) {
   $rc$0 = $54;
   break;
  } else {
   $87 = $89;
  }
 }
 _sqlite3ParserReset($0);
 _sqlite3DbFree($db,$0);
 $91 = (_sqlite3ApiExit($db,$rc$0)|0);
 STACKTOP = sp;return ($91|0);
}
function _sqlite3BtreeSchemaLocked($p) {
 $p = $p|0;
 var $0 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = (_querySharedCacheTableLock($p,1,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _schemaIsValid($pParse) {
 $pParse = $pParse|0;
 var $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cookie = 0, $iDb$04 = 0, $openedTransaction$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cookie = sp;
 $0 = HEAP32[$pParse>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($0) + 16|0);
 $5 = (($pParse) + 12|0);
 $iDb$04 = 0;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = ((($6) + ($iDb$04<<4)|0) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $$idx3 = (($8) + 8|0);
   $$idx3$val = HEAP8[$$idx3>>0]|0;
   $10 = (_sqlite3BtreeIsInReadTrans($$idx3$val)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (_sqlite3BtreeBeginTrans($8,0)|0);
    if ((($12|0) == 7) | (($12|0) == 3082)) {
     label = 6;
     break;
    } else if ((($12|0) == 0)) {
     $openedTransaction$0 = 1;
    } else {
     label = 12;
     break;
    }
   } else {
    $openedTransaction$0 = 0;
   }
   $$idx$val = HEAP32[$8>>2]|0;
   $$idx2 = (($8) + 4|0);
   $$idx2$val = HEAP32[$$idx2>>2]|0;
   _sqlite3BtreeGetMeta($$idx$val,$$idx2$val,1,$cookie);
   $14 = HEAP32[$cookie>>2]|0;
   $15 = HEAP32[$4>>2]|0;
   $16 = ((($15) + ($iDb$04<<4)|0) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14|0)==($18|0);
   if (!($19)) {
    _sqlite3ResetOneSchema($0,$iDb$04);
    HEAP32[$5>>2] = 17;
   }
   $20 = ($openedTransaction$0|0)==(0);
   if (!($20)) {
    (_sqlite3BtreeCommit($8)|0);
   }
  }
  $21 = (($iDb$04) + 1)|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $iDb$04 = $21;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($0) + 64|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeSetSql($p,$z,$n,$isPrepareV2) {
 $p = $p|0;
 $z = $z|0;
 $n = $n|0;
 $isPrepareV2 = $isPrepareV2|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 $2 = (_sqlite3DbStrNDup($1,$z,$n)|0);
 $3 = (($p) + 168|0);
 HEAP32[$3>>2] = $2;
 $4 = (($p) + 88|0);
 $5 = $isPrepareV2&65535;
 $6 = HEAP16[$4>>1]|0;
 $7 = ($5 << 10)&65535;
 $8 = $7 & 1024;
 $9 = $6 & -1025;
 $10 = $9 | $8;
 HEAP16[$4>>1] = $10;
 STACKTOP = sp;return;
}
function _querySharedCacheTableLock($p,$iTab,$eLock) {
 $p = $p|0;
 $iTab = $iTab|0;
 $eLock = $eLock|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pIter$0 = 0, $pIter$01 = 0, $pIter$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 9|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($1) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($p|0);
 if (!($7)) {
  $8 = (($1) + 22|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & 32;
  $11 = ($10<<16>>16)==(0);
  if (!($11)) {
   $$0 = 262;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = (($1) + 72|0);
 $pIter$01 = HEAP32[$12>>2]|0;
 $13 = ($pIter$01|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $pIter$02 = $pIter$01;
 }
 while(1) {
  $14 = HEAP32[$pIter$02>>2]|0;
  $15 = ($14|0)==($p|0);
  if (!($15)) {
   $16 = (($pIter$02) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($iTab|0);
   if ($18) {
    $19 = (($pIter$02) + 8|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==($eLock<<24>>24);
    if (!($21)) {
     break;
    }
   }
  }
  $28 = (($pIter$02) + 12|0);
  $pIter$0 = HEAP32[$28>>2]|0;
  $29 = ($pIter$0|0)==(0|0);
  if ($29) {
   $$0 = 0;
   label = 11;
   break;
  } else {
   $pIter$02 = $pIter$0;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($eLock<<24>>24)==(2);
 if (!($22)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($1) + 22|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = $25 | 64;
 $27 = $26&65535;
 HEAP16[$23>>1] = $27;
 $$0 = 262;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeSwap($pA,$pB) {
 $pA = $pA|0;
 $pB = $pB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $tmp = sp;
 _memcpy(($tmp|0),($pA|0),208)|0;
 _memcpy(($pA|0),($pB|0),208)|0;
 _memcpy(($pB|0),($tmp|0),208)|0;
 $0 = (($pA) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pB) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$2>>2] = $1;
 $4 = (($pA) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pB) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 HEAP32[$6>>2] = $5;
 $8 = (($pA) + 168|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pB) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$8>>2] = $11;
 HEAP32[$10>>2] = $9;
 $12 = (($pA) + 88|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($pB) + 88|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $13 & 1024;
 $17 = $15 & -1025;
 $18 = $17 | $16;
 HEAP16[$14>>1] = $18;
 STACKTOP = sp;return;
}
function _sqlite3VdbeResetStepResult($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 80|0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3FkDelete($db,$pTab) {
 $db = $db|0;
 $pTab = $pTab|0;
 var $$in = 0, $$in$us = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pFKey$0$ = 0, $pFKey$0$$us = 0, $pFKey$01 = 0, $pFKey$01$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pTab) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($db|0)==(0|0);
 $4 = (($pTab) + 68|0);
 $5 = (($db) + 512|0);
 if ($3) {
  $pFKey$01$us = $1;
  while(1) {
   $6 = (($pFKey$01$us) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   $9 = (($pFKey$01$us) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   if ($8) {
    $12 = ($10|0)==(0|0);
    $pFKey$0$$us = $12 ? $pFKey$01$us : $10;
    $$in$us = (($pFKey$0$$us) + 8|0);
    $13 = HEAP32[$$in$us>>2]|0;
    $14 = HEAP32[$4>>2]|0;
    $15 = (($14) + 56|0);
    $16 = (_sqlite3Strlen30($13)|0);
    (_sqlite3HashInsert($15,$13,$16,$10)|0);
   } else {
    $11 = (($7) + 12|0);
    HEAP32[$11>>2] = $10;
   }
   $17 = HEAP32[$9>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = HEAP32[$6>>2]|0;
    $20 = (($17) + 16|0);
    HEAP32[$20>>2] = $19;
   }
   $21 = (($pFKey$01$us) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   _fkTriggerDelete(0,$22);
   $23 = (($pFKey$01$us) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   _fkTriggerDelete(0,$24);
   $25 = (($pFKey$01$us) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   _sqlite3DbFree(0,$pFKey$01$us);
   $27 = ($26|0)==(0|0);
   if ($27) {
    break;
   } else {
    $pFKey$01$us = $26;
   }
  }
  STACKTOP = sp;return;
 } else {
  $pFKey$01 = $1;
 }
 while(1) {
  $28 = HEAP32[$5>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = (($pFKey$01) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   $33 = (($pFKey$01) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   if ($32) {
    $36 = ($34|0)==(0|0);
    $pFKey$0$ = $36 ? $pFKey$01 : $34;
    $$in = (($pFKey$0$) + 8|0);
    $37 = HEAP32[$$in>>2]|0;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + 56|0);
    $40 = (_sqlite3Strlen30($37)|0);
    (_sqlite3HashInsert($39,$37,$40,$34)|0);
   } else {
    $35 = (($31) + 12|0);
    HEAP32[$35>>2] = $34;
   }
   $41 = HEAP32[$33>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    $43 = HEAP32[$30>>2]|0;
    $44 = (($41) + 16|0);
    HEAP32[$44>>2] = $43;
   }
  }
  $45 = (($pFKey$01) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  _fkTriggerDelete($db,$46);
  $47 = (($pFKey$01) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  _fkTriggerDelete($db,$48);
  $49 = (($pFKey$01) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  _sqlite3DbFree($db,$pFKey$01);
  $51 = ($50|0)==(0|0);
  if ($51) {
   break;
  } else {
   $pFKey$01 = $50;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VtabClear($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($db|0)==(0|0);
 if ($0) {
  label = 3;
 } else {
  $1 = (($db) + 512|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  (_vtabDisconnectAll(0,$p)|0);
 }
 $4 = (($p) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($p) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $18 = $8;$i$01 = 0;
  while(1) {
   $10 = ($i$01|0)==(1);
   if ($10) {
    $16 = $18;
   } else {
    $11 = HEAP32[$4>>2]|0;
    $12 = (($11) + ($i$01<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    _sqlite3DbFree($db,$13);
    $$pre2 = HEAP32[$7>>2]|0;
    $16 = $$pre2;
   }
   $14 = (($i$01) + 1)|0;
   $15 = ($14|0)<($16|0);
   if ($15) {
    $18 = $16;$i$01 = $14;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $17 = $$pre;
 } else {
  $17 = $5;
 }
 _sqlite3DbFree($db,$17);
 STACKTOP = sp;return;
}
function _vtabDisconnectAll($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pRet$0$ph5 = 0, $pRet$0$ph7 = 0, $pVTable$0$ph6 = 0, $pVTable$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $pRet$0$ph5 = 0;
  STACKTOP = sp;return ($pRet$0$ph5|0);
 } else {
  $pRet$0$ph7 = 0;$pVTable$0$ph6 = $1;
 }
 L3: while(1) {
  $pVTable$03 = $pVTable$0$ph6;
  while(1) {
   $3 = HEAP32[$pVTable$03>>2]|0;
   $4 = (($pVTable$03) + 24|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($db|0);
   if ($6) {
    break;
   }
   $8 = (($3) + 324|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$4>>2] = $9;
   HEAP32[$8>>2] = $pVTable$03;
   $10 = ($5|0)==(0|0);
   if ($10) {
    $pRet$0$ph5 = $pRet$0$ph7;
    label = 6;
    break L3;
   } else {
    $pVTable$03 = $5;
   }
  }
  HEAP32[$0>>2] = $pVTable$03;
  HEAP32[$4>>2] = 0;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $pRet$0$ph5 = $pVTable$03;
   label = 6;
   break;
  } else {
   $pRet$0$ph7 = $pVTable$03;$pVTable$0$ph6 = $5;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($pRet$0$ph5|0);
 }
 return 0|0;
}
function _saveAllCursors($pBt,$iRoot,$pExcept) {
 $pBt = $pBt|0;
 $iRoot = $iRoot|0;
 $pExcept = $pExcept|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 8|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($iRoot|0)==(0);
 $p$02 = $p$01;
 L4: while(1) {
  $3 = ($p$02|0)==($pExcept|0);
  do {
   if (!($3)) {
    if (!($2)) {
     $4 = (($p$02) + 24|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ($5|0)==($iRoot|0);
     if (!($6)) {
      break;
     }
    }
    $7 = (($p$02) + 83|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(1);
    if ($9) {
     $10 = (_saveCursorPosition($p$02)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      break;
     } else {
      $$0 = $10;
      label = 10;
      break L4;
     }
    } else {
     _btreeReleaseAllCursorPages($p$02);
     break;
    }
   }
  } while(0);
  $12 = (($p$02) + 8|0);
  $p$0 = HEAP32[$12>>2]|0;
  $13 = ($p$0|0)==(0|0);
  if ($13) {
   $$0 = 0;
   label = 10;
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _saveCursorPosition($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 64|0);
 _sqlite3BtreeKeySize($pCur,$0);
 $1 = (($pCur) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = $0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_sqlite3Malloc($8)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $rc$01 = 7;
    _invalidateOverflowCache($pCur);
    STACKTOP = sp;return ($rc$01|0);
   }
   $14 = $0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (_sqlite3BtreeKey($pCur,0,$16,$12)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = (($pCur) + 72|0);
    HEAP32[$22>>2] = $12;
    break;
   }
   _sqlite3_free($12);
   $rc$01 = $20;
   _invalidateOverflowCache($pCur);
   STACKTOP = sp;return ($rc$01|0);
  }
 } while(0);
 _btreeReleaseAllCursorPages($pCur);
 $23 = (($pCur) + 83|0);
 HEAP8[$23>>0] = 3;
 $rc$01 = 0;
 _invalidateOverflowCache($pCur);
 STACKTOP = sp;return ($rc$01|0);
}
function _btreeReleaseAllCursorPages($pCur) {
 $pCur = $pCur|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 86|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)<(0);
 if ($2) {
  HEAP16[$0>>1] = -1;
  STACKTOP = sp;return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $3 = ((($pCur) + ($i$01<<2)|0) + 128|0);
  $4 = HEAP32[$3>>2]|0;
  _releasePage($4);
  HEAP32[$3>>2] = 0;
  $5 = (($i$01) + 1)|0;
  $6 = HEAP16[$0>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = ($i$01|0)<($7|0);
  if ($8) {
   $i$01 = $5;
  } else {
   break;
  }
 }
 HEAP16[$0>>1] = -1;
 STACKTOP = sp;return;
}
function _sqlite3BtreeKeySize($pCur,$pSize) {
 $pCur = $pCur|0;
 $pSize = $pSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if (!($2)) {
  $24 = 0;$27 = 0;
  $22 = $pSize;
  $23 = $22;
  HEAP32[$23>>2] = $24;
  $25 = (($22) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $27;
  STACKTOP = sp;return;
 }
 $3 = (($pCur) + 32|0);
 $4 = (($pCur) + 58|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $7 = (($pCur) + 86|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ((($pCur) + ($9<<2)|0) + 128|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($pCur) + ($9<<1)|0) + 88|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  _btreeParseCell($11,$14,$3);
  $15 = (($pCur) + 82|0);
  HEAP8[$15>>0] = 1;
 }
 $16 = $3;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $24 = $18;$27 = $21;
 $22 = $pSize;
 $23 = $22;
 HEAP32[$23>>2] = $24;
 $25 = (($22) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $27;
 STACKTOP = sp;return;
}
function _sqlite3BtreeKey($pCur,$offset,$amt,$pBuf) {
 $pCur = $pCur|0;
 $offset = $offset|0;
 $amt = $amt|0;
 $pBuf = $pBuf|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_accessPayload($pCur,$offset,$amt,$pBuf,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _allocSpace($pBuf,$nByte,$ppFrom,$pEnd,$pnByte) {
 $pBuf = $pBuf|0;
 $nByte = $nByte|0;
 $ppFrom = $ppFrom|0;
 $pEnd = $pEnd|0;
 $pnByte = $pnByte|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBuf|0)==(0|0);
 do {
  if ($0) {
   $1 = (($nByte) + 7)|0;
   $2 = $1 & -8;
   $3 = HEAP32[$ppFrom>>2]|0;
   $4 = (($3) + ($2)|0);
   $5 = ($4>>>0)>($pEnd>>>0);
   if ($5) {
    $6 = HEAP32[$pnByte>>2]|0;
    $7 = (($6) + ($2))|0;
    HEAP32[$pnByte>>2] = $7;
    $$0 = 0;
    break;
   } else {
    HEAP32[$ppFrom>>2] = $4;
    $$0 = $3;
    break;
   }
  } else {
   $$0 = $pBuf;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _freeP4($db,$p4type,$p4) {
 $db = $db|0;
 $p4type = $p4type|0;
 $p4 = $p4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p4|0)==(0|0);
 L1: do {
  if (!($0)) {
   switch ($p4type|0) {
   case -10:  {
    $12 = (($db) + 512|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     break L1;
    }
    _sqlite3VtabUnlock($p4);
    break L1;
    break;
   }
   case -15: case -1: case -13: case -12:  {
    _sqlite3DbFree($db,$p4);
    break L1;
    break;
   }
   case -8:  {
    $7 = (($db) + 512|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     _sqlite3ValueFree($p4);
     break L1;
    } else {
     $10 = (($p4) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     _sqlite3DbFree($db,$11);
     _sqlite3DbFree($db,$p4);
     break L1;
    }
    break;
   }
   case -11:  {
    $4 = (($db) + 512|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     break L1;
    }
    _sqlite3_free($p4);
    break L1;
    break;
   }
   case -5:  {
    _freeEphemeralFunction($db,$p4);
    break L1;
    break;
   }
   case -6:  {
    $1 = (($db) + 512|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = ($2|0)==(0|0);
    if (!($3)) {
     break L1;
    }
    _sqlite3KeyInfoUnref($p4);
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _freeEphemeralFunction($db,$pDef) {
 $db = $db|0;
 $pDef = $pDef|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pDef|0)==(0|0);
 if (!($0)) {
  $1 = (($pDef) + 2|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & 16;
  $4 = ($3<<16>>16)==(0);
  if (!($4)) {
   _sqlite3DbFree($db,$pDef);
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3VtabLock($pVTab) {
 $pVTab = $pVTab|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVTab) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemMove($pTo,$pFrom) {
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _sqlite3VdbeMemRelease($pTo);
 dest=$pTo+0|0; src=$pFrom+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($pFrom) + 28|0);
 HEAP16[$0>>1] = 1;
 $1 = (($pFrom) + 32|0);
 HEAP32[$1>>2] = 0;
 $2 = (($pFrom) + 36|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemFinalize($pMem,$pFunc) {
 $pMem = $pMem|0;
 $pFunc = $pFunc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $rc$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $ctx = sp;
 $0 = ($pFunc|0)==(0|0);
 if ($0) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $1 = (($pFunc) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 dest=$ctx+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = (($ctx) + 8|0);
 $5 = (($ctx) + 36|0);
 HEAP16[$5>>1] = 1;
 $6 = HEAP32[$pMem>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($ctx) + 48|0);
 HEAP32[$7>>2] = $pMem;
 HEAP32[$ctx>>2] = $pFunc;
 FUNCTION_TABLE_vi[$2 & 255]($ctx);
 $8 = HEAP32[$pMem>>2]|0;
 $9 = (($pMem) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 _sqlite3DbFree($8,$10);
 dest=$pMem+0|0; src=$4+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = (($ctx) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $rc$0 = $12;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3RowSetClear($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pChunk$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($p) + 4|0);
  $pChunk$01 = $0;
  while(1) {
   $3 = HEAP32[$pChunk$01>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   _sqlite3DbFree($4,$pChunk$01);
   $5 = ($3|0)==(0|0);
   if ($5) {
    break;
   } else {
    $pChunk$01 = $3;
   }
  }
 }
 HEAP32[$p>>2] = 0;
 $6 = (($p) + 24|0);
 HEAP16[$6>>1] = 0;
 $7 = (($p) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = (($p) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = (($p) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = (($p) + 26|0);
 HEAP8[$10>>0] = 1;
 STACKTOP = sp;return;
}
function _sqlite3VdbeList($p) {
 $p = $p|0;
 var $$0 = 0, $$lcssa = 0, $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $apSub$1$ph = 0, $i$018 = 0, $i$1$lcssa = 0, $i$15 = 0, $i$2 = 0, $j$06 = 0, $j1$0$lcssa = 0, $j1$03 = 0, $nRow$019 = 0, $nRow$1$ph = 0, $nSub$1$ph = 0, $pMem$0 = 0, $pOp$0 = 0;
 var $pSub$0$ph = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 40|0);
 _releaseMemArray($3,8);
 $4 = (($p) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = (($p) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(7);
 if ($7) {
  $8 = (($0) + 64|0);
  HEAP8[$8>>0] = 1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($p) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($p) + 88|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 & 3;
 $14 = ($13<<16>>16)==(1);
 if ($14) {
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 360|0);
  $19 = (($17) + 388|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 & 16;
  $22 = ($21<<16>>16)==(0);
  if ($22) {
   $apSub$1$ph = 0;$nRow$1$ph = $10;$nSub$1$ph = 0;$pSub$0$ph = $18;
  } else {
   $23 = (($17) + 384|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 >>> 2;
   $26 = (($17) + 364|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)==(0);
   if ($28) {
    $apSub$1$ph = $27;$nRow$1$ph = $10;$nSub$1$ph = 0;$pSub$0$ph = $18;
   } else {
    $i$018 = 0;$nRow$019 = $10;
    while(1) {
     $29 = (($27) + ($i$018<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($nRow$019))|0;
     $34 = (($i$018) + 1)|0;
     $35 = ($34|0)<($25|0);
     if ($35) {
      $i$018 = $34;$nRow$019 = $33;
     } else {
      $apSub$1$ph = $27;$nRow$1$ph = $33;$nSub$1$ph = $25;$pSub$0$ph = $18;
      break;
     }
    }
   }
  }
 } else {
  $apSub$1$ph = 0;$nRow$1$ph = $10;$nSub$1$ph = 0;$pSub$0$ph = 0;
 }
 $15 = (($p) + 76|0);
 $16 = (($p) + 4|0);
 $$pre = HEAP32[$15>>2]|0;
 $37 = $$pre;
 while(1) {
  $36 = (($37) + 1)|0;
  HEAP32[$15>>2] = $36;
  $38 = ($37|0)<($nRow$1$ph|0);
  if (!($38)) {
   label = 11;
   break;
  }
  $39 = ($13<<16>>16)==(2);
  if (!($39)) {
   break;
  }
  $40 = HEAP32[$16>>2]|0;
  $41 = (($40) + (($37*20)|0)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)==(-100);
  if ($43) {
   break;
  } else {
   $37 = $36;
  }
 }
 if ((label|0) == 11) {
  HEAP32[$5>>2] = 0;
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($0) + 232|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  HEAP32[$5>>2] = 9;
  $47 = (($p) + 44|0);
  $48 = (_sqlite3ErrStr(9)|0);
  HEAP32[$vararg_buffer>>2] = $48;
  _sqlite3SetString($47,$0,1712,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = HEAP32[$9>>2]|0;
 $50 = ($37|0)<($49|0);
 if ($50) {
  $51 = HEAP32[$16>>2]|0;
  $52 = (($51) + (($37*20)|0)|0);
  $i$2 = $37;$pOp$0 = $52;
 } else {
  $53 = (($37) - ($49))|0;
  $54 = HEAP32[$apSub$1$ph>>2]|0;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)<($56|0);
  if ($57) {
   $$lcssa = $54;$i$1$lcssa = $53;
  } else {
   $59 = $56;$i$15 = $53;$j$06 = 0;
   while(1) {
    $58 = (($i$15) - ($59))|0;
    $60 = (($j$06) + 1)|0;
    $61 = (($apSub$1$ph) + ($60<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($58|0)<($64|0);
    if ($65) {
     $$lcssa = $62;$i$1$lcssa = $58;
     break;
    } else {
     $59 = $64;$i$15 = $58;$j$06 = $60;
    }
   }
  }
  $66 = HEAP32[$$lcssa>>2]|0;
  $67 = (($66) + (($i$1$lcssa*20)|0)|0);
  $i$2 = $i$1$lcssa;$pOp$0 = $67;
 }
 $68 = HEAP16[$11>>1]|0;
 $69 = $68 & 3;
 $70 = ($69<<16>>16)==(1);
 if ($70) {
  $71 = (($2) + 68|0);
  HEAP16[$71>>1] = 4;
  $72 = ($i$2|0)<(0);
  $73 = $72 << 31 >> 31;
  $74 = (($2) + 56|0);
  $75 = $74;
  $76 = $75;
  HEAP32[$76>>2] = $i$2;
  $77 = (($75) + 4)|0;
  $78 = $77;
  HEAP32[$78>>2] = $73;
  $79 = (($2) + 108|0);
  HEAP16[$79>>1] = 2562;
  $80 = HEAP8[$pOp$0>>0]|0;
  $81 = $80&255;
  $82 = (_sqlite3OpcodeName($81)|0);
  $83 = (($2) + 84|0);
  HEAP32[$83>>2] = $82;
  $84 = (_sqlite3Strlen30($82)|0);
  $85 = (($2) + 104|0);
  HEAP32[$85>>2] = $84;
  $86 = (($2) + 110|0);
  HEAP8[$86>>0] = 1;
  $87 = (($2) + 120|0);
  $88 = (($pOp$0) + 1|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89<<24>>24)==(-18);
  if ($90) {
   $91 = $nSub$1$ph << 2;
   $92 = (($91) + 4)|0;
   $93 = ($nSub$1$ph|0)==(0);
   L34: do {
    if ($93) {
     $j1$0$lcssa = 0;
    } else {
     $94 = (($pOp$0) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $j1$03 = 0;
     while(1) {
      $98 = (($apSub$1$ph) + ($j1$03<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)==($95|0);
      $97 = (($j1$03) + 1)|0;
      if ($100) {
       $j1$0$lcssa = $j1$03;
       break L34;
      }
      $96 = ($97|0)<($nSub$1$ph|0);
      if ($96) {
       $j1$03 = $97;
      } else {
       $j1$0$lcssa = $97;
       break;
      }
     }
    }
   } while(0);
   $101 = ($j1$0$lcssa|0)==($nSub$1$ph|0);
   if ($101) {
    $102 = ($nSub$1$ph|0)!=(0);
    $103 = $102&1;
    $104 = (_sqlite3VdbeMemGrow($pSub$0$ph,$92,$103)|0);
    $105 = ($104|0)==(0);
    if ($105) {
     $106 = (($pSub$0$ph) + 4|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (($pOp$0) + 16|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($107) + ($nSub$1$ph<<2)|0);
     HEAP32[$110>>2] = $109;
     $111 = (($pSub$0$ph) + 28|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $114 = $113 | 16;
     $115 = $114&65535;
     HEAP16[$111>>1] = $115;
     $116 = (($pSub$0$ph) + 24|0);
     HEAP32[$116>>2] = $92;
     $pMem$0 = $87;
    } else {
     $pMem$0 = $87;
    }
   } else {
    $pMem$0 = $87;
   }
  } else {
   $pMem$0 = $87;
  }
 } else {
  $pMem$0 = $3;
 }
 $117 = (($pMem$0) + 28|0);
 HEAP16[$117>>1] = 4;
 $118 = (($pOp$0) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)<(0);
 $121 = $120 << 31 >> 31;
 $122 = (($pMem$0) + 16|0);
 $123 = $122;
 $124 = $123;
 HEAP32[$124>>2] = $119;
 $125 = (($123) + 4)|0;
 $126 = $125;
 HEAP32[$126>>2] = $121;
 $127 = (($pMem$0) + 68|0);
 HEAP16[$127>>1] = 4;
 $128 = (($pOp$0) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)<(0);
 $131 = $130 << 31 >> 31;
 $132 = (($pMem$0) + 56|0);
 $133 = $132;
 $134 = $133;
 HEAP32[$134>>2] = $129;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = $131;
 $137 = (($pMem$0) + 108|0);
 HEAP16[$137>>1] = 4;
 $138 = (($pOp$0) + 12|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)<(0);
 $141 = $140 << 31 >> 31;
 $142 = (($pMem$0) + 96|0);
 $143 = $142;
 $144 = $143;
 HEAP32[$144>>2] = $139;
 $145 = (($143) + 4)|0;
 $146 = $145;
 HEAP32[$146>>2] = $141;
 $147 = (($pMem$0) + 120|0);
 $148 = (_sqlite3VdbeMemGrow($147,32,0)|0);
 $149 = ($148|0)==(0);
 if (!($149)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $150 = (($pMem$0) + 148|0);
 HEAP16[$150>>1] = 514;
 $151 = (($pMem$0) + 124|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (_displayP4($pOp$0,$152)|0);
 $154 = HEAP32[$151>>2]|0;
 $155 = ($153|0)==($154|0);
 if ($155) {
  $156 = (_sqlite3Strlen30($153)|0);
  $157 = (($pMem$0) + 144|0);
  HEAP32[$157>>2] = $156;
  $158 = (($pMem$0) + 150|0);
  HEAP8[$158>>0] = 1;
 } else {
  (_sqlite3VdbeMemSetStr($147,$153,-1,1,0)|0);
 }
 $159 = HEAP16[$11>>1]|0;
 $160 = $159 & 3;
 $161 = ($160<<16>>16)==(1);
 do {
  if ($161) {
   $162 = (($pMem$0) + 160|0);
   $163 = (_sqlite3VdbeMemGrow($162,4,0)|0);
   $164 = ($163|0)==(0);
   if ($164) {
    $165 = (($pMem$0) + 188|0);
    HEAP16[$165>>1] = 514;
    $166 = (($pMem$0) + 184|0);
    HEAP32[$166>>2] = 2;
    $167 = (($pMem$0) + 164|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($pOp$0) + 3|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    HEAP32[$vararg_buffer1>>2] = $171;
    (_sqlite3_snprintf(3,$168,34480,$vararg_buffer1)|0);
    $172 = (($pMem$0) + 190|0);
    HEAP8[$172>>0] = 1;
    $173 = (($pMem$0) + 228|0);
    HEAP16[$173>>1] = 1;
    $$pre35 = HEAP16[$11>>1]|0;
    $175 = $$pre35;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $175 = $159;
  }
 } while(0);
 $174 = $175 & 3;
 $176 = $174&65535;
 $177 = $176 << 2;
 $178 = (12 - ($177))|0;
 $179 = $178&65535;
 $180 = (($p) + 84|0);
 HEAP16[$180>>1] = $179;
 $181 = HEAP32[$1>>2]|0;
 $182 = (($181) + 40|0);
 HEAP32[$4>>2] = $182;
 HEAP32[$5>>2] = 0;
 $$0 = 100;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeExec($p) {
 $p = $p|0;
 var $$ = 0, $$132 = 0, $$133 = 0, $$41 = 0, $$46 = 0, $$53 = 0, $$54 = 0, $$55 = 0, $$64 = 0, $$67 = 0, $$68 = 0, $$70 = 0, $$723 = 0, $$73 = 0, $$75 = 0, $$aPermute$0 = 0, $$c = 0, $$iCnt$0 = 0, $$idx = 0, $$idx$val = 0;
 var $$idx$val$idx$val = 0, $$idx78 = 0, $$idx78$val = 0, $$idx78$val$idx = 0, $$idx78$val$idx$val = 0, $$idx79 = 0, $$idx79$val = 0, $$idx79$val$idx = 0, $$idx79$val$idx$val = 0, $$idx80 = 0, $$idx80$val = 0, $$idx81 = 0, $$idx81$val = 0, $$idx81$val$idx$val = 0, $$idx82$val = 0, $$idx83 = 0, $$idx83$val = 0, $$idx84$val = 0, $$idx85 = 0, $$idx85$val = 0;
 var $$idx86 = 0, $$idx86$val = 0, $$idx87$val = 0, $$idx88 = 0, $$idx88$val = 0, $$idx89$val = 0, $$idx90 = 0, $$idx90$val = 0, $$idx91 = 0, $$idx91$val = 0, $$idx92 = 0, $$idx92$val = 0, $$idx93$val = 0, $$idx94$val = 0, $$idx95 = 0, $$idx95$val = 0, $$idx96$val = 0, $$idx97 = 0, $$idx97$val = 0, $$lcssa = 0;
 var $$lcssa171 = 0, $$lobit = 0, $$lobit129 = 0, $$lobit129$not = 0, $$lobit23 = 0, $$lobit28 = 0, $$old = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert667 = 0, $$phi$trans$insert670 = 0, $$pn = 0, $$pr = 0, $$pr109 = 0, $$pre = 0, $$pre$phi694Z2D = 0, $$pre$phi696Z2D = 0, $$pre$phi698Z2D = 0, $$pre$phi700Z2D = 0, $$pre$phi704Z2D = 0;
 var $$pre$phi706Z2D = 0, $$pre$phi712Z2D = 0, $$pre$phiZ2D = 0, $$pre612 = 0, $$pre613 = 0, $$pre614 = 0, $$pre615 = 0, $$pre616 = 0, $$pre617 = 0, $$pre618 = 0, $$pre619 = 0, $$pre622 = 0, $$pre623 = 0, $$pre624 = 0, $$pre625 = 0, $$pre626 = 0, $$pre628 = 0, $$pre629 = 0, $$pre666 = 0, $$pre669 = 0;
 var $$pre671 = 0, $$pre672 = 0, $$pre673 = 0, $$pre674 = 0, $$pre675 = 0, $$pre678 = 0, $$pre687 = 0, $$pre693 = 0, $$pre695 = 0, $$pre697 = 0, $$pre699 = 0, $$pre701 = 0, $$pre703 = 0, $$pre705 = 0, $$pre707 = 0, $$pre711 = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum11 = 0;
 var $$sum16 = 0, $$sum21 = 0, $$sum22 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum34 = 0, $$sum35 = 0, $$sum7 = 0, $$sum714 = 0, $$sum715 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0.0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0;
 var $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0;
 var $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0;
 var $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0;
 var $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0;
 var $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0;
 var $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0;
 var $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0;
 var $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0;
 var $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0;
 var $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0;
 var $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0;
 var $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0;
 var $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0;
 var $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0;
 var $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0;
 var $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0;
 var $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0;
 var $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0;
 var $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0;
 var $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0;
 var $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0;
 var $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0;
 var $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0;
 var $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0;
 var $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0;
 var $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0;
 var $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0;
 var $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0;
 var $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0;
 var $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0;
 var $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0;
 var $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0.0, $1969 = 0.0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0;
 var $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0;
 var $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0;
 var $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0;
 var $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0;
 var $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0;
 var $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0;
 var $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0;
 var $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0;
 var $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0;
 var $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0;
 var $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0;
 var $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0;
 var $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0;
 var $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0;
 var $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0;
 var $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0;
 var $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0;
 var $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0;
 var $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0;
 var $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0;
 var $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0;
 var $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0;
 var $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0;
 var $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0;
 var $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0;
 var $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0;
 var $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0;
 var $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0;
 var $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0;
 var $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0;
 var $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0;
 var $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0;
 var $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0;
 var $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0;
 var $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0;
 var $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0;
 var $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0;
 var $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0;
 var $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0;
 var $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0;
 var $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0;
 var $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0;
 var $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0;
 var $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0;
 var $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0;
 var $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0;
 var $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0;
 var $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0;
 var $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0;
 var $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0;
 var $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0;
 var $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0;
 var $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0;
 var $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0;
 var $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0;
 var $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0;
 var $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0;
 var $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0;
 var $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0;
 var $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0;
 var $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0.0, $3090 = 0;
 var $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0;
 var $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0;
 var $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0;
 var $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0;
 var $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0;
 var $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0;
 var $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0;
 var $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0;
 var $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0;
 var $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0;
 var $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0;
 var $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0;
 var $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0;
 var $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0;
 var $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0;
 var $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0;
 var $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0;
 var $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0;
 var $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0;
 var $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0;
 var $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0;
 var $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0;
 var $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0;
 var $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0;
 var $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0;
 var $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0;
 var $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0;
 var $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0;
 var $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0;
 var $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0;
 var $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0;
 var $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0;
 var $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0;
 var $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0;
 var $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0;
 var $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0;
 var $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0;
 var $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0;
 var $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0.0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $aMem$0401 = 0, $aMem$0401$phi = 0, $aMem$1$ph = 0, $aOp$0453 = 0;
 var $aOp$0453$phi = 0, $aOp$1$ph = 0, $aPermute$0390 = 0, $aPermute$0390$phi = 0, $aPermute$2$ph = 0, $aRes = 0, $aTempRec = 0, $avail = 0, $bIntint$0 = 0, $c$0 = 0, $cnt$0242 = 0, $cnt43$0174 = 0, $cond = 0, $ctx = 0, $ctx96 = 0, $eNew$1 = 0, $eNew$2$ = 0, $eNew$2120 = 0, $exitcond = 0, $exitcond482 = 0;
 var $exitcond485 = 0, $i$0134 = 0, $i11$0 = 0, $i11$1 = 0, $i113$0140 = 0, $i127$0135 = 0, $i15$0 = 0, $i2$0232 = 0, $i7$0226 = 0, $i93$0146 = 0, $iB = 0, $iCnt$0164 = 0, $iCnt$1 = 0, $iCompare$0422 = 0, $iCompare$0422$phi = 0, $iCompare$3$ph = 0, $iGen$0 = 0, $iMeta = 0, $iMeta19 = 0, $iMoved = 0;
 var $iSavepoint$0190 = 0, $iSavepoint$1$ph = 0, $ii$0196 = 0, $ii$1201 = 0, $ii32$0180 = 0, $ii32$1185 = 0, $initData = 0, $j$0 = 0, $j85$0$lcssa = 0, $j85$0159 = 0, $len16$0 = 0, $n$0 = 0, $n1$0 = 0, $n57 = 0, $n64 = 0, $nChange = 0, $nChange$ = 0, $nEntry = 0, $nErr = 0, $nField20$0 = 0;
 var $nHdr$0 = 0, $nHdr$1 = 0, $nProgressLimit$0 = 0, $nProgressLimit$1411 = 0, $nProgressLimit$1411$phi = 0, $nProgressLimit$2 = 0, $nVmStep$0421 = 0, $nVmStep$1 = 0, $nVmStep$2 = 0, $nVmStep$3 = 0, $nVmStep$4 = 0, $nZero$0 = 0, $nZero$1 = 0, $nZero48$0 = 0, $newMax$0 = 0, $not$ = 0, $oc$0 = 0, $oc$1 = 0, $offset = 0, $op$0 = 0;
 var $or$cond = 0, $or$cond128 = 0, $or$cond36 = 0, $or$cond37 = 0, $or$cond42 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond48 = 0, $or$cond49 = 0, $or$cond52 = 0, $or$cond56 = 0, $or$cond57 = 0, $or$cond58 = 0, $or$cond66 = 0, $or$cond71 = 0, $or$cond724 = 0, $p222$0 = 0, $pArg$0231 = 0, $pC67$0 = 0, $pFrame45$0 = 0;
 var $pFrame88$0 = 0, $pFrame88$0152 = 0, $pFrame88$0153 = 0, $pFrame88$1 = 0, $pFrame91$0 = 0, $pFree = 0, $pIdxKey$0 = 0, $pIn1$0 = 0, $pIn1$1 = 0, $pIn1$2216 = 0, $pIn1$3 = 0, $pKeyInfo21$0 = 0, $pMem44$0 = 0, $pMem87$0156 = 0, $pOut$0400 = 0, $pOut$1 = 0, $pOut$2243 = 0, $pOut$3 = 0, $pOut$4 = 0, $pOut$5 = 0;
 var $pOut$6 = 0, $pOut$6$ph = 0, $pRec$0 = 0, $pRec$1 = 0, $pRec$2 = 0, $pRec95$0147 = 0, $pSavepoint$0 = 0, $pSavepoint$0189 = 0, $pSavepoint$0191 = 0, $pVdbe$0 = 0, $pVdbe$0163 = 0, $pVdbe$0165 = 0, $pVtabCursor = 0, $pX130$0136 = 0, $payloadSize64 = 0, $pc$0$ = 0, $pc$0$61 = 0, $pc$0$76 = 0, $pc$0463 = 0, $pc$1 = 0;
 var $pc$11 = 0, $pc$11$ph = 0, $pc$11$ph721 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$2 = 0, $pc$3 = 0, $pc$4 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $pgno = 0, $pgno81 = 0, $phitmp = 0, $phitmp10 = 0, $phitmp14 = 0, $phitmp18 = 0, $phitmp20 = 0, $phitmp30 = 0;
 var $phitmp32 = 0, $phitmp6 = 0, $r = 0, $r35 = 0, $r74 = 0, $r79 = 0, $rB$0 = 0.0, $rc$1 = 0, $rc$16$ph = 0, $rc$17 = 0, $rc$18 = 0, $rc$19 = 0, $rc$2 = 0, $rc$21 = 0, $rc$22 = 0, $rc$27 = 0, $rc$28 = 0, $rc$29 = 0, $rc$3 = 0, $rc$30 = 0;
 var $rc$31 = 0, $rc$32 = 0, $rc$33 = 0, $rc$36 = 0, $rc$37 = 0, $rc$39 = 0, $rc$4 = 0, $rc$42 = 0, $rc$42$ph = 0, $rc$43 = 0, $rc$44 = 0, $rc$45 = 0, $rc$45$ = 0, $rc$5 = 0, $res$0 = 0, $res$0$lobit = 0, $res$0$lobit31 = 0, $res$0$lobit31$not = 0, $res$1 = 0, $res28 = 0;
 var $res34 = 0, $res39 = 0, $res42 = 0, $res53 = 0, $res63 = 0, $res66 = 0, $res68 = 0, $res73 = 0, $res78 = 0, $resetSchemaOnFault$0432 = 0, $resetSchemaOnFault$0432$phi = 0, $resetSchemaOnFault$1$ph = 0, $resetSchemaOnFault$2 = 0, $resetSchemaOnFault$3 = 0, $resetSchemaOnFault$4 = 0, $rowid = 0, $rowid128 = 0, $sContext = 0, $sMem = 0, $scevgep$sum = 0;
 var $scevgep504 = 0, $scevgep506 = 0, $sext = 0, $sqlite3VdbeExec$and_logic$sqlite3VdbeExec$or_logic = 0, $storemerge = 0, $t = 0, $v = 0, $v1$0 = 0, $v2$0 = 0, $v59 = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0;
 var $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $wrFlag$0 = 0;
 var $zAffinity$0215 = 0, $zAffinity14$0 = 0, $zData$0 = 0, $zData$1 = 0, $zHdr$0 = 0, $zHdr$1 = 0, $zHdr$2 = 0, $zType$098717 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912|0;
 $vararg_buffer58 = sp + 512|0;
 $vararg_buffer55 = sp + 504|0;
 $vararg_buffer53 = sp + 496|0;
 $vararg_buffer51 = sp + 488|0;
 $vararg_buffer46 = sp + 472|0;
 $vararg_buffer43 = sp + 464|0;
 $vararg_buffer40 = sp + 456|0;
 $vararg_buffer37 = sp + 448|0;
 $vararg_buffer34 = sp + 440|0;
 $vararg_buffer32 = sp + 432|0;
 $vararg_buffer27 = sp + 416|0;
 $vararg_buffer25 = sp + 408|0;
 $vararg_buffer23 = sp + 400|0;
 $vararg_buffer21 = sp + 392|0;
 $vararg_buffer18 = sp + 384|0;
 $vararg_buffer16 = sp + 376|0;
 $vararg_buffer13 = sp + 368|0;
 $vararg_buffer8 = sp + 352|0;
 $vararg_buffer5 = sp + 344|0;
 $vararg_buffer2 = sp + 336|0;
 $vararg_buffer = sp + 328|0;
 $iB = sp + 320|0;
 $ctx = sp + 248|0;
 $payloadSize64 = sp + 240|0;
 $sMem = sp + 200|0;
 $offset = sp + 712|0;
 $avail = sp + 708|0;
 $t = sp + 704|0;
 $nEntry = sp + 192|0;
 $iMeta = sp + 700|0;
 $iMeta19 = sp + 696|0;
 $pgno = sp + 692|0;
 $res28 = sp + 688|0;
 $r = sp + 668|0;
 $res34 = sp + 664|0;
 $pFree = sp + 660|0;
 $r35 = sp + 640|0;
 $aTempRec = sp + 716|0;
 $res39 = sp + 636|0;
 $v = sp + 184|0;
 $res42 = sp + 632|0;
 $res53 = sp + 628|0;
 $n57 = sp + 624|0;
 $n64 = sp + 176|0;
 $v59 = sp + 168|0;
 $res63 = sp + 620|0;
 $res66 = sp + 616|0;
 $res68 = sp + 612|0;
 $res73 = sp + 608|0;
 $r74 = sp + 588|0;
 $rowid = sp + 160|0;
 $res78 = sp + 584|0;
 $r79 = sp + 564|0;
 $iMoved = sp + 560|0;
 $nChange = sp + 556|0;
 $pgno81 = sp + 552|0;
 $initData = sp + 536|0;
 $nErr = sp + 532|0;
 $val = sp + 152|0;
 $ctx96 = sp + 80|0;
 $aRes = sp + 520|0;
 $pVtabCursor = sp + 516|0;
 $sContext = sp + 8|0;
 $rowid128 = sp;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$p>>2]|0;
 $3 = (($2) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 77|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($p) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 32|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($p) + 80|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(7);
 L1: do {
  if ($20) {
   $$pre693 = (($2) + 64|0);
   $$pre695 = (($p) + 44|0);
   $$pre$phi694Z2D = $$pre693;$$pre$phi696Z2D = $$pre695;$3753 = $14;$3754 = $17;$nVmStep$3 = 0;$pc$13 = 0;$resetSchemaOnFault$3 = 0;
   label = 792;
  } else {
   HEAP32[$18>>2] = 0;
   $21 = (($p) + 136|0);
   $22 = $21;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = 0;
   $26 = (($p) + 20|0);
   HEAP32[$26>>2] = 0;
   $27 = (($2) + 444|0);
   HEAP32[$27>>2] = 0;
   $28 = (($2) + 232|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   L4: do {
    if ($30) {
     $31 = (($2) + 284|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      $$pre697 = (($2) + 292|0);
      $$pre$phi698Z2D = $$pre697;$nProgressLimit$0 = 0;
     } else {
      $34 = (($p) + 124|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(0);
      $37 = (($2) + 292|0);
      $38 = HEAP32[$37>>2]|0;
      if ($36) {
       $$pre$phi698Z2D = $37;$nProgressLimit$0 = $38;
      } else {
       $39 = (($35>>>0) % ($38>>>0))&-1;
       $$pre$phi698Z2D = $37;$nProgressLimit$0 = $39;
      }
     }
     $40 = (($p) + 76|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($2) + 64|0);
     $43 = (($2) + 288|0);
     $44 = (($p) + 176|0);
     $45 = (($p) + 184|0);
     $46 = (($p) + 92|0);
     $47 = $8&255;
     $48 = ($8<<24>>24)==(1);
     $49 = (($2) + 88|0);
     $50 = (($p) + 60|0);
     $51 = (($p) + 12|0);
     $52 = (($ctx) + 60|0);
     $53 = (($ctx) + 56|0);
     $54 = (($ctx) + 8|0);
     $55 = (($ctx) + 36|0);
     $56 = (($ctx) + 69|0);
     $57 = (($ctx) + 64|0);
     $58 = (($p) + 44|0);
     $59 = (($ctx) + 52|0);
     $60 = (($p) + 200|0);
     $61 = (($p) + 56|0);
     $62 = (($p) + 72|0);
     $63 = (($sMem) + 36|0);
     $64 = (($sMem) + 4|0);
     $65 = (($sMem) + 28|0);
     $66 = (($p) + 87|0);
     $67 = (($2) + 148|0);
     $68 = (($2) + 492|0);
     $69 = (($2) + 488|0);
     $70 = (($2) + 62|0);
     $71 = (($2) + 480|0);
     $72 = (($2) + 496|0);
     $73 = (($2) + 504|0);
     $74 = (($2) + 69|0);
     $75 = (($2) + 20|0);
     $76 = (($2) + 24|0);
     $77 = (($p) + 88|0);
     $78 = (($p) + 104|0);
     $79 = (($p) + 152|0);
     $80 = (($p) + 160|0);
     $81 = (($2) + 144|0);
     $82 = (($r) + 4|0);
     $83 = (($r) + 6|0);
     $84 = (($r) + 8|0);
     $85 = (($r35) + 4|0);
     $86 = (($r35) + 8|0);
     $87 = (($2) + 200|0);
     $88 = (($2) + 196|0);
     $89 = (($p) + 116|0);
     $90 = (($r74) + 4|0);
     $91 = (($r74) + 6|0);
     $92 = (($r74) + 8|0);
     $93 = (($r79) + 4|0);
     $94 = (($r79) + 6|0);
     $95 = (($r79) + 8|0);
     $96 = (($2) + 4|0);
     $97 = (($p) + 86|0);
     $98 = (($initData) + 8|0);
     $99 = (($initData) + 4|0);
     $100 = (($2) + 137|0);
     $101 = (($initData) + 12|0);
     $102 = (($2) + 128|0);
     $103 = (($p) + 28|0);
     $104 = (($p) + 36|0);
     $105 = (($p) + 32|0);
     $106 = (($p) + 196|0);
     $107 = (($p) + 144|0);
     $108 = (($ctx96) + 48|0);
     $109 = (($ctx96) + 8|0);
     $110 = (($ctx96) + 36|0);
     $111 = (($ctx96) + 12|0);
     $112 = (($ctx96) + 44|0);
     $113 = (($ctx96) + 40|0);
     $114 = (($ctx96) + 64|0);
     $115 = (($ctx96) + 52|0);
     $116 = (($ctx96) + 68|0);
     $117 = (($aRes) + 8|0);
     $118 = (($aRes) + 4|0);
     $119 = (($sContext) + 8|0);
     $120 = (($sContext) + 36|0);
     $121 = (($sContext) + 64|0);
     $122 = (($2) + 68|0);
     $123 = (($2) + 164|0);
     $124 = (($p) + 168|0);
     $125 = (($2) + 168|0);
     $691 = $14;$694 = $17;$aMem$0401 = $10;$aOp$0453 = $1;$aPermute$0390 = 0;$iCompare$0422 = 0;$nProgressLimit$1411 = $nProgressLimit$0;$nVmStep$0421 = 0;$pOut$0400 = 0;$pc$0463 = $41;$resetSchemaOnFault$0432 = 0;
     L12: while(1) {
      $126 = HEAP8[$42>>0]|0;
      $127 = ($126<<24>>24)==(0);
      if (!($127)) {
       $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $nVmStep$0421;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
       label = 792;
       break L1;
      }
      $128 = (($nVmStep$0421) + 1)|0;
      $129 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 & 2;
      $132 = ($131<<24>>24)==(0);
      if ($132) {
       $pOut$1 = $pOut$0400;
      } else {
       $133 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($aMem$0401) + (($134*40)|0)|0);
       $136 = ((($aMem$0401) + (($134*40)|0)|0) + 28|0);
       $137 = HEAP16[$136>>1]|0;
       $138 = $137 & 9312;
       $139 = ($138<<16>>16)==(0);
       if (!($139)) {
        _sqlite3VdbeMemReleaseExternal($135);
       }
       HEAP16[$136>>1] = 4;
       $pOut$1 = $135;
      }
      $140 = (($aOp$0453) + (($pc$0463*20)|0)|0);
      $141 = HEAP8[$140>>0]|0;
      $142 = $141&255;
      L21: do {
       switch ($142|0) {
       case 23:  {
        $228 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ((($aMem$0401) + (($229*40)|0)|0) + 28|0);
        $231 = HEAP16[$230>>1]|0;
        $232 = $231 & 1;
        $233 = ($232<<16>>16)==(0);
        if ($233) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         label = 27;
        }
        break;
       }
       case 25:  {
        $284 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ($285|0)<(0);
        $287 = $286 << 31 >> 31;
        $288 = (($pOut$1) + 16|0);
        $289 = $288;
        $290 = $289;
        HEAP32[$290>>2] = $285;
        $291 = (($289) + 4)|0;
        $292 = $291;
        HEAP32[$292>>2] = $287;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 24:  {
        label = 27;
        break;
       }
       case 20:  {
        $181 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = (($aMem$0401) + (($182*40)|0)|0);
        $184 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = (($185) + -1)|0;
        $187 = ($186|0)<(0);
        $188 = $187 << 31 >> 31;
        $189 = ((($aMem$0401) + (($182*40)|0)|0) + 16|0);
        $190 = $189;
        $191 = $190;
        HEAP32[$191>>2] = $186;
        $192 = (($190) + 4)|0;
        $193 = $192;
        HEAP32[$193>>2] = $188;
        $194 = ((($aMem$0401) + (($182*40)|0)|0) + 28|0);
        HEAP16[$194>>1] = 4;
        $195 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = ($196|0)==(0);
        $198 = (($196) + -1)|0;
        $pc$0$ = $197 ? $pc$0463 : $198;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $183;$pc$11$ph = $pc$0$;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 27:  {
        $$phi$trans$insert667 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $$pre669 = HEAP32[$$phi$trans$insert667>>2]|0;
        $$phi$trans$insert670 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $$pre671 = HEAP32[$$phi$trans$insert670>>2]|0;
        $338 = $$pre669;$340 = $$pre671;$rc$3 = 0;
        label = 53;
        break;
       }
       case 22:  {
        $212 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $213 = HEAP32[$212>>2]|0;
        $214 = ((($aMem$0401) + (($213*40)|0)|0) + 28|0);
        HEAP16[$214>>1] = 4;
        $215 = ((($aMem$0401) + (($213*40)|0)|0) + 16|0);
        $216 = $215;
        $217 = $216;
        $218 = HEAP32[$217>>2]|0;
        $219 = (($216) + 4)|0;
        $220 = $219;
        $221 = HEAP32[$220>>2]|0;
        $222 = ($pc$0463|0)<(0);
        $223 = $222 << 31 >> 31;
        $224 = $215;
        $225 = $224;
        HEAP32[$225>>2] = $pc$0463;
        $226 = (($224) + 4)|0;
        $227 = $226;
        HEAP32[$227>>2] = $223;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $218;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 16:  {
        $143 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + -1)|0;
        $pc$1 = $145;$rc$1 = 0;
        label = 18;
        break;
       }
       case 36:  {
        $647 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = ($648|0)==(0);
        if ($649) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $650 = (($aMem$0401) + (($648*40)|0)|0);
         _sqlite3VdbeMemSetInt64($650,0,0);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 1:  {
        $651 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $652 = HEAP8[$651>>0]|0;
        $653 = $652&255;
        $654 = HEAP32[$51>>2]|0;
        $655 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $656 = HEAP32[$655>>2]|0;
        $657 = (($aMem$0401) + (($656*40)|0)|0);
        $658 = ($652<<24>>24)==(0);
        if (!($658)) {
         $659 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $660 = HEAP32[$659>>2]|0;
         $661 = (($aMem$0401) + (($660*40)|0)|0);
         $i2$0232 = 0;$pArg$0231 = $661;
         while(1) {
          $662 = (($654) + ($i2$0232<<2)|0);
          HEAP32[$662>>2] = $pArg$0231;
          $663 = (($pArg$0231) + 28|0);
          $664 = HEAP16[$663>>1]|0;
          $665 = $664 & 4096;
          $666 = ($665<<16>>16)==(0);
          if (!($666)) {
           $667 = (_sqlite3VdbeMemMakeWriteable($pArg$0231)|0);
           $668 = ($667|0)==(0);
           if (!($668)) {
            $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
            label = 792;
            break L1;
           }
          }
          $669 = (($i2$0232) + 1)|0;
          $670 = (($pArg$0231) + 40|0);
          $671 = ($669|0)<($653|0);
          if ($671) {
           $i2$0232 = $669;$pArg$0231 = $670;
          } else {
           break;
          }
         }
        }
        $672 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $673 = HEAP32[$672>>2]|0;
        HEAP32[$ctx>>2] = $673;
        HEAP32[$52>>2] = $pc$0463;
        HEAP32[$53>>2] = $p;
        dest=$54+0|0; src=$657+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
        $674 = ((($aMem$0401) + (($656*40)|0)|0) + 28|0);
        HEAP16[$674>>1] = 1;
        $675 = ((($aMem$0401) + (($656*40)|0)|0) + 32|0);
        HEAP32[$675>>2] = 0;
        $676 = ((($aMem$0401) + (($656*40)|0)|0) + 36|0);
        HEAP32[$676>>2] = 0;
        $677 = HEAP16[$55>>1]|0;
        $678 = $677&65535;
        $679 = $678 & 48640;
        $680 = $679 | 1;
        $681 = $680&65535;
        HEAP16[$55>>1] = $681;
        HEAP8[$56>>0] = 0;
        $682 = HEAP32[$ctx>>2]|0;
        $683 = (($682) + 2|0);
        $684 = HEAP16[$683>>1]|0;
        $685 = $684 & 32;
        $686 = ($685<<16>>16)==(0);
        if (!($686)) {
         $$sum34 = (($pc$0463) + -1)|0;
         $687 = ((($aOp$0453) + (($$sum34*20)|0)|0) + 16|0);
         $688 = HEAP32[$687>>2]|0;
         HEAP32[$59>>2] = $688;
        }
        $689 = $11;
        $690 = $689;
        HEAP32[$690>>2] = $691;
        $692 = (($689) + 4)|0;
        $693 = $692;
        HEAP32[$693>>2] = $694;
        $695 = (($682) + 12|0);
        $696 = HEAP32[$695>>2]|0;
        FUNCTION_TABLE_viii[$696 & 255]($ctx,$653,$654);
        $697 = $11;
        $698 = $697;
        $699 = HEAP32[$698>>2]|0;
        $700 = (($697) + 4)|0;
        $701 = $700;
        $702 = HEAP32[$701>>2]|0;
        $703 = HEAP8[$42>>0]|0;
        $704 = ($703<<24>>24)==(0);
        if (!($704)) {
         label = 140;
         break L12;
        }
        $705 = HEAP8[$56>>0]|0;
        $706 = ($705<<24>>24)==(0);
        if ($706) {
         $rc$5 = 0;
        } else {
         $707 = HEAP32[$57>>2]|0;
         $708 = ($707|0)==(0);
         if ($708) {
          $rc$4 = 0;
         } else {
          $709 = (_sqlite3_value_text($54)|0);
          HEAP32[$vararg_buffer13>>2] = $709;
          _sqlite3SetString($58,$2,1712,$vararg_buffer13);
          $710 = HEAP32[$57>>2]|0;
          $rc$4 = $710;
         }
         $711 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $712 = HEAP32[$711>>2]|0;
         _sqlite3VdbeDeleteAuxData($p,$pc$0463,$712);
         $rc$5 = $rc$4;
        }
        (_sqlite3VdbeChangeEncoding($54,$47)|0);
        dest=$657+0|0; src=$54+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
        $713 = (_sqlite3VdbeMemTooBig($657)|0);
        $714 = ($713|0)==(0);
        if ($714) {
         $3759 = $699;$3760 = $702;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $657;$pc$11 = $pc$0463;$rc$42 = $rc$5;
        } else {
         $3764 = $699;$3765 = $702;
         label = 791;
         break L12;
        }
        break;
       }
       case 88: case 87: case 86: case 85:  {
        $715 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $720 = HEAP32[$719>>2]|0;
        $721 = (($aMem$0401) + (($720*40)|0)|0);
        $722 = ((($aMem$0401) + (($716*40)|0)|0) + 28|0);
        $723 = HEAP16[$722>>1]|0;
        $724 = ((($aMem$0401) + (($718*40)|0)|0) + 28|0);
        $725 = HEAP16[$724>>1]|0;
        $726 = $725 | $723;
        $727 = $726 & 1;
        $728 = ($727<<16>>16)==(0);
        if (!($728)) {
         _sqlite3VdbeMemSetNull($721);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $721;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $729 = (($aMem$0401) + (($718*40)|0)|0);
        $730 = (($aMem$0401) + (($716*40)|0)|0);
        $731 = (_sqlite3VdbeIntValue($729)|0);
        $732 = tempRet0;
        $733 = (_sqlite3VdbeIntValue($730)|0);
        $734 = tempRet0;
        $735 = HEAP8[$140>>0]|0;
        $736 = $735&255;
        do {
         if ((($735<<24>>24) == 85)) {
          $737 = $733 & $731;
          $738 = $734 & $732;
          $786 = $737;$789 = $738;
         } else if ((($735<<24>>24) == 86)) {
          $739 = $733 | $731;
          $740 = $734 | $732;
          $786 = $739;$789 = $740;
         } else {
          $741 = ($733|0)==(0);
          $742 = ($734|0)==(0);
          $743 = $741 & $742;
          if ($743) {
           $786 = $731;$789 = $732;
          } else {
           $744 = ($734|0)<(0);
           if ($744) {
            $745 = (175 - ($736))|0;
            $746 = $745&255;
            $747 = ($734|0)>(-1);
            $748 = ($734|0)==(-1);
            $749 = ($733>>>0)>(4294967232);
            $750 = $748 & $749;
            $751 = $747 | $750;
            $752 = (_i64Subtract(0,0,($733|0),($734|0))|0);
            $753 = tempRet0;
            $754 = $751 ? $752 : 64;
            $755 = $751 ? $753 : 0;
            $757 = $755;$760 = $754;$op$0 = $746;
           } else {
            $757 = $734;$760 = $733;$op$0 = $735;
           }
           $756 = ($757|0)>(0);
           $758 = ($757|0)==(0);
           $759 = ($760>>>0)>(63);
           $761 = $758 & $759;
           $762 = $756 | $761;
           if ($762) {
            $763 = ($732|0)>(-1);
            $764 = ($732|0)==(-1);
            $765 = ($731>>>0)>(4294967295);
            $766 = $764 & $765;
            $767 = $763 | $766;
            if ($767) {
             $786 = 0;$789 = 0;
             break;
            }
            $phitmp32 = ($op$0<<24>>24)!=(87);
            $768 = $phitmp32 << 31 >> 31;
            $769 = ($768|0)<(0);
            $770 = $769 << 31 >> 31;
            $786 = $768;$789 = $770;
            break;
           }
           $771 = ($op$0<<24>>24)==(87);
           if ($771) {
            $772 = (_bitshift64Shl(($731|0),($732|0),($760|0))|0);
            $773 = tempRet0;
            $786 = $772;$789 = $773;
            break;
           }
           $774 = (_bitshift64Lshr(($731|0),($732|0),($760|0))|0);
           $775 = tempRet0;
           $776 = ($732|0)<(0);
           if ($776) {
            $777 = (_i64Subtract(64,0,($760|0),($757|0))|0);
            $778 = tempRet0;
            $779 = (_bitshift64Shl(-1,-1,($777|0))|0);
            $780 = tempRet0;
            $781 = $779 | $774;
            $782 = $780 | $775;
            $786 = $781;$789 = $782;
           } else {
            $786 = $774;$789 = $775;
           }
          }
         }
        } while(0);
        $783 = ((($aMem$0401) + (($720*40)|0)|0) + 16|0);
        $784 = $783;
        $785 = $784;
        HEAP32[$785>>2] = $786;
        $787 = (($784) + 4)|0;
        $788 = $787;
        HEAP32[$788>>2] = $789;
        $790 = ((($aMem$0401) + (($720*40)|0)|0) + 28|0);
        $791 = HEAP16[$790>>1]|0;
        $792 = $791&65535;
        $793 = $792 & 48640;
        $794 = $793 | 4;
        $795 = $794&65535;
        HEAP16[$790>>1] = $795;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $721;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 32:  {
        $381 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $382 = HEAP32[$381>>2]|0;
        $383 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $384 = HEAP32[$383>>2]|0;
        $385 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $386 = HEAP32[$385>>2]|0;
        $387 = (($aMem$0401) + (($384*40)|0)|0);
        $388 = (($aMem$0401) + (($386*40)|0)|0);
        $389 = (($382) + ($386))|0;
        $n$0 = $382;$pIn1$0 = $387;$pOut$3 = $388;
        while(1) {
         $390 = (($pOut$3) + 28|0);
         $391 = HEAP16[$390>>1]|0;
         $392 = $391 & 9312;
         $393 = ($392<<16>>16)==(0);
         if (!($393)) {
          _sqlite3VdbeMemReleaseExternal($pOut$3);
         }
         $394 = (($pOut$3) + 36|0);
         $395 = HEAP32[$394>>2]|0;
         dest=$pOut$3+0|0; src=$pIn1$0+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         $396 = (($pIn1$0) + 28|0);
         HEAP16[$396>>1] = 128;
         $397 = (($pIn1$0) + 32|0);
         HEAP32[$397>>2] = 0;
         $398 = (($pIn1$0) + 36|0);
         HEAP32[$398>>2] = $395;
         $399 = (($pIn1$0) + 40|0);
         $400 = (($pOut$3) + 40|0);
         $401 = (($n$0) + -1)|0;
         $402 = ($n$0|0)==(0);
         if ($402) {
          break;
         } else {
          $n$0 = $401;$pIn1$0 = $399;$pOut$3 = $400;
         }
        }
        $scevgep$sum = (($389) + 1)|0;
        $scevgep504 = (($aMem$0401) + (($scevgep$sum*40)|0)|0);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $scevgep504;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 34:  {
        $421 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $422 = HEAP32[$421>>2]|0;
        $423 = (($aMem$0401) + (($422*40)|0)|0);
        $424 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $425 = HEAP32[$424>>2]|0;
        $426 = (($aMem$0401) + (($425*40)|0)|0);
        _sqlite3VdbeMemShallowCopy($426,$423,4096);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $426;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 35:  {
        label = 72;
        break L12;
        break;
       }
       case 33:  {
        $403 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = (($aMem$0401) + (($406*40)|0)|0);
        $408 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = (($aMem$0401) + (($409*40)|0)|0);
        $n1$0 = $404;$pIn1$1 = $407;$pOut$4 = $410;
        while(1) {
         _sqlite3VdbeMemShallowCopy($pOut$4,$pIn1$1,4096);
         $411 = (($pOut$4) + 28|0);
         $412 = HEAP16[$411>>1]|0;
         $413 = $412 & 4096;
         $414 = ($413<<16>>16)==(0);
         if (!($414)) {
          $415 = (_sqlite3VdbeMemMakeWriteable($pOut$4)|0);
          $416 = ($415|0)==(0);
          if (!($416)) {
           $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
           label = 792;
           break L1;
          }
         }
         $417 = ($n1$0|0)==(0);
         if ($417) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$4;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $418 = (($n1$0) + -1)|0;
         $419 = (($pOut$4) + 40|0);
         $420 = (($pIn1$1) + 40|0);
         $n1$0 = $418;$pIn1$1 = $420;$pOut$4 = $419;
        }
        break;
       }
       case 29:  {
        $360 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $361 = HEAP32[$360>>2]|0;
        $362 = (($aMem$0401) + (($361*40)|0)|0);
        $363 = ((($aMem$0401) + (($361*40)|0)|0) + 28|0);
        $364 = HEAP16[$363>>1]|0;
        $365 = $364&65535;
        $366 = $365 & 65406;
        $367 = $366 | 1;
        $368 = $367&65535;
        HEAP16[$363>>1] = $368;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $362;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 30:  {
        $369 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $372 = HEAP32[$371>>2]|0;
        (_sqlite3VdbeMemSetStr($pOut$1,$370,$372,0,0)|0);
        $373 = (($pOut$1) + 30|0);
        HEAP8[$373>>0] = $8;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 31:  {
        $374 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $375 = HEAP32[$374>>2]|0;
        $376 = (($375) + -1)|0;
        $377 = HEAP32[$50>>2]|0;
        $378 = (($377) + (($376*40)|0)|0);
        $379 = (_sqlite3VdbeMemTooBig($378)|0);
        $380 = ($379|0)==(0);
        if (!($380)) {
         $3764 = $691;$3765 = $694;
         label = 791;
         break L12;
        }
        _sqlite3VdbeMemShallowCopy($pOut$1,$378,2048);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 94:  {
        $459 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $460 = HEAP32[$459>>2]|0;
        $461 = (($aMem$0401) + (($460*40)|0)|0);
        $462 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = (($aMem$0401) + (($463*40)|0)|0);
        $465 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $466 = HEAP32[$465>>2]|0;
        $467 = (($aMem$0401) + (($466*40)|0)|0);
        $468 = ((($aMem$0401) + (($460*40)|0)|0) + 28|0);
        $469 = HEAP16[$468>>1]|0;
        $470 = ((($aMem$0401) + (($463*40)|0)|0) + 28|0);
        $471 = HEAP16[$470>>1]|0;
        $472 = $471 | $469;
        $473 = $472 & 1;
        $474 = ($473<<16>>16)==(0);
        if (!($474)) {
         _sqlite3VdbeMemSetNull($467);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $467;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $475 = $469 & 16384;
        $476 = ($475<<16>>16)==(0);
        if ($476) {
         $480 = $471;
        } else {
         $477 = (_sqlite3VdbeMemExpandBlob($461)|0);
         $478 = ($477|0)==(0);
         if (!($478)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
         $$pre672 = HEAP16[$470>>1]|0;
         $480 = $$pre672;
        }
        $479 = $480 & 16384;
        $481 = ($479<<16>>16)==(0);
        if (!($481)) {
         $482 = (_sqlite3VdbeMemExpandBlob($464)|0);
         $483 = ($482|0)==(0);
         if (!($483)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        $484 = HEAP16[$468>>1]|0;
        $485 = $484 & 18;
        $486 = ($485<<16>>16)==(0);
        if ($486) {
         $487 = (_sqlite3VdbeMemStringify($461,$47)|0);
         $488 = ($487|0)==(0);
         if (!($488)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        $489 = HEAP16[$470>>1]|0;
        $490 = $489 & 18;
        $491 = ($490<<16>>16)==(0);
        if ($491) {
         $492 = (_sqlite3VdbeMemStringify($464,$47)|0);
         $493 = ($492|0)==(0);
         if (!($493)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        $494 = ((($aMem$0401) + (($460*40)|0)|0) + 24|0);
        $495 = HEAP32[$494>>2]|0;
        $496 = ((($aMem$0401) + (($463*40)|0)|0) + 24|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = (($497) + ($495))|0;
        $499 = HEAP32[$49>>2]|0;
        $500 = ($498|0)>($499|0);
        if ($500) {
         $3764 = $691;$3765 = $694;
         label = 791;
         break L12;
        }
        $501 = (($498) + 2)|0;
        $502 = ($466|0)==($463|0);
        $503 = $502&1;
        $504 = (_sqlite3VdbeMemGrow($467,$501,$503)|0);
        $505 = ($504|0)==(0);
        if (!($505)) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $506 = ((($aMem$0401) + (($466*40)|0)|0) + 28|0);
        $507 = HEAP16[$506>>1]|0;
        $508 = $507&65535;
        $509 = $508 & 48640;
        $510 = $509 | 2;
        $511 = $510&65535;
        HEAP16[$506>>1] = $511;
        $$pre701 = ((($aMem$0401) + (($466*40)|0)|0) + 4|0);
        if (!($502)) {
         $512 = HEAP32[$$pre701>>2]|0;
         $513 = ((($aMem$0401) + (($463*40)|0)|0) + 4|0);
         $514 = HEAP32[$513>>2]|0;
         $515 = HEAP32[$496>>2]|0;
         _memcpy(($512|0),($514|0),($515|0))|0;
        }
        $516 = HEAP32[$496>>2]|0;
        $517 = HEAP32[$$pre701>>2]|0;
        $518 = (($517) + ($516)|0);
        $519 = ((($aMem$0401) + (($460*40)|0)|0) + 4|0);
        $520 = HEAP32[$519>>2]|0;
        $521 = HEAP32[$494>>2]|0;
        _memcpy(($518|0),($520|0),($521|0))|0;
        $522 = HEAP32[$$pre701>>2]|0;
        $523 = (($522) + ($498)|0);
        HEAP8[$523>>0] = 0;
        $524 = (($498) + 1)|0;
        $525 = HEAP32[$$pre701>>2]|0;
        $526 = (($525) + ($524)|0);
        HEAP8[$526>>0] = 0;
        $527 = HEAP16[$506>>1]|0;
        $528 = $527&65535;
        $529 = $528 | 512;
        $530 = $529&65535;
        HEAP16[$506>>1] = $530;
        $531 = ((($aMem$0401) + (($466*40)|0)|0) + 24|0);
        HEAP32[$531>>2] = $498;
        $532 = ((($aMem$0401) + (($466*40)|0)|0) + 30|0);
        HEAP8[$532>>0] = $8;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $467;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 93: case 92: case 91: case 90: case 89:  {
        $533 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (($aMem$0401) + (($534*40)|0)|0);
        _applyNumericAffinity($535);
        $536 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $537 = HEAP32[$536>>2]|0;
        $538 = (($aMem$0401) + (($537*40)|0)|0);
        _applyNumericAffinity($538);
        $539 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = (($aMem$0401) + (($540*40)|0)|0);
        $542 = ((($aMem$0401) + (($534*40)|0)|0) + 28|0);
        $543 = HEAP16[$542>>1]|0;
        $544 = ((($aMem$0401) + (($537*40)|0)|0) + 28|0);
        $545 = HEAP16[$544>>1]|0;
        $546 = $545 | $543;
        $547 = $546&65535;
        $548 = $547 & 1;
        $549 = ($548|0)==(0);
        L112: do {
         if ($549) {
          $550 = $543 & 4;
          $551 = $550 & $545;
          $552 = ($551<<16>>16)==(0);
          do {
           if ($552) {
            $bIntint$0 = 0;
           } else {
            $553 = ((($aMem$0401) + (($534*40)|0)|0) + 16|0);
            $554 = $553;
            $555 = $554;
            $556 = HEAP32[$555>>2]|0;
            $557 = (($554) + 4)|0;
            $558 = $557;
            $559 = HEAP32[$558>>2]|0;
            $560 = ((($aMem$0401) + (($537*40)|0)|0) + 16|0);
            $561 = $560;
            $562 = $561;
            $563 = HEAP32[$562>>2]|0;
            $564 = (($561) + 4)|0;
            $565 = $564;
            $566 = HEAP32[$565>>2]|0;
            $567 = $iB;
            $568 = $567;
            HEAP32[$568>>2] = $563;
            $569 = (($567) + 4)|0;
            $570 = $569;
            HEAP32[$570>>2] = $566;
            $571 = HEAP8[$140>>0]|0;
            $572 = $571&255;
            if ((($572|0) == 89)) {
             $573 = (_sqlite3AddInt64($iB,$556,$559)|0);
             $574 = ($573|0)==(0);
             if (!($574)) {
              $bIntint$0 = 1;
              break;
             }
            } else if ((($572|0) == 90)) {
             $575 = (_sqlite3SubInt64($iB,$556,$559)|0);
             $576 = ($575|0)==(0);
             if (!($576)) {
              $bIntint$0 = 1;
              break;
             }
            } else if ((($572|0) == 91)) {
             $577 = (_sqlite3MulInt64($iB,$556,$559)|0);
             $578 = ($577|0)==(0);
             if (!($578)) {
              $bIntint$0 = 1;
              break;
             }
            } else if ((($572|0) == 92)) {
             if ((($556|0) == 0)) {
              if ((($559|0) == 0)) {
               break L112;
              }
             } else if ((($556|0) == -1)) {
              if ((($559|0) == -1)) {
               $579 = ($563|0)==(0);
               $580 = ($566|0)==(-2147483648);
               $581 = $579 & $580;
               if ($581) {
                $bIntint$0 = 1;
                break;
               }
              }
             }
             $582 = (___divdi3(($563|0),($566|0),($556|0),($559|0))|0);
             $583 = tempRet0;
             $584 = $iB;
             $585 = $584;
             HEAP32[$585>>2] = $582;
             $586 = (($584) + 4)|0;
             $587 = $586;
             HEAP32[$587>>2] = $583;
            } else {
             if ((($556|0) == 0)) {
              if ((($559|0) == 0)) {
               break L112;
              } else {
               $588 = $556;$589 = $559;
              }
             } else if ((($556|0) == -1)) {
              if ((($559|0) == -1)) {
               $588 = 1;$589 = 0;
              } else {
               $588 = $556;$589 = $559;
              }
             } else {
              $588 = $556;$589 = $559;
             }
             $590 = (___remdi3(($563|0),($566|0),($588|0),($589|0))|0);
             $591 = tempRet0;
             $592 = $iB;
             $593 = $592;
             HEAP32[$593>>2] = $590;
             $594 = (($592) + 4)|0;
             $595 = $594;
             HEAP32[$595>>2] = $591;
            }
            $596 = $iB;
            $597 = $596;
            $598 = HEAP32[$597>>2]|0;
            $599 = (($596) + 4)|0;
            $600 = $599;
            $601 = HEAP32[$600>>2]|0;
            $602 = ((($aMem$0401) + (($540*40)|0)|0) + 16|0);
            $603 = $602;
            $604 = $603;
            HEAP32[$604>>2] = $598;
            $605 = (($603) + 4)|0;
            $606 = $605;
            HEAP32[$606>>2] = $601;
            $607 = ((($aMem$0401) + (($540*40)|0)|0) + 28|0);
            $608 = HEAP16[$607>>1]|0;
            $609 = $608&65535;
            $610 = $609 & 48640;
            $611 = $610 | 4;
            $612 = $611&65535;
            HEAP16[$607>>1] = $612;
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $541;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
          } while(0);
          $613 = (+_sqlite3VdbeRealValue($535));
          $614 = (+_sqlite3VdbeRealValue($538));
          $615 = HEAP8[$140>>0]|0;
          $616 = $615&255;
          if ((($616|0) == 89)) {
           $617 = $613 + $614;
           $rB$0 = $617;
          } else if ((($616|0) == 90)) {
           $618 = $614 - $613;
           $rB$0 = $618;
          } else if ((($616|0) == 91)) {
           $619 = $613 * $614;
           $rB$0 = $619;
          } else if ((($616|0) == 92)) {
           $620 = $613 == 0.0;
           if ($620) {
            break;
           }
           $621 = $614 / $613;
           $rB$0 = $621;
          } else {
           $622 = (~~$613)>>>0;
           $623 = +Math_abs($613) >= 1.0 ? $613 > 0.0 ? (Math_min(+Math_floor($613 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($613 - +(~~$613 >>> 0)) / 4294967296.0) >>> 0 : 0;
           $624 = (~~$614)>>>0;
           $625 = +Math_abs($614) >= 1.0 ? $614 > 0.0 ? (Math_min(+Math_floor($614 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($614 - +(~~$614 >>> 0)) / 4294967296.0) >>> 0 : 0;
           $626 = $iB;
           $627 = $626;
           HEAP32[$627>>2] = $624;
           $628 = (($626) + 4)|0;
           $629 = $628;
           HEAP32[$629>>2] = $625;
           if ((($622|0) == 0)) {
            if ((($623|0) == 0)) {
             break;
            } else {
             $630 = $622;$631 = $623;
            }
           } else if ((($622|0) == -1)) {
            if ((($623|0) == -1)) {
             $630 = 1;$631 = 0;
            } else {
             $630 = $622;$631 = $623;
            }
           } else {
            $630 = $622;$631 = $623;
           }
           $632 = (___remdi3(($624|0),($625|0),($630|0),($631|0))|0);
           $633 = tempRet0;
           $634 = (+($632>>>0)) + (4294967296.0*(+($633|0)));
           $rB$0 = $634;
          }
          $635 = (_sqlite3IsNaN($rB$0)|0);
          $636 = ($635|0)==(0);
          if ($636) {
           $637 = ((($aMem$0401) + (($540*40)|0)|0) + 8|0);
           HEAPF64[$637>>3] = $rB$0;
           $638 = ((($aMem$0401) + (($540*40)|0)|0) + 28|0);
           $639 = HEAP16[$638>>1]|0;
           $640 = $639&65535;
           $641 = $640 & 48640;
           $642 = $641 | 8;
           $643 = $642&65535;
           HEAP16[$638>>1] = $643;
           $644 = $547 & 8;
           $645 = ($644|0)==(0);
           $646 = ($bIntint$0<<24>>24)==(0);
           $or$cond37 = $645 & $646;
           if (!($or$cond37)) {
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $541;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
           _sqlite3VdbeIntegerAffinity($541);
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $541;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break L21;
          }
         }
        } while(0);
        _sqlite3VdbeMemSetNull($541);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $541;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 39:  {
        $835 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $836 = HEAP32[$835>>2]|0;
        $837 = ((($aMem$0401) + (($836*40)|0)|0) + 28|0);
        $838 = HEAP16[$837>>1]|0;
        $839 = $838 & 4;
        $840 = ($839<<16>>16)==(0);
        if ($840) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $841 = (($aMem$0401) + (($836*40)|0)|0);
         _sqlite3VdbeMemRealify($841);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 143:  {
        $842 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = (($aMem$0401) + (($843*40)|0)|0);
        $845 = ((($aMem$0401) + (($843*40)|0)|0) + 28|0);
        $846 = HEAP16[$845>>1]|0;
        $847 = $846&65535;
        $848 = $847 & 1;
        $849 = ($848|0)==(0);
        if ($849) {
         $850 = $847 >>> 3;
         $851 = $850 & 2;
         $852 = $851 | $847;
         $853 = $852&65535;
         HEAP16[$845>>1] = $853;
         _applyAffinity($844,97,$8);
         $854 = HEAP16[$845>>1]|0;
         $855 = $854 & 16384;
         $856 = ($855<<16>>16)==(0);
         if ($856) {
          $3768 = 0;$859 = $854;
         } else {
          $857 = (_sqlite3VdbeMemExpandBlob($844)|0);
          $$pre = HEAP16[$845>>1]|0;
          $3768 = $857;$859 = $$pre;
         }
         $858 = $859&65535;
         $860 = $858 & 49123;
         $861 = $860&65535;
         HEAP16[$845>>1] = $861;
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3768;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 37:  {
        $796 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $797 = HEAP32[$796>>2]|0;
        $798 = (($aMem$0401) + (($797*40)|0)|0);
        _sqlite3VdbeMemIntegerify($798);
        $799 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $800 = HEAP32[$799>>2]|0;
        $801 = ($800|0)<(0);
        $802 = $801 << 31 >> 31;
        $803 = ((($aMem$0401) + (($797*40)|0)|0) + 16|0);
        $804 = $803;
        $805 = $804;
        $806 = HEAP32[$805>>2]|0;
        $807 = (($804) + 4)|0;
        $808 = $807;
        $809 = HEAP32[$808>>2]|0;
        $810 = (_i64Add(($806|0),($809|0),($800|0),($802|0))|0);
        $811 = tempRet0;
        $812 = $803;
        $813 = $812;
        HEAP32[$813>>2] = $810;
        $814 = (($812) + 4)|0;
        $815 = $814;
        HEAP32[$815>>2] = $811;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 38:  {
        $816 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $817 = HEAP32[$816>>2]|0;
        $818 = ((($aMem$0401) + (($817*40)|0)|0) + 28|0);
        $819 = HEAP16[$818>>1]|0;
        $820 = $819 & 4;
        $821 = ($820<<16>>16)==(0);
        if ($821) {
         $822 = (($aMem$0401) + (($817*40)|0)|0);
         _applyAffinity($822,99,$8);
         $823 = HEAP16[$818>>1]|0;
         $824 = $823 & 4;
         $825 = ($824<<16>>16)==(0);
         if ($825) {
          $826 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
          $827 = HEAP32[$826>>2]|0;
          $828 = ($827|0)==(0);
          if ($828) {
           $rc$45 = 20;
           label = 793;
           break L12;
          }
          $829 = (($827) + -1)|0;
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $829;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         } else {
          $831 = $823;
         }
        } else {
         $831 = $819;
        }
        $830 = $831&65535;
        $832 = $830 & 48640;
        $833 = $832 | 4;
        $834 = $833&65535;
        HEAP16[$818>>1] = $834;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 144:  {
        $862 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $863 = HEAP32[$862>>2]|0;
        $864 = (($aMem$0401) + (($863*40)|0)|0);
        $865 = ((($aMem$0401) + (($863*40)|0)|0) + 28|0);
        $866 = HEAP16[$865>>1]|0;
        $867 = $866&65535;
        $868 = $867 & 1;
        $869 = ($868|0)==(0);
        if ($869) {
         $870 = $867 & 16;
         $871 = ($870|0)==(0);
         if ($871) {
          _applyAffinity($864,97,$8);
          $872 = HEAP16[$865>>1]|0;
          $873 = $872&65535;
          $874 = $873 & 48640;
          $875 = $874 | 16;
          $876 = $875&65535;
          HEAP16[$865>>1] = $876;
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         } else {
          $877 = $867 & 65040;
          $878 = $877&65535;
          HEAP16[$865>>1] = $878;
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 145:  {
        $879 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $880 = HEAP32[$879>>2]|0;
        $881 = (($aMem$0401) + (($880*40)|0)|0);
        _sqlite3VdbeMemNumerify($881);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 146:  {
        $882 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $883 = HEAP32[$882>>2]|0;
        $884 = ((($aMem$0401) + (($883*40)|0)|0) + 28|0);
        $885 = HEAP16[$884>>1]|0;
        $886 = $885 & 1;
        $887 = ($886<<16>>16)==(0);
        if ($887) {
         $888 = (($aMem$0401) + (($883*40)|0)|0);
         _sqlite3VdbeMemIntegerify($888);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 147:  {
        $889 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $890 = HEAP32[$889>>2]|0;
        $891 = ((($aMem$0401) + (($890*40)|0)|0) + 28|0);
        $892 = HEAP16[$891>>1]|0;
        $893 = $892 & 1;
        $894 = ($893<<16>>16)==(0);
        if ($894) {
         $895 = (($aMem$0401) + (($890*40)|0)|0);
         _sqlite3VdbeMemRealify($895);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 83: case 80: case 81: case 82: case 78: case 79:  {
        $896 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = (($aMem$0401) + (($897*40)|0)|0);
        $899 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $900 = HEAP32[$899>>2]|0;
        $901 = (($aMem$0401) + (($900*40)|0)|0);
        $902 = ((($aMem$0401) + (($897*40)|0)|0) + 28|0);
        $903 = HEAP16[$902>>1]|0;
        $904 = ((($aMem$0401) + (($900*40)|0)|0) + 28|0);
        $905 = HEAP16[$904>>1]|0;
        $906 = $903&65535;
        $907 = $905&65535;
        $908 = $905 | $903;
        $909 = $908 & 1;
        $910 = ($909<<16>>16)==(0);
        $911 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $912 = HEAP8[$911>>0]|0;
        $913 = $912&255;
        do {
         if ($910) {
          $936 = $913 & 103;
          $937 = $936&255;
          $938 = ($937<<24>>24)==(0);
          if ($938) {
           $942 = $903;
          } else {
           _applyAffinity($898,$937,$8);
           _applyAffinity($901,$937,$8);
           $939 = HEAP8[$42>>0]|0;
           $940 = ($939<<24>>24)==(0);
           if (!($940)) {
            $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
            label = 792;
            break L1;
           }
           $$pre673 = HEAP16[$902>>1]|0;
           $942 = $$pre673;
          }
          $941 = $942 & 16384;
          $943 = ($941<<16>>16)==(0);
          if (!($943)) {
           (_sqlite3VdbeMemExpandBlob($898)|0);
          }
          $944 = HEAP16[$904>>1]|0;
          $945 = $944 & 16384;
          $946 = ($945<<16>>16)==(0);
          if (!($946)) {
           (_sqlite3VdbeMemExpandBlob($901)|0);
          }
          $947 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
          $948 = HEAP32[$947>>2]|0;
          $949 = (_sqlite3MemCompare($901,$898,$948)|0);
          $$pre612 = HEAP8[$140>>0]|0;
          $951 = $$pre612;$res$0 = $949;
         } else {
          $914 = $913 & 128;
          $915 = ($914|0)==(0);
          if (!($915)) {
           $916 = $906 & 1;
           $917 = ($916|0)==(0);
           if (!($917)) {
            $918 = $907 & 257;
            $919 = ($918|0)==(1);
            if ($919) {
             $951 = $141;$res$0 = 0;
             break;
            }
           }
           $951 = $141;$res$0 = 1;
           break;
          }
          $920 = $913 & 16;
          $921 = ($920|0)==(0);
          if (!($921)) {
           $922 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
           $923 = HEAP32[$922>>2]|0;
           $924 = (($aMem$0401) + (($923*40)|0)|0);
           $925 = ((($aMem$0401) + (($923*40)|0)|0) + 28|0);
           $926 = HEAP16[$925>>1]|0;
           $927 = $926&65535;
           $928 = $927 & 48640;
           $929 = $928 | 1;
           $930 = $929&65535;
           HEAP16[$925>>1] = $930;
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $924;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break L21;
          }
          $931 = $913 & 8;
          $932 = ($931|0)==(0);
          if ($932) {
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break L21;
          }
          $933 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
          $934 = HEAP32[$933>>2]|0;
          $935 = (($934) + -1)|0;
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $935;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
        } while(0);
        $950 = $951&255;
        switch ($950|0) {
        case 79:  {
         $952 = ($res$0|0)==(0);
         $953 = $952&1;
         $res$1 = $953;
         break;
        }
        case 78:  {
         $954 = ($res$0|0)!=(0);
         $955 = $954&1;
         $res$1 = $955;
         break;
        }
        case 82:  {
         $res$0$lobit = $res$0 >>> 31;
         $res$1 = $res$0$lobit;
         break;
        }
        case 80:  {
         $958 = ($res$0|0)>(0);
         $959 = $958&1;
         $res$1 = $959;
         break;
        }
        case 81:  {
         $956 = ($res$0|0)<(1);
         $957 = $956&1;
         $res$1 = $957;
         break;
        }
        default: {
         $res$0$lobit31 = $res$0 >>> 31;
         $res$0$lobit31$not = $res$0$lobit31 ^ 1;
         $res$1 = $res$0$lobit31$not;
        }
        }
        $960 = HEAP8[$911>>0]|0;
        $961 = $960 & 16;
        $962 = ($961<<24>>24)==(0);
        if ($962) {
         $977 = ($res$1|0)==(0);
         if ($977) {
          $pOut$5 = $pOut$1;$pc$3 = $pc$0463;
         } else {
          $978 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
          $979 = HEAP32[$978>>2]|0;
          $980 = (($979) + -1)|0;
          $pOut$5 = $pOut$1;$pc$3 = $980;
         }
        } else {
         $963 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $964 = HEAP32[$963>>2]|0;
         $965 = (($aMem$0401) + (($964*40)|0)|0);
         $966 = ((($aMem$0401) + (($964*40)|0)|0) + 28|0);
         $967 = HEAP16[$966>>1]|0;
         $968 = $967&65535;
         $969 = $968 & 48640;
         $970 = $969 | 4;
         $971 = $970&65535;
         HEAP16[$966>>1] = $971;
         $972 = ((($aMem$0401) + (($964*40)|0)|0) + 16|0);
         $973 = $972;
         $974 = $973;
         HEAP32[$974>>2] = $res$1;
         $975 = (($973) + 4)|0;
         $976 = $975;
         HEAP32[$976>>2] = 0;
         $pOut$5 = $965;$pc$3 = $pc$0463;
        }
        $981 = HEAP16[$902>>1]|0;
        $982 = $981&65535;
        $983 = $982 & 65024;
        $984 = $906 & 511;
        $985 = $983 | $984;
        $986 = $985&65535;
        HEAP16[$902>>1] = $986;
        $987 = HEAP16[$904>>1]|0;
        $988 = $987&65535;
        $989 = $988 & 65024;
        $990 = $907 & 511;
        $991 = $989 | $990;
        $992 = $991&65535;
        HEAP16[$904>>1] = $992;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$5;$pc$11$ph = $pc$3;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 41:  {
        $995 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $996 = HEAP8[$995>>0]|0;
        $997 = $996 & 1;
        $998 = ($997<<24>>24)==(0);
        $$aPermute$0 = $998 ? 0 : $aPermute$0390;
        $999 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1000 = HEAP32[$999>>2]|0;
        $1001 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $1002 = HEAP32[$1001>>2]|0;
        $1003 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1004 = HEAP32[$1003>>2]|0;
        $1005 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1006 = HEAP32[$1005>>2]|0;
        $1007 = ($1000|0)>(0);
        if ($1007) {
         $1008 = ($$aPermute$0|0)==(0|0);
         $1009 = (($1002) + 16|0);
         $i7$0226 = 0;
         while(1) {
          if ($1008) {
           $1020 = $i7$0226;
          } else {
           $1012 = (($$aPermute$0) + ($i7$0226<<2)|0);
           $1013 = HEAP32[$1012>>2]|0;
           $1020 = $1013;
          }
          $1014 = ((($1002) + ($i7$0226<<2)|0) + 20|0);
          $1015 = HEAP32[$1014>>2]|0;
          $1016 = HEAP32[$1009>>2]|0;
          $1017 = (($1016) + ($i7$0226)|0);
          $1018 = HEAP8[$1017>>0]|0;
          $1019 = (($1020) + ($1004))|0;
          $1021 = (($aMem$0401) + (($1019*40)|0)|0);
          $1022 = (($1020) + ($1006))|0;
          $1023 = (($aMem$0401) + (($1022*40)|0)|0);
          $1024 = (_sqlite3MemCompare($1021,$1023,$1015)|0);
          $1025 = ($1024|0)==(0);
          $1011 = (($i7$0226) + 1)|0;
          if (!($1025)) {
           break;
          }
          $1010 = ($1011|0)<($1000|0);
          if ($1010) {
           $i7$0226 = $1011;
          } else {
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = 0;$iCompare$3$ph = 0;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break L21;
          }
         }
         $1026 = ($1018<<24>>24)==(0);
         $1027 = (0 - ($1024))|0;
         $$41 = $1026 ? $1024 : $1027;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = 0;$iCompare$3$ph = $$41;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = 0;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 40:  {
        $993 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $994 = HEAP32[$993>>2]|0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $994;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 42:  {
        $1028 = ($iCompare$0422|0)<(0);
        if ($1028) {
         $1029 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $1030 = HEAP32[$1029>>2]|0;
         $1031 = (($1030) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1031;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $1032 = ($iCompare$0422|0)==(0);
        if ($1032) {
         $1033 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $1034 = HEAP32[$1033>>2]|0;
         $1035 = (($1034) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = 0;$pOut$6$ph = $pOut$1;$pc$11$ph = $1035;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $1036 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $1037 = HEAP32[$1036>>2]|0;
         $1038 = (($1037) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1038;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 71: case 72:  {
        $1039 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1040 = HEAP32[$1039>>2]|0;
        $1041 = ((($aMem$0401) + (($1040*40)|0)|0) + 28|0);
        $1042 = HEAP16[$1041>>1]|0;
        $1043 = $1042 & 1;
        $1044 = ($1043<<16>>16)==(0);
        if ($1044) {
         $1045 = (($aMem$0401) + (($1040*40)|0)|0);
         $1046 = (_sqlite3VdbeIntValue($1045)|0);
         $1047 = tempRet0;
         $1048 = ($1046|0)!=(0);
         $1049 = ($1047|0)!=(0);
         $1050 = $1048 | $1049;
         $phitmp30 = $1050 ? 3 : 0;
         $v1$0 = $phitmp30;
        } else {
         $v1$0 = 6;
        }
        $1051 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1052 = HEAP32[$1051>>2]|0;
        $1053 = ((($aMem$0401) + (($1052*40)|0)|0) + 28|0);
        $1054 = HEAP16[$1053>>1]|0;
        $1055 = $1054 & 1;
        $1056 = ($1055<<16>>16)==(0);
        if ($1056) {
         $1057 = (($aMem$0401) + (($1052*40)|0)|0);
         $1058 = (_sqlite3VdbeIntValue($1057)|0);
         $1059 = tempRet0;
         $1060 = ($1058|0)!=(0);
         $1061 = ($1059|0)!=(0);
         $1062 = $1060 | $1061;
         $1063 = $1062&1;
         $v2$0 = $1063;
        } else {
         $v2$0 = 2;
        }
        $1064 = HEAP8[$140>>0]|0;
        $1065 = ($1064<<24>>24)==(72);
        $1066 = (($v2$0) + ($v1$0))|0;
        $sqlite3VdbeExec$and_logic$sqlite3VdbeExec$or_logic = $1065 ? 31400 : 31416;
        $$sink$in = (($sqlite3VdbeExec$and_logic$sqlite3VdbeExec$or_logic) + ($1066)|0);
        $$sink = HEAP8[$$sink$in>>0]|0;
        $1067 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1068 = HEAP32[$1067>>2]|0;
        $1069 = (($aMem$0401) + (($1068*40)|0)|0);
        $1070 = ($$sink<<24>>24)==(2);
        if ($1070) {
         $1071 = ((($aMem$0401) + (($1068*40)|0)|0) + 28|0);
         $1072 = HEAP16[$1071>>1]|0;
         $1073 = $1072&65535;
         $1074 = $1073 & 48640;
         $1075 = $1074 | 1;
         $1076 = $1075&65535;
         HEAP16[$1071>>1] = $1076;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1069;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $1077 = $$sink&255;
         $1078 = ((($aMem$0401) + (($1068*40)|0)|0) + 16|0);
         $1079 = $1078;
         $1080 = $1079;
         HEAP32[$1080>>2] = $1077;
         $1081 = (($1079) + 4)|0;
         $1082 = $1081;
         HEAP32[$1082>>2] = 0;
         $1083 = ((($aMem$0401) + (($1068*40)|0)|0) + 28|0);
         $1084 = HEAP16[$1083>>1]|0;
         $1085 = $1084&65535;
         $1086 = $1085 & 48640;
         $1087 = $1086 | 4;
         $1088 = $1087&65535;
         HEAP16[$1083>>1] = $1088;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1069;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 76:  {
        $1145 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1146 = HEAP32[$1145>>2]|0;
        $1147 = ((($aMem$0401) + (($1146*40)|0)|0) + 28|0);
        $1148 = HEAP16[$1147>>1]|0;
        $1149 = $1148 & 1;
        $1150 = ($1149<<16>>16)==(0);
        if ($1150) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $1151 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $1152 = HEAP32[$1151>>2]|0;
         $1153 = (($1152) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1153;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 19:  {
        $1089 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1090 = HEAP32[$1089>>2]|0;
        $1091 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1092 = HEAP32[$1091>>2]|0;
        $1093 = (($aMem$0401) + (($1092*40)|0)|0);
        $1094 = ((($aMem$0401) + (($1090*40)|0)|0) + 28|0);
        $1095 = HEAP16[$1094>>1]|0;
        $1096 = $1095 & 1;
        $1097 = ($1096<<16>>16)==(0);
        if ($1097) {
         $1098 = (($aMem$0401) + (($1090*40)|0)|0);
         $1099 = (_sqlite3VdbeIntValue($1098)|0);
         $1100 = tempRet0;
         $1101 = ($1099|0)==(0);
         $1102 = ($1100|0)==(0);
         $1103 = $1101 & $1102;
         $1104 = $1103&1;
         _sqlite3VdbeMemSetInt64($1093,$1104,0);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1093;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         _sqlite3VdbeMemSetNull($1093);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1093;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 96:  {
        $1105 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1108 = HEAP32[$1107>>2]|0;
        $1109 = (($aMem$0401) + (($1108*40)|0)|0);
        $1110 = ((($aMem$0401) + (($1106*40)|0)|0) + 28|0);
        $1111 = HEAP16[$1110>>1]|0;
        $1112 = $1111 & 1;
        $1113 = ($1112<<16>>16)==(0);
        if ($1113) {
         $1114 = (($aMem$0401) + (($1106*40)|0)|0);
         $1115 = (_sqlite3VdbeIntValue($1114)|0);
         $1116 = tempRet0;
         $1117 = $1115 ^ -1;
         $1118 = $1116 ^ -1;
         _sqlite3VdbeMemSetInt64($1109,$1117,$1118);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1109;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         _sqlite3VdbeMemSetNull($1109);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1109;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 43:  {
        $1119 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1120 = HEAP32[$1119>>2]|0;
        $1121 = HEAP32[$60>>2]|0;
        $1122 = (($1121) + ($1120)|0);
        $1123 = HEAP8[$1122>>0]|0;
        $1124 = ($1123<<24>>24)==(0);
        if ($1124) {
         HEAP8[$1122>>0] = 1;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $1125 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $1126 = HEAP32[$1125>>2]|0;
         $1127 = (($1126) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1127;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 45: case 44:  {
        $1128 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1129 = HEAP32[$1128>>2]|0;
        $1130 = ((($aMem$0401) + (($1129*40)|0)|0) + 28|0);
        $1131 = HEAP16[$1130>>1]|0;
        $1132 = $1131 & 1;
        $1133 = ($1132<<16>>16)==(0);
        if ($1133) {
         $1136 = (($aMem$0401) + (($1129*40)|0)|0);
         $1137 = (+_sqlite3VdbeRealValue($1136));
         $1138 = $1137 != 0.0;
         $1139 = HEAP8[$140>>0]|0;
         $1140 = ($1139<<24>>24)==(45);
         $$132 = $1138 ^ $1140;
         $$ = $$132&1;
         $c$0 = $$;
        } else {
         $1134 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $1135 = HEAP32[$1134>>2]|0;
         $c$0 = $1135;
        }
        $1141 = ($c$0|0)==(0);
        if ($1141) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $1142 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $1143 = HEAP32[$1142>>2]|0;
         $1144 = (($1143) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1144;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 77:  {
        $1154 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1155 = HEAP32[$1154>>2]|0;
        $1156 = ((($aMem$0401) + (($1155*40)|0)|0) + 28|0);
        $1157 = HEAP16[$1156>>1]|0;
        $1158 = $1157 & 1;
        $1159 = ($1158<<16>>16)==(0);
        if ($1159) {
         $1160 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $1161 = HEAP32[$1160>>2]|0;
         $1162 = (($1161) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1162;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 46:  {
        $1163 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1164 = HEAP32[$1163>>2]|0;
        $1165 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1166 = HEAP32[$1165>>2]|0;
        $1167 = (($aMem$0401) + (($1166*40)|0)|0);
        $1168 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1169 = HEAP32[$1168>>2]|0;
        $1170 = HEAP32[$61>>2]|0;
        $1171 = (($1170) + ($1169<<2)|0);
        $1172 = HEAP32[$1171>>2]|0;
        $1173 = (($1172) + 20|0);
        $1174 = HEAP16[$1173>>1]|0;
        $1175 = $1174 << 16 >> 16;
        $1176 = ((($1172) + ($1175<<2)|0) + 88|0);
        $1177 = HEAP32[$1172>>2]|0;
        $1178 = (_sqlite3VdbeCursorMoveto($1172)|0);
        $1179 = ($1178|0)==(0);
        if (!($1179)) {
         $rc$45 = $1178;
         label = 793;
         break L12;
        }
        $1180 = (($1172) + 68|0);
        $1181 = HEAP32[$1180>>2]|0;
        $1182 = HEAP32[$62>>2]|0;
        $1183 = ($1181|0)==($1182|0);
        if ($1183) {
         $1184 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
         $1185 = HEAP8[$1184>>0]|0;
         $1186 = $1185 & 32;
         $1187 = ($1186<<24>>24)==(0);
         if ($1187) {
          $$pre703 = (($1172) + 22|0);
          $$pre$phi704Z2D = $$pre703;
          label = 271;
         } else {
          label = 254;
         }
        } else {
         label = 254;
        }
        L266: do {
         if ((label|0) == 254) {
          label = 0;
          $1188 = (($1172) + 25|0);
          $1189 = HEAP8[$1188>>0]|0;
          $1190 = ($1189<<24>>24)==(0);
          do {
           if ($1190) {
            $1207 = (($1172) + 28|0);
            $1208 = HEAP8[$1207>>0]|0;
            $1209 = $1208 & 2;
            $1210 = ($1209<<24>>24)==(0);
            if ($1210) {
             _sqlite3BtreeKeySize($1177,$payloadSize64);
             $1211 = (_sqlite3BtreeKeyFetch($1177,$avail)|0);
             $1212 = (($1172) + 84|0);
             HEAP32[$1212>>2] = $1211;
             $1213 = $payloadSize64;
             $1214 = $1213;
             $1215 = HEAP32[$1214>>2]|0;
             $1216 = (($1213) + 4)|0;
             $1217 = $1216;
             $1218 = HEAP32[$1217>>2]|0;
             $1219 = (($1172) + 72|0);
             HEAP32[$1219>>2] = $1215;
             $1225 = $1215;$3770 = $1211;
            } else {
             $1220 = (($1172) + 72|0);
             _sqlite3BtreeDataSize($1177,$1220);
             $1221 = (_sqlite3BtreeDataFetch($1177,$avail)|0);
             $1222 = (($1172) + 84|0);
             HEAP32[$1222>>2] = $1221;
             $$pre619 = HEAP32[$1220>>2]|0;
             $1225 = $$pre619;$3770 = $1221;
            }
            $1223 = HEAP32[$avail>>2]|0;
            $1224 = ($1225>>>0)>($1223>>>0);
            $1226 = (($1172) + 76|0);
            $$133 = $1224 ? $1223 : $1225;
            HEAP32[$1226>>2] = $$133;
            $1227 = HEAP32[$49>>2]|0;
            $1228 = ($1225>>>0)>($1227>>>0);
            if ($1228) {
             $3764 = $691;$3765 = $694;
             label = 791;
             break L12;
            }
            $$pre705 = (($1172) + 84|0);
            $$pre$phi706Z2D = $$pre705;$1231 = $3770;$3769 = $1223;
           } else {
            $1191 = ($1177|0)==(0|0);
            if ($1191) {
             $1192 = (($1172) + 16|0);
             $1193 = HEAP32[$1192>>2]|0;
             $1194 = ((($aMem$0401) + (($1193*40)|0)|0) + 24|0);
             $1195 = HEAP32[$1194>>2]|0;
             HEAP32[$avail>>2] = $1195;
             $1196 = (($1172) + 76|0);
             HEAP32[$1196>>2] = $1195;
             $1197 = (($1172) + 72|0);
             HEAP32[$1197>>2] = $1195;
             $1198 = ((($aMem$0401) + (($1193*40)|0)|0) + 4|0);
             $1199 = HEAP32[$1198>>2]|0;
             $1200 = (($1172) + 84|0);
             HEAP32[$1200>>2] = $1199;
             $$pre$phi706Z2D = $1200;$1231 = $1199;$3769 = $1195;
             break;
            } else {
             $1201 = ((($aMem$0401) + (($1166*40)|0)|0) + 28|0);
             $1202 = HEAP16[$1201>>1]|0;
             $1203 = $1202&65535;
             $1204 = $1203 & 48640;
             $1205 = $1204 | 1;
             $1206 = $1205&65535;
             HEAP16[$1201>>1] = $1206;
             break L266;
            }
           }
          } while(0);
          $1229 = HEAP32[$62>>2]|0;
          HEAP32[$1180>>2] = $1229;
          $1230 = HEAP8[$1231>>0]|0;
          $1232 = ($1230<<24>>24)>(-1);
          if ($1232) {
           $1233 = $1230&255;
           HEAP32[$offset>>2] = $1233;
           $$pr = $1233;$1236 = 1;$1240 = $3769;
          } else {
           $1234 = (_sqlite3GetVarint32($1231,$offset)|0);
           $$pre622 = HEAP32[$offset>>2]|0;
           $$pre623 = HEAP32[$avail>>2]|0;
           $$pr = $$pre622;$1236 = $1234;$1240 = $$pre623;
          }
          $1235 = $1236&255;
          $1237 = (($1172) + 80|0);
          HEAP32[$1237>>2] = $1235;
          $1238 = (($1172) + 22|0);
          HEAP16[$1238>>1] = 0;
          HEAP32[$1176>>2] = $$pr;
          $1239 = ($1240>>>0)<($$pr>>>0);
          if ($1239) {
           HEAP32[$$pre$phi706Z2D>>2] = 0;
           $1241 = (($1172) + 76|0);
           HEAP32[$1241>>2] = 0;
          }
          $1242 = ($$pr>>>0)>(98307);
          if ($1242) {
           label = 270;
           break L12;
          }
          $1243 = (($1172) + 72|0);
          $1244 = HEAP32[$1243>>2]|0;
          $1245 = ($$pr>>>0)>($1244>>>0);
          if ($1245) {
           label = 270;
           break L12;
          } else {
           $$pre$phi704Z2D = $1238;
           label = 271;
          }
         }
        } while(0);
        do {
         if ((label|0) == 271) {
          label = 0;
          $1246 = HEAP16[$$pre$phi704Z2D>>1]|0;
          $1247 = $1246&65535;
          $1248 = ($1247|0)>($1164|0);
          if (!($1248)) {
           $1249 = (($1172) + 80|0);
           $1250 = HEAP32[$1249>>2]|0;
           $1251 = HEAP32[$1176>>2]|0;
           $1252 = ($1250>>>0)<($1251>>>0);
           if ($1252) {
            $1253 = (($1172) + 84|0);
            $1254 = HEAP32[$1253>>2]|0;
            $1255 = ($1254|0)==(0|0);
            if ($1255) {
             dest=$sMem+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             $1256 = HEAP32[$1176>>2]|0;
             $1257 = (($1172) + 28|0);
             $1258 = HEAP8[$1257>>0]|0;
             $1259 = ($1258&255) >>> 1;
             $$lobit28 = $1259 & 1;
             $1260 = $$lobit28 ^ 1;
             $1261 = $1260&255;
             $1262 = (_sqlite3VdbeMemFromBtree($1177,0,$1256,$1261,$sMem)|0);
             $1263 = ($1262|0)==(0);
             if (!($1263)) {
              $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $1262;
              label = 784;
              break L12;
             }
             $1264 = HEAP32[$64>>2]|0;
             $$pre614 = HEAP16[$$pre$phi704Z2D>>1]|0;
             $$pre615 = HEAP32[$1249>>2]|0;
             $$pre616 = HEAP32[$1176>>2]|0;
             $1266 = $$pre614;$1270 = $$pre615;$1272 = $$pre616;$zData$0 = $1264;
            } else {
             $1266 = $1246;$1270 = $1250;$1272 = $1251;$zData$0 = $1254;
            }
            $1265 = $1266&65535;
            $$sum25 = (($1265) + ($1175))|0;
            $1267 = ((($1172) + ($$sum25<<2)|0) + 88|0);
            $1268 = HEAP32[$1267>>2]|0;
            HEAP32[$offset>>2] = $1268;
            $1269 = (($zData$0) + ($1270)|0);
            $1271 = (($zData$0) + ($1272)|0);
            $3771 = $1268;$i11$0 = $1265;$zHdr$0 = $1269;
            while(1) {
             $1273 = HEAP8[$zHdr$0>>0]|0;
             $1274 = ($1273<<24>>24)>(-1);
             if ($1274) {
              $1275 = $1273&255;
              HEAP32[$t>>2] = $1275;
              $1276 = (($zHdr$0) + 1|0);
              $1281 = $1275;$1284 = $3771;$zHdr$1 = $1276;
             } else {
              $1277 = (_sqlite3GetVarint32($zHdr$0,$t)|0);
              $1278 = $1277&255;
              $1279 = (($zHdr$0) + ($1278)|0);
              $$pre617 = HEAP32[$t>>2]|0;
              $$pre618 = HEAP32[$offset>>2]|0;
              $1281 = $$pre617;$1284 = $$pre618;$zHdr$1 = $1279;
             }
             $1280 = ((($1172) + ($i11$0<<2)|0) + 88|0);
             HEAP32[$1280>>2] = $1281;
             $1282 = (_sqlite3VdbeSerialTypeLen($1281)|0);
             $1283 = (($1284) + ($1282))|0;
             HEAP32[$offset>>2] = $1283;
             $1285 = ($1283>>>0)<($1282>>>0);
             if ($1285) {
              label = 281;
              break;
             }
             $1287 = (($i11$0) + 1)|0;
             $$sum26 = (($1287) + ($1175))|0;
             $1288 = ((($1172) + ($$sum26<<2)|0) + 88|0);
             HEAP32[$1288>>2] = $1283;
             $1289 = ($i11$0|0)<($1164|0);
             $1290 = ($zHdr$1>>>0)<($1271>>>0);
             $or$cond42 = $1289 & $1290;
             if ($or$cond42) {
              $3771 = $1283;$i11$0 = $1287;$zHdr$0 = $zHdr$1;
             } else {
              $i11$1 = $1287;$zHdr$2 = $zHdr$1;
              break;
             }
            }
            if ((label|0) == 281) {
             label = 0;
             $$sum27 = (($1272) + 1)|0;
             $1286 = (($zData$0) + ($$sum27)|0);
             $i11$1 = $i11$0;$zHdr$2 = $1286;
            }
            $1291 = $i11$1&65535;
            HEAP16[$$pre$phi704Z2D>>1] = $1291;
            $1292 = $zHdr$2;
            $1293 = $zData$0;
            $1294 = (($1292) - ($1293))|0;
            HEAP32[$1249>>2] = $1294;
            $1295 = HEAP32[$1253>>2]|0;
            $1296 = ($1295|0)==(0|0);
            if ($1296) {
             _sqlite3VdbeMemRelease($sMem);
             HEAP16[$65>>1] = 1;
            }
            $1297 = ($zHdr$2>>>0)>($1271>>>0);
            if ($1297) {
             label = 289;
             break L12;
            }
            $1298 = (($1172) + 72|0);
            $1299 = HEAP32[$1298>>2]|0;
            $1300 = ($1283>>>0)>($1299>>>0);
            if ($1300) {
             label = 289;
             break L12;
            }
            $1301 = ($zHdr$2|0)!=($1271|0);
            $1302 = ($1283|0)==($1299|0);
            $or$cond43 = $1301 | $1302;
            if (!($or$cond43)) {
             label = 289;
             break L12;
            }
            $$pre674 = HEAP16[$$pre$phi704Z2D>>1]|0;
            $1304 = $$pre674;
           } else {
            $1304 = $1246;
           }
           $1303 = $1304&65535;
           $1305 = ($1303|0)>($1164|0);
           if (!($1305)) {
            $1306 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 1|0);
            $1307 = HEAP8[$1306>>0]|0;
            $1308 = ($1307<<24>>24)==(-8);
            if ($1308) {
             $1309 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
             $1310 = HEAP32[$1309>>2]|0;
             _sqlite3VdbeMemShallowCopy($1167,$1310,2048);
             break;
            } else {
             $1311 = ((($aMem$0401) + (($1166*40)|0)|0) + 28|0);
             $1312 = HEAP16[$1311>>1]|0;
             $1313 = $1312&65535;
             $1314 = $1313 & 48640;
             $1315 = $1314 | 1;
             $1316 = $1315&65535;
             HEAP16[$1311>>1] = $1316;
             break;
            }
           }
          }
          $1317 = (($1172) + 76|0);
          $1318 = HEAP32[$1317>>2]|0;
          $1319 = (($1164) + 1)|0;
          $$sum21 = (($1319) + ($1175))|0;
          $1320 = ((($1172) + ($$sum21<<2)|0) + 88|0);
          $1321 = HEAP32[$1320>>2]|0;
          $1322 = ($1318>>>0)<($1321>>>0);
          if ($1322) {
           $1334 = ((($1172) + ($1164<<2)|0) + 88|0);
           $1335 = HEAP32[$1334>>2]|0;
           HEAP32[$t>>2] = $1335;
           $1336 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
           $1337 = HEAP8[$1336>>0]|0;
           $1338 = ($1337&255)>(63);
           if ($1338) {
            $1339 = ($1335>>>0)>(11);
            $1340 = $1335 & 1;
            $1341 = ($1340|0)==(0);
            $or$cond45 = $1339 & $1341;
            $1342 = ($1337<<24>>24)<(0);
            $or$cond128 = $or$cond45 | $1342;
            if ($or$cond128) {
             label = 301;
            } else {
             label = 300;
            }
           } else {
            label = 300;
           }
           if ((label|0) == 300) {
            label = 0;
            $1343 = (_sqlite3VdbeSerialTypeLen($1335)|0);
            $1344 = ($1343|0)==(0);
            if ($1344) {
             label = 301;
            } else {
             dest=$sMem+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             _sqlite3VdbeMemMove($sMem,$1167);
             $$sum22 = (($1175) + ($1164))|0;
             $1346 = ((($1172) + ($$sum22<<2)|0) + 88|0);
             $1347 = HEAP32[$1346>>2]|0;
             $1348 = (($1172) + 28|0);
             $1349 = HEAP8[$1348>>0]|0;
             $1350 = ($1349&255) >>> 1;
             $$lobit23 = $1350 & 1;
             $1351 = $$lobit23 ^ 1;
             $1352 = $1351&255;
             $1353 = (_sqlite3VdbeMemFromBtree($1177,$1347,$1343,$1352,$sMem)|0);
             $1354 = ($1353|0)==(0);
             if (!($1354)) {
              $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $1353;
              label = 784;
              break L12;
             }
             $1355 = HEAP32[$64>>2]|0;
             $$pre613 = HEAP32[$t>>2]|0;
             $1356 = $$pre613;$zData$1 = $1355;
            }
           }
           if ((label|0) == 301) {
            label = 0;
            $1345 = ($1335>>>0)<(14);
            $$723 = $1345 ? $payloadSize64 : 0;
            HEAP32[$63>>2] = 0;
            $1356 = $1335;$zData$1 = $$723;
           }
           (_sqlite3VdbeSerialGet($zData$1,$1356,$1167)|0);
           $1357 = HEAP32[$63>>2]|0;
           $1358 = ($1357|0)==(0|0);
           if (!($1358)) {
            $1359 = ((($aMem$0401) + (($1166*40)|0)|0) + 28|0);
            $1360 = HEAP16[$1359>>1]|0;
            $1361 = $1360&65535;
            $1362 = $1361 & 58879;
            $1363 = $1362 | 512;
            $1364 = $1363&65535;
            HEAP16[$1359>>1] = $1364;
            $1365 = HEAP32[$64>>2]|0;
            $1366 = ((($aMem$0401) + (($1166*40)|0)|0) + 4|0);
            HEAP32[$1366>>2] = $1365;
            $1367 = HEAP32[$63>>2]|0;
            $1368 = ((($aMem$0401) + (($1166*40)|0)|0) + 36|0);
            HEAP32[$1368>>2] = $1367;
           }
          } else {
           $1323 = ((($aMem$0401) + (($1166*40)|0)|0) + 28|0);
           $1324 = HEAP16[$1323>>1]|0;
           $1325 = $1324 & 9312;
           $1326 = ($1325<<16>>16)==(0);
           if (!($1326)) {
            _sqlite3VdbeMemReleaseExternal($1167);
           }
           $1327 = (($1172) + 84|0);
           $1328 = HEAP32[$1327>>2]|0;
           $$sum24 = (($1175) + ($1164))|0;
           $1329 = ((($1172) + ($$sum24<<2)|0) + 88|0);
           $1330 = HEAP32[$1329>>2]|0;
           $1331 = (($1328) + ($1330)|0);
           $1332 = ((($1172) + ($1164<<2)|0) + 88|0);
           $1333 = HEAP32[$1332>>2]|0;
           (_sqlite3VdbeSerialGet($1331,$1333,$1167)|0);
          }
          $1369 = ((($aMem$0401) + (($1166*40)|0)|0) + 30|0);
          HEAP8[$1369>>0] = $8;
         }
        } while(0);
        $1370 = ((($aMem$0401) + (($1166*40)|0)|0) + 28|0);
        $1371 = HEAP16[$1370>>1]|0;
        $1372 = $1371 & 4096;
        $1373 = ($1372<<16>>16)==(0);
        if ($1373) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $1374 = (_sqlite3VdbeMemMakeWriteable($1167)|0);
         $1375 = ($1374|0)==(0);
         if ($1375) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
         } else {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        break;
       }
       case 18:  {
        $171 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ((($aMem$0401) + (($172*40)|0)|0) + 16|0);
        $174 = $173;
        $175 = $174;
        $176 = HEAP32[$175>>2]|0;
        $177 = (($174) + 4)|0;
        $178 = $177;
        $179 = HEAP32[$178>>2]|0;
        $180 = ((($aMem$0401) + (($172*40)|0)|0) + 28|0);
        HEAP16[$180>>1] = 128;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $176;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 17:  {
        $158 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ((($aMem$0401) + (($159*40)|0)|0) + 28|0);
        HEAP16[$160>>1] = 4;
        $161 = ($pc$0463|0)<(0);
        $162 = $161 << 31 >> 31;
        $163 = ((($aMem$0401) + (($159*40)|0)|0) + 16|0);
        $164 = $163;
        $165 = $164;
        HEAP32[$165>>2] = $pc$0463;
        $166 = (($164) + 4)|0;
        $167 = $166;
        HEAP32[$167>>2] = $162;
        $168 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (($169) + -1)|0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $170;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 21:  {
        $199 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $200 = HEAP32[$199>>2]|0;
        $201 = ((($aMem$0401) + (($200*40)|0)|0) + 16|0);
        $202 = $201;
        $203 = $202;
        $204 = HEAP32[$203>>2]|0;
        $205 = (($202) + 4)|0;
        $206 = $205;
        $207 = HEAP32[$206>>2]|0;
        $208 = ((($aOp$0453) + (($204*20)|0)|0) + 8|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = (($209) + -1)|0;
        $211 = ((($aMem$0401) + (($200*40)|0)|0) + 28|0);
        HEAP16[$211>>1] = 128;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $210;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 26:  {
        $293 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = $294;
        $296 = $295;
        $297 = HEAP32[$296>>2]|0;
        $298 = (($295) + 4)|0;
        $299 = $298;
        $300 = HEAP32[$299>>2]|0;
        $301 = (($pOut$1) + 16|0);
        $302 = $301;
        $303 = $302;
        HEAP32[$303>>2] = $297;
        $304 = (($302) + 4)|0;
        $305 = $304;
        HEAP32[$305>>2] = $300;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 133:  {
        $306 = (($pOut$1) + 28|0);
        HEAP16[$306>>1] = 8;
        $307 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $308 = HEAP32[$307>>2]|0;
        $309 = +HEAPF64[$308>>3];
        $310 = (($pOut$1) + 8|0);
        HEAPF64[$310>>3] = $309;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 97:  {
        HEAP8[$140>>0] = 27;
        $311 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = (_sqlite3Strlen30($312)|0);
        $314 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        HEAP32[$314>>2] = $313;
        if ($48) {
         $335 = $313;$3763 = $312;$rc$2 = 0;
        } else {
         $315 = (_sqlite3VdbeMemSetStr($pOut$1,$312,-1,1,0)|0);
         $316 = ($315|0)==(18);
         if ($316) {
          $3764 = $691;$3765 = $694;
          label = 791;
          break L12;
         }
         $317 = (_sqlite3VdbeChangeEncoding($pOut$1,$47)|0);
         $318 = ($317|0)==(0);
         if (!($318)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
         $319 = (($pOut$1) + 36|0);
         HEAP32[$319>>2] = 0;
         $320 = (($pOut$1) + 28|0);
         $321 = HEAP16[$320>>1]|0;
         $322 = $321&65535;
         $323 = $322 | 2048;
         $324 = $323&65535;
         HEAP16[$320>>1] = $324;
         $325 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 1|0);
         $326 = HEAP8[$325>>0]|0;
         $327 = ($326<<24>>24)==(-1);
         if ($327) {
          $328 = HEAP32[$311>>2]|0;
          _sqlite3DbFree($2,$328);
         }
         HEAP8[$325>>0] = -1;
         $329 = (($pOut$1) + 4|0);
         $330 = HEAP32[$329>>2]|0;
         $$c = $330;
         HEAP32[$311>>2] = $$c;
         $331 = (($pOut$1) + 24|0);
         $332 = HEAP32[$331>>2]|0;
         HEAP32[$314>>2] = $332;
         $335 = $332;$3763 = $330;$rc$2 = $315;
        }
        $333 = HEAP32[$49>>2]|0;
        $334 = ($335|0)>($333|0);
        if ($334) {
         $3764 = $691;$3765 = $694;
         label = 791;
         break L12;
        } else {
         $338 = $3763;$340 = $335;$rc$3 = $rc$2;
         label = 53;
        }
        break;
       }
       case 28:  {
        $342 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $343 = HEAP32[$342>>2]|0;
        $344 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = (($343) - ($345))|0;
        $347 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $348 = HEAP32[$347>>2]|0;
        $349 = ($348|0)!=(0);
        $350 = $349 ? 257 : 1;
        $351 = (($pOut$1) + 28|0);
        HEAP16[$351>>1] = $350;
        $352 = ($346|0)>(0);
        if ($352) {
         $cnt$0242 = $346;$pOut$2243 = $pOut$1;
         while(1) {
          $353 = (($pOut$2243) + 40|0);
          $354 = (($pOut$2243) + 68|0);
          $355 = HEAP16[$354>>1]|0;
          $356 = $355 & 9312;
          $357 = ($356<<16>>16)==(0);
          if (!($357)) {
           _sqlite3VdbeMemReleaseExternal($353);
          }
          HEAP16[$354>>1] = $350;
          $358 = (($cnt$0242) + -1)|0;
          $359 = ($358|0)>(0);
          if ($359) {
           $cnt$0242 = $358;$pOut$2243 = $353;
          } else {
           break;
          }
         }
         $scevgep506 = (($pOut$1) + (($346*40)|0)|0);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $scevgep506;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 47:  {
        $1376 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $1377 = HEAP32[$1376>>2]|0;
        $1378 = HEAP8[$1377>>0]|0;
        $1379 = ($1378<<24>>24)==(0);
        if ($1379) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $1380 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $1381 = HEAP32[$1380>>2]|0;
         $1382 = (($aMem$0401) + (($1381*40)|0)|0);
         $1384 = $1378;$pIn1$2216 = $1382;$zAffinity$0215 = $1377;
         while(1) {
          $1383 = (($zAffinity$0215) + 1|0);
          _applyAffinity($pIn1$2216,$1384,$8);
          $1385 = (($pIn1$2216) + 40|0);
          $1386 = HEAP8[$1383>>0]|0;
          $1387 = ($1386<<24>>24)==(0);
          if ($1387) {
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break;
          } else {
           $1384 = $1386;$pIn1$2216 = $1385;$zAffinity$0215 = $1383;
          }
         }
        }
        break;
       }
       case 48:  {
        $1388 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1389 = HEAP32[$1388>>2]|0;
        $1390 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $1391 = HEAP32[$1390>>2]|0;
        $1392 = (($aMem$0401) + (($1389*40)|0)|0);
        $1393 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1394 = HEAP32[$1393>>2]|0;
        $1395 = (($1389) + -1)|0;
        $$sum16 = (($1395) + ($1394))|0;
        $1396 = (($aMem$0401) + (($$sum16*40)|0)|0);
        $1397 = HEAP8[$66>>0]|0;
        $1398 = $1397&255;
        $1399 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1400 = HEAP32[$1399>>2]|0;
        $1401 = (($aMem$0401) + (($1400*40)|0)|0);
        $1402 = ($1391|0)==(0|0);
        if ($1402) {
         $1415 = 0;$1417 = 0;$nHdr$0 = 0;$nZero$0 = 0;$pRec$1 = $1396;
        } else {
         $$pre624 = HEAP8[$1391>>0]|0;
         $1405 = $$pre624;$pRec$0 = $1392;$zAffinity14$0 = $1391;
         while(1) {
          $1403 = (($pRec$0) + 40|0);
          $1404 = (($zAffinity14$0) + 1|0);
          _applyAffinity($pRec$0,$1405,$8);
          $1406 = HEAP8[$1404>>0]|0;
          $1407 = ($1406<<24>>24)==(0);
          if ($1407) {
           $1415 = 0;$1417 = 0;$nHdr$0 = 0;$nZero$0 = 0;$pRec$1 = $1396;
           break;
          } else {
           $1405 = $1406;$pRec$0 = $1403;$zAffinity14$0 = $1404;
          }
         }
        }
        while(1) {
         $1408 = (_sqlite3VdbeSerialType($pRec$1,$1398)|0);
         $1409 = (_sqlite3VdbeSerialTypeLen($1408)|0);
         $1410 = (($pRec$1) + 28|0);
         $1411 = HEAP16[$1410>>1]|0;
         $1412 = $1411 & 16384;
         $1413 = ($1412<<16>>16)==(0);
         do {
          if ($1413) {
           $len16$0 = $1409;$nZero$1 = $nZero$0;
          } else {
           $1414 = ($1415|0)==(0);
           $1416 = ($1417|0)==(0);
           $1418 = $1414 & $1416;
           if ($1418) {
            $1419 = (($pRec$1) + 16|0);
            $1420 = HEAP32[$1419>>2]|0;
            $1421 = (($1420) + ($nZero$0))|0;
            $1422 = (($1409) - ($1420))|0;
            $len16$0 = $1422;$nZero$1 = $1421;
            break;
           } else {
            (_sqlite3VdbeMemExpandBlob($pRec$1)|0);
            $len16$0 = $1409;$nZero$1 = $nZero$0;
            break;
           }
          }
         } while(0);
         $1423 = ($len16$0|0)<(0);
         $1424 = $1423 << 31 >> 31;
         $1425 = (_i64Add(($len16$0|0),($1424|0),($1415|0),($1417|0))|0);
         $1426 = tempRet0;
         $1427 = ($1408>>>0)<(128);
         if ($1427) {
          $1430 = 1;
         } else {
          $1428 = (_sqlite3VarintLen($1408,0)|0);
          $1430 = $1428;
         }
         $1429 = (($1430) + ($nHdr$0))|0;
         $1431 = (($pRec$1) + -40|0);
         $1432 = ($1431>>>0)<($1392>>>0);
         if ($1432) {
          break;
         } else {
          $1415 = $1425;$1417 = $1426;$nHdr$0 = $1429;$nZero$0 = $nZero$1;$pRec$1 = $1431;
         }
        }
        $1433 = ($1429|0)<(127);
        if ($1433) {
         $1434 = (($1429) + 1)|0;
         $nHdr$1 = $1434;
        } else {
         $1435 = ($1429|0)<(0);
         $1436 = $1435 << 31 >> 31;
         $1437 = (_sqlite3VarintLen($1429,$1436)|0);
         $1438 = (($1437) + ($1429))|0;
         $1439 = ($1438|0)<(0);
         $1440 = $1439 << 31 >> 31;
         $1441 = (_sqlite3VarintLen($1438,$1440)|0);
         $1442 = ($1437|0)<($1441|0);
         $1443 = $1442&1;
         $$46 = (($1443) + ($1438))|0;
         $nHdr$1 = $$46;
        }
        $1444 = ($nHdr$1|0)<(0);
        $1445 = $1444 << 31 >> 31;
        $1446 = (_i64Add(($nHdr$1|0),($1445|0),($1425|0),($1426|0))|0);
        $1447 = tempRet0;
        $1448 = HEAP32[$49>>2]|0;
        $1449 = ($1448|0)<(0);
        $1450 = $1449 << 31 >> 31;
        $1451 = ($1447|0)>($1450|0);
        $1452 = ($1447|0)==($1450|0);
        $1453 = ($1446>>>0)>($1448>>>0);
        $1454 = $1452 & $1453;
        $1455 = $1451 | $1454;
        if ($1455) {
         $3764 = $691;$3765 = $694;
         label = 791;
         break L12;
        }
        $1456 = (_sqlite3VdbeMemGrow($1401,$1446,0)|0);
        $1457 = ($1456|0)==(0);
        if (!($1457)) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $1458 = ((($aMem$0401) + (($1400*40)|0)|0) + 4|0);
        $1459 = HEAP32[$1458>>2]|0;
        $1460 = ($nHdr$1>>>0)<(128);
        if ($1460) {
         $1461 = $nHdr$1&255;
         HEAP8[$1459>>0] = $1461;
         $i15$0 = 1;$j$0 = $nHdr$1;$pRec$2 = $1392;
        } else {
         $1462 = (_sqlite3PutVarint32($1459,$nHdr$1)|0);
         $phitmp18 = $1462 & 255;
         $i15$0 = $phitmp18;$j$0 = $nHdr$1;$pRec$2 = $1392;
        }
        while(1) {
         $1463 = (_sqlite3VdbeSerialType($pRec$2,$1398)|0);
         $1464 = ($1463>>>0)<(128);
         if ($1464) {
          $1465 = $1463&255;
          $1466 = (($1459) + ($i15$0)|0);
          HEAP8[$1466>>0] = $1465;
          $1470 = 1;
         } else {
          $1467 = (($1459) + ($i15$0)|0);
          $1468 = (_sqlite3PutVarint32($1467,$1463)|0);
          $phitmp20 = $1468 & 255;
          $1470 = $phitmp20;
         }
         $1469 = (($1470) + ($i15$0))|0;
         $1471 = (($1459) + ($j$0)|0);
         $1472 = (_sqlite3VdbeSerialPut($1471,$pRec$2,$1463)|0);
         $1473 = (($1472) + ($j$0))|0;
         $1474 = (($pRec$2) + 40|0);
         $1475 = ($1474>>>0)>($1396>>>0);
         if ($1475) {
          break;
         } else {
          $i15$0 = $1469;$j$0 = $1473;$pRec$2 = $1474;
         }
        }
        $1476 = ((($aMem$0401) + (($1400*40)|0)|0) + 24|0);
        HEAP32[$1476>>2] = $1446;
        $1477 = ((($aMem$0401) + (($1400*40)|0)|0) + 28|0);
        HEAP16[$1477>>1] = 16;
        $1478 = ((($aMem$0401) + (($1400*40)|0)|0) + 32|0);
        HEAP32[$1478>>2] = 0;
        $1479 = ($nZero$1|0)==(0);
        if (!($1479)) {
         $1480 = ((($aMem$0401) + (($1400*40)|0)|0) + 16|0);
         HEAP32[$1480>>2] = $nZero$1;
         HEAP16[$1477>>1] = 16400;
        }
        $1481 = ((($aMem$0401) + (($1400*40)|0)|0) + 30|0);
        HEAP8[$1481>>0] = 1;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $1401;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 49:  {
        $1482 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1483 = HEAP32[$1482>>2]|0;
        $1484 = HEAP32[$61>>2]|0;
        $1485 = (($1484) + ($1483<<2)|0);
        $1486 = HEAP32[$1485>>2]|0;
        $1487 = HEAP32[$1486>>2]|0;
        $1488 = $nEntry;
        $1489 = $1488;
        HEAP32[$1489>>2] = 0;
        $1490 = (($1488) + 4)|0;
        $1491 = $1490;
        HEAP32[$1491>>2] = 0;
        $1492 = (_sqlite3BtreeCount($1487,$nEntry)|0);
        $1493 = $nEntry;
        $1494 = $1493;
        $1495 = HEAP32[$1494>>2]|0;
        $1496 = (($1493) + 4)|0;
        $1497 = $1496;
        $1498 = HEAP32[$1497>>2]|0;
        $1499 = (($pOut$1) + 16|0);
        $1500 = $1499;
        $1501 = $1500;
        HEAP32[$1501>>2] = $1495;
        $1502 = (($1500) + 4)|0;
        $1503 = $1502;
        HEAP32[$1503>>2] = $1498;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $1492;
        break;
       }
       case 2:  {
        $1504 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1505 = HEAP32[$1504>>2]|0;
        $1506 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $1507 = HEAP32[$1506>>2]|0;
        $1508 = ($1505|0)==(0);
        if ($1508) {
         $1509 = HEAP32[$67>>2]|0;
         $1510 = ($1509|0)>(0);
         if ($1510) {
          label = 340;
          break L12;
         }
         $1511 = (_sqlite3Strlen30($1507)|0);
         $1512 = HEAP32[$68>>2]|0;
         $1513 = HEAP32[$69>>2]|0;
         $1514 = (($1513) + ($1512))|0;
         $1515 = (_sqlite3VtabSavepoint($2,0,$1514)|0);
         $1516 = ($1515|0)==(0);
         if (!($1516)) {
          $rc$45 = $1515;
          label = 793;
          break L12;
         }
         $1517 = (($1511) + 33)|0;
         $1518 = (_sqlite3DbMallocRaw($2,$1517)|0);
         $1519 = ($1518|0)==(0|0);
         if ($1519) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $1520 = (($1518) + 32|0);
         HEAP32[$1518>>2] = $1520;
         $1521 = (($1511) + 1)|0;
         _memcpy(($1520|0),($1507|0),($1521|0))|0;
         $1522 = HEAP8[$70>>0]|0;
         $1523 = ($1522<<24>>24)==(0);
         if ($1523) {
          $1524 = HEAP32[$69>>2]|0;
          $1525 = (($1524) + 1)|0;
          HEAP32[$69>>2] = $1525;
         } else {
          HEAP8[$70>>0] = 0;
          HEAP8[$74>>0] = 1;
         }
         $1526 = HEAP32[$71>>2]|0;
         $1527 = (($1518) + 24|0);
         HEAP32[$1527>>2] = $1526;
         HEAP32[$71>>2] = $1518;
         $1528 = $72;
         $1529 = $1528;
         $1530 = HEAP32[$1529>>2]|0;
         $1531 = (($1528) + 4)|0;
         $1532 = $1531;
         $1533 = HEAP32[$1532>>2]|0;
         $1534 = (($1518) + 8|0);
         $1535 = $1534;
         $1536 = $1535;
         HEAP32[$1536>>2] = $1530;
         $1537 = (($1535) + 4)|0;
         $1538 = $1537;
         HEAP32[$1538>>2] = $1533;
         $1539 = $73;
         $1540 = $1539;
         $1541 = HEAP32[$1540>>2]|0;
         $1542 = (($1539) + 4)|0;
         $1543 = $1542;
         $1544 = HEAP32[$1543>>2]|0;
         $1545 = (($1518) + 16|0);
         $1546 = $1545;
         $1547 = $1546;
         HEAP32[$1547>>2] = $1541;
         $1548 = (($1546) + 4)|0;
         $1549 = $1548;
         HEAP32[$1549>>2] = $1544;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $pSavepoint$0189 = HEAP32[$71>>2]|0;
        $1550 = ($pSavepoint$0189|0)==(0|0);
        if ($1550) {
         label = 350;
         break L12;
        } else {
         $iSavepoint$0190 = 0;$pSavepoint$0191 = $pSavepoint$0189;
        }
        while(1) {
         $1551 = HEAP32[$pSavepoint$0191>>2]|0;
         $1552 = (_sqlite3_stricmp($1551,$1507)|0);
         $1553 = ($1552|0)==(0);
         if ($1553) {
          break;
         }
         $1554 = (($iSavepoint$0190) + 1)|0;
         $1555 = (($pSavepoint$0191) + 24|0);
         $pSavepoint$0 = HEAP32[$1555>>2]|0;
         $1556 = ($pSavepoint$0|0)==(0|0);
         if ($1556) {
          label = 350;
          break L12;
         } else {
          $iSavepoint$0190 = $1554;$pSavepoint$0191 = $pSavepoint$0;
         }
        }
        $1557 = HEAP32[$67>>2]|0;
        $1558 = ($1557|0)>(0);
        $1559 = ($1505|0)==(1);
        $or$cond48 = $1558 & $1559;
        if ($or$cond48) {
         label = 352;
         break L12;
        }
        $1560 = (($pSavepoint$0191) + 24|0);
        $1561 = HEAP32[$1560>>2]|0;
        $1562 = ($1561|0)==(0|0);
        if ($1562) {
         $1563 = HEAP8[$74>>0]|0;
         $1564 = ($1563<<24>>24)!=(0);
         $or$cond49 = $1564 & $1559;
         if ($or$cond49) {
          $1565 = (_sqlite3VdbeCheckFk($p,1)|0);
          $1566 = ($1565|0)==(0);
          if (!($1566)) {
           $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = $1565;
           label = 790;
           break L12;
          }
          HEAP8[$70>>0] = 1;
          $1567 = (_sqlite3VdbeHalt($p)|0);
          $1568 = ($1567|0)==(5);
          if ($1568) {
           label = 357;
           break L12;
          }
          HEAP8[$74>>0] = 0;
          $1569 = HEAP32[$18>>2]|0;
          $$ph = 1;$iSavepoint$1$ph = $iSavepoint$0190;$rc$16$ph = $1569;
         } else {
          $3772 = $1564;
          label = 359;
         }
        } else {
         $3772 = 0;
         label = 359;
        }
        do {
         if ((label|0) == 359) {
          label = 0;
          $1570 = HEAP32[$69>>2]|0;
          $1571 = (($1570) - ($iSavepoint$0190))|0;
          $1572 = (($1571) + -1)|0;
          $1573 = ($1505|0)==(2);
          $1574 = HEAP32[$75>>2]|0;
          if ($1573) {
           $1575 = ($1574|0)>(0);
           if ($1575) {
            $ii$0196 = 0;
            while(1) {
             $1576 = HEAP32[$3>>2]|0;
             $1577 = ((($1576) + ($ii$0196<<4)|0) + 4|0);
             $1578 = HEAP32[$1577>>2]|0;
             _sqlite3BtreeTripAllCursors($1578,4);
             $1579 = (($ii$0196) + 1)|0;
             $1580 = HEAP32[$75>>2]|0;
             $1581 = ($1579|0)<($1580|0);
             if ($1581) {
              $ii$0196 = $1579;
             } else {
              $1583 = $1580;
              label = 362;
              break;
             }
            }
           }
          } else {
           $1583 = $1574;
           label = 362;
          }
          if ((label|0) == 362) {
           label = 0;
           $1582 = ($1583|0)>(0);
           if ($1582) {
            $ii$1201 = 0;
            while(1) {
             $1587 = HEAP32[$3>>2]|0;
             $1588 = ((($1587) + ($ii$1201<<4)|0) + 4|0);
             $1589 = HEAP32[$1588>>2]|0;
             $1590 = (_sqlite3BtreeSavepoint($1589,$1505,$1572)|0);
             $1591 = ($1590|0)==(0);
             $1586 = (($ii$1201) + 1)|0;
             if (!($1591)) {
              $rc$45 = $1590;
              label = 793;
              break L12;
             }
             $1584 = HEAP32[$75>>2]|0;
             $1585 = ($1586|0)<($1584|0);
             if ($1585) {
              $ii$1201 = $1586;
             } else {
              break;
             }
            }
           }
           if (!($1573)) {
            $$ph = $3772;$iSavepoint$1$ph = $1572;$rc$16$ph = 0;
            break;
           }
          }
          $1592 = HEAP32[$76>>2]|0;
          $1593 = $1592 & 2;
          $1594 = ($1593|0)==(0);
          if ($1594) {
           $$ph = $3772;$iSavepoint$1$ph = $1572;$rc$16$ph = 0;
          } else {
           _sqlite3ExpirePreparedStatements($2);
           _sqlite3ResetAllSchemasOfConnection($2);
           $1595 = HEAP32[$76>>2]|0;
           $1596 = $1595 | 2;
           HEAP32[$76>>2] = $1596;
           $$ph = $3772;$iSavepoint$1$ph = $1572;$rc$16$ph = 0;
          }
         }
        } while(0);
        $1597 = HEAP32[$71>>2]|0;
        $1598 = ($1597|0)==($pSavepoint$0191|0);
        if (!($1598)) {
         $1600 = $1597;
         while(1) {
          $1599 = (($1600) + 24|0);
          $1601 = HEAP32[$1599>>2]|0;
          HEAP32[$71>>2] = $1601;
          _sqlite3DbFree($2,$1600);
          $1602 = HEAP32[$69>>2]|0;
          $1603 = (($1602) + -1)|0;
          HEAP32[$69>>2] = $1603;
          $1604 = HEAP32[$71>>2]|0;
          $1605 = ($1604|0)==($pSavepoint$0191|0);
          if ($1605) {
           break;
          } else {
           $1600 = $1604;
          }
         }
        }
        if ($1559) {
         $1606 = HEAP32[$1560>>2]|0;
         HEAP32[$71>>2] = $1606;
         _sqlite3DbFree($2,$pSavepoint$0191);
         if ($$ph) {
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$16$ph;
          break L21;
         }
         $1607 = HEAP32[$69>>2]|0;
         $1608 = (($1607) + -1)|0;
         HEAP32[$69>>2] = $1608;
        } else {
         $1609 = (($pSavepoint$0191) + 8|0);
         $1610 = $1609;
         $1611 = $1610;
         $1612 = HEAP32[$1611>>2]|0;
         $1613 = (($1610) + 4)|0;
         $1614 = $1613;
         $1615 = HEAP32[$1614>>2]|0;
         $1616 = $72;
         $1617 = $1616;
         HEAP32[$1617>>2] = $1612;
         $1618 = (($1616) + 4)|0;
         $1619 = $1618;
         HEAP32[$1619>>2] = $1615;
         $1620 = (($pSavepoint$0191) + 16|0);
         $1621 = $1620;
         $1622 = $1621;
         $1623 = HEAP32[$1622>>2]|0;
         $1624 = (($1621) + 4)|0;
         $1625 = $1624;
         $1626 = HEAP32[$1625>>2]|0;
         $1627 = $73;
         $1628 = $1627;
         HEAP32[$1628>>2] = $1623;
         $1629 = (($1627) + 4)|0;
         $1630 = $1629;
         HEAP32[$1630>>2] = $1626;
         if ($$ph) {
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$16$ph;
          break L21;
         }
        }
        $1631 = (_sqlite3VtabSavepoint($2,$1505,$iSavepoint$1$ph)|0);
        $1632 = ($1631|0)==(0);
        if ($1632) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $rc$45 = $1631;
         label = 793;
         break L12;
        }
        break;
       }
       case 3:  {
        label = 375;
        break L12;
        break;
       }
       case 4:  {
        $1659 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1660 = HEAP32[$1659>>2]|0;
        $1661 = ($1660|0)==(0);
        if (!($1661)) {
         $1662 = HEAP32[$76>>2]|0;
         $1663 = $1662 & 33554432;
         $1664 = ($1663|0)==(0);
         if (!($1664)) {
          $rc$45 = 8;
          label = 793;
          break L12;
         }
        }
        $1665 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1666 = HEAP32[$1665>>2]|0;
        $1667 = HEAP32[$3>>2]|0;
        $1668 = ((($1667) + ($1666<<4)|0) + 4|0);
        $1669 = HEAP32[$1668>>2]|0;
        $1670 = ($1669|0)==(0|0);
        if ($1670) {
         HEAP32[$iMeta>>2] = 0;
         $iGen$0 = 0;$rc$19 = 0;
        } else {
         $1671 = (_sqlite3BtreeBeginTrans($1669,$1660)|0);
         if ((($1671|0) == 5)) {
          label = 393;
          break L12;
         } else if (!((($1671|0) == 0))) {
          $rc$45 = $1671;
          label = 793;
          break L12;
         }
         $1672 = HEAP32[$1659>>2]|0;
         $1673 = ($1672|0)==(0);
         do {
          if ($1673) {
           $rc$18 = 0;
          } else {
           $1674 = HEAP16[$77>>1]|0;
           $1675 = $1674 & 128;
           $1676 = ($1675<<16>>16)==(0);
           if ($1676) {
            $rc$18 = 0;
           } else {
            $1677 = HEAP8[$70>>0]|0;
            $1678 = ($1677<<24>>24)==(0);
            if (!($1678)) {
             $1679 = HEAP32[$81>>2]|0;
             $1680 = ($1679|0)>(1);
             if (!($1680)) {
              $rc$18 = 0;
              break;
             }
            }
            $1681 = HEAP32[$78>>2]|0;
            $1682 = ($1681|0)==(0);
            if ($1682) {
             $1683 = HEAP32[$68>>2]|0;
             $1684 = (($1683) + 1)|0;
             HEAP32[$68>>2] = $1684;
             $1685 = HEAP32[$69>>2]|0;
             $1686 = (($1685) + ($1684))|0;
             HEAP32[$78>>2] = $1686;
             $1688 = $1686;
            } else {
             $1688 = $1681;
            }
            $1687 = (($1688) + -1)|0;
            $1689 = (_sqlite3VtabSavepoint($2,0,$1687)|0);
            $1690 = ($1689|0)==(0);
            if ($1690) {
             $1691 = HEAP32[$78>>2]|0;
             $$idx89$val = HEAP32[$1669>>2]|0;
             $$idx90 = (($1669) + 4|0);
             $$idx90$val = HEAP32[$$idx90>>2]|0;
             $1692 = (_sqlite3BtreeBeginStmt($$idx89$val,$$idx90$val,$1691)|0);
             $rc$17 = $1692;
            } else {
             $rc$17 = $1689;
            }
            $1693 = $72;
            $1694 = $1693;
            $1695 = HEAP32[$1694>>2]|0;
            $1696 = (($1693) + 4)|0;
            $1697 = $1696;
            $1698 = HEAP32[$1697>>2]|0;
            $1699 = $79;
            $1700 = $1699;
            HEAP32[$1700>>2] = $1695;
            $1701 = (($1699) + 4)|0;
            $1702 = $1701;
            HEAP32[$1702>>2] = $1698;
            $1703 = $73;
            $1704 = $1703;
            $1705 = HEAP32[$1704>>2]|0;
            $1706 = (($1703) + 4)|0;
            $1707 = $1706;
            $1708 = HEAP32[$1707>>2]|0;
            $1709 = $80;
            $1710 = $1709;
            HEAP32[$1710>>2] = $1705;
            $1711 = (($1709) + 4)|0;
            $1712 = $1711;
            HEAP32[$1712>>2] = $1708;
            $rc$18 = $rc$17;
           }
          }
         } while(0);
         $$idx84$val = HEAP32[$1669>>2]|0;
         $$idx85 = (($1669) + 4|0);
         $$idx85$val = HEAP32[$$idx85>>2]|0;
         _sqlite3BtreeGetMeta($$idx84$val,$$idx85$val,1,$iMeta);
         $1713 = HEAP32[$1665>>2]|0;
         $1714 = HEAP32[$3>>2]|0;
         $1715 = ((($1714) + ($1713<<4)|0) + 12|0);
         $1716 = HEAP32[$1715>>2]|0;
         $1717 = (($1716) + 4|0);
         $1718 = HEAP32[$1717>>2]|0;
         $iGen$0 = $1718;$rc$19 = $rc$18;
        }
        $1719 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $1720 = HEAP8[$1719>>0]|0;
        $1721 = ($1720<<24>>24)==(0);
        if ($1721) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$19;
        } else {
         $1722 = HEAP32[$iMeta>>2]|0;
         $1723 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $1724 = HEAP32[$1723>>2]|0;
         $1725 = ($1722|0)==($1724|0);
         if (!($1725)) {
          label = 408;
          break L12;
         }
         $1726 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $1727 = HEAP32[$1726>>2]|0;
         $1728 = ($iGen$0|0)==($1727|0);
         if ($1728) {
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$19;
         } else {
          label = 408;
          break L12;
         }
        }
        break;
       }
       case 53: case 52:  {
        $1797 = HEAP16[$77>>1]|0;
        $1798 = $1797 & 32;
        $1799 = ($1798<<16>>16)==(0);
        if (!($1799)) {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 4;
         label = 784;
         break L12;
        }
        $1800 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1801 = HEAP32[$1800>>2]|0;
        $1802 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1803 = HEAP32[$1802>>2]|0;
        $1804 = HEAP32[$3>>2]|0;
        $1805 = ((($1804) + ($1803<<4)|0) + 4|0);
        $1806 = HEAP32[$1805>>2]|0;
        $1807 = ($141<<24>>24)==(53);
        if ($1807) {
         $1808 = ((($1804) + ($1803<<4)|0) + 12|0);
         $1809 = HEAP32[$1808>>2]|0;
         $1810 = (($1809) + 76|0);
         $1811 = HEAP8[$1810>>0]|0;
         $1812 = HEAP8[$66>>0]|0;
         $1813 = ($1811&255)<($1812&255);
         if ($1813) {
          HEAP8[$66>>0] = $1811;
          $wrFlag$0 = 1;
         } else {
          $wrFlag$0 = 1;
         }
        } else {
         $wrFlag$0 = 0;
        }
        $1814 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $1815 = HEAP8[$1814>>0]|0;
        $1816 = $1815 & 2;
        $1817 = ($1816<<24>>24)==(0);
        if ($1817) {
         $p222$0 = $1801;
        } else {
         $1818 = (($aMem$0401) + (($1801*40)|0)|0);
         _sqlite3VdbeMemIntegerify($1818);
         $1819 = ((($aMem$0401) + (($1801*40)|0)|0) + 16|0);
         $1820 = $1819;
         $1821 = $1820;
         $1822 = HEAP32[$1821>>2]|0;
         $1823 = (($1820) + 4)|0;
         $1824 = $1823;
         $1825 = HEAP32[$1824>>2]|0;
         $1826 = ($1822|0)<(2);
         if ($1826) {
          label = 423;
          break L12;
         } else {
          $p222$0 = $1822;
         }
        }
        $1827 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 1|0);
        $1828 = HEAP8[$1827>>0]|0;
        if ((($1828<<24>>24) == -6)) {
         $1829 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $1830 = HEAP32[$1829>>2]|0;
         $1831 = (($1830) + 6|0);
         $1832 = HEAP16[$1831>>1]|0;
         $1833 = $1832&65535;
         $1834 = (($1830) + 8|0);
         $1835 = HEAP16[$1834>>1]|0;
         $1836 = $1835&65535;
         $1837 = (($1836) + ($1833))|0;
         $nField20$0 = $1837;$pKeyInfo21$0 = $1830;
        } else if ((($1828<<24>>24) == -14)) {
         $1838 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $1839 = HEAP32[$1838>>2]|0;
         $nField20$0 = $1839;$pKeyInfo21$0 = 0;
        } else {
         $nField20$0 = 0;$pKeyInfo21$0 = 0;
        }
        $1840 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1841 = HEAP32[$1840>>2]|0;
        $1842 = (_allocateCursor($p,$1841,$nField20$0,$1803,1)|0);
        $1843 = ($1842|0)==(0|0);
        if ($1843) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $1844 = (($1842) + 25|0);
        HEAP8[$1844>>0] = 1;
        $1845 = (($1842) + 28|0);
        $1846 = HEAP8[$1845>>0]|0;
        $1847 = $1846 | 4;
        HEAP8[$1845>>0] = $1847;
        $1848 = HEAP32[$1842>>2]|0;
        $1849 = (_sqlite3BtreeCursor($1806,$p222$0,$wrFlag$0,$pKeyInfo21$0,$1848)|0);
        $1850 = (($1842) + 8|0);
        HEAP32[$1850>>2] = $pKeyInfo21$0;
        $1851 = HEAP32[$1842>>2]|0;
        $1852 = HEAP8[$1814>>0]|0;
        $1853 = $1852&255;
        $1854 = $1853 & 1;
        _sqlite3BtreeCursorHints($1851,$1854);
        $1855 = HEAP8[$1827>>0]|0;
        $1856 = ($1855<<24>>24)!=(-6);
        $1857 = $1856&1;
        $1858 = HEAP8[$1845>>0]|0;
        $1859 = ($1857 << 1)&255;
        $1860 = $1858 & -3;
        $1861 = $1859 | $1860;
        HEAP8[$1845>>0] = $1861;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $1849;
        break;
       }
       case 50:  {
        $1739 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1740 = HEAP32[$1739>>2]|0;
        $1741 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1742 = HEAP32[$1741>>2]|0;
        $1743 = HEAP32[$3>>2]|0;
        $1744 = ((($1743) + ($1740<<4)|0) + 4|0);
        $1745 = HEAP32[$1744>>2]|0;
        $$idx82$val = HEAP32[$1745>>2]|0;
        $$idx83 = (($1745) + 4|0);
        $$idx83$val = HEAP32[$$idx83>>2]|0;
        _sqlite3BtreeGetMeta($$idx82$val,$$idx83$val,$1742,$iMeta19);
        $1746 = HEAP32[$iMeta19>>2]|0;
        $1747 = ($1746|0)<(0);
        $1748 = $1747 << 31 >> 31;
        $1749 = (($pOut$1) + 16|0);
        $1750 = $1749;
        $1751 = $1750;
        HEAP32[$1751>>2] = $1746;
        $1752 = (($1750) + 4)|0;
        $1753 = $1752;
        HEAP32[$1753>>2] = $1748;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 51:  {
        $1754 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1755 = HEAP32[$1754>>2]|0;
        $1756 = HEAP32[$3>>2]|0;
        $1757 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1758 = HEAP32[$1757>>2]|0;
        $1759 = (($aMem$0401) + (($1758*40)|0)|0);
        _sqlite3VdbeMemIntegerify($1759);
        $1760 = ((($1756) + ($1755<<4)|0) + 4|0);
        $1761 = HEAP32[$1760>>2]|0;
        $1762 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1763 = HEAP32[$1762>>2]|0;
        $1764 = ((($aMem$0401) + (($1758*40)|0)|0) + 16|0);
        $1765 = $1764;
        $1766 = $1765;
        $1767 = HEAP32[$1766>>2]|0;
        $1768 = (($1765) + 4)|0;
        $1769 = $1768;
        $1770 = HEAP32[$1769>>2]|0;
        $$idx87$val = HEAP32[$1761>>2]|0;
        $$idx88 = (($1761) + 4|0);
        $$idx88$val = HEAP32[$$idx88>>2]|0;
        $1771 = (_sqlite3BtreeUpdateMeta($$idx87$val,$$idx88$val,$1763,$1767)|0);
        $1772 = HEAP32[$1762>>2]|0;
        if ((($1772|0) == 1)) {
         $1773 = $1764;
         $1774 = $1773;
         $1775 = HEAP32[$1774>>2]|0;
         $1776 = (($1773) + 4)|0;
         $1777 = $1776;
         $1778 = HEAP32[$1777>>2]|0;
         $1779 = ((($1756) + ($1755<<4)|0) + 12|0);
         $1780 = HEAP32[$1779>>2]|0;
         HEAP32[$1780>>2] = $1775;
         $1781 = HEAP32[$76>>2]|0;
         $1782 = $1781 | 2;
         HEAP32[$76>>2] = $1782;
        } else if ((($1772|0) == 2)) {
         $1783 = $1764;
         $1784 = $1783;
         $1785 = HEAP32[$1784>>2]|0;
         $1786 = (($1783) + 4)|0;
         $1787 = $1786;
         $1788 = HEAP32[$1787>>2]|0;
         $1789 = $1785&255;
         $1790 = ((($1756) + ($1755<<4)|0) + 12|0);
         $1791 = HEAP32[$1790>>2]|0;
         $1792 = (($1791) + 76|0);
         HEAP8[$1792>>0] = $1789;
        }
        $1793 = HEAP32[$1754>>2]|0;
        $1794 = ($1793|0)==(1);
        if ($1794) {
         _sqlite3ExpirePreparedStatements($2);
         $1795 = HEAP16[$77>>1]|0;
         $1796 = $1795 & -33;
         HEAP16[$77>>1] = $1796;
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $1771;
        } else {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $1771;
        }
        break;
       }
       case 55: case 54:  {
        $1862 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1863 = HEAP32[$1862>>2]|0;
        $1864 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1865 = HEAP32[$1864>>2]|0;
        $1866 = (_allocateCursor($p,$1863,$1865,-1,1)|0);
        $1867 = ($1866|0)==(0|0);
        if ($1867) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $1868 = (($1866) + 25|0);
        HEAP8[$1868>>0] = 1;
        $1869 = HEAP32[$2>>2]|0;
        $1870 = (($1866) + 4|0);
        $1871 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $1872 = HEAP8[$1871>>0]|0;
        $1873 = $1872&255;
        $1874 = $1873 | 5;
        $1875 = (_sqlite3BtreeOpen($1869,0,$2,$1870,$1874,1054)|0);
        $1876 = ($1875|0)==(0);
        do {
         if ($1876) {
          $1877 = HEAP32[$1870>>2]|0;
          $1878 = (_sqlite3BtreeBeginTrans($1877,1)|0);
          $1879 = ($1878|0)==(0);
          if ($1879) {
           $1880 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
           $1881 = HEAP32[$1880>>2]|0;
           $1882 = ($1881|0)==(0|0);
           $1883 = HEAP32[$1870>>2]|0;
           if ($1882) {
            $1897 = HEAP32[$1866>>2]|0;
            $1898 = (_sqlite3BtreeCursor($1883,1,1,0,$1897)|0);
            $1899 = (($1866) + 28|0);
            $1900 = HEAP8[$1899>>0]|0;
            $1901 = $1900 | 2;
            HEAP8[$1899>>0] = $1901;
            $rc$22 = $1898;
            break;
           }
           $1884 = HEAP8[$1871>>0]|0;
           $1885 = $1884&255;
           $1886 = $1885 | 2;
           $1887 = (_sqlite3BtreeCreateTable($1883,$pgno,$1886)|0);
           $1888 = ($1887|0)==(0);
           if ($1888) {
            $1889 = (($1866) + 8|0);
            HEAP32[$1889>>2] = $1881;
            $1890 = HEAP32[$1870>>2]|0;
            $1891 = HEAP32[$pgno>>2]|0;
            $1892 = HEAP32[$1866>>2]|0;
            $1893 = (_sqlite3BtreeCursor($1890,$1891,1,$1881,$1892)|0);
            $rc$21 = $1893;
           } else {
            $rc$21 = $1887;
           }
           $1894 = (($1866) + 28|0);
           $1895 = HEAP8[$1894>>0]|0;
           $1896 = $1895 & -3;
           HEAP8[$1894>>0] = $1896;
           $rc$22 = $rc$21;
          } else {
           $rc$22 = $1878;
          }
         } else {
          $rc$22 = $1875;
         }
        } while(0);
        $1902 = HEAP8[$1871>>0]|0;
        $1903 = ($1902<<24>>24)!=(8);
        $1904 = (($1866) + 28|0);
        $1905 = $1903&1;
        $1906 = HEAP8[$1904>>0]|0;
        $1907 = ($1905 << 2)&255;
        $1908 = $1906 & -5;
        $1909 = $1907 | $1908;
        HEAP8[$1904>>0] = $1909;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$22;
        break;
       }
       case 56:  {
        $1910 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1911 = HEAP32[$1910>>2]|0;
        $1912 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1913 = HEAP32[$1912>>2]|0;
        $1914 = (_allocateCursor($p,$1911,$1913,-1,1)|0);
        $1915 = ($1914|0)==(0|0);
        if ($1915) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $1916 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $1917 = HEAP32[$1916>>2]|0;
        $1918 = (($1914) + 8|0);
        HEAP32[$1918>>2] = $1917;
        $1919 = (_sqlite3VdbeSorterInit($2,$1914)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $1919;
        break;
       }
       case 57:  {
        $1920 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1921 = HEAP32[$1920>>2]|0;
        $1922 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $1923 = HEAP32[$1922>>2]|0;
        $1924 = (_allocateCursor($p,$1921,$1923,-1,0)|0);
        $1925 = ($1924|0)==(0|0);
        if ($1925) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $1926 = (($1924) + 25|0);
        HEAP8[$1926>>0] = 1;
        $1927 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $1928 = HEAP32[$1927>>2]|0;
        $1929 = (($1924) + 16|0);
        HEAP32[$1929>>2] = $1928;
        $1930 = (($1924) + 28|0);
        $1931 = HEAP8[$1930>>0]|0;
        $1932 = $1931 | 2;
        HEAP8[$1930>>0] = $1932;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 58:  {
        $1933 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1934 = HEAP32[$1933>>2]|0;
        $1935 = HEAP32[$61>>2]|0;
        $1936 = (($1935) + ($1934<<2)|0);
        $1937 = HEAP32[$1936>>2]|0;
        _sqlite3VdbeFreeCursor($p,$1937);
        $1938 = HEAP32[$1933>>2]|0;
        $1939 = HEAP32[$61>>2]|0;
        $1940 = (($1939) + ($1938<<2)|0);
        HEAP32[$1940>>2] = 0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 62: case 61: case 60: case 59:  {
        $1941 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $1942 = HEAP32[$1941>>2]|0;
        $1943 = HEAP32[$61>>2]|0;
        $1944 = (($1943) + ($1942<<2)|0);
        $1945 = HEAP32[$1944>>2]|0;
        $1946 = (($1945) + 25|0);
        HEAP8[$1946>>0] = 0;
        $1947 = (($1945) + 28|0);
        $1948 = HEAP8[$1947>>0]|0;
        $1949 = $1948 & 2;
        $1950 = ($1949<<24>>24)==(0);
        if ($1950) {
         $1984 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $1985 = HEAP32[$1984>>2]|0;
         $1986 = (($1945) + 8|0);
         $1987 = HEAP32[$1986>>2]|0;
         HEAP32[$r>>2] = $1987;
         $1988 = $1985&65535;
         HEAP16[$82>>1] = $1988;
         $1989 = $142 << 1;
         $1990 = $1989 & 2;
         $1991 = (($1990) + 255)|0;
         $1992 = $1991&255;
         HEAP8[$83>>0] = $1992;
         $1993 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $1994 = HEAP32[$1993>>2]|0;
         $1995 = (($aMem$0401) + (($1994*40)|0)|0);
         HEAP32[$84>>2] = $1995;
         $1996 = ((($aMem$0401) + (($1994*40)|0)|0) + 28|0);
         $1997 = HEAP16[$1996>>1]|0;
         $1998 = $1997 & 16384;
         $1999 = ($1998<<16>>16)==(0);
         if (!($1999)) {
          (_sqlite3VdbeMemExpandBlob($1995)|0);
         }
         $2000 = HEAP32[$1945>>2]|0;
         $2001 = (_sqlite3BtreeMovetoUnpacked($2000,$r,0,0,0,$res28)|0);
         $2002 = ($2001|0)==(0);
         if (!($2002)) {
          $rc$45 = $2001;
          label = 793;
          break L12;
         }
         $2003 = (($1945) + 26|0);
         HEAP8[$2003>>0] = 0;
         $$pre625 = HEAP32[$res28>>2]|0;
         $2008 = $$pre625;$oc$1 = $142;
        } else {
         $1951 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $1952 = HEAP32[$1951>>2]|0;
         $1953 = (($aMem$0401) + (($1952*40)|0)|0);
         _applyNumericAffinity($1953);
         $1954 = (_sqlite3VdbeIntValue($1953)|0);
         $1955 = tempRet0;
         $1956 = (($1945) + 26|0);
         HEAP8[$1956>>0] = 0;
         $1957 = ((($aMem$0401) + (($1952*40)|0)|0) + 28|0);
         $1958 = HEAP16[$1957>>1]|0;
         $1959 = $1958&65535;
         $1960 = $1959 & 4;
         $1961 = ($1960|0)==(0);
         do {
          if ($1961) {
           $1962 = $1959 & 8;
           $1963 = ($1962|0)==(0);
           if ($1963) {
            $1964 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
            $1965 = HEAP32[$1964>>2]|0;
            $1966 = (($1965) + -1)|0;
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $1966;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
           $1967 = ((($aMem$0401) + (($1952*40)|0)|0) + 8|0);
           $1968 = +HEAPF64[$1967>>3];
           $1969 = (+($1954>>>0)) + (4294967296.0*(+($1955|0)));
           $1970 = $1968 < $1969;
           if ($1970) {
            $1971 = $142 & 1;
            $sext = (($142) + -1)|0;
            $$54 = (($sext) + ($1971))|0;
            $oc$0 = $$54;
            break;
           }
           $1972 = $1968 > $1969;
           if ($1972) {
            $1973 = $142 & 1;
            $$55 = (($1973) + ($142))|0;
            $oc$0 = $$55;
           } else {
            $oc$0 = $142;
           }
          } else {
           $oc$0 = $142;
          }
         } while(0);
         $1974 = HEAP32[$1945>>2]|0;
         $1975 = (_sqlite3BtreeMovetoUnpacked($1974,0,$1954,$1955,0,$res28)|0);
         $1976 = ($1975|0)==(0);
         if (!($1976)) {
          $rc$45 = $1975;
          label = 793;
          break L12;
         }
         $1977 = HEAP32[$res28>>2]|0;
         $1978 = ($1977|0)==(0);
         if ($1978) {
          HEAP8[$1956>>0] = 1;
          $1979 = (($1945) + 56|0);
          $1980 = $1979;
          $1981 = $1980;
          HEAP32[$1981>>2] = $1954;
          $1982 = (($1980) + 4)|0;
          $1983 = $1982;
          HEAP32[$1983>>2] = $1955;
          $2008 = 0;$oc$1 = $oc$0;
         } else {
          $2008 = $1977;$oc$1 = $oc$0;
         }
        }
        $2004 = (($1945) + 27|0);
        HEAP8[$2004>>0] = 0;
        $2005 = (($1945) + 68|0);
        HEAP32[$2005>>2] = 0;
        $2006 = ($oc$1|0)>(60);
        do {
         if ($2006) {
          $2007 = ($2008|0)<(0);
          if (!($2007)) {
           $2009 = ($2008|0)==(0);
           $2010 = ($oc$1|0)==(62);
           $or$cond56 = $2009 & $2010;
           if (!($or$cond56)) {
            HEAP32[$res28>>2] = 0;
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
          }
          HEAP32[$res28>>2] = 0;
          $2011 = HEAP32[$1945>>2]|0;
          $2012 = (_sqlite3BtreeNext($2011,$res28)|0);
          $2013 = ($2012|0)==(0);
          if (!($2013)) {
           $rc$45 = $2012;
           label = 793;
           break L12;
          }
          $2014 = (($1945) + 26|0);
          HEAP8[$2014>>0] = 0;
          label = 469;
         } else {
          $2015 = ($2008|0)>(0);
          if (!($2015)) {
           $2016 = ($2008|0)==(0);
           $2017 = ($oc$1|0)==(59);
           $or$cond57 = $2016 & $2017;
           if (!($or$cond57)) {
            $2022 = HEAP32[$1945>>2]|0;
            $$idx91 = (($2022) + 83|0);
            $$idx91$val = HEAP8[$$idx91>>0]|0;
            $2023 = (_sqlite3BtreeEof($$idx91$val)|0);
            HEAP32[$res28>>2] = $2023;
            $2025 = $2023;
            break;
           }
          }
          HEAP32[$res28>>2] = 0;
          $2018 = HEAP32[$1945>>2]|0;
          $2019 = (_sqlite3BtreePrevious($2018,$res28)|0);
          $2020 = ($2019|0)==(0);
          if (!($2020)) {
           $rc$45 = $2019;
           label = 793;
           break L12;
          }
          $2021 = (($1945) + 26|0);
          HEAP8[$2021>>0] = 0;
          label = 469;
         }
        } while(0);
        if ((label|0) == 469) {
         label = 0;
         $$pr109 = HEAP32[$res28>>2]|0;
         $2025 = $$pr109;
        }
        $2024 = ($2025|0)==(0);
        if ($2024) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $2026 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2027 = HEAP32[$2026>>2]|0;
         $2028 = (($2027) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $2028;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 63:  {
        $2029 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2030 = HEAP32[$2029>>2]|0;
        $2031 = HEAP32[$61>>2]|0;
        $2032 = (($2031) + ($2030<<2)|0);
        $2033 = HEAP32[$2032>>2]|0;
        $2034 = (($2033) + 25|0);
        HEAP8[$2034>>0] = 0;
        $2035 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2036 = HEAP32[$2035>>2]|0;
        $2037 = (($aMem$0401) + (($2036*40)|0)|0);
        $2038 = (_sqlite3VdbeIntValue($2037)|0);
        $2039 = tempRet0;
        $2040 = (($2033) + 48|0);
        $2041 = $2040;
        $2042 = $2041;
        HEAP32[$2042>>2] = $2038;
        $2043 = (($2041) + 4)|0;
        $2044 = $2043;
        HEAP32[$2044>>2] = $2039;
        $2045 = (($2033) + 26|0);
        HEAP8[$2045>>0] = 0;
        $2046 = (($2033) + 27|0);
        HEAP8[$2046>>0] = 1;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 66: case 65: case 64:  {
        $2047 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2048 = HEAP32[$2047>>2]|0;
        $2049 = HEAP32[$61>>2]|0;
        $2050 = (($2049) + ($2048<<2)|0);
        $2051 = HEAP32[$2050>>2]|0;
        $2052 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2053 = HEAP32[$2052>>2]|0;
        HEAP32[$pFree>>2] = 0;
        $2054 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2055 = HEAP32[$2054>>2]|0;
        $2056 = ($2055|0)>(0);
        $2057 = (($2051) + 8|0);
        $2058 = HEAP32[$2057>>2]|0;
        L549: do {
         if ($2056) {
          $2059 = (($aMem$0401) + (($2053*40)|0)|0);
          HEAP32[$r35>>2] = $2058;
          $2060 = $2055&65535;
          HEAP16[$85>>1] = $2060;
          HEAP32[$86>>2] = $2059;
          $2061 = ($2060<<16>>16)==(0);
          if ($2061) {
           $pIdxKey$0 = $r35;
          } else {
           $2063 = $2059;$3773 = $2060;$ii32$0180 = 0;
           while(1) {
            $2062 = ((($2063) + (($ii32$0180*40)|0)|0) + 28|0);
            $2064 = HEAP16[$2062>>1]|0;
            $2065 = $2064 & 16384;
            $2066 = ($2065<<16>>16)==(0);
            if ($2066) {
             $2070 = $3773;
            } else {
             $2067 = (($2063) + (($ii32$0180*40)|0)|0);
             (_sqlite3VdbeMemExpandBlob($2067)|0);
             $$pre626 = HEAP16[$85>>1]|0;
             $2070 = $$pre626;
            }
            $2068 = (($ii32$0180) + 1)|0;
            $2069 = $2070&65535;
            $2071 = ($2068|0)<($2069|0);
            if (!($2071)) {
             $pIdxKey$0 = $r35;
             break L549;
            }
            $$pre675 = HEAP32[$86>>2]|0;
            $2063 = $$pre675;$3773 = $2070;$ii32$0180 = $2068;
           }
          }
         } else {
          $2072 = (_sqlite3VdbeAllocUnpackedRecord($2058,$aTempRec,191,$pFree)|0);
          $2073 = ($2072|0)==(0|0);
          if ($2073) {
           $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
           label = 792;
           break L1;
          }
          $2074 = HEAP32[$2057>>2]|0;
          $2075 = ((($aMem$0401) + (($2053*40)|0)|0) + 24|0);
          $2076 = HEAP32[$2075>>2]|0;
          $2077 = ((($aMem$0401) + (($2053*40)|0)|0) + 4|0);
          $2078 = HEAP32[$2077>>2]|0;
          _sqlite3VdbeRecordUnpack($2074,$2076,$2078,$2072);
          $pIdxKey$0 = $2072;
         }
        } while(0);
        $2079 = (($pIdxKey$0) + 6|0);
        HEAP8[$2079>>0] = 0;
        $2080 = HEAP8[$140>>0]|0;
        $2081 = ($2080<<24>>24)==(64);
        L560: do {
         if ($2081) {
          $2082 = HEAP16[$85>>1]|0;
          $2083 = ($2082<<16>>16)==(0);
          if ($2083) {
           $pc$4 = $pc$0463;
          } else {
           $2084 = HEAP32[$86>>2]|0;
           $2085 = $2082&65535;
           $ii32$1185 = 0;
           while(1) {
            $2088 = ((($2084) + (($ii32$1185*40)|0)|0) + 28|0);
            $2089 = HEAP16[$2088>>1]|0;
            $2090 = $2089 & 1;
            $2091 = ($2090<<16>>16)==(0);
            $2087 = (($ii32$1185) + 1)|0;
            if (!($2091)) {
             break;
            }
            $2086 = ($2087|0)<($2085|0);
            if ($2086) {
             $ii32$1185 = $2087;
            } else {
             $pc$4 = $pc$0463;
             break L560;
            }
           }
           $2092 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
           $2093 = HEAP32[$2092>>2]|0;
           $2094 = (($2093) + -1)|0;
           $pc$4 = $2094;
          }
         } else {
          $pc$4 = $pc$0463;
         }
        } while(0);
        $2095 = HEAP32[$2051>>2]|0;
        $2096 = (_sqlite3BtreeMovetoUnpacked($2095,$pIdxKey$0,0,0,0,$res34)|0);
        $2097 = HEAP32[$2054>>2]|0;
        $2098 = ($2097|0)==(0);
        if ($2098) {
         $2099 = HEAP32[$pFree>>2]|0;
         _sqlite3DbFree($2,$2099);
        }
        $2100 = ($2096|0)==(0);
        if (!($2100)) {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$4;$rc$42$ph = $2096;
         label = 784;
         break L12;
        }
        $2101 = HEAP32[$res34>>2]|0;
        $2102 = (($2051) + 12|0);
        HEAP32[$2102>>2] = $2101;
        $2103 = ($2101|0)==(0);
        $2104 = $2103&1;
        $2105 = $2104 ^ 1;
        $2106 = $2105&255;
        $2107 = (($2051) + 25|0);
        HEAP8[$2107>>0] = $2106;
        $2108 = (($2051) + 27|0);
        HEAP8[$2108>>0] = 0;
        $2109 = (($2051) + 68|0);
        HEAP32[$2109>>2] = 0;
        $2110 = HEAP8[$140>>0]|0;
        $2111 = ($2110<<24>>24)==(66);
        if ($2111) {
         if (!($2103)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$4;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $2112 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2113 = HEAP32[$2112>>2]|0;
         $2114 = (($2113) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $2114;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         if ($2103) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$4;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $2115 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2116 = HEAP32[$2115>>2]|0;
         $2117 = (($2116) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $2117;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 67:  {
        $2118 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2119 = HEAP32[$2118>>2]|0;
        $2120 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2121 = HEAP32[$2120>>2]|0;
        $2122 = HEAP32[$61>>2]|0;
        $2123 = (($2122) + ($2121<<2)|0);
        $2124 = HEAP32[$2123>>2]|0;
        $2125 = HEAP32[$2124>>2]|0;
        HEAP32[$res39>>2] = 0;
        $2126 = ((($aMem$0401) + (($2119*40)|0)|0) + 16|0);
        $2127 = $2126;
        $2128 = $2127;
        $2129 = HEAP32[$2128>>2]|0;
        $2130 = (($2127) + 4)|0;
        $2131 = $2130;
        $2132 = HEAP32[$2131>>2]|0;
        $2133 = (_sqlite3BtreeMovetoUnpacked($2125,0,$2129,$2132,0,$res39)|0);
        $2134 = $2126;
        $2135 = $2134;
        $2136 = HEAP32[$2135>>2]|0;
        $2137 = (($2134) + 4)|0;
        $2138 = $2137;
        $2139 = HEAP32[$2138>>2]|0;
        $2140 = (($2124) + 56|0);
        $2141 = $2140;
        $2142 = $2141;
        HEAP32[$2142>>2] = $2136;
        $2143 = (($2141) + 4)|0;
        $2144 = $2143;
        HEAP32[$2144>>2] = $2139;
        $2145 = HEAP32[$res39>>2]|0;
        $2146 = ($2145|0)==(0);
        $2147 = $2146&1;
        $2148 = (($2124) + 26|0);
        HEAP8[$2148>>0] = $2147;
        $2149 = (($2124) + 25|0);
        HEAP8[$2149>>0] = 0;
        $2150 = (($2124) + 68|0);
        HEAP32[$2150>>2] = 0;
        $2151 = (($2124) + 27|0);
        HEAP8[$2151>>0] = 0;
        if ($2146) {
         $pc$7 = $pc$0463;
        } else {
         $2152 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2153 = HEAP32[$2152>>2]|0;
         $2154 = (($2153) + -1)|0;
         $pc$7 = $2154;
        }
        $2155 = (($2124) + 12|0);
        HEAP32[$2155>>2] = $2145;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$7;$rc$42 = $2133;
        break;
       }
       case 68:  {
        $2156 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2157 = HEAP32[$2156>>2]|0;
        $2158 = HEAP32[$61>>2]|0;
        $2159 = (($2158) + ($2157<<2)|0);
        $2160 = HEAP32[$2159>>2]|0;
        $2161 = (($2160) + 40|0);
        $2162 = $2161;
        $2163 = $2162;
        $2164 = HEAP32[$2163>>2]|0;
        $2165 = (($2162) + 4)|0;
        $2166 = $2165;
        $2167 = HEAP32[$2166>>2]|0;
        $2168 = (_i64Add(($2164|0),($2167|0),1,0)|0);
        $2169 = tempRet0;
        $2170 = $2161;
        $2171 = $2170;
        HEAP32[$2171>>2] = $2168;
        $2172 = (($2170) + 4)|0;
        $2173 = $2172;
        HEAP32[$2173>>2] = $2169;
        $2174 = (($pOut$1) + 16|0);
        $2175 = $2174;
        $2176 = $2175;
        HEAP32[$2176>>2] = $2164;
        $2177 = (($2175) + 4)|0;
        $2178 = $2177;
        HEAP32[$2178>>2] = $2167;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 69:  {
        $2179 = $v;
        $2180 = $2179;
        HEAP32[$2180>>2] = 0;
        $2181 = (($2179) + 4)|0;
        $2182 = $2181;
        HEAP32[$2182>>2] = 0;
        HEAP32[$res42>>2] = 0;
        $2183 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2184 = HEAP32[$2183>>2]|0;
        $2185 = HEAP32[$61>>2]|0;
        $2186 = (($2185) + ($2184<<2)|0);
        $2187 = HEAP32[$2186>>2]|0;
        $2188 = HEAP32[$2187>>2]|0;
        $2189 = ($2188|0)==(0|0);
        if ($2189) {
         $2318 = 0;$2321 = 0;$rc$28 = 0;
        } else {
         $2190 = (($2187) + 28|0);
         $2191 = HEAP8[$2190>>0]|0;
         $2192 = $2191 & 1;
         $2193 = ($2192<<24>>24)==(0);
         do {
          if ($2193) {
           $2194 = (_sqlite3BtreeLast($2188,$res42)|0);
           $2195 = ($2194|0)==(0);
           if (!($2195)) {
            $rc$45 = $2194;
            label = 793;
            break L12;
           }
           $2196 = HEAP32[$res42>>2]|0;
           $2197 = ($2196|0)==(0);
           if (!($2197)) {
            $2198 = $v;
            $2199 = $2198;
            HEAP32[$2199>>2] = 1;
            $2200 = (($2198) + 4)|0;
            $2201 = $2200;
            HEAP32[$2201>>2] = 0;
            break;
           }
           $2202 = HEAP32[$2187>>2]|0;
           _sqlite3BtreeKeySize($2202,$v);
           $2203 = $v;
           $2204 = $2203;
           $2205 = HEAP32[$2204>>2]|0;
           $2206 = (($2203) + 4)|0;
           $2207 = $2206;
           $2208 = HEAP32[$2207>>2]|0;
           $2209 = ($2205|0)==(-1);
           $2210 = ($2208|0)==(2147483647);
           $2211 = $2209 & $2210;
           if ($2211) {
            $2212 = HEAP8[$2190>>0]|0;
            $2213 = $2212 | 1;
            HEAP8[$2190>>0] = $2213;
            break;
           } else {
            $2214 = (_i64Add(($2205|0),($2208|0),1,0)|0);
            $2215 = tempRet0;
            $2216 = $v;
            $2217 = $2216;
            HEAP32[$2217>>2] = $2214;
            $2218 = (($2216) + 4)|0;
            $2219 = $2218;
            HEAP32[$2219>>2] = $2215;
            break;
           }
          }
         } while(0);
         $2220 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
         $2221 = HEAP32[$2220>>2]|0;
         $2222 = ($2221|0)==(0);
         if (!($2222)) {
          $2223 = HEAP32[$44>>2]|0;
          $2224 = ($2223|0)==(0|0);
          if ($2224) {
           $$pn = $aMem$0401;
          } else {
           $pFrame45$0 = $2223;
           while(1) {
            $2225 = (($pFrame45$0) + 4|0);
            $2226 = HEAP32[$2225>>2]|0;
            $2227 = ($2226|0)==(0|0);
            if ($2227) {
             break;
            } else {
             $pFrame45$0 = $2226;
            }
           }
           $2228 = (($pFrame45$0) + 12|0);
           $2229 = HEAP32[$2228>>2]|0;
           $$pn = $2229;
          }
          $pMem44$0 = (($$pn) + (($2221*40)|0)|0);
          _sqlite3VdbeMemIntegerify($pMem44$0);
          $2230 = ((($$pn) + (($2221*40)|0)|0) + 16|0);
          $2231 = $2230;
          $2232 = $2231;
          $2233 = HEAP32[$2232>>2]|0;
          $2234 = (($2231) + 4)|0;
          $2235 = $2234;
          $2236 = HEAP32[$2235>>2]|0;
          $2237 = ($2233|0)==(-1);
          $2238 = ($2236|0)==(2147483647);
          $2239 = $2237 & $2238;
          if ($2239) {
           $rc$45 = 13;
           label = 793;
           break L12;
          }
          $2240 = HEAP8[$2190>>0]|0;
          $2241 = $2240 & 1;
          $2242 = ($2241<<24>>24)==(0);
          if (!($2242)) {
           $rc$45 = 13;
           label = 793;
           break L12;
          }
          $2243 = $v;
          $2244 = $2243;
          $2245 = HEAP32[$2244>>2]|0;
          $2246 = (($2243) + 4)|0;
          $2247 = $2246;
          $2248 = HEAP32[$2247>>2]|0;
          $2249 = (_i64Add(($2233|0),($2236|0),1,0)|0);
          $2250 = tempRet0;
          $2251 = ($2248|0)<($2250|0);
          $2252 = ($2248|0)==($2250|0);
          $2253 = ($2245>>>0)<($2249>>>0);
          $2254 = $2252 & $2253;
          $2255 = $2251 | $2254;
          if ($2255) {
           $2256 = $v;
           $2257 = $2256;
           HEAP32[$2257>>2] = $2249;
           $2258 = (($2256) + 4)|0;
           $2259 = $2258;
           HEAP32[$2259>>2] = $2250;
           $2262 = $2249;$2265 = $2250;
          } else {
           $2262 = $2245;$2265 = $2248;
          }
          $2260 = $2230;
          $2261 = $2260;
          HEAP32[$2261>>2] = $2262;
          $2263 = (($2260) + 4)|0;
          $2264 = $2263;
          HEAP32[$2264>>2] = $2265;
         }
         $2266 = HEAP8[$2190>>0]|0;
         $2267 = $2266 & 1;
         $2268 = ($2267<<24>>24)==(0);
         if ($2268) {
          $2269 = $v;
          $2270 = $2269;
          $2271 = HEAP32[$2270>>2]|0;
          $2272 = (($2269) + 4)|0;
          $2273 = $2272;
          $2274 = HEAP32[$2273>>2]|0;
          $3774 = $2271;$3775 = $2274;$rc$27 = 0;
         } else {
          $2275 = $694 & 1073741823;
          $2276 = (_i64Add(($691|0),($2275|0),1,0)|0);
          $2277 = tempRet0;
          $2278 = $v;
          $2279 = $2278;
          HEAP32[$2279>>2] = $2276;
          $2280 = (($2278) + 4)|0;
          $2281 = $2280;
          HEAP32[$2281>>2] = $2277;
          $2282 = HEAP32[$2187>>2]|0;
          $2283 = (_sqlite3BtreeMovetoUnpacked($2282,0,$2276,$2277,0,$res42)|0);
          $2284 = HEAP32[$res42>>2]|0;
          $2285 = $2284 | $2283;
          $2286 = ($2285|0)==(0);
          if ($2286) {
           $cnt43$0174 = 1;
           while(1) {
            _sqlite3_randomness(8,$v);
            $2287 = ($cnt43$0174|0)<(5);
            $2288 = $v;
            $2289 = $2288;
            $2290 = HEAP32[$2289>>2]|0;
            $2291 = (($2288) + 4)|0;
            $2292 = $2291;
            $2293 = HEAP32[$2292>>2]|0;
            $2294 = $2287 ? 16777215 : -1;
            $2295 = $2287 ? 0 : 1073741823;
            $2296 = $2290 & $2294;
            $2297 = $2293 & $2295;
            $phitmp14 = (($cnt43$0174) + 1)|0;
            $2298 = (_i64Add(($2296|0),($2297|0),1,0)|0);
            $2299 = tempRet0;
            $2300 = $v;
            $2301 = $2300;
            HEAP32[$2301>>2] = $2298;
            $2302 = (($2300) + 4)|0;
            $2303 = $2302;
            HEAP32[$2303>>2] = $2299;
            $2304 = HEAP32[$2187>>2]|0;
            $2305 = (_sqlite3BtreeMovetoUnpacked($2304,0,$2298,$2299,0,$res42)|0);
            $2306 = HEAP32[$res42>>2]|0;
            $2307 = $2306 | $2305;
            $2308 = ($2307|0)==(0);
            $2309 = ($phitmp14|0)<(100);
            $or$cond58 = $2308 & $2309;
            if ($or$cond58) {
             $cnt43$0174 = $phitmp14;
            } else {
             $$lcssa = $2305;$$lcssa171 = $2306;$3776 = $2298;$3777 = $2299;
             break;
            }
           }
          } else {
           $$lcssa = $2283;$$lcssa171 = $2284;$3776 = $2276;$3777 = $2277;
          }
          $2310 = $$lcssa171 | $$lcssa;
          $2311 = ($2310|0)==(0);
          if ($2311) {
           $rc$45 = 13;
           label = 793;
           break L12;
          } else {
           $3774 = $3776;$3775 = $3777;$rc$27 = $$lcssa;
          }
         }
         $2312 = (($2187) + 26|0);
         HEAP8[$2312>>0] = 0;
         $2313 = (($2187) + 27|0);
         HEAP8[$2313>>0] = 0;
         $2314 = (($2187) + 68|0);
         HEAP32[$2314>>2] = 0;
         $2318 = $3774;$2321 = $3775;$rc$28 = $rc$27;
        }
        $2315 = (($pOut$1) + 16|0);
        $2316 = $2315;
        $2317 = $2316;
        HEAP32[$2317>>2] = $2318;
        $2319 = (($2316) + 4)|0;
        $2320 = $2319;
        HEAP32[$2320>>2] = $2321;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$28;
        break;
       }
       case 73: case 70:  {
        $2322 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2323 = HEAP32[$2322>>2]|0;
        $2324 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2325 = HEAP32[$2324>>2]|0;
        $2326 = HEAP32[$61>>2]|0;
        $2327 = (($2326) + ($2325<<2)|0);
        $2328 = HEAP32[$2327>>2]|0;
        $2329 = ($141<<24>>24)==(70);
        $2330 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2331 = HEAP32[$2330>>2]|0;
        if ($2329) {
         $2332 = ((($aMem$0401) + (($2331*40)|0)|0) + 16|0);
         $2333 = $2332;
         $2334 = $2333;
         $2335 = HEAP32[$2334>>2]|0;
         $2336 = (($2333) + 4)|0;
         $2337 = $2336;
         $2338 = HEAP32[$2337>>2]|0;
         $2352 = $2335;$2355 = $2338;
        } else {
         $2339 = ($2331|0)<(0);
         $2340 = $2339 << 31 >> 31;
         $2352 = $2331;$2355 = $2340;
        }
        $2341 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $2342 = HEAP8[$2341>>0]|0;
        $2343 = $2342 & 1;
        $2344 = ($2343<<24>>24)==(0);
        if ($2344) {
         $2348 = $2342;
        } else {
         $2345 = HEAP32[$46>>2]|0;
         $2346 = (($2345) + 1)|0;
         HEAP32[$46>>2] = $2346;
         $$pre628 = HEAP8[$2341>>0]|0;
         $2348 = $$pre628;
        }
        $2347 = $2348 & 2;
        $2349 = ($2347<<24>>24)==(0);
        if ($2349) {
         $3778 = $691;$3779 = $694;
        } else {
         $2350 = $11;
         $2351 = $2350;
         HEAP32[$2351>>2] = $2352;
         $2353 = (($2350) + 4)|0;
         $2354 = $2353;
         HEAP32[$2354>>2] = $2355;
         $3778 = $2352;$3779 = $2355;
        }
        $2356 = ((($aMem$0401) + (($2323*40)|0)|0) + 28|0);
        $2357 = HEAP16[$2356>>1]|0;
        $2358 = $2357 & 1;
        $2359 = ($2358<<16>>16)==(0);
        if (!($2359)) {
         $2360 = ((($aMem$0401) + (($2323*40)|0)|0) + 4|0);
         HEAP32[$2360>>2] = 0;
         $2361 = ((($aMem$0401) + (($2323*40)|0)|0) + 24|0);
         HEAP32[$2361>>2] = 0;
        }
        $2362 = HEAP8[$2341>>0]|0;
        $2363 = $2362 & 16;
        $2364 = ($2363<<24>>24)==(0);
        if ($2364) {
         $2378 = 0;
        } else {
         $2365 = (($2328) + 12|0);
         $2366 = HEAP32[$2365>>2]|0;
         $2378 = $2366;
        }
        $2367 = $2357 & 16384;
        $2368 = ($2367<<16>>16)==(0);
        if ($2368) {
         $nZero48$0 = 0;
        } else {
         $2369 = ((($aMem$0401) + (($2323*40)|0)|0) + 16|0);
         $2370 = HEAP32[$2369>>2]|0;
         $nZero48$0 = $2370;
        }
        $2371 = HEAP32[$2328>>2]|0;
        $2372 = ((($aMem$0401) + (($2323*40)|0)|0) + 4|0);
        $2373 = HEAP32[$2372>>2]|0;
        $2374 = ((($aMem$0401) + (($2323*40)|0)|0) + 24|0);
        $2375 = HEAP32[$2374>>2]|0;
        $2376 = ($2362&255) >>> 3;
        $$lobit = $2376 & 1;
        $2377 = $$lobit&255;
        $2379 = (_sqlite3BtreeInsert($2371,0,$2352,$2355,$2373,$2375,$nZero48$0,$2377,$2378)|0);
        $2380 = (($2328) + 26|0);
        HEAP8[$2380>>0] = 0;
        $2381 = (($2328) + 27|0);
        HEAP8[$2381>>0] = 0;
        $2382 = (($2328) + 68|0);
        HEAP32[$2382>>2] = 0;
        $2383 = ($2379|0)==(0);
        if (!($2383)) {
         $3766 = $3778;$3767 = $3779;$pc$11$ph721 = $pc$0463;$rc$42$ph = $2379;
         label = 784;
         break L12;
        }
        $2384 = HEAP32[$87>>2]|0;
        $2385 = ($2384|0)==(0|0);
        if ($2385) {
         $3757 = $3778;$3758 = $3779;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $2386 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $2387 = HEAP32[$2386>>2]|0;
         $2388 = ($2387|0)==(0|0);
         if ($2388) {
          $3757 = $3778;$3758 = $3779;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
         } else {
          $2389 = (($2328) + 24|0);
          $2390 = HEAP8[$2389>>0]|0;
          $2391 = $2390 << 24 >> 24;
          $2392 = HEAP32[$3>>2]|0;
          $2393 = (($2392) + ($2391<<4)|0);
          $2394 = HEAP32[$2393>>2]|0;
          $2395 = HEAP8[$2341>>0]|0;
          $2396 = $2395 & 4;
          $2397 = ($2396<<24>>24)!=(0);
          $2398 = $2397 ? 23 : 18;
          $2399 = HEAP32[$88>>2]|0;
          FUNCTION_TABLE_viiiiii[$2384 & 7]($2399,$2398,$2394,$2387,$2352,$2355);
          $3757 = $3778;$3758 = $3779;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
         }
        }
        break;
       }
       case 75:  {
        $2440 = HEAP32[$46>>2]|0;
        _sqlite3VdbeSetChanges($2,$2440);
        HEAP32[$46>>2] = 0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 74:  {
        $2400 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2401 = HEAP32[$2400>>2]|0;
        $2402 = HEAP32[$61>>2]|0;
        $2403 = (($2402) + ($2401<<2)|0);
        $2404 = HEAP32[$2403>>2]|0;
        $2405 = (($2404) + 56|0);
        $2406 = $2405;
        $2407 = $2406;
        $2408 = HEAP32[$2407>>2]|0;
        $2409 = (($2406) + 4)|0;
        $2410 = $2409;
        $2411 = HEAP32[$2410>>2]|0;
        $2412 = (_sqlite3VdbeCursorMoveto($2404)|0);
        $2413 = ($2412|0)==(0);
        if (!($2413)) {
         $rc$45 = $2412;
         label = 793;
         break L12;
        }
        $2414 = HEAP32[$2404>>2]|0;
        $2415 = (_sqlite3BtreeDelete($2414)|0);
        $2416 = (($2404) + 68|0);
        HEAP32[$2416>>2] = 0;
        $2417 = ($2415|0)==(0);
        if ($2417) {
         $2418 = HEAP32[$87>>2]|0;
         $2419 = ($2418|0)==(0|0);
         if (!($2419)) {
          $2420 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
          $2421 = HEAP32[$2420>>2]|0;
          $2422 = ($2421|0)==(0|0);
          if (!($2422)) {
           $2423 = (($2404) + 28|0);
           $2424 = HEAP8[$2423>>0]|0;
           $2425 = $2424 & 2;
           $2426 = ($2425<<24>>24)==(0);
           if (!($2426)) {
            $2427 = HEAP32[$88>>2]|0;
            $2428 = (($2404) + 24|0);
            $2429 = HEAP8[$2428>>0]|0;
            $2430 = $2429 << 24 >> 24;
            $2431 = HEAP32[$3>>2]|0;
            $2432 = (($2431) + ($2430<<4)|0);
            $2433 = HEAP32[$2432>>2]|0;
            FUNCTION_TABLE_viiiiii[$2418 & 7]($2427,9,$2433,$2421,$2408,$2411);
           }
          }
         }
        }
        $2434 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2435 = HEAP32[$2434>>2]|0;
        $2436 = $2435 & 1;
        $2437 = ($2436|0)==(0);
        if ($2437) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2415;
        } else {
         $2438 = HEAP32[$46>>2]|0;
         $2439 = (($2438) + 1)|0;
         HEAP32[$46>>2] = $2439;
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2415;
        }
        break;
       }
       case 84:  {
        $2441 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2442 = HEAP32[$2441>>2]|0;
        $2443 = HEAP32[$61>>2]|0;
        $2444 = (($2443) + ($2442<<2)|0);
        $2445 = HEAP32[$2444>>2]|0;
        $2446 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2447 = HEAP32[$2446>>2]|0;
        $2448 = (($aMem$0401) + (($2447*40)|0)|0);
        $2449 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2450 = HEAP32[$2449>>2]|0;
        _sqlite3VdbeSorterCompare($2445,$2448,$2450,$res53);
        $2451 = HEAP32[$res53>>2]|0;
        $2452 = ($2451|0)==(0);
        if ($2452) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $2453 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2454 = HEAP32[$2453>>2]|0;
         $2455 = (($2454) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $2455;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 95:  {
        $2456 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2457 = HEAP32[$2456>>2]|0;
        $2458 = (($aMem$0401) + (($2457*40)|0)|0);
        $2459 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2460 = HEAP32[$2459>>2]|0;
        $2461 = HEAP32[$61>>2]|0;
        $2462 = (($2461) + ($2460<<2)|0);
        $2463 = HEAP32[$2462>>2]|0;
        $$idx92 = (($2463) + 64|0);
        $$idx92$val = HEAP32[$$idx92>>2]|0;
        $2464 = (_sqlite3VdbeSorterRowkey($$idx92$val,$2458)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $2458;$pc$11 = $pc$0463;$rc$42 = $2464;
        break;
       }
       case 99: case 98:  {
        $2465 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2466 = HEAP32[$2465>>2]|0;
        $2467 = (($aMem$0401) + (($2466*40)|0)|0);
        $2468 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2469 = HEAP32[$2468>>2]|0;
        $2470 = HEAP32[$61>>2]|0;
        $2471 = (($2470) + ($2469<<2)|0);
        $2472 = HEAP32[$2471>>2]|0;
        $2473 = HEAP32[$2472>>2]|0;
        $2474 = (_sqlite3VdbeCursorMoveto($2472)|0);
        $2475 = ($2474|0)==(0);
        if (!($2475)) {
         $rc$45 = $2474;
         label = 793;
         break L12;
        }
        $2476 = (($2472) + 28|0);
        $2477 = HEAP8[$2476>>0]|0;
        $2478 = $2477 & 2;
        $2479 = ($2478<<24>>24)==(0);
        if ($2479) {
         _sqlite3BtreeKeySize($2473,$n64);
         $2480 = $n64;
         $2481 = $2480;
         $2482 = HEAP32[$2481>>2]|0;
         $2483 = (($2480) + 4)|0;
         $2484 = $2483;
         $2485 = HEAP32[$2484>>2]|0;
         $2486 = HEAP32[$49>>2]|0;
         $2487 = ($2486|0)<(0);
         $2488 = $2487 << 31 >> 31;
         $2489 = ($2485|0)>($2488|0);
         $2490 = ($2485|0)==($2488|0);
         $2491 = ($2482>>>0)>($2486>>>0);
         $2492 = $2490 & $2491;
         $2493 = $2489 | $2492;
         if ($2493) {
          $3764 = $691;$3765 = $694;
          label = 791;
          break L12;
         }
         HEAP32[$n57>>2] = $2482;
         $2497 = $2482;
        } else {
         _sqlite3BtreeDataSize($2473,$n57);
         $2494 = HEAP32[$n57>>2]|0;
         $2495 = HEAP32[$49>>2]|0;
         $2496 = ($2494>>>0)>($2495>>>0);
         if ($2496) {
          $3764 = $691;$3765 = $694;
          label = 791;
          break L12;
         } else {
          $2497 = $2494;
         }
        }
        $2498 = (_sqlite3VdbeMemGrow($2467,$2497,0)|0);
        $2499 = ($2498|0)==(0);
        if (!($2499)) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $2500 = ((($aMem$0401) + (($2466*40)|0)|0) + 24|0);
        HEAP32[$2500>>2] = $2497;
        $2501 = ((($aMem$0401) + (($2466*40)|0)|0) + 28|0);
        $2502 = HEAP16[$2501>>1]|0;
        $2503 = $2502&65535;
        $2504 = $2503 & 48640;
        $2505 = $2504 | 16;
        $2506 = $2505&65535;
        HEAP16[$2501>>1] = $2506;
        $2507 = HEAP8[$2476>>0]|0;
        $2508 = $2507 & 2;
        $2509 = ($2508<<24>>24)==(0);
        $2510 = HEAP32[$n57>>2]|0;
        $2511 = ((($aMem$0401) + (($2466*40)|0)|0) + 4|0);
        $2512 = HEAP32[$2511>>2]|0;
        if ($2509) {
         $2513 = (_sqlite3BtreeKey($2473,0,$2510,$2512)|0);
         $rc$29 = $2513;
        } else {
         $2514 = (_sqlite3BtreeData($2473,0,$2510,$2512)|0);
         $rc$29 = $2514;
        }
        $2515 = ((($aMem$0401) + (($2466*40)|0)|0) + 30|0);
        HEAP8[$2515>>0] = 1;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $2467;$pc$11 = $pc$0463;$rc$42 = $rc$29;
        break;
       }
       case 100:  {
        $2516 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2517 = HEAP32[$2516>>2]|0;
        $2518 = HEAP32[$61>>2]|0;
        $2519 = (($2518) + ($2517<<2)|0);
        $2520 = HEAP32[$2519>>2]|0;
        $2521 = (($2520) + 25|0);
        $2522 = HEAP8[$2521>>0]|0;
        $2523 = ($2522<<24>>24)==(0);
        if (!($2523)) {
         $2524 = (($pOut$1) + 28|0);
         HEAP16[$2524>>1] = 1;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $2525 = (($2520) + 27|0);
        $2526 = HEAP8[$2525>>0]|0;
        $2527 = ($2526<<24>>24)==(0);
        do {
         if ($2527) {
          $2539 = (($2520) + 32|0);
          $2540 = HEAP32[$2539>>2]|0;
          $2541 = ($2540|0)==(0|0);
          if (!($2541)) {
           $2542 = HEAP32[$2540>>2]|0;
           $2543 = HEAP32[$2542>>2]|0;
           $2544 = (($2543) + 48|0);
           $2545 = HEAP32[$2544>>2]|0;
           $2546 = (FUNCTION_TABLE_iii[$2545 & 255]($2540,$v59)|0);
           _sqlite3VtabImportErrmsg($p,$2542);
           $rc$30 = $2546;
           break;
          }
          $2547 = (_sqlite3VdbeCursorMoveto($2520)|0);
          $2548 = ($2547|0)==(0);
          if (!($2548)) {
           $rc$45 = $2547;
           label = 793;
           break L12;
          }
          $2549 = (($2520) + 26|0);
          $2550 = HEAP8[$2549>>0]|0;
          $2551 = ($2550<<24>>24)==(0);
          if ($2551) {
           $2563 = HEAP32[$2520>>2]|0;
           _sqlite3BtreeKeySize($2563,$v59);
           $rc$30 = 0;
           break;
          } else {
           $2552 = (($2520) + 56|0);
           $2553 = $2552;
           $2554 = $2553;
           $2555 = HEAP32[$2554>>2]|0;
           $2556 = (($2553) + 4)|0;
           $2557 = $2556;
           $2558 = HEAP32[$2557>>2]|0;
           $2559 = $v59;
           $2560 = $2559;
           HEAP32[$2560>>2] = $2555;
           $2561 = (($2559) + 4)|0;
           $2562 = $2561;
           HEAP32[$2562>>2] = $2558;
           $rc$30 = 0;
           break;
          }
         } else {
          $2528 = (($2520) + 48|0);
          $2529 = $2528;
          $2530 = $2529;
          $2531 = HEAP32[$2530>>2]|0;
          $2532 = (($2529) + 4)|0;
          $2533 = $2532;
          $2534 = HEAP32[$2533>>2]|0;
          $2535 = $v59;
          $2536 = $2535;
          HEAP32[$2536>>2] = $2531;
          $2537 = (($2535) + 4)|0;
          $2538 = $2537;
          HEAP32[$2538>>2] = $2534;
          $rc$30 = 0;
         }
        } while(0);
        $2564 = $v59;
        $2565 = $2564;
        $2566 = HEAP32[$2565>>2]|0;
        $2567 = (($2564) + 4)|0;
        $2568 = $2567;
        $2569 = HEAP32[$2568>>2]|0;
        $2570 = (($pOut$1) + 16|0);
        $2571 = $2570;
        $2572 = $2571;
        HEAP32[$2572>>2] = $2566;
        $2573 = (($2571) + 4)|0;
        $2574 = $2573;
        HEAP32[$2574>>2] = $2569;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$30;
        break;
       }
       case 101:  {
        $2575 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2576 = HEAP32[$2575>>2]|0;
        $2577 = HEAP32[$61>>2]|0;
        $2578 = (($2577) + ($2576<<2)|0);
        $2579 = HEAP32[$2578>>2]|0;
        $2580 = (($2579) + 25|0);
        HEAP8[$2580>>0] = 1;
        $2581 = (($2579) + 26|0);
        HEAP8[$2581>>0] = 0;
        $2582 = (($2579) + 68|0);
        HEAP32[$2582>>2] = 0;
        $2583 = HEAP32[$2579>>2]|0;
        $2584 = ($2583|0)==(0|0);
        if ($2584) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         _sqlite3BtreeClearCursor($2583);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 104: case 103:  {
        $2603 = HEAP32[$89>>2]|0;
        $2604 = (($2603) + 1)|0;
        HEAP32[$89>>2] = $2604;
        label = 578;
        break;
       }
       case 105:  {
        label = 578;
        break;
       }
       case 102:  {
        $2585 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2586 = HEAP32[$2585>>2]|0;
        $2587 = HEAP32[$61>>2]|0;
        $2588 = (($2587) + ($2586<<2)|0);
        $2589 = HEAP32[$2588>>2]|0;
        $2590 = HEAP32[$2589>>2]|0;
        HEAP32[$res63>>2] = 0;
        $2591 = (_sqlite3BtreeLast($2590,$res63)|0);
        $2592 = HEAP32[$res63>>2]|0;
        $2593 = $2592&255;
        $2594 = (($2589) + 25|0);
        HEAP8[$2594>>0] = $2593;
        $2595 = (($2589) + 27|0);
        HEAP8[$2595>>0] = 0;
        $2596 = (($2589) + 26|0);
        HEAP8[$2596>>0] = 0;
        $2597 = (($2589) + 68|0);
        HEAP32[$2597>>2] = 0;
        $2598 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2599 = HEAP32[$2598>>2]|0;
        $2600 = ($2599|0)>(0);
        if ($2600) {
         $2601 = ($2592|0)==(0);
         $2602 = (($2599) + -1)|0;
         $pc$0$61 = $2601 ? $pc$0463 : $2602;
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0$61;$rc$42 = $2591;
        } else {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2591;
        }
        break;
       }
       case 107: case 106:  {
        $2663 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2664 = HEAP32[$2663>>2]|0;
        $2665 = HEAP32[$61>>2]|0;
        $2666 = (($2665) + ($2664<<2)|0);
        $2667 = HEAP32[$2666>>2]|0;
        $2668 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2669 = HEAP32[$2668>>2]|0;
        $2670 = (($aMem$0401) + (($2669*40)|0)|0);
        $2671 = HEAP32[$2667>>2]|0;
        $2672 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $2673 = HEAP8[$2672>>0]|0;
        $2674 = $2673 & 1;
        $2675 = ($2674<<24>>24)==(0);
        if (!($2675)) {
         $2676 = HEAP32[$46>>2]|0;
         $2677 = (($2676) + 1)|0;
         HEAP32[$46>>2] = $2677;
        }
        $2678 = ((($aMem$0401) + (($2669*40)|0)|0) + 28|0);
        $2679 = HEAP16[$2678>>1]|0;
        $2680 = $2679 & 16384;
        $2681 = ($2680<<16>>16)==(0);
        if (!($2681)) {
         $2682 = (_sqlite3VdbeMemExpandBlob($2670)|0);
         $2683 = ($2682|0)==(0);
         if (!($2683)) {
          $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $2682;
          label = 784;
          break L12;
         }
        }
        $2684 = (($2667) + 64|0);
        $2685 = HEAP32[$2684>>2]|0;
        $2686 = ($2685|0)==(0|0);
        if (!($2686)) {
         $2687 = (_sqlite3VdbeSorterWrite($2,$2667,$2670)|0);
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2687;
         break L21;
        }
        $2688 = ((($aMem$0401) + (($2669*40)|0)|0) + 24|0);
        $2689 = HEAP32[$2688>>2]|0;
        $2690 = ((($aMem$0401) + (($2669*40)|0)|0) + 4|0);
        $2691 = HEAP32[$2690>>2]|0;
        $2692 = ($2689|0)<(0);
        $2693 = $2692 << 31 >> 31;
        $2694 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2695 = HEAP32[$2694>>2]|0;
        $2696 = HEAP8[$2672>>0]|0;
        $2697 = $2696 & 16;
        $2698 = ($2697<<24>>24)==(0);
        if ($2698) {
         $2701 = 0;
        } else {
         $2699 = (($2667) + 12|0);
         $2700 = HEAP32[$2699>>2]|0;
         $2701 = $2700;
        }
        $2702 = (_sqlite3BtreeInsert($2671,$2691,$2689,$2693,1728,0,0,$2695,$2701)|0);
        $2703 = (($2667) + 68|0);
        HEAP32[$2703>>2] = 0;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2702;
        break;
       }
       case 5:  {
        $2626 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2627 = HEAP32[$2626>>2]|0;
        $2628 = HEAP32[$61>>2]|0;
        $2629 = (($2628) + ($2627<<2)|0);
        $2630 = HEAP32[$2629>>2]|0;
        $2631 = (_sqlite3VdbeSorterNext($2,$2630,$res68)|0);
        $pC67$0 = $2630;$rc$32 = $2631;
        label = 586;
        break;
       }
       case 7: case 6:  {
        $2632 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2633 = HEAP32[$2632>>2]|0;
        $2634 = HEAP32[$61>>2]|0;
        $2635 = (($2634) + ($2633<<2)|0);
        $2636 = HEAP32[$2635>>2]|0;
        $2637 = ($2636|0)==(0|0);
        if ($2637) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         label = 585;
        }
        break;
       }
       case 9: case 8:  {
        label = 585;
        break;
       }
       case 108:  {
        $2704 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2705 = HEAP32[$2704>>2]|0;
        $2706 = HEAP32[$61>>2]|0;
        $2707 = (($2706) + ($2705<<2)|0);
        $2708 = HEAP32[$2707>>2]|0;
        $2709 = HEAP32[$2708>>2]|0;
        $2710 = (($2708) + 8|0);
        $2711 = HEAP32[$2710>>2]|0;
        HEAP32[$r74>>2] = $2711;
        $2712 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2713 = HEAP32[$2712>>2]|0;
        $2714 = $2713&65535;
        HEAP16[$90>>1] = $2714;
        HEAP8[$91>>0] = 0;
        $2715 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2716 = HEAP32[$2715>>2]|0;
        $2717 = (($aMem$0401) + (($2716*40)|0)|0);
        HEAP32[$92>>2] = $2717;
        $2718 = (_sqlite3BtreeMovetoUnpacked($2709,$r74,0,0,0,$res73)|0);
        $2719 = HEAP32[$res73>>2]|0;
        $2720 = $2719 | $2718;
        $2721 = ($2720|0)==(0);
        if ($2721) {
         $2722 = (_sqlite3BtreeDelete($2709)|0);
         $rc$33 = $2722;
        } else {
         $rc$33 = $2718;
        }
        $2723 = (($2708) + 68|0);
        HEAP32[$2723>>2] = 0;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$33;
        break;
       }
       case 109:  {
        $2724 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2725 = HEAP32[$2724>>2]|0;
        $2726 = HEAP32[$61>>2]|0;
        $2727 = (($2726) + ($2725<<2)|0);
        $2728 = HEAP32[$2727>>2]|0;
        $2729 = HEAP32[$2728>>2]|0;
        $2730 = (($pOut$1) + 28|0);
        HEAP16[$2730>>1] = 1;
        $2731 = (_sqlite3VdbeCursorMoveto($2728)|0);
        $2732 = ($2731|0)==(0);
        if (!($2732)) {
         $rc$45 = $2731;
         label = 793;
         break L12;
        }
        $2733 = (($2728) + 25|0);
        $2734 = HEAP8[$2733>>0]|0;
        $2735 = ($2734<<24>>24)==(0);
        if ($2735) {
         $2736 = $rowid;
         $2737 = $2736;
         HEAP32[$2737>>2] = 0;
         $2738 = (($2736) + 4)|0;
         $2739 = $2738;
         HEAP32[$2739>>2] = 0;
         $2740 = (_sqlite3VdbeIdxRowid($2729,$rowid)|0);
         $2741 = ($2740|0)==(0);
         if (!($2741)) {
          $rc$45 = $2740;
          label = 793;
          break L12;
         }
         $2742 = $rowid;
         $2743 = $2742;
         $2744 = HEAP32[$2743>>2]|0;
         $2745 = (($2742) + 4)|0;
         $2746 = $2745;
         $2747 = HEAP32[$2746>>2]|0;
         $2748 = (($pOut$1) + 16|0);
         $2749 = $2748;
         $2750 = $2749;
         HEAP32[$2750>>2] = $2744;
         $2751 = (($2749) + 4)|0;
         $2752 = $2751;
         HEAP32[$2752>>2] = $2747;
         HEAP16[$2730>>1] = 4;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 114:  {
        $pVdbe$0163 = HEAP32[$96>>2]|0;
        $2779 = ($pVdbe$0163|0)==(0|0);
        if ($2779) {
         $2780 = (($pOut$1) + 28|0);
         HEAP16[$2780>>1] = 1;
         $2804 = $2780;
        } else {
         $iCnt$0164 = 0;$pVdbe$0165 = $pVdbe$0163;
         while(1) {
          $2781 = (($pVdbe$0165) + 40|0);
          $2782 = HEAP32[$2781>>2]|0;
          $2783 = ($2782|0)==(-1108210269);
          if ($2783) {
           $2784 = (($pVdbe$0165) + 88|0);
           $2785 = HEAP16[$2784>>1]|0;
           $2786 = $2785 & 512;
           $2787 = ($2786<<16>>16)!=(0);
           $2788 = $2785 & 8;
           $2789 = ($2788&65535)<(8);
           $or$cond66 = $2787 & $2789;
           if ($or$cond66) {
            $2790 = (($pVdbe$0165) + 76|0);
            $2791 = HEAP32[$2790>>2]|0;
            $$lobit129 = $2791 >>> 31;
            $$lobit129$not = $$lobit129 ^ 1;
            $$iCnt$0 = (($$lobit129$not) + ($iCnt$0164))|0;
            $iCnt$1 = $$iCnt$0;
           } else {
            $iCnt$1 = $iCnt$0164;
           }
          } else {
           $iCnt$1 = $iCnt$0164;
          }
          $2792 = (($pVdbe$0165) + 52|0);
          $pVdbe$0 = HEAP32[$2792>>2]|0;
          $2793 = ($pVdbe$0|0)==(0|0);
          if ($2793) {
           break;
          } else {
           $iCnt$0164 = $iCnt$1;$pVdbe$0165 = $pVdbe$0;
          }
         }
         $2794 = (($pOut$1) + 28|0);
         HEAP16[$2794>>1] = 1;
         $2795 = ($iCnt$1|0)>(1);
         if ($2795) {
          label = 615;
          break L12;
         } else {
          $2804 = $2794;
         }
        }
        $2796 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2797 = HEAP32[$2796>>2]|0;
        HEAP32[$iMoved>>2] = 0;
        $2798 = HEAP32[$3>>2]|0;
        $2799 = ((($2798) + ($2797<<4)|0) + 4|0);
        $2800 = HEAP32[$2799>>2]|0;
        $2801 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2802 = HEAP32[$2801>>2]|0;
        $2803 = (_sqlite3BtreeDropTable($2800,$2802,$iMoved)|0);
        HEAP16[$2804>>1] = 4;
        $2805 = HEAP32[$iMoved>>2]|0;
        $2806 = ($2805|0)<(0);
        $2807 = $2806 << 31 >> 31;
        $2808 = (($pOut$1) + 16|0);
        $2809 = $2808;
        $2810 = $2809;
        HEAP32[$2810>>2] = $2805;
        $2811 = (($2809) + 4)|0;
        $2812 = $2811;
        HEAP32[$2812>>2] = $2807;
        $2813 = ($2803|0)==(0);
        if (!($2813)) {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $2803;
         label = 784;
         break L12;
        }
        $2814 = ($2805|0)==(0);
        if ($2814) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $2815 = HEAP32[$2801>>2]|0;
         $$idx93$val = HEAP32[$3>>2]|0;
         _sqlite3RootPageMoved($$idx93$val,$2797,$2805,$2815);
         $2816 = (($2797) + 1)|0;
         $2817 = $2816&255;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $2817;
         label = 783;
        }
        break;
       }
       case 113: case 112: case 111: case 110:  {
        $2753 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2754 = HEAP32[$2753>>2]|0;
        $2755 = HEAP32[$61>>2]|0;
        $2756 = (($2755) + ($2754<<2)|0);
        $2757 = HEAP32[$2756>>2]|0;
        $2758 = (($2757) + 8|0);
        $2759 = HEAP32[$2758>>2]|0;
        HEAP32[$r79>>2] = $2759;
        $2760 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2761 = HEAP32[$2760>>2]|0;
        $2762 = $2761&65535;
        HEAP16[$93>>1] = $2762;
        $2763 = HEAP8[$140>>0]|0;
        $2764 = ($2763&255)<(112);
        $$64 = $2764 << 31 >> 31;
        HEAP8[$94>>0] = $$64;
        $2765 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2766 = HEAP32[$2765>>2]|0;
        $2767 = (($aMem$0401) + (($2766*40)|0)|0);
        HEAP32[$95>>2] = $2767;
        HEAP32[$res78>>2] = 0;
        $2768 = (_sqlite3VdbeIdxKeyCompare($2757,$r79,$res78)|0);
        $2769 = HEAP8[$140>>0]|0;
        $2770 = $2769 & 1;
        $2771 = ($2770<<24>>24)==(0);
        $2772 = HEAP32[$res78>>2]|0;
        $2773 = (($2772) + 1)|0;
        $2774 = (0 - ($2772))|0;
        $storemerge = $2771 ? $2774 : $2773;
        HEAP32[$res78>>2] = $storemerge;
        $2775 = ($storemerge|0)>(0);
        if ($2775) {
         $2776 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $2777 = HEAP32[$2776>>2]|0;
         $2778 = (($2777) + -1)|0;
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $2778;$rc$42 = $2768;
        } else {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2768;
        }
        break;
       }
       case 115:  {
        HEAP32[$nChange>>2] = 0;
        $2818 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2819 = HEAP32[$2818>>2]|0;
        $2820 = HEAP32[$3>>2]|0;
        $2821 = ((($2820) + ($2819<<4)|0) + 4|0);
        $2822 = HEAP32[$2821>>2]|0;
        $2823 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2824 = HEAP32[$2823>>2]|0;
        $2825 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2826 = HEAP32[$2825>>2]|0;
        $2827 = ($2826|0)!=(0);
        $nChange$ = $2827 ? $nChange : 0;
        $2828 = (_sqlite3BtreeClearTable($2822,$2824,$nChange$)|0);
        $2829 = HEAP32[$2825>>2]|0;
        $2830 = ($2829|0)==(0);
        if ($2830) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2828;
        } else {
         $2831 = HEAP32[$nChange>>2]|0;
         $2832 = HEAP32[$46>>2]|0;
         $2833 = (($2832) + ($2831))|0;
         HEAP32[$46>>2] = $2833;
         $2834 = HEAP32[$2825>>2]|0;
         $2835 = ($2834|0)>(0);
         if ($2835) {
          $2836 = ($2831|0)<(0);
          $2837 = $2836 << 31 >> 31;
          $2838 = ((($aMem$0401) + (($2834*40)|0)|0) + 16|0);
          $2839 = $2838;
          $2840 = $2839;
          $2841 = HEAP32[$2840>>2]|0;
          $2842 = (($2839) + 4)|0;
          $2843 = $2842;
          $2844 = HEAP32[$2843>>2]|0;
          $2845 = (_i64Add(($2841|0),($2844|0),($2831|0),($2837|0))|0);
          $2846 = tempRet0;
          $2847 = $2838;
          $2848 = $2847;
          HEAP32[$2848>>2] = $2845;
          $2849 = (($2847) + 4)|0;
          $2850 = $2849;
          HEAP32[$2850>>2] = $2846;
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2828;
         } else {
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2828;
         }
        }
        break;
       }
       case 119:  {
        $2882 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2883 = HEAP32[$2882>>2]|0;
        $2884 = (_sqlite3AnalysisLoad($2,$2883)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2884;
        break;
       }
       case 120:  {
        $2885 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2886 = HEAP32[$2885>>2]|0;
        $2887 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2888 = HEAP32[$2887>>2]|0;
        _sqlite3UnlinkAndDeleteTable($2,$2886,$2888);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 121:  {
        $2889 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2890 = HEAP32[$2889>>2]|0;
        $2891 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2892 = HEAP32[$2891>>2]|0;
        _sqlite3UnlinkAndDeleteIndex($2,$2890,$2892);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 122:  {
        $2893 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2894 = HEAP32[$2893>>2]|0;
        $2895 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2896 = HEAP32[$2895>>2]|0;
        _sqlite3UnlinkAndDeleteTrigger($2,$2894,$2896);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 117: case 116:  {
        HEAP32[$pgno81>>2] = 0;
        $2851 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2852 = HEAP32[$2851>>2]|0;
        $2853 = HEAP32[$3>>2]|0;
        $2854 = HEAP8[$140>>0]|0;
        $2855 = ($2854<<24>>24)==(117);
        $$67 = $2855 ? 1 : 2;
        $2856 = ((($2853) + ($2852<<4)|0) + 4|0);
        $2857 = HEAP32[$2856>>2]|0;
        $2858 = (_sqlite3BtreeCreateTable($2857,$pgno81,$$67)|0);
        $2859 = HEAP32[$pgno81>>2]|0;
        $2860 = ($2859|0)<(0);
        $2861 = $2860 << 31 >> 31;
        $2862 = (($pOut$1) + 16|0);
        $2863 = $2862;
        $2864 = $2863;
        HEAP32[$2864>>2] = $2859;
        $2865 = (($2863) + 4)|0;
        $2866 = $2865;
        HEAP32[$2866>>2] = $2861;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $2858;
        break;
       }
       case 118:  {
        $2867 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2868 = HEAP32[$2867>>2]|0;
        $2869 = ($2868|0)==(1);
        $2870 = $2869 ? 15056 : 15080;
        HEAP32[$initData>>2] = $2;
        HEAP32[$98>>2] = $2868;
        HEAP32[$99>>2] = $58;
        $2871 = HEAP32[$3>>2]|0;
        $2872 = (($2871) + ($2868<<4)|0);
        $2873 = HEAP32[$2872>>2]|0;
        $2874 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2875 = HEAP32[$2874>>2]|0;
        HEAP32[$vararg_buffer27>>2] = $2873;
        $vararg_ptr30 = (($vararg_buffer27) + 4|0);
        HEAP32[$vararg_ptr30>>2] = $2870;
        $vararg_ptr31 = (($vararg_buffer27) + 8|0);
        HEAP32[$vararg_ptr31>>2] = $2875;
        $2876 = (_sqlite3MPrintf($2,31768,$vararg_buffer27)|0);
        $2877 = ($2876|0)==(0|0);
        if ($2877) {
         label = 624;
         break L12;
        }
        HEAP8[$100>>0] = 1;
        HEAP32[$101>>2] = 0;
        $2878 = (_sqlite3_exec($2,$2876,167,$initData,0)|0);
        $2879 = ($2878|0)==(0);
        $2880 = HEAP32[$101>>2]|0;
        $$68 = $2879 ? $2880 : $2878;
        _sqlite3DbFree($2,$2876);
        HEAP8[$100>>0] = 0;
        $cond = ($$68|0)==(0);
        if ($cond) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         label = 626;
         break L12;
        }
        break;
       }
       case 124:  {
        $2947 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2948 = HEAP32[$2947>>2]|0;
        $2949 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2950 = HEAP32[$2949>>2]|0;
        $2951 = ((($aMem$0401) + (($2948*40)|0)|0) + 28|0);
        $2952 = HEAP16[$2951>>1]|0;
        $2953 = $2952 & 32;
        $2954 = ($2953<<16>>16)==(0);
        if ($2954) {
         $2955 = (($aMem$0401) + (($2948*40)|0)|0);
         _sqlite3VdbeMemSetRowSet($2955);
         $2956 = HEAP16[$2951>>1]|0;
         $2957 = $2956 & 32;
         $2958 = ($2957<<16>>16)==(0);
         if ($2958) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        $2959 = ((($aMem$0401) + (($2948*40)|0)|0) + 16|0);
        $2960 = HEAP32[$2959>>2]|0;
        $2961 = ((($aMem$0401) + (($2950*40)|0)|0) + 16|0);
        $2962 = $2961;
        $2963 = $2962;
        $2964 = HEAP32[$2963>>2]|0;
        $2965 = (($2962) + 4)|0;
        $2966 = $2965;
        $2967 = HEAP32[$2966>>2]|0;
        _sqlite3RowSetInsert($2960,$2964,$2967);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 123:  {
        $2897 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2898 = HEAP32[$2897>>2]|0;
        $2899 = $2898 << 2;
        $2900 = (($2899) + 4)|0;
        $2901 = (_sqlite3DbMallocRaw($2,$2900)|0);
        $2902 = ($2901|0)==(0|0);
        if ($2902) {
         $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
         label = 792;
         break L1;
        }
        $2903 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2904 = HEAP32[$2903>>2]|0;
        $2905 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2906 = HEAP32[$2905>>2]|0;
        $2907 = (($aMem$0401) + (($2906*40)|0)|0);
        $2908 = ($2898|0)>(0);
        if ($2908) {
         $j85$0159 = 0;
         while(1) {
          $$sum11 = (($j85$0159) + ($2906))|0;
          $2909 = (($aMem$0401) + (($$sum11*40)|0)|0);
          $2910 = (_sqlite3VdbeIntValue($2909)|0);
          $2911 = tempRet0;
          $2912 = (($2901) + ($j85$0159<<2)|0);
          HEAP32[$2912>>2] = $2910;
          $2913 = (($j85$0159) + 1)|0;
          $exitcond485 = ($2913|0)==($2898|0);
          if ($exitcond485) {
           $j85$0$lcssa = $2898;
           break;
          } else {
           $j85$0159 = $2913;
          }
         }
        } else {
         $j85$0$lcssa = 0;
        }
        $2914 = (($2901) + ($j85$0$lcssa<<2)|0);
        HEAP32[$2914>>2] = 0;
        $2915 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $2916 = HEAP8[$2915>>0]|0;
        $2917 = $2916&255;
        $2918 = HEAP32[$3>>2]|0;
        $2919 = ((($2918) + ($2917<<4)|0) + 4|0);
        $2920 = HEAP32[$2919>>2]|0;
        $2921 = ((($aMem$0401) + (($2904*40)|0)|0) + 16|0);
        $2922 = $2921;
        $2923 = $2922;
        $2924 = HEAP32[$2923>>2]|0;
        $2925 = (($2922) + 4)|0;
        $2926 = $2925;
        $2927 = HEAP32[$2926>>2]|0;
        $$idx94$val = HEAP32[$2920>>2]|0;
        $$idx95 = (($2920) + 4|0);
        $$idx95$val = HEAP32[$$idx95>>2]|0;
        $2928 = (_sqlite3BtreeIntegrityCheck($$idx94$val,$$idx95$val,$2901,$2898,$2924,$nErr)|0);
        _sqlite3DbFree($2,$2901);
        $2929 = HEAP32[$nErr>>2]|0;
        $2930 = ($2929|0)<(0);
        $2931 = $2930 << 31 >> 31;
        $2932 = $2921;
        $2933 = $2932;
        $2934 = HEAP32[$2933>>2]|0;
        $2935 = (($2932) + 4)|0;
        $2936 = $2935;
        $2937 = HEAP32[$2936>>2]|0;
        $2938 = (_i64Subtract(($2934|0),($2937|0),($2929|0),($2931|0))|0);
        $2939 = tempRet0;
        $2940 = $2921;
        $2941 = $2940;
        HEAP32[$2941>>2] = $2938;
        $2942 = (($2940) + 4)|0;
        $2943 = $2942;
        HEAP32[$2943>>2] = $2939;
        _sqlite3VdbeMemSetNull($2907);
        $2944 = HEAP32[$nErr>>2]|0;
        $2945 = ($2944|0)==(0);
        if (!($2945)) {
         $2946 = ($2928|0)==(0|0);
         if ($2946) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
         (_sqlite3VdbeMemSetStr($2907,$2928,-1,1,156)|0);
        }
        (_sqlite3VdbeChangeEncoding($2907,$47)|0);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 125:  {
        $2968 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2969 = HEAP32[$2968>>2]|0;
        $2970 = (($aMem$0401) + (($2969*40)|0)|0);
        $2971 = ((($aMem$0401) + (($2969*40)|0)|0) + 28|0);
        $2972 = HEAP16[$2971>>1]|0;
        $2973 = $2972 & 32;
        $2974 = ($2973<<16>>16)==(0);
        if (!($2974)) {
         $2975 = ((($aMem$0401) + (($2969*40)|0)|0) + 16|0);
         $2976 = HEAP32[$2975>>2]|0;
         $2977 = (_sqlite3RowSetNext($2976,$val)|0);
         $2978 = ($2977|0)==(0);
         if (!($2978)) {
          $2982 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
          $2983 = HEAP32[$2982>>2]|0;
          $2984 = (($aMem$0401) + (($2983*40)|0)|0);
          $2985 = $val;
          $2986 = $2985;
          $2987 = HEAP32[$2986>>2]|0;
          $2988 = (($2985) + 4)|0;
          $2989 = $2988;
          $2990 = HEAP32[$2989>>2]|0;
          _sqlite3VdbeMemSetInt64($2984,$2987,$2990);
          $pc$1 = $pc$0463;$rc$1 = 0;
          label = 18;
          break L21;
         }
        }
        _sqlite3VdbeMemSetNull($2970);
        $2979 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2980 = HEAP32[$2979>>2]|0;
        $2981 = (($2980) + -1)|0;
        $pc$1 = $2981;$rc$1 = 0;
        label = 18;
        break;
       }
       case 126:  {
        $2991 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $2992 = HEAP32[$2991>>2]|0;
        $2993 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $2994 = HEAP32[$2993>>2]|0;
        $2995 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $2996 = HEAP32[$2995>>2]|0;
        $2997 = ((($aMem$0401) + (($2992*40)|0)|0) + 28|0);
        $2998 = HEAP16[$2997>>1]|0;
        $2999 = $2998 & 32;
        $3000 = ($2999<<16>>16)==(0);
        if ($3000) {
         $3001 = (($aMem$0401) + (($2992*40)|0)|0);
         _sqlite3VdbeMemSetRowSet($3001);
         $3002 = HEAP16[$2997>>1]|0;
         $3003 = $3002 & 32;
         $3004 = ($3003<<16>>16)==(0);
         if ($3004) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
        }
        $3005 = ($2996|0)==(0);
        $$pre707 = ((($aMem$0401) + (($2992*40)|0)|0) + 16|0);
        do {
         if ($3005) {
          $$pre711 = ((($aMem$0401) + (($2994*40)|0)|0) + 16|0);
          $$pre$phi712Z2D = $$pre711;
         } else {
          $3006 = HEAP32[$$pre707>>2]|0;
          $3007 = ($2996|0)>(-1);
          if ($3007) {
           $3008 = $2996 & 15;
           $phitmp10 = $3008&255;
           $3016 = $phitmp10;
          } else {
           $3016 = -1;
          }
          $3009 = ((($aMem$0401) + (($2994*40)|0)|0) + 16|0);
          $3010 = $3009;
          $3011 = $3010;
          $3012 = HEAP32[$3011>>2]|0;
          $3013 = (($3010) + 4)|0;
          $3014 = $3013;
          $3015 = HEAP32[$3014>>2]|0;
          $3017 = (_sqlite3RowSetTest($3006,$3016,$3012,$3015)|0);
          $3018 = ($3017|0)==(0);
          if ($3018) {
           if ($3007) {
            $$pre$phi712Z2D = $3009;
            break;
           } else {
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
          } else {
           $3019 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
           $3020 = HEAP32[$3019>>2]|0;
           $3021 = (($3020) + -1)|0;
           $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3021;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
           label = 783;
           break L21;
          }
         }
        } while(0);
        $3022 = HEAP32[$$pre707>>2]|0;
        $3023 = $$pre$phi712Z2D;
        $3024 = $3023;
        $3025 = HEAP32[$3024>>2]|0;
        $3026 = (($3023) + 4)|0;
        $3027 = $3026;
        $3028 = HEAP32[$3027>>2]|0;
        _sqlite3RowSetInsert($3022,$3025,$3028);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 127:  {
        $3029 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3030 = HEAP32[$3029>>2]|0;
        $3031 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3032 = HEAP32[$3031>>2]|0;
        $3033 = (($aMem$0401) + (($3032*40)|0)|0);
        $3034 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $3035 = HEAP8[$3034>>0]|0;
        $3036 = ($3035<<24>>24)==(0);
        if (!($3036)) {
         $3037 = (($3030) + 20|0);
         $3038 = HEAP32[$3037>>2]|0;
         $pFrame88$0152 = HEAP32[$44>>2]|0;
         $3039 = ($pFrame88$0152|0)==(0|0);
         if (!($3039)) {
          $pFrame88$0153 = $pFrame88$0152;
          while(1) {
           $3042 = (($pFrame88$0153) + 24|0);
           $3043 = HEAP32[$3042>>2]|0;
           $3044 = ($3043|0)==($3038|0);
           if ($3044) {
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           }
           $3040 = (($pFrame88$0153) + 4|0);
           $pFrame88$0 = HEAP32[$3040>>2]|0;
           $3041 = ($pFrame88$0|0)==(0|0);
           if ($3041) {
            break;
           } else {
            $pFrame88$0153 = $pFrame88$0;
           }
          }
         }
        }
        $3045 = HEAP32[$45>>2]|0;
        $3046 = HEAP32[$102>>2]|0;
        $3047 = ($3045|0)<($3046|0);
        if (!($3047)) {
         label = 660;
         break L12;
        }
        $3048 = ((($aMem$0401) + (($3032*40)|0)|0) + 28|0);
        $3049 = HEAP16[$3048>>1]|0;
        $3050 = $3049 & 64;
        $3051 = ($3050<<16>>16)==(0);
        if ($3051) {
         $3052 = (($3030) + 8|0);
         $3053 = HEAP32[$3052>>2]|0;
         $3054 = (($3030) + 12|0);
         $3055 = HEAP32[$3054>>2]|0;
         $3056 = (($3055) + ($3053))|0;
         $3057 = ($3056*40)|0;
         $3058 = $3055 << 2;
         $3059 = (($3030) + 16|0);
         $3060 = HEAP32[$3059>>2]|0;
         $3061 = (($3058) + 72)|0;
         $3062 = (($3061) + ($3060))|0;
         $3063 = (($3062) + ($3057))|0;
         $3064 = (_sqlite3DbMallocZero($2,$3063)|0);
         $3065 = ($3064|0)==(0|0);
         if ($3065) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
         _sqlite3VdbeMemRelease($3033);
         HEAP16[$3048>>1] = 64;
         $3066 = ((($aMem$0401) + (($3032*40)|0)|0) + 16|0);
         HEAP32[$3066>>2] = $3064;
         HEAP32[$3064>>2] = $p;
         $3067 = (($3064) + 60|0);
         HEAP32[$3067>>2] = $3056;
         $3068 = HEAP32[$3054>>2]|0;
         $3069 = (($3064) + 64|0);
         HEAP32[$3069>>2] = $3068;
         $3070 = (($3064) + 44|0);
         HEAP32[$3070>>2] = $pc$0463;
         $3071 = HEAP32[$9>>2]|0;
         $3072 = (($3064) + 12|0);
         HEAP32[$3072>>2] = $3071;
         $3073 = HEAP32[$103>>2]|0;
         $3074 = (($3064) + 52|0);
         HEAP32[$3074>>2] = $3073;
         $3075 = HEAP32[$61>>2]|0;
         $3076 = (($3064) + 20|0);
         HEAP32[$3076>>2] = $3075;
         $3077 = HEAP32[$104>>2]|0;
         $3078 = (($3064) + 40|0);
         HEAP32[$3078>>2] = $3077;
         $3079 = HEAP32[$0>>2]|0;
         $3080 = (($3064) + 8|0);
         HEAP32[$3080>>2] = $3079;
         $3081 = HEAP32[$105>>2]|0;
         $3082 = (($3064) + 48|0);
         HEAP32[$3082>>2] = $3081;
         $3083 = (($3030) + 20|0);
         $3084 = HEAP32[$3083>>2]|0;
         $3085 = (($3064) + 24|0);
         HEAP32[$3085>>2] = $3084;
         $3086 = HEAP32[$60>>2]|0;
         $3087 = (($3064) + 16|0);
         HEAP32[$3087>>2] = $3086;
         $3088 = HEAP32[$106>>2]|0;
         $3089 = (($3064) + 56|0);
         HEAP32[$3089>>2] = $3088;
         $3090 = (($3064) + 72|0);
         $3091 = (($3090) + (($3056*40)|0)|0);
         $3092 = ($3090|0)==($3091|0);
         if (!($3092)) {
          $pMem87$0156 = $3090;
          while(1) {
           $3093 = (($pMem87$0156) + 28|0);
           HEAP16[$3093>>1] = 128;
           HEAP32[$pMem87$0156>>2] = $2;
           $3094 = (($pMem87$0156) + 40|0);
           $3095 = ($3094|0)==($3091|0);
           if ($3095) {
            break;
           } else {
            $pMem87$0156 = $3094;
           }
          }
         }
         $$pre629 = HEAP32[$45>>2]|0;
         $$pre$phiZ2D = $3059;$3099 = $$pre629;$pFrame88$1 = $3064;
        } else {
         $3096 = ((($aMem$0401) + (($3032*40)|0)|0) + 16|0);
         $3097 = HEAP32[$3096>>2]|0;
         $$pre687 = (($3030) + 16|0);
         $$pre$phiZ2D = $$pre687;$3099 = $3045;$pFrame88$1 = $3097;
        }
        $3098 = (($3099) + 1)|0;
        HEAP32[$45>>2] = $3098;
        $3100 = HEAP32[$44>>2]|0;
        $3101 = (($pFrame88$1) + 4|0);
        HEAP32[$3101>>2] = $3100;
        $3102 = (($pFrame88$1) + 32|0);
        $3103 = $3102;
        $3104 = $3103;
        HEAP32[$3104>>2] = $691;
        $3105 = (($3103) + 4)|0;
        $3106 = $3105;
        HEAP32[$3106>>2] = $694;
        $3107 = HEAP32[$46>>2]|0;
        $3108 = (($pFrame88$1) + 68|0);
        HEAP32[$3108>>2] = $3107;
        HEAP32[$46>>2] = 0;
        HEAP32[$44>>2] = $pFrame88$1;
        HEAP32[$9>>2] = $3102;
        $3109 = (($pFrame88$1) + 60|0);
        $3110 = HEAP32[$3109>>2]|0;
        HEAP32[$103>>2] = $3110;
        $3111 = (($pFrame88$1) + 64|0);
        $3112 = HEAP32[$3111>>2]|0;
        $3113 = $3112 & 65535;
        HEAP32[$104>>2] = $3113;
        $3114 = (($3110) + 1)|0;
        $3115 = (($3102) + (($3114*40)|0)|0);
        HEAP32[$61>>2] = $3115;
        $3116 = HEAP32[$3030>>2]|0;
        HEAP32[$0>>2] = $3116;
        $3117 = (($3030) + 4|0);
        $3118 = HEAP32[$3117>>2]|0;
        HEAP32[$105>>2] = $3118;
        $3119 = (($3115) + ($3113<<2)|0);
        HEAP32[$60>>2] = $3119;
        $3120 = HEAP32[$$pre$phiZ2D>>2]|0;
        HEAP32[$106>>2] = $3120;
        _memset(($3119|0),0,($3120|0))|0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $3102;$aOp$1$ph = $3116;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = -1;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 129:  {
        $3134 = HEAP32[$76>>2]|0;
        $3135 = $3134 & 16777216;
        $3136 = ($3135|0)==(0);
        if (!($3136)) {
         $3137 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3138 = HEAP32[$3137>>2]|0;
         $3139 = ($3138|0)<(0);
         $3140 = $3139 << 31 >> 31;
         $3141 = $73;
         $3142 = $3141;
         $3143 = HEAP32[$3142>>2]|0;
         $3144 = (($3141) + 4)|0;
         $3145 = $3144;
         $3146 = HEAP32[$3145>>2]|0;
         $3147 = (_i64Add(($3143|0),($3146|0),($3138|0),($3140|0))|0);
         $3148 = tempRet0;
         $3149 = $73;
         $3150 = $3149;
         HEAP32[$3150>>2] = $3147;
         $3151 = (($3149) + 4)|0;
         $3152 = $3151;
         HEAP32[$3152>>2] = $3148;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        $3153 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3154 = HEAP32[$3153>>2]|0;
        $3155 = ($3154|0)==(0);
        $3156 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3157 = HEAP32[$3156>>2]|0;
        $3158 = ($3157|0)<(0);
        $3159 = $3158 << 31 >> 31;
        if ($3155) {
         $3172 = $107;
         $3173 = $3172;
         $3174 = HEAP32[$3173>>2]|0;
         $3175 = (($3172) + 4)|0;
         $3176 = $3175;
         $3177 = HEAP32[$3176>>2]|0;
         $3178 = (_i64Add(($3174|0),($3177|0),($3157|0),($3159|0))|0);
         $3179 = tempRet0;
         $3180 = $107;
         $3181 = $3180;
         HEAP32[$3181>>2] = $3178;
         $3182 = (($3180) + 4)|0;
         $3183 = $3182;
         HEAP32[$3183>>2] = $3179;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $3160 = $72;
         $3161 = $3160;
         $3162 = HEAP32[$3161>>2]|0;
         $3163 = (($3160) + 4)|0;
         $3164 = $3163;
         $3165 = HEAP32[$3164>>2]|0;
         $3166 = (_i64Add(($3162|0),($3165|0),($3157|0),($3159|0))|0);
         $3167 = tempRet0;
         $3168 = $72;
         $3169 = $3168;
         HEAP32[$3169>>2] = $3166;
         $3170 = (($3168) + 4)|0;
         $3171 = $3170;
         HEAP32[$3171>>2] = $3167;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 128:  {
        $3121 = HEAP32[$44>>2]|0;
        $3122 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3123 = HEAP32[$3122>>2]|0;
        $3124 = (($3121) + 44|0);
        $3125 = HEAP32[$3124>>2]|0;
        $3126 = (($3121) + 8|0);
        $3127 = HEAP32[$3126>>2]|0;
        $3128 = ((($3127) + (($3125*20)|0)|0) + 4|0);
        $3129 = HEAP32[$3128>>2]|0;
        $3130 = (($3129) + ($3123))|0;
        $3131 = (($3121) + 12|0);
        $3132 = HEAP32[$3131>>2]|0;
        $3133 = (($3132) + (($3130*40)|0)|0);
        _sqlite3VdbeMemShallowCopy($pOut$1,$3133,4096);
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 130:  {
        $3184 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3185 = HEAP32[$3184>>2]|0;
        $3186 = ($3185|0)==(0);
        if ($3186) {
         $3208 = $107;
         $3209 = $3208;
         $3210 = HEAP32[$3209>>2]|0;
         $3211 = (($3208) + 4)|0;
         $3212 = $3211;
         $3213 = HEAP32[$3212>>2]|0;
         $3214 = ($3210|0)==(0);
         $3215 = ($3213|0)==(0);
         $3216 = $3214 & $3215;
         if (!($3216)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $3217 = $73;
         $3218 = $3217;
         $3219 = HEAP32[$3218>>2]|0;
         $3220 = (($3217) + 4)|0;
         $3221 = $3220;
         $3222 = HEAP32[$3221>>2]|0;
         $3223 = ($3219|0)==(0);
         $3224 = ($3222|0)==(0);
         $3225 = $3223 & $3224;
         if (!($3225)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $3226 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3227 = HEAP32[$3226>>2]|0;
         $3228 = (($3227) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3228;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $3187 = $72;
         $3188 = $3187;
         $3189 = HEAP32[$3188>>2]|0;
         $3190 = (($3187) + 4)|0;
         $3191 = $3190;
         $3192 = HEAP32[$3191>>2]|0;
         $3193 = ($3189|0)==(0);
         $3194 = ($3192|0)==(0);
         $3195 = $3193 & $3194;
         if (!($3195)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $3196 = $73;
         $3197 = $3196;
         $3198 = HEAP32[$3197>>2]|0;
         $3199 = (($3196) + 4)|0;
         $3200 = $3199;
         $3201 = HEAP32[$3200>>2]|0;
         $3202 = ($3198|0)==(0);
         $3203 = ($3201|0)==(0);
         $3204 = $3202 & $3203;
         if (!($3204)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
         $3205 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3206 = HEAP32[$3205>>2]|0;
         $3207 = (($3206) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3207;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 131:  {
        $3229 = HEAP32[$44>>2]|0;
        $3230 = ($3229|0)==(0|0);
        if ($3230) {
         $3239 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $3240 = HEAP32[$3239>>2]|0;
         $3241 = (($aMem$0401) + (($3240*40)|0)|0);
         $pIn1$3 = $3241;
        } else {
         $pFrame91$0 = $3229;
         while(1) {
          $3231 = (($pFrame91$0) + 4|0);
          $3232 = HEAP32[$3231>>2]|0;
          $3233 = ($3232|0)==(0|0);
          if ($3233) {
           break;
          } else {
           $pFrame91$0 = $3232;
          }
         }
         $3234 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $3235 = HEAP32[$3234>>2]|0;
         $3236 = (($pFrame91$0) + 12|0);
         $3237 = HEAP32[$3236>>2]|0;
         $3238 = (($3237) + (($3235*40)|0)|0);
         $pIn1$3 = $3238;
        }
        _sqlite3VdbeMemIntegerify($pIn1$3);
        $3242 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3243 = HEAP32[$3242>>2]|0;
        $3244 = (($aMem$0401) + (($3243*40)|0)|0);
        _sqlite3VdbeMemIntegerify($3244);
        $3245 = (($pIn1$3) + 16|0);
        $3246 = $3245;
        $3247 = $3246;
        $3248 = HEAP32[$3247>>2]|0;
        $3249 = (($3246) + 4)|0;
        $3250 = $3249;
        $3251 = HEAP32[$3250>>2]|0;
        $3252 = ((($aMem$0401) + (($3243*40)|0)|0) + 16|0);
        $3253 = $3252;
        $3254 = $3253;
        $3255 = HEAP32[$3254>>2]|0;
        $3256 = (($3253) + 4)|0;
        $3257 = $3256;
        $3258 = HEAP32[$3257>>2]|0;
        $3259 = ($3251|0)<($3258|0);
        $3260 = ($3251|0)==($3258|0);
        $3261 = ($3248>>>0)<($3255>>>0);
        $3262 = $3260 & $3261;
        $3263 = $3259 | $3262;
        if ($3263) {
         $3264 = $3245;
         $3265 = $3264;
         HEAP32[$3265>>2] = $3255;
         $3266 = (($3264) + 4)|0;
         $3267 = $3266;
         HEAP32[$3267>>2] = $3258;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 136:  {
        $3361 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3362 = HEAP32[$3361>>2]|0;
        $3363 = (($aMem$0401) + (($3362*40)|0)|0);
        $3364 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3365 = HEAP32[$3364>>2]|0;
        $3366 = (_sqlite3VdbeMemFinalize($3363,$3365)|0);
        $3367 = ($3366|0)==(0);
        if (!($3367)) {
         $3368 = (_sqlite3_value_text($3363)|0);
         HEAP32[$vararg_buffer37>>2] = $3368;
         _sqlite3SetString($58,$2,1712,$vararg_buffer37);
        }
        (_sqlite3VdbeChangeEncoding($3363,$47)|0);
        $3369 = (_sqlite3VdbeMemTooBig($3363)|0);
        $3370 = ($3369|0)==(0);
        if ($3370) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3366;
        } else {
         $3764 = $691;$3765 = $694;
         label = 791;
         break L12;
        }
        break;
       }
       case 132:  {
        $3268 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3269 = HEAP32[$3268>>2]|0;
        $3270 = ((($aMem$0401) + (($3269*40)|0)|0) + 16|0);
        $3271 = $3270;
        $3272 = $3271;
        $3273 = HEAP32[$3272>>2]|0;
        $3274 = (($3271) + 4)|0;
        $3275 = $3274;
        $3276 = HEAP32[$3275>>2]|0;
        $3277 = ($3276|0)>(0);
        $3278 = ($3276|0)==(0);
        $3279 = ($3273>>>0)>(0);
        $3280 = $3278 & $3279;
        $3281 = $3277 | $3280;
        if ($3281) {
         $3282 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3283 = HEAP32[$3282>>2]|0;
         $3284 = (($3283) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3284;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 134:  {
        $3285 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3286 = HEAP32[$3285>>2]|0;
        $3287 = ((($aMem$0401) + (($3286*40)|0)|0) + 16|0);
        $3288 = $3287;
        $3289 = $3288;
        $3290 = HEAP32[$3289>>2]|0;
        $3291 = (($3288) + 4)|0;
        $3292 = $3291;
        $3293 = HEAP32[$3292>>2]|0;
        $3294 = ($3293|0)<(0);
        if ($3294) {
         $3295 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3296 = HEAP32[$3295>>2]|0;
         $3297 = (($3296) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3297;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 135:  {
        $3298 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3299 = HEAP32[$3298>>2]|0;
        $3300 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3301 = HEAP32[$3300>>2]|0;
        $3302 = ($3301|0)<(0);
        $3303 = $3302 << 31 >> 31;
        $3304 = ((($aMem$0401) + (($3299*40)|0)|0) + 16|0);
        $3305 = $3304;
        $3306 = $3305;
        $3307 = HEAP32[$3306>>2]|0;
        $3308 = (($3305) + 4)|0;
        $3309 = $3308;
        $3310 = HEAP32[$3309>>2]|0;
        $3311 = (_i64Add(($3307|0),($3310|0),($3301|0),($3303|0))|0);
        $3312 = tempRet0;
        $3313 = $3304;
        $3314 = $3313;
        HEAP32[$3314>>2] = $3311;
        $3315 = (($3313) + 4)|0;
        $3316 = $3315;
        HEAP32[$3316>>2] = $3312;
        $3317 = ($3311|0)==(0);
        $3318 = ($3312|0)==(0);
        $3319 = $3317 & $3318;
        if ($3319) {
         $3320 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3321 = HEAP32[$3320>>2]|0;
         $3322 = (($3321) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3322;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 10:  {
        $3323 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $3324 = HEAP8[$3323>>0]|0;
        $3325 = $3324&255;
        $3326 = HEAP32[$51>>2]|0;
        $3327 = ($3324<<24>>24)==(0);
        if (!($3327)) {
         $3328 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3329 = HEAP32[$3328>>2]|0;
         $3330 = (($aMem$0401) + (($3329*40)|0)|0);
         $i93$0146 = 0;$pRec95$0147 = $3330;
         while(1) {
          $3331 = (($3326) + ($i93$0146<<2)|0);
          HEAP32[$3331>>2] = $pRec95$0147;
          $3332 = (($i93$0146) + 1)|0;
          $3333 = (($pRec95$0147) + 40|0);
          $3334 = ($3332|0)<($3325|0);
          if ($3334) {
           $i93$0146 = $3332;$pRec95$0147 = $3333;
          } else {
           break;
          }
         }
        }
        $3335 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3336 = HEAP32[$3335>>2]|0;
        HEAP32[$ctx96>>2] = $3336;
        $3337 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3338 = HEAP32[$3337>>2]|0;
        $3339 = (($aMem$0401) + (($3338*40)|0)|0);
        HEAP32[$108>>2] = $3339;
        $3340 = ((($aMem$0401) + (($3338*40)|0)|0) + 24|0);
        $3341 = HEAP32[$3340>>2]|0;
        $3342 = (($3341) + 1)|0;
        HEAP32[$3340>>2] = $3342;
        HEAP16[$110>>1] = 1;
        HEAP32[$111>>2] = 0;
        HEAP32[$112>>2] = 0;
        HEAP32[$113>>2] = 0;
        HEAP32[$109>>2] = $2;
        HEAP32[$114>>2] = 0;
        HEAP32[$115>>2] = 0;
        HEAP8[$116>>0] = 0;
        $3343 = (($3336) + 2|0);
        $3344 = HEAP16[$3343>>1]|0;
        $3345 = $3344 & 32;
        $3346 = ($3345<<16>>16)==(0);
        if (!($3346)) {
         $$sum9 = (($pc$0463) + -1)|0;
         $3347 = ((($aOp$0453) + (($$sum9*20)|0)|0) + 16|0);
         $3348 = HEAP32[$3347>>2]|0;
         HEAP32[$115>>2] = $3348;
        }
        $3349 = (($3336) + 16|0);
        $3350 = HEAP32[$3349>>2]|0;
        FUNCTION_TABLE_viii[$3350 & 255]($ctx96,$3325,$3326);
        $3351 = HEAP32[$114>>2]|0;
        $3352 = ($3351|0)==(0);
        if ($3352) {
         $rc$36 = 0;
        } else {
         $3353 = (_sqlite3_value_text($109)|0);
         HEAP32[$vararg_buffer34>>2] = $3353;
         _sqlite3SetString($58,$2,1712,$vararg_buffer34);
         $3354 = HEAP32[$114>>2]|0;
         $rc$36 = $3354;
        }
        $3355 = HEAP8[$116>>0]|0;
        $3356 = ($3355<<24>>24)==(0);
        if (!($3356)) {
         $$sum8 = (($pc$0463) + -1)|0;
         $3357 = ((($aOp$0453) + (($$sum8*20)|0)|0) + 4|0);
         $3358 = HEAP32[$3357>>2]|0;
         $3359 = ($3358|0)==(0);
         if (!($3359)) {
          $3360 = (($aMem$0401) + (($3358*40)|0)|0);
          _sqlite3VdbeMemSetInt64($3360,1,0);
         }
        }
        _sqlite3VdbeMemRelease($109);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$36;
        break;
       }
       case 11:  {
        HEAP32[$aRes>>2] = 0;
        HEAP32[$117>>2] = -1;
        HEAP32[$118>>2] = -1;
        $3371 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3372 = HEAP32[$3371>>2]|0;
        $3373 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3374 = HEAP32[$3373>>2]|0;
        $3375 = (_sqlite3Checkpoint($2,$3372,$3374,$118,$117)|0);
        $3376 = ($3375|0)==(5);
        if ($3376) {
         HEAP32[$aRes>>2] = 1;
         $3382 = 1;$3383 = 0;$rc$37 = 0;
        } else {
         $$pre678 = HEAP32[$aRes>>2]|0;
         $3377 = ($$pre678|0)<(0);
         $3378 = $3377 << 31 >> 31;
         $3382 = $$pre678;$3383 = $3378;$rc$37 = $3375;
        }
        $3379 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3380 = HEAP32[$3379>>2]|0;
        $3381 = (($aMem$0401) + (($3380*40)|0)|0);
        _sqlite3VdbeMemSetInt64($3381,$3382,$3383);
        $$sum714 = (($3380) + 1)|0;
        $3384 = (($aMem$0401) + (($$sum714*40)|0)|0);
        $3385 = HEAP32[$118>>2]|0;
        $3386 = ($3385|0)<(0);
        $3387 = $3386 << 31 >> 31;
        _sqlite3VdbeMemSetInt64($3384,$3385,$3387);
        $$sum715 = (($3380) + 2)|0;
        $3388 = (($aMem$0401) + (($$sum715*40)|0)|0);
        $3389 = HEAP32[$117>>2]|0;
        $3390 = ($3389|0)<(0);
        $3391 = $3390 << 31 >> 31;
        _sqlite3VdbeMemSetInt64($3388,$3389,$3391);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$37;
        break;
       }
       case 12:  {
        $3392 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3393 = HEAP32[$3392>>2]|0;
        $3394 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3395 = HEAP32[$3394>>2]|0;
        $3396 = HEAP32[$3>>2]|0;
        $3397 = ((($3396) + ($3395<<4)|0) + 4|0);
        $3398 = HEAP32[$3397>>2]|0;
        $$idx = (($3398) + 4|0);
        $$idx$val = HEAP32[$$idx>>2]|0;
        $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
        $3399 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
        $$idx86 = (($3399) + 5|0);
        $$idx86$val = HEAP8[$$idx86>>0]|0;
        $3400 = (_sqlite3PagerGetJournalMode($$idx86$val)|0);
        $3401 = ($3393|0)==(-1);
        $$70 = $3401 ? $3400 : $3393;
        $3402 = (_sqlite3PagerOkToChangeJournalMode($3399)|0);
        $3403 = ($3402|0)==(0);
        $eNew$1 = $3403 ? $3400 : $$70;
        $3404 = ($eNew$1|0)==(5);
        if ($3404) {
         $3405 = (_sqlite3PagerFilename($3399,1)|0);
         $3406 = (_sqlite3Strlen30($3405)|0);
         $3407 = ($3406|0)==(0);
         if ($3407) {
          $eNew$2120 = $3400;$rc$39 = 0;
         } else {
          $$idx80 = (($3399) + 4|0);
          $$idx80$val = HEAP8[$$idx80>>0]|0;
          $$idx81 = (($3399) + 60|0);
          $$idx81$val = HEAP32[$$idx81>>2]|0;
          $$idx81$val$idx$val = HEAP32[$$idx81$val>>2]|0;
          $3408 = (_sqlite3PagerWalSupported($$idx80$val,$$idx81$val$idx$val)|0);
          $3409 = ($3408|0)==(0);
          $3410 = ($eNew$1|0)==($3400|0);
          $or$cond724 = $3409 | $3410;
          if ($or$cond724) {
           $eNew$2120 = $3400;$rc$39 = 0;
          } else {
           label = 715;
          }
         }
        } else {
         $$old = ($eNew$1|0)==($3400|0);
         if ($$old) {
          $eNew$2120 = $3400;$rc$39 = 0;
         } else {
          label = 715;
         }
        }
        do {
         if ((label|0) == 715) {
          label = 0;
          $3411 = ($3400|0)==(5);
          $or$cond71 = $3411 | $3404;
          if ($or$cond71) {
           $3412 = HEAP8[$70>>0]|0;
           $3413 = ($3412<<24>>24)==(0);
           if ($3413) {
            label = 718;
            break L12;
           }
           $3414 = HEAP32[$81>>2]|0;
           $3415 = ($3414|0)>(1);
           if ($3415) {
            label = 718;
            break L12;
           }
           if ($3411) {
            $3417 = (_sqlite3PagerCloseWal($3399)|0);
            $3418 = ($3417|0)==(0);
            if (!($3418)) {
             $eNew$2120 = $eNew$1;$rc$39 = $3417;
             break;
            }
            (_sqlite3PagerSetJournalMode($3399,$eNew$1)|0);
           } else {
            $3419 = ($3400|0)==(4);
            if ($3419) {
             (_sqlite3PagerSetJournalMode($3399,2)|0);
            }
           }
           $3420 = $3404 ? 2 : 1;
           $3421 = (_sqlite3BtreeSetVersion($3398,$3420)|0);
           $eNew$2120 = $eNew$1;$rc$39 = $3421;
          } else {
           $eNew$2120 = $eNew$1;$rc$39 = 0;
          }
         }
        } while(0);
        $3422 = ($rc$39|0)==(0);
        $eNew$2$ = $3422 ? $eNew$2120 : $3400;
        $3423 = (_sqlite3PagerSetJournalMode($3399,$eNew$2$)|0);
        $3424 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3425 = HEAP32[$3424>>2]|0;
        $3426 = (($aMem$0401) + (($3425*40)|0)|0);
        $3427 = ((($aMem$0401) + (($3425*40)|0)|0) + 28|0);
        HEAP16[$3427>>1] = 2562;
        $3428 = (_sqlite3JournalModename($3423)|0);
        $3429 = ((($aMem$0401) + (($3425*40)|0)|0) + 4|0);
        HEAP32[$3429>>2] = $3428;
        $3430 = (_sqlite3Strlen30($3428)|0);
        $3431 = ((($aMem$0401) + (($3425*40)|0)|0) + 24|0);
        HEAP32[$3431>>2] = $3430;
        $3432 = ((($aMem$0401) + (($3425*40)|0)|0) + 30|0);
        HEAP8[$3432>>0] = 1;
        (_sqlite3VdbeChangeEncoding($3426,$47)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $3426;$pc$11 = $pc$0463;$rc$42 = $rc$39;
        break;
       }
       case 13:  {
        $3433 = (_sqlite3RunVacuum($58,$2)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3433;
        break;
       }
       case 139:  {
        $3449 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3450 = HEAP32[$3449>>2]|0;
        $3451 = $3450&255;
        $3452 = $3450 & 255;
        $3453 = ($3452|0)==(0);
        if ($3453) {
         $3454 = HEAP32[$76>>2]|0;
         $3455 = $3454 & 16384;
         $3456 = ($3455|0)==(0);
         if (!($3456)) {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
          break L21;
         }
        }
        $3457 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3458 = HEAP32[$3457>>2]|0;
        $3459 = HEAP32[$3>>2]|0;
        $3460 = ((($3459) + ($3458<<4)|0) + 4|0);
        $3461 = HEAP32[$3460>>2]|0;
        $3462 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3463 = HEAP32[$3462>>2]|0;
        $3464 = (_sqlite3BtreeLockTable($3461,$3463,$3451)|0);
        $3465 = $3464 & 255;
        $3466 = ($3465|0)==(6);
        if ($3466) {
         $3467 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
         $3468 = HEAP32[$3467>>2]|0;
         HEAP32[$vararg_buffer43>>2] = $3468;
         _sqlite3SetString($58,$2,31944,$vararg_buffer43);
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3464;
        } else {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3464;
        }
        break;
       }
       case 137:  {
        $3434 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3435 = HEAP32[$3434>>2]|0;
        $3436 = HEAP32[$3>>2]|0;
        $3437 = ((($3436) + ($3435<<4)|0) + 4|0);
        $3438 = HEAP32[$3437>>2]|0;
        $$idx96$val = HEAP32[$3438>>2]|0;
        $$idx97 = (($3438) + 4|0);
        $$idx97$val = HEAP32[$$idx97>>2]|0;
        $3439 = (_sqlite3BtreeIncrVacuum($$idx96$val,$$idx97$val)|0);
        $3440 = ($3439|0)==(101);
        if ($3440) {
         $3441 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3442 = HEAP32[$3441>>2]|0;
         $3443 = (($3442) + -1)|0;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $3443;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3439;
        }
        break;
       }
       case 138:  {
        $3444 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3445 = HEAP32[$3444>>2]|0;
        $3446 = ($3445|0)==(0);
        if ($3446) {
         _sqlite3ExpirePreparedStatements($2);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $3447 = HEAP16[$77>>1]|0;
         $3448 = $3447 | 32;
         HEAP16[$77>>1] = $3448;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 141:  {
        $3475 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3476 = HEAP32[$3475>>2]|0;
        $3477 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3478 = HEAP32[$3477>>2]|0;
        $3479 = (_sqlite3VtabCallCreate($2,$3476,$3478,$58)|0);
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3479;
        break;
       }
       case 148:  {
        HEAP32[$pVtabCursor>>2] = 0;
        $3490 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3491 = HEAP32[$3490>>2]|0;
        $3492 = (($3491) + 8|0);
        $3493 = HEAP32[$3492>>2]|0;
        $3494 = HEAP32[$3493>>2]|0;
        $3495 = (($3494) + 24|0);
        $3496 = HEAP32[$3495>>2]|0;
        $3497 = (FUNCTION_TABLE_iii[$3496 & 255]($3493,$pVtabCursor)|0);
        _sqlite3VtabImportErrmsg($p,$3493);
        $3498 = ($3497|0)==(0);
        if (!($3498)) {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $3497;
         label = 784;
         break L12;
        }
        $3499 = HEAP32[$pVtabCursor>>2]|0;
        HEAP32[$3499>>2] = $3493;
        $3500 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3501 = HEAP32[$3500>>2]|0;
        $3502 = (_allocateCursor($p,$3501,0,-1,0)|0);
        $3503 = ($3502|0)==(0|0);
        if ($3503) {
         HEAP8[$42>>0] = 1;
         $3506 = (($3494) + 28|0);
         $3507 = HEAP32[$3506>>2]|0;
         $3508 = HEAP32[$pVtabCursor>>2]|0;
         (FUNCTION_TABLE_ii[$3507 & 255]($3508)|0);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        } else {
         $3504 = HEAP32[$pVtabCursor>>2]|0;
         $3505 = (($3502) + 32|0);
         HEAP32[$3505>>2] = $3504;
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 142:  {
        $3480 = HEAP16[$77>>1]|0;
        $3481 = $3480 & -13;
        $3482 = $3481 | 8;
        HEAP16[$77>>1] = $3482;
        $3483 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3484 = HEAP32[$3483>>2]|0;
        $3485 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3486 = HEAP32[$3485>>2]|0;
        $3487 = (_sqlite3VtabCallDestroy($2,$3484,$3486)|0);
        $3488 = HEAP16[$77>>1]|0;
        $3489 = $3488 & -13;
        HEAP16[$77>>1] = $3489;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3487;
        break;
       }
       case 140:  {
        $3469 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3470 = HEAP32[$3469>>2]|0;
        $3471 = (_sqlite3VtabBegin($2,$3470)|0);
        $3472 = ($3470|0)==(0|0);
        if ($3472) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3471;
        } else {
         $3473 = (($3470) + 8|0);
         $3474 = HEAP32[$3473>>2]|0;
         _sqlite3VtabImportErrmsg($p,$3474);
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3471;
        }
        break;
       }
       case 14:  {
        $3509 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3510 = HEAP32[$3509>>2]|0;
        $$sum = (($3510) + 1)|0;
        $3511 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3512 = HEAP32[$3511>>2]|0;
        $3513 = HEAP32[$61>>2]|0;
        $3514 = (($3513) + ($3512<<2)|0);
        $3515 = HEAP32[$3514>>2]|0;
        $3516 = (($3515) + 32|0);
        $3517 = HEAP32[$3516>>2]|0;
        $3518 = HEAP32[$3517>>2]|0;
        $3519 = HEAP32[$3518>>2]|0;
        $3520 = ((($aMem$0401) + (($$sum*40)|0)|0) + 16|0);
        $3521 = $3520;
        $3522 = $3521;
        $3523 = HEAP32[$3522>>2]|0;
        $3524 = (($3521) + 4)|0;
        $3525 = $3524;
        $3526 = HEAP32[$3525>>2]|0;
        $3527 = ((($aMem$0401) + (($3510*40)|0)|0) + 16|0);
        $3528 = $3527;
        $3529 = $3528;
        $3530 = HEAP32[$3529>>2]|0;
        $3531 = (($3528) + 4)|0;
        $3532 = $3531;
        $3533 = HEAP32[$3532>>2]|0;
        $3534 = HEAP32[$51>>2]|0;
        $3535 = ($3523|0)>(0);
        if ($3535) {
         $i113$0140 = 0;
         while(1) {
          $3536 = (($i113$0140) + 1)|0;
          $$sum7 = (($3536) + ($$sum))|0;
          $3537 = (($aMem$0401) + (($$sum7*40)|0)|0);
          $3538 = (($3534) + ($i113$0140<<2)|0);
          HEAP32[$3538>>2] = $3537;
          $exitcond482 = ($3536|0)==($3523|0);
          if ($exitcond482) {
           break;
          } else {
           $i113$0140 = $3536;
          }
         }
        }
        $3539 = HEAP16[$77>>1]|0;
        $3540 = $3539 & -13;
        $3541 = $3540 | 4;
        HEAP16[$77>>1] = $3541;
        $3542 = (($3519) + 32|0);
        $3543 = HEAP32[$3542>>2]|0;
        $3544 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3545 = HEAP32[$3544>>2]|0;
        $3546 = (FUNCTION_TABLE_iiiiii[$3543 & 255]($3517,$3530,$3545,$3523,$3534)|0);
        $3547 = HEAP16[$77>>1]|0;
        $3548 = $3547 & -13;
        HEAP16[$77>>1] = $3548;
        _sqlite3VtabImportErrmsg($p,$3518);
        $3549 = ($3546|0)==(0);
        if ($3549) {
         $3550 = (($3519) + 40|0);
         $3551 = HEAP32[$3550>>2]|0;
         $3552 = (FUNCTION_TABLE_ii[$3551 & 255]($3517)|0);
         $phitmp6 = ($3552|0)==(0);
         if ($phitmp6) {
          $pc$9 = $pc$0463;
         } else {
          $3553 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
          $3554 = HEAP32[$3553>>2]|0;
          $3555 = (($3554) + -1)|0;
          $pc$9 = $3555;
         }
        } else {
         $pc$9 = $pc$0463;
        }
        $3556 = (($3515) + 25|0);
        HEAP8[$3556>>0] = 0;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$9;$rc$42 = $3546;
        break;
       }
       case 149:  {
        $3557 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3558 = HEAP32[$3557>>2]|0;
        $3559 = HEAP32[$61>>2]|0;
        $3560 = (($3559) + ($3558<<2)|0);
        $3561 = HEAP32[$3560>>2]|0;
        $3562 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3563 = HEAP32[$3562>>2]|0;
        $3564 = (($aMem$0401) + (($3563*40)|0)|0);
        $3565 = (($3561) + 25|0);
        $3566 = HEAP8[$3565>>0]|0;
        $3567 = ($3566<<24>>24)==(0);
        if ($3567) {
         $3568 = (($3561) + 32|0);
         $3569 = HEAP32[$3568>>2]|0;
         $3570 = HEAP32[$3569>>2]|0;
         $3571 = HEAP32[$3570>>2]|0;
         dest=$sContext+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
         _sqlite3VdbeMemMove($119,$3564);
         $3572 = HEAP16[$120>>1]|0;
         $3573 = $3572&65535;
         $3574 = $3573 & 48640;
         $3575 = $3574 | 1;
         $3576 = $3575&65535;
         HEAP16[$120>>1] = $3576;
         $3577 = (($3571) + 44|0);
         $3578 = HEAP32[$3577>>2]|0;
         $3579 = HEAP32[$3568>>2]|0;
         $3580 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3581 = HEAP32[$3580>>2]|0;
         $3582 = (FUNCTION_TABLE_iiii[$3578 & 255]($3579,$sContext,$3581)|0);
         _sqlite3VtabImportErrmsg($p,$3570);
         $3583 = HEAP32[$121>>2]|0;
         $3584 = ($3583|0)==(0);
         $$73 = $3584 ? $3582 : $3583;
         (_sqlite3VdbeChangeEncoding($119,$47)|0);
         _sqlite3VdbeMemMove($3564,$119);
         $3585 = (_sqlite3VdbeMemTooBig($3564)|0);
         $not$ = ($3585|0)==(0);
         if ($not$) {
          $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $$73;
          break L21;
         } else {
          $3764 = $691;$3765 = $694;
          label = 791;
          break L12;
         }
        } else {
         _sqlite3VdbeMemSetNull($3564);
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
         break L21;
        }
        break;
       }
       case 150:  {
        $3586 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3587 = HEAP32[$3586>>2]|0;
        $3588 = HEAP32[$61>>2]|0;
        $3589 = (($3588) + ($3587<<2)|0);
        $3590 = HEAP32[$3589>>2]|0;
        $3591 = (($3590) + 25|0);
        $3592 = HEAP8[$3591>>0]|0;
        $3593 = ($3592<<24>>24)==(0);
        if ($3593) {
         $3594 = (($3590) + 32|0);
         $3595 = HEAP32[$3594>>2]|0;
         $3596 = HEAP32[$3595>>2]|0;
         $3597 = HEAP32[$3596>>2]|0;
         $3598 = HEAP16[$77>>1]|0;
         $3599 = $3598 & -13;
         $3600 = $3599 | 4;
         HEAP16[$77>>1] = $3600;
         $3601 = (($3597) + 36|0);
         $3602 = HEAP32[$3601>>2]|0;
         $3603 = HEAP32[$3594>>2]|0;
         $3604 = (FUNCTION_TABLE_ii[$3602 & 255]($3603)|0);
         $3605 = HEAP16[$77>>1]|0;
         $3606 = $3605 & -13;
         HEAP16[$77>>1] = $3606;
         _sqlite3VtabImportErrmsg($p,$3596);
         $3607 = ($3604|0)==(0);
         if ($3607) {
          $3608 = (($3597) + 40|0);
          $3609 = HEAP32[$3608>>2]|0;
          $3610 = HEAP32[$3594>>2]|0;
          $3611 = (FUNCTION_TABLE_ii[$3609 & 255]($3610)|0);
          $phitmp = ($3611|0)==(0);
          if (!($phitmp)) {
           $pc$1 = $pc$0463;$rc$1 = 0;
           label = 18;
           break L21;
          }
         }
         $3612 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $3613 = HEAP32[$3612>>2]|0;
         $3614 = (($3613) + -1)|0;
         $pc$1 = $3614;$rc$1 = $3604;
         label = 18;
        } else {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        }
        break;
       }
       case 151:  {
        $3615 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3616 = HEAP32[$3615>>2]|0;
        $3617 = (($3616) + 8|0);
        $3618 = HEAP32[$3617>>2]|0;
        $3619 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3620 = HEAP32[$3619>>2]|0;
        $3621 = (($aMem$0401) + (($3620*40)|0)|0);
        $3622 = (_sqlite3VdbeChangeEncoding($3621,1)|0);
        $3623 = ($3622|0)==(0);
        if (!($3623)) {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $3622;
         label = 784;
         break L12;
        }
        $3624 = HEAP32[$3618>>2]|0;
        $3625 = (($3624) + 76|0);
        $3626 = HEAP32[$3625>>2]|0;
        $3627 = ((($aMem$0401) + (($3620*40)|0)|0) + 4|0);
        $3628 = HEAP32[$3627>>2]|0;
        $3629 = (FUNCTION_TABLE_iii[$3626 & 255]($3618,$3628)|0);
        _sqlite3VtabImportErrmsg($p,$3618);
        $3630 = HEAP16[$77>>1]|0;
        $3631 = $3630 & -33;
        HEAP16[$77>>1] = $3631;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3629;
        break;
       }
       case 15:  {
        $3632 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $3633 = HEAP32[$3632>>2]|0;
        $3634 = (($3633) + 8|0);
        $3635 = HEAP32[$3634>>2]|0;
        $3636 = HEAP32[$3635>>2]|0;
        $3637 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3638 = HEAP32[$3637>>2]|0;
        $3639 = (($3636) + 52|0);
        $3640 = HEAP32[$3639>>2]|0;
        $3641 = ($3640|0)==(0|0);
        if ($3641) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3642 = HEAP8[$122>>0]|0;
         $3643 = HEAP32[$51>>2]|0;
         $3644 = ($3638|0)>(0);
         if ($3644) {
          $3645 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
          $3646 = HEAP32[$3645>>2]|0;
          $3647 = (($aMem$0401) + (($3646*40)|0)|0);
          $i127$0135 = 0;$pX130$0136 = $3647;
          while(1) {
           $3648 = (($3643) + ($i127$0135<<2)|0);
           HEAP32[$3648>>2] = $pX130$0136;
           $3649 = (($pX130$0136) + 40|0);
           $3650 = (($i127$0135) + 1)|0;
           $exitcond = ($3650|0)==($3638|0);
           if ($exitcond) {
            break;
           } else {
            $i127$0135 = $3650;$pX130$0136 = $3649;
           }
          }
         }
         $3651 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
         $3652 = HEAP8[$3651>>0]|0;
         HEAP8[$122>>0] = $3652;
         $3653 = HEAP32[$3639>>2]|0;
         $3654 = (FUNCTION_TABLE_iiiii[$3653 & 255]($3635,$3638,$3643,$rowid128)|0);
         HEAP8[$122>>0] = $3642;
         _sqlite3VtabImportErrmsg($p,$3635);
         $3655 = ($3654|0)==(0);
         if ($3655) {
          $3656 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
          $3657 = HEAP32[$3656>>2]|0;
          $3658 = ($3657|0)==(0);
          if ($3658) {
           $3780 = $691;$3781 = $694;
          } else {
           $3659 = $rowid128;
           $3660 = $3659;
           $3661 = HEAP32[$3660>>2]|0;
           $3662 = (($3659) + 4)|0;
           $3663 = $3662;
           $3664 = HEAP32[$3663>>2]|0;
           $3665 = $11;
           $3666 = $3665;
           HEAP32[$3666>>2] = $3661;
           $3667 = (($3665) + 4)|0;
           $3668 = $3667;
           HEAP32[$3668>>2] = $3664;
           $3780 = $3661;$3781 = $3664;
          }
         } else {
          $3669 = $3654 & 255;
          $3670 = ($3669|0)==(19);
          if ($3670) {
           $3671 = HEAP32[$3632>>2]|0;
           $3672 = (($3671) + 16|0);
           $3673 = HEAP8[$3672>>0]|0;
           $3674 = ($3673<<24>>24)==(0);
           if ($3674) {
            $3780 = $691;$3781 = $694;
           } else {
            $3675 = HEAP8[$3651>>0]|0;
            if ((($3675<<24>>24) == 5)) {
             $3676 = 2;
            } else if ((($3675<<24>>24) == 4)) {
             $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
             label = 783;
             break L21;
            } else {
             $3676 = $3675;
            }
            HEAP8[$97>>0] = $3676;
            $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3654;
            break L21;
           }
          } else {
           $3780 = $691;$3781 = $694;
          }
         }
         $3677 = HEAP32[$46>>2]|0;
         $3678 = (($3677) + 1)|0;
         HEAP32[$46>>2] = $3678;
         $3759 = $3780;$3760 = $3781;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $3654;
        }
        break;
       }
       case 154:  {
        $3708 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $3709 = HEAP32[$3708>>2]|0;
        $3710 = ($3709|0)==(0);
        $3711 = (($3709) + -1)|0;
        $pc$0$76 = $3710 ? $pc$0463 : $3711;
        $3712 = HEAP32[$123>>2]|0;
        $3713 = ($3712|0)==(0|0);
        if ($3713) {
         $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0$76;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
         label = 783;
        } else {
         $3714 = HEAP16[$77>>1]|0;
         $3715 = $3714 & 2048;
         $3716 = ($3715<<16>>16)==(0);
         if ($3716) {
          $3717 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
          $3718 = HEAP32[$3717>>2]|0;
          $3719 = ($3718|0)==(0|0);
          if ($3719) {
           $3720 = HEAP32[$124>>2]|0;
           $3721 = ($3720|0)==(0|0);
           if ($3721) {
            $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0$76;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
            label = 783;
            break L21;
           } else {
            $3722 = $3720;
           }
          } else {
           $3722 = $3718;
          }
          $3723 = (_sqlite3VdbeExpandSql($p,$3722)|0);
          $3724 = HEAP32[$123>>2]|0;
          $3725 = HEAP32[$125>>2]|0;
          FUNCTION_TABLE_vii[$3724 & 255]($3725,$3723);
          _sqlite3DbFree($2,$3723);
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0$76;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
         } else {
          $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0$76;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
          label = 783;
         }
        }
        break;
       }
       case 152:  {
        $3679 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3680 = HEAP32[$3679>>2]|0;
        $3681 = HEAP32[$3>>2]|0;
        $3682 = ((($3681) + ($3680<<4)|0) + 4|0);
        $3683 = HEAP32[$3682>>2]|0;
        $$idx79 = (($3683) + 4|0);
        $$idx79$val = HEAP32[$$idx79>>2]|0;
        $$idx79$val$idx = (($$idx79$val) + 44|0);
        $$idx79$val$idx$val = HEAP32[$$idx79$val$idx>>2]|0;
        $3684 = (_sqlite3BtreeLastPage($$idx79$val$idx$val)|0);
        $3685 = (($pOut$1) + 16|0);
        $3686 = $3685;
        $3687 = $3686;
        HEAP32[$3687>>2] = $3684;
        $3688 = (($3686) + 4)|0;
        $3689 = $3688;
        HEAP32[$3689>>2] = 0;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       case 153:  {
        $3690 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
        $3691 = HEAP32[$3690>>2]|0;
        $3692 = HEAP32[$3>>2]|0;
        $3693 = ((($3692) + ($3691<<4)|0) + 4|0);
        $3694 = HEAP32[$3693>>2]|0;
        $3695 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
        $3696 = HEAP32[$3695>>2]|0;
        $3697 = ($3696|0)==(0);
        if ($3697) {
         $newMax$0 = 0;
        } else {
         $$idx78 = (($3694) + 4|0);
         $$idx78$val = HEAP32[$$idx78>>2]|0;
         $$idx78$val$idx = (($$idx78$val) + 44|0);
         $$idx78$val$idx$val = HEAP32[$$idx78$val$idx>>2]|0;
         $3698 = (_sqlite3BtreeLastPage($$idx78$val$idx$val)|0);
         $3699 = ($3698>>>0)<($3696>>>0);
         $$75 = $3699 ? $3696 : $3698;
         $newMax$0 = $$75;
        }
        $3700 = (_sqlite3BtreeMaxPageCount($3694,$newMax$0)|0);
        $3701 = ($3700|0)<(0);
        $3702 = $3701 << 31 >> 31;
        $3703 = (($pOut$1) + 16|0);
        $3704 = $3703;
        $3705 = $3704;
        HEAP32[$3705>>2] = $3700;
        $3706 = (($3704) + 4)|0;
        $3707 = $3706;
        HEAP32[$3707>>2] = $3702;
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
        break;
       }
       default: {
        $3757 = $691;$3758 = $694;$aMem$1$ph = $aMem$0401;$aOp$1$ph = $aOp$0453;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$0463;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
        label = 783;
       }
       }
      } while(0);
      if ((label|0) == 27) {
       label = 0;
       $234 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = ($235|0)==(0);
       if (!($236)) {
        label = 33;
        break;
       }
       $237 = HEAP32[$44>>2]|0;
       $238 = ($237|0)==(0|0);
       if ($238) {
        label = 29;
        break;
       }
       $242 = (($237) + 4|0);
       $243 = HEAP32[$242>>2]|0;
       HEAP32[$44>>2] = $243;
       $244 = HEAP32[$45>>2]|0;
       $245 = (($244) + -1)|0;
       HEAP32[$45>>2] = $245;
       $246 = HEAP32[$46>>2]|0;
       _sqlite3VdbeSetChanges($2,$246);
       $247 = (_sqlite3VdbeFrameRestore($237)|0);
       $248 = $11;
       $249 = $248;
       $250 = HEAP32[$249>>2]|0;
       $251 = (($248) + 4)|0;
       $252 = $251;
       $253 = HEAP32[$252>>2]|0;
       $254 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = ($255|0)==(4);
       $257 = HEAP32[$0>>2]|0;
       if ($256) {
        $258 = ((($257) + (($247*20)|0)|0) + 8|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = (($259) + -1)|0;
        $pc$2 = $260;
       } else {
        $pc$2 = $247;
       }
       $261 = HEAP32[$9>>2]|0;
       $3757 = $250;$3758 = $253;$aMem$1$ph = $261;$aOp$1$ph = $257;$aPermute$2$ph = $aPermute$0390;$iCompare$3$ph = $iCompare$0422;$pOut$6$ph = $pOut$1;$pc$11$ph = $pc$2;$resetSchemaOnFault$1$ph = $resetSchemaOnFault$0432;
       label = 783;
      }
      else if ((label|0) == 53) {
       label = 0;
       $336 = (($pOut$1) + 28|0);
       HEAP16[$336>>1] = 2562;
       $337 = (($pOut$1) + 4|0);
       HEAP32[$337>>2] = $338;
       $339 = (($pOut$1) + 24|0);
       HEAP32[$339>>2] = $340;
       $341 = (($pOut$1) + 30|0);
       HEAP8[$341>>0] = $8;
       $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$3;
      }
      else if ((label|0) == 578) {
       label = 0;
       $2605 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
       $2606 = HEAP32[$2605>>2]|0;
       $2607 = HEAP32[$61>>2]|0;
       $2608 = (($2607) + ($2606<<2)|0);
       $2609 = HEAP32[$2608>>2]|0;
       HEAP32[$res66>>2] = 1;
       $2610 = (($2609) + 64|0);
       $2611 = HEAP32[$2610>>2]|0;
       $2612 = ($2611|0)==(0|0);
       if ($2612) {
        $2614 = HEAP32[$2609>>2]|0;
        $2615 = (_sqlite3BtreeFirst($2614,$res66)|0);
        $2616 = (($2609) + 27|0);
        HEAP8[$2616>>0] = 0;
        $2617 = (($2609) + 68|0);
        HEAP32[$2617>>2] = 0;
        $2618 = (($2609) + 26|0);
        HEAP8[$2618>>0] = 0;
        $rc$31 = $2615;
       } else {
        $2613 = (_sqlite3VdbeSorterRewind($2,$2609,$res66)|0);
        $rc$31 = $2613;
       }
       $2619 = HEAP32[$res66>>2]|0;
       $2620 = $2619&255;
       $2621 = (($2609) + 25|0);
       HEAP8[$2621>>0] = $2620;
       $2622 = ($2619|0)==(0);
       if ($2622) {
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$0463;$rc$42 = $rc$31;
       } else {
        $2623 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2624 = HEAP32[$2623>>2]|0;
        $2625 = (($2624) + -1)|0;
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $2625;$rc$42 = $rc$31;
       }
      }
      else if ((label|0) == 585) {
       label = 0;
       $2638 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
       $2639 = HEAP32[$2638>>2]|0;
       $2640 = HEAP32[$61>>2]|0;
       $2641 = (($2640) + ($2639<<2)|0);
       $2642 = HEAP32[$2641>>2]|0;
       $2643 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 12|0);
       $2644 = HEAP32[$2643>>2]|0;
       HEAP32[$res68>>2] = $2644;
       $2645 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
       $2646 = HEAP32[$2645>>2]|0;
       $2647 = HEAP32[$2642>>2]|0;
       $2648 = (FUNCTION_TABLE_iii[$2646 & 255]($2647,$res68)|0);
       $pC67$0 = $2642;$rc$32 = $2648;
       label = 586;
      }
      if ((label|0) == 783) {
       label = 0;
       $3726 = (($pc$11$ph) + 1)|0;
       $nProgressLimit$1411$phi = $nProgressLimit$1411;$691 = $3757;$694 = $3758;$aMem$0401 = $aMem$1$ph;$aOp$0453 = $aOp$1$ph;$aPermute$0390 = $aPermute$2$ph;$iCompare$0422 = $iCompare$3$ph;$nVmStep$0421 = $128;$pOut$0400 = $pOut$6$ph;$pc$0463 = $3726;$resetSchemaOnFault$0432 = $resetSchemaOnFault$1$ph;$nProgressLimit$1411 = $nProgressLimit$1411$phi;
       continue;
      }
      if ((label|0) == 586) {
       label = 0;
       $2649 = (($pC67$0) + 68|0);
       HEAP32[$2649>>2] = 0;
       $2650 = HEAP32[$res68>>2]|0;
       $2651 = ($2650|0)==(0);
       $2652 = (($pC67$0) + 25|0);
       if ($2651) {
        HEAP8[$2652>>0] = 0;
        $2653 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
        $2654 = HEAP32[$2653>>2]|0;
        $2655 = (($2654) + -1)|0;
        $2656 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
        $2657 = HEAP8[$2656>>0]|0;
        $2658 = $2657&255;
        $2659 = ((($p) + ($2658<<2)|0) + 108|0);
        $2660 = HEAP32[$2659>>2]|0;
        $2661 = (($2660) + 1)|0;
        HEAP32[$2659>>2] = $2661;
        $pc$8 = $2655;
       } else {
        HEAP8[$2652>>0] = 1;
        $pc$8 = $pc$0463;
       }
       $2662 = (($pC67$0) + 26|0);
       HEAP8[$2662>>0] = 0;
       $pc$1 = $pc$8;$rc$1 = $rc$32;
       label = 18;
      }
      if ((label|0) == 18) {
       label = 0;
       $146 = HEAP32[$28>>2]|0;
       $147 = ($146|0)==(0);
       if (!($147)) {
        $$pre$phi700Z2D = $58;$3755 = $691;$3756 = $694;$nVmStep$4 = $128;$pc$14 = $pc$1;$resetSchemaOnFault$4 = $resetSchemaOnFault$0432;
        break L4;
       }
       $148 = HEAP32[$31>>2]|0;
       $149 = ($148|0)==(0|0);
       $150 = ($128>>>0)<($nProgressLimit$1411>>>0);
       $or$cond = $149 | $150;
       if ($or$cond) {
        $3759 = $691;$3760 = $694;$nProgressLimit$2 = $nProgressLimit$1411;$pOut$6 = $pOut$1;$pc$11 = $pc$1;$rc$42 = $rc$1;
       } else {
        $151 = HEAP32[$$pre$phi698Z2D>>2]|0;
        $152 = (($151) + ($128))|0;
        $153 = (($128>>>0) % ($151>>>0))&-1;
        $154 = (($152) - ($153))|0;
        $155 = HEAP32[$43>>2]|0;
        $156 = (FUNCTION_TABLE_ii[$148 & 255]($155)|0);
        $157 = ($156|0)==(0);
        if ($157) {
         $3759 = $691;$3760 = $694;$nProgressLimit$2 = $154;$pOut$6 = $pOut$1;$pc$11 = $pc$1;$rc$42 = $rc$1;
        } else {
         $3761 = $691;$3762 = $694;$nVmStep$1 = $128;$pc$12 = $pc$1;$rc$43 = 9;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
         break L1;
        }
       }
      }
      $3728 = (($pc$11) + 1)|0;
      $3729 = ($rc$42|0)==(0);
      if ($3729) {
       $resetSchemaOnFault$0432$phi = $resetSchemaOnFault$0432;$iCompare$0422$phi = $iCompare$0422;$aPermute$0390$phi = $aPermute$0390;$aOp$0453$phi = $aOp$0453;$aMem$0401$phi = $aMem$0401;$691 = $3759;$694 = $3760;$nProgressLimit$1411 = $nProgressLimit$2;$nVmStep$0421 = $128;$pOut$0400 = $pOut$6;$pc$0463 = $3728;$resetSchemaOnFault$0432 = $resetSchemaOnFault$0432$phi;$iCompare$0422 = $iCompare$0422$phi;$aPermute$0390 = $aPermute$0390$phi;$aOp$0453 = $aOp$0453$phi;$aMem$0401 = $aMem$0401$phi;
      } else {
       $3761 = $3759;$3762 = $3760;$nVmStep$1 = $128;$pc$12 = $3728;$rc$43 = $rc$42;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
       break L1;
      }
     }
     switch (label|0) {
      case 29: {
       HEAP32[$18>>2] = $235;
       $239 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $240&255;
       HEAP8[$97>>0] = $241;
       HEAP32[$40>>2] = $pc$0463;
       label = 40;
       break;
      }
      case 33: {
       HEAP32[$18>>2] = $235;
       $262 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
       $263 = HEAP32[$262>>2]|0;
       $264 = $263&255;
       HEAP8[$97>>0] = $264;
       HEAP32[$40>>2] = $pc$0463;
       $265 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 3|0);
       $266 = HEAP8[$265>>0]|0;
       $267 = ($266<<24>>24)==(0);
       if ($267) {
        $$phi$trans$insert = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $$pre666 = HEAP32[$$phi$trans$insert>>2]|0;
        $275 = ($$pre666|0)==(0|0);
        if ($275) {
         $zType$098717 = 0;
         label = 38;
        } else {
         HEAP32[$vararg_buffer2>>2] = $$pre666;
         _sqlite3SetString($58,$2,1712,$vararg_buffer2);
        }
       } else {
        $268 = $266&255;
        $269 = (($268) + -1)|0;
        $270 = (31256 + ($269<<2)|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 16|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ($273|0)==(0|0);
        if ($274) {
         $zType$098717 = $271;
         label = 38;
        } else {
         HEAP32[$vararg_buffer>>2] = $271;
         $vararg_ptr1 = (($vararg_buffer) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $273;
         _sqlite3SetString($58,$2,31344,$vararg_buffer);
        }
       }
       if ((label|0) == 38) {
        HEAP32[$vararg_buffer5>>2] = $zType$098717;
        _sqlite3SetString($58,$2,31376,$vararg_buffer5);
       }
       $276 = HEAP32[$234>>2]|0;
       $277 = HEAP32[$124>>2]|0;
       $278 = HEAP32[$58>>2]|0;
       HEAP32[$vararg_buffer8>>2] = $pc$0463;
       $vararg_ptr11 = (($vararg_buffer8) + 4|0);
       HEAP32[$vararg_ptr11>>2] = $277;
       $vararg_ptr12 = (($vararg_buffer8) + 8|0);
       HEAP32[$vararg_ptr12>>2] = $278;
       _sqlite3_log($276,31320,$vararg_buffer8);
       label = 40;
       break;
      }
      case 72: {
       $427 = HEAP32[$31>>2]|0;
       $428 = ($427|0)==(0|0);
       $429 = ($128>>>0)<($nProgressLimit$1411>>>0);
       $or$cond36 = $428 | $429;
       if (!($or$cond36)) {
        $430 = HEAP32[$43>>2]|0;
        $431 = (FUNCTION_TABLE_ii[$427 & 255]($430)|0);
        $432 = ($431|0)==(0);
        if (!($432)) {
         $3761 = $691;$3762 = $694;$nVmStep$1 = $128;$pc$12 = $pc$0463;$rc$43 = 9;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
         break L1;
        }
       }
       $433 = (_sqlite3VdbeCheckFk($p,0)|0);
       $434 = ($433|0)==(0);
       if ($434) {
        $435 = (_sqlite3VdbeCloseStatement($p,1)|0);
        $436 = ($435|0)==(0);
        if ($436) {
         $437 = HEAP32[$62>>2]|0;
         $438 = (($437) + 2)|0;
         $439 = $438 | 1;
         HEAP32[$62>>2] = $439;
         $440 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
         $441 = HEAP32[$440>>2]|0;
         $442 = (($aMem$0401) + (($441*40)|0)|0);
         HEAP32[$26>>2] = $442;
         $443 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = ($444|0)>(0);
         if ($445) {
          $i$0134 = 0;
          while(1) {
           $$sum35 = (($i$0134) + ($441))|0;
           $446 = (($aMem$0401) + (($$sum35*40)|0)|0);
           $447 = ((($aMem$0401) + (($$sum35*40)|0)|0) + 28|0);
           $448 = HEAP16[$447>>1]|0;
           $449 = $448 & 4096;
           $450 = ($449<<16>>16)==(0);
           if (!($450)) {
            $451 = (_sqlite3VdbeMemMakeWriteable($446)|0);
            $452 = ($451|0)==(0);
            if (!($452)) {
             $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
             label = 792;
             break L1;
            }
           }
           _sqlite3VdbeMemNulTerminate($446);
           $453 = (($i$0134) + 1)|0;
           $454 = HEAP32[$443>>2]|0;
           $455 = ($453|0)<($454|0);
           if ($455) {
            $i$0134 = $453;
           } else {
            break;
           }
          }
         }
         $456 = HEAP8[$42>>0]|0;
         $457 = ($456<<24>>24)==(0);
         if (!($457)) {
          $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
          label = 792;
          break L1;
         }
         $458 = (($pc$0463) + 1)|0;
         HEAP32[$40>>2] = $458;
         $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = 100;
         $3739 = $11;
         $3740 = $3739;
         HEAP32[$3740>>2] = $3741;
         $3742 = (($3739) + 4)|0;
         $3743 = $3742;
         HEAP32[$3743>>2] = $3744;
         $3745 = (($p) + 124|0);
         $3746 = HEAP32[$3745>>2]|0;
         $3747 = (($3746) + ($nVmStep$2))|0;
         HEAP32[$3745>>2] = $3747;
         STACKTOP = sp;return ($rc$44|0);
        } else {
         $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $435;
         label = 784;
        }
       } else {
        $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $433;
        label = 784;
       }
       break;
      }
      case 140: {
       _sqlite3VdbeMemRelease($54);
       $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $699;$3754 = $702;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
       label = 792;
       break L1;
       break;
      }
      case 270: {
       _sqlite3CorruptError(69472);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 11;
       label = 784;
       break;
      }
      case 289: {
       _sqlite3CorruptError(69538);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 11;
       label = 784;
       break;
      }
      case 340: {
       _sqlite3SetString($58,$2,31432,$vararg_buffer16);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 5;
       label = 784;
       break;
      }
      case 350: {
       HEAP32[$vararg_buffer18>>2] = $1507;
       _sqlite3SetString($58,$2,31488,$vararg_buffer18);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 1;
       label = 784;
       break;
      }
      case 352: {
       _sqlite3SetString($58,$2,31512,$vararg_buffer21);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 5;
       label = 784;
       break;
      }
      case 357: {
       HEAP32[$40>>2] = $pc$0463;
       HEAP8[$70>>0] = 0;
       HEAP32[$18>>2] = 5;
       $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = 5;
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
       break;
      }
      case 375: {
       $1633 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 4|0);
       $1634 = HEAP32[$1633>>2]|0;
       $1635 = ((($aOp$0453) + (($pc$0463*20)|0)|0) + 8|0);
       $1636 = HEAP32[$1635>>2]|0;
       $1637 = ($1634|0)!=(0);
       if ($1637) {
        $1638 = HEAP8[$70>>0]|0;
        $1639 = ($1638<<24>>24)==(0);
        $1640 = ($1636|0)==(0);
        $or$cond52 = $1639 & $1640;
        if ($or$cond52) {
         $1641 = HEAP32[$67>>2]|0;
         $1642 = ($1641|0)>(0);
         if ($1642) {
          _sqlite3SetString($58,$2,31568,$vararg_buffer23);
          $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 5;
          label = 784;
          break;
         }
        }
       }
       $1643 = HEAP8[$70>>0]|0;
       $1644 = $1643&255;
       $1645 = ($1634|0)==($1644|0);
       if ($1645) {
        if ($1637) {
         $1656 = ($1636|0)!=(0);
         $1657 = $1656 ? 31672 : 31720;
         $1658 = $1657;
        } else {
         $1658 = 31624;
        }
        _sqlite3SetString($58,$2,$1658,$vararg_buffer25);
        $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 1;
        label = 784;
        break;
       }
       $1646 = ($1636|0)==(0);
       if ($1646) {
        $1647 = (_sqlite3VdbeCheckFk($p,1)|0);
        $1648 = ($1647|0)==(0);
        if (!($1648)) {
         $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = $1647;
         $3739 = $11;
         $3740 = $3739;
         HEAP32[$3740>>2] = $3741;
         $3742 = (($3739) + 4)|0;
         $3743 = $3742;
         HEAP32[$3743>>2] = $3744;
         $3745 = (($p) + 124|0);
         $3746 = HEAP32[$3745>>2]|0;
         $3747 = (($3746) + ($nVmStep$2))|0;
         HEAP32[$3745>>2] = $3747;
         STACKTOP = sp;return ($rc$44|0);
        }
        $1649 = $1634&255;
        HEAP8[$70>>0] = $1649;
        $1650 = (_sqlite3VdbeHalt($p)|0);
        $1651 = ($1650|0)==(5);
        if ($1651) {
         HEAP32[$40>>2] = $pc$0463;
         $1652 = (1 - ($1634))|0;
         $1653 = $1652&255;
         HEAP8[$70>>0] = $1653;
         HEAP32[$18>>2] = 5;
         $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = 5;
         $3739 = $11;
         $3740 = $3739;
         HEAP32[$3740>>2] = $3741;
         $3742 = (($3739) + 4)|0;
         $3743 = $3742;
         HEAP32[$3743>>2] = $3744;
         $3745 = (($p) + 124|0);
         $3746 = HEAP32[$3745>>2]|0;
         $3747 = (($3746) + ($nVmStep$2))|0;
         HEAP32[$3745>>2] = $3747;
         STACKTOP = sp;return ($rc$44|0);
        }
       } else {
        _sqlite3RollbackAll($2,516);
        HEAP8[$70>>0] = 1;
       }
       _sqlite3CloseSavepoints($2);
       $1654 = HEAP32[$18>>2]|0;
       $1655 = ($1654|0)==(0);
       $$53 = $1655 ? 101 : 1;
       $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = $$53;
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
       break;
      }
      case 393: {
       HEAP32[$40>>2] = $pc$0463;
       HEAP32[$18>>2] = 5;
       $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = 5;
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
       break;
      }
      case 408: {
       $1729 = HEAP32[$58>>2]|0;
       _sqlite3DbFree($2,$1729);
       $1730 = (_sqlite3DbStrDup($2,5864)|0);
       HEAP32[$58>>2] = $1730;
       $1731 = HEAP32[$1665>>2]|0;
       $1732 = HEAP32[$3>>2]|0;
       $1733 = ((($1732) + ($1731<<4)|0) + 12|0);
       $1734 = HEAP32[$1733>>2]|0;
       $1735 = HEAP32[$1734>>2]|0;
       $1736 = ($1735|0)==($1722|0);
       if (!($1736)) {
        _sqlite3ResetOneSchema($2,$1731);
       }
       $1737 = HEAP16[$77>>1]|0;
       $1738 = $1737 | 32;
       HEAP16[$77>>1] = $1738;
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 17;
       label = 784;
       break;
      }
      case 423: {
       _sqlite3CorruptError(70349);
       $rc$45 = 11;
       label = 793;
       break;
      }
      case 615: {
       HEAP8[$97>>0] = 2;
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 6;
       label = 784;
       break;
      }
      case 624: {
       _sqlite3ResetAllSchemasOfConnection($2);
       $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
       label = 792;
       break L1;
       break;
      }
      case 626: {
       _sqlite3ResetAllSchemasOfConnection($2);
       $2881 = ($$68|0)==(7);
       if ($2881) {
        $$pre$phi694Z2D = $42;$$pre$phi696Z2D = $58;$3753 = $691;$3754 = $694;$nVmStep$3 = $128;$pc$13 = $pc$0463;$resetSchemaOnFault$3 = $resetSchemaOnFault$0432;
        label = 792;
        break L1;
       } else {
        $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = $$68;
        label = 784;
       }
       break;
      }
      case 660: {
       _sqlite3SetString($58,$2,31832,$vararg_buffer32);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 1;
       label = 784;
       break;
      }
      case 718: {
       $3416 = $3404 ? 31928 : 31936;
       HEAP32[$vararg_buffer40>>2] = $3416;
       _sqlite3SetString($58,$2,31872,$vararg_buffer40);
       $3766 = $691;$3767 = $694;$pc$11$ph721 = $pc$0463;$rc$42$ph = 1;
       label = 784;
       break;
      }
      case 790: {
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
       break;
      }
      case 791: {
       _sqlite3SetString($58,$2,1688,$vararg_buffer51);
       $3761 = $3764;$3762 = $3765;$nVmStep$1 = $128;$pc$12 = $pc$0463;$rc$43 = 18;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
       break L1;
       break;
      }
     }
     if ((label|0) == 40) {
      $279 = (_sqlite3VdbeHalt($p)|0);
      $280 = ($279|0)==(5);
      if ($280) {
       HEAP32[$18>>2] = 5;
       $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = 5;
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
      } else {
       $281 = HEAP32[$18>>2]|0;
       $282 = ($281|0)!=(0);
       $283 = $282 ? 1 : 101;
       $3741 = $691;$3744 = $694;$nVmStep$2 = $128;$rc$44 = $283;
       $3739 = $11;
       $3740 = $3739;
       HEAP32[$3740>>2] = $3741;
       $3742 = (($3739) + 4)|0;
       $3743 = $3742;
       HEAP32[$3743>>2] = $3744;
       $3745 = (($p) + 124|0);
       $3746 = HEAP32[$3745>>2]|0;
       $3747 = (($3746) + ($nVmStep$2))|0;
       HEAP32[$3745>>2] = $3747;
       STACKTOP = sp;return ($rc$44|0);
      }
     }
     else if ((label|0) == 784) {
      $3727 = (($pc$11$ph721) + 1)|0;
      $3761 = $3766;$3762 = $3767;$nVmStep$1 = $128;$pc$12 = $3727;$rc$43 = $rc$42$ph;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
      break L1;
     }
     else if ((label|0) == 793) {
      $3748 = HEAP8[$42>>0]|0;
      $3749 = ($3748<<24>>24)==(0);
      $rc$45$ = $3749 ? $rc$45 : 7;
      $3750 = ($rc$45$|0)==(3082);
      if ($3750) {
       $3761 = $691;$3762 = $694;$nVmStep$1 = $128;$pc$12 = $pc$0463;$rc$43 = 3082;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
       break L1;
      }
      $3751 = (_sqlite3ErrStr($rc$45$)|0);
      HEAP32[$vararg_buffer55>>2] = $3751;
      _sqlite3SetString($58,$2,1712,$vararg_buffer55);
      $3761 = $691;$3762 = $694;$nVmStep$1 = $128;$pc$12 = $pc$0463;$rc$43 = $rc$45$;$resetSchemaOnFault$2 = $resetSchemaOnFault$0432;
      break L1;
     }
    } else {
     $$pre699 = (($p) + 44|0);
     $$pre$phi700Z2D = $$pre699;$3755 = $14;$3756 = $17;$nVmStep$4 = 0;$pc$14 = 0;$resetSchemaOnFault$4 = 0;
    }
   } while(0);
   HEAP32[$18>>2] = 9;
   $3752 = (_sqlite3ErrStr(9)|0);
   HEAP32[$vararg_buffer58>>2] = $3752;
   _sqlite3SetString($$pre$phi700Z2D,$2,1712,$vararg_buffer58);
   $3761 = $3755;$3762 = $3756;$nVmStep$1 = $nVmStep$4;$pc$12 = $pc$14;$rc$43 = 9;$resetSchemaOnFault$2 = $resetSchemaOnFault$4;
  }
 } while(0);
 if ((label|0) == 792) {
  HEAP8[$$pre$phi694Z2D>>0] = 1;
  _sqlite3SetString($$pre$phi696Z2D,$2,5600,$vararg_buffer53);
  $3761 = $3753;$3762 = $3754;$nVmStep$1 = $nVmStep$3;$pc$12 = $pc$13;$rc$43 = 7;$resetSchemaOnFault$2 = $resetSchemaOnFault$3;
 }
 HEAP32[$18>>2] = $rc$43;
 $3730 = (($p) + 168|0);
 $3731 = HEAP32[$3730>>2]|0;
 $3732 = (($p) + 44|0);
 $3733 = HEAP32[$3732>>2]|0;
 HEAP32[$vararg_buffer46>>2] = $pc$12;
 $vararg_ptr49 = (($vararg_buffer46) + 4|0);
 HEAP32[$vararg_ptr49>>2] = $3731;
 $vararg_ptr50 = (($vararg_buffer46) + 8|0);
 HEAP32[$vararg_ptr50>>2] = $3733;
 _sqlite3_log($rc$43,31976,$vararg_buffer46);
 (_sqlite3VdbeHalt($p)|0);
 $3734 = ($rc$43|0)==(3082);
 if ($3734) {
  $3735 = (($2) + 64|0);
  HEAP8[$3735>>0] = 1;
 }
 $3736 = ($resetSchemaOnFault$2<<24>>24)==(0);
 if ($3736) {
  $3741 = $3761;$3744 = $3762;$nVmStep$2 = $nVmStep$1;$rc$44 = 1;
  $3739 = $11;
  $3740 = $3739;
  HEAP32[$3740>>2] = $3741;
  $3742 = (($3739) + 4)|0;
  $3743 = $3742;
  HEAP32[$3743>>2] = $3744;
  $3745 = (($p) + 124|0);
  $3746 = HEAP32[$3745>>2]|0;
  $3747 = (($3746) + ($nVmStep$2))|0;
  HEAP32[$3745>>2] = $3747;
  STACKTOP = sp;return ($rc$44|0);
 }
 $3737 = $resetSchemaOnFault$2&255;
 $3738 = (($3737) + -1)|0;
 _sqlite3ResetOneSchema($2,$3738);
 $3741 = $3761;$3744 = $3762;$nVmStep$2 = $nVmStep$1;$rc$44 = 1;
 $3739 = $11;
 $3740 = $3739;
 HEAP32[$3740>>2] = $3741;
 $3742 = (($3739) + 4)|0;
 $3743 = $3742;
 HEAP32[$3743>>2] = $3744;
 $3745 = (($p) + 124|0);
 $3746 = HEAP32[$3745>>2]|0;
 $3747 = (($3746) + ($nVmStep$2))|0;
 HEAP32[$3745>>2] = $3747;
 STACKTOP = sp;return ($rc$44|0);
}
function _doWalCallbacks($db) {
 $db = $db|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $or$cond = 0, $or$cond1 = 0, $rc$0$lcssa = 0, $rc$04 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $rc$0$lcssa = 0;
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 $3 = (($db) + 16|0);
 $4 = (($db) + 204|0);
 $5 = (($db) + 208|0);
 $i$03 = 0;$rc$04 = 0;
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6) + ($i$03<<4)|0) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $rc$1 = $rc$04;
  } else {
   $$idx = (($8) + 4|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
   $10 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
   $$idx2 = (($10) + 208|0);
   $$idx2$val = HEAP32[$$idx2>>2]|0;
   $11 = (_sqlite3PagerWalCallback($$idx2$val)|0);
   $12 = HEAP32[$4>>2]|0;
   $13 = ($12|0)!=(0|0);
   $14 = ($11|0)>(0);
   $or$cond = $13 & $14;
   $15 = ($rc$04|0)==(0);
   $or$cond1 = $or$cond & $15;
   if ($or$cond1) {
    $16 = HEAP32[$5>>2]|0;
    $17 = HEAP32[$3>>2]|0;
    $18 = (($17) + ($i$03<<4)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiii[$12 & 255]($16,$db,$19,$11)|0);
    $rc$1 = $20;
   } else {
    $rc$1 = $rc$04;
   }
  }
  $21 = (($i$03) + 1)|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $i$03 = $21;$rc$04 = $rc$1;
  } else {
   $rc$0$lcssa = $rc$1;
   break;
  }
 }
 STACKTOP = sp;return ($rc$0$lcssa|0);
}
function _sqlite3VdbeTransferError($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($p) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _sqlite3Error($0,$2,0,$vararg_buffer);
  STACKTOP = sp;return ($2|0);
 }
 $6 = (($0) + 64|0);
 $7 = HEAP8[$6>>0]|0;
 _sqlite3BeginBenignMalloc();
 $8 = (($0) + 224|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_sqlite3ValueNew($0)|0);
  HEAP32[$8>>2] = $11;
  $13 = $11;
 } else {
  $13 = $9;
 }
 $12 = HEAP32[$3>>2]|0;
 _sqlite3ValueSetStr($13,$12,1,(-1));
 _sqlite3EndBenignMalloc();
 HEAP8[$6>>0] = $7;
 $14 = (($0) + 52|0);
 HEAP32[$14>>2] = $2;
 STACKTOP = sp;return ($2|0);
}
function _sqlite3PagerWalCallback($pPager$0$55$val) {
 $pPager$0$55$val = $pPager$0$55$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3WalCallback($pPager$0$55$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3WalCallback($pWal) {
 $pWal = $pWal|0;
 var $0 = 0, $1 = 0, $2 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWal|0)==(0|0);
 if ($0) {
  $ret$0 = 0;
 } else {
  $1 = (($pWal) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  $ret$0 = $2;
 }
 STACKTOP = sp;return ($ret$0|0);
}
function _sqlite3VdbeSetChanges($db,$nChange) {
 $db = $db|0;
 $nChange = $nChange|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 80|0);
 HEAP32[$0>>2] = $nChange;
 $1 = (($db) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($nChange))|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function _sqlite3VdbeFrameRestore($pFrame) {
 $pFrame = $pFrame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pFrame>>2]|0;
 $1 = (($pFrame) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 200|0);
 HEAP32[$3>>2] = $2;
 $4 = (($pFrame) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($0) + 196|0);
 HEAP32[$6>>2] = $5;
 $7 = (($pFrame) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = (($pFrame) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($0) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = (($pFrame) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($0) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($pFrame) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($0) + 28|0);
 HEAP32[$18>>2] = $17;
 $19 = (($pFrame) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($0) + 56|0);
 HEAP32[$21>>2] = $20;
 $22 = (($pFrame) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($0) + 36|0);
 HEAP32[$24>>2] = $23;
 $25 = (($pFrame) + 32|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 32|0);
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $28;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $31;
 $38 = (($pFrame) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($0) + 92|0);
 HEAP32[$40>>2] = $39;
 $41 = (($pFrame) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 STACKTOP = sp;return ($42|0);
}
function _sqlite3VdbeHalt($p) {
 $p = $p|0;
 var $$0 = 0, $$clear = 0, $$lobit = 0, $$not = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr14$pre = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre18 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $brmerge = 0, $eStatementOp$0 = 0, $eStatementOp$111 = 0, $eStatementOp$112 = 0, $or$cond = 0, $or$cond7 = 0, $phitmp = 0, $phitmp20 = 0, $rc$09 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 64|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($p) + 80|0);
  HEAP32[$4>>2] = 7;
 }
 $5 = (($p) + 200|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (($p) + 196|0);
  $9 = HEAP32[$8>>2]|0;
  _memset(($6|0),0,($9|0))|0;
 }
 _closeAllCursors($p);
 $10 = (($p) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(-1108210269);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($p) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(-1);
 if ($15) {
  $16 = (($p) + 88|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 & 512;
  $19 = ($18<<16>>16)==(0);
  if (!($19)) {
   $20 = (($p) + 80|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 255;
   $switch$tableidx = (($22) + -7)|0;
   $23 = ($switch$tableidx>>>0)<(7);
   do {
    if ($23) {
     $switch$cast = $switch$tableidx&255;
     $switch$cast$clear = $switch$cast & 127;
     $switch$downshift = (77&255) >>> $switch$cast$clear;
     $24 = $switch$downshift & 1;
     $$clear = $24 & 127;
     $switch$masked = ($$clear<<24>>24)!=(0);
     if ($switch$masked) {
      $25 = $17 & 256;
      $26 = ($25<<16>>16)!=(0);
      $27 = ($22|0)==(9);
      $or$cond = $26 & $27;
      if ($or$cond) {
       $32 = $21;$53 = 1;$eStatementOp$0 = 0;
      } else {
       if ((($22|0) == 7) | (($22|0) == 13)) {
        $28 = $17 & 128;
        $29 = ($28<<16>>16)==(0);
        if (!($29)) {
         $32 = $21;$53 = $switch$masked;$eStatementOp$0 = 2;
         break;
        }
       }
       _sqlite3RollbackAll($0,516);
       _sqlite3CloseSavepoints($0);
       $30 = (($0) + 62|0);
       HEAP8[$30>>0] = 1;
       $$pr14$pre = HEAP32[$20>>2]|0;
       $32 = $$pr14$pre;$53 = $switch$masked;$eStatementOp$0 = 0;
      }
     } else {
      $32 = $21;$53 = 0;$eStatementOp$0 = 0;
     }
    } else {
     $32 = $21;$53 = 0;$eStatementOp$0 = 0;
    }
   } while(0);
   $31 = ($32|0)==(0);
   if ($31) {
    (_sqlite3VdbeCheckFk($p,0)|0);
   }
   $33 = (($0) + 296|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)>(0);
   if ($35) {
    $36 = (($0) + 320|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if ($38) {
     label = 30;
    } else {
     label = 18;
    }
   } else {
    label = 18;
   }
   if ((label|0) == 18) {
    $39 = (($0) + 62|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     label = 30;
    } else {
     $42 = (($0) + 148|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = HEAP16[$16>>1]|0;
     $45 = ($44&65535) >>> 8;
     $$lobit = $45 & 1;
     $46 = $$lobit ^ 1;
     $47 = $46&65535;
     $48 = ($43|0)==($47|0);
     if ($48) {
      $49 = HEAP32[$20>>2]|0;
      $50 = ($49|0)==(0);
      if ($50) {
       label = 22;
      } else {
       $51 = (($p) + 86|0);
       $52 = HEAP8[$51>>0]|0;
       $$not = ($52<<24>>24)!=(3);
       $brmerge = $$not | $53;
       if ($brmerge) {
        _sqlite3RollbackAll($0,0);
       } else {
        label = 22;
       }
      }
      L34: do {
       if ((label|0) == 22) {
        $54 = (_sqlite3VdbeCheckFk($p,1)|0);
        $55 = ($54|0)==(0);
        do {
         if ($55) {
          $59 = (_vdbeCommit($0,$p)|0);
          if ((($59|0) == 0)) {
           $63 = (($0) + 496|0);
           $64 = (($0) + 24|0);
           ;HEAP32[$63+0>>2]=0|0;HEAP32[$63+4>>2]=0|0;HEAP32[$63+8>>2]=0|0;HEAP32[$63+12>>2]=0|0;
           $65 = HEAP32[$64>>2]|0;
           $66 = $65 & -16777217;
           HEAP32[$64>>2] = $66;
           _sqlite3CommitInternalChanges($0);
           break L34;
          } else if (!((($59|0) == 5))) {
           $rc$09 = $59;
           break;
          }
          $60 = HEAP16[$16>>1]|0;
          $61 = $60 & 256;
          $62 = ($61<<16>>16)==(0);
          if ($62) {
           $rc$09 = 5;
          } else {
           $$0 = 5;
           STACKTOP = sp;return ($$0|0);
          }
         } else {
          $56 = HEAP16[$16>>1]|0;
          $57 = $56 & 256;
          $58 = ($57<<16>>16)==(0);
          if ($58) {
           $rc$09 = 787;
          } else {
           $$0 = 1;
           STACKTOP = sp;return ($$0|0);
          }
         }
        } while(0);
        HEAP32[$20>>2] = $rc$09;
        _sqlite3RollbackAll($0,0);
       }
      } while(0);
      $67 = (($0) + 492|0);
      HEAP32[$67>>2] = 0;
      label = 35;
     } else {
      label = 30;
     }
    }
   }
   do {
    if ((label|0) == 30) {
     $68 = ($eStatementOp$0|0)==(0);
     if ($68) {
      $69 = HEAP32[$20>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       $eStatementOp$111 = 1;
       label = 36;
      } else {
       $71 = (($p) + 86|0);
       $72 = HEAP8[$71>>0]|0;
       if ((($72<<24>>24) == 2)) {
        $eStatementOp$111 = 2;
        label = 36;
        break;
       } else if ((($72<<24>>24) == 3)) {
        $eStatementOp$111 = 1;
        label = 36;
        break;
       } else {
        _sqlite3RollbackAll($0,516);
        _sqlite3CloseSavepoints($0);
        $73 = (($0) + 62|0);
        HEAP8[$73>>0] = 1;
        label = 35;
        break;
       }
      }
     } else {
      $eStatementOp$111 = $eStatementOp$0;
      label = 36;
     }
    }
   } while(0);
   if ((label|0) == 35) {
    $74 = ($eStatementOp$0|0)==(0);
    if ($74) {
     $eStatementOp$112 = 0;
    } else {
     $eStatementOp$111 = $eStatementOp$0;
     label = 36;
    }
   }
   if ((label|0) == 36) {
    $75 = (_sqlite3VdbeCloseStatement($p,$eStatementOp$111)|0);
    $76 = ($75|0)==(0);
    if ($76) {
     $eStatementOp$112 = $eStatementOp$111;
    } else {
     $77 = HEAP32[$20>>2]|0;
     $78 = ($77|0)==(0);
     $79 = $77 & 255;
     $80 = ($79|0)==(19);
     $or$cond7 = $78 | $80;
     if ($or$cond7) {
      HEAP32[$20>>2] = $75;
      $81 = (($p) + 44|0);
      $82 = HEAP32[$81>>2]|0;
      _sqlite3DbFree($0,$82);
      HEAP32[$81>>2] = 0;
     }
     _sqlite3RollbackAll($0,516);
     _sqlite3CloseSavepoints($0);
     $83 = (($0) + 62|0);
     HEAP8[$83>>0] = 1;
     $eStatementOp$112 = $eStatementOp$111;
    }
   }
   $84 = HEAP16[$16>>1]|0;
   $85 = $84 & 16;
   $86 = ($85<<16>>16)==(0);
   if (!($86)) {
    $87 = ($eStatementOp$112|0)==(2);
    if ($87) {
     _sqlite3VdbeSetChanges($0,0);
     $$pre19 = (($p) + 92|0);
     $$pre$phiZ2D = $$pre19;
    } else {
     $88 = (($p) + 92|0);
     $89 = HEAP32[$88>>2]|0;
     _sqlite3VdbeSetChanges($0,$89);
     $$pre$phiZ2D = $88;
    }
    HEAP32[$$pre$phiZ2D>>2] = 0;
   }
  }
  $$pr = HEAP32[$13>>2]|0;
  $90 = ($$pr|0)>(-1);
  if ($90) {
   $91 = (($0) + 140|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + -1)|0;
   HEAP32[$91>>2] = $93;
   $94 = HEAP16[$16>>1]|0;
   $95 = $94 & 256;
   $96 = ($95<<16>>16)==(0);
   if ($96) {
    $97 = (($0) + 148|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + -1)|0;
    HEAP32[$97>>2] = $99;
    $$pre = HEAP16[$16>>1]|0;
    $101 = $$pre;
   } else {
    $101 = $94;
   }
   $100 = $101 & 512;
   $102 = ($100<<16>>16)==(0);
   if (!($102)) {
    $103 = (($0) + 144|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + -1)|0;
    HEAP32[$103>>2] = $105;
   }
  }
 }
 HEAP32[$10>>2] = 1369188723;
 $106 = HEAP32[$p>>2]|0;
 $107 = (($106) + 64|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = ($108<<24>>24)==(0);
 $$phi$trans$insert = (($p) + 80|0);
 if ($109) {
  $$pre18 = HEAP32[$$phi$trans$insert>>2]|0;
  $phitmp = ($$pre18|0)==(5);
  $phitmp20 = $phitmp ? 5 : 0;
  $$0 = $phitmp20;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$$phi$trans$insert>>2] = 7;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3VdbeMemTooBig($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 18;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($p) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 & 16384;
 $8 = ($7|0)==(0);
 if ($8) {
  $n$0 = $6;
 } else {
  $9 = (($p) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($6))|0;
  $n$0 = $11;
 }
 $12 = HEAP32[$p>>2]|0;
 $13 = (($12) + 88|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($n$0|0)>($14|0);
 $16 = $15&1;
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeCheckFk($p,$deferred) {
 $p = $p|0;
 $deferred = $deferred|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$p>>2]|0;
 $1 = ($deferred|0)==(0);
 if ($1) {
  $23 = (($p) + 144|0);
  $24 = $23;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)>(0);
  $31 = ($29|0)==(0);
  $32 = ($26>>>0)>(0);
  $33 = $31 & $32;
  $34 = $30 | $33;
  if (!($34)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $2 = (($0) + 496|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($0) + 504|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_i64Add(($12|0),($15|0),($5|0),($8|0))|0);
  $17 = tempRet0;
  $18 = ($17|0)>(0);
  $19 = ($17|0)==(0);
  $20 = ($16>>>0)>(0);
  $21 = $19 & $20;
  $22 = $18 | $21;
  if (!($22)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $35 = (($p) + 80|0);
 HEAP32[$35>>2] = 787;
 $36 = (($p) + 86|0);
 HEAP8[$36>>0] = 2;
 $37 = (($p) + 44|0);
 _sqlite3SetString($37,$0,24416,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeCloseStatement($p,$eOp) {
 $p = $p|0;
 $eOp = $eOp|0;
 var $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0;
 var $rc$05 = 0, $rc$1 = 0, $rc$3 = 0, $rc$33 = 0, $rc$4 = 0, $rc2$1 = 0, $rc2$1$rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 492|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $rc$4 = 0;
  STACKTOP = sp;return ($rc$4|0);
 }
 $4 = (($p) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $rc$4 = 0;
  STACKTOP = sp;return ($rc$4|0);
 }
 $7 = (($5) + -1)|0;
 $8 = (($0) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $12 = (($0) + 16|0);
  $13 = ($eOp|0)==(2);
  $56 = $9;$i$04 = 0;$rc$05 = 0;
  while(1) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14) + ($i$04<<4)|0) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $24 = $56;$rc$1 = $rc$05;
   } else {
    if ($13) {
     $18 = (_sqlite3BtreeSavepoint($16,2,$7)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      label = 9;
     } else {
      $rc2$1 = $18;
     }
    } else {
     label = 9;
    }
    if ((label|0) == 9) {
     label = 0;
     $20 = (_sqlite3BtreeSavepoint($16,1,$7)|0);
     $rc2$1 = $20;
    }
    $21 = ($rc$05|0)==(0);
    $rc2$1$rc$0 = $21 ? $rc2$1 : $rc$05;
    $$pre6 = HEAP32[$8>>2]|0;
    $24 = $$pre6;$rc$1 = $rc2$1$rc$0;
   }
   $22 = (($i$04) + 1)|0;
   $23 = ($22|0)<($24|0);
   if ($23) {
    $56 = $24;$i$04 = $22;$rc$05 = $rc$1;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$1>>2]|0;
  $25 = (($$pre) + -1)|0;
  HEAP32[$1>>2] = $25;
  HEAP32[$4>>2] = 0;
  $26 = ($rc$1|0)==(0);
  if ($26) {
   label = 13;
  } else {
   $rc$3 = $rc$1;
   label = 16;
  }
 } else {
  $11 = (($2) + -1)|0;
  HEAP32[$1>>2] = $11;
  HEAP32[$4>>2] = 0;
  label = 13;
 }
 do {
  if ((label|0) == 13) {
   $27 = ($eOp|0)==(2);
   if ($27) {
    $28 = (_sqlite3VtabSavepoint($0,2,$7)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     $rc$33 = $28;
     break;
    }
   }
   $30 = (_sqlite3VtabSavepoint($0,1,$7)|0);
   $rc$3 = $30;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ($eOp|0)==(2);
  if ($31) {
   $rc$33 = $rc$3;
  } else {
   $rc$4 = $rc$3;
   STACKTOP = sp;return ($rc$4|0);
  }
 }
 $32 = (($p) + 152|0);
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($0) + 496|0);
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = $35;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $38;
 $44 = (($p) + 160|0);
 $45 = $44;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($0) + 504|0);
 $52 = $51;
 $53 = $52;
 HEAP32[$53>>2] = $47;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $50;
 $rc$4 = $rc$33;
 STACKTOP = sp;return ($rc$4|0);
}
function _sqlite3VdbeMemNulTerminate($pMem) {
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 514;
 $3 = ($2<<16>>16)==(2);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($pMem) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 2)|0;
 $7 = (_sqlite3VdbeMemGrow($pMem,$6,1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = (($pMem) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9)|0);
 HEAP8[$12>>0] = 0;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[$10>>2]|0;
 $16 = (($15) + ($14)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP16[$0>>1]|0;
 $18 = $17&65535;
 $19 = $18 | 512;
 $20 = $19&65535;
 HEAP16[$0>>1] = $20;
 STACKTOP = sp;return;
}
function _sqlite3SubInt64($pA,$0,$1) {
 $pA = $pA|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(-2147483648);
 $4 = $2 & $3;
 if (!($4)) {
  $21 = (_i64Subtract(0,0,($0|0),($1|0))|0);
  $22 = tempRet0;
  $23 = (_sqlite3AddInt64($pA,$21,$22)|0);
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $pA;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(-1);
 $12 = ($10|0)==(-1);
 $13 = ($7>>>0)>(4294967295);
 $14 = $12 & $13;
 $15 = $11 | $14;
 if ($15) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = $10 ^ -2147483648;
 $17 = $pA;
 $18 = $17;
 HEAP32[$18>>2] = $7;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3MulInt64($pA,$0,$1) {
 $pA = $pA|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 $2 = $pA;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (___divdi3(($4|0),($7|0),0,1)|0);
 $9 = tempRet0;
 $10 = (___remdi3(($4|0),($7|0),0,1)|0);
 $11 = tempRet0;
 $12 = (___divdi3(($0|0),($1|0),0,1)|0);
 $13 = tempRet0;
 $14 = (___remdi3(($0|0),($1|0),0,1)|0);
 $15 = tempRet0;
 $16 = (_i64Add(($4|0),($7|0),-1,0)|0);
 $17 = tempRet0;
 $18 = ($17>>>0)<(1);
 $19 = ($17|0)==(1);
 $20 = ($16>>>0)<(4294967295);
 $21 = $19 & $20;
 $22 = $18 | $21;
 $23 = (_i64Add(($0|0),($1|0),-1,0)|0);
 $24 = tempRet0;
 $25 = ($24>>>0)<(1);
 $26 = ($24|0)==(1);
 $27 = ($23>>>0)<(4294967295);
 $28 = $26 & $27;
 $29 = $25 | $28;
 do {
  if ($22) {
   if (!($29)) {
    $36 = (___muldi3(($12|0),($13|0),($10|0),($11|0))|0);
    $37 = tempRet0;
    $42 = $36;$45 = $37;
    break;
   }
   $30 = (___muldi3(($4|0),($7|0),($0|0),($1|0))|0);
   $31 = tempRet0;
   $32 = $pA;
   $33 = $32;
   HEAP32[$33>>2] = $30;
   $34 = (($32) + 4)|0;
   $35 = $34;
   HEAP32[$35>>2] = $31;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   if ($29) {
    $38 = (___muldi3(($14|0),($15|0),($8|0),($9|0))|0);
    $39 = tempRet0;
    $42 = $38;$45 = $39;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $40 = $r;
 $41 = $40;
 HEAP32[$41>>2] = $42;
 $43 = (($40) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $45;
 $46 = (_i64Add(($42|0),($45|0),-2147483648,0)|0);
 $47 = tempRet0;
 $48 = ($47>>>0)>(0);
 $49 = ($47|0)==(0);
 $50 = ($46>>>0)>(4294967295);
 $51 = $49 & $50;
 $52 = $48 | $51;
 if ($52) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = $r;
 $54 = $53;
 HEAP32[$54>>2] = 0;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $42;
 $57 = (___muldi3(($14|0),($15|0),($10|0),($11|0))|0);
 $58 = tempRet0;
 $59 = (_sqlite3AddInt64($r,$57,$58)|0);
 $60 = ($59|0)==(0);
 if (!($60)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = $r;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $pA;
 $68 = $67;
 HEAP32[$68>>2] = $63;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeDeleteAuxData($pVdbe,$iOp,$mask) {
 $pVdbe = $pVdbe|0;
 $iOp = $iOp|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0$ph2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVdbe) + 204|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($iOp|0)<(0);
 $26 = $1;$pp$0$ph2 = $0;
 L4: while(1) {
  $5 = $26;
  while(1) {
   if (!($3)) {
    $4 = HEAP32[$5>>2]|0;
    $6 = ($4|0)==($iOp|0);
    if (!($6)) {
     break;
    }
    $7 = (($5) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)>(31);
    if (!($9)) {
     $10 = 1 << $8;
     $11 = $10 & $mask;
     $12 = ($11|0)==(0);
     if (!($12)) {
      break;
     }
    }
   }
   $13 = (($5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$14 & 255]($17);
   }
   $18 = (($5) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$pp$0$ph2>>2] = $19;
   $20 = HEAP32[$pVdbe>>2]|0;
   _sqlite3DbFree($20,$5);
   $21 = HEAP32[$pp$0$ph2>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 12;
    break L4;
   } else {
    $5 = $21;
   }
  }
  $23 = (($5) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   label = 12;
   break;
  } else {
   $26 = $24;$pp$0$ph2 = $23;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _sqlite3VdbeMemIntegerify($pMem) {
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3VdbeIntValue($pMem)|0);
 $1 = tempRet0;
 $2 = (($pMem) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = (($pMem) + 28|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 & 48640;
 $11 = $10 | 4;
 $12 = $11&65535;
 HEAP16[$7>>1] = $12;
 STACKTOP = sp;return;
}
function _sqlite3VdbeMemRealify($pMem) {
 $pMem = $pMem|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_sqlite3VdbeRealValue($pMem));
 $1 = (($pMem) + 8|0);
 HEAPF64[$1>>3] = $0;
 $2 = (($pMem) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 48640;
 $6 = $5 | 8;
 $7 = $6&65535;
 HEAP16[$2>>1] = $7;
 STACKTOP = sp;return;
}
function _sqlite3VdbeCursorMoveto($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hasMoved = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $res = sp + 4|0;
 $hasMoved = sp;
 $0 = (($p) + 27|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = HEAP32[$p>>2]|0;
 if (!($2)) {
  $4 = (($p) + 48|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (_sqlite3BtreeMovetoUnpacked($3,0,$7,$10,0,$res)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $$0 = $11;
   STACKTOP = sp;return ($$0|0);
  }
  $13 = $4;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($p) + 56|0);
  $20 = $19;
  $21 = $20;
  HEAP32[$21>>2] = $15;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = $18;
  $24 = HEAP32[$res>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = (($p) + 26|0);
   HEAP8[$26>>0] = 1;
   HEAP8[$0>>0] = 0;
   $27 = (($p) + 68|0);
   HEAP32[$27>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   _sqlite3CorruptError(64073);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $28 = ($3|0)==(0|0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (_sqlite3BtreeCursorHasMoved($3,$hasMoved)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP32[$hasMoved>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (($p) + 68|0);
 HEAP32[$33>>2] = 0;
 $34 = (($p) + 25|0);
 HEAP8[$34>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeKeyFetch($pCur,$pAmt) {
 $pCur = $pCur|0;
 $pAmt = $pAmt|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetchPayload($pCur,$pAmt)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeDataSize($pCur,$pSize) {
 $pCur = $pCur|0;
 $pSize = $pSize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 58|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $3 = (($pCur) + 32|0);
  $4 = (($pCur) + 86|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = ((($pCur) + ($6<<2)|0) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($pCur) + ($6<<1)|0) + 88|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  _btreeParseCell($8,$11,$3);
  $12 = (($pCur) + 82|0);
  HEAP8[$12>>0] = 1;
 }
 $13 = (($pCur) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$pSize>>2] = $14;
 STACKTOP = sp;return;
}
function _sqlite3BtreeDataFetch($pCur,$pAmt) {
 $pCur = $pCur|0;
 $pAmt = $pAmt|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fetchPayload($pCur,$pAmt)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeMemFromBtree($pCur,$offset,$amt,$key,$pMem) {
 $pCur = $pCur|0;
 $offset = $offset|0;
 $amt = $amt|0;
 $key = $key|0;
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available = 0, $rc$0 = 0, $rc$1 = 0, $zData$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $available = sp;
 HEAP32[$available>>2] = 0;
 $0 = ($key|0)!=(0);
 if ($0) {
  $1 = (_sqlite3BtreeKeyFetch($pCur,$available)|0);
  $zData$0 = $1;
 } else {
  $2 = (_sqlite3BtreeDataFetch($pCur,$available)|0);
  $zData$0 = $2;
 }
 $3 = (($amt) + ($offset))|0;
 $4 = HEAP32[$available>>2]|0;
 $5 = ($3>>>0)>($4>>>0);
 if (!($5)) {
  _sqlite3VdbeMemRelease($pMem);
  $6 = (($zData$0) + ($offset)|0);
  $7 = (($pMem) + 4|0);
  HEAP32[$7>>2] = $6;
  $8 = (($pMem) + 28|0);
  HEAP16[$8>>1] = 4112;
  $9 = (($pMem) + 24|0);
  HEAP32[$9>>2] = $amt;
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $10 = (($amt) + 2)|0;
 $11 = (_sqlite3VdbeMemGrow($pMem,$10,0)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $rc$1 = $11;
  STACKTOP = sp;return ($rc$1|0);
 }
 $13 = (($pMem) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($0) {
  $15 = (_sqlite3BtreeKey($pCur,$offset,$amt,$14)|0);
  $rc$0 = $15;
 } else {
  $16 = (_sqlite3BtreeData($pCur,$offset,$amt,$14)|0);
  $rc$0 = $16;
 }
 $17 = ($rc$0|0)==(0);
 if ($17) {
  $18 = HEAP32[$13>>2]|0;
  $19 = (($18) + ($amt)|0);
  HEAP8[$19>>0] = 0;
  $20 = (($amt) + 1)|0;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + ($20)|0);
  HEAP8[$22>>0] = 0;
  $23 = (($pMem) + 28|0);
  HEAP16[$23>>1] = 528;
  $24 = (($pMem) + 24|0);
  HEAP32[$24>>2] = $amt;
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 } else {
  _sqlite3VdbeMemRelease($pMem);
  $rc$1 = $rc$0;
  STACKTOP = sp;return ($rc$1|0);
 }
 return 0|0;
}
function _sqlite3VdbeSerialType($pMem,$file_format) {
 $pMem = $pMem|0;
 $file_format = $file_format|0;
 var $$ = 0, $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 28|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $2 & 4;
 $6 = ($5|0)==(0);
 if ($6) {
  $55 = $2 & 8;
  $56 = ($55|0)==(0);
  if (!($56)) {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = (($pMem) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $2 & 16384;
  $60 = ($59|0)==(0);
  if ($60) {
   $n$0 = $58;
  } else {
   $61 = (($pMem) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) + ($58))|0;
   $n$0 = $63;
  }
  $64 = $n$0 << 1;
  $65 = (($64) + 12)|0;
  $66 = $2 >>> 1;
  $$lobit = $66 & 1;
  $67 = $65 | $$lobit;
  $$0 = $67;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pMem) + 16|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(0);
 do {
  if ($14) {
   $15 = ($13|0)<(-32768);
   $16 = ($13|0)==(-32768);
   $17 = ($10>>>0)<(1);
   $18 = $16 & $17;
   $19 = $15 | $18;
   if ($19) {
    $$0 = 6;
    STACKTOP = sp;return ($$0|0);
   } else {
    $20 = (_i64Subtract(0,0,($10|0),($13|0))|0);
    $21 = tempRet0;
    $23 = $21;$26 = $20;
    break;
   }
  } else {
   $23 = $13;$26 = $10;
  }
 } while(0);
 $22 = ($23>>>0)<(0);
 $24 = ($23|0)==(0);
 $25 = ($26>>>0)<(128);
 $27 = $24 & $25;
 $28 = $22 | $27;
 if ($28) {
  $29 = $10 & 1;
  $30 = ($29|0)==($10|0);
  $31 = (0)==($13|0);
  $32 = $30 & $31;
  $33 = ($file_format|0)>(3);
  $or$cond = $32 & $33;
  if (!($or$cond)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $34 = (($26) + 8)|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ($23>>>0)<(0);
 $36 = ($23|0)==(0);
 $37 = ($26>>>0)<(32768);
 $38 = $36 & $37;
 $39 = $35 | $38;
 if ($39) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = ($23>>>0)<(0);
 $41 = ($23|0)==(0);
 $42 = ($26>>>0)<(8388608);
 $43 = $41 & $42;
 $44 = $40 | $43;
 if ($44) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = ($23>>>0)<(0);
 $46 = ($23|0)==(0);
 $47 = ($26>>>0)<(2147483648);
 $48 = $46 & $47;
 $49 = $45 | $48;
 if ($49) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = ($23>>>0)<(32768);
 $51 = ($23|0)==(32768);
 $52 = ($26>>>0)<(0);
 $53 = $51 & $52;
 $54 = $50 | $53;
 $$ = $54 ? 5 : 6;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PutVarint32($p,$v) {
 $p = $p|0;
 $v = $v|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v>>>0)<(16384);
 if ($0) {
  $1 = $v >>> 7;
  $2 = $1 | 128;
  $3 = $2&255;
  HEAP8[$p>>0] = $3;
  $4 = $v & 127;
  $5 = $4&255;
  $6 = (($p) + 1|0);
  HEAP8[$6>>0] = $5;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = (_sqlite3PutVarint($p,$v,0)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3VdbeSerialPut($buf,$pMem,$serial_type) {
 $buf = $buf|0;
 $pMem = $pMem|0;
 $serial_type = $serial_type|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $v$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($serial_type>>>0)<(8);
 $1 = ($serial_type|0)!=(0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $21 = ($serial_type>>>0)>(11);
  if (!($21)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = (($pMem) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($pMem) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  _memcpy(($buf|0),($25|0),($23|0))|0;
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($serial_type|0)==(7);
 if ($2) {
  $3 = (($pMem) + 8|0);
  $v$0$in = $3;
 } else {
  $4 = (($pMem) + 16|0);
  $v$0$in = $4;
 }
 $5 = (_sqlite3VdbeSerialTypeLen($serial_type)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $v$0$in;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $$in = $5;$15 = $9;$17 = $12;
 while(1) {
  $13 = (($$in) + -1)|0;
  $14 = $15&255;
  $16 = (($buf) + ($13)|0);
  HEAP8[$16>>0] = $14;
  $18 = (_bitshift64Lshr(($15|0),($17|0),8)|0);
  $19 = tempRet0;
  $20 = ($13|0)==(0);
  if ($20) {
   $$0 = $5;
   break;
  } else {
   $$in = $13;$15 = $18;$17 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeCount($pCur,$pnEntry) {
 $pCur = $pCur|0;
 $pnEntry = $pnEntry|0;
 var $$0 = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $pPage$0 = 0, $rc$0$be = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $pnEntry;
  $4 = $3;
  HEAP32[$4>>2] = 0;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_moveToRoot($pCur)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($pCur) + 86|0);
 $23 = 0;$24 = 0;
 L8: while(1) {
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = ((($pCur) + ($11<<2)|0) + 128|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   $17 = (($13) + 2|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $20 = (($13) + 16|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $25 = (_i64Add(($22|0),0,($23|0),($24|0))|0);
    $26 = tempRet0;
    $53 = $10;$90 = $25;$91 = $26;$pPage$0 = $13;
   } else {
    $53 = $10;$90 = $23;$91 = $24;$pPage$0 = $13;
   }
  } else {
   $27 = (($13) + 16|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = (_i64Add(($29|0),0,($23|0),($24|0))|0);
   $31 = tempRet0;
   $33 = $10;
   while(1) {
    $32 = ($33<<16>>16)==(0);
    if ($32) {
     break L8;
    }
    _moveToParent($pCur);
    $38 = HEAP16[$9>>1]|0;
    $39 = $38 << 16 >> 16;
    $40 = ((($pCur) + ($39<<1)|0) + 88|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = ((($pCur) + ($39<<2)|0) + 128|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + 16|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = ($41&65535)<($45&65535);
    if ($46) {
     break;
    } else {
     $33 = $38;
    }
   }
   $47 = (($41) + 1)<<16>>16;
   HEAP16[$40>>1] = $47;
   $48 = HEAP16[$9>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = ((($pCur) + ($49<<2)|0) + 128|0);
   $51 = HEAP32[$50>>2]|0;
   $53 = $48;$90 = $30;$91 = $31;$pPage$0 = $51;
  }
  $52 = $53 << 16 >> 16;
  $54 = ((($pCur) + ($52<<1)|0) + 88|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = (($pPage$0) + 16|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = ($55<<16>>16)==($57<<16>>16);
  if ($58) {
   $59 = (($pPage$0) + 5|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = (($61) + 8)|0;
   $63 = (($pPage$0) + 56|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($62)|0);
   $66 = (_sqlite3Get4byte($65)|0);
   $67 = (_moveToChild($pCur,$66)|0);
   $rc$0$be = $67;
  } else {
   $68 = $55&65535;
   $69 = (($pPage$0) + 56|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($pPage$0) + 18|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = $68 << 1;
   $75 = (($pPage$0) + 64|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + ($74)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $79 << 8;
   $$sum1 = $74 | 1;
   $81 = (($76) + ($$sum1)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $80 | $83;
   $85 = $84 & $73;
   $86 = (($70) + ($85)|0);
   $87 = (_sqlite3Get4byte($86)|0);
   $88 = (_moveToChild($pCur,$87)|0);
   $rc$0$be = $88;
  }
  $89 = ($rc$0$be|0)==(0);
  if ($89) {
   $23 = $90;$24 = $91;
  } else {
   $$0 = $rc$0$be;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($$0|0);
 }
 $34 = $pnEntry;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $31;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VtabSavepoint($db,$op,$iSavepoint) {
 $db = $db|0;
 $op = $op|0;
 $iSavepoint = $iSavepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $rc$2 = 0, $xMethod$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 320|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $rc$2 = 0;
  STACKTOP = sp;return ($rc$2|0);
 }
 $3 = (($db) + 296|0);
 $4 = (($iSavepoint) + 1)|0;
 $i$01 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($i$01|0)<($5|0);
  if (!($6)) {
   $rc$2 = 0;
   label = 14;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + ($i$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($9) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = HEAP32[$12>>2]|0;
   $17 = ($16|0)>(1);
   if ($17) {
    if ((($op|0) == 0)) {
     $18 = (($12) + 80|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($9) + 20|0);
     HEAP32[$20>>2] = $4;
     $xMethod$0 = $19;
    } else if ((($op|0) == 2)) {
     $21 = (($12) + 88|0);
     $22 = HEAP32[$21>>2]|0;
     $xMethod$0 = $22;
    } else {
     $23 = (($12) + 84|0);
     $24 = HEAP32[$23>>2]|0;
     $xMethod$0 = $24;
    }
    $25 = ($xMethod$0|0)==(0|0);
    if (!($25)) {
     $26 = (($9) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)>($iSavepoint|0);
     if ($28) {
      $29 = (FUNCTION_TABLE_iii[$xMethod$0 & 255]($14,$iSavepoint)|0);
      $30 = ($29|0)==(0);
      if (!($30)) {
       $rc$2 = $29;
       label = 14;
       break;
      }
     }
    }
   }
  }
  $31 = (($i$01) + 1)|0;
  $i$01 = $31;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($rc$2|0);
 }
 return 0|0;
}
function _sqlite3BtreeTripAllCursors($pBtree,$errCode) {
 $pBtree = $pBtree|0;
 $errCode = $errCode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $p$0 = 0, $p$03 = 0;
 var $p$04 = 0, $pBtree$idx$val = 0, $pBtree$idx1 = 0, $pBtree$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBtree|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $pBtree$idx$val = HEAP32[$pBtree>>2]|0;
 $pBtree$idx1 = (($pBtree) + 4|0);
 $pBtree$idx1$val = HEAP32[$pBtree$idx1>>2]|0;
 _sqlite3BtreeEnter($pBtree$idx$val,$pBtree$idx1$val);
 $1 = HEAP32[$pBtree$idx1>>2]|0;
 $2 = (($1) + 8|0);
 $p$03 = HEAP32[$2>>2]|0;
 $3 = ($p$03|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $p$04 = $p$03;
 }
 while(1) {
  _sqlite3BtreeClearCursor($p$04);
  $4 = (($p$04) + 83|0);
  HEAP8[$4>>0] = 4;
  $5 = (($p$04) + 76|0);
  HEAP32[$5>>2] = $errCode;
  $6 = (($p$04) + 86|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)<(0);
  if (!($8)) {
   $i$02 = 0;
   while(1) {
    $9 = ((($p$04) + ($i$02<<2)|0) + 128|0);
    $10 = HEAP32[$9>>2]|0;
    _releasePage($10);
    HEAP32[$9>>2] = 0;
    $11 = (($i$02) + 1)|0;
    $12 = HEAP16[$6>>1]|0;
    $13 = $12 << 16 >> 16;
    $14 = ($i$02|0)<($13|0);
    if ($14) {
     $i$02 = $11;
    } else {
     break;
    }
   }
  }
  $15 = (($p$04) + 8|0);
  $p$0 = HEAP32[$15>>2]|0;
  $16 = ($p$0|0)==(0|0);
  if ($16) {
   break;
  } else {
   $p$04 = $p$0;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3BtreeSavepoint($p,$op,$iSavepoint) {
 $p = $p|0;
 $op = $op|0;
 $iSavepoint = $iSavepoint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p$idx$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $1 = (($p) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(2);
 if (!($3)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $4 = (($p) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$5);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_sqlite3PagerSavepoint($6,$op,$iSavepoint)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $rc$0 = $7;
  STACKTOP = sp;return ($rc$0|0);
 }
 $9 = ($iSavepoint|0)<(0);
 if ($9) {
  $10 = (($5) + 22|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 & 8;
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $14 = (($5) + 44|0);
   HEAP32[$14>>2] = 0;
  }
 }
 $15 = (_newDatabase($5)|0);
 $16 = (($5) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 28|0);
 $21 = (_sqlite3Get4byte($20)|0);
 $22 = (($5) + 44|0);
 HEAP32[$22>>2] = $21;
 $rc$0 = $15;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3BtreeBeginStmt($p$0$0$val,$p$0$1$val,$iStatement) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $iStatement = $iStatement|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = HEAP32[$p$0$1$val>>2]|0;
 $1 = (_sqlite3PagerOpenSavepoint($0,$iStatement)|0);
 STACKTOP = sp;return ($1|0);
}
function _allocateCursor($p,$iCur,$nField,$iDb,$isBtreeCursor) {
 $p = $p|0;
 $iCur = $iCur|0;
 $nField = $nField|0;
 $iDb = $iDb|0;
 $isBtreeCursor = $isBtreeCursor|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pCx$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) - ($iCur))|0;
 $3 = (($p) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + (($2*40)|0)|0);
 $6 = $nField << 3;
 $7 = (($6) + 96)|0;
 $8 = ($isBtreeCursor|0)!=(0);
 $$ = $8 ? 208 : 0;
 $9 = (($$) + ($7))|0;
 $10 = (($p) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($iCur<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _sqlite3VdbeFreeCursor($p,$13);
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + ($iCur<<2)|0);
  HEAP32[$16>>2] = 0;
 }
 $17 = (_sqlite3VdbeMemGrow($5,$9,0)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $pCx$0 = 0;
  STACKTOP = sp;return ($pCx$0|0);
 }
 $19 = ((($4) + (($2*40)|0)|0) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$10>>2]|0;
 $22 = (($21) + ($iCur<<2)|0);
 HEAP32[$22>>2] = $20;
 dest=$20+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $23 = $iDb&255;
 $24 = (($20) + 24|0);
 HEAP8[$24>>0] = $23;
 $25 = $nField&65535;
 $26 = (($20) + 20|0);
 HEAP16[$26>>1] = $25;
 if (!($8)) {
  $pCx$0 = $20;
  STACKTOP = sp;return ($pCx$0|0);
 }
 $27 = HEAP32[$19>>2]|0;
 $28 = (($27) + ($7)|0);
 HEAP32[$20>>2] = $28;
 _sqlite3BtreeCursorZero($28);
 $pCx$0 = $20;
 STACKTOP = sp;return ($pCx$0|0);
}
function _sqlite3BtreeCursor($p,$iTable,$wrFlag,$pKeyInfo,$pCur) {
 $p = $p|0;
 $iTable = $iTable|0;
 $wrFlag = $wrFlag|0;
 $pKeyInfo = $pKeyInfo|0;
 $pCur = $pCur|0;
 var $0 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = (_btreeCursor($p,$iTable,$wrFlag,$pKeyInfo,$pCur)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeCursorHints($pCsr,$mask) {
 $pCsr = $pCsr|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mask&255;
 $1 = (($pCsr) + 85|0);
 HEAP8[$1>>0] = $0;
 STACKTOP = sp;return;
}
function _sqlite3BtreeCreateTable($p,$piTable,$flags) {
 $p = $p|0;
 $piTable = $piTable|0;
 $flags = $flags|0;
 var $0 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = (_btreeCreateTable($p,$piTable,$flags)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3VdbeSorterInit($db,$pCsr) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 var $$ = 0, $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $db$idx = 0, $db$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $d = sp;
 $0 = (_sqlite3DbMallocZero($db,56)|0);
 $1 = (($pCsr) + 64|0);
 HEAP32[$1>>2] = $0;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pCsr) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3VdbeAllocUnpackedRecord($4,0,0,$d)|0);
 $6 = (($0) + 52|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $db$idx = (($db) + 63|0);
 $db$idx$val = HEAP8[$db$idx>>0]|0;
 $8 = (_sqlite3TempInMemory($db$idx$val)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($db) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $$idx = (($13) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx$val$idx = (($$idx$val) + 32|0);
 $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
 $14 = (_sqlite3BtreeGetPageSize($$idx$val$idx$val)|0);
 $15 = ($14*10)|0;
 $16 = (($0) + 28|0);
 HEAP32[$16>>2] = $15;
 $17 = (($11) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 80|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(10);
 $$ = $21 ? 10 : $20;
 $22 = Math_imul($$, $14)|0;
 $23 = (($0) + 32|0);
 HEAP32[$23>>2] = $22;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeFreeCursor($p,$pCx) {
 $p = $p|0;
 $pCx = $pCx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCx|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$p>>2]|0;
 _sqlite3VdbeSorterClose($1,$pCx);
 $2 = (($pCx) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[$pCx>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _sqlite3BtreeCloseCursor($5);
  }
 } else {
  _sqlite3BtreeClose($3);
 }
 $7 = (($pCx) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$8>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($p) + 88|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & -13;
 $15 = $14 | 4;
 HEAP16[$12>>1] = $15;
 $16 = (($11) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_ii[$17 & 255]($8)|0);
 $18 = HEAP16[$12>>1]|0;
 $19 = $18 & -13;
 HEAP16[$12>>1] = $19;
 STACKTOP = sp;return;
}
function _sqlite3BtreeEof($pCur$0$14$val) {
 $pCur$0$14$val = $pCur$0$14$val|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCur$0$14$val<<24>>24)!=(1);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _sqlite3BtreeLast($pCur,$pRes) {
 $pCur = $pCur|0;
 $pRes = $pRes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $3 = (($pCur) + 81|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   label = 3;
  } else {
   $$0 = 0;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $6 = (_moveToRoot($pCur)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = HEAP8[$0>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     HEAP32[$pRes>>2] = 1;
     $$0 = 0;
     break;
    } else {
     HEAP32[$pRes>>2] = 0;
     $10 = (_moveToRightmost($pCur)|0);
     $11 = ($10|0)==(0);
     $12 = $11&1;
     $13 = (($pCur) + 81|0);
     HEAP8[$13>>0] = $12;
     $$0 = $10;
     break;
    }
   } else {
    $$0 = $6;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeInsert($pCur,$pKey,$0,$1,$pData,$nData,$nZero,$appendBias,$seekResult) {
 $pCur = $pCur|0;
 $pKey = $pKey|0;
 $0 = $0|0;
 $1 = $1|0;
 $pData = $pData|0;
 $nData = $nData|0;
 $nZero = $nZero|0;
 $appendBias = $appendBias|0;
 $seekResult = $seekResult|0;
 var $$0 = 0, $$idx$val = 0, $$sum1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $idx$0 = 0, $loc = 0, $or$cond = 0, $rc = 0, $szNew = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rc = sp + 8|0;
 $loc = sp + 4|0;
 $szNew = sp;
 HEAP32[$loc>>2] = $seekResult;
 HEAP32[$szNew>>2] = 0;
 $2 = HEAP32[$pCur>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pCur) + 83|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(4);
 if ($7) {
  $8 = (($pCur) + 76|0);
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pCur) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_saveAllCursors($4,$11,$pCur)|0);
 HEAP32[$rc>>2] = $12;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($pCur) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$idx$val = HEAP32[$3>>2]|0;
  _invalidateIncrblobCursors($$idx$val,$0,$1,0);
  $17 = (($pCur) + 82|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)!=(0);
  $20 = ($1|0)>(0);
  $21 = ($1|0)==(0);
  $22 = ($0>>>0)>(0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  $or$cond = $19 & $24;
  if ($or$cond) {
   $25 = (($pCur) + 32|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $33 = tempRet0;
   $34 = ($28|0)==($32|0);
   $35 = ($31|0)==($33|0);
   $36 = $34 & $35;
   if ($36) {
    HEAP32[$loc>>2] = -1;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $37 = ($seekResult|0)==(0);
  if ($37) {
   $38 = (_btreeMoveto($pCur,$pKey,$0,$1,$appendBias,$loc)|0);
   HEAP32[$rc>>2] = $38;
   $39 = ($38|0)==(0);
   if (!($39)) {
    $$0 = $38;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $40 = (($pCur) + 86|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = ((($pCur) + ($42<<2)|0) + 128|0);
 $44 = HEAP32[$43>>2]|0;
 _allocateTempSpace($4);
 $45 = (($4) + 80|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = (_fillInCell($44,$46,$pKey,$0,$1,$pData,$nData,$nZero,$szNew)|0);
 HEAP32[$rc>>2] = $48;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $$0 = $48;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = HEAP16[$40>>1]|0;
 $51 = $50 << 16 >> 16;
 $52 = ((($pCur) + ($51<<1)|0) + 88|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = HEAP32[$loc>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  $57 = (($44) + 68|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_sqlite3PagerWrite($58)|0);
  HEAP32[$rc>>2] = $59;
  $60 = ($59|0)==(0);
  if (!($60)) {
   $$0 = $59;
   STACKTOP = sp;return ($$0|0);
  }
  $61 = (($44) + 56|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($44) + 18|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = $54 << 1;
  $67 = (($44) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 8;
  $$sum1 = $66 | 1;
  $73 = (($68) + ($$sum1)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $72 | $75;
  $77 = $76 & $65;
  $78 = (($62) + ($77)|0);
  $79 = (($44) + 3|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)==(0);
  if ($81) {
   $82 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8)|(HEAPU8[$78+2>>0]<<16)|(HEAPU8[$78+3>>0]<<24);
   HEAP8[$46>>0]=$82&255;HEAP8[$46+1>>0]=($82>>8)&255;HEAP8[$46+2>>0]=($82>>16)&255;HEAP8[$46+3>>0]=$82>>24;
  }
  $83 = (_cellSizePtr($44,$78)|0);
  $84 = (_clearCell($44,$78)|0);
  HEAP32[$rc>>2] = $84;
  $85 = $83&65535;
  _dropCell($44,$54,$85,$rc);
  $86 = HEAP32[$rc>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   $idx$0 = $54;
  } else {
   $$0 = $86;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $88 = ($55|0)<(0);
  if ($88) {
   $89 = (($44) + 16|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = ($90<<16>>16)==(0);
   if ($91) {
    $idx$0 = $54;
   } else {
    $92 = (($53) + 1)<<16>>16;
    HEAP16[$52>>1] = $92;
    $93 = $92&65535;
    $idx$0 = $93;
   }
  } else {
   $idx$0 = $54;
  }
 }
 $94 = HEAP32[$szNew>>2]|0;
 _insertCell($44,$idx$0,$46,$94,0,0,$rc);
 $95 = (($pCur) + 58|0);
 HEAP16[$95>>1] = 0;
 $96 = HEAP32[$rc>>2]|0;
 $97 = ($96|0)==(0);
 if (!($97)) {
  $$0 = $96;
  STACKTOP = sp;return ($$0|0);
 }
 $98 = (($44) + 1|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = ($99<<24>>24)==(0);
 if ($100) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $101 = (($pCur) + 82|0);
 HEAP8[$101>>0] = 0;
 $102 = (_balance($pCur)|0);
 HEAP32[$rc>>2] = $102;
 $103 = HEAP16[$40>>1]|0;
 $104 = $103 << 16 >> 16;
 $105 = ((($pCur) + ($104<<2)|0) + 128|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 1|0);
 HEAP8[$107>>0] = 0;
 HEAP8[$5>>0] = 0;
 $$0 = $102;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeDelete($pCur) {
 $pCur = $pCur|0;
 var $$0 = 0, $$idx$val = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notUsed = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rc = sp + 4|0;
 $notUsed = sp;
 $0 = HEAP32[$pCur>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($pCur) + 86|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($pCur) + ($5<<1)|0) + 88|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($pCur) + ($5<<2)|0) + 128|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ($7&65535)<($12&65535);
 if (!($13)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($pCur) + 83|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(1);
 if (!($16)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($10) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($10) + 18|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $8 << 1;
 $23 = (($10) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $$sum1 = $22 | 1;
 $29 = (($24) + ($$sum1)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $28 | $31;
 $33 = $32 & $21;
 $34 = (($18) + ($33)|0);
 $35 = (($10) + 3|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  HEAP32[$notUsed>>2] = 0;
  $38 = (_sqlite3BtreePrevious($pCur,$notUsed)|0);
  HEAP32[$rc>>2] = $38;
  $39 = ($38|0)==(0);
  if (!($39)) {
   $$0 = $38;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($pCur) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_saveAllCursors($2,$41,$pCur)|0);
 HEAP32[$rc>>2] = $42;
 $43 = ($42|0)==(0);
 if (!($43)) {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($pCur) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = (($pCur) + 32|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $$idx$val = HEAP32[$1>>2]|0;
  _invalidateIncrblobCursors($$idx$val,$50,$53,0);
 }
 $54 = (($10) + 68|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_sqlite3PagerWrite($55)|0);
 HEAP32[$rc>>2] = $56;
 $57 = ($56|0)==(0);
 if (!($57)) {
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = (_clearCell($10,$34)|0);
 HEAP32[$rc>>2] = $58;
 $59 = (_cellSizePtr($10,$34)|0);
 $60 = $59&65535;
 _dropCell($10,$8,$60,$rc);
 $61 = HEAP32[$rc>>2]|0;
 $62 = ($61|0)==(0);
 if (!($62)) {
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP8[$35>>0]|0;
 $64 = ($63<<24>>24)==(0);
 if ($64) {
  $65 = HEAP16[$3>>1]|0;
  $66 = $65 << 16 >> 16;
  $67 = ((($pCur) + ($66<<2)|0) + 128|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($5) + 1)|0;
  $70 = ((($pCur) + ($69<<2)|0) + 128|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 72|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($68) + 56|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($68) + 18|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = (($68) + 16|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = $81 << 1;
  $83 = (($82) + -2)|0;
  $84 = (($68) + 64|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + ($83)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $88 << 8;
  $$sum = (($82) + -1)|0;
  $90 = (($85) + ($$sum)|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $89 | $92;
  $94 = $93 & $78;
  $95 = (($75) + ($94)|0);
  $96 = (_cellSizePtr($68,$95)|0);
  $97 = $96&65535;
  _allocateTempSpace($2);
  $98 = (($2) + 80|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($68) + 68|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_sqlite3PagerWrite($101)|0);
  HEAP32[$rc>>2] = $102;
  $$sum2 = (($94) + -4)|0;
  $103 = (($75) + ($$sum2)|0);
  $104 = (($97) + 4)|0;
  _insertCell($10,$8,$103,$104,$99,$73,$rc);
  $105 = HEAP16[$79>>1]|0;
  $106 = $105&65535;
  $107 = (($106) + -1)|0;
  _dropCell($68,$107,$97,$rc);
  $108 = HEAP32[$rc>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $$0 = $108;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $110 = (_balance($pCur)|0);
 HEAP32[$rc>>2] = $110;
 $111 = ($110|0)==(0);
 if (!($111)) {
  $$0 = $110;
  STACKTOP = sp;return ($$0|0);
 }
 $112 = HEAP16[$3>>1]|0;
 $113 = ($112<<16>>16)>($4<<16>>16);
 if ($113) {
  $115 = $112;
  while(1) {
   $114 = $115 << 16 >> 16;
   $116 = (($115) + -1)<<16>>16;
   HEAP16[$3>>1] = $116;
   $117 = ((($pCur) + ($114<<2)|0) + 128|0);
   $118 = HEAP32[$117>>2]|0;
   _releasePage($118);
   $119 = HEAP16[$3>>1]|0;
   $120 = ($119<<16>>16)>($4<<16>>16);
   if ($120) {
    $115 = $119;
   } else {
    break;
   }
  }
  $121 = (_balance($pCur)|0);
  HEAP32[$rc>>2] = $121;
  $122 = ($121|0)==(0);
  if (!($122)) {
   $$0 = $121;
   STACKTOP = sp;return ($$0|0);
  }
 }
 (_moveToRoot($pCur)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeSorterCompare($pCsr,$pVal,$nIgnore,$pRes) {
 $pCsr = $pCsr|0;
 $pVal = $pVal|0;
 $nIgnore = $nIgnore|0;
 $pRes = $pRes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nKey = 0, $pCsr$idx = 0, $pCsr$idx$val = 0, $pCsr$idx1$val = 0, $pCsr$idx1$val$idx = 0, $pCsr$idx1$val$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nKey = sp;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_vdbeSorterRowkey($1,$nKey)|0);
 $3 = (($pVal) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pVal) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$nKey>>2]|0;
 $pCsr$idx = (($pCsr) + 8|0);
 $pCsr$idx$val = HEAP32[$pCsr$idx>>2]|0;
 $pCsr$idx1$val = HEAP32[$0>>2]|0;
 $pCsr$idx1$val$idx = (($pCsr$idx1$val) + 52|0);
 $pCsr$idx1$val$idx$val = HEAP32[$pCsr$idx1$val$idx>>2]|0;
 _vdbeSorterCompare($pCsr$idx$val,$pCsr$idx1$val$idx$val,$nIgnore,$4,$6,$2,$7,$pRes);
 STACKTOP = sp;return;
}
function _sqlite3VdbeSorterRowkey($pCsr$0$16$val,$pOut) {
 $pCsr$0$16$val = $pCsr$0$16$val|0;
 $pOut = $pOut|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nKey = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nKey = sp;
 $0 = (_vdbeSorterRowkey($pCsr$0$16$val,$nKey)|0);
 $1 = HEAP32[$nKey>>2]|0;
 $2 = (_sqlite3VdbeMemGrow($pOut,$1,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($pOut) + 24|0);
 HEAP32[$4>>2] = $1;
 $5 = (($pOut) + 28|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 & 48640;
 $9 = $8 | 16;
 $10 = $9&65535;
 HEAP16[$5>>1] = $10;
 $11 = (($pOut) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 _memcpy(($12|0),($0|0),($1|0))|0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VtabImportErrmsg($p,$pVtab) {
 $p = $p|0;
 $pVtab = $pVtab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3DbFree($0,$2);
 $3 = (($pVtab) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3DbStrDup($0,$4)|0);
 HEAP32[$1>>2] = $5;
 $6 = HEAP32[$3>>2]|0;
 _sqlite3_free($6);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _sqlite3VdbeSorterRewind($db,$pCsr,$pbEof) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 $pbEof = $pbEof|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $$pre = 0, $$rc$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $N$0 = 0, $bEof = 0, $db$idx$val = 0, $iNew$0 = 0, $iWrite2 = 0, $nWrite = 0, $pTemp2 = 0, $rc$1 = 0, $rc$5 = 0, $rc$6 = 0;
 var $rc$6$ph = 0, $writer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $pTemp2 = sp + 60|0;
 $iWrite2 = sp + 48|0;
 $writer = sp + 8|0;
 $nWrite = sp;
 $bEof = sp + 56|0;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$pTemp2>>2] = 0;
 $2 = $iWrite2;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($1) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (($1) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $11&1;
  HEAP32[$pbEof>>2] = $12;
  $13 = (_vdbeSorterSort($pCsr)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_vdbeSorterListToPMA($db,$pCsr)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16|0)>(16);
 $$ = $17 ? 16 : $16;
 $N$0 = 2;
 while(1) {
  $18 = ($N$0|0)<($$|0);
  $19 = $N$0 << 1;
  if ($18) {
   $N$0 = $19;
  } else {
   break;
  }
 }
 $20 = ($N$0*52)|0;
 $21 = (_sqlite3DbMallocZero($db,$20)|0);
 $22 = (($1) + 36|0);
 HEAP32[$22>>2] = $21;
 $23 = ($21|0)==(0|0);
 if ($23) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (($21) + (($N$0*48)|0)|0);
 $25 = (($1) + 40|0);
 HEAP32[$25>>2] = $24;
 $26 = (($1) + 20|0);
 HEAP32[$26>>2] = $N$0;
 $27 = (($1) + 44|0);
 $28 = (($1) + 8|0);
 $iNew$0 = 0;$rc$1 = 0;
 while(1) {
  $29 = ($rc$1|0)==(0);
  if ($29) {
   $30 = $iNew$0 << 4;
   $31 = HEAP32[$6>>2]|0;
   $32 = ($30|0)<($31|0);
   if ($32) {
    dest=$writer+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $33 = (_vdbeSorterInitMerge($db,$pCsr,$nWrite)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = HEAP32[$6>>2]|0;
     $36 = ($35|0)<(17);
     if ($36) {
      $rc$6$ph = 0;
      label = 18;
     } else {
      $37 = HEAP32[$pTemp2>>2]|0;
      $38 = ($37|0)==(0|0);
      if ($38) {
       $db$idx$val = HEAP32[$db>>2]|0;
       $39 = (_vdbeSorterOpenTempFile($db$idx$val,$pTemp2)|0);
       $40 = ($39|0)==(0);
       if ($40) {
        label = 14;
       } else {
        $rc$5 = $39;
       }
      } else {
       label = 14;
      }
      if ((label|0) == 14) {
       label = 0;
       HEAP32[$bEof>>2] = 0;
       $41 = HEAP32[$pTemp2>>2]|0;
       $42 = $iWrite2;
       $43 = $42;
       $44 = HEAP32[$43>>2]|0;
       $45 = (($42) + 4)|0;
       $46 = $45;
       $47 = HEAP32[$46>>2]|0;
       _fileWriterInit($db,$41,$writer,$44,$47);
       $48 = $nWrite;
       $49 = $48;
       $50 = HEAP32[$49>>2]|0;
       $51 = (($48) + 4)|0;
       $52 = $51;
       $53 = HEAP32[$52>>2]|0;
       _fileWriterWriteVarint($writer,$50,$53);
       while(1) {
        $54 = HEAP32[$25>>2]|0;
        $55 = (($54) + 4|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = HEAP32[$22>>2]|0;
        $58 = ((($57) + (($56*48)|0)|0) + 20|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ($59|0)<(0);
        $61 = $60 << 31 >> 31;
        _fileWriterWriteVarint($writer,$59,$61);
        $62 = ((($57) + (($56*48)|0)|0) + 32|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = HEAP32[$58>>2]|0;
        _fileWriterWrite($writer,$63,$64);
        $65 = (_sqlite3VdbeSorterNext($db,$pCsr,$bEof)|0);
        $66 = HEAP32[$bEof>>2]|0;
        $67 = $66 | $65;
        $68 = ($67|0)==(0);
        if (!($68)) {
         break;
        }
       }
       $69 = ($65|0)==(0);
       $70 = (_fileWriterFinish($db,$writer,$iWrite2)|0);
       $$rc$3 = $69 ? $70 : $65;
       $rc$5 = $$rc$3;
      }
      $71 = (($iNew$0) + 1)|0;
      $iNew$0 = $71;$rc$1 = $rc$5;
      continue;
     }
    } else {
     $rc$6$ph = $33;
     label = 18;
    }
   } else {
    $73 = $31;$rc$6 = 0;
   }
  } else {
   $rc$6$ph = $rc$1;
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $$pr = HEAP32[$6>>2]|0;
   $73 = $$pr;$rc$6 = $rc$6$ph;
  }
  $72 = ($73|0)<(17);
  if ($72) {
   label = 20;
   break;
  }
  $74 = HEAP32[$27>>2]|0;
  HEAP32[$6>>2] = $iNew$0;
  $75 = HEAP32[$pTemp2>>2]|0;
  HEAP32[$27>>2] = $75;
  HEAP32[$pTemp2>>2] = $74;
  $76 = $iWrite2;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = $1;
  $83 = $82;
  HEAP32[$83>>2] = $78;
  $84 = (($82) + 4)|0;
  $85 = $84;
  HEAP32[$85>>2] = $81;
  $86 = $28;
  $87 = $86;
  HEAP32[$87>>2] = 0;
  $88 = (($86) + 4)|0;
  $89 = $88;
  HEAP32[$89>>2] = 0;
  $90 = $iWrite2;
  $91 = $90;
  HEAP32[$91>>2] = 0;
  $92 = (($90) + 4)|0;
  $93 = $92;
  HEAP32[$93>>2] = 0;
  $94 = ($rc$6|0)==(0);
  if ($94) {
   $iNew$0 = 0;$rc$1 = 0;
  } else {
   $96 = $74;
   break;
  }
 }
 if ((label|0) == 20) {
  $$pre = HEAP32[$pTemp2>>2]|0;
  $96 = $$pre;
 }
 $95 = ($96|0)==(0|0);
 if (!($95)) {
  _sqlite3OsCloseFree($96);
 }
 $97 = HEAP32[$25>>2]|0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$22>>2]|0;
 $101 = ((($100) + (($99*48)|0)|0) + 24|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0|0);
 $104 = $103&1;
 HEAP32[$pbEof>>2] = $104;
 $$0 = $rc$6;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeFirst($pCur,$pRes) {
 $pCur = $pCur|0;
 $pRes = $pRes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_moveToRoot($pCur)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (($pCur) + 83|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    HEAP32[$pRes>>2] = 1;
    $rc$0 = 0;
    break;
   } else {
    HEAP32[$pRes>>2] = 0;
    $5 = (_moveToLeftmost($pCur)|0);
    $rc$0 = $5;
    break;
   }
  } else {
   $rc$0 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3VdbeSorterNext($db,$pCsr,$pbEof) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 $pbEof = $pbEof|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$in = 0, $or$cond2 = 0, $rc$0$lcssa = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $24 = (($1) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$24>>2] = $27;
  HEAP32[$26>>2] = 0;
  _vdbeSorterRecordFree($db,$25);
  $28 = HEAP32[$24>>2]|0;
  $29 = ($28|0)==(0|0);
  $$sink = $29;$rc$1 = 0;
  $30 = $$sink&1;
  HEAP32[$pbEof>>2] = $30;
  STACKTOP = sp;return ($rc$1|0);
 }
 $5 = (($3) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*48)|0)|0);
 $10 = (_vdbeSorterIterNext($db,$9)|0);
 $11 = (($1) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($6))|0;
 $14 = ($10|0)==(0);
 $15 = ($13|0)>(1);
 $or$cond2 = $14 & $15;
 if ($or$cond2) {
  $i$03$in = $13;
  while(1) {
   $i$03 = (($i$03$in|0) / 2)&-1;
   _vdbeSorterDoCompare($pCsr,$i$03);
   $16 = ($i$03$in|0)>(3);
   if ($16) {
    $i$03$in = $i$03;
   } else {
    $rc$0$lcssa = 0;
    break;
   }
  }
 } else {
  $rc$0$lcssa = $10;
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$7>>2]|0;
 $21 = ((($20) + (($19*48)|0)|0) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 $$sink = $23;$rc$1 = $rc$0$lcssa;
 $30 = $$sink&1;
 HEAP32[$pbEof>>2] = $30;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3VdbeSorterWrite($db,$pCsr,$pVal) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 $pVal = $pVal|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pVal) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 $6 = (_sqlite3VarintLen($3,$5)|0);
 $7 = (($6) + ($3))|0;
 $8 = (($1) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9))|0;
 HEAP32[$8>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + 12)|0;
 $13 = (_sqlite3DbMallocRaw($db,$12)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $rc$1 = 7;
  STACKTOP = sp;return ($rc$1|0);
 }
 $15 = (($13) + 12|0);
 HEAP32[$13>>2] = $15;
 $16 = (($pVal) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 _memcpy(($15|0),($17|0),($18|0))|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = (($13) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = (($1) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($13) + 8|0);
 HEAP32[$23>>2] = $22;
 HEAP32[$21>>2] = $13;
 $24 = (($1) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(0);
 if (!($26)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = ($27|0)>($25|0);
 if (!($28)) {
  $29 = (($1) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)>($30|0);
  if (!($31)) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  $32 = (_sqlite3HeapNearlyFull()|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
 }
 $34 = (_vdbeSorterListToPMA($db,$pCsr)|0);
 HEAP32[$8>>2] = 0;
 $rc$1 = $34;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3VdbeIdxRowid($pCur,$rowid) {
 $pCur = $pCur|0;
 $rowid = $rowid|0;
 var $$0 = 0, $$pr = 0, $$pr1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $nCellKey = 0, $szHdr = 0, $typeRowid = 0, $v = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $nCellKey = sp + 80|0;
 $szHdr = sp + 92|0;
 $typeRowid = sp + 88|0;
 $m = sp + 40|0;
 $v = sp;
 $0 = $nCellKey;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 _sqlite3BtreeKeySize($pCur,$nCellKey);
 dest=$m+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = $nCellKey;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_sqlite3VdbeMemFromBtree($pCur,0,$6,1,$m)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($m) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)>(-1);
 if ($15) {
  $16 = $14&255;
  HEAP32[$szHdr>>2] = $16;
  $18 = $16;
 } else {
  (_sqlite3GetVarint32($13,$szHdr)|0);
  $$pr = HEAP32[$szHdr>>2]|0;
  $18 = $$pr;
 }
 $17 = ($18>>>0)<(3);
 if (!($17)) {
  $19 = (($m) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)>($20|0);
  if (!($21)) {
   $22 = (($18) + -1)|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)>(-1);
   if ($26) {
    $27 = $25&255;
    HEAP32[$typeRowid>>2] = $27;
    $29 = $27;
   } else {
    (_sqlite3GetVarint32($24,$typeRowid)|0);
    $$pr1 = HEAP32[$typeRowid>>2]|0;
    $29 = $$pr1;
   }
   $28 = ($29>>>0)>(9);
   if (!($28)) {
    if (!((($29|0) == 0) | (($29|0) == 7))) {
     $30 = (_sqlite3VdbeSerialTypeLen($29)|0);
     $31 = HEAP32[$19>>2]|0;
     $32 = (($18) + ($30))|0;
     $33 = ($31>>>0)<($32>>>0);
     if (!($33)) {
      $34 = (($31) - ($30))|0;
      $35 = HEAP32[$12>>2]|0;
      $36 = (($35) + ($34)|0);
      (_sqlite3VdbeSerialGet($36,$29,$v)|0);
      $37 = (($v) + 16|0);
      $38 = $37;
      $39 = $38;
      $40 = HEAP32[$39>>2]|0;
      $41 = (($38) + 4)|0;
      $42 = $41;
      $43 = HEAP32[$42>>2]|0;
      $44 = $rowid;
      $45 = $44;
      HEAP32[$45>>2] = $40;
      $46 = (($44) + 4)|0;
      $47 = $46;
      HEAP32[$47>>2] = $43;
      _sqlite3VdbeMemRelease($m);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 _sqlite3VdbeMemRelease($m);
 _sqlite3CorruptError(65211);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeIdxKeyCompare($pC,$pUnpacked,$res) {
 $pC = $pC|0;
 $pUnpacked = $pUnpacked|0;
 $res = $res|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $nCellKey = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $nCellKey = sp + 40|0;
 $m = sp;
 $0 = $nCellKey;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[$pC>>2]|0;
 _sqlite3BtreeKeySize($4,$nCellKey);
 $5 = $nCellKey;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_i64Add(($7|0),($10|0),-1,-1)|0);
 $12 = tempRet0;
 $13 = ($12>>>0)>(0);
 $14 = ($12|0)==(0);
 $15 = ($11>>>0)>(2147483646);
 $16 = $14 & $15;
 $17 = $13 | $16;
 if ($17) {
  HEAP32[$res>>2] = 0;
  _sqlite3CorruptError(65242);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$m+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $18 = HEAP32[$pC>>2]|0;
 $19 = (_sqlite3VdbeMemFromBtree($18,0,$7,1,$m)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($m) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($m) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_sqlite3VdbeRecordCompare($22,$24,$pUnpacked,0)|0);
 HEAP32[$res>>2] = $25;
 _sqlite3VdbeMemRelease($m);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeDropTable($p,$iTable,$piMoved) {
 $p = $p|0;
 $iTable = $iTable|0;
 $piMoved = $piMoved|0;
 var $0 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = (_btreeDropTable($p,$iTable,$piMoved)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3RootPageMoved($db$0$4$val,$iDb,$iFrom,$iTo) {
 $db$0$4$val = $db$0$4$val|0;
 $iDb = $iDb|0;
 $iFrom = $iFrom|0;
 $iTo = $iTo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pElem$0 = 0, $pElem$03 = 0;
 var $pElem$04 = 0, $pElem$1 = 0, $pElem$11 = 0, $pElem$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($db$0$4$val) + ($iDb<<4)|0) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $pElem$03 = HEAP32[$2>>2]|0;
 $3 = ($pElem$03|0)==(0|0);
 if (!($3)) {
  $pElem$04 = $pElem$03;
  while(1) {
   $4 = (($pElem$04) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==($iFrom|0);
   if ($8) {
    HEAP32[$6>>2] = $iTo;
   }
   $pElem$0 = HEAP32[$pElem$04>>2]|0;
   $9 = ($pElem$0|0)==(0|0);
   if ($9) {
    break;
   } else {
    $pElem$04 = $pElem$0;
   }
  }
 }
 $10 = (($1) + 32|0);
 $pElem$11 = HEAP32[$10>>2]|0;
 $11 = ($pElem$11|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  $pElem$12 = $pElem$11;
 }
 while(1) {
  $12 = (($pElem$12) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($iFrom|0);
  if ($16) {
   HEAP32[$14>>2] = $iTo;
  }
  $pElem$1 = HEAP32[$pElem$12>>2]|0;
  $17 = ($pElem$1|0)==(0|0);
  if ($17) {
   break;
  } else {
   $pElem$12 = $pElem$1;
  }
 }
 STACKTOP = sp;return;
}
function _sqlite3BtreeClearTable($p,$iTable,$pnChange) {
 $p = $p|0;
 $iTable = $iTable|0;
 $pnChange = $pnChange|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $p$idx$val = 0, $p$idx2$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $p$idx$val = HEAP32[$p>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$1);
 $2 = (_saveAllCursors($1,$iTable,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $rc$0 = $2;
  STACKTOP = sp;return ($rc$0|0);
 }
 $p$idx2$val = HEAP32[$0>>2]|0;
 _invalidateIncrblobCursors($p$idx2$val,0,0,1);
 $4 = (_clearDatabasePage($1,$iTable,0,$pnChange)|0);
 $rc$0 = $4;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3UnlinkAndDeleteTable($db,$iDb,$zTabName) {
 $db = $db|0;
 $iDb = $iDb|0;
 $zTabName = $zTabName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iDb<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = (_sqlite3Strlen30($zTabName)|0);
 $6 = (_sqlite3HashInsert($4,$zTabName,$5,0)|0);
 _sqlite3DeleteTable($db,$6);
 $7 = (($db) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 2;
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function _sqlite3UnlinkAndDeleteIndex($db,$iDb,$zIdxName) {
 $db = $db|0;
 $iDb = $iDb|0;
 $zIdxName = $zIdxName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iDb<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = (_sqlite3Strlen30($zIdxName)|0);
 $6 = (_sqlite3HashInsert($4,$zIdxName,$5,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $21 = (($db) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 | 2;
  HEAP32[$21>>2] = $23;
  STACKTOP = sp;return;
 }
 $8 = (($6) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($6|0);
 L4: do {
  if ($12) {
   $13 = (($6) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$10>>2] = $14;
  } else {
   $p$0 = $11;
   while(1) {
    $15 = ($p$0|0)==(0|0);
    if ($15) {
     break L4;
    }
    $16 = (($p$0) + 20|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($6|0);
    if ($18) {
     break;
    } else {
     $p$0 = $17;
    }
   }
   $19 = (($6) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$16>>2] = $20;
  }
 } while(0);
 _freeIndex($db,$6);
 $21 = (($db) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 | 2;
 HEAP32[$21>>2] = $23;
 STACKTOP = sp;return;
}
function _sqlite3UnlinkAndDeleteTrigger($db,$iDb,$zName) {
 $db = $db|0;
 $iDb = $iDb|0;
 $zName = $zName|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1) + ($iDb<<4)|0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 40|0);
 $5 = (_sqlite3Strlen30($zName)|0);
 $6 = (_sqlite3HashInsert($4,$zName,$5,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($6) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $$idx = (($6) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $13 = (_tableOfTrigger($$idx$val,$9)|0);
  $14 = (($13) + 64|0);
  $pp$0 = $14;
  while(1) {
   $15 = HEAP32[$pp$0>>2]|0;
   $16 = ($15|0)==($6|0);
   $17 = (($15) + 32|0);
   if ($16) {
    break;
   } else {
    $pp$0 = $17;
   }
  }
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$pp$0>>2] = $18;
 }
 _sqlite3DeleteTrigger($db,$6);
 $19 = (($db) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 | 2;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _sqlite3BtreeIntegrityCheck($p$0$0$val,$p$0$1$val,$aRoot,$nRoot,$mxErr,$pnErr) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 $aRoot = $aRoot|0;
 $nRoot = $nRoot|0;
 $mxErr = $mxErr|0;
 $pnErr = $pnErr|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx4$val$idx = 0, $$idx4$val$idx$val = 0, $$idx5 = 0, $$idx5$val = 0, $$idx5$val$idx = 0, $$idx5$val$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, $or$cond = 0, $sCheck = 0, $sCheck$idx6$val = 0, $sCheck$idx6$val$pre = 0, $sCheck$idx7$val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $zErr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sCheck = sp + 24|0;
 $zErr = sp + 80|0;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = HEAP32[$p$0$1$val>>2]|0;
 $$idx5 = (($0) + 204|0);
 $$idx5$val = HEAP32[$$idx5>>2]|0;
 $$idx5$val$idx = (($$idx5$val) + 12|0);
 $$idx5$val$idx$val = HEAP32[$$idx5$val$idx>>2]|0;
 $1 = (_sqlite3PagerRefcount($$idx5$val$idx$val)|0);
 HEAP32[$sCheck>>2] = $p$0$1$val;
 $2 = (($sCheck) + 4|0);
 HEAP32[$2>>2] = $0;
 $$idx = (($p$0$1$val) + 44|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = (_btreePagecount($$idx$val)|0);
 $4 = (($sCheck) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = (($sCheck) + 16|0);
 HEAP32[$5>>2] = $mxErr;
 $6 = (($sCheck) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = (($sCheck) + 24|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$pnErr>>2] = 0;
 $8 = ($3|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = $3 >>> 3;
 $10 = (($9) + 1)|0;
 $11 = (_sqlite3MallocZero($10)|0);
 $12 = (($sCheck) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  HEAP32[$pnErr>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[1648>>2]|0;
 $15 = (($p$0$1$val) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14>>>0) / ($16>>>0))&-1;
 $18 = (($17) + 1)|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = ($18>>>0)>($19>>>0);
 if (!($20)) {
  _setPageReferenced($11,$18);
 }
 $21 = (($sCheck) + 28|0);
 _sqlite3StrAccumInit($21,$zErr,100,1000000000);
 $22 = (($sCheck) + 52|0);
 HEAP8[$22>>0] = 2;
 $23 = (($p$0$1$val) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 32|0);
 $28 = (_sqlite3Get4byte($27)|0);
 $29 = (($26) + 36|0);
 $30 = (_sqlite3Get4byte($29)|0);
 _checkList($sCheck,1,$28,$30,33312);
 $31 = ($nRoot|0)>(0);
 L11: do {
  if ($31) {
   $32 = (($p$0$1$val) + 17|0);
   $i$02 = 0;
   while(1) {
    $36 = HEAP32[$5>>2]|0;
    $37 = ($36|0)==(0);
    if ($37) {
     break L11;
    }
    $38 = (($aRoot) + ($i$02<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$32>>0]|0;
     $42 = ($41<<24>>24)!=(0);
     $43 = ($39|0)>(1);
     $or$cond = $42 & $43;
     if ($or$cond) {
      _checkPtrmap($sCheck,$39,1,0,0);
      $$pre = HEAP32[$38>>2]|0;
      $44 = $$pre;
     } else {
      $44 = $39;
     }
     (_checkTreePage($sCheck,$44,33328,0,0)|0);
    }
    $45 = (($i$02) + 1)|0;
    $46 = ($45|0)<($nRoot|0);
    if ($46) {
     $i$02 = $45;
    } else {
     break;
    }
   }
  }
 } while(0);
 $33 = HEAP32[$4>>2]|0;
 $34 = ($33|0)==(0);
 L23: do {
  if (!($34)) {
   $35 = (($p$0$1$val) + 17|0);
   $i$11 = 1;
   while(1) {
    $47 = HEAP32[$5>>2]|0;
    $48 = ($47|0)==(0);
    if ($48) {
     break L23;
    }
    $sCheck$idx7$val = HEAP32[$12>>2]|0;
    $49 = (_getPageReferenced($sCheck$idx7$val,$i$11)|0);
    $50 = ($49|0)==(0);
    do {
     if ($50) {
      $51 = (_ptrmapPageno($p$0$1$val,$i$11)|0);
      $52 = ($51|0)==($i$11|0);
      if ($52) {
       $53 = HEAP8[$35>>0]|0;
       $54 = ($53<<24>>24)==(0);
       if (!($54)) {
        $sCheck$idx6$val = $sCheck$idx7$val;
        break;
       }
      }
      HEAP32[$vararg_buffer>>2] = $i$11;
      _checkAppendMsg($sCheck,0,33352,$vararg_buffer);
      $sCheck$idx6$val$pre = HEAP32[$12>>2]|0;
      $sCheck$idx6$val = $sCheck$idx6$val$pre;
     } else {
      $sCheck$idx6$val = $sCheck$idx7$val;
     }
    } while(0);
    $55 = (_getPageReferenced($sCheck$idx6$val,$i$11)|0);
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = (_ptrmapPageno($p$0$1$val,$i$11)|0);
     $58 = ($57|0)==($i$11|0);
     if ($58) {
      $59 = HEAP8[$35>>0]|0;
      $60 = ($59<<24>>24)==(0);
      if (!($60)) {
       HEAP32[$vararg_buffer1>>2] = $i$11;
       _checkAppendMsg($sCheck,0,33376,$vararg_buffer1);
      }
     }
    }
    $61 = (($i$11) + 1)|0;
    $62 = HEAP32[$4>>2]|0;
    $63 = ($61>>>0)>($62>>>0);
    if ($63) {
     break;
    } else {
     $i$11 = $61;
    }
   }
  }
 } while(0);
 $64 = HEAP32[$p$0$1$val>>2]|0;
 $$idx4 = (($64) + 204|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $$idx4$val$idx = (($$idx4$val) + 12|0);
 $$idx4$val$idx$val = HEAP32[$$idx4$val$idx>>2]|0;
 $65 = (_sqlite3PagerRefcount($$idx4$val$idx$val)|0);
 $66 = ($1|0)==($65|0);
 if (!($66)) {
  HEAP32[$vararg_buffer4>>2] = $1;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $65;
  _checkAppendMsg($sCheck,0,33416,$vararg_buffer4);
 }
 $67 = HEAP32[$12>>2]|0;
 _sqlite3_free($67);
 $68 = HEAP32[$7>>2]|0;
 $69 = ($68|0)==(0);
 if (!($69)) {
  _sqlite3StrAccumReset($21);
  $70 = HEAP32[$6>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$pnErr>>2] = $71;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $72 = HEAP32[$6>>2]|0;
 HEAP32[$pnErr>>2] = $72;
 $73 = ($72|0)==(0);
 if ($73) {
  _sqlite3StrAccumReset($21);
 }
 $74 = (_sqlite3StrAccumFinish($21)|0);
 $$0 = $74;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeMemSetRowSet($pMem) {
 $pMem = $pMem|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pMem>>2]|0;
 _sqlite3VdbeMemRelease($pMem);
 $1 = (_sqlite3DbMallocRaw($0,64)|0);
 $2 = (($pMem) + 36|0);
 HEAP32[$2>>2] = $1;
 $3 = (($0) + 64|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $7 = (_sqlite3DbMallocSize($0,$1)|0);
  $8 = (_sqlite3RowSetInit($0,$1,$7)|0);
  $9 = (($pMem) + 16|0);
  HEAP32[$9>>2] = $8;
  $10 = (($pMem) + 28|0);
  HEAP16[$10>>1] = 32;
  STACKTOP = sp;return;
 } else {
  $6 = (($pMem) + 28|0);
  HEAP16[$6>>1] = 1;
  STACKTOP = sp;return;
 }
}
function _sqlite3RowSetInsert($p,$0,$1) {
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_rowSetEntryAlloc($p)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $2;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($2) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = (($p) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $31 = (($p) + 8|0);
  HEAP32[$31>>2] = $2;
 } else {
  $12 = (($p) + 26|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 & 1;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = $10;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)<($1|0);
   $24 = ($22|0)==($1|0);
   $25 = ($19>>>0)<($0>>>0);
   $26 = $24 & $25;
   $27 = $23 | $26;
   if (!($27)) {
    $28 = $14 & 254;
    $29 = $28&255;
    HEAP8[$12>>0] = $29;
   }
  }
  $30 = (($10) + 8|0);
  HEAP32[$30>>2] = $2;
 }
 HEAP32[$9>>2] = $2;
 STACKTOP = sp;return;
}
function _sqlite3RowSetNext($p,$pRowid) {
 $p = $p|0;
 $pRowid = $pRowid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 26|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 2;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  _rowSetToList($p);
 }
 $4 = (($p) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = $5;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $pRowid;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($5) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$4>>2] = $18;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3RowSetClear($p);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3RowSetTest($pRowSet,$iBatch,$0,$1) {
 $pRowSet = $pRowSet|0;
 $iBatch = $iBatch|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p$1$lcssa = 0, $p$1$ph = 0, $p$112 = 0, $p$2 = 0, $p$2$in$be = 0, $p$22 = 0, $p$23 = 0, $pAux = 0, $pTail = 0, $pTree$0 = 0, $pTree$0$in$lcssa = 0, $pTree$011 = 0, $pTree$013 = 0, $pTree$1 = 0, $pTree$15 = 0, $pTree$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pAux = sp + 4|0;
 $pTail = sp;
 $2 = (($pRowSet) + 27|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==($iBatch<<24>>24);
 if (!($4)) {
  $5 = (($pRowSet) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = (($pRowSet) + 20|0);
   $9 = (($pRowSet) + 26|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $13 = (_rowSetEntrySort($6)|0);
    $p$1$ph = $13;
   } else {
    $p$1$ph = $6;
   }
   $pTree$011 = HEAP32[$8>>2]|0;
   $14 = ($pTree$011|0)==(0|0);
   L8: do {
    if ($14) {
     $p$1$lcssa = $p$1$ph;$pTree$0$in$lcssa = $8;
     label = 9;
    } else {
     $p$112 = $p$1$ph;$pTree$013 = $pTree$011;
     while(1) {
      $15 = (($pTree$013) + 12|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==(0|0);
      if ($17) {
       break;
      }
      $18 = (($pTree$013) + 8|0);
      _rowSetTreeToList($16,$pAux,$pTail);
      HEAP32[$15>>2] = 0;
      $19 = HEAP32[$pAux>>2]|0;
      $20 = (_rowSetEntryMerge($19,$p$112)|0);
      $pTree$0 = HEAP32[$18>>2]|0;
      $21 = ($pTree$0|0)==(0|0);
      if ($21) {
       $p$1$lcssa = $20;$pTree$0$in$lcssa = $18;
       label = 9;
       break L8;
      } else {
       $p$112 = $20;$pTree$013 = $pTree$0;
      }
     }
     $22 = (_rowSetListToTree($p$112)|0);
     HEAP32[$15>>2] = $22;
    }
   } while(0);
   if ((label|0) == 9) {
    $23 = (_rowSetEntryAlloc($pRowSet)|0);
    HEAP32[$pTree$0$in$lcssa>>2] = $23;
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     $25 = $23;
     $26 = $25;
     HEAP32[$26>>2] = 0;
     $27 = (($25) + 4)|0;
     $28 = $27;
     HEAP32[$28>>2] = 0;
     $29 = (($23) + 8|0);
     HEAP32[$29>>2] = 0;
     $30 = (_rowSetListToTree($p$1$lcssa)|0);
     $31 = (($23) + 12|0);
     HEAP32[$31>>2] = $30;
    }
   }
   HEAP32[$5>>2] = 0;
   $32 = (($pRowSet) + 12|0);
   HEAP32[$32>>2] = 0;
   $33 = HEAP8[$9>>0]|0;
   $34 = $33&255;
   $35 = $34 | 1;
   $36 = $35&255;
   HEAP8[$9>>0] = $36;
  }
  HEAP8[$2>>0] = $iBatch;
 }
 $37 = (($pRowSet) + 20|0);
 $pTree$15 = HEAP32[$37>>2]|0;
 $38 = ($pTree$15|0)==(0|0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $pTree$16 = $pTree$15;
 }
 L21: while(1) {
  $39 = (($pTree$16) + 12|0);
  $p$22 = HEAP32[$39>>2]|0;
  $40 = ($p$22|0)==(0|0);
  if (!($40)) {
   $p$23 = $p$22;
   while(1) {
    $41 = $p$23;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<($1|0);
    $48 = ($46|0)==($1|0);
    $49 = ($43>>>0)<($0>>>0);
    $50 = $48 & $49;
    $51 = $47 | $50;
    if ($51) {
     $52 = (($p$23) + 8|0);
     $p$2$in$be = $52;
    } else {
     $53 = ($46|0)>($1|0);
     $54 = ($46|0)==($1|0);
     $55 = ($43>>>0)>($0>>>0);
     $56 = $54 & $55;
     $57 = $53 | $56;
     if (!($57)) {
      $$0 = 1;
      label = 21;
      break L21;
     }
     $58 = (($p$23) + 12|0);
     $p$2$in$be = $58;
    }
    $p$2 = HEAP32[$p$2$in$be>>2]|0;
    $59 = ($p$2|0)==(0|0);
    if ($59) {
     break;
    } else {
     $p$23 = $p$2;
    }
   }
  }
  $60 = (($pTree$16) + 8|0);
  $pTree$1 = HEAP32[$60>>2]|0;
  $61 = ($pTree$1|0)==(0|0);
  if ($61) {
   $$0 = 0;
   label = 21;
   break;
  } else {
   $pTree$16 = $pTree$1;
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3PagerOkToChangeJournalMode($pPager) {
 $pPager = $pPager|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 15|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)>(2);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPager) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (($pPager) + 72|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(0);
  $15 = ($13|0)==(0);
  $16 = ($10>>>0)>(0);
  $17 = $15 & $16;
  $18 = $14 | $17;
  if ($18) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerWalSupported($pPager$0$1$val,$pPager$0$27$val$0$0$val) {
 $pPager$0$1$val = $pPager$0$1$val|0;
 $pPager$0$27$val$0$0$val = $pPager$0$27$val$0$0$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pPager$0$1$val<<24>>24)==(0);
 if ($0) {
  $1 = HEAP32[$pPager$0$27$val$0$0$val>>2]|0;
  $2 = ($1|0)>(1);
  if ($2) {
   $3 = (($pPager$0$27$val$0$0$val) + 52|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)!=(0|0);
   $7 = $5;
  } else {
   $7 = 0;
  }
 } else {
  $7 = 1;
 }
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _sqlite3PagerCloseWal($pPager) {
 $pPager = $pPager|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $logexists = 0, $or$cond = 0, $rc$1 = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $logexists = sp;
 $0 = (($pPager) + 208|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$logexists>>2] = 0;
  $3 = (_pagerLockDb($pPager,1)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $rc$2 = $3;
   STACKTOP = sp;return ($rc$2|0);
  }
  $5 = HEAP32[$pPager>>2]|0;
  $6 = (($pPager) + 212|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_sqlite3OsAccess($5,$7,0,$logexists)|0);
  $9 = ($8|0)!=(0);
  $10 = HEAP32[$logexists>>2]|0;
  $11 = ($10|0)==(0);
  $or$cond = $9 | $11;
  if ($or$cond) {
   $rc$1 = $8;
  } else {
   $12 = (_pagerOpenWal($pPager)|0);
   $rc$1 = $12;
  }
  $13 = ($rc$1|0)==(0);
  if (!($13)) {
   $rc$2 = $rc$1;
   STACKTOP = sp;return ($rc$2|0);
  }
  $$pr = HEAP32[$0>>2]|0;
  $14 = ($$pr|0)==(0|0);
  if ($14) {
   $rc$2 = 0;
   STACKTOP = sp;return ($rc$2|0);
  }
 }
 $15 = (_pagerExclusiveLock($pPager)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $rc$2 = $15;
  STACKTOP = sp;return ($rc$2|0);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($pPager) + 9|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($pPager) + 152|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($pPager) + 200|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_sqlite3WalClose($17,$20,$22,$24)|0);
 HEAP32[$0>>2] = 0;
 $rc$2 = $25;
 STACKTOP = sp;return ($rc$2|0);
}
function _sqlite3PagerSetJournalMode($pPager,$eMode) {
 $pPager = $pPager|0;
 $eMode = $eMode|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0, $rc$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (($pPager) + 14|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 3;
 } else {
  if ((($eMode|0) == 2) | (($eMode|0) == 4)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = $1&255;
   $6 = ($5|0)==($eMode|0);
   if (!($6)) {
    $7 = $eMode&255;
    HEAP8[$0>>0] = $7;
    $8 = (($pPager) + 4|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = $5 & 5;
     $12 = ($11|0)==(1);
     if ($12) {
      $13 = $eMode & 1;
      $14 = ($13|0)==(0);
      if ($14) {
       $15 = (($pPager) + 64|0);
       $16 = HEAP32[$15>>2]|0;
       _sqlite3OsClose($16);
       $17 = (($pPager) + 16|0);
       $18 = HEAP8[$17>>0]|0;
       $19 = ($18&255)>(1);
       if ($19) {
        $20 = HEAP32[$pPager>>2]|0;
        $21 = (($pPager) + 172|0);
        $22 = HEAP32[$21>>2]|0;
        (_sqlite3OsDelete($20,$22,0)|0);
        break;
       }
       $23 = (($pPager) + 15|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = ($24<<24>>24)==(0);
       if ($25) {
        $26 = (_sqlite3PagerSharedLock($pPager)|0);
        $$pr = HEAP8[$23>>0]|0;
        $28 = $$pr;$rc$0 = $26;
       } else {
        $28 = $24;$rc$0 = 0;
       }
       $27 = ($28<<24>>24)==(1);
       if ($27) {
        $29 = (_pagerLockDb($pPager,2)|0);
        $rc$1 = $29;
       } else {
        $rc$1 = $rc$0;
       }
       $30 = ($rc$1|0)==(0);
       if ($30) {
        $31 = HEAP32[$pPager>>2]|0;
        $32 = (($pPager) + 172|0);
        $33 = HEAP32[$32>>2]|0;
        (_sqlite3OsDelete($31,$33,0)|0);
        $34 = ($24<<24>>24)==(1);
        if ($34) {
         (_pagerUnlockDb($pPager,1)|0);
         break;
        }
       }
       if ($25) {
        _pager_unlock($pPager);
       }
      }
     }
    }
   }
  }
 } while(0);
 $35 = HEAP8[$0>>0]|0;
 $36 = $35&255;
 STACKTOP = sp;return ($36|0);
}
function _sqlite3RunVacuum($pzErrMsg,$db) {
 $pzErrMsg = $pzErrMsg|0;
 $db = $db|0;
 var $$ = 0, $$0 = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx1$val$idx$val = 0, $$idx10$val = 0, $$idx11$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13$val = 0, $$idx14$val = 0, $$idx15 = 0, $$idx15$val = 0, $$idx16$val = 0, $$idx17$val = 0, $$idx18$val = 0, $$idx19$val = 0, $$idx2$val = 0;
 var $$idx2$val$idx = 0, $$idx2$val$idx$val = 0, $$idx20$val = 0, $$idx21$val = 0, $$idx3$val$idx = 0, $$idx3$val$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$idx5$val = 0, $$idx6$val = 0, $$idx7$val = 0, $$idx8$val = 0, $$idx9$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $db$idx = 0, $db$idx$val = 0, $i$022 = 0, $meta = 0;
 var $pDb$0 = 0, $rc$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $meta = sp + 12|0;
 $0 = (($db) + 62|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  _sqlite3SetString($pzErrMsg,$db,32064,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($db) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(1);
 if ($5) {
  _sqlite3SetString($pzErrMsg,$db,32104,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($db) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($db) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($db) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($db) + 164|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $7 & -2762753;
 $15 = $14 | 2107392;
 HEAP32[$6>>2] = $15;
 HEAP32[$12>>2] = 0;
 $16 = (($db) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $$idx1 = (($19) + 4|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $$idx1$val$idx$val = HEAP32[$$idx1$val>>2]|0;
 $20 = (_sqlite3BtreePager($$idx1$val$idx$val)|0);
 $$idx4 = (($20) + 14|0);
 $$idx4$val = HEAP8[$$idx4>>0]|0;
 $21 = (_sqlite3PagerIsMemdb($$idx4$val)|0);
 $22 = (($db) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $db$idx = (($db) + 63|0);
 $db$idx$val = HEAP8[$db$idx>>0]|0;
 $24 = (_sqlite3TempInMemory($db$idx$val)|0);
 $25 = ($24|0)==(0);
 $$ = $25 ? 32184 : 32152;
 $26 = (_execSql($db,$pzErrMsg,$$)|0);
 $27 = HEAP32[$22>>2]|0;
 $28 = ($27|0)>($23|0);
 if ($28) {
  $29 = (($27) + -1)|0;
  $30 = HEAP32[$16>>2]|0;
  $31 = (($30) + ($29<<4)|0);
  $pDb$0 = $31;
 } else {
  $pDb$0 = 0;
 }
 $32 = ($26|0)==(0);
 L12: do {
  if ($32) {
   $33 = (($27) + -1)|0;
   $34 = HEAP32[$16>>2]|0;
   $35 = ((($34) + ($33<<4)|0) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   (_sqlite3BtreeCommit($36)|0);
   $37 = (_sqlite3BtreeGetReserve($19)|0);
   $38 = (_execSql($db,$pzErrMsg,32208)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = (_execSql($db,$pzErrMsg,32248)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = (_sqlite3BtreeBeginTrans($19,2)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $$idx$val = HEAP32[$$idx1>>2]|0;
      $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
      $44 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
      $$idx15 = (($44) + 5|0);
      $$idx15$val = HEAP8[$$idx15>>0]|0;
      $45 = (_sqlite3PagerGetJournalMode($$idx15$val)|0);
      $46 = ($45|0)==(5);
      if ($46) {
       $47 = (($db) + 72|0);
       HEAP32[$47>>2] = 0;
      }
      $$idx3$val$idx = (($$idx$val) + 32|0);
      $$idx3$val$idx$val = HEAP32[$$idx3$val$idx>>2]|0;
      $48 = (_sqlite3BtreeGetPageSize($$idx3$val$idx$val)|0);
      $$idx11$val = HEAP32[$36>>2]|0;
      $$idx12 = (($36) + 4|0);
      $$idx12$val = HEAP32[$$idx12>>2]|0;
      $49 = (_sqlite3BtreeSetPageSize($$idx11$val,$$idx12$val,$48,$37,0)|0);
      $50 = ($49|0)==(0);
      if ($50) {
       $51 = ($21|0)==(0);
       if ($51) {
        $52 = (($db) + 72|0);
        $53 = HEAP32[$52>>2]|0;
        $$idx9$val = HEAP32[$36>>2]|0;
        $$idx10$val = HEAP32[$$idx12>>2]|0;
        $54 = (_sqlite3BtreeSetPageSize($$idx9$val,$$idx10$val,$53,$37,0)|0);
        $55 = ($54|0)==(0);
        if (!($55)) {
         $rc$0 = 7;
         break;
        }
       }
       $56 = (($db) + 64|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = ($57<<24>>24)==(0);
       if ($58) {
        $59 = (($db) + 66|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = ($60<<24>>24)>(-1);
        if ($61) {
         $62 = $60 << 24 >> 24;
         $64 = $62;
        } else {
         $63 = (_sqlite3BtreeGetAutoVacuum($19)|0);
         $64 = $63;
        }
        $$idx20$val = HEAP32[$36>>2]|0;
        $$idx21$val = HEAP32[$$idx12>>2]|0;
        (_sqlite3BtreeSetAutoVacuum($$idx20$val,$$idx21$val,$64)|0);
        $65 = (_execExecSql($db,$pzErrMsg,32256)|0);
        $66 = ($65|0)==(0);
        if ($66) {
         $67 = (_execExecSql($db,$pzErrMsg,32408)|0);
         $68 = ($67|0)==(0);
         if ($68) {
          $69 = (_execExecSql($db,$pzErrMsg,32512)|0);
          $70 = ($69|0)==(0);
          if ($70) {
           $71 = (_execExecSql($db,$pzErrMsg,32632)|0);
           $72 = ($71|0)==(0);
           if ($72) {
            $73 = (_execExecSql($db,$pzErrMsg,32832)|0);
            $74 = ($73|0)==(0);
            if ($74) {
             $75 = (_execExecSql($db,$pzErrMsg,32952)|0);
             $76 = ($75|0)==(0);
             if ($76) {
              $77 = (_execSql($db,$pzErrMsg,33112)|0);
              $78 = ($77|0)==(0);
              if ($78) {
               $i$022 = 0;
               while(1) {
                $81 = (33296 + ($i$022)|0);
                $82 = HEAP8[$81>>0]|0;
                $83 = $82&255;
                $$idx13$val = HEAP32[$19>>2]|0;
                $$idx14$val = HEAP32[$$idx1>>2]|0;
                _sqlite3BtreeGetMeta($$idx13$val,$$idx14$val,$83,$meta);
                $84 = HEAP32[$meta>>2]|0;
                $85 = $i$022 | 1;
                $86 = (33296 + ($85)|0);
                $87 = HEAP8[$86>>0]|0;
                $88 = $87&255;
                $89 = (($88) + ($84))|0;
                $$idx16$val = HEAP32[$36>>2]|0;
                $$idx17$val = HEAP32[$$idx12>>2]|0;
                $90 = (_sqlite3BtreeUpdateMeta($$idx16$val,$$idx17$val,$83,$89)|0);
                $91 = ($90|0)==(0);
                $80 = (($i$022) + 2)|0;
                if (!($91)) {
                 $rc$0 = $90;
                 break L12;
                }
                $79 = ($80|0)<(10);
                if ($79) {
                 $i$022 = $80;
                } else {
                 break;
                }
               }
               $92 = (_sqlite3BtreeCopyFile($19,$36)|0);
               $93 = ($92|0)==(0);
               if (!($93)) {
                $rc$0 = $92;
                break;
               }
               $94 = (_sqlite3BtreeCommit($36)|0);
               $95 = ($94|0)==(0);
               if (!($95)) {
                $rc$0 = $94;
                break;
               }
               $96 = (_sqlite3BtreeGetAutoVacuum($36)|0);
               $$idx18$val = HEAP32[$19>>2]|0;
               $$idx19$val = HEAP32[$$idx1>>2]|0;
               (_sqlite3BtreeSetAutoVacuum($$idx18$val,$$idx19$val,$96)|0);
               $$idx2$val = HEAP32[$$idx12>>2]|0;
               $$idx2$val$idx = (($$idx2$val) + 32|0);
               $$idx2$val$idx$val = HEAP32[$$idx2$val$idx>>2]|0;
               $97 = (_sqlite3BtreeGetPageSize($$idx2$val$idx$val)|0);
               $$idx7$val = HEAP32[$19>>2]|0;
               $$idx8$val = HEAP32[$$idx1>>2]|0;
               $98 = (_sqlite3BtreeSetPageSize($$idx7$val,$$idx8$val,$97,$37,1)|0);
               $rc$0 = $98;
              } else {
               $rc$0 = $77;
              }
             } else {
              $rc$0 = $75;
             }
            } else {
             $rc$0 = $73;
            }
           } else {
            $rc$0 = $71;
           }
          } else {
           $rc$0 = $69;
          }
         } else {
          $rc$0 = $67;
         }
        } else {
         $rc$0 = $65;
        }
       } else {
        $rc$0 = 7;
       }
      } else {
       $rc$0 = 7;
      }
     } else {
      $rc$0 = $42;
     }
    } else {
     $rc$0 = $40;
    }
   } else {
    $rc$0 = $38;
   }
  } else {
   $rc$0 = $26;
  }
 } while(0);
 HEAP32[$6>>2] = $7;
 HEAP32[$8>>2] = $9;
 HEAP32[$10>>2] = $11;
 HEAP32[$12>>2] = $13;
 $$idx5$val = HEAP32[$19>>2]|0;
 $$idx6$val = HEAP32[$$idx1>>2]|0;
 (_sqlite3BtreeSetPageSize($$idx5$val,$$idx6$val,-1,-1,1)|0);
 HEAP8[$0>>0] = 1;
 $99 = ($pDb$0|0)==(0|0);
 if (!($99)) {
  $100 = (($pDb$0) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  _sqlite3BtreeClose($101);
  HEAP32[$100>>2] = 0;
  $102 = (($pDb$0) + 12|0);
  HEAP32[$102>>2] = 0;
 }
 _sqlite3ResetAllSchemasOfConnection($db);
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeIncrVacuum($p$0$0$val,$p$0$1$val) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = (($p$0$1$val) + 17|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $rc$1 = 101;
  STACKTOP = sp;return ($rc$1|0);
 }
 $$idx = (($p$0$1$val) + 44|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = (_btreePagecount($$idx$val)|0);
 $4 = (($p$0$1$val) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 36|0);
 $9 = (_sqlite3Get4byte($8)|0);
 $10 = (_finalDbSize($p$0$1$val,$3,$9)|0);
 $11 = ($3>>>0)<($10>>>0);
 if ($11) {
  _sqlite3CorruptError(53973);
  $rc$1 = 11;
  STACKTOP = sp;return ($rc$1|0);
 }
 $12 = ($9|0)==(0);
 if ($12) {
  $rc$1 = 101;
  STACKTOP = sp;return ($rc$1|0);
 }
 $13 = (_saveAllCursors($p$0$1$val,0,0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $rc$1 = $13;
  STACKTOP = sp;return ($rc$1|0);
 }
 _invalidateAllOverflowCache($p$0$1$val);
 $15 = (_incrVacuumStep($p$0$1$val,$10,$3,0)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $rc$1 = $15;
  STACKTOP = sp;return ($rc$1|0);
 }
 $17 = HEAP32[$4>>2]|0;
 $18 = (($17) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_sqlite3PagerWrite($19)|0);
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$$idx>>2]|0;
 _sqlite3Put4byte($24,$25);
 $rc$1 = $20;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3BtreeLockTable($p,$iTab,$isWriteLock) {
 $p = $p|0;
 $iTab = $iTab|0;
 $isWriteLock = $isWriteLock|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $3 = $isWriteLock&255;
 $4 = (($3) + 1)|0;
 $5 = $4&255;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $6 = (_querySharedCacheTableLock($p,$iTab,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $rc$0 = $6;
  STACKTOP = sp;return ($rc$0|0);
 }
 $8 = (_setSharedCacheTableLock($p,$iTab,$5)|0);
 $rc$0 = $8;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3VtabBegin($db,$pVTab) {
 $db = $db|0;
 $pVTab = $pVTab|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($db) + 320|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 6;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 L3: do {
  if ((label|0) == 3) {
   $6 = ($pVTab|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = (($pVTab) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 56|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0 = 0;
    } else {
     if ($2) {
      $13 = (($db) + 320|0);
      $14 = HEAP32[$13>>2]|0;
      $i$01 = 0;
      while(1) {
       $17 = (($14) + ($i$01<<2)|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($18|0)==($pVTab|0);
       $16 = (($i$01) + 1)|0;
       if ($19) {
        $$0 = 0;
        break L3;
       }
       $15 = ($16|0)<($1|0);
       if ($15) {
        $i$01 = $16;
       } else {
        break;
       }
      }
     }
     $20 = (_growVTrans($db)|0);
     $21 = ($20|0)==(0);
     if ($21) {
      $22 = HEAP32[$10>>2]|0;
      $23 = HEAP32[$7>>2]|0;
      $24 = (FUNCTION_TABLE_ii[$22 & 255]($23)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       _addToVTrans($db,$pVTab);
       $$0 = 0;
      } else {
       $$0 = $24;
      }
     } else {
      $$0 = $20;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VtabCallCreate($db,$iDb,$zTab,$pzErr) {
 $db = $db|0;
 $iDb = $iDb|0;
 $zTab = $zTab|0;
 $pzErr = $pzErr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $rc$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($iDb<<4)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3FindTable($db,$zTab,$3)|0);
 $5 = (($4) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($db) + 300|0);
 $9 = (_sqlite3Strlen30($7)|0);
 $10 = (_sqlite3HashFind($8,$7,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$vararg_buffer>>2] = $7;
  $12 = (_sqlite3MPrintf($db,18096,$vararg_buffer)|0);
  HEAP32[$pzErr>>2] = $12;
  $rc$1 = 1;
  STACKTOP = sp;return ($rc$1|0);
 }
 $13 = HEAP32[$10>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_vtabCallConstructor($db,$4,$10,$15,$pzErr)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $rc$1 = $16;
  STACKTOP = sp;return ($rc$1|0);
 }
 $18 = (_sqlite3GetVTable($db,$4)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $20 = (_growVTrans($db)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $rc$1 = $20;
  STACKTOP = sp;return ($rc$1|0);
 }
 $22 = (_sqlite3GetVTable($db,$4)|0);
 _addToVTrans($db,$22);
 $rc$1 = 0;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3VtabCallDestroy($db,$iDb,$zTab) {
 $db = $db|0;
 $iDb = $iDb|0;
 $zTab = $zTab|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($iDb<<4)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3FindTable($db,$zTab,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $6 = (($4) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $9 = (_vtabDisconnectAll($db,$4)|0);
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($9) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$14 & 255]($16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $rc$0 = $17;
  STACKTOP = sp;return ($rc$0|0);
 }
 HEAP32[$15>>2] = 0;
 HEAP32[$6>>2] = 0;
 _sqlite3VtabUnlock($9);
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _sqlite3BtreeMaxPageCount($p,$mxPage) {
 $p = $p|0;
 $mxPage = $mxPage|0;
 var $0 = 0, $1 = 0, $2 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = HEAP32[$p$idx1>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3PagerMaxPageCount($1,$mxPage)|0);
 STACKTOP = sp;return ($2|0);
}
function _sqlite3VdbeExpandSql($p,$zRawSql) {
 $p = $p|0;
 $zRawSql = $zRawSql|0;
 var $$04 = 0, $$1 = 0, $$29 = 0, $$pre = 0, $$pre11 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $exitcond = 0, $i$05 = 0, $idx = 0, $nToken = 0, $nextIndex$08 = 0, $out = 0, $utf8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, $zBase = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer15 = sp + 80|0;
 $vararg_buffer12 = sp + 72|0;
 $vararg_buffer8 = sp + 64|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $idx = sp + 116|0;
 $nToken = sp + 112|0;
 $out = sp + 84|0;
 $zBase = sp + 120|0;
 $utf8 = sp;
 HEAP32[$idx>>2] = 0;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($0) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3StrAccumInit($out,$zBase,100,$2);
 HEAP32[$out>>2] = $0;
 $3 = (($0) + 152|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(1);
 $6 = HEAP8[$zRawSql>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($5) {
  if ($7) {
   $92 = (_sqlite3StrAccumFinish($out)|0);
   STACKTOP = sp;return ($92|0);
  } else {
   $$04 = $zRawSql;$93 = $6;
  }
  while(1) {
   $$1 = $$04;$14 = $93;
   while(1) {
    $12 = (($$1) + 1|0);
    $13 = ($14<<24>>24)==(10);
    if ($13) {
     break;
    }
    $15 = HEAP8[$12>>0]|0;
    $16 = ($15<<24>>24)==(0);
    if ($16) {
     break;
    } else {
     $$1 = $12;$14 = $15;
    }
   }
   _sqlite3StrAccumAppend($out,32008,3);
   $17 = $12;
   $18 = $$04;
   $19 = (($17) - ($18))|0;
   _sqlite3StrAccumAppend($out,$$04,$19);
   $20 = HEAP8[$12>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    break;
   } else {
    $$04 = $12;$93 = $20;
   }
  }
  $92 = (_sqlite3StrAccumFinish($out)|0);
  STACKTOP = sp;return ($92|0);
 }
 if ($7) {
  $92 = (_sqlite3StrAccumFinish($out)|0);
  STACKTOP = sp;return ($92|0);
 }
 $8 = (($p) + 60|0);
 $9 = (($0) + 16|0);
 $10 = (($utf8) + 24|0);
 $11 = (($utf8) + 4|0);
 $$29 = $zRawSql;$nextIndex$08 = 1;
 while(1) {
  $22 = (_findNextHostParameter($$29,$nToken)|0);
  _sqlite3StrAccumAppend($out,$$29,$22);
  $23 = (($$29) + ($22)|0);
  $24 = HEAP32[$nToken>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   label = 32;
   break;
  }
  $26 = HEAP8[$23>>0]|0;
  $27 = ($26<<24>>24)==(63);
  do {
   if ($27) {
    $28 = ($24|0)>(1);
    if ($28) {
     $$sum1 = (($22) + 1)|0;
     $29 = (($$29) + ($$sum1)|0);
     (_sqlite3GetInt32($29,$idx)|0);
     $$pre = HEAP32[$nToken>>2]|0;
     $$pre11 = HEAP32[$idx>>2]|0;
     $31 = $$pre;$34 = $$pre11;
     break;
    } else {
     HEAP32[$idx>>2] = $nextIndex$08;
     $31 = $24;$34 = $nextIndex$08;
     break;
    }
   } else {
    $30 = (_sqlite3VdbeParameterIndex($p,$23,$24)|0);
    HEAP32[$idx>>2] = $30;
    $31 = $24;$34 = $30;
   }
  } while(0);
  $$sum = (($31) + ($22))|0;
  $32 = (($$29) + ($$sum)|0);
  $33 = (($34) + 1)|0;
  $35 = (($34) + -1)|0;
  $36 = HEAP32[$8>>2]|0;
  $37 = ((($36) + (($35*40)|0)|0) + 28|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $39 & 1;
  $41 = ($40|0)==(0);
  do {
   if ($41) {
    $42 = $39 & 4;
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = ((($36) + (($35*40)|0)|0) + 16|0);
     $45 = $44;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = $vararg_buffer;
     $52 = $51;
     HEAP32[$52>>2] = $47;
     $53 = (($51) + 4)|0;
     $54 = $53;
     HEAP32[$54>>2] = $50;
     _sqlite3XPrintf($out,0,9608,$vararg_buffer);
     break;
    }
    $57 = $39 & 8;
    $58 = ($57|0)==(0);
    if (!($58)) {
     $59 = ((($36) + (($35*40)|0)|0) + 8|0);
     $60 = +HEAPF64[$59>>3];
     HEAPF64[tempDoublePtr>>3]=$60;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
     _sqlite3XPrintf($out,0,9960,$vararg_buffer1);
     break;
    }
    $61 = $39 & 2;
    $62 = ($61|0)==(0);
    if (!($62)) {
     $63 = HEAP32[$9>>2]|0;
     $64 = (($63) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + 77|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = ($67<<24>>24)==(1);
     if ($68) {
      $75 = ((($36) + (($35*40)|0)|0) + 24|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($36) + (($35*40)|0)|0) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $76;
      $vararg_ptr11 = (($vararg_buffer8) + 4|0);
      HEAP32[$vararg_ptr11>>2] = $78;
      _sqlite3XPrintf($out,0,32016,$vararg_buffer8);
      break;
     } else {
      dest=$utf8+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      HEAP32[$utf8>>2] = $0;
      $69 = ((($36) + (($35*40)|0)|0) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ((($36) + (($35*40)|0)|0) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      (_sqlite3VdbeMemSetStr($utf8,$70,$72,$67,0)|0);
      (_sqlite3VdbeChangeEncoding($utf8,1)|0);
      $73 = HEAP32[$10>>2]|0;
      $74 = HEAP32[$11>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $73;
      $vararg_ptr7 = (($vararg_buffer4) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $74;
      _sqlite3XPrintf($out,0,32016,$vararg_buffer4);
      _sqlite3VdbeMemRelease($utf8);
      break;
     }
    }
    $79 = $39 & 16384;
    $80 = ($79|0)==(0);
    if (!($80)) {
     $81 = ((($36) + (($35*40)|0)|0) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $82;
     _sqlite3XPrintf($out,0,32024,$vararg_buffer12);
     break;
    }
    _sqlite3StrAccumAppend($out,32040,2);
    $83 = ((($36) + (($35*40)|0)|0) + 24|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)>(0);
    if ($85) {
     $86 = ((($36) + (($35*40)|0)|0) + 4|0);
     $i$05 = 0;
     while(1) {
      $87 = HEAP32[$86>>2]|0;
      $88 = (($87) + ($i$05)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = $89&255;
      HEAP32[$vararg_buffer15>>2] = $90;
      _sqlite3XPrintf($out,0,32048,$vararg_buffer15);
      $91 = (($i$05) + 1)|0;
      $exitcond = ($91|0)==($84|0);
      if ($exitcond) {
       break;
      } else {
       $i$05 = $91;
      }
     }
    }
    _sqlite3StrAccumAppend($out,32056,1);
   } else {
    _sqlite3StrAccumAppend($out,9992,4);
   }
  } while(0);
  $55 = HEAP8[$32>>0]|0;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   label = 32;
   break;
  } else {
   $$29 = $32;$nextIndex$08 = $33;
  }
 }
 if ((label|0) == 32) {
  $92 = (_sqlite3StrAccumFinish($out)|0);
  STACKTOP = sp;return ($92|0);
 }
 return 0|0;
}
function _findNextHostParameter($zSql,$pnToken) {
 $zSql = $zSql|0;
 $pnToken = $pnToken|0;
 var $$04 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $nTotal$02 = 0, $nTotal$03 = 0, $tokenType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tokenType = sp;
 HEAP32[$pnToken>>2] = 0;
 $0 = HEAP8[$zSql>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $nTotal$02 = 0;
  } else {
   $$04 = $zSql;$nTotal$03 = 0;
   while(1) {
    $2 = (_sqlite3GetToken($$04,$tokenType)|0);
    $3 = HEAP32[$tokenType>>2]|0;
    $4 = ($3|0)==(135);
    if ($4) {
     break;
    }
    $5 = (($2) + ($nTotal$03))|0;
    $6 = (($$04) + ($2)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $nTotal$02 = $5;
     break L1;
    } else {
     $$04 = $6;$nTotal$03 = $5;
    }
   }
   HEAP32[$pnToken>>2] = $2;
   $nTotal$02 = $nTotal$03;
  }
 } while(0);
 STACKTOP = sp;return ($nTotal$02|0);
}
function _sqlite3PagerMaxPageCount($pPager,$mxPage) {
 $pPager = $pPager|0;
 $mxPage = $mxPage|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mxPage|0)>(0);
 $1 = (($pPager) + 156|0);
 if ($0) {
  HEAP32[$1>>2] = $mxPage;
  $2 = $mxPage;
 } else {
  $$pre = HEAP32[$1>>2]|0;
  $2 = $$pre;
 }
 STACKTOP = sp;return ($2|0);
}
function _growVTrans($db) {
 $db = $db|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1|0) % 5)&-1;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $1 << 2;
 $5 = (($4) + 20)|0;
 $6 = (($db) + 320|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3DbRealloc($db,$7,$5)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($8) + ($10<<2)|0);
 ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;
 HEAP32[$6>>2] = $8;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _addToVTrans($db,$pVTab) {
 $db = $db|0;
 $pVTab = $pVTab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = (($db) + 320|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $pVTab;
 _sqlite3VtabLock($pVTab);
 STACKTOP = sp;return;
}
function _setSharedCacheTableLock($p,$iTable,$eLock) {
 $p = $p|0;
 $iTable = $iTable|0;
 $eLock = $eLock|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pIter$0 = 0, $pIter$02 = 0, $pIter$03 = 0, $pLock$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 72|0);
 $pIter$02 = HEAP32[$2>>2]|0;
 $3 = ($pIter$02|0)==(0|0);
 L1: do {
  if ($3) {
   label = 6;
  } else {
   $pIter$03 = $pIter$02;
   while(1) {
    $4 = (($pIter$03) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==($iTable|0);
    if ($6) {
     $7 = HEAP32[$pIter$03>>2]|0;
     $8 = ($7|0)==($p|0);
     if ($8) {
      break;
     }
    }
    $9 = (($pIter$03) + 12|0);
    $pIter$0 = HEAP32[$9>>2]|0;
    $10 = ($pIter$0|0)==(0|0);
    if ($10) {
     label = 6;
     break L1;
    } else {
     $pIter$03 = $pIter$0;
    }
   }
   $11 = ($pIter$03|0)==(0|0);
   if ($11) {
    label = 6;
   } else {
    $pLock$1 = $pIter$03;
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $12 = (_sqlite3MallocZero(16)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    $14 = (($12) + 4|0);
    HEAP32[$14>>2] = $iTable;
    HEAP32[$12>>2] = $p;
    $15 = HEAP32[$2>>2]|0;
    $16 = (($12) + 12|0);
    HEAP32[$16>>2] = $15;
    HEAP32[$2>>2] = $12;
    $pLock$1 = $12;
    break;
   }
  }
 } while(0);
 $17 = (($pLock$1) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18&255)<($eLock&255);
 if (!($19)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$17>>0] = $eLock;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _finalDbSize($pBt,$nOrig,$nFree) {
 $pBt = $pBt|0;
 $nOrig = $nOrig|0;
 $nFree = $nFree|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $nFin$0 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1>>>0) / 5)&-1;
 $3 = (($nFree) - ($nOrig))|0;
 $4 = (_ptrmapPageno($pBt,$nOrig)|0);
 $5 = (($3) + ($2))|0;
 $6 = (($5) + ($4))|0;
 $7 = (($6>>>0) / ($2>>>0))&-1;
 $8 = (($nOrig) - ($nFree))|0;
 $9 = (($8) - ($7))|0;
 $10 = HEAP32[1648>>2]|0;
 $11 = (($pBt) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10>>>0) / ($12>>>0))&-1;
 $14 = (($13) + 1)|0;
 $15 = ($14>>>0)<($nOrig>>>0);
 $16 = ($9>>>0)<($14>>>0);
 $or$cond = $15 & $16;
 $17 = $or$cond << 31 >> 31;
 $$ = (($17) + ($9))|0;
 $nFin$0 = $$;
 while(1) {
  $18 = (_ptrmapPageno($pBt,$nFin$0)|0);
  $19 = ($18|0)==($nFin$0|0);
  $20 = ($nFin$0|0)==($14|0);
  $or$cond1 = $19 | $20;
  if (!($or$cond1)) {
   break;
  }
  $21 = (($nFin$0) + -1)|0;
  $nFin$0 = $21;
 }
 STACKTOP = sp;return ($nFin$0|0);
}
function _invalidateAllOverflowCache($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 8|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $p$02 = $p$01;
 }
 while(1) {
  _invalidateOverflowCache($p$02);
  $2 = (($p$02) + 8|0);
  $p$0 = HEAP32[$2>>2]|0;
  $3 = ($p$0|0)==(0|0);
  if ($3) {
   break;
  } else {
   $p$02 = $p$0;
  }
 }
 STACKTOP = sp;return;
}
function _incrVacuumStep($pBt,$nFin,$iLastPg,$bCommit) {
 $pBt = $pBt|0;
 $nFin = $nFin|0;
 $iLastPg = $iLastPg|0;
 $bCommit = $bCommit|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$not = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $eType = 0, $iFreePg = 0, $iFreePg1 = 0, $iPtrPage = 0, $nFin$ = 0, $or$cond = 0, $pFreePg = 0, $pFreePg2 = 0, $pLastPg = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $eType = sp + 24|0;
 $iPtrPage = sp + 20|0;
 $iFreePg = sp + 16|0;
 $pFreePg = sp + 12|0;
 $iFreePg1 = sp + 8|0;
 $pLastPg = sp + 4|0;
 $pFreePg2 = sp;
 $0 = (_ptrmapPageno($pBt,$iLastPg)|0);
 $1 = ($0|0)==($iLastPg|0);
 do {
  if (!($1)) {
   $2 = HEAP32[1648>>2]|0;
   $3 = (($pBt) + 32|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($2>>>0) / ($4>>>0))&-1;
   $6 = (($5) + 1)|0;
   $7 = ($6|0)==($iLastPg|0);
   if (!($7)) {
    $8 = (($pBt) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 56|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + 36|0);
    $13 = (_sqlite3Get4byte($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 101;
     STACKTOP = sp;return ($$0|0);
    }
    $15 = (_ptrmapGet($pBt,$iLastPg,$eType,$iPtrPage)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $$0 = $15;
     STACKTOP = sp;return ($$0|0);
    }
    $17 = HEAP8[$eType>>0]|0;
    if ((($17<<24>>24) == 2)) {
     $cond = ($bCommit|0)==(0);
     if (!($cond)) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $18 = (_allocateBtreePage($pBt,$pFreePg,$iFreePg,$iLastPg,1)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = HEAP32[$pFreePg>>2]|0;
      _releasePage($20);
      break;
     } else {
      $$0 = $18;
      STACKTOP = sp;return ($$0|0);
     }
    } else if ((($17<<24>>24) == 1)) {
     _sqlite3CorruptError(53858);
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    } else {
     $21 = (_btreeGetPage($pBt,$iLastPg,$pLastPg,0)|0);
     $22 = ($21|0)==(0);
     if (!($22)) {
      $$0 = $21;
      STACKTOP = sp;return ($$0|0);
     }
     $23 = ($bCommit|0)==(0);
     $$ = $23 ? 2 : 0;
     $nFin$ = $23 ? $nFin : 0;
     while(1) {
      $24 = (_allocateBtreePage($pBt,$pFreePg2,$iFreePg1,$nFin$,$$)|0);
      $25 = ($24|0)==(0);
      if (!($25)) {
       label = 13;
       break;
      }
      $27 = HEAP32[$pFreePg2>>2]|0;
      _releasePage($27);
      $$pre = HEAP32[$iFreePg1>>2]|0;
      $$not = $23 ^ 1;
      $28 = ($$pre>>>0)>($nFin>>>0);
      $or$cond = $28 & $$not;
      if (!($or$cond)) {
       label = 15;
       break;
      }
     }
     if ((label|0) == 13) {
      $26 = HEAP32[$pLastPg>>2]|0;
      _releasePage($26);
      $$0 = $24;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 15) {
      $29 = HEAP32[$pLastPg>>2]|0;
      $30 = HEAP32[$iPtrPage>>2]|0;
      $31 = (_relocatePage($pBt,$29,$17,$30,$$pre,$bCommit)|0);
      _releasePage($29);
      $32 = ($31|0)==(0);
      if ($32) {
       break;
      } else {
       $$0 = $31;
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 } while(0);
 $33 = ($bCommit|0)==(0);
 if (!($33)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[1648>>2]|0;
 $35 = (($pBt) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34>>>0) / ($36>>>0))&-1;
 $38 = (($37) + 1)|0;
 $$02 = $iLastPg;
 while(1) {
  $39 = (($$02) + -1)|0;
  $40 = ($39|0)==($38|0);
  if ($40) {
   $$02 = $39;
   continue;
  }
  $41 = (_ptrmapPageno($pBt,$39)|0);
  $42 = ($41|0)==($39|0);
  if ($42) {
   $$02 = $39;
  } else {
   break;
  }
 }
 $43 = (($pBt) + 19|0);
 HEAP8[$43>>0] = 1;
 $44 = (($pBt) + 44|0);
 HEAP32[$44>>2] = $39;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _allocateBtreePage($pBt,$ppPage,$pPgno,$nearby,$eMode) {
 $pBt = $pBt|0;
 $ppPage = $ppPage|0;
 $pPgno = $pPgno|0;
 $nearby = $nearby|0;
 $eMode = $eMode|0;
 var $$ = 0, $$0 = 0, $$dist$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $closest$08 = 0, $closest$2 = 0, $dist$010 = 0, $eType = 0;
 var $exitcond = 0, $i$012 = 0, $i$1$closest$0 = 0, $i$19 = 0, $iTrunk$0 = 0, $iTrunk$0$lcssa75 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond102 = 0, $or$cond2 = 0, $or$cond3 = 0, $pBt$idx = 0, $pBt$idx$val = 0, $pBt$idx4 = 0, $pBt$idx4$val = 0, $pNewTrunk = 0, $pPg = 0, $pPrevTrunk$0 = 0, $pTrunk = 0, $rc$05 = 0;
 var $rc$3$ph = 0, $rc$5 = 0, $searchList$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pTrunk = sp + 8|0;
 $eType = sp + 12|0;
 $pNewTrunk = sp + 4|0;
 $pPg = sp;
 HEAP32[$pTrunk>>2] = 0;
 $0 = (($pBt) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $pBt$idx = (($pBt) + 44|0);
 $pBt$idx$val = HEAP32[$pBt$idx>>2]|0;
 $2 = (_btreePagecount($pBt$idx$val)|0);
 $3 = (($1) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 36|0);
 $6 = (_sqlite3Get4byte($5)|0);
 $7 = ($6>>>0)<($2>>>0);
 if (!($7)) {
  _sqlite3CorruptError(55795);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($6|0)==(0);
 L5: do {
  if ($8) {
   $152 = (($pBt) + 19|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = ($153<<24>>24)==(0);
   $155 = $154&1;
   $156 = (($1) + 68|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = (_sqlite3PagerWrite($157)|0);
   $159 = ($158|0)==(0);
   if (!($159)) {
    $$0 = $158;
    STACKTOP = sp;return ($$0|0);
   }
   $160 = HEAP32[$pBt$idx>>2]|0;
   $161 = (($160) + 1)|0;
   HEAP32[$pBt$idx>>2] = $161;
   $162 = HEAP32[1648>>2]|0;
   $163 = (($pBt) + 32|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($162>>>0) / ($164>>>0))&-1;
   $166 = ($160|0)==($165|0);
   if ($166) {
    $167 = (($160) + 2)|0;
    HEAP32[$pBt$idx>>2] = $167;
    $171 = $167;
   } else {
    $171 = $161;
   }
   $168 = (($pBt) + 17|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = ($169<<24>>24)==(0);
   if ($170) {
    $192 = $171;
   } else {
    $172 = (_ptrmapPageno($pBt,$171)|0);
    $173 = ($172|0)==($171|0);
    if ($173) {
     HEAP32[$pPg>>2] = 0;
     $174 = (_btreeGetPage($pBt,$171,$pPg,$155)|0);
     $175 = ($174|0)==(0);
     if (!($175)) {
      $$0 = $174;
      STACKTOP = sp;return ($$0|0);
     }
     $176 = HEAP32[$pPg>>2]|0;
     $177 = (($176) + 68|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (_sqlite3PagerWrite($178)|0);
     _releasePage($176);
     $180 = ($179|0)==(0);
     if (!($180)) {
      $$0 = $179;
      STACKTOP = sp;return ($$0|0);
     }
     $181 = HEAP32[$pBt$idx>>2]|0;
     $182 = (($181) + 1)|0;
     HEAP32[$pBt$idx>>2] = $182;
     $183 = HEAP32[1648>>2]|0;
     $184 = HEAP32[$163>>2]|0;
     $185 = (($183>>>0) / ($184>>>0))&-1;
     $186 = ($181|0)==($185|0);
     if ($186) {
      $187 = (($181) + 2)|0;
      HEAP32[$pBt$idx>>2] = $187;
      $192 = $187;
     } else {
      $192 = $182;
     }
    } else {
     $192 = $171;
    }
   }
   $188 = HEAP32[$0>>2]|0;
   $189 = (($188) + 56|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + 28|0);
   _sqlite3Put4byte($191,$192);
   $193 = HEAP32[$pBt$idx>>2]|0;
   HEAP32[$pPgno>>2] = $193;
   $194 = (_btreeGetPage($pBt,$193,$ppPage,$155)|0);
   $195 = ($194|0)==(0);
   if (!($195)) {
    $$0 = $194;
    STACKTOP = sp;return ($$0|0);
   }
   $196 = HEAP32[$ppPage>>2]|0;
   $197 = (($196) + 68|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (_sqlite3PagerWrite($198)|0);
   $200 = ($199|0)==(0);
   if ($200) {
    $202 = 0;$pPrevTrunk$0 = 0;$rc$5 = 0;
   } else {
    $201 = HEAP32[$ppPage>>2]|0;
    _releasePage($201);
    $202 = 0;$pPrevTrunk$0 = 0;$rc$5 = $199;
   }
  } else {
   do {
    if ((($eMode<<24>>24) == 2)) {
     $searchList$0 = 1;
    } else if ((($eMode<<24>>24) == 1)) {
     $9 = ($2>>>0)<($nearby>>>0);
     if ($9) {
      $searchList$0 = 0;
     } else {
      $10 = (_ptrmapGet($pBt,$nearby,$eType,0)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $12 = HEAP8[$eType>>0]|0;
       $13 = ($12<<24>>24)==(2);
       $$ = $13&1;
       $searchList$0 = $$;
       break;
      } else {
       $$0 = $10;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } else {
     $searchList$0 = 0;
    }
   } while(0);
   $14 = (($1) + 68|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_sqlite3PagerWrite($15)|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    $$0 = $16;
    STACKTOP = sp;return ($$0|0);
   }
   $18 = HEAP32[$3>>2]|0;
   $19 = (($18) + 36|0);
   $20 = (($6) + -1)|0;
   _sqlite3Put4byte($19,$20);
   $21 = ($searchList$0<<24>>24)==(0);
   $22 = (($pBt) + 36|0);
   $23 = ($nearby|0)==(0);
   $24 = ($eMode<<24>>24)==(2);
   $26 = 0;
   while(1) {
    $25 = ($26|0)!=(0|0);
    if ($25) {
     $27 = (($26) + 56|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_sqlite3Get4byte($28)|0);
     $iTrunk$0 = $29;
    } else {
     $30 = HEAP32[$3>>2]|0;
     $31 = (($30) + 32|0);
     $32 = (_sqlite3Get4byte($31)|0);
     $iTrunk$0 = $32;
    }
    $33 = ($iTrunk$0>>>0)>($2>>>0);
    if ($33) {
     label = 15;
     break;
    }
    $34 = (_btreeGetPage($pBt,$iTrunk$0,$pTrunk,0)|0);
    $35 = ($34|0)==(0);
    if (!($35)) {
     $rc$05 = $34;
     label = 17;
     break;
    }
    $36 = HEAP32[$pTrunk>>2]|0;
    $37 = (($36) + 56|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + 4|0);
    $40 = (_sqlite3Get4byte($39)|0);
    $41 = ($40|0)==(0);
    $or$cond = $41 & $21;
    if ($or$cond) {
     $42 = (($36) + 68|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_sqlite3PagerWrite($43)|0);
     $45 = ($44|0)==(0);
     if (!($45)) {
      $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $44;
      break L5;
     }
     HEAP32[$pPgno>>2] = $iTrunk$0;
     $46 = HEAP32[$3>>2]|0;
     $47 = (($46) + 32|0);
     $48 = HEAP32[$37>>2]|0;
     $49 = HEAPU8[$48>>0]|(HEAPU8[$48+1>>0]<<8)|(HEAPU8[$48+2>>0]<<16)|(HEAPU8[$48+3>>0]<<24);
     HEAP8[$47>>0]=$49&255;HEAP8[$47+1>>0]=($49>>8)&255;HEAP8[$47+2>>0]=($49>>16)&255;HEAP8[$47+3>>0]=$49>>24;
     HEAP32[$ppPage>>2] = $36;
     HEAP32[$pTrunk>>2] = 0;
     $209 = 0;
    } else {
     $50 = HEAP32[$22>>2]|0;
     $51 = $50 >>> 2;
     $52 = (($51) + -2)|0;
     $53 = ($40>>>0)>($52>>>0);
     if ($53) {
      label = 22;
      break;
     }
     if (!($21)) {
      $54 = ($iTrunk$0|0)==($nearby|0);
      if ($54) {
       $iTrunk$0$lcssa75 = $nearby;
       label = 26;
       break;
      }
      $55 = ($iTrunk$0>>>0)<($nearby>>>0);
      $or$cond1 = $55 & $24;
      if ($or$cond1) {
       $iTrunk$0$lcssa75 = $iTrunk$0;
       label = 26;
       break;
      }
     }
     if ($41) {
      $209 = $36;
     } else {
      L34: do {
       if ($23) {
        $closest$2 = 0;
       } else {
        if ($24) {
         $i$012 = 0;
         while(1) {
          $105 = $i$012 << 2;
          $106 = (($105) + 8)|0;
          $107 = (($38) + ($106)|0);
          $108 = (_sqlite3Get4byte($107)|0);
          $109 = ($108>>>0)>($nearby>>>0);
          $104 = (($i$012) + 1)|0;
          if (!($109)) {
           $closest$2 = $i$012;
           break L34;
          }
          $103 = ($104>>>0)<($40>>>0);
          if ($103) {
           $i$012 = $104;
          } else {
           $closest$2 = 0;
           break L34;
          }
         }
        }
        $110 = ($40>>>0)>(1);
        if ($110) {
         $111 = (($38) + 8|0);
         $112 = (_sqlite3Get4byte($111)|0);
         $113 = (($112) - ($nearby))|0;
         $114 = (_sqlite3AbsInt32($113)|0);
         $closest$08 = 0;$dist$010 = $114;$i$19 = 1;
         while(1) {
          $115 = $i$19 << 2;
          $116 = (($115) + 8)|0;
          $117 = (($38) + ($116)|0);
          $118 = (_sqlite3Get4byte($117)|0);
          $119 = (($118) - ($nearby))|0;
          $120 = (_sqlite3AbsInt32($119)|0);
          $121 = ($120|0)<($dist$010|0);
          $i$1$closest$0 = $121 ? $i$19 : $closest$08;
          $$dist$0 = $121 ? $120 : $dist$010;
          $122 = (($i$19) + 1)|0;
          $exitcond = ($122|0)==($40|0);
          if ($exitcond) {
           $closest$2 = $i$1$closest$0;
           break;
          } else {
           $closest$08 = $i$1$closest$0;$dist$010 = $$dist$0;$i$19 = $122;
          }
         }
        } else {
         $closest$2 = 0;
        }
       }
      } while(0);
      $123 = $closest$2 << 2;
      $124 = (($123) + 8)|0;
      $125 = (($38) + ($124)|0);
      $126 = (_sqlite3Get4byte($125)|0);
      $127 = ($126>>>0)>($2>>>0);
      if ($127) {
       label = 51;
       break;
      }
      $128 = ($126|0)==($nearby|0);
      $or$cond2 = $21 | $128;
      $129 = ($126>>>0)<($nearby>>>0);
      $or$cond3 = $129 & $24;
      $or$cond102 = $or$cond2 | $or$cond3;
      if ($or$cond102) {
       label = 53;
       break;
      } else {
       $209 = $36;
      }
     }
    }
    _releasePage($26);
    if ($21) {
     $202 = $209;$pPrevTrunk$0 = 0;$rc$5 = 0;
     break L5;
    } else {
     $26 = $209;
    }
   }
   if ((label|0) == 15) {
    _sqlite3CorruptError(55844);
    $rc$05 = 11;
    label = 17;
   }
   else if ((label|0) == 22) {
    _sqlite3CorruptError(55872);
    $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = 11;
    break;
   }
   else if ((label|0) == 26) {
    HEAP32[$pPgno>>2] = $iTrunk$0$lcssa75;
    HEAP32[$ppPage>>2] = $36;
    $56 = (($36) + 68|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (_sqlite3PagerWrite($57)|0);
    $59 = ($58|0)==(0);
    if (!($59)) {
     $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $58;
     break;
    }
    do {
     if ($41) {
      if (!($25)) {
       $60 = HEAP32[$3>>2]|0;
       $61 = (($60) + 32|0);
       $62 = HEAP32[$37>>2]|0;
       $63 = HEAPU8[$62>>0]|(HEAPU8[$62+1>>0]<<8)|(HEAPU8[$62+2>>0]<<16)|(HEAPU8[$62+3>>0]<<24);
       HEAP8[$61>>0]=$63&255;HEAP8[$61+1>>0]=($63>>8)&255;HEAP8[$61+2>>0]=($63>>16)&255;HEAP8[$61+3>>0]=$63>>24;
       break;
      }
      $64 = (($26) + 68|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (_sqlite3PagerWrite($65)|0);
      $67 = ($66|0)==(0);
      if (!($67)) {
       $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $66;
       break L5;
      }
      $68 = (($26) + 56|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$37>>2]|0;
      $71 = HEAPU8[$70>>0]|(HEAPU8[$70+1>>0]<<8)|(HEAPU8[$70+2>>0]<<16)|(HEAPU8[$70+3>>0]<<24);
      HEAP8[$69>>0]=$71&255;HEAP8[$69+1>>0]=($71>>8)&255;HEAP8[$69+2>>0]=($71>>16)&255;HEAP8[$69+3>>0]=$71>>24;
     } else {
      $72 = HEAP32[$37>>2]|0;
      $73 = (($72) + 8|0);
      $74 = (_sqlite3Get4byte($73)|0);
      $75 = ($74>>>0)>($2>>>0);
      if ($75) {
       _sqlite3CorruptError(55906);
       $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = 11;
       break L5;
      }
      $76 = (_btreeGetPage($pBt,$74,$pNewTrunk,0)|0);
      $77 = ($76|0)==(0);
      if (!($77)) {
       $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $76;
       break L5;
      }
      $78 = HEAP32[$pNewTrunk>>2]|0;
      $79 = (($78) + 68|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (_sqlite3PagerWrite($80)|0);
      $82 = ($81|0)==(0);
      if (!($82)) {
       _releasePage($78);
       $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $81;
       break L5;
      }
      $83 = (($78) + 56|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = HEAP32[$37>>2]|0;
      $86 = HEAPU8[$85>>0]|(HEAPU8[$85+1>>0]<<8)|(HEAPU8[$85+2>>0]<<16)|(HEAPU8[$85+3>>0]<<24);
      HEAP8[$84>>0]=$86&255;HEAP8[$84+1>>0]=($86>>8)&255;HEAP8[$84+2>>0]=($86>>16)&255;HEAP8[$84+3>>0]=$86>>24;
      $87 = HEAP32[$83>>2]|0;
      $88 = (($87) + 4|0);
      $89 = (($40) + -1)|0;
      _sqlite3Put4byte($88,$89);
      $90 = HEAP32[$83>>2]|0;
      $91 = (($90) + 8|0);
      $92 = HEAP32[$37>>2]|0;
      $93 = (($92) + 12|0);
      $94 = $89 << 2;
      _memcpy(($91|0),($93|0),($94|0))|0;
      _releasePage($78);
      if (!($25)) {
       $95 = HEAP32[$3>>2]|0;
       $96 = (($95) + 32|0);
       _sqlite3Put4byte($96,$74);
       break;
      }
      $97 = (($26) + 68|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (_sqlite3PagerWrite($98)|0);
      $100 = ($99|0)==(0);
      if (!($100)) {
       $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $99;
       break L5;
      }
      $101 = (($26) + 56|0);
      $102 = HEAP32[$101>>2]|0;
      _sqlite3Put4byte($102,$74);
     }
    } while(0);
    HEAP32[$pTrunk>>2] = 0;
    $210 = 0;$rc$3$ph = 0;
    label = 59;
   }
   else if ((label|0) == 51) {
    _sqlite3CorruptError(55971);
    $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = 11;
    break;
   }
   else if ((label|0) == 53) {
    HEAP32[$pPgno>>2] = $126;
    $130 = (($36) + 68|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (_sqlite3PagerWrite($131)|0);
    $133 = ($132|0)==(0);
    if (!($133)) {
     $202 = $36;$pPrevTrunk$0 = $26;$rc$5 = $132;
     break;
    }
    $134 = (($40) + -1)|0;
    $135 = ($closest$2>>>0)<($134>>>0);
    if ($135) {
     $136 = $40 << 2;
     $137 = (($136) + 4)|0;
     $138 = (($38) + ($137)|0);
     $139 = HEAPU8[$138>>0]|(HEAPU8[$138+1>>0]<<8)|(HEAPU8[$138+2>>0]<<16)|(HEAPU8[$138+3>>0]<<24);
     HEAP8[$125>>0]=$139&255;HEAP8[$125+1>>0]=($139>>8)&255;HEAP8[$125+2>>0]=($139>>16)&255;HEAP8[$125+3>>0]=$139>>24;
    }
    _sqlite3Put4byte($39,$134);
    $140 = HEAP32[$pPgno>>2]|0;
    $pBt$idx4 = (($pBt) + 60|0);
    $pBt$idx4$val = HEAP32[$pBt$idx4>>2]|0;
    $141 = (_btreeGetHasContent($pBt$idx4$val,$140)|0);
    $142 = ($141|0)==(0);
    $143 = $142&1;
    $144 = (_btreeGetPage($pBt,$140,$ppPage,$143)|0);
    $145 = ($144|0)==(0);
    if ($145) {
     $146 = HEAP32[$ppPage>>2]|0;
     $147 = (($146) + 68|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (_sqlite3PagerWrite($148)|0);
     $150 = ($149|0)==(0);
     if ($150) {
      $210 = $36;$rc$3$ph = 0;
      label = 59;
     } else {
      $151 = HEAP32[$ppPage>>2]|0;
      _releasePage($151);
      $210 = $36;$rc$3$ph = $149;
      label = 59;
     }
    } else {
     $210 = $36;$rc$3$ph = $144;
     label = 59;
    }
   }
   if ((label|0) == 17) {
    HEAP32[$pTrunk>>2] = 0;
    $202 = 0;$pPrevTrunk$0 = $26;$rc$5 = $rc$05;
    break;
   }
   else if ((label|0) == 59) {
    _releasePage($26);
    $202 = $210;$pPrevTrunk$0 = 0;$rc$5 = $rc$3$ph;
    break;
   }
  }
 } while(0);
 _releasePage($202);
 _releasePage($pPrevTrunk$0);
 $203 = ($rc$5|0)==(0);
 if (!($203)) {
  HEAP32[$ppPage>>2] = 0;
  $$0 = $rc$5;
  STACKTOP = sp;return ($$0|0);
 }
 $204 = HEAP32[$ppPage>>2]|0;
 $205 = (($204) + 68|0);
 $206 = HEAP32[$205>>2]|0;
 $$idx = (($206) + 26|0);
 $$idx$val = HEAP16[$$idx>>1]|0;
 $207 = (_sqlite3PagerPageRefcount($$idx$val)|0);
 $208 = ($207|0)>(1);
 if ($208) {
  _releasePage($204);
  HEAP32[$ppPage>>2] = 0;
  _sqlite3CorruptError(56070);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP8[$204>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _relocatePage($pBt,$pDbPage,$eType,$iPtrPage,$iFreePage,$isCommit) {
 $pBt = $pBt|0;
 $pDbPage = $pDbPage|0;
 $eType = $eType|0;
 $iPtrPage = $iPtrPage|0;
 $iFreePage = $iFreePage|0;
 $isCommit = $isCommit|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPtrPage = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPtrPage = sp + 4|0;
 $rc = sp;
 $0 = (($pDbPage) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pBt>>2]|0;
 $3 = (($pDbPage) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3PagerMovepage($2,$4,$iFreePage,$isCommit)|0);
 HEAP32[$rc>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = $iFreePage;
 if ((($eType<<24>>24) == 1) | (($eType<<24>>24) == 5)) {
  $7 = (_setChildPtrmaps($pDbPage)|0);
  HEAP32[$rc>>2] = $7;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 6;
  } else {
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $9 = (($pDbPage) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_sqlite3Get4byte($10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   _ptrmapPut($pBt,$11,4,$iFreePage,$rc);
   $13 = HEAP32[$rc>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    label = 6;
   } else {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 if ((label|0) == 6) {
  $15 = ($eType<<24>>24)==(1);
  if ($15) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = (_btreeGetPage($pBt,$iPtrPage,$pPtrPage,0)|0);
 HEAP32[$rc>>2] = $16;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$pPtrPage>>2]|0;
 $19 = (($18) + 68|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_sqlite3PagerWrite($20)|0);
 HEAP32[$rc>>2] = $21;
 $22 = ($21|0)==(0);
 if (!($22)) {
  _releasePage($18);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (_modifyPagePointer($18,$1,$iFreePage,$eType)|0);
 HEAP32[$rc>>2] = $23;
 _releasePage($18);
 $24 = ($23|0)==(0);
 if (!($24)) {
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 _ptrmapPut($pBt,$iFreePage,$eType,$iPtrPage,$rc);
 $$pre = HEAP32[$rc>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerMovepage($pPager,$pPg,$pgno,$isCommit) {
 $pPager = $pPager|0;
 $pPg = $pPg|0;
 $pgno = $pgno|0;
 $isCommit = $isCommit|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $needSyncPgno$0 = 0;
 var $or$cond = 0, $pPager$idx = 0, $pPager$idx$val = 0, $pPg$idx = 0, $pPg$idx$val = 0, $pPg$idx1 = 0, $pPg$idx1$val = 0, $pPgHdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPgHdr = sp;
 $0 = (($pPager) + 14|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (_sqlite3PagerWrite($pPg)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0 = $3;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = (($pPg) + 24|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 2;
 $8 = ($7<<16>>16)==(0);
 do {
  if ($8) {
   $14 = $6;
  } else {
   $pPg$idx = (($pPg) + 16|0);
   $pPg$idx$val = HEAP32[$pPg$idx>>2]|0;
   $pPg$idx1 = (($pPg) + 20|0);
   $pPg$idx1$val = HEAP32[$pPg$idx1>>2]|0;
   $9 = (_subjRequiresPage($pPg$idx$val,$pPg$idx1$val)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $14 = $6;
   } else {
    $11 = (_subjournalPage($pPg)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $$pre = HEAP16[$5>>1]|0;
     $14 = $$pre;
     break;
    } else {
     $$0 = $11;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $13 = $14 & 4;
 $15 = ($13<<16>>16)!=(0);
 $16 = ($isCommit|0)==(0);
 $or$cond = $15 & $16;
 if ($or$cond) {
  $17 = (($pPg) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $needSyncPgno$0 = $18;
 } else {
  $needSyncPgno$0 = 0;
 }
 $19 = $14&65535;
 $20 = $19 & 65531;
 $21 = $20&65535;
 HEAP16[$5>>1] = $21;
 $pPager$idx = (($pPager) + 204|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $22 = (_pager_lookup($pPager$idx$val,$pgno)|0);
 $23 = ($22|0)==(0|0);
 do {
  if (!($23)) {
   $24 = (($22) + 24|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = $25&65535;
   $27 = $26 & 4;
   $28 = HEAP16[$5>>1]|0;
   $29 = $28&65535;
   $30 = $29 | $27;
   $31 = $30&65535;
   HEAP16[$5>>1] = $31;
   $32 = HEAP8[$0>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    _sqlite3PcacheDrop($22);
    break;
   } else {
    $34 = (($pPager) + 24|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 1)|0;
    _sqlite3PcacheMove($22,$36);
    break;
   }
  }
 } while(0);
 $37 = (($pPg) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 _sqlite3PcacheMove($pPg,$pgno);
 _sqlite3PcacheMakeDirty($pPg);
 $39 = HEAP8[$0>>0]|0;
 $40 = ($39<<24>>24)==(0);
 if (!($40)) {
  _sqlite3PcacheMove($22,$38);
  _sqlite3PagerUnrefNotNull($22);
 }
 $41 = ($needSyncPgno$0|0)==(0);
 if ($41) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (_sqlite3PagerAcquire($pPager,$needSyncPgno$0,$pPgHdr,0)|0);
 $43 = ($42|0)==(0);
 if ($43) {
  $51 = HEAP32[$pPgHdr>>2]|0;
  $52 = (($51) + 24|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = $54 | 4;
  $56 = $55&65535;
  HEAP16[$52>>1] = $56;
  _sqlite3PcacheMakeDirty($51);
  _sqlite3PagerUnrefNotNull($51);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($pPager) + 28|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($needSyncPgno$0>>>0)>($45>>>0);
 if ($46) {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = (($pPager) + 56|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($pPager) + 200|0);
 $50 = HEAP32[$49>>2]|0;
 _sqlite3BitvecClear($48,$needSyncPgno$0,$50);
 $$0 = $42;
 STACKTOP = sp;return ($$0|0);
}
function _setChildPtrmaps($pPage) {
 $pPage = $pPage|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rc = sp;
 $0 = (($pPage) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$pPage>>0]|0;
 $3 = (($pPage) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_btreeInitPage($pPage)|0);
 HEAP32[$rc>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  HEAP8[$pPage>>0] = $2;
  $45 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $7 = (($pPage) + 16|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($8<<16>>16)==(0);
 if ($10) {
  $$pre = (($pPage) + 3|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $11 = (($pPage) + 56|0);
  $12 = (($pPage) + 18|0);
  $13 = (($pPage) + 64|0);
  $14 = (($pPage) + 3|0);
  $i$02 = 0;
  while(1) {
   $15 = HEAP32[$11>>2]|0;
   $16 = HEAP16[$12>>1]|0;
   $17 = $16&65535;
   $18 = $i$02 << 1;
   $19 = HEAP32[$13>>2]|0;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 << 8;
   $$sum1 = $18 | 1;
   $24 = (($19) + ($$sum1)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $23 | $26;
   $28 = $27 & $17;
   $29 = (($15) + ($28)|0);
   _ptrmapPutOvflPtr($pPage,$29,$rc);
   $30 = HEAP8[$14>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $32 = (_sqlite3Get4byte($29)|0);
    _ptrmapPut($1,$32,5,$4,$rc);
   }
   $33 = (($i$02) + 1)|0;
   $34 = ($33|0)<($9|0);
   if ($34) {
    $i$02 = $33;
   } else {
    $$pre$phiZ2D = $14;
    break;
   }
  }
 }
 $35 = HEAP8[$$pre$phiZ2D>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if (!($36)) {
  HEAP8[$pPage>>0] = $2;
  $45 = HEAP32[$rc>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $37 = (($pPage) + 5|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = (($39) + 8)|0;
 $41 = (($pPage) + 56|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($40)|0);
 $44 = (_sqlite3Get4byte($43)|0);
 _ptrmapPut($1,$44,5,$4,$rc);
 HEAP8[$pPage>>0] = $2;
 $45 = HEAP32[$rc>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _ptrmapPut($pBt,$key,$eType,$parent,$pRC) {
 $pBt = $pBt|0;
 $key = $key|0;
 $eType = $eType|0;
 $parent = $parent|0;
 $pRC = $pRC|0;
 var $$idx = 0, $$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pDbPage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pDbPage = sp;
 $0 = HEAP32[$pRC>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ($key|0)==(0);
 if ($2) {
  _sqlite3CorruptError(51634);
  HEAP32[$pRC>>2] = 11;
  STACKTOP = sp;return;
 }
 $3 = (_ptrmapPageno($pBt,$key)|0);
 $4 = HEAP32[$pBt>>2]|0;
 $5 = (_sqlite3PagerAcquire($4,$3,$pDbPage,0)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  HEAP32[$pRC>>2] = $5;
  STACKTOP = sp;return;
 }
 $7 = (($key) - ($3))|0;
 $8 = ($7*5)|0;
 $9 = (($8) + -5)|0;
 $10 = ($9|0)<(0);
 do {
  if ($10) {
   _sqlite3CorruptError(51645);
   HEAP32[$pRC>>2] = 11;
   $$pre = HEAP32[$pDbPage>>2]|0;
   $24 = $$pre;
  } else {
   $11 = HEAP32[$pDbPage>>2]|0;
   $$idx = (($11) + 4|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $12 = (_sqlite3PagerGetData($$idx$val)|0);
   $13 = (($12) + ($9)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==($eType<<24>>24);
   if ($15) {
    $16 = (($8) + -4)|0;
    $17 = (($12) + ($16)|0);
    $18 = (_sqlite3Get4byte($17)|0);
    $19 = ($18|0)==($parent|0);
    if ($19) {
     $24 = $11;
     break;
    }
   }
   $20 = (_sqlite3PagerWrite($11)|0);
   HEAP32[$pRC>>2] = $20;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$13>>0] = $eType;
    $22 = (($8) + -4)|0;
    $23 = (($12) + ($22)|0);
    _sqlite3Put4byte($23,$parent);
    $24 = $11;
   } else {
    $24 = $11;
   }
  }
 } while(0);
 _sqlite3PagerUnref($24);
 STACKTOP = sp;return;
}
function _modifyPagePointer($pPage,$iFrom,$iTo,$eType) {
 $pPage = $pPage|0;
 $iFrom = $iFrom|0;
 $iTo = $iTo|0;
 $eType = $eType|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$06 = 0, $i$09 = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $info = sp;
 $0 = ($eType<<24>>24)==(4);
 if ($0) {
  $1 = (($pPage) + 56|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_sqlite3Get4byte($2)|0);
  $4 = ($3|0)==($iFrom|0);
  if ($4) {
   _sqlite3Put4byte($2,$iTo);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   _sqlite3CorruptError(53690);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = HEAP8[$pPage>>0]|0;
 (_btreeInitPage($pPage)|0);
 $6 = (($pPage) + 16|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($7<<16>>16)==(0);
 L9: do {
  if ($9) {
   $i$06 = 0;
  } else {
   $10 = (($pPage) + 56|0);
   $11 = (($pPage) + 18|0);
   $12 = (($pPage) + 64|0);
   $13 = ($eType<<24>>24)==(3);
   $14 = (($info) + 24|0);
   $i$09 = 0;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP16[$11>>1]|0;
    $17 = $16&65535;
    $18 = $i$09 << 1;
    $19 = HEAP32[$12>>2]|0;
    $20 = (($19) + ($18)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $22 << 8;
    $$sum1 = $18 | 1;
    $24 = (($19) + ($$sum1)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = $23 | $26;
    $28 = $27 & $17;
    $29 = (($15) + ($28)|0);
    if ($13) {
     _btreeParseCellPtr($pPage,$29,$info);
     $30 = HEAP16[$14>>1]|0;
     $31 = ($30<<16>>16)==(0);
     if (!($31)) {
      $32 = $30&65535;
      $$sum = (($32) + ($28))|0;
      $$sum2 = (($$sum) + 3)|0;
      $33 = (($15) + ($$sum2)|0);
      $34 = HEAP32[$10>>2]|0;
      $35 = HEAP16[$11>>1]|0;
      $36 = $35&65535;
      $37 = (($34) + ($36)|0);
      $38 = ($33>>>0)>($37>>>0);
      if (!($38)) {
       $39 = (($15) + ($$sum)|0);
       $40 = (_sqlite3Get4byte($39)|0);
       $41 = ($40|0)==($iFrom|0);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } else {
     $42 = (_sqlite3Get4byte($29)|0);
     $43 = ($42|0)==($iFrom|0);
     if ($43) {
      label = 13;
      break;
     }
    }
    $44 = (($i$09) + 1)|0;
    $45 = ($44|0)<($8|0);
    if ($45) {
     $i$09 = $44;
    } else {
     $i$06 = $44;
     break L9;
    }
   }
   if ((label|0) == 11) {
    _sqlite3Put4byte($39,$iTo);
    $i$06 = $i$09;
    break;
   }
   else if ((label|0) == 13) {
    _sqlite3Put4byte($29,$iTo);
    $i$06 = $i$09;
    break;
   }
  }
 } while(0);
 $46 = ($i$06|0)==($8|0);
 do {
  if ($46) {
   $47 = ($eType<<24>>24)==(5);
   if ($47) {
    $48 = (($pPage) + 5|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($50) + 8)|0;
    $52 = (($pPage) + 56|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51)|0);
    $55 = (_sqlite3Get4byte($54)|0);
    $56 = ($55|0)==($iFrom|0);
    if ($56) {
     _sqlite3Put4byte($54,$iTo);
     break;
    }
   }
   _sqlite3CorruptError(53724);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP8[$pPage>>0] = $5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ptrmapPutOvflPtr($pPage,$pCell,$pRC) {
 $pPage = $pPage|0;
 $pCell = $pCell|0;
 $pRC = $pRC|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $info = sp;
 $0 = HEAP32[$pRC>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 _btreeParseCellPtr($pPage,$pCell,$info);
 $2 = (($info) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $3&65535;
 $6 = (($pCell) + ($5)|0);
 $7 = (_sqlite3Get4byte($6)|0);
 $8 = (($pPage) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pPage) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 _ptrmapPut($9,$7,3,$11,$pRC);
 STACKTOP = sp;return;
}
function _sqlite3PcacheMove($p,$newPgno) {
 $p = $p|0;
 $newPgno = $newPgno|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[((384 + 140|0))>>2]|0;
 $3 = (($1) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$p>>2]|0;
 $6 = (($p) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 255]($4,$5,$7,$newPgno);
 HEAP32[$6>>2] = $newPgno;
 $8 = (($p) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 6;
 $11 = ($10<<16>>16)==(6);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 _pcacheRemoveFromDirtyList($p);
 _pcacheAddToDirtyList($p);
 STACKTOP = sp;return;
}
function _btreeGetHasContent($pBt$0$22$val,$pgno) {
 $pBt$0$22$val = $pBt$0$22$val|0;
 $pgno = $pgno|0;
 var $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pBt$0$22$val|0)==(0|0);
 if ($0) {
  $6 = 0;
 } else {
  $$idx$val = HEAP32[$pBt$0$22$val>>2]|0;
  $1 = (_sqlite3BitvecSize($$idx$val)|0);
  $2 = ($1>>>0)<($pgno>>>0);
  if ($2) {
   $6 = 1;
  } else {
   $3 = (_sqlite3BitvecTest($pBt$0$22$val,$pgno)|0);
   $4 = ($3|0)!=(0);
   $6 = $4;
  }
 }
 $5 = $6&1;
 STACKTOP = sp;return ($5|0);
}
function _sqlite3PagerIsMemdb($pPager$0$11$val) {
 $pPager$0$11$val = $pPager$0$11$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pPager$0$11$val&255;
 STACKTOP = sp;return ($0|0);
}
function _execSql($db,$pzErrMsg,$zSql) {
 $db = $db|0;
 $pzErrMsg = $pzErrMsg|0;
 $zSql = $zSql|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pStmt = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $pStmt = sp + 4|0;
 $0 = ($zSql|0)==(0|0);
 if ($0) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_sqlite3_prepare($db,$zSql,-1,$pStmt,0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $5 = HEAP32[$pStmt>>2]|0;
  (_sqlite3_step($5)|0);
  $6 = HEAP32[$pStmt>>2]|0;
  $7 = (_vacuumFinalize($db,$6,$pzErrMsg)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_sqlite3_errmsg($db)|0);
  _sqlite3SetString($pzErrMsg,$db,$3,$vararg_buffer);
  $4 = (_sqlite3_errcode($db)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3BtreeGetReserve($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1 = (($p) + 4|0);
 $p$idx1$val = HEAP32[$p$idx1>>2]|0;
 _sqlite3BtreeEnter($p$idx$val,$p$idx1$val);
 $0 = HEAP32[$p$idx1>>2]|0;
 $1 = (($0) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function _execExecSql($db,$pzErrMsg,$zSql) {
 $db = $db|0;
 $pzErrMsg = $pzErrMsg|0;
 $zSql = $zSql|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pStmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pStmt = sp;
 $0 = (_sqlite3_prepare($db,$zSql,-1,$pStmt,0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $2 = HEAP32[$pStmt>>2]|0;
  $3 = (_sqlite3_step($2)|0);
  $4 = ($3|0)==(100);
  $5 = HEAP32[$pStmt>>2]|0;
  if (!($4)) {
   label = 5;
   break;
  }
  $6 = (_sqlite3_column_text($5,0)|0);
  $7 = (_execSql($db,$pzErrMsg,$6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[$pStmt>>2]|0;
  (_vacuumFinalize($db,$9,$pzErrMsg)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  $10 = (_vacuumFinalize($db,$5,$pzErrMsg)|0);
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3BtreeCopyFile($pTo,$pFrom) {
 $pTo = $pTo|0;
 $pFrom = $pFrom|0;
 var $$ = 0, $$idx = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx6 = 0, $$idx6$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $nByte = 0;
 var $pFrom$idx$val = 0, $pFrom$idx$val$idx = 0, $pFrom$idx$val$idx$val = 0, $pFrom$idx1$val$idx = 0, $pFrom$idx1$val$idx$val = 0, $pFrom$idx2$val = 0, $pFrom$idx3 = 0, $pFrom$idx3$val = 0, $pTo$idx$val = 0, $pTo$idx$val$idx$val = 0, $pTo$idx4$val = 0, $pTo$idx5 = 0, $pTo$idx5$val = 0, $rc$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $b = sp + 8|0;
 $nByte = sp;
 $pTo$idx4$val = HEAP32[$pTo>>2]|0;
 $pTo$idx5 = (($pTo) + 4|0);
 $pTo$idx5$val = HEAP32[$pTo$idx5>>2]|0;
 _sqlite3BtreeEnter($pTo$idx4$val,$pTo$idx5$val);
 $pFrom$idx2$val = HEAP32[$pFrom>>2]|0;
 $pFrom$idx3 = (($pFrom) + 4|0);
 $pFrom$idx3$val = HEAP32[$pFrom$idx3>>2]|0;
 _sqlite3BtreeEnter($pFrom$idx2$val,$pFrom$idx3$val);
 $pTo$idx$val = HEAP32[$pTo$idx5>>2]|0;
 $pTo$idx$val$idx$val = HEAP32[$pTo$idx$val>>2]|0;
 $0 = (_sqlite3BtreePager($pTo$idx$val$idx$val)|0);
 $$idx6 = (($0) + 60|0);
 $$idx6$val = HEAP32[$$idx6>>2]|0;
 $1 = (_sqlite3PagerFile($$idx6$val)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $pFrom$idx$val = HEAP32[$pFrom$idx3>>2]|0;
  $pFrom$idx$val$idx = (($pFrom$idx$val) + 32|0);
  $pFrom$idx$val$idx$val = HEAP32[$pFrom$idx$val$idx>>2]|0;
  $4 = (_sqlite3BtreeGetPageSize($pFrom$idx$val$idx$val)|0);
  $5 = ($4|0)<(0);
  $6 = $5 << 31 >> 31;
  $pFrom$idx1$val$idx = (($pFrom$idx$val) + 44|0);
  $pFrom$idx1$val$idx$val = HEAP32[$pFrom$idx1$val$idx>>2]|0;
  $7 = (_sqlite3BtreeLastPage($pFrom$idx1$val$idx$val)|0);
  $8 = (___muldi3(($7|0),0,($4|0),($6|0))|0);
  $9 = tempRet0;
  $10 = $nByte;
  $11 = $10;
  HEAP32[$11>>2] = $8;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  $14 = (_sqlite3OsFileControl($1,11,$nByte)|0);
  $15 = ($14|0)==(12);
  $$ = $15 ? 0 : $14;
  $16 = ($$|0)==(0);
  if (!($16)) {
   $rc$0 = $$;
   STACKTOP = sp;return ($rc$0|0);
  }
 }
 dest=$b+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $17 = HEAP32[$pFrom>>2]|0;
 $18 = (($b) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = (($b) + 24|0);
 HEAP32[$19>>2] = $pFrom;
 $20 = (($b) + 4|0);
 HEAP32[$20>>2] = $pTo;
 $21 = (($b) + 16|0);
 HEAP32[$21>>2] = 1;
 (_sqlite3_backup_step($b,2147483647)|0);
 $22 = (_sqlite3_backup_finish($b)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = HEAP32[$pTo$idx5>>2]|0;
  $25 = (($24) + 22|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = $27 & 65533;
  $29 = $28&65535;
  HEAP16[$25>>1] = $29;
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 } else {
  $30 = HEAP32[$20>>2]|0;
  $$idx = (($30) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
  $31 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
  _sqlite3PagerClearCache($31);
  $rc$0 = $22;
  STACKTOP = sp;return ($rc$0|0);
 }
 return 0|0;
}
function _sqlite3PagerClearCache($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 14|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($pPager) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   _pager_reset($pPager);
  }
 }
 STACKTOP = sp;return;
}
function _vacuumFinalize($db,$pStmt,$pzErrMsg) {
 $db = $db|0;
 $pStmt = $pStmt|0;
 $pzErrMsg = $pzErrMsg|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_sqlite3VdbeFinalize($pStmt)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (_sqlite3_errmsg($db)|0);
 _sqlite3SetString($pzErrMsg,$db,$2,$vararg_buffer);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PagerSharedLock($pPager) {
 $pPager = $pPager|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $bExists = 0, $bHotJournal = 0, $dbFileVers = 0, $fout = 0, $nPage = 0, $or$cond = 0, $or$cond3 = 0, $pPager$idx$val = 0, $pPager$idx$val$pre = 0, $pPager$idx4 = 0, $pPager$idx4$val = 0, $phitmp = 0;
 var $rc$1 = 0, $rc$2 = 0, $rc$26 = 0, $rc$3 = 0, $rc$4 = 0, $rc$5 = 0, $rc$58 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bHotJournal = sp + 12|0;
 $bExists = sp + 8|0;
 $fout = sp + 4|0;
 $nPage = sp;
 $dbFileVers = sp + 16|0;
 $0 = (($pPager) + 14|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($pPager) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $pPager$idx4 = (($pPager) + 208|0);
 $pPager$idx4$val = HEAP32[$pPager$idx4>>2]|0;
 $6 = (_pagerUseWal($pPager$idx4$val)|0);
 $7 = ($6|0)==(0);
 L5: do {
  if ($7) {
   $8 = (($pPager) + 15|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    HEAP32[$bHotJournal>>2] = 1;
    $11 = (_pager_wait_on_lock($pPager,1)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = (($pPager) + 16|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14&255)<(2);
     if ($15) {
      $16 = (_hasHotJournal($pPager,$bHotJournal)|0);
      $17 = ($16|0)==(0);
      if (!($17)) {
       $rc$58 = $16;
       break;
      }
      $$pre = HEAP32[$bHotJournal>>2]|0;
      $phitmp = ($$pre|0)==(0);
      if (!($phitmp)) {
       label = 9;
      }
     } else {
      label = 9;
     }
     do {
      if ((label|0) == 9) {
       $18 = (($pPager) + 13|0);
       $19 = HEAP8[$18>>0]|0;
       $20 = ($19<<24>>24)==(0);
       if (!($20)) {
        $rc$58 = 776;
        break L5;
       }
       $21 = (_pagerLockDb($pPager,4)|0);
       $22 = ($21|0)==(0);
       if (!($22)) {
        $rc$58 = $21;
        break L5;
       }
       $23 = (($pPager) + 64|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0|0);
       if ($26) {
        $27 = HEAP32[$pPager>>2]|0;
        $28 = (($pPager) + 172|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (_sqlite3OsAccess($27,$29,0,$bExists)|0);
        $31 = ($30|0)!=(0);
        $32 = HEAP32[$bExists>>2]|0;
        $33 = ($32|0)==(0);
        $or$cond3 = $31 | $33;
        if ($or$cond3) {
         $rc$1 = $30;
        } else {
         HEAP32[$fout>>2] = 0;
         $34 = HEAP32[$28>>2]|0;
         $35 = HEAP32[$23>>2]|0;
         $36 = (_sqlite3OsOpen($27,$34,$35,2050,$fout)|0);
         $37 = ($36|0)==(0);
         if ($37) {
          $38 = HEAP32[$fout>>2]|0;
          $39 = $38 & 1;
          $40 = ($39|0)==(0);
          if ($40) {
           $rc$1 = 0;
          } else {
           _sqlite3CantopenError(44599);
           $41 = HEAP32[$23>>2]|0;
           _sqlite3OsClose($41);
           $rc$1 = 14;
          }
         } else {
          $rc$1 = $36;
         }
        }
       } else {
        $rc$1 = 0;
       }
       $42 = HEAP32[$23>>2]|0;
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)==(0|0);
       if ($44) {
        $48 = (($pPager) + 4|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = ($49<<24>>24)==(0);
        if ($50) {
         (_pagerUnlockDb($pPager,1)|0);
         $rc$2 = $rc$1;
         label = 21;
        } else {
         $rc$2 = $rc$1;
         label = 21;
        }
       } else {
        $45 = (_pagerSyncHotJournal($pPager)|0);
        $46 = ($45|0)==(0);
        if ($46) {
         $47 = (_pager_playback($pPager,1)|0);
         HEAP8[$8>>0] = 0;
         $rc$2 = $47;
         label = 21;
        } else {
         $rc$26 = $45;
        }
       }
       if ((label|0) == 21) {
        $51 = ($rc$2|0)==(0);
        if ($51) {
         break;
        } else {
         $rc$26 = $rc$2;
        }
       }
       (_pager_error($pPager,$rc$26)|0);
       $rc$5 = $rc$26;
       label = 37;
       break L5;
      }
     } while(0);
     $52 = (($pPager) + 12|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = ($53<<24>>24)==(0);
     do {
      if ($54) {
       $55 = (($pPager) + 88|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0|0);
       if ($57) {
        $58 = (($pPager) + 204|0);
        $59 = HEAP32[$58>>2]|0;
        $$idx = (($59) + 40|0);
        $$idx$val = HEAP32[$$idx>>2]|0;
        $60 = (_sqlite3PcachePagecount($$idx$val)|0);
        $61 = ($60|0)>(0);
        if (!($61)) {
         break;
        }
       }
       HEAP32[$nPage>>2] = 0;
       $62 = (_pagerPagecount($pPager,$nPage)|0);
       $63 = ($62|0)==(0);
       if (!($63)) {
        $rc$58 = $62;
        break L5;
       }
       $64 = HEAP32[$nPage>>2]|0;
       $65 = ($64|0)==(0);
       if ($65) {
        dest=$dbFileVers+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       } else {
        $66 = (($pPager) + 60|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (_sqlite3OsRead($67,$dbFileVers,16,24,0)|0);
        if (!((($68|0) == 0) | (($68|0) == 522))) {
         $rc$58 = $68;
         break L5;
        }
       }
       $69 = (($pPager) + 100|0);
       $70 = (_memcmp($69,$dbFileVers,16)|0);
       $71 = ($70|0)==(0);
       if (!($71)) {
        _pager_reset($pPager);
       }
      }
     } while(0);
     $72 = (_pagerOpenWalIfPresent($pPager)|0);
     $pPager$idx$val$pre = HEAP32[$pPager$idx4>>2]|0;
     $pPager$idx$val = $pPager$idx$val$pre;$rc$3 = $72;
     label = 33;
    } else {
     $rc$58 = $11;
    }
   } else {
    $pPager$idx$val = $pPager$idx4$val;$rc$3 = 0;
    label = 33;
   }
  } else {
   $pPager$idx$val = $pPager$idx4$val;$rc$3 = 0;
   label = 33;
  }
 } while(0);
 if ((label|0) == 33) {
  $73 = (_pagerUseWal($pPager$idx$val)|0);
  $74 = ($73|0)==(0);
  if ($74) {
   $rc$4 = $rc$3;
  } else {
   $75 = (_pagerBeginReadTransaction($pPager)|0);
   $rc$4 = $75;
  }
  $76 = (($pPager) + 15|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = ($77<<24>>24)==(0);
  $79 = ($rc$4|0)==(0);
  $or$cond = $78 & $79;
  if ($or$cond) {
   $80 = (($pPager) + 24|0);
   $81 = (_pagerPagecount($pPager,$80)|0);
   $rc$5 = $81;
   label = 37;
  } else {
   $rc$5 = $rc$4;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $82 = ($rc$5|0)==(0);
  if ($82) {
   $83 = (($pPager) + 15|0);
   HEAP8[$83>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rc$58 = $rc$5;
  }
 }
 _pager_unlock($pPager);
 $$0 = $rc$58;
 STACKTOP = sp;return ($$0|0);
}
function _hasHotJournal($pPager,$pExists) {
 $pPager = $pPager|0;
 $pExists = $pExists|0;
 var $$ = 0, $$not = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $brmerge = 0, $exists = 0, $f = 0, $first = 0, $locked = 0, $nPage = 0, $or$cond = 0, $phitmp = 0, $rc$0 = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $exists = sp + 12|0;
 $locked = sp + 8|0;
 $nPage = sp + 4|0;
 $f = sp;
 $first = sp + 16|0;
 $0 = HEAP32[$pPager>>2]|0;
 HEAP32[$exists>>2] = 1;
 $1 = (($pPager) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 HEAP32[$pExists>>2] = 0;
 if ($4) {
  $9 = 0;$rc$0 = 0;
 } else {
  $5 = (($pPager) + 172|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_sqlite3OsAccess($0,$6,0,$exists)|0);
  $$pre = HEAP32[$exists>>2]|0;
  $phitmp = ($$pre|0)==(0);
  $9 = $phitmp;$rc$0 = $7;
 }
 $8 = ($rc$0|0)!=(0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $rc$2 = $rc$0;
  STACKTOP = sp;return ($rc$2|0);
 }
 HEAP32[$locked>>2] = 0;
 $10 = (($pPager) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_sqlite3OsCheckReservedLock($11,$locked)|0);
 $13 = HEAP32[$locked>>2]|0;
 $14 = $13 | $12;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $rc$2 = $12;
  STACKTOP = sp;return ($rc$2|0);
 }
 $16 = (_pagerPagecount($pPager,$nPage)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $rc$2 = $16;
  STACKTOP = sp;return ($rc$2|0);
 }
 $18 = HEAP32[$nPage>>2]|0;
 $$not = ($18|0)!=(0);
 $brmerge = $$not | $4;
 if (!($brmerge)) {
  _sqlite3BeginBenignMalloc();
  $19 = (_pagerLockDb($pPager,2)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = (($pPager) + 172|0);
   $22 = HEAP32[$21>>2]|0;
   (_sqlite3OsDelete($0,$22,0)|0);
   $23 = (($pPager) + 4|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    (_pagerUnlockDb($pPager,1)|0);
   }
  }
  _sqlite3EndBenignMalloc();
  $rc$2 = 0;
  STACKTOP = sp;return ($rc$2|0);
 }
 do {
  if (!($4)) {
   HEAP32[$f>>2] = 2049;
   $26 = (($pPager) + 172|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$1>>2]|0;
   $29 = (_sqlite3OsOpen($0,$27,$28,2049,$f)|0);
   if ((($29|0) == 0)) {
    break;
   } else if (!((($29|0) == 14))) {
    $rc$2 = $29;
    STACKTOP = sp;return ($rc$2|0);
   }
   HEAP32[$pExists>>2] = 1;
   $rc$2 = 0;
   STACKTOP = sp;return ($rc$2|0);
  }
 } while(0);
 HEAP8[$first>>0] = 0;
 $30 = HEAP32[$1>>2]|0;
 $31 = (_sqlite3OsRead($30,$first,1,0,0)|0);
 $32 = ($31|0)==(522);
 $$ = $32 ? 0 : $31;
 if (!($4)) {
  $33 = HEAP32[$1>>2]|0;
  _sqlite3OsClose($33);
 }
 $34 = HEAP8[$first>>0]|0;
 $35 = ($34<<24>>24)!=(0);
 $36 = $35&1;
 HEAP32[$pExists>>2] = $36;
 $rc$2 = $$;
 STACKTOP = sp;return ($rc$2|0);
}
function _sqlite3PcachePagecount($pCache$0$11$val) {
 $pCache$0$11$val = $pCache$0$11$val|0;
 var $0 = 0, $1 = 0, $2 = 0, $nPage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pCache$0$11$val|0)==(0|0);
 if ($0) {
  $nPage$0 = 0;
 } else {
  $1 = HEAP32[((384 + 128|0))>>2]|0;
  $2 = (FUNCTION_TABLE_ii[$1 & 255]($pCache$0$11$val)|0);
  $nPage$0 = $2;
 }
 STACKTOP = sp;return ($nPage$0|0);
}
function _pagerPagecount($pPager,$pnPage) {
 $pPager = $pPager|0;
 $pnPage = $pnPage|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $nPage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (($pPager) + 208|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3WalDbsize($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $n;
  $5 = $4;
  HEAP32[$5>>2] = 0;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
  $8 = (($pPager) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  do {
   if ($11) {
    $26 = -1;$27 = -1;
   } else {
    $12 = (_sqlite3OsFileSize($9,$n)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = $n;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (($14) + 4)|0;
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (_i64Add(($16|0),($19|0),-1,-1)|0);
     $21 = tempRet0;
     $26 = $20;$27 = $21;
     break;
    } else {
     $$0 = $12;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $22 = (($pPager) + 152|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)<(0);
  $25 = $24 << 31 >> 31;
  $28 = (_i64Add(($26|0),($27|0),($23|0),($25|0))|0);
  $29 = tempRet0;
  $30 = (___divdi3(($28|0),($29|0),($23|0),($25|0))|0);
  $31 = tempRet0;
  $nPage$0 = $30;
 } else {
  $nPage$0 = $2;
 }
 $32 = (($pPager) + 156|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($nPage$0>>>0)>($33>>>0);
 if ($34) {
  HEAP32[$32>>2] = $nPage$0;
 }
 HEAP32[$pnPage>>2] = $nPage$0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pagerOpenWalIfPresent($pPager) {
 $pPager = $pPager|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $isWal = 0, $nPage = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isWal = sp + 4|0;
 $nPage = sp;
 $0 = (($pPager) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (_pagerPagecount($pPager,$nPage)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = HEAP32[$nPage>>2]|0;
    $6 = ($5|0)==(0);
    $7 = HEAP32[$pPager>>2]|0;
    $8 = (($pPager) + 212|0);
    $9 = HEAP32[$8>>2]|0;
    if ($6) {
     $10 = (_sqlite3OsDelete($7,$9,0)|0);
     $11 = ($10|0)==(5898);
     $$ = $11 ? 0 : $10;
     HEAP32[$isWal>>2] = 0;
     $rc$0 = $$;
    } else {
     $12 = (_sqlite3OsAccess($7,$9,0,$isWal)|0);
     $rc$0 = $12;
    }
    $13 = ($rc$0|0)==(0);
    if ($13) {
     $14 = HEAP32[$isWal>>2]|0;
     $15 = ($14|0)==(0);
     if (!($15)) {
      $16 = (_sqlite3PagerOpenWal($pPager,0)|0);
      $$0 = $16;
      break;
     }
     $17 = (($pPager) + 5|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(5);
     if ($19) {
      HEAP8[$17>>0] = 0;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = $rc$0;
    }
   } else {
    $$0 = $3;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _pagerBeginReadTransaction($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $changed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $changed = sp;
 HEAP32[$changed>>2] = 0;
 $0 = (($pPager) + 208|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3WalEndReadTransaction($1);
 $2 = HEAP32[$0>>2]|0;
 $3 = (_sqlite3WalBeginReadTransaction($2,$changed)|0);
 $4 = HEAP32[$changed>>2]|0;
 $5 = $4 | $3;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return ($3|0);
 }
 _pager_reset($pPager);
 STACKTOP = sp;return ($3|0);
}
function _sqlite3WalBeginReadTransaction($pWal,$pChanged) {
 $pWal = $pWal|0;
 $pChanged = $pChanged|0;
 var $0 = 0, $1 = 0, $2 = 0, $cnt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cnt$0 = 0;
 while(1) {
  $0 = (($cnt$0) + 1)|0;
  $1 = (_walTryBeginRead($pWal,$pChanged,0,$0)|0);
  $2 = ($1|0)==(-1);
  if ($2) {
   $cnt$0 = $0;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function _sqlite3PagerOpenWal($pPager,$pbOpen) {
 $pPager = $pPager|0;
 $pbOpen = $pbOpen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPager$idx = 0, $pPager$idx$val = 0, $pPager$idx1 = 0, $pPager$idx1$val = 0, $pPager$idx1$val$idx$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($pPager) + 208|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $pPager$idx = (($pPager) + 4|0);
   $pPager$idx$val = HEAP8[$pPager$idx>>0]|0;
   $pPager$idx1 = (($pPager) + 60|0);
   $pPager$idx1$val = HEAP32[$pPager$idx1>>2]|0;
   $pPager$idx1$val$idx$val = HEAP32[$pPager$idx1$val>>2]|0;
   $6 = (_sqlite3PagerWalSupported($pPager$idx$val,$pPager$idx1$val$idx$val)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 14;
    STACKTOP = sp;return ($$0|0);
   }
   $8 = (($pPager) + 64|0);
   $9 = HEAP32[$8>>2]|0;
   _sqlite3OsClose($9);
   $10 = (_pagerOpenWal($pPager)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = (($pPager) + 5|0);
   HEAP8[$12>>0] = 5;
   $13 = (($pPager) + 15|0);
   HEAP8[$13>>0] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$pbOpen>>2] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pagerOpenWal($pPager) {
 $pPager = $pPager|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $11 = 0;
  } else {
   $3 = (_pagerExclusiveLock($pPager)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP8[$0>>0]|0;
    $11 = $$pre;
    break;
   } else {
    $rc$1 = $3;
    STACKTOP = sp;return ($rc$1|0);
   }
  }
 } while(0);
 $5 = HEAP32[$pPager>>2]|0;
 $6 = (($pPager) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pPager) + 212|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $11&255;
 $12 = (($pPager) + 160|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($pPager) + 208|0);
 $20 = (_sqlite3WalOpen($5,$7,$9,$10,$15,$18,$19)|0);
 $rc$1 = $20;
 STACKTOP = sp;return ($rc$1|0);
}
function _pagerExclusiveLock($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pagerLockDb($pPager,4)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_pagerUnlockDb($pPager,1)|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _sqlite3WalOpen($pVfs,$pDbFd,$zWalName,$bNoShm,$0,$1,$ppWal) {
 $pVfs = $pVfs|0;
 $pDbFd = $pDbFd|0;
 $zWalName = $zWalName|0;
 $bNoShm = $bNoShm|0;
 $0 = $0|0;
 $1 = $1|0;
 $ppWal = $ppWal|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $flags = sp;
 HEAP32[$ppWal>>2] = 0;
 $2 = (($pVfs) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 112)|0;
 $5 = (_sqlite3MallocZero($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$5>>2] = $pVfs;
 $7 = (($5) + 112|0);
 $8 = (($5) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($5) + 4|0);
 HEAP32[$9>>2] = $pDbFd;
 $10 = (($5) + 40|0);
 HEAP16[$10>>1] = -1;
 $11 = (($5) + 16|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (($5) + 100|0);
 HEAP32[$16>>2] = $zWalName;
 $17 = (($5) + 48|0);
 HEAP8[$17>>0] = 1;
 $18 = (($5) + 49|0);
 HEAP8[$18>>0] = 1;
 $19 = ($bNoShm|0)!=(0);
 $20 = $19 ? 2 : 0;
 $21 = (($5) + 43|0);
 HEAP8[$21>>0] = $20;
 HEAP32[$flags>>2] = 524294;
 $22 = (_sqlite3OsOpen($pVfs,$zWalName,$7,524294,$flags)|0);
 $cond = ($22|0)==(0);
 if (!($cond)) {
  _walIndexClose($5,0);
  $27 = HEAP32[$8>>2]|0;
  _sqlite3OsClose($27);
  _sqlite3_free($5);
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$flags>>2]|0;
 $24 = $23 & 1;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = (($5) + 46|0);
  HEAP8[$26>>0] = 1;
 }
 $28 = (_sqlite3OsDeviceCharacteristics($pDbFd)|0);
 $29 = $28 & 1024;
 $30 = ($29|0)==(0);
 if (!($30)) {
  HEAP8[$17>>0] = 0;
 }
 $31 = $28 & 4096;
 $32 = ($31|0)==(0);
 if (!($32)) {
  HEAP8[$18>>0] = 0;
 }
 HEAP32[$ppWal>>2] = $5;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalDbsize($pWal) {
 $pWal = $pWal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pWal|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (($pWal) + 40|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = ($2<<16>>16)>(-1);
  if ($3) {
   $4 = (($pWal) + 72|0);
   $5 = HEAP32[$4>>2]|0;
   $$0 = $5;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3OsCheckReservedLock($id,$pResOut) {
 $id = $id|0;
 $pResOut = $pResOut|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$id>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($id,$pResOut)|0);
 STACKTOP = sp;return ($3|0);
}
function _rowSetEntrySort($pIn) {
 $pIn = $pIn|0;
 var $$06 = 0, $$1$lcssa = 0, $$14 = 0, $$22 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $aBucket = 0, $exitcond = 0, $i$03 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $aBucket = sp;
 _memset(($aBucket|0),0,160)|0;
 $0 = ($pIn|0)==(0|0);
 L1: do {
  if ($0) {
   $$22 = 0;$i$11 = 0;
  } else {
   $$06 = $pIn;$4 = 0;
   while(1) {
    $1 = (($$06) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    HEAP32[$1>>2] = 0;
    $3 = ($4|0)==(0|0);
    if ($3) {
     $$1$lcssa = $$06;$$lcssa = $aBucket;
    } else {
     $$14 = $$06;$5 = $4;$7 = $aBucket;$i$03 = 0;
     while(1) {
      $6 = (_rowSetEntryMerge($5,$$14)|0);
      HEAP32[$7>>2] = 0;
      $8 = (($i$03) + 1)|0;
      $9 = (($aBucket) + ($8<<2)|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = ($10|0)==(0|0);
      if ($11) {
       $$1$lcssa = $6;$$lcssa = $9;
       break;
      } else {
       $$14 = $6;$5 = $10;$7 = $9;$i$03 = $8;
      }
     }
    }
    HEAP32[$$lcssa>>2] = $$1$lcssa;
    $12 = ($2|0)==(0|0);
    if ($12) {
     $$22 = 0;$i$11 = 0;
     break L1;
    }
    $$pre = HEAP32[$aBucket>>2]|0;
    $$06 = $2;$4 = $$pre;
   }
  }
 } while(0);
 while(1) {
  $13 = (($aBucket) + ($i$11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_rowSetEntryMerge($$22,$14)|0);
  $16 = (($i$11) + 1)|0;
  $exitcond = ($16|0)==(40);
  if ($exitcond) {
   break;
  } else {
   $$22 = $15;$i$11 = $16;
  }
 }
 STACKTOP = sp;return ($15|0);
}
function _rowSetListToTree($pList) {
 $pList = $pList|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iDepth$02 = 0, $p$0$lcssa = 0, $p$01 = 0, $p$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (($pList) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 HEAP32[$1>>2] = 0;
 $3 = (($pList) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $p$0$lcssa = $pList;
  STACKTOP = sp;return ($p$0$lcssa|0);
 } else {
  $6 = $2;$iDepth$02 = 1;$p$01 = $pList;
 }
 while(1) {
  $5 = (($6) + 8|0);
  $7 = HEAP32[$5>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = (($6) + 12|0);
  HEAP32[$8>>2] = $p$01;
  $9 = (_rowSetNDeepTree($0,$iDepth$02)|0);
  HEAP32[$5>>2] = $9;
  $10 = (($iDepth$02) + 1)|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $p$0$lcssa = $6;
   break;
  } else {
   $p$01$phi = $6;$6 = $11;$iDepth$02 = $10;$p$01 = $p$01$phi;
  }
 }
 STACKTOP = sp;return ($p$0$lcssa|0);
}
function _rowSetTreeToList($pIn,$ppFirst,$ppLast) {
 $pIn = $pIn|0;
 $ppFirst = $ppFirst|0;
 $ppLast = $ppLast|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = (($pIn) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$ppFirst>>2] = $pIn;
 } else {
  _rowSetTreeToList($1,$ppFirst,$p);
  $3 = HEAP32[$p>>2]|0;
  $4 = (($3) + 8|0);
  HEAP32[$4>>2] = $pIn;
 }
 $5 = (($pIn) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$ppLast>>2] = $pIn;
  STACKTOP = sp;return;
 } else {
  _rowSetTreeToList($6,$5,$ppLast);
  STACKTOP = sp;return;
 }
}
function _rowSetEntryMerge($pA,$pB) {
 $pA = $pA|0;
 $pB = $pB|0;
 var $$0$lcssa = 0, $$0$ph21 = 0, $$01$$0 = 0, $$01$ph$be = 0, $$01$ph$be$in = 0, $$01$ph14 = 0, $$01$ph20 = 0, $$09 = 0, $$8 = 0, $$819 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $head = 0, $pTail$0$lcssa = 0, $pTail$0$ph$be = 0, $pTail$0$ph22 = 0, $pTail$010 = 0, $pTail$010$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $head = sp;
 $0 = ($pA|0)!=(0|0);
 $1 = ($pB|0)!=(0|0);
 $$819 = $0 & $1;
 L1: do {
  if ($$819) {
   $$0$ph21 = $pB;$$01$ph20 = $pA;$pTail$0$ph22 = $head;
   while(1) {
    $2 = $$01$ph20;
    $3 = $2;
    $4 = HEAP32[$3>>2]|0;
    $5 = (($2) + 4)|0;
    $6 = $5;
    $7 = HEAP32[$6>>2]|0;
    $$09 = $$0$ph21;$pTail$010 = $pTail$0$ph22;
    while(1) {
     $8 = $$09;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = ($7|0)<($13|0);
     $15 = ($7|0)==($13|0);
     $16 = ($4>>>0)<($10>>>0);
     $17 = $15 & $16;
     $18 = $14 | $17;
     if ($18) {
      label = 4;
      break;
     }
     $22 = ($13|0)<($7|0);
     $23 = ($13|0)==($7|0);
     $24 = ($10>>>0)<($4>>>0);
     $25 = $23 & $24;
     $26 = $22 | $25;
     if (!($26)) {
      $pTail$0$ph$be = $pTail$010;
      break;
     }
     $27 = (($pTail$010) + 8|0);
     HEAP32[$27>>2] = $$09;
     $28 = (($$09) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      $$0$lcssa = 0;$$01$ph14 = $$01$ph20;$$lcssa = 1;$pTail$0$lcssa = $$09;
      break L1;
     } else {
      $pTail$010$phi = $$09;$$09 = $29;$pTail$010 = $pTail$010$phi;
     }
    }
    if ((label|0) == 4) {
     label = 0;
     $19 = (($pTail$010) + 8|0);
     HEAP32[$19>>2] = $$01$ph20;
     $pTail$0$ph$be = $$01$ph20;
    }
    $$01$ph$be$in = (($$01$ph20) + 8|0);
    $$01$ph$be = HEAP32[$$01$ph$be$in>>2]|0;
    $20 = ($$01$ph$be|0)!=(0|0);
    $21 = ($$09|0)!=(0|0);
    $$8 = $20 & $21;
    if ($$8) {
     $$0$ph21 = $$09;$$01$ph20 = $$01$ph$be;$pTail$0$ph22 = $pTail$0$ph$be;
    } else {
     $$0$lcssa = $$09;$$01$ph14 = $$01$ph$be;$$lcssa = $20;$pTail$0$lcssa = $pTail$0$ph$be;
     break;
    }
   }
  } else {
   $$0$lcssa = $pB;$$01$ph14 = $pA;$$lcssa = $0;$pTail$0$lcssa = $head;
  }
 } while(0);
 $31 = (($pTail$0$lcssa) + 8|0);
 $$01$$0 = $$lcssa ? $$01$ph14 : $$0$lcssa;
 HEAP32[$31>>2] = $$01$$0;
 $32 = (($head) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 STACKTOP = sp;return ($33|0);
}
function _rowSetEntryAlloc($p) {
 $p = $p|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 do {
  if ($2) {
   $3 = (($p) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (_sqlite3DbMallocRaw($4,1016)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $7 = HEAP32[$p>>2]|0;
    HEAP32[$5>>2] = $7;
    HEAP32[$p>>2] = $5;
    $8 = (($5) + 8|0);
    $9 = (($p) + 16|0);
    HEAP32[$9>>2] = $8;
    HEAP16[$0>>1] = 63;
    $10 = 62;$13 = $8;
    break;
   }
  } else {
   $$phi$trans$insert = (($p) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp = (($1) + -1)<<16>>16;
   $10 = $phitmp;$13 = $$pre;
  }
 } while(0);
 HEAP16[$0>>1] = $10;
 $11 = (($p) + 16|0);
 $12 = (($13) + 16|0);
 HEAP32[$11>>2] = $12;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _rowSetNDeepTree($ppList,$iDepth) {
 $ppList = $ppList|0;
 $iDepth = $iDepth|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ppList>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($iDepth|0)==(1);
 if ($2) {
  $3 = (($0) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$ppList>>2] = $4;
  HEAP32[$3>>2] = 0;
  $5 = (($0) + 12|0);
  HEAP32[$5>>2] = 0;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($iDepth) + -1)|0;
 $7 = (_rowSetNDeepTree($ppList,$6)|0);
 $8 = HEAP32[$ppList>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 } else {
  $10 = (($8) + 12|0);
  HEAP32[$10>>2] = $7;
  $11 = (($8) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$ppList>>2] = $12;
  $13 = (_rowSetNDeepTree($ppList,$6)|0);
  HEAP32[$11>>2] = $13;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _rowSetToList($p) {
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 26|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (($p) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_rowSetEntrySort($5)|0);
  HEAP32[$4>>2] = $6;
  $$pre = HEAP8[$0>>0]|0;
  $8 = $$pre;
 } else {
  $8 = $1;
 }
 $7 = $8&255;
 $9 = $7 | 2;
 $10 = $9&255;
 HEAP8[$0>>0] = $10;
 STACKTOP = sp;return;
}
function _sqlite3RowSetInit($db,$pSpace,$N) {
 $db = $db|0;
 $pSpace = $pSpace|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pSpace>>2] = 0;
 $0 = (($pSpace) + 4|0);
 HEAP32[$0>>2] = $db;
 $1 = (($pSpace) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($pSpace) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($pSpace) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($pSpace) + 32|0);
 $5 = (($pSpace) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (($N) + 1048544)|0;
 $7 = $6 >>> 4;
 $8 = $7&65535;
 $9 = (($pSpace) + 24|0);
 HEAP16[$9>>1] = $8;
 $10 = (($pSpace) + 26|0);
 HEAP8[$10>>0] = 1;
 $11 = (($pSpace) + 27|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return ($pSpace|0);
}
function _sqlite3PagerRefcount($pPager$0$54$val$0$3$val) {
 $pPager$0$54$val$0$3$val = $pPager$0$54$val$0$3$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3PcacheRefCount($pPager$0$54$val$0$3$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _setPageReferenced($pCheck$0$2$val,$iPg) {
 $pCheck$0$2$val = $pCheck$0$2$val|0;
 $iPg = $iPg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iPg & 7;
 $1 = 1 << $0;
 $2 = $iPg >>> 3;
 $3 = (($pCheck$0$2$val) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 | $1;
 $7 = $6&255;
 HEAP8[$3>>0] = $7;
 STACKTOP = sp;return;
}
function _checkList($pCheck,$isFreeList,$iPage,$N,$zContext) {
 $pCheck = $pCheck|0;
 $isFreeList = $isFreeList|0;
 $iPage = $iPage|0;
 $N = $N|0;
 $zContext = $zContext|0;
 var $$08 = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $$in = 0, $$pre = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $or$cond = 0, $pOvflPage = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $pOvflPage = sp + 28|0;
 $0 = ($N|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($pCheck) + 16|0);
 $2 = (($pCheck) + 4|0);
 $3 = ($isFreeList|0)==(0);
 $$08 = $iPage;$$in = $N;
 while(1) {
  $4 = (($$in) + -1)|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   label = 23;
   break;
  }
  $7 = ($$08|0)<(1);
  if ($7) {
   label = 5;
   break;
  }
  $8 = (_checkRef($pCheck,$$08,$zContext)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   label = 23;
   break;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = (_sqlite3PagerAcquire($10,$$08,$pOvflPage,0)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = HEAP32[$pOvflPage>>2]|0;
  $$idx = (($13) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $14 = (_sqlite3PagerGetData($$idx$val)|0);
  do {
   if ($3) {
    $39 = HEAP32[$pCheck>>2]|0;
    $40 = (($39) + 17|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)!=(0);
    $43 = ($4|0)>(0);
    $or$cond = $42 & $43;
    if ($or$cond) {
     $44 = (_sqlite3Get4byte($14)|0);
     _checkPtrmap($pCheck,$44,4,$$08,$zContext);
     $$1 = $4;
    } else {
     $$1 = $4;
    }
   } else {
    $15 = (($14) + 4|0);
    $16 = (_sqlite3Get4byte($15)|0);
    $17 = HEAP32[$pCheck>>2]|0;
    $18 = (($17) + 17|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $22 = $17;
    } else {
     _checkPtrmap($pCheck,$$08,2,0,$zContext);
     $$pre = HEAP32[$pCheck>>2]|0;
     $22 = $$pre;
    }
    $21 = (($22) + 36|0);
    $23 = HEAP32[$21>>2]|0;
    $24 = (($23|0) / 4)&-1;
    $25 = (($24) + -2)|0;
    $26 = ($16|0)>($25|0);
    if ($26) {
     HEAP32[$vararg_buffer6>>2] = $$08;
     _checkAppendMsg($pCheck,$zContext,34360,$vararg_buffer6);
     $28 = (($$in) + -2)|0;
     $$1 = $28;
     break;
    }
    $27 = ($16|0)>(0);
    L20: do {
     if ($27) {
      $34 = $22;$i$02 = 0;
      while(1) {
       $29 = $i$02 << 2;
       $30 = (($29) + 8)|0;
       $31 = (($14) + ($30)|0);
       $32 = (_sqlite3Get4byte($31)|0);
       $33 = (($34) + 17|0);
       $35 = HEAP8[$33>>0]|0;
       $36 = ($35<<24>>24)==(0);
       if (!($36)) {
        _checkPtrmap($pCheck,$32,2,0,$zContext);
       }
       (_checkRef($pCheck,$32,$zContext)|0);
       $37 = (($i$02) + 1)|0;
       $exitcond = ($37|0)==($16|0);
       if ($exitcond) {
        break L20;
       }
       $$pre18 = HEAP32[$pCheck>>2]|0;
       $34 = $$pre18;$i$02 = $37;
      }
     }
    } while(0);
    $38 = (($4) - ($16))|0;
    $$1 = $38;
   }
  } while(0);
  $45 = (_sqlite3Get4byte($14)|0);
  _sqlite3PagerUnref($13);
  $46 = ($$1|0)>(0);
  if ($46) {
   $$08 = $45;$$in = $$1;
  } else {
   label = 23;
   break;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer>>2] = $$in;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $N;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $iPage;
  _checkAppendMsg($pCheck,$zContext,34272,$vararg_buffer);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  HEAP32[$vararg_buffer3>>2] = $$08;
  _checkAppendMsg($pCheck,$zContext,34336,$vararg_buffer3);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _checkPtrmap($pCheck,$iChild,$eType,$iParent,$zContext) {
 $pCheck = $pCheck|0;
 $iChild = $iChild|0;
 $eType = $eType|0;
 $iParent = $iParent|0;
 $zContext = $zContext|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ePtrmapType = 0, $iPtrmapParent = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ePtrmapType = sp + 32|0;
 $iPtrmapParent = sp + 28|0;
 $0 = HEAP32[$pCheck>>2]|0;
 $1 = (_ptrmapGet($0,$iChild,$ePtrmapType,$iPtrmapParent)|0);
 if ((($1|0) == 0)) {
  $3 = HEAP8[$ePtrmapType>>0]|0;
  $4 = ($3<<24>>24)==($eType<<24>>24);
  $5 = HEAP32[$iPtrmapParent>>2]|0;
  $6 = ($5|0)==($iParent|0);
  $or$cond = $4 & $6;
  if ($or$cond) {
   STACKTOP = sp;return;
  }
  $7 = $eType&255;
  $8 = $3&255;
  HEAP32[$vararg_buffer1>>2] = $iChild;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $7;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $iParent;
  $vararg_ptr6 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $8;
  $vararg_ptr7 = (($vararg_buffer1) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $5;
  _checkAppendMsg($pCheck,$zContext,34216,$vararg_buffer1);
  STACKTOP = sp;return;
 } else if ((($1|0) == 7) | (($1|0) == 3082)) {
  $2 = (($pCheck) + 24|0);
  HEAP32[$2>>2] = 1;
 }
 HEAP32[$vararg_buffer>>2] = $iChild;
 _checkAppendMsg($pCheck,$zContext,34184,$vararg_buffer);
 STACKTOP = sp;return;
}
function _checkTreePage($pCheck,$iPage,$zParentContext,$pnParentMinKey,$pnParentMaxKey) {
 $pCheck = $pCheck|0;
 $iPage = $iPage|0;
 $zParentContext = $zParentContext|0;
 $pnParentMinKey = $pnParentMinKey|0;
 $pnParentMaxKey = $pnParentMaxKey|0;
 var $$0 = 0, $$nMaxKey = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre45 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$011 = 0, $cnt$013 = 0, $cnt$1 = 0, $depth$0$lcssa = 0, $depth$030 = 0, $depth$1 = 0, $i$031 = 0, $i$125 = 0, $i$218 = 0, $i$314 = 0, $info = 0, $j$023 = 0, $j2$016 = 0;
 var $j2$016$in = 0, $nMaxKey = 0, $nMaxKey$ = 0, $nMinKey = 0, $or$cond = 0, $pPage = 0, $size$0 = 0, $sz$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer44 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $zContext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer44 = sp + 192|0;
 $vararg_buffer40 = sp + 184|0;
 $vararg_buffer36 = sp + 176|0;
 $vararg_buffer32 = sp + 160|0;
 $vararg_buffer28 = sp + 144|0;
 $vararg_buffer24 = sp + 128|0;
 $vararg_buffer20 = sp + 112|0;
 $vararg_buffer17 = sp + 104|0;
 $vararg_buffer15 = sp + 96|0;
 $vararg_buffer11 = sp + 80|0;
 $vararg_buffer7 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $pPage = sp + 204|0;
 $zContext = sp + 208|0;
 $nMinKey = sp + 40|0;
 $nMaxKey = sp + 32|0;
 $info = sp;
 $0 = $nMinKey;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $nMaxKey;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 HEAP32[$vararg_buffer>>2] = $iPage;
 (_sqlite3_snprintf(100,$zContext,33488,$vararg_buffer)|0);
 $8 = HEAP32[$pCheck>>2]|0;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($iPage|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_checkRef($pCheck,$iPage,$zParentContext)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_btreeGetPage($8,$iPage,$pPage,0)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  HEAP32[$vararg_buffer1>>2] = $14;
  _checkAppendMsg($pCheck,$zContext,33504,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$pPage>>2]|0;
 HEAP8[$16>>0] = 0;
 $17 = (_btreeInitPage($16)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  HEAP32[$vararg_buffer4>>2] = $17;
  _checkAppendMsg($pCheck,$zContext,33544,$vararg_buffer4);
  _releasePage($16);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (($pCheck) + 16|0);
 $20 = (($16) + 16|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)==(0);
 L15: do {
  if ($22) {
   $$pre45 = (($16) + 3|0);
   $$pre$phiZ2D = $$pre45;$depth$0$lcssa = 0;
  } else {
   $23 = (($16) + 56|0);
   $24 = (($16) + 18|0);
   $25 = (($16) + 64|0);
   $26 = (($info) + 12|0);
   $27 = (($16) + 2|0);
   $28 = (($info) + 22|0);
   $29 = (($info) + 24|0);
   $30 = (($10) + -5)|0;
   $31 = (($10) + -4)|0;
   $32 = (($8) + 17|0);
   $33 = (($16) + 3|0);
   $depth$030 = 0;$i$031 = 0;
   while(1) {
    $34 = HEAP32[$19>>2]|0;
    $35 = ($34|0)==(0);
    if ($35) {
     $$pre$phiZ2D = $33;$depth$0$lcssa = $depth$030;
     break L15;
    }
    HEAP32[$vararg_buffer7>>2] = $iPage;
    $vararg_ptr10 = (($vararg_buffer7) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $i$031;
    (_sqlite3_snprintf(100,$zContext,33584,$vararg_buffer7)|0);
    $36 = HEAP32[$23>>2]|0;
    $37 = HEAP16[$24>>1]|0;
    $38 = $37&65535;
    $39 = $i$031 << 1;
    $40 = HEAP32[$25>>2]|0;
    $41 = (($40) + ($39)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43 << 8;
    $$sum67 = $39 | 1;
    $45 = (($40) + ($$sum67)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $44 | $47;
    $49 = $48 & $38;
    $50 = (($36) + ($49)|0);
    _btreeParseCellPtr($16,$50,$info);
    $51 = HEAP32[$26>>2]|0;
    $52 = HEAP8[$27>>0]|0;
    $53 = ($52<<24>>24)==(0);
    do {
     if ($53) {
      $54 = $info;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $57 = (($54) + 4)|0;
      $58 = $57;
      $59 = HEAP32[$58>>2]|0;
      $60 = (($56) + ($51))|0;
      $sz$0 = $60;
     } else {
      $61 = ($i$031|0)==(0);
      $62 = $info;
      $63 = $62;
      $64 = HEAP32[$63>>2]|0;
      $65 = (($62) + 4)|0;
      $66 = $65;
      $67 = HEAP32[$66>>2]|0;
      if ($61) {
       $68 = $nMaxKey;
       $69 = $68;
       HEAP32[$69>>2] = $64;
       $70 = (($68) + 4)|0;
       $71 = $70;
       HEAP32[$71>>2] = $67;
       $72 = $nMinKey;
       $73 = $72;
       HEAP32[$73>>2] = $64;
       $74 = (($72) + 4)|0;
       $75 = $74;
       HEAP32[$75>>2] = $67;
       $sz$0 = $51;
       break;
      }
      $76 = $nMaxKey;
      $77 = $76;
      $78 = HEAP32[$77>>2]|0;
      $79 = (($76) + 4)|0;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = ($67|0)>($81|0);
      $83 = ($67|0)==($81|0);
      $84 = ($64>>>0)>($78>>>0);
      $85 = $83 & $84;
      $86 = $82 | $85;
      if (!($86)) {
       $87 = $vararg_buffer11;
       $88 = $87;
       HEAP32[$88>>2] = $64;
       $89 = (($87) + 4)|0;
       $90 = $89;
       HEAP32[$90>>2] = $67;
       $vararg_ptr14 = (($vararg_buffer11) + 8|0);
       $91 = $vararg_ptr14;
       $92 = $91;
       HEAP32[$92>>2] = $78;
       $93 = (($91) + 4)|0;
       $94 = $93;
       HEAP32[$94>>2] = $81;
       _checkAppendMsg($pCheck,$zContext,33616,$vararg_buffer11);
      }
      $95 = $nMaxKey;
      $96 = $95;
      HEAP32[$96>>2] = $64;
      $97 = (($95) + 4)|0;
      $98 = $97;
      HEAP32[$98>>2] = $67;
      $sz$0 = $51;
     }
    } while(0);
    $99 = HEAP16[$28>>1]|0;
    $100 = $99&65535;
    $101 = ($sz$0>>>0)>($100>>>0);
    if ($101) {
     $102 = HEAP16[$29>>1]|0;
     $103 = $102&65535;
     $$sum8 = (($103) + ($49))|0;
     $104 = (($36) + ($$sum8)|0);
     $105 = HEAP32[$9>>2]|0;
     $106 = HEAP32[$23>>2]|0;
     $107 = (($106) + ($105)|0);
     $108 = ($104>>>0)>($107>>>0);
     if (!($108)) {
      $109 = (($30) + ($sz$0))|0;
      $110 = (($109) - ($100))|0;
      $111 = (($110>>>0) / ($31>>>0))&-1;
      $112 = (_sqlite3Get4byte($104)|0);
      $113 = HEAP8[$32>>0]|0;
      $114 = ($113<<24>>24)==(0);
      if (!($114)) {
       _checkPtrmap($pCheck,$112,3,$iPage,$zContext);
      }
      _checkList($pCheck,0,$112,$111,$zContext);
     }
    }
    $115 = HEAP8[$33>>0]|0;
    $116 = ($115<<24>>24)==(0);
    if ($116) {
     $117 = (_sqlite3Get4byte($50)|0);
     $118 = HEAP8[$32>>0]|0;
     $119 = ($118<<24>>24)==(0);
     if (!($119)) {
      _checkPtrmap($pCheck,$117,5,$iPage,$zContext);
     }
     $120 = ($i$031|0)==(0);
     $$nMaxKey = $120 ? 0 : $nMaxKey;
     $121 = (_checkTreePage($pCheck,$117,$zContext,$nMinKey,$$nMaxKey)|0);
     $122 = ($i$031|0)<(1);
     $123 = ($121|0)==($depth$030|0);
     $or$cond = $122 | $123;
     if ($or$cond) {
      $depth$1 = $121;
     } else {
      _checkAppendMsg($pCheck,$zContext,33664,$vararg_buffer15);
      $depth$1 = $121;
     }
    } else {
     $depth$1 = $depth$030;
    }
    $124 = (($i$031) + 1)|0;
    $125 = HEAP16[$20>>1]|0;
    $126 = $125&65535;
    $127 = ($124|0)<($126|0);
    if ($127) {
     $depth$030 = $depth$1;$i$031 = $124;
    } else {
     $$pre$phiZ2D = $33;$depth$0$lcssa = $depth$1;
     break;
    }
   }
  }
 } while(0);
 $128 = HEAP8[$$pre$phiZ2D>>0]|0;
 $129 = ($128<<24>>24)==(0);
 if ($129) {
  $130 = (($16) + 5|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = (($132) + 8)|0;
  $134 = (($16) + 56|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + ($133)|0);
  $137 = (_sqlite3Get4byte($136)|0);
  HEAP32[$vararg_buffer17>>2] = $iPage;
  (_sqlite3_snprintf(100,$zContext,33696,$vararg_buffer17)|0);
  $138 = (($8) + 17|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = ($139<<24>>24)==(0);
  if (!($140)) {
   _checkPtrmap($pCheck,$137,5,$iPage,$zContext);
  }
  $141 = HEAP16[$20>>1]|0;
  $142 = ($141<<16>>16)!=(0);
  $nMaxKey$ = $142 ? $nMaxKey : 0;
  (_checkTreePage($pCheck,$137,$zContext,0,$nMaxKey$)|0);
  $$pre = HEAP8[$$pre$phiZ2D>>0]|0;
  $143 = ($$pre<<24>>24)==(0);
  if (!($143)) {
   label = 33;
  }
 } else {
  label = 33;
 }
 do {
  if ((label|0) == 33) {
   $144 = (($16) + 2|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = ($145<<24>>24)==(0);
   if (!($146)) {
    $147 = ($pnParentMinKey|0)==(0|0);
    $148 = ($pnParentMaxKey|0)!=(0|0);
    if ($147) {
     if (!($148)) {
      break;
     }
     $236 = $nMinKey;
     $237 = $236;
     $238 = HEAP32[$237>>2]|0;
     $239 = (($236) + 4)|0;
     $240 = $239;
     $241 = HEAP32[$240>>2]|0;
     $242 = $pnParentMaxKey;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $248 = ($241|0)>($247|0);
     $249 = ($241|0)==($247|0);
     $250 = ($238>>>0)>($244>>>0);
     $251 = $249 & $250;
     $252 = $248 | $251;
     if ($252) {
      break;
     }
     $253 = $vararg_buffer32;
     $254 = $253;
     HEAP32[$254>>2] = $238;
     $255 = (($253) + 4)|0;
     $256 = $255;
     HEAP32[$256>>2] = $241;
     $vararg_ptr35 = (($vararg_buffer32) + 8|0);
     $257 = $vararg_ptr35;
     $258 = $257;
     HEAP32[$258>>2] = $244;
     $259 = (($257) + 4)|0;
     $260 = $259;
     HEAP32[$260>>2] = $247;
     _checkAppendMsg($pCheck,$zContext,33920,$vararg_buffer32);
     break;
    }
    if (!($148)) {
     $149 = $nMaxKey;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($149) + 4)|0;
     $153 = $152;
     $154 = HEAP32[$153>>2]|0;
     $155 = $pnParentMinKey;
     $156 = $155;
     $157 = HEAP32[$156>>2]|0;
     $158 = (($155) + 4)|0;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = ($154|0)>($160|0);
     $162 = ($154|0)==($160|0);
     $163 = ($151>>>0)>($157>>>0);
     $164 = $162 & $163;
     $165 = $161 | $164;
     if (!($165)) {
      break;
     }
     $166 = $vararg_buffer20;
     $167 = $166;
     HEAP32[$167>>2] = $151;
     $168 = (($166) + 4)|0;
     $169 = $168;
     HEAP32[$169>>2] = $154;
     $vararg_ptr23 = (($vararg_buffer20) + 8|0);
     $170 = $vararg_ptr23;
     $171 = $170;
     HEAP32[$171>>2] = $157;
     $172 = (($170) + 4)|0;
     $173 = $172;
     HEAP32[$173>>2] = $160;
     _checkAppendMsg($pCheck,$zContext,33728,$vararg_buffer20);
     break;
    }
    $174 = $nMinKey;
    $175 = $174;
    $176 = HEAP32[$175>>2]|0;
    $177 = (($174) + 4)|0;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = $pnParentMinKey;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $183 = (($180) + 4)|0;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = ($179|0)>($185|0);
    $187 = ($179|0)==($185|0);
    $188 = ($176>>>0)>($182>>>0);
    $189 = $187 & $188;
    $190 = $186 | $189;
    if (!($190)) {
     $191 = $vararg_buffer24;
     $192 = $191;
     HEAP32[$192>>2] = $176;
     $193 = (($191) + 4)|0;
     $194 = $193;
     HEAP32[$194>>2] = $179;
     $vararg_ptr27 = (($vararg_buffer24) + 8|0);
     $195 = $vararg_ptr27;
     $196 = $195;
     HEAP32[$196>>2] = $182;
     $197 = (($195) + 4)|0;
     $198 = $197;
     HEAP32[$198>>2] = $185;
     _checkAppendMsg($pCheck,$zContext,33792,$vararg_buffer24);
    }
    $199 = $nMaxKey;
    $200 = $199;
    $201 = HEAP32[$200>>2]|0;
    $202 = (($199) + 4)|0;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $205 = $pnParentMaxKey;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($205) + 4)|0;
    $209 = $208;
    $210 = HEAP32[$209>>2]|0;
    $211 = ($204|0)>($210|0);
    $212 = ($204|0)==($210|0);
    $213 = ($201>>>0)>($207>>>0);
    $214 = $212 & $213;
    $215 = $211 | $214;
    if ($215) {
     $216 = $vararg_buffer28;
     $217 = $216;
     HEAP32[$217>>2] = $201;
     $218 = (($216) + 4)|0;
     $219 = $218;
     HEAP32[$219>>2] = $204;
     $vararg_ptr31 = (($vararg_buffer28) + 8|0);
     $220 = $vararg_ptr31;
     $221 = $220;
     HEAP32[$221>>2] = $207;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $210;
     _checkAppendMsg($pCheck,$zContext,33856,$vararg_buffer28);
     $224 = $nMaxKey;
     $225 = $224;
     $226 = HEAP32[$225>>2]|0;
     $227 = (($224) + 4)|0;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $232 = $226;$235 = $229;
    } else {
     $232 = $201;$235 = $204;
    }
    $230 = $pnParentMinKey;
    $231 = $230;
    HEAP32[$231>>2] = $232;
    $233 = (($230) + 4)|0;
    $234 = $233;
    HEAP32[$234>>2] = $235;
   }
  }
 } while(0);
 $261 = (($16) + 56|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (($16) + 5|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = $264&255;
 $266 = (($8) + 32|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = (_sqlite3PageMalloc($267)|0);
 $269 = ($268|0)==(0|0);
 if ($269) {
  $270 = (($pCheck) + 24|0);
  HEAP32[$270>>2] = 1;
 } else {
  $271 = (($265) + 5)|0;
  $272 = (($262) + ($271)|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = $273&255;
  $275 = $274 << 8;
  $$sum = (($265) + 6)|0;
  $276 = (($262) + ($$sum)|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = $277&255;
  $279 = $275 | $278;
  $280 = (($279) + 65535)|0;
  $281 = $280 & 65535;
  $282 = (($281) + 1)|0;
  $283 = (($268) + ($282)|0);
  $284 = (($10) - ($282))|0;
  _memset(($283|0),0,($284|0))|0;
  _memset(($268|0),1,($282|0))|0;
  $285 = (($265) + 3)|0;
  $286 = (($262) + ($285)|0);
  $287 = HEAP8[$286>>0]|0;
  $288 = $287&255;
  $289 = $288 << 8;
  $$sum1 = (($265) + 4)|0;
  $290 = (($262) + ($$sum1)|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = $291&255;
  $293 = $289 | $292;
  $294 = (($265) + 12)|0;
  $295 = HEAP8[$$pre$phiZ2D>>0]|0;
  $296 = $295&255;
  $297 = $296 << 2;
  $298 = (($294) - ($297))|0;
  $299 = ($293|0)==(0);
  if (!($299)) {
   $300 = (($10) + -4)|0;
   $i$125 = 0;
   while(1) {
    $301 = $i$125 << 1;
    $302 = (($298) + ($301))|0;
    $303 = (($262) + ($302)|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = $305 << 8;
    $$sum5 = (($302) + 1)|0;
    $307 = (($262) + ($$sum5)|0);
    $308 = HEAP8[$307>>0]|0;
    $309 = $308&255;
    $310 = $306 | $309;
    $311 = ($310|0)>($300|0);
    if ($311) {
     $size$0 = 65536;
    } else {
     $312 = (($262) + ($310)|0);
     $313 = (_cellSizePtr($16,$312)|0);
     $314 = $313&65535;
     $size$0 = $314;
    }
    $315 = (($310) + -1)|0;
    $316 = (($315) + ($size$0))|0;
    $317 = ($316|0)<($10|0);
    if ($317) {
     $318 = ($316|0)<($310|0);
     if (!($318)) {
      $j$023 = $316;
      while(1) {
       $319 = (($268) + ($j$023)|0);
       $320 = HEAP8[$319>>0]|0;
       $321 = (($320) + 1)<<24>>24;
       HEAP8[$319>>0] = $321;
       $322 = (($j$023) + -1)|0;
       $323 = ($j$023|0)>($310|0);
       if ($323) {
        $j$023 = $322;
       } else {
        break;
       }
      }
     }
    } else {
     HEAP32[$vararg_buffer36>>2] = $i$125;
     $vararg_ptr39 = (($vararg_buffer36) + 4|0);
     HEAP32[$vararg_ptr39>>2] = $iPage;
     _checkAppendMsg($pCheck,0,33984,$vararg_buffer36);
    }
    $324 = (($i$125) + 1)|0;
    $325 = ($324|0)<($293|0);
    if ($325) {
     $i$125 = $324;
    } else {
     break;
    }
   }
  }
  $326 = (($265) + 1)|0;
  $327 = (($262) + ($326)|0);
  $328 = HEAP8[$327>>0]|0;
  $329 = $328&255;
  $330 = $329 << 8;
  $$sum2 = (($265) + 2)|0;
  $331 = (($262) + ($$sum2)|0);
  $332 = HEAP8[$331>>0]|0;
  $333 = $332&255;
  $334 = $330 | $333;
  $335 = ($334|0)==(0);
  if (!($335)) {
   $i$218 = $334;
   while(1) {
    $337 = (($i$218) + 2)|0;
    $338 = (($262) + ($337)|0);
    $339 = HEAP8[$338>>0]|0;
    $340 = $339&255;
    $341 = $340 << 8;
    $$sum3 = (($i$218) + 3)|0;
    $342 = (($262) + ($$sum3)|0);
    $343 = HEAP8[$342>>0]|0;
    $344 = $343&255;
    $345 = $341 | $344;
    $346 = ($345|0)==(0);
    if (!($346)) {
     $347 = (($345) + ($i$218))|0;
     $j2$016$in = $347;
     while(1) {
      $j2$016 = (($j2$016$in) + -1)|0;
      $348 = (($268) + ($j2$016)|0);
      $349 = HEAP8[$348>>0]|0;
      $350 = (($349) + 1)<<24>>24;
      HEAP8[$348>>0] = $350;
      $351 = ($j2$016|0)>($i$218|0);
      if ($351) {
       $j2$016$in = $j2$016;
      } else {
       break;
      }
     }
    }
    $352 = (($262) + ($i$218)|0);
    $353 = HEAP8[$352>>0]|0;
    $354 = $353&255;
    $355 = $354 << 8;
    $$sum4 = (($i$218) + 1)|0;
    $356 = (($262) + ($$sum4)|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357&255;
    $359 = $355 | $358;
    $360 = ($359|0)==(0);
    if ($360) {
     break;
    } else {
     $i$218 = $359;
    }
   }
  }
  $336 = ($10|0)>(0);
  L96: do {
   if ($336) {
    $cnt$013 = 0;$i$314 = 0;
    while(1) {
     $361 = (($268) + ($i$314)|0);
     $362 = HEAP8[$361>>0]|0;
     $363 = ($362<<24>>24)==(0);
     if ($363) {
      $364 = (($cnt$013) + 1)|0;
      $cnt$1 = $364;
     } else {
      $365 = ($362<<24>>24)>(1);
      if ($365) {
       break;
      } else {
       $cnt$1 = $cnt$013;
      }
     }
     $366 = (($i$314) + 1)|0;
     $367 = ($366|0)<($10|0);
     if ($367) {
      $cnt$013 = $cnt$1;$i$314 = $366;
     } else {
      $cnt$011 = $cnt$1;
      break L96;
     }
    }
    HEAP32[$vararg_buffer40>>2] = $i$314;
    $vararg_ptr43 = (($vararg_buffer40) + 4|0);
    HEAP32[$vararg_ptr43>>2] = $iPage;
    _checkAppendMsg($pCheck,0,34032,$vararg_buffer40);
    $cnt$011 = $cnt$013;
   } else {
    $cnt$011 = 0;
   }
  } while(0);
  $368 = (($265) + 7)|0;
  $369 = (($262) + ($368)|0);
  $370 = HEAP8[$369>>0]|0;
  $371 = $370&255;
  $372 = ($cnt$011|0)==($371|0);
  if (!($372)) {
   HEAP32[$vararg_buffer44>>2] = $cnt$011;
   $vararg_ptr47 = (($vararg_buffer44) + 4|0);
   HEAP32[$vararg_ptr47>>2] = $371;
   $vararg_ptr48 = (($vararg_buffer44) + 8|0);
   HEAP32[$vararg_ptr48>>2] = $iPage;
   _checkAppendMsg($pCheck,0,34072,$vararg_buffer44);
  }
 }
 _sqlite3PageFree($268);
 _releasePage($16);
 $373 = (($depth$0$lcssa) + 1)|0;
 $$0 = $373;
 STACKTOP = sp;return ($$0|0);
}
function _getPageReferenced($pCheck$0$2$val,$iPg) {
 $pCheck$0$2$val = $pCheck$0$2$val|0;
 $iPg = $iPg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $iPg >>> 3;
 $1 = (($pCheck$0$2$val) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $iPg & 7;
 $5 = 1 << $4;
 $6 = $3 & $5;
 STACKTOP = sp;return ($6|0);
}
function _checkAppendMsg($pCheck,$zMsg1,$zFormat,$varargs) {
 $pCheck = $pCheck|0;
 $zMsg1 = $zMsg1|0;
 $zFormat = $zFormat|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 $0 = (($pCheck) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + -1)|0;
 HEAP32[$0>>2] = $3;
 $4 = (($pCheck) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 HEAP32[$ap>>2] = $varargs;
 $7 = (($pCheck) + 28|0);
 $8 = (($pCheck) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _sqlite3StrAccumAppend($7,33480,1);
 }
 $11 = ($zMsg1|0)==(0|0);
 if (!($11)) {
  _sqlite3StrAccumAppendAll($7,$zMsg1);
 }
 _sqlite3VXPrintf($7,1,$zFormat,$ap);
 $12 = (($pCheck) + 53|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(1);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = (($pCheck) + 24|0);
 HEAP32[$15>>2] = 1;
 STACKTOP = sp;return;
}
function _checkRef($pCheck,$iPage,$zContext) {
 $pCheck = $pCheck|0;
 $iPage = $iPage|0;
 $zContext = $zContext|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pCheck$idx1 = 0, $pCheck$idx1$val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($iPage|0)==(0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pCheck) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<($iPage>>>0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $iPage;
  _checkAppendMsg($pCheck,$zContext,34128,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $pCheck$idx1 = (($pCheck) + 8|0);
 $pCheck$idx1$val = HEAP32[$pCheck$idx1>>2]|0;
 $4 = (_getPageReferenced($pCheck$idx1$val,$iPage)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _setPageReferenced($pCheck$idx1$val,$iPage);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer1>>2] = $iPage;
  _checkAppendMsg($pCheck,$zContext,34152,$vararg_buffer1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _cellSizePtr($pPage,$pCell) {
 $pPage = $pPage|0;
 $pCell = $pCell|0;
 var $$2 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nSize = 0, $or$cond = 0;
 var $pIter$0 = 0, $pIter$1 = 0, $pIter$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nSize = sp;
 $0 = (($pPage) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($pCell) + ($2)|0);
 $4 = (($pPage) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $22 = HEAP8[$3>>0]|0;
  $23 = ($22<<24>>24)>(-1);
  if ($23) {
   $24 = $22&255;
   HEAP32[$nSize>>2] = $24;
   $27 = 1;
  } else {
   $25 = (_sqlite3GetVarint32($3,$nSize)|0);
   $27 = $25;
  }
  $26 = $27&255;
  $$sum = (($26) + ($2))|0;
  $28 = (($pCell) + ($$sum)|0);
  $pIter$2 = $28;
 } else {
  $7 = (($pPage) + 4|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   HEAP32[$nSize>>2] = 0;
   $pIter$0 = $3;
  } else {
   $10 = HEAP8[$3>>0]|0;
   $11 = ($10<<24>>24)>(-1);
   if ($11) {
    $12 = $10&255;
    HEAP32[$nSize>>2] = $12;
    $15 = 1;
   } else {
    $13 = (_sqlite3GetVarint32($3,$nSize)|0);
    $15 = $13;
   }
   $14 = $15&255;
   $$sum1 = (($14) + ($2))|0;
   $16 = (($pCell) + ($$sum1)|0);
   $pIter$0 = $16;
  }
  $17 = (($pIter$0) + 9|0);
  $pIter$1 = $pIter$0;
  while(1) {
   $18 = (($pIter$1) + 1|0);
   $19 = HEAP8[$pIter$1>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($18>>>0)<($17>>>0);
   $or$cond = $20 & $21;
   if ($or$cond) {
    $pIter$1 = $18;
   } else {
    $pIter$2 = $18;
    break;
   }
  }
 }
 $29 = HEAP32[$nSize>>2]|0;
 $30 = (($pPage) + 8|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($29>>>0)>($32>>>0);
 if (!($33)) {
  $51 = $29;
  $47 = $pIter$2;
  $48 = $pCell;
  $49 = (($47) - ($48))|0;
  $50 = (($51) + ($49))|0;
  $52 = ($50>>>0)<(4);
  $53 = $50&65535;
  $54 = $52 ? 4 : $53;
  STACKTOP = sp;return ($54|0);
 }
 $34 = (($pPage) + 10|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = (($29) - ($36))|0;
 $38 = (($pPage) + 52|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -4)|0;
 $43 = (($37>>>0) % ($42>>>0))&-1;
 $44 = (($43) + ($36))|0;
 $45 = ($44>>>0)>($32>>>0);
 $$2 = $45 ? $36 : $44;
 $46 = (($$2) + 4)|0;
 HEAP32[$nSize>>2] = $46;
 $51 = $46;
 $47 = $pIter$2;
 $48 = $pCell;
 $49 = (($47) - ($48))|0;
 $50 = (($51) + ($49))|0;
 $52 = ($50>>>0)<(4);
 $53 = $50&65535;
 $54 = $52 ? 4 : $53;
 STACKTOP = sp;return ($54|0);
}
function _invalidateIncrblobCursors($pBtree$0$1$val,$0,$1,$isClearTable) {
 $pBtree$0$1$val = $pBtree$0$1$val|0;
 $0 = $0|0;
 $1 = $1|0;
 $isClearTable = $isClearTable|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$0$us = 0, $p$01 = 0, $p$02 = 0, $p$02$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($pBtree$0$1$val) + 8|0);
 $p$01 = HEAP32[$2>>2]|0;
 $3 = ($p$01|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ($isClearTable|0)==(0);
 if ($4) {
  $p$02$us = $p$01;
 } else {
  $p$02 = $p$01;
  while(1) {
   $21 = (($p$02) + 84|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    $24 = (($p$02) + 83|0);
    HEAP8[$24>>0] = 0;
   }
   $25 = (($p$02) + 8|0);
   $p$0 = HEAP32[$25>>2]|0;
   $26 = ($p$0|0)==(0|0);
   if ($26) {
    break;
   } else {
    $p$02 = $p$0;
   }
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = (($p$02$us) + 84|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $8 = (($p$02$us) + 32|0);
   $9 = $8;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)==($0|0);
   $16 = ($14|0)==($1|0);
   $17 = $15 & $16;
   if ($17) {
    $18 = (($p$02$us) + 83|0);
    HEAP8[$18>>0] = 0;
   }
  }
  $19 = (($p$02$us) + 8|0);
  $p$0$us = HEAP32[$19>>2]|0;
  $20 = ($p$0$us|0)==(0|0);
  if ($20) {
   break;
  } else {
   $p$02$us = $p$0$us;
  }
 }
 STACKTOP = sp;return;
}
function _clearDatabasePage($pBt,$pgno,$freePageFlag,$pnChange) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 $freePageFlag = $freePageFlag|0;
 $pnChange = $pnChange|0;
 var $$0 = 0, $$lcssa3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre9 = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $pBt$idx = 0, $pBt$idx$val = 0, $pPage = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPage = sp + 4|0;
 $rc = sp;
 $pBt$idx = (($pBt) + 44|0);
 $pBt$idx$val = HEAP32[$pBt$idx>>2]|0;
 $0 = (_btreePagecount($pBt$idx$val)|0);
 $1 = ($0>>>0)<($pgno>>>0);
 if ($1) {
  _sqlite3CorruptError(58179);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_getAndInitPage($pBt,$pgno,$pPage,0)|0);
 HEAP32[$rc>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$pPage>>2]|0;
 $5 = (($4) + 5|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($4) + 16|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 L8: do {
  if ($10) {
   $11 = $9&65535;
   $$pre9 = (($4) + 3|0);
   $$lcssa3 = $11;$$pre$phiZ2D = $$pre9;
   label = 10;
  } else {
   $i$05 = 0;
   while(1) {
    $16 = (($4) + 56|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($4) + 18|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19&65535;
    $21 = $i$05 << 1;
    $22 = (($4) + 64|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + ($21)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = $26 << 8;
    $$sum1 = $21 | 1;
    $28 = (($23) + ($$sum1)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $27 | $30;
    $32 = $31 & $20;
    $33 = (($17) + ($32)|0);
    $34 = (($4) + 3|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $37 = (_sqlite3Get4byte($33)|0);
     $38 = (_clearDatabasePage($pBt,$37,1,$pnChange)|0);
     HEAP32[$rc>>2] = $38;
     $39 = ($38|0)==(0);
     if (!($39)) {
      $65 = $38;
      break L8;
     }
    }
    $40 = (_clearCell($4,$33)|0);
    HEAP32[$rc>>2] = $40;
    $41 = ($40|0)==(0);
    $15 = (($i$05) + 1)|0;
    if (!($41)) {
     $65 = $40;
     break L8;
    }
    $12 = HEAP16[$8>>1]|0;
    $13 = $12&65535;
    $14 = ($15|0)<($13|0);
    if ($14) {
     $i$05 = $15;
    } else {
     $$lcssa3 = $13;$$pre$phiZ2D = $34;
     label = 10;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   $42 = HEAP8[$$pre$phiZ2D>>0]|0;
   $43 = ($42<<24>>24)==(0);
   if ($43) {
    $44 = (($7) + 8)|0;
    $45 = (($4) + 56|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($44)|0);
    $48 = (_sqlite3Get4byte($47)|0);
    $49 = (_clearDatabasePage($pBt,$48,1,$pnChange)|0);
    HEAP32[$rc>>2] = $49;
    $50 = ($49|0)==(0);
    if (!($50)) {
     $65 = $49;
     break;
    }
   } else {
    $51 = ($pnChange|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$pnChange>>2]|0;
     $53 = (($52) + ($$lcssa3))|0;
     HEAP32[$pnChange>>2] = $53;
    }
   }
   $54 = ($freePageFlag|0)==(0);
   if (!($54)) {
    _freePage($4,$rc);
    $$pre = HEAP32[$rc>>2]|0;
    $65 = $$pre;
    break;
   }
   $55 = (($4) + 68|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_sqlite3PagerWrite($56)|0);
   HEAP32[$rc>>2] = $57;
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = (($4) + 56|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($7)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 | 8;
    _zeroPage($4,$64);
    $65 = 0;
   } else {
    $65 = $57;
   }
  }
 } while(0);
 _releasePage($4);
 $$0 = $65;
 STACKTOP = sp;return ($$0|0);
}
function _clearCell($pPage,$pCell) {
 $pPage = $pPage|0;
 $pCell = $pCell|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$in = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $iNext = 0, $info = 0, $ovflPgno$02 = 0, $pOvfl = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $info = sp;
 $iNext = sp + 36|0;
 $pOvfl = sp + 32|0;
 $0 = (($pPage) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 _btreeParseCellPtr($pPage,$pCell,$info);
 $2 = (($info) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $3&65535;
 $$sum = (($5) + 3)|0;
 $6 = (($pCell) + ($$sum)|0);
 $7 = (($pPage) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pPage) + 18|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($8) + ($11)|0);
 $13 = ($6>>>0)>($12>>>0);
 if ($13) {
  _sqlite3CorruptError(56237);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($1) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -4)|0;
 $17 = (($info) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($info) + 22|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($18) + -1)|0;
 $23 = (($22) + ($16))|0;
 $24 = (($23) - ($21))|0;
 $25 = (($24>>>0) / ($16>>>0))&-1;
 $26 = ($25|0)==(0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($pCell) + ($5)|0);
 $28 = (_sqlite3Get4byte($27)|0);
 $$idx = (($1) + 44|0);
 $$in = $25;$ovflPgno$02 = $28;
 while(1) {
  $29 = (($$in) + -1)|0;
  HEAP32[$iNext>>2] = 0;
  HEAP32[$pOvfl>>2] = 0;
  $30 = ($ovflPgno$02>>>0)<(2);
  if ($30) {
   label = 8;
   break;
  }
  $$idx$val = HEAP32[$$idx>>2]|0;
  $31 = (_btreePagecount($$idx$val)|0);
  $32 = ($ovflPgno$02>>>0)>($31>>>0);
  if ($32) {
   label = 8;
   break;
  }
  $33 = ($29|0)==(0);
  if ($33) {
   label = 12;
  } else {
   $34 = (_getOverflowPage($1,$ovflPgno$02,$pOvfl,$iNext)|0);
   $35 = ($34|0)==(0);
   if (!($35)) {
    $$0 = $34;
    label = 20;
    break;
   }
   $$pre = HEAP32[$pOvfl>>2]|0;
   $36 = ($$pre|0)==(0|0);
   if ($36) {
    label = 12;
   } else {
    $40 = $$pre;
    label = 13;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $37 = (_btreePageLookup($1,$ovflPgno$02)|0);
   HEAP32[$pOvfl>>2] = $37;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $44 = 0;
    label = 15;
   } else {
    $40 = $37;
    label = 13;
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $39 = (($40) + 68|0);
   $41 = HEAP32[$39>>2]|0;
   $$idx1 = (($41) + 26|0);
   $$idx1$val = HEAP16[$$idx1>>1]|0;
   $42 = (_sqlite3PagerPageRefcount($$idx1$val)|0);
   $43 = ($42|0)==(1);
   if ($43) {
    $44 = $40;
    label = 15;
   } else {
    _sqlite3CorruptError(56271);
    $rc$0 = 11;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $45 = (_freePage2($1,$44,$ovflPgno$02)|0);
   $rc$0 = $45;
  }
  $46 = HEAP32[$pOvfl>>2]|0;
  $47 = ($46|0)==(0|0);
  if (!($47)) {
   $48 = (($46) + 68|0);
   $49 = HEAP32[$48>>2]|0;
   _sqlite3PagerUnref($49);
  }
  $50 = ($rc$0|0)==(0);
  if (!($50)) {
   $$0 = $rc$0;
   label = 20;
   break;
  }
  $51 = HEAP32[$iNext>>2]|0;
  if ($33) {
   $$0 = 0;
   label = 20;
   break;
  } else {
   $$in = $29;$ovflPgno$02 = $51;
  }
 }
 if ((label|0) == 8) {
  _sqlite3CorruptError(56251);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _freePage($pPage,$pRC) {
 $pPage = $pPage|0;
 $pRC = $pRC|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pRC>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($pPage) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pPage) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_freePage2($3,$pPage,$5)|0);
 HEAP32[$pRC>>2] = $6;
 STACKTOP = sp;return;
}
function _zeroPage($pPage,$flags) {
 $pPage = $pPage|0;
 $flags = $flags|0;
 var $$pre = 0, $$pre1 = 0, $$pre3 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pPage) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (($3) + 22|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 4;
 $9 = ($8<<16>>16)==(0);
 $$pre = $5&255;
 $$pre1 = (($1) + ($$pre)|0);
 $$pre3 = (($3) + 36|0);
 if (!($9)) {
  $10 = HEAP32[$$pre3>>2]|0;
  $11 = (($10) - ($$pre))|0;
  _memset(($$pre1|0),0,($11|0))|0;
 }
 $12 = $flags&255;
 HEAP8[$$pre1>>0] = $12;
 $13 = $flags >>> 1;
 $14 = $13 & 4;
 $15 = $14 ^ 12;
 $16 = (($$pre) + ($15))|0;
 $17 = $16&65535;
 $18 = (($$pre) + 1)|0;
 $19 = (($1) + ($18)|0);
 HEAP8[$19>>0]=0&255;HEAP8[$19+1>>0]=(0>>8)&255;HEAP8[$19+2>>0]=(0>>16)&255;HEAP8[$19+3>>0]=0>>24;
 $20 = (($$pre) + 7)|0;
 $21 = (($1) + ($20)|0);
 HEAP8[$21>>0] = 0;
 $22 = HEAP32[$$pre3>>2]|0;
 $23 = $22 >>> 8;
 $24 = $23&255;
 $25 = (($$pre) + 5)|0;
 $26 = (($1) + ($25)|0);
 HEAP8[$26>>0] = $24;
 $27 = HEAP32[$$pre3>>2]|0;
 $28 = $27&255;
 $$sum = (($$pre) + 6)|0;
 $29 = (($1) + ($$sum)|0);
 HEAP8[$29>>0] = $28;
 $30 = HEAP32[$$pre3>>2]|0;
 $31 = $16 & 65535;
 $32 = (($30) - ($16))|0;
 $33 = $32&65535;
 $34 = (($pPage) + 14|0);
 HEAP16[$34>>1] = $33;
 (_decodeFlags($pPage,$flags)|0);
 $35 = (($pPage) + 12|0);
 HEAP16[$35>>1] = $17;
 $36 = HEAP32[$$pre3>>2]|0;
 $37 = (($1) + ($36)|0);
 $38 = (($pPage) + 60|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + ($31)|0);
 $40 = (($pPage) + 64|0);
 HEAP32[$40>>2] = $39;
 $41 = (($pPage) + 1|0);
 HEAP8[$41>>0] = 0;
 $42 = (($3) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 65535)|0;
 $45 = $44&65535;
 $46 = (($pPage) + 18|0);
 HEAP16[$46>>1] = $45;
 $47 = (($pPage) + 16|0);
 HEAP16[$47>>1] = 0;
 HEAP8[$pPage>>0] = 1;
 STACKTOP = sp;return;
}
function _freePage2($pBt,$pMemPage,$iPage) {
 $pBt = $pBt|0;
 $pMemPage = $pMemPage|0;
 $iPage = $iPage|0;
 var $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $iTrunk$0 = 0, $pPage = 0, $pTrunk = 0, $rc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pTrunk = sp + 8|0;
 $pPage = sp + 4|0;
 $rc = sp;
 HEAP32[$pTrunk>>2] = 0;
 $0 = (($pBt) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($pMemPage|0)==(0|0);
 if ($2) {
  $5 = (_btreePageLookup($pBt,$iPage)|0);
  HEAP32[$pPage>>2] = $5;
  $20 = $5;
 } else {
  HEAP32[$pPage>>2] = $pMemPage;
  $3 = (($pMemPage) + 68|0);
  $4 = HEAP32[$3>>2]|0;
  _sqlite3PagerRef($4);
  $20 = $pMemPage;
 }
 $6 = (($1) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3PagerWrite($7)|0);
 HEAP32[$rc>>2] = $8;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = (($1) + 56|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 36|0);
   $13 = (_sqlite3Get4byte($12)|0);
   $14 = (($13) + 1)|0;
   _sqlite3Put4byte($12,$14);
   $15 = (($pBt) + 22|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 & 4;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    $69 = $20;
   } else {
    $19 = ($20|0)==(0|0);
    if ($19) {
     $21 = (_btreeGetPage($pBt,$iPage,$pPage,0)|0);
     HEAP32[$rc>>2] = $21;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $93 = $21;
      break;
     }
     $$pre5 = HEAP32[$pPage>>2]|0;
     $24 = $$pre5;
    } else {
     $24 = $20;
    }
    $23 = (($24) + 68|0);
    $25 = HEAP32[$23>>2]|0;
    $26 = (_sqlite3PagerWrite($25)|0);
    HEAP32[$rc>>2] = $26;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $93 = $26;
     break;
    }
    $28 = (($24) + 56|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($24) + 52|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 32|0);
    $33 = HEAP32[$32>>2]|0;
    _memset(($29|0),0,($33|0))|0;
    $69 = $24;
   }
   $34 = (($pBt) + 17|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)==(0);
   if (!($36)) {
    _ptrmapPut($pBt,$iPage,2,0,$rc);
    $37 = HEAP32[$rc>>2]|0;
    $38 = ($37|0)==(0);
    if (!($38)) {
     $93 = $37;
     break;
    }
   }
   $39 = ($13|0)==(0);
   if ($39) {
    $iTrunk$0 = 0;
   } else {
    $40 = HEAP32[$10>>2]|0;
    $41 = (($40) + 32|0);
    $42 = (_sqlite3Get4byte($41)|0);
    $43 = (_btreeGetPage($pBt,$42,$pTrunk,0)|0);
    HEAP32[$rc>>2] = $43;
    $44 = ($43|0)==(0);
    if (!($44)) {
     $93 = $43;
     break;
    }
    $45 = HEAP32[$pTrunk>>2]|0;
    $46 = (($45) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 4|0);
    $49 = (_sqlite3Get4byte($48)|0);
    $50 = (($pBt) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $51 >>> 2;
    $53 = (($52) + -2)|0;
    $54 = ($49>>>0)>($53>>>0);
    if ($54) {
     _sqlite3CorruptError(56156);
     HEAP32[$rc>>2] = 11;
     $93 = 11;
     break;
    }
    $55 = (($52) + -8)|0;
    $56 = ($49>>>0)<($55>>>0);
    if ($56) {
     $57 = (($45) + 68|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (_sqlite3PagerWrite($58)|0);
     HEAP32[$rc>>2] = $59;
     $60 = ($59|0)==(0);
     if (!($60)) {
      $93 = $59;
      break;
     }
     $61 = HEAP32[$46>>2]|0;
     $62 = (($61) + 4|0);
     $63 = (($49) + 1)|0;
     _sqlite3Put4byte($62,$63);
     $64 = $49 << 2;
     $65 = (($64) + 8)|0;
     $66 = HEAP32[$46>>2]|0;
     $67 = (($66) + ($65)|0);
     _sqlite3Put4byte($67,$iPage);
     $68 = ($69|0)==(0|0);
     if (!($68)) {
      $70 = HEAP16[$15>>1]|0;
      $71 = $70 & 4;
      $72 = ($71<<16>>16)==(0);
      if ($72) {
       $73 = (($69) + 68|0);
       $74 = HEAP32[$73>>2]|0;
       _sqlite3PagerDontWrite($74);
      }
     }
     $75 = (_btreeSetHasContent($pBt,$iPage)|0);
     HEAP32[$rc>>2] = $75;
     $93 = $75;
     break;
    } else {
     $iTrunk$0 = $42;
    }
   }
   $76 = ($69|0)==(0|0);
   if ($76) {
    $77 = (_btreeGetPage($pBt,$iPage,$pPage,0)|0);
    HEAP32[$rc>>2] = $77;
    $78 = ($77|0)==(0);
    if (!($78)) {
     $93 = $77;
     break;
    }
    $$pre = HEAP32[$pPage>>2]|0;
    $80 = $$pre;
   } else {
    $80 = $69;
   }
   $79 = (($80) + 68|0);
   $81 = HEAP32[$79>>2]|0;
   $82 = (_sqlite3PagerWrite($81)|0);
   HEAP32[$rc>>2] = $82;
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = (($80) + 56|0);
    $85 = HEAP32[$84>>2]|0;
    _sqlite3Put4byte($85,$iTrunk$0);
    $86 = HEAP32[$84>>2]|0;
    $87 = (($86) + 4|0);
    _sqlite3Put4byte($87,0);
    $88 = HEAP32[$10>>2]|0;
    $89 = (($88) + 32|0);
    _sqlite3Put4byte($89,$iPage);
    $93 = 0;
   } else {
    $93 = $82;
   }
  } else {
   $93 = $8;
  }
 } while(0);
 $90 = HEAP32[$pPage>>2]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  _releasePage($90);
  $92 = HEAP32[$pTrunk>>2]|0;
  _releasePage($92);
  STACKTOP = sp;return ($93|0);
 }
 HEAP8[$90>>0] = 0;
 _releasePage($90);
 $92 = HEAP32[$pTrunk>>2]|0;
 _releasePage($92);
 STACKTOP = sp;return ($93|0);
}
function _sqlite3PagerRef($pPg) {
 $pPg = $pPg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3PcacheRef($pPg);
 STACKTOP = sp;return;
}
function _btreePageLookup($pBt,$pgno) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pBt>>2]|0;
 $$idx = (($0) + 204|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = (_sqlite3PagerLookup($$idx$val,$pgno)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_btreePageFromDbPage($1,$pgno,$pBt)|0);
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerDontWrite($pPg) {
 $pPg = $pPg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 24|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($pPg) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2 | 32;
 $11 = $10&65535;
 HEAP16[$0>>1] = $11;
 STACKTOP = sp;return;
}
function _btreeSetHasContent($pBt,$pgno) {
 $pBt = $pBt|0;
 $pgno = $pgno|0;
 var $$idx$val = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (($pBt) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_sqlite3BitvecCreate($4)|0);
  HEAP32[$0>>2] = $5;
  $not$ = ($5|0)==(0|0);
  if ($not$) {
   $rc$1 = 7;
   STACKTOP = sp;return ($rc$1|0);
  } else {
   $6 = $5;
  }
 } else {
  $6 = $1;
 }
 $$idx$val = HEAP32[$6>>2]|0;
 $7 = (_sqlite3BitvecSize($$idx$val)|0);
 $8 = ($7>>>0)<($pgno>>>0);
 if ($8) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $9 = (_sqlite3BitvecSet($6,$pgno)|0);
 $rc$1 = $9;
 STACKTOP = sp;return ($rc$1|0);
}
function _sqlite3PcacheRef($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 26|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 STACKTOP = sp;return;
}
function _btreeDropTable($p,$iTable,$piMoved) {
 $p = $p|0;
 $iTable = $iTable|0;
 $piMoved = $piMoved|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $maxRootPgno = 0, $p$idx$val = 0, $p$idx1$val = 0, $p$idx2$val = 0, $p$idx3$val = 0, $pMove = 0, $pPage = 0, $rc = 0, $storemerge = 0, $storemerge$in4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rc = sp + 12|0;
 $pPage = sp + 8|0;
 $maxRootPgno = sp + 4|0;
 $pMove = sp;
 HEAP32[$pPage>>2] = 0;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_btreeGetPage($1,$iTable,$pPage,0)|0);
 HEAP32[$rc>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_sqlite3BtreeClearTable($p,$iTable,0)|0);
 HEAP32[$rc>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = HEAP32[$pPage>>2]|0;
  _releasePage($9);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$piMoved>>2] = 0;
 $10 = ($iTable>>>0)>(1);
 if (!($10)) {
  $38 = HEAP32[$pPage>>2]|0;
  _zeroPage($38,9);
  _releasePage($38);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($1) + 17|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $37 = HEAP32[$pPage>>2]|0;
  _freePage($37,$rc);
  _releasePage($37);
  $$pre = HEAP32[$rc>>2]|0;
  $$0 = $$pre;
  STACKTOP = sp;return ($$0|0);
 }
 $p$idx$val = HEAP32[$p>>2]|0;
 $p$idx1$val = HEAP32[$0>>2]|0;
 _sqlite3BtreeGetMeta($p$idx$val,$p$idx1$val,4,$maxRootPgno);
 $14 = HEAP32[$maxRootPgno>>2]|0;
 $15 = ($14|0)==($iTable|0);
 $16 = HEAP32[$pPage>>2]|0;
 do {
  if ($15) {
   _freePage($16,$rc);
   _releasePage($16);
   $17 = HEAP32[$rc>>2]|0;
   $18 = ($17|0)==(0);
   if (!($18)) {
    $$0 = $17;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   _releasePage($16);
   $19 = (_btreeGetPage($1,$14,$pMove,0)|0);
   HEAP32[$rc>>2] = $19;
   $20 = ($19|0)==(0);
   if (!($20)) {
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $21 = HEAP32[$pMove>>2]|0;
   $22 = (_relocatePage($1,$21,1,0,$iTable,0)|0);
   HEAP32[$rc>>2] = $22;
   _releasePage($21);
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = $22;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$pMove>>2] = 0;
   $24 = (_btreeGetPage($1,$14,$pMove,0)|0);
   HEAP32[$rc>>2] = $24;
   $25 = HEAP32[$pMove>>2]|0;
   _freePage($25,$rc);
   _releasePage($25);
   $26 = HEAP32[$rc>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    HEAP32[$piMoved>>2] = $14;
    break;
   } else {
    $$0 = $26;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $28 = HEAP32[1648>>2]|0;
 $29 = (($1) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28>>>0) / ($30>>>0))&-1;
 $32 = (($31) + 1)|0;
 $storemerge$in4 = $14;
 while(1) {
  $storemerge = (($storemerge$in4) + -1)|0;
  $33 = ($storemerge|0)==($32|0);
  if ($33) {
   $storemerge$in4 = $storemerge;
   continue;
  }
  $34 = (_ptrmapPageno($1,$storemerge)|0);
  $35 = ($34|0)==($storemerge|0);
  if ($35) {
   $storemerge$in4 = $storemerge;
  } else {
   break;
  }
 }
 HEAP32[$maxRootPgno>>2] = $storemerge;
 $p$idx2$val = HEAP32[$p>>2]|0;
 $p$idx3$val = HEAP32[$0>>2]|0;
 $36 = (_sqlite3BtreeUpdateMeta($p$idx2$val,$p$idx3$val,4,$storemerge)|0);
 HEAP32[$rc>>2] = $36;
 $$0 = $36;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterListToPMA($db,$pCsr) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $db$idx$val = 0, $p$02 = 0, $writer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $writer = sp;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 dest=$writer+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_vdbeSorterSort($pCsr)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($1) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $db$idx$val = HEAP32[$db>>2]|0;
   $10 = (_vdbeSorterOpenTempFile($db$idx$val,$7)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$pre = HEAP32[$7>>2]|0;
    $18 = $$pre;
    break;
   } else {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $18 = $8;
  }
 } while(0);
 $12 = $1;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 _fileWriterInit($db,$18,$writer,$14,$17);
 $19 = (($1) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = ($22|0)<(0);
 $24 = $23 << 31 >> 31;
 _fileWriterWriteVarint($writer,$22,$24);
 $25 = (($1) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $p$02 = $26;
  while(1) {
   $28 = (($p$02) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($p$02) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)<(0);
   $33 = $32 << 31 >> 31;
   _fileWriterWriteVarint($writer,$31,$33);
   $34 = HEAP32[$p$02>>2]|0;
   $35 = HEAP32[$30>>2]|0;
   _fileWriterWrite($writer,$34,$35);
   _sqlite3DbFree($db,$p$02);
   $36 = ($29|0)==(0|0);
   if ($36) {
    break;
   } else {
    $p$02 = $29;
   }
  }
 }
 HEAP32[$25>>2] = 0;
 $37 = (_fileWriterFinish($db,$writer,$1)|0);
 $$0 = $37;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterSort($pCsr) {
 $pCsr = $pCsr|0;
 var $$0 = 0, $$lcssa2 = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$04 = 0, $i$11 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3MallocZero(256)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($1) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$p>>2] = $5;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $8 = $5;
  while(1) {
   $7 = (($8) + 8|0);
   $9 = HEAP32[$7>>2]|0;
   HEAP32[$7>>2] = 0;
   $10 = HEAP32[$2>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$lcssa2 = $2;$$lcssa3 = $8;
   } else {
    $12 = $8;$13 = $10;$14 = $2;$i$04 = 0;
    while(1) {
     _vdbeSorterMerge($pCsr,$12,$13,$p);
     HEAP32[$14>>2] = 0;
     $15 = (($i$04) + 1)|0;
     $16 = (($2) + ($15<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0|0);
     $19 = HEAP32[$p>>2]|0;
     if ($18) {
      $$lcssa2 = $16;$$lcssa3 = $19;
      break;
     } else {
      $12 = $19;$13 = $17;$14 = $16;$i$04 = $15;
     }
    }
   }
   HEAP32[$$lcssa2>>2] = $$lcssa3;
   HEAP32[$p>>2] = $9;
   $20 = ($9|0)==(0|0);
   if ($20) {
    break;
   } else {
    $8 = $9;
   }
  }
 }
 HEAP32[$p>>2] = 0;
 $23 = 0;$i$11 = 0;
 while(1) {
  $21 = (($2) + ($i$11<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  _vdbeSorterMerge($pCsr,$23,$22,$p);
  $24 = (($i$11) + 1)|0;
  $25 = HEAP32[$p>>2]|0;
  $exitcond = ($24|0)==(64);
  if ($exitcond) {
   break;
  } else {
   $23 = $25;$i$11 = $24;
  }
 }
 HEAP32[$4>>2] = $25;
 _sqlite3_free($2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterOpenTempFile($db$0$0$val,$ppFile) {
 $db$0$0$val = $db$0$0$val|0;
 $ppFile = $ppFile|0;
 var $0 = 0, $dummy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 $0 = (_sqlite3OsOpenMalloc($db$0$0$val,0,$ppFile,4126,$dummy)|0);
 STACKTOP = sp;return ($0|0);
}
function _fileWriterInit($db,$pFile,$p,$0,$1) {
 $db = $db|0;
 $pFile = $pFile|0;
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = (($db) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$idx = (($5) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx$val$idx = (($$idx$val) + 32|0);
 $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
 $6 = (_sqlite3BtreeGetPageSize($$idx$val$idx$val)|0);
 dest=$p+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = (_sqlite3DbMallocRaw($db,$6)|0);
 $8 = (($p) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = ($7|0)==(0|0);
 if ($9) {
  HEAP32[$p>>2] = 7;
  STACKTOP = sp;return;
 } else {
  $10 = ($6|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (___remdi3(($0|0),($1|0),($6|0),($11|0))|0);
  $13 = tempRet0;
  $14 = (($p) + 12|0);
  HEAP32[$14>>2] = $12;
  $15 = (($p) + 16|0);
  HEAP32[$15>>2] = $12;
  $16 = ($12|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Subtract(($0|0),($1|0),($12|0),($17|0))|0);
  $19 = tempRet0;
  $20 = (($p) + 24|0);
  $21 = $20;
  $22 = $21;
  HEAP32[$22>>2] = $18;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($p) + 8|0);
  HEAP32[$25>>2] = $6;
  $26 = (($p) + 32|0);
  HEAP32[$26>>2] = $pFile;
  STACKTOP = sp;return;
 }
}
function _fileWriterWriteVarint($p,$0,$1) {
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $aByte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aByte = sp;
 $2 = (_sqlite3PutVarint($aByte,$0,$1)|0);
 _fileWriterWrite($p,$aByte,$2);
 STACKTOP = sp;return;
}
function _fileWriterWrite($p,$pData,$nData) {
 $p = $p|0;
 $pData = $pData|0;
 $nData = $nData|0;
 var $$nRem$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nRem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nData|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($p) + 8|0);
 $2 = (($p) + 16|0);
 $3 = (($p) + 4|0);
 $4 = (($p) + 32|0);
 $5 = (($p) + 12|0);
 $6 = (($p) + 24|0);
 $nRem$01 = $nData;
 while(1) {
  $7 = HEAP32[$p>>2]|0;
  $8 = ($7|0)==(0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($9) - ($10))|0;
  $12 = ($nRem$01|0)>($11|0);
  $$nRem$0 = $12 ? $11 : $nRem$01;
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($10)|0);
  $15 = (($nData) - ($nRem$01))|0;
  $16 = (($pData) + ($15)|0);
  _memcpy(($14|0),($16|0),($$nRem$0|0))|0;
  $17 = HEAP32[$2>>2]|0;
  $18 = (($17) + ($$nRem$0))|0;
  HEAP32[$2>>2] = $18;
  $19 = HEAP32[$1>>2]|0;
  $20 = ($18|0)==($19|0);
  if ($20) {
   $21 = HEAP32[$4>>2]|0;
   $22 = HEAP32[$5>>2]|0;
   $23 = HEAP32[$3>>2]|0;
   $24 = (($23) + ($22)|0);
   $25 = (($18) - ($22))|0;
   $26 = $6;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($22|0)<(0);
   $33 = $32 << 31 >> 31;
   $34 = (_i64Add(($28|0),($31|0),($22|0),($33|0))|0);
   $35 = tempRet0;
   $36 = (_sqlite3OsWrite($21,$24,$25,$34,$35)|0);
   HEAP32[$p>>2] = $36;
   HEAP32[$2>>2] = 0;
   HEAP32[$5>>2] = 0;
   $37 = HEAP32[$1>>2]|0;
   $38 = ($37|0)<(0);
   $39 = $38 << 31 >> 31;
   $40 = $6;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_i64Add(($42|0),($45|0),($37|0),($39|0))|0);
   $47 = tempRet0;
   $48 = $6;
   $49 = $48;
   HEAP32[$49>>2] = $46;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $47;
  }
  $52 = (($nRem$01) - ($$nRem$0))|0;
  $53 = ($52|0)>(0);
  if ($53) {
   $nRem$01 = $52;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _fileWriterFinish($db,$p,$piEof) {
 $db = $db|0;
 $p = $p|0;
 $piEof = $piEof|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ($0|0)==(0);
 $2 = (($p) + 4|0);
 if ($1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = (($p) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($p) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6|0)>($8|0);
   if ($9) {
    $10 = (($p) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($3) + ($8)|0);
    $13 = (($6) - ($8))|0;
    $14 = (($p) + 24|0);
    $15 = $14;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + 4)|0;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($8|0)<(0);
    $22 = $21 << 31 >> 31;
    $23 = (_i64Add(($17|0),($20|0),($8|0),($22|0))|0);
    $24 = tempRet0;
    $25 = (_sqlite3OsWrite($11,$12,$13,$23,$24)|0);
    HEAP32[$p>>2] = $25;
   }
  }
 }
 $26 = (($p) + 24|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($p) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)<(0);
 $36 = $35 << 31 >> 31;
 $37 = (_i64Add(($34|0),($36|0),($29|0),($32|0))|0);
 $38 = tempRet0;
 $39 = $piEof;
 $40 = $39;
 HEAP32[$40>>2] = $37;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = HEAP32[$2>>2]|0;
 _sqlite3DbFree($db,$43);
 $44 = HEAP32[$p>>2]|0;
 dest=$p+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return ($44|0);
}
function _sqlite3PutVarint($p,$0,$1) {
 $p = $p|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i$15 = 0, $j$06 = 0, $n$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $2 = ($1>>>0)>(16777215);
 $3 = ($1|0)==(16777215);
 $4 = ($0>>>0)>(4294967295);
 $5 = $3 & $4;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0&255;
  $8 = (($p) + 8|0);
  HEAP8[$8>>0] = $7;
  $9 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $10 = tempRet0;
  $11 = $9 | 128;
  $12 = $11&255;
  $13 = (($p) + 7|0);
  HEAP8[$13>>0] = $12;
  $14 = (_bitshift64Lshr(($0|0),($1|0),15)|0);
  $15 = tempRet0;
  $16 = $14 | 128;
  $17 = $16&255;
  $18 = (($p) + 6|0);
  HEAP8[$18>>0] = $17;
  $19 = (_bitshift64Lshr(($0|0),($1|0),22)|0);
  $20 = tempRet0;
  $21 = $19 | 128;
  $22 = $21&255;
  $23 = (($p) + 5|0);
  HEAP8[$23>>0] = $22;
  $24 = (_bitshift64Lshr(($0|0),($1|0),29)|0);
  $25 = tempRet0;
  $26 = $24 | 128;
  $27 = $26&255;
  $28 = (($p) + 4|0);
  HEAP8[$28>>0] = $27;
  $29 = (_bitshift64Lshr(($0|0),($1|0),36)|0);
  $30 = tempRet0;
  $31 = $29 | 128;
  $32 = $31&255;
  $33 = (($p) + 3|0);
  HEAP8[$33>>0] = $32;
  $34 = (_bitshift64Lshr(($0|0),($1|0),43)|0);
  $35 = tempRet0;
  $36 = $34 | 128;
  $37 = $36&255;
  $38 = (($p) + 2|0);
  HEAP8[$38>>0] = $37;
  $39 = (_bitshift64Lshr(($0|0),($1|0),50)|0);
  $40 = tempRet0;
  $41 = $39 | 128;
  $42 = $41&255;
  $43 = (($p) + 1|0);
  HEAP8[$43>>0] = $42;
  $44 = (_bitshift64Lshr(($0|0),($1|0),57)|0);
  $45 = tempRet0;
  $46 = $44 | 128;
  $47 = $46&255;
  HEAP8[$p>>0] = $47;
  $$01 = 9;
  STACKTOP = sp;return ($$01|0);
 } else {
  $49 = $0;$53 = $1;$n$0 = 0;
 }
 while(1) {
  $48 = $49 | 128;
  $50 = $48&255;
  $51 = (($n$0) + 1)|0;
  $52 = (($buf) + ($n$0)|0);
  HEAP8[$52>>0] = $50;
  $54 = (_bitshift64Lshr(($49|0),($53|0),7)|0);
  $55 = tempRet0;
  $56 = ($54|0)==(0);
  $57 = ($55|0)==(0);
  $58 = $56 & $57;
  if ($58) {
   break;
  } else {
   $49 = $54;$53 = $55;$n$0 = $51;
  }
 }
 $59 = HEAP8[$buf>>0]|0;
 $60 = $59&255;
 $61 = $60 & 127;
 $62 = $61&255;
 HEAP8[$buf>>0] = $62;
 $63 = ($n$0|0)>(-1);
 if ($63) {
  $i$15 = 0;$j$06 = $n$0;
 } else {
  $$01 = $51;
  STACKTOP = sp;return ($$01|0);
 }
 while(1) {
  $64 = (($buf) + ($j$06)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = (($p) + ($i$15)|0);
  HEAP8[$66>>0] = $65;
  $67 = (($j$06) + -1)|0;
  $68 = (($i$15) + 1)|0;
  $69 = ($j$06|0)>(0);
  if ($69) {
   $i$15 = $68;$j$06 = $67;
  } else {
   $$01 = $51;
   break;
  }
 }
 STACKTOP = sp;return ($$01|0);
}
function _sqlite3OsOpenMalloc($pVfs,$zFile,$ppFile,$flags,$pOutFlags) {
 $pVfs = $pVfs|0;
 $zFile = $zFile|0;
 $ppFile = $ppFile|0;
 $flags = $flags|0;
 $pOutFlags = $pOutFlags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pVfs) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_sqlite3MallocZero($1)|0);
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $rc$0 = 7;
  } else {
   $4 = (_sqlite3OsOpen($pVfs,$zFile,$2,$flags,$pOutFlags)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$ppFile>>2] = $2;
    $rc$0 = 0;
    break;
   } else {
    _sqlite3_free($2);
    $rc$0 = $4;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($rc$0|0);
}
function _vdbeSorterMerge($pCsr,$p1,$p2,$ppOut) {
 $pCsr = $pCsr|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $ppOut = $ppOut|0;
 var $$0$ph31 = 0, $$01$ph330 = 0, $$011 = 0, $$06 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p2$pn = 0, $pCsr$idx = 0, $pCsr$idx$val = 0, $pCsr$idx2 = 0, $pCsr$idx2$val = 0, $pCsr$idx2$val$idx = 0, $pCsr$idx2$val$idx$val = 0, $pFinal = 0, $pVal2$0$ph433 = 0, $pVal2$013 = 0, $pp$0$ph32 = 0, $pp$012 = 0, $pp$1 = 0;
 var $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pFinal = sp + 4|0;
 $res = sp;
 HEAP32[$pFinal>>2] = 0;
 $0 = ($p2|0)==(0|0);
 L1: do {
  if ($0) {
   $1 = ($p1|0)!=(0|0);
   $$06 = $p1;$$1 = 0;$18 = $1;$pp$1 = $pFinal;
  } else {
   $2 = ($p1|0)!=(0|0);
   if ($2) {
    $pCsr$idx = (($pCsr) + 8|0);
    $pCsr$idx2 = (($pCsr) + 64|0);
    $$0$ph31 = $p1;$$01$ph330 = $p2;$20 = $2;$p2$pn = $p2;$pp$0$ph32 = $pFinal;
    while(1) {
     $pVal2$0$ph433 = HEAP32[$p2$pn>>2]|0;
     $3 = (($$01$ph330) + 4|0);
     $$011 = $$0$ph31;$21 = $20;$pVal2$013 = $pVal2$0$ph433;$pp$012 = $pp$0$ph32;
     while(1) {
      $4 = HEAP32[$$011>>2]|0;
      $5 = (($$011) + 4|0);
      $6 = HEAP32[$5>>2]|0;
      $7 = HEAP32[$3>>2]|0;
      $pCsr$idx$val = HEAP32[$pCsr$idx>>2]|0;
      $pCsr$idx2$val = HEAP32[$pCsr$idx2>>2]|0;
      $pCsr$idx2$val$idx = (($pCsr$idx2$val) + 52|0);
      $pCsr$idx2$val$idx$val = HEAP32[$pCsr$idx2$val$idx>>2]|0;
      _vdbeSorterCompare($pCsr$idx$val,$pCsr$idx2$val$idx$val,0,$4,$6,$pVal2$013,$7,$res);
      $8 = HEAP32[$res>>2]|0;
      $9 = ($8|0)<(1);
      if (!($9)) {
       break;
      }
      HEAP32[$pp$012>>2] = $$011;
      $10 = (($$011) + 8|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0|0);
      if ($12) {
       $$06 = 0;$$1 = $$01$ph330;$18 = 0;$pp$1 = $10;
       break L1;
      } else {
       $$011 = $11;$21 = 1;$pVal2$013 = 0;$pp$012 = $10;
      }
     }
     HEAP32[$pp$012>>2] = $$01$ph330;
     $13 = (($$01$ph330) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      $$06 = $$011;$$1 = 0;$18 = $21;$pp$1 = $13;
      break L1;
     }
     $16 = ($$011|0)==(0|0);
     if ($16) {
      $$06 = 0;$$1 = $14;$18 = 0;$pp$1 = $13;
      break;
     } else {
      $$0$ph31 = $$011;$$01$ph330 = $14;$20 = 1;$p2$pn = $14;$pp$0$ph32 = $13;
     }
    }
   } else {
    $$06 = $p1;$$1 = $p2;$18 = $2;$pp$1 = $pFinal;
   }
  }
 } while(0);
 $17 = $18 ? $$06 : $$1;
 HEAP32[$pp$1>>2] = $17;
 $19 = HEAP32[$pFinal>>2]|0;
 HEAP32[$ppOut>>2] = $19;
 STACKTOP = sp;return;
}
function _vdbeSorterCompare($pCsr$0$2$val,$pCsr$0$16$val$0$11$val,$nIgnore,$pKey1,$nKey1,$pKey2,$nKey2,$pRes) {
 $pCsr$0$2$val = $pCsr$0$2$val|0;
 $pCsr$0$16$val$0$11$val = $pCsr$0$16$val$0$11$val|0;
 $nIgnore = $nIgnore|0;
 $pKey1 = $pKey1|0;
 $nKey1 = $nKey1|0;
 $pKey2 = $pKey2|0;
 $nKey2 = $nKey2|0;
 $pRes = $pRes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pKey2|0)==(0|0);
 if (!($0)) {
  _sqlite3VdbeRecordUnpack($pCsr$0$2$val,$nKey2,$pKey2,$pCsr$0$16$val$0$11$val);
 }
 $1 = ($nIgnore|0)==(0);
 L4: do {
  if (!($1)) {
   $2 = (($pCsr$0$2$val) + 6|0);
   $3 = HEAP16[$2>>1]|0;
   $4 = $3&65535;
   $5 = (($4) - ($nIgnore))|0;
   $6 = $5&65535;
   $7 = (($pCsr$0$16$val$0$11$val) + 4|0);
   HEAP16[$7>>1] = $6;
   $8 = $5 & 65535;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = (($pCsr$0$16$val$0$11$val) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $i$02 = 0;
    while(1) {
     $15 = ((($11) + (($i$02*40)|0)|0) + 28|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = $16 & 1;
     $18 = ($17<<16>>16)==(0);
     $14 = (($i$02) + 1)|0;
     if (!($18)) {
      $storemerge = -1;
      break;
     }
     $12 = $5 & 65535;
     $13 = ($14|0)<($12|0);
     if ($13) {
      $i$02 = $14;
     } else {
      break L4;
     }
    }
    HEAP32[$pRes>>2] = $storemerge;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $19 = (_sqlite3VdbeRecordCompare($nKey1,$pKey1,$pCsr$0$16$val$0$11$val,0)|0);
 $storemerge = $19;
 HEAP32[$pRes>>2] = $storemerge;
 STACKTOP = sp;return;
}
function _vdbeSorterIterNext($db,$pIter) {
 $db = $db|0;
 $pIter = $pIter|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nRec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nRec = sp;
 $0 = $nRec;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = $pIter;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($pIter) + 8|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($9|0)<($16|0);
 $18 = ($9|0)==($16|0);
 $19 = ($6>>>0)<($13>>>0);
 $20 = $18 & $19;
 $21 = $17 | $20;
 if (!($21)) {
  _vdbeSorterIterZero($db,$pIter);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (_vdbeSorterIterVarint($db,$pIter,$nRec)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = $nRec;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($pIter) + 20|0);
 HEAP32[$30>>2] = $26;
 $31 = (($pIter) + 32|0);
 $32 = (_vdbeSorterIterRead($db,$pIter,$26,$31)|0);
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterDoCompare($pCsr,$iOut) {
 $pCsr = $pCsr|0;
 $iOut = $iOut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i1$0 = 0, $i1$0$i2$0 = 0;
 var $i2$0 = 0, $iRes$0 = 0, $pCsr$idx = 0, $pCsr$idx$val = 0, $pCsr$idx1$val$idx = 0, $pCsr$idx1$val$idx$val = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $res = sp;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = ($4|0)>($iOut|0);
 if ($5) {
  $9 = $iOut << 1;
  $10 = (($1) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $9 | 1;
  $15 = (($11) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $i1$0 = $13;$i2$0 = $16;
 } else {
  $6 = (($iOut) - ($4))|0;
  $7 = $6 << 1;
  $8 = $7 | 1;
  $i1$0 = $7;$i2$0 = $8;
 }
 $17 = (($1) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18) + (($i1$0*48)|0)|0) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $iRes$0 = $i2$0;
  $35 = (($1) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($iOut<<2)|0);
  HEAP32[$37>>2] = $iRes$0;
  STACKTOP = sp;return;
 }
 $22 = ((($18) + (($i2$0*48)|0)|0) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $iRes$0 = $i1$0;
  $35 = (($1) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($iOut<<2)|0);
  HEAP32[$37>>2] = $iRes$0;
  STACKTOP = sp;return;
 }
 $25 = ((($18) + (($i1$0*48)|0)|0) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($18) + (($i1$0*48)|0)|0) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($18) + (($i2$0*48)|0)|0) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($18) + (($i2$0*48)|0)|0) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $pCsr$idx = (($pCsr) + 8|0);
 $pCsr$idx$val = HEAP32[$pCsr$idx>>2]|0;
 $pCsr$idx1$val$idx = (($1) + 52|0);
 $pCsr$idx1$val$idx$val = HEAP32[$pCsr$idx1$val$idx>>2]|0;
 _vdbeSorterCompare($pCsr$idx$val,$pCsr$idx1$val$idx$val,0,$26,$28,$30,$32,$res);
 $33 = HEAP32[$res>>2]|0;
 $34 = ($33|0)<(1);
 $i1$0$i2$0 = $34 ? $i1$0 : $i2$0;
 $iRes$0 = $i1$0$i2$0;
 $35 = (($1) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($iOut<<2)|0);
 HEAP32[$37>>2] = $iRes$0;
 STACKTOP = sp;return;
}
function _vdbeSorterRecordFree($db,$pRecord) {
 $db = $db|0;
 $pRecord = $pRecord|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pRecord|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $p$01 = $pRecord;
 }
 while(1) {
  $1 = (($p$01) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  _sqlite3DbFree($db,$p$01);
  $3 = ($2|0)==(0|0);
  if ($3) {
   break;
  } else {
   $p$01 = $2;
  }
 }
 STACKTOP = sp;return;
}
function _vdbeSorterIterZero($db,$pIter) {
 $db = $db|0;
 $pIter = $pIter|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pIter) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3DbFree($db,$1);
 $2 = (($pIter) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 _sqlite3DbFree($db,$3);
 dest=$pIter+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _vdbeSorterIterVarint($db,$p,$pnOut) {
 $db = $db|0;
 $p = $p|0;
 $pnOut = $pnOut|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, $aVarint = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $aVarint = sp + 8|0;
 $a = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = (___remdi3(($2|0),($5|0),($7|0),($9|0))|0);
 $11 = tempRet0;
 $12 = ($10|0)==(0);
 if ($12) {
  $i$0 = 0;
 } else {
  $13 = (($7) - ($10))|0;
  $14 = ($13|0)>(8);
  if ($14) {
   $15 = (($p) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($10)|0);
   $18 = (_sqlite3GetVarint($17,$pnOut)|0);
   $19 = $18&255;
   $20 = $p;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (_i64Add(($22|0),($25|0),($19|0),0)|0);
   $27 = tempRet0;
   $28 = $p;
   $29 = $28;
   HEAP32[$29>>2] = $26;
   $30 = (($28) + 4)|0;
   $31 = $30;
   HEAP32[$31>>2] = $27;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$0 = 0;
  }
 }
 while(1) {
  $32 = (_vdbeSorterIterRead($db,$p,1,$a)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   $$0 = $32;
   label = 7;
   break;
  }
  $34 = HEAP32[$a>>2]|0;
  $35 = HEAP8[$34>>0]|0;
  $36 = (($i$0) + 1)|0;
  $37 = $i$0 & 15;
  $38 = (($aVarint) + ($37)|0);
  HEAP8[$38>>0] = $35;
  $39 = ($35<<24>>24)<(0);
  if ($39) {
   $i$0 = $36;
  } else {
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 (_sqlite3GetVarint($aVarint,$pnOut)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterIterRead($db,$p,$nByte,$ppOut) {
 $db = $db|0;
 $p = $p|0;
 $nByte = $nByte|0;
 $ppOut = $ppOut|0;
 var $$0 = 0, $$nRem$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $aNext = 0, $nNew$0 = 0;
 var $nNew$0$in = 0, $nRead$0 = 0, $nRem$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aNext = sp;
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = (___remdi3(($2|0),($5|0),($7|0),($9|0))|0);
 $11 = tempRet0;
 $12 = ($10|0)==(0);
 do {
  if ($12) {
   $13 = (($p) + 8|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (_i64Subtract(($16|0),($19|0),($2|0),($5|0))|0);
   $21 = tempRet0;
   $22 = ($21|0)>($9|0);
   $23 = ($21|0)==($9|0);
   $24 = ($20>>>0)>($7>>>0);
   $25 = $23 & $24;
   $26 = $22 | $25;
   $nRead$0 = $26 ? $7 : $20;
   $27 = (($p) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($p) + 36|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_sqlite3OsRead($28,$30,$nRead$0,$2,$5)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $$pre = HEAP32[$6>>2]|0;
    $34 = $$pre;
    break;
   } else {
    $$0 = $31;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $34 = $7;
  }
 } while(0);
 $33 = (($34) - ($10))|0;
 $35 = ($33|0)<($nByte|0);
 if (!($35)) {
  $36 = (($p) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($10)|0);
  HEAP32[$ppOut>>2] = $38;
  $39 = ($nByte|0)<(0);
  $40 = $39 << 31 >> 31;
  $41 = $p;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_i64Add(($43|0),($46|0),($nByte|0),($40|0))|0);
  $48 = tempRet0;
  $49 = $p;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($p) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)<($nByte|0);
 do {
  if ($55) {
   $nNew$0$in = $54;
   while(1) {
    $nNew$0 = $nNew$0$in << 1;
    $56 = ($nNew$0|0)<($nByte|0);
    if ($56) {
     $nNew$0$in = $nNew$0;
    } else {
     break;
    }
   }
   $57 = (($p) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_sqlite3DbReallocOrFree($db,$58,$nNew$0)|0);
   HEAP32[$57>>2] = $59;
   $60 = ($59|0)==(0|0);
   if ($60) {
    $$0 = 7;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$53>>2] = $nNew$0;
    $65 = $59;
    break;
   }
  } else {
   $$phi$trans$insert = (($p) + 28|0);
   $$pre5 = HEAP32[$$phi$trans$insert>>2]|0;
   $65 = $$pre5;
  }
 } while(0);
 $61 = (($p) + 28|0);
 $62 = (($p) + 36|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($10)|0);
 _memcpy(($65|0),($64|0),($33|0))|0;
 $66 = ($33|0)<(0);
 $67 = $66 << 31 >> 31;
 $68 = $p;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (_i64Add(($70|0),($73|0),($33|0),($67|0))|0);
 $75 = tempRet0;
 $76 = $p;
 $77 = $76;
 HEAP32[$77>>2] = $74;
 $78 = (($76) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $75;
 $80 = (($nByte) - ($33))|0;
 $81 = ($80|0)>(0);
 L20: do {
  if ($81) {
   $nRem$01 = $80;
   while(1) {
    $82 = HEAP32[$6>>2]|0;
    $83 = ($nRem$01|0)>($82|0);
    $$nRem$0 = $83 ? $82 : $nRem$01;
    $84 = (_vdbeSorterIterRead($db,$p,$$nRem$0,$aNext)|0);
    $85 = ($84|0)==(0);
    if (!($85)) {
     $$0 = $84;
     break;
    }
    $86 = (($nByte) - ($nRem$01))|0;
    $87 = HEAP32[$61>>2]|0;
    $88 = (($87) + ($86)|0);
    $89 = HEAP32[$aNext>>2]|0;
    _memcpy(($88|0),($89|0),($$nRem$0|0))|0;
    $90 = (($nRem$01) - ($$nRem$0))|0;
    $91 = ($90|0)>(0);
    if ($91) {
     $nRem$01 = $90;
    } else {
     break L20;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $92 = HEAP32[$61>>2]|0;
 HEAP32[$ppOut>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _vdbeSorterInitMerge($db,$pCsr,$pnByte) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 $pnByte = $pnByte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$1 = 0;
 var $i$11 = 0, $i$13 = 0, $nByte = 0, $or$cond = 0, $rc$2$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nByte = sp;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $nByte;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($1) + 36|0);
 $7 = (($1) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $16 = $10;$17 = $13;$i$04 = 0;
 while(1) {
  $14 = HEAP32[$6>>2]|0;
  $15 = (($14) + (($i$04*48)|0)|0);
  $18 = (_vdbeSorterIterInit($db,$1,$16,$17,$15,$nByte)|0);
  $19 = ((($14) + (($i$04*48)|0)|0) + 8|0);
  $20 = $19;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $7;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = ($18|0)==(0);
  if (!($30)) {
   $rc$2$lcssa = $18;
   break;
  }
  $31 = $1;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($25|0)<($36|0);
  $38 = ($25|0)==($36|0);
  $39 = ($22>>>0)<($33>>>0);
  $40 = $38 & $39;
  $41 = $37 | $40;
  $42 = (($i$04) + 1)|0;
  $43 = ($42|0)<(16);
  $or$cond = $41 & $43;
  if ($or$cond) {
   $16 = $22;$17 = $25;$i$04 = $42;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $44 = (($1) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $i$11 = (($45) + -1)|0;
  $46 = ($i$11|0)>(0);
  if ($46) {
   $i$13 = $i$11;
   while(1) {
    _vdbeSorterDoCompare($pCsr,$i$13);
    $i$1 = (($i$13) + -1)|0;
    $47 = ($i$1|0)>(0);
    if ($47) {
     $i$13 = $i$1;
    } else {
     $rc$2$lcssa = 0;
     break;
    }
   }
  } else {
   $rc$2$lcssa = 0;
  }
 }
 $48 = $nByte;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $pnByte;
 $55 = $54;
 HEAP32[$55>>2] = $50;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 STACKTOP = sp;return ($rc$2$lcssa|0);
}
function _sqlite3OsCloseFree($pFile) {
 $pFile = $pFile|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3OsClose($pFile);
 _sqlite3_free($pFile);
 STACKTOP = sp;return;
}
function _vdbeSorterIterInit($db,$pSorter,$0,$1,$pIter,$pnByte) {
 $db = $db|0;
 $pSorter = $pSorter|0;
 $0 = $0|0;
 $1 = $1|0;
 $pIter = $pIter|0;
 $pnByte = $pnByte|0;
 var $$idx = 0, $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $nByte = 0, $nRead$0 = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $nByte = sp;
 $2 = (($db) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$idx = (($5) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx$val$idx = (($$idx$val) + 32|0);
 $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
 $6 = (_sqlite3BtreeGetPageSize($$idx$val$idx$val)|0);
 $7 = (($pSorter) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($pIter) + 24|0);
 HEAP32[$9>>2] = $8;
 $10 = $pIter;
 $11 = $10;
 HEAP32[$11>>2] = $0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = (($pIter) + 16|0);
 HEAP32[$14>>2] = 128;
 $15 = (_sqlite3DbMallocRaw($db,128)|0);
 $16 = (($pIter) + 28|0);
 HEAP32[$16>>2] = $15;
 $17 = (($pIter) + 40|0);
 HEAP32[$17>>2] = $6;
 $18 = (_sqlite3DbMallocRaw($db,$6)|0);
 $19 = (($pIter) + 36|0);
 HEAP32[$19>>2] = $18;
 $20 = ($18|0)==(0|0);
 if ($20) {
  $rc$2 = 7;
  STACKTOP = sp;return ($rc$2|0);
 }
 $21 = ($6|0)<(0);
 $22 = $21 << 31 >> 31;
 $23 = (___remdi3(($0|0),($1|0),($6|0),($22|0))|0);
 $24 = tempRet0;
 $25 = ($23|0)==(0);
 if ($25) {
  $$pre$phiZ2D = $pSorter;
 } else {
  $26 = (($6) - ($23))|0;
  $27 = ($26|0)<(0);
  $28 = $27 << 31 >> 31;
  $29 = (_i64Add(($26|0),($28|0),($0|0),($1|0))|0);
  $30 = tempRet0;
  $31 = $pSorter;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($30|0)>($36|0);
  $38 = ($30|0)==($36|0);
  $39 = ($29>>>0)>($33>>>0);
  $40 = $38 & $39;
  $41 = $37 | $40;
  if ($41) {
   $42 = (_i64Subtract(($33|0),($36|0),($0|0),($1|0))|0);
   $43 = tempRet0;
   $nRead$0 = $42;
  } else {
   $nRead$0 = $26;
  }
  $44 = HEAP32[$7>>2]|0;
  $45 = (($18) + ($23)|0);
  $46 = (_sqlite3OsRead($44,$45,$nRead$0,$0,$1)|0);
  $47 = ($46|0)==(0);
  if ($47) {
   $$pre$phiZ2D = $pSorter;
  } else {
   $rc$2 = $46;
   STACKTOP = sp;return ($rc$2|0);
  }
 }
 $48 = $$pre$phiZ2D;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($pIter) + 8|0);
 $55 = $54;
 $56 = $55;
 HEAP32[$56>>2] = $50;
 $57 = (($55) + 4)|0;
 $58 = $57;
 HEAP32[$58>>2] = $53;
 $59 = (_vdbeSorterIterVarint($db,$pIter,$nByte)|0);
 $60 = $pIter;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $nByte;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (_i64Add(($68|0),($71|0),($62|0),($65|0))|0);
 $73 = tempRet0;
 $74 = $54;
 $75 = $74;
 HEAP32[$75>>2] = $72;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $73;
 $78 = $pnByte;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (_i64Add(($80|0),($83|0),($68|0),($71|0))|0);
 $85 = tempRet0;
 $86 = $pnByte;
 $87 = $86;
 HEAP32[$87>>2] = $84;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $85;
 $90 = ($59|0)==(0);
 if (!($90)) {
  $rc$2 = $59;
  STACKTOP = sp;return ($rc$2|0);
 }
 $91 = (_vdbeSorterIterNext($db,$pIter)|0);
 $rc$2 = $91;
 STACKTOP = sp;return ($rc$2|0);
}
function _vdbeSorterRowkey($pSorter,$pnKey) {
 $pSorter = $pSorter|0;
 $pnKey = $pnKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pKey$0 = 0, $pKey$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pSorter) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $10 = (($pSorter) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$pnKey>>2] = $13;
  $pKey$0$in = $11;
  $pKey$0 = HEAP32[$pKey$0$in>>2]|0;
  STACKTOP = sp;return ($pKey$0|0);
 } else {
  $3 = (($1) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($pSorter) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6) + (($4*48)|0)|0) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$pnKey>>2] = $8;
  $9 = ((($6) + (($4*48)|0)|0) + 32|0);
  $pKey$0$in = $9;
  $pKey$0 = HEAP32[$pKey$0$in>>2]|0;
  STACKTOP = sp;return ($pKey$0|0);
 }
 return 0|0;
}
function _dropCell($pPage,$idx,$sz,$pRC) {
 $pPage = $pPage|0;
 $idx = $idx|0;
 $sz = $sz|0;
 $pRC = $pRC|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pRC>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($pPage) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $idx << 1;
 $5 = (($pPage) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 8;
 $$sum1 = $4 | 1;
 $11 = (($6) + ($$sum1)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $10 | $13;
 $15 = (($pPage) + 5|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (($17) + 5)|0;
 $19 = (($3) + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 8;
 $$sum = (($17) + 6)|0;
 $23 = (($3) + ($$sum)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $22 | $25;
 $27 = ($14>>>0)<($26>>>0);
 if (!($27)) {
  $28 = (($14) + ($sz))|0;
  $29 = (($pPage) + 52|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($28>>>0)>($32>>>0);
  if (!($33)) {
   $34 = (_freeSpace($pPage,$14,$sz)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = (($pPage) + 16|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = (($37) + -1)<<16>>16;
    HEAP16[$36>>1] = $38;
    $$sum2 = (($4) + 2)|0;
    $39 = (($6) + ($$sum2)|0);
    $40 = $38&65535;
    $41 = (($40) - ($idx))|0;
    $42 = $41 << 1;
    _memmove(($7|0),($39|0),($42|0))|0;
    $43 = HEAP16[$36>>1]|0;
    $44 = ($43&65535) >>> 8;
    $45 = $44&255;
    $46 = (($17) + 3)|0;
    $47 = (($3) + ($46)|0);
    HEAP8[$47>>0] = $45;
    $48 = HEAP16[$36>>1]|0;
    $49 = $48&255;
    $$sum3 = (($17) + 4)|0;
    $50 = (($3) + ($$sum3)|0);
    HEAP8[$50>>0] = $49;
    $51 = (($pPage) + 14|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52&65535;
    $54 = (($53) + 2)|0;
    $55 = $54&65535;
    HEAP16[$51>>1] = $55;
    STACKTOP = sp;return;
   } else {
    HEAP32[$pRC>>2] = $34;
    STACKTOP = sp;return;
   }
  }
 }
 _sqlite3CorruptError(56475);
 HEAP32[$pRC>>2] = 11;
 STACKTOP = sp;return;
}
function _allocateTempSpace($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($pBt) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_sqlite3PageMalloc($4)|0);
 HEAP32[$0>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 HEAP8[$5>>0]=0&255;HEAP8[$5+1>>0]=(0>>8)&255;HEAP8[$5+2>>0]=(0>>16)&255;HEAP8[$5+3>>0]=0>>24;
 STACKTOP = sp;return;
}
function _insertCell($pPage,$i,$pCell,$sz,$pTemp,$iChild,$pRC) {
 $pPage = $pPage|0;
 $i = $i|0;
 $pCell = $pCell|0;
 $sz = $sz|0;
 $pTemp = $pTemp|0;
 $iChild = $iChild|0;
 $pRC = $pRC|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $idx = sp;
 HEAP32[$idx>>2] = 0;
 $0 = ($iChild|0)!=(0);
 $1 = $0 ? 4 : 0;
 $2 = HEAP32[$pRC>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($pPage) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = (($sz) + 2)|0;
  $8 = (($pPage) + 14|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ($7|0)>($10|0);
  if (!($11)) {
   $22 = (($pPage) + 68|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_sqlite3PagerWrite($23)|0);
   $25 = ($24|0)==(0);
   if (!($25)) {
    HEAP32[$pRC>>2] = $24;
    STACKTOP = sp;return;
   }
   $26 = (($pPage) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($pPage) + 12|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   $31 = (($pPage) + 16|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $34 = $33 << 1;
   $35 = $i << 1;
   $36 = (($30) + ($35))|0;
   $37 = (_allocateSpace($pPage,$sz,$idx)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    HEAP32[$pRC>>2] = $37;
    STACKTOP = sp;return;
   }
   $39 = HEAP16[$31>>1]|0;
   $40 = (($39) + 1)<<16>>16;
   HEAP16[$31>>1] = $40;
   $41 = HEAP16[$8>>1]|0;
   $42 = $41&65535;
   $43 = (($42) - ($7))|0;
   $44 = $43&65535;
   HEAP16[$8>>1] = $44;
   $45 = HEAP32[$idx>>2]|0;
   $46 = (($45) + ($1))|0;
   $47 = (($27) + ($46)|0);
   $48 = (($pCell) + ($1)|0);
   $49 = (($sz) - ($1))|0;
   _memcpy(($47|0),($48|0),($49|0))|0;
   if ($0) {
    $50 = (($27) + ($45)|0);
    _sqlite3Put4byte($50,$iChild);
   }
   $51 = (($36) + 2)|0;
   $52 = (($27) + ($51)|0);
   $53 = (($27) + ($36)|0);
   $54 = (($34) - ($35))|0;
   _memmove(($52|0),($53|0),($54|0))|0;
   $55 = $45 >>> 8;
   $56 = $55&255;
   HEAP8[$53>>0] = $56;
   $57 = $45&255;
   $$sum = (($36) + 1)|0;
   $58 = (($27) + ($$sum)|0);
   HEAP8[$58>>0] = $57;
   $59 = HEAP16[$31>>1]|0;
   $60 = ($59&65535) >>> 8;
   $61 = $60&255;
   $62 = (($pPage) + 5|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = (($64) + 3)|0;
   $66 = (($27) + ($65)|0);
   HEAP8[$66>>0] = $61;
   $67 = HEAP16[$31>>1]|0;
   $68 = $67&255;
   $69 = HEAP8[$62>>0]|0;
   $70 = $69&255;
   $$sum1 = (($70) + 4)|0;
   $71 = (($27) + ($$sum1)|0);
   HEAP8[$71>>0] = $68;
   $72 = (($pPage) + 52|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($73) + 17|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = ($75<<24>>24)==(0);
   if ($76) {
    STACKTOP = sp;return;
   }
   _ptrmapPutOvflPtr($pPage,$pCell,$pRC);
   STACKTOP = sp;return;
  }
 }
 $12 = ($pTemp|0)==(0|0);
 if ($12) {
  $$0 = $pCell;
 } else {
  $13 = (($pTemp) + ($1)|0);
  $14 = (($pCell) + ($1)|0);
  $15 = (($sz) - ($1))|0;
  _memcpy(($13|0),($14|0),($15|0))|0;
  $$0 = $pTemp;
 }
 if ($0) {
  _sqlite3Put4byte($$0,$iChild);
 }
 $16 = HEAP8[$4>>0]|0;
 $17 = (($16) + 1)<<24>>24;
 HEAP8[$4>>0] = $17;
 $18 = $16&255;
 $19 = ((($pPage) + ($18<<2)|0) + 32|0);
 HEAP32[$19>>2] = $$0;
 $20 = $i&65535;
 $21 = ((($pPage) + ($18<<1)|0) + 20|0);
 HEAP16[$21>>1] = $20;
 STACKTOP = sp;return;
}
function _balance($pCur) {
 $pCur = $pCur|0;
 var $$lcssa337 = 0, $$lcssa339 = 0, $$lcssa534 = 0, $$lcssa536 = 0, $$lcssa731 = 0, $$lcssa733 = 0, $$lcssa928 = 0, $$lcssa930 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $aBalanceQuickSpace = 0;
 var $pFree$0$ph = 0, $pFree$1 = 0, $pFree$3 = 0, $rc$1 = 0, $rc$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $aBalanceQuickSpace = sp;
 $0 = (($pCur) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 1;
 $5 = (($4>>>0) / 3)&-1;
 $6 = (($pCur) + 86|0);
 $7 = (($pCur) + 85|0);
 $8 = (($pCur) + 132|0);
 $9 = (($pCur) + 88|0);
 $10 = (($pCur) + 90|0);
 $$pre = HEAP16[$6>>1]|0;
 $12 = $$pre;$pFree$0$ph = 0;
 while(1) {
  $11 = $12 << 16 >> 16;
  $13 = ((($pCur) + ($11<<2)|0) + 128|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12<<16>>16)==(0);
  $16 = (($14) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(0);
  if ($15) {
   if ($18) {
    $pFree$3 = $pFree$0$ph;$rc$3 = 0;
    break;
   }
   $19 = (_balance_deeper($14,$8)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    $pFree$3 = $pFree$0$ph;$rc$3 = $19;
    break;
   }
   HEAP16[$6>>1] = 1;
   HEAP16[$9>>1] = 0;
   HEAP16[$10>>1] = 0;
   $21 = HEAP32[$8>>2]|0;
   $22 = (($21) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $$lcssa339 = 1;$$lcssa536 = 1;$$lcssa733 = $21;$$lcssa930 = $22;
    label = 7;
   } else {
    $$lcssa337 = 1;$$lcssa534 = 1;$$lcssa731 = $21;$$lcssa928 = $22;
   }
  } else {
   if ($18) {
    $$lcssa339 = $12;$$lcssa536 = $11;$$lcssa733 = $14;$$lcssa930 = $16;
    label = 7;
   } else {
    $$lcssa337 = $12;$$lcssa534 = $11;$$lcssa731 = $14;$$lcssa928 = $16;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $25 = (($$lcssa733) + 14|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26&65535;
   $28 = ($27>>>0)>($5>>>0);
   if ($28) {
    $$lcssa337 = $$lcssa339;$$lcssa534 = $$lcssa536;$$lcssa731 = $$lcssa733;$$lcssa928 = $$lcssa930;
   } else {
    $pFree$3 = $pFree$0$ph;$rc$3 = 0;
    break;
   }
  }
  $29 = (($$lcssa534) + -1)|0;
  $30 = ((($pCur) + ($29<<2)|0) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($pCur) + ($29<<1)|0) + 88|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = (($31) + 68|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_sqlite3PagerWrite($36)|0);
  $38 = ($37|0)==(0);
  do {
   if ($38) {
    $39 = (($$lcssa731) + 4|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)==(0);
    if (!($41)) {
     $42 = HEAP8[$$lcssa928>>0]|0;
     $43 = ($42<<24>>24)==(1);
     if ($43) {
      $44 = (($$lcssa731) + 20|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = (($$lcssa731) + 16|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = ($45<<16>>16)==($47<<16>>16);
      if ($48) {
       $49 = (($31) + 72|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)==(1);
       if (!($51)) {
        $52 = (($31) + 16|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = ($53<<16>>16)==($33<<16>>16);
        if ($54) {
         $55 = (_balance_quick($31,$$lcssa731,$aBalanceQuickSpace)|0);
         $pFree$1 = $pFree$0$ph;$rc$1 = $55;
         break;
        }
       }
      }
     }
    }
    $56 = HEAP32[$0>>2]|0;
    $57 = (($56) + 32|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_sqlite3PageMalloc($58)|0);
    $60 = ($$lcssa337<<16>>16)==(1);
    $61 = $60&1;
    $62 = HEAP8[$7>>0]|0;
    $63 = $62&255;
    $64 = (_balance_nonroot($31,$34,$59,$61,$63)|0);
    $65 = ($pFree$0$ph|0)==(0|0);
    if ($65) {
     $pFree$1 = $59;$rc$1 = $64;
    } else {
     _sqlite3PageFree($pFree$0$ph);
     $pFree$1 = $59;$rc$1 = $64;
    }
   } else {
    $pFree$1 = $pFree$0$ph;$rc$1 = $37;
   }
  } while(0);
  HEAP8[$$lcssa928>>0] = 0;
  _releasePage($$lcssa731);
  $66 = HEAP16[$6>>1]|0;
  $67 = (($66) + -1)<<16>>16;
  HEAP16[$6>>1] = $67;
  $68 = ($rc$1|0)==(0);
  if ($68) {
   $12 = $67;$pFree$0$ph = $pFree$1;
  } else {
   $pFree$3 = $pFree$1;$rc$3 = $rc$1;
   break;
  }
 }
 $69 = ($pFree$3|0)==(0|0);
 if ($69) {
  STACKTOP = sp;return ($rc$3|0);
 }
 _sqlite3PageFree($pFree$3);
 STACKTOP = sp;return ($rc$3|0);
}
function _balance_deeper($pRoot,$ppChild) {
 $pRoot = $pRoot|0;
 $ppChild = $ppChild|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pChild = 0, $pgnoChild = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rc = sp + 8|0;
 $pChild = sp + 4|0;
 $pgnoChild = sp;
 HEAP32[$pChild>>2] = 0;
 HEAP32[$pgnoChild>>2] = 0;
 $0 = (($pRoot) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pRoot) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_sqlite3PagerWrite($3)|0);
 HEAP32[$rc>>2] = $4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($pRoot) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_allocateBtreePage($1,$pChild,$pgnoChild,$7,0)|0);
  HEAP32[$rc>>2] = $8;
  $9 = HEAP32[$pChild>>2]|0;
  _copyNodeContent($pRoot,$9,$rc);
  $10 = (($1) + 17|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if (!($12)) {
   $13 = HEAP32[$pgnoChild>>2]|0;
   $14 = HEAP32[$6>>2]|0;
   _ptrmapPut($1,$13,5,$14,$rc);
  }
  $$pr = HEAP32[$rc>>2]|0;
  $15 = ($$pr|0)==(0);
  if ($15) {
   $17 = (($9) + 20|0);
   $18 = (($pRoot) + 20|0);
   $19 = (($pRoot) + 1|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $21 << 1;
   _memcpy(($17|0),($18|0),($22|0))|0;
   $23 = (($9) + 32|0);
   $24 = (($pRoot) + 32|0);
   $25 = HEAP8[$19>>0]|0;
   $26 = $25&255;
   $27 = $26 << 2;
   _memcpy(($23|0),($24|0),($27|0))|0;
   $28 = HEAP8[$19>>0]|0;
   $29 = (($9) + 1|0);
   HEAP8[$29>>0] = $28;
   $30 = (($9) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 & 247;
   _zeroPage($pRoot,$34);
   $35 = (($pRoot) + 5|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = (($37) + 8)|0;
   $39 = (($pRoot) + 56|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($38)|0);
   $42 = HEAP32[$pgnoChild>>2]|0;
   _sqlite3Put4byte($41,$42);
   HEAP32[$ppChild>>2] = $9;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $16 = $9;$43 = $$pr;
  }
 } else {
  $16 = 0;$43 = $4;
 }
 HEAP32[$ppChild>>2] = 0;
 _releasePage($16);
 $$0 = $43;
 STACKTOP = sp;return ($$0|0);
}
function _balance_quick($pParent,$pPage,$pSpace) {
 $pParent = $pParent|0;
 $pPage = $pPage|0;
 $pSpace = $pSpace|0;
 var $$0 = 0, $$pre = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond4 = 0, $pCell = 0, $pNew = 0, $pOut$0 = 0, $pgnoNew = 0, $rc = 0, $szCell = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pNew = sp + 12|0;
 $rc = sp + 8|0;
 $pgnoNew = sp + 4|0;
 $pCell = sp;
 $szCell = sp + 16|0;
 $0 = (($pPage) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 16|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  _sqlite3CorruptError(56678);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_allocateBtreePage($1,$pNew,$pgnoNew,0,0)|0);
 HEAP32[$rc>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($pSpace) + 4|0);
 $8 = (($pPage) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pCell>>2] = $9;
 $10 = (_cellSizePtr($pPage,$9)|0);
 HEAP16[$szCell>>1] = $10;
 $11 = HEAP32[$pNew>>2]|0;
 _zeroPage($11,13);
 _assemblePage($11,1,$pCell,$szCell);
 $12 = (($1) + 17|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if (!($14)) {
  $15 = HEAP32[$pgnoNew>>2]|0;
  $16 = (($pParent) + 72|0);
  $17 = HEAP32[$16>>2]|0;
  _ptrmapPut($1,$15,5,$17,$rc);
  $18 = HEAP16[$szCell>>1]|0;
  $19 = (($11) + 10|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ($18&65535)>($20&65535);
  if ($21) {
   $22 = HEAP32[$pCell>>2]|0;
   _ptrmapPutOvflPtr($11,$22,$rc);
  }
 }
 $23 = (($pPage) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($pPage) + 18|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = HEAP16[$2>>1]|0;
 $29 = $28&65535;
 $30 = $29 << 1;
 $31 = (($30) + -2)|0;
 $32 = (($pPage) + 64|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($31)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 << 8;
 $$sum = (($30) + -1)|0;
 $38 = (($33) + ($$sum)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $37 | $40;
 $42 = $41 & $27;
 $43 = (($24) + ($42)|0);
 HEAP32[$pCell>>2] = $43;
 $$sum2 = (($42) + 9)|0;
 $44 = (($24) + ($$sum2)|0);
 $46 = $43;
 while(1) {
  $45 = (($46) + 1|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = ($47<<24>>24)<(0);
  $49 = ($45>>>0)<($44>>>0);
  $or$cond = $48 & $49;
  if ($or$cond) {
   $46 = $45;
  } else {
   break;
  }
 }
 HEAP32[$pCell>>2] = $45;
 $50 = (($46) + 10|0);
 $52 = $45;$pOut$0 = $7;
 while(1) {
  $51 = (($52) + 1|0);
  HEAP32[$pCell>>2] = $51;
  $53 = HEAP8[$52>>0]|0;
  $54 = (($pOut$0) + 1|0);
  HEAP8[$pOut$0>>0] = $53;
  $55 = ($53<<24>>24)<(0);
  $56 = HEAP32[$pCell>>2]|0;
  $57 = ($56>>>0)<($50>>>0);
  $or$cond4 = $55 & $57;
  if ($or$cond4) {
   $52 = $56;$pOut$0 = $54;
  } else {
   break;
  }
 }
 $58 = (($pParent) + 16|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $54;
 $62 = $pSpace;
 $63 = (($61) - ($62))|0;
 $64 = (($pPage) + 72|0);
 $65 = HEAP32[$64>>2]|0;
 _insertCell($pParent,$60,$pSpace,$63,0,$65,$rc);
 $66 = (($pParent) + 5|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($68) + 8)|0;
 $70 = (($pParent) + 56|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($69)|0);
 $73 = HEAP32[$pgnoNew>>2]|0;
 _sqlite3Put4byte($72,$73);
 $74 = HEAP32[$pNew>>2]|0;
 _releasePage($74);
 $$pre = HEAP32[$rc>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function _balance_nonroot($pParent,$iParentIdx,$aOvflSpace,$isRoot,$bBulk) {
 $pParent = $pParent|0;
 $iParentIdx = $iParentIdx|0;
 $aOvflSpace = $aOvflSpace|0;
 $isRoot = $isRoot|0;
 $bBulk = $bBulk|0;
 var $$0 = 0, $$iOverflow$1 = 0, $$minV$0 = 0, $$neg14 = 0, $$neg16$pre = 0, $$neg16$pre$phiZZ2D = 0, $$not = 0, $$not166 = 0, $$phi$trans$insert = 0, $$phi$trans$insert153 = 0, $$phi$trans$insert155 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre154 = 0, $$pre156 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum159 = 0;
 var $$sum160 = 0, $$sum161 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $apCell$0 = 0, $apCopy = 0, $apDiv = 0, $apNew = 0, $apOld = 0;
 var $brmerge = 0, $cntNew = 0, $d$0 = 0, $exitcond = 0, $exitcond122 = 0, $exitcond131 = 0, $exitcond132 = 0, $exitcond133 = 0, $exitcond136 = 0, $exitcond138 = 0, $i$0 = 0, $i$1$lcssa = 0, $i$1049 = 0, $i$1116 = 0, $i$1137 = 0, $i$1222 = 0, $i$1318 = 0, $i$1417 = 0, $i$2105 = 0, $i$3$ = 0;
 var $i$386 = 0, $i$5 = 0, $i$678 = 0, $i$7$lcssa = 0, $i$772 = 0, $i$865 = 0, $i$960 = 0, $iNextOld$042 = 0, $iNextOld$1 = 0, $iNextOld$1$ph = 0, $iOverflow$0$ph = 0, $iOverflow$043 = 0, $iOverflow$1$ph = 0, $iOverflow$3 = 0, $iOvflSpace$046 = 0, $iOvflSpace$1 = 0, $iSpace1$0104 = 0, $iSpace1$1 = 0, $info = 0, $isDivider$0 = 0;
 var $isDivider$0$ph = 0, $isDivider$1 = 0, $j$094 = 0, $j$199 = 0, $j$2$minI$0 = 0, $j$253 = 0, $j$348 = 0, $j$4 = 0, $j$5 = 0, $j$636 = 0, $j$7 = 0, $j$7$ph = 0, $k$0$lcssa165 = 0, $k$085 = 0, $k$1 = 0, $k$235 = 0, $k$3 = 0, $k$4 = 0, $minI$055 = 0, $minV$054 = 0;
 var $nCell$0$lcssa162$ph = 0, $nCell$0$lcssa162164 = 0, $nCell$0106 = 0, $nCell$195 = 0, $nCell$2100 = 0, $nCell$3 = 0, $nCell$4 = 0, $nMaxCells$0117 = 0, $nNew$0$lcssa = 0, $nNew$073 = 0, $nNew$1 = 0, $nNew$2 = 0, $nOverflow$041 = 0, $nOverflow$1$ph = 0, $nOverflow$3 = 0, $not$ = 0, $nxDiv$0 = 0, $nxDiv$1 = 0, $nxDiv$247 = 0, $nxDiv$3 = 0;
 var $or$cond = 0, $pCell$0 = 0, $pNew = 0, $pNew4$039 = 0, $pNew4$1 = 0, $pNew4$2 = 0, $pOld5$040 = 0, $pOld5$1 = 0, $pOld5$1$ph = 0, $pRight$0 = 0, $pTemp2$0 = 0, $pgno = 0, $r$0 = 0, $rc = 0, $subtotal$084 = 0, $subtotal$1 = 0, $sz3$0 = 0, $szLeft$0 = 0, $szNew = 0, $szRight$0 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $rc = sp + 132|0;
 $apOld = sp + 120|0;
 $apCopy = sp + 108|0;
 $apNew = sp + 88|0;
 $apDiv = sp + 80|0;
 $cntNew = sp + 60|0;
 $szNew = sp + 40|0;
 $pgno = sp + 36|0;
 $pNew = sp + 32|0;
 $info = sp;
 HEAP32[$rc>>2] = 0;
 $0 = (($pParent) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($aOvflSpace|0)==(0|0);
 if ($2) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pParent) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($pParent) + 16|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) + ($5))|0;
 $10 = ($9|0)<(2);
 if ($10) {
  $i$0 = $9;$nxDiv$1 = 0;
 } else {
  $11 = ($iParentIdx|0)==(0);
  do {
   if ($11) {
    $nxDiv$0 = 0;
   } else {
    $12 = ($9|0)==($iParentIdx|0);
    if ($12) {
     $13 = (($bBulk) + -2)|0;
     $14 = (($13) + ($iParentIdx))|0;
     $nxDiv$0 = $14;
     break;
    } else {
     $15 = (($iParentIdx) + -1)|0;
     $nxDiv$0 = $15;
     break;
    }
   }
  } while(0);
  $16 = (2 - ($bBulk))|0;
  $i$0 = $16;$nxDiv$1 = $nxDiv$0;
 }
 $17 = (($i$0) + 1)|0;
 $18 = (($i$0) + ($nxDiv$1))|0;
 $19 = (($18) - ($5))|0;
 $20 = ($19|0)==($8|0);
 if ($20) {
  $21 = (($pParent) + 5|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($23) + 8)|0;
  $25 = (($pParent) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($24)|0);
  $pRight$0 = $27;
 } else {
  $28 = (($pParent) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($pParent) + 18|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $33 = $19 << 1;
  $34 = (($pParent) + 64|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($33)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 << 8;
  $$sum2 = $33 | 1;
  $40 = (($35) + ($$sum2)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $39 | $42;
  $44 = $43 & $32;
  $45 = (($29) + ($44)|0);
  $pRight$0 = $45;
 }
 $46 = (_sqlite3Get4byte($pRight$0)|0);
 HEAP32[$pgno>>2] = $46;
 $47 = (($apOld) + ($i$0<<2)|0);
 $48 = (_getAndInitPage($1,$46,$47,0)|0);
 HEAP32[$rc>>2] = $48;
 $49 = ($48|0)==(0);
 L17: do {
  if ($49) {
   $50 = (($pParent) + 20|0);
   $51 = (($pParent) + 32|0);
   $52 = (($pParent) + 56|0);
   $53 = (($pParent) + 18|0);
   $54 = (($pParent) + 64|0);
   $55 = (($1) + 22|0);
   $56 = (($1) + 36|0);
   $60 = $47;$i$1116 = $i$0;$nMaxCells$0117 = 0;
   while(1) {
    $59 = HEAP32[$60>>2]|0;
    $61 = (($59) + 16|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = $62&65535;
    $64 = (($59) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = (($nMaxCells$0117) + 1)|0;
    $68 = (($67) + ($63))|0;
    $69 = (($68) + ($66))|0;
    $70 = (($i$1116) + -1)|0;
    $71 = ($i$1116|0)==(0);
    if ($71) {
     break;
    }
    $72 = (($70) + ($nxDiv$1))|0;
    $73 = HEAP16[$50>>1]|0;
    $74 = $73&65535;
    $75 = ($72|0)==($74|0);
    $76 = HEAP8[$3>>0]|0;
    if ($75) {
     $77 = ($76<<24>>24)==(0);
     if ($77) {
      $88 = 0;
      label = 18;
     } else {
      $78 = HEAP32[$51>>2]|0;
      $79 = (($apDiv) + ($70<<2)|0);
      HEAP32[$79>>2] = $78;
      $80 = (_sqlite3Get4byte($78)|0);
      HEAP32[$pgno>>2] = $80;
      $81 = (_cellSizePtr($pParent,$78)|0);
      $82 = $81&65535;
      $83 = (($szNew) + ($70<<2)|0);
      HEAP32[$83>>2] = $82;
      HEAP8[$3>>0] = 0;
      $127 = $80;
     }
    } else {
     $88 = $76;
     label = 18;
    }
    if ((label|0) == 18) {
     label = 0;
     $84 = HEAP32[$52>>2]|0;
     $85 = HEAP16[$53>>1]|0;
     $86 = $85&65535;
     $87 = $88&255;
     $89 = (($72) - ($87))|0;
     $90 = $89 << 1;
     $91 = HEAP32[$54>>2]|0;
     $92 = (($91) + ($90)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = $94 << 8;
     $$sum3 = $90 | 1;
     $96 = (($91) + ($$sum3)|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = $95 | $98;
     $100 = $99 & $86;
     $101 = (($84) + ($100)|0);
     $102 = (($apDiv) + ($70<<2)|0);
     HEAP32[$102>>2] = $101;
     $103 = (_sqlite3Get4byte($101)|0);
     HEAP32[$pgno>>2] = $103;
     $104 = (_cellSizePtr($pParent,$101)|0);
     $105 = $104&65535;
     $106 = (($szNew) + ($70<<2)|0);
     HEAP32[$106>>2] = $105;
     $107 = HEAP16[$55>>1]|0;
     $108 = $107 & 4;
     $109 = ($108<<16>>16)==(0);
     if (!($109)) {
      $110 = $101;
      $111 = HEAP32[$52>>2]|0;
      $112 = $111;
      $113 = (($110) - ($112))|0;
      $114 = (($113) + ($105))|0;
      $115 = HEAP32[$56>>2]|0;
      $116 = ($114|0)>($115|0);
      if ($116) {
       label = 20;
       break;
      }
      $118 = (($aOvflSpace) + ($113)|0);
      _memcpy(($118|0),($101|0),($105|0))|0;
      $119 = HEAP32[$52>>2]|0;
      $120 = $119;
      $121 = (($110) - ($120))|0;
      $122 = (($aOvflSpace) + ($121)|0);
      HEAP32[$102>>2] = $122;
     }
     $123 = HEAP8[$3>>0]|0;
     $124 = $123&255;
     $125 = (($72) - ($124))|0;
     _dropCell($pParent,$125,$105,$rc);
     $127 = $103;
    }
    $126 = (($apOld) + ($70<<2)|0);
    $128 = (_getAndInitPage($1,$127,$126,0)|0);
    HEAP32[$rc>>2] = $128;
    $129 = ($128|0)==(0);
    if ($129) {
     $60 = $126;$i$1116 = $70;$nMaxCells$0117 = $69;
    } else {
     $i$1$lcssa = $70;
     label = 13;
     break L17;
    }
   }
   if ((label|0) == 20) {
    _sqlite3CorruptError(57015);
    HEAP32[$rc>>2] = 11;
    $117 = $i$1116 << 2;
    _memset(($apOld|0),0,($117|0))|0;
    $apCell$0 = 0;$nNew$2 = 0;
    break;
   }
   $130 = (($69) + 3)|0;
   $131 = $130 & -4;
   $132 = (($1) + 32|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 80)|0;
   $135 = ($131*6)|0;
   $136 = (($133) + ($135))|0;
   $137 = Math_imul($134, $17)|0;
   $138 = (($136) + ($137))|0;
   $139 = (_sqlite3ScratchMalloc($138)|0);
   $140 = ($139|0)==(0|0);
   if ($140) {
    HEAP32[$rc>>2] = 7;
    $apCell$0 = $139;$nNew$2 = 0;
    break;
   }
   $141 = (($139) + ($131<<2)|0);
   $142 = (($141) + ($131<<1)|0);
   $143 = HEAP32[$apOld>>2]|0;
   $144 = (($143) + 3|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = $146 << 2;
   $148 = $147&65535;
   $149 = (($143) + 4|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ($i$0|0)>(-1);
   if ($152) {
    $153 = ($150<<24>>24)==(0);
    $159 = $143;$i$2105 = 0;$iSpace1$0104 = 0;$nCell$0106 = 0;
    while(1) {
     $154 = HEAP32[$132>>2]|0;
     $155 = Math_imul($i$2105, $134)|0;
     $156 = (($154) + ($155))|0;
     $157 = (($142) + ($156)|0);
     $158 = (($apCopy) + ($i$2105<<2)|0);
     HEAP32[$158>>2] = $157;
     dest=$157+0|0; src=$159+0|0; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $$sum4 = (($156) + 76)|0;
     $160 = (($142) + ($$sum4)|0);
     $$sum5 = (($156) + 56)|0;
     $161 = (($142) + ($$sum5)|0);
     HEAP32[$161>>2] = $160;
     $162 = (($159) + 56|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = HEAP32[$132>>2]|0;
     _memcpy(($160|0),($163|0),($164|0))|0;
     $$sum6 = (($156) + 16)|0;
     $165 = (($142) + ($$sum6)|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $$sum7 = (($156) + 1)|0;
     $168 = (($142) + ($$sum7)|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $169&255;
     $171 = (($170) + ($167))|0;
     $172 = ($169<<24>>24)==(0);
     $173 = ($171|0)>(0);
     if ($172) {
      if ($173) {
       $$sum9 = (($156) + 12)|0;
       $$sum8 = (($156) + 18)|0;
       $180 = (($142) + ($$sum9)|0);
       $181 = (($142) + ($$sum8)|0);
       $182 = HEAP16[$180>>1]|0;
       $183 = HEAP16[$181>>1]|0;
       $184 = $183&65535;
       $185 = $182&65535;
       $j$199 = 0;$nCell$2100 = $nCell$0106;
       while(1) {
        $186 = $j$199 << 1;
        $187 = (($186) + ($185))|0;
        $$sum159 = (($$sum4) + ($187))|0;
        $188 = (($142) + ($$sum159)|0);
        $189 = HEAP8[$188>>0]|0;
        $190 = $189&255;
        $191 = $190 << 8;
        $$sum12 = (($187) + 1)|0;
        $$sum160 = (($$sum4) + ($$sum12))|0;
        $192 = (($142) + ($$sum160)|0);
        $193 = HEAP8[$192>>0]|0;
        $194 = $193&255;
        $195 = $191 | $194;
        $196 = $195 & $184;
        $$sum161 = (($$sum4) + ($196))|0;
        $197 = (($142) + ($$sum161)|0);
        $198 = (($139) + ($nCell$2100<<2)|0);
        HEAP32[$198>>2] = $197;
        $199 = (_cellSizePtr($157,$197)|0);
        $200 = (($141) + ($nCell$2100<<1)|0);
        HEAP16[$200>>1] = $199;
        $201 = (($nCell$2100) + 1)|0;
        $202 = (($j$199) + 1)|0;
        $exitcond138 = ($202|0)==($167|0);
        if ($exitcond138) {
         break;
        } else {
         $j$199 = $202;$nCell$2100 = $201;
        }
       }
       $205 = (($nCell$0106) + ($167))|0;
       $nCell$3 = $205;
      } else {
       $nCell$3 = $nCell$0106;
      }
     } else {
      if ($173) {
       $j$094 = 0;$nCell$195 = $nCell$0106;
       while(1) {
        $174 = (_findOverflowCell($157,$j$094)|0);
        $175 = (($139) + ($nCell$195<<2)|0);
        HEAP32[$175>>2] = $174;
        $176 = (_cellSizePtr($157,$174)|0);
        $177 = (($141) + ($nCell$195<<1)|0);
        HEAP16[$177>>1] = $176;
        $178 = (($nCell$195) + 1)|0;
        $179 = (($j$094) + 1)|0;
        $exitcond136 = ($179|0)==($171|0);
        if ($exitcond136) {
         break;
        } else {
         $j$094 = $179;$nCell$195 = $178;
        }
       }
       $203 = (($nCell$0106) + ($170))|0;
       $204 = (($203) + ($167))|0;
       $nCell$3 = $204;
      } else {
       $nCell$3 = $nCell$0106;
      }
     }
     $206 = ($i$2105|0)<($i$0|0);
     $or$cond = $206 & $153;
     if ($or$cond) {
      $207 = (($szNew) + ($i$2105<<2)|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = $208&65535;
      $210 = (($141) + ($nCell$3<<1)|0);
      HEAP16[$210>>1] = $209;
      $211 = (($142) + ($iSpace1$0104)|0);
      $212 = $208 & 65535;
      $213 = (($212) + ($iSpace1$0104))|0;
      $214 = (($apDiv) + ($i$2105<<2)|0);
      $215 = HEAP32[$214>>2]|0;
      _memcpy(($211|0),($215|0),($212|0))|0;
      $$sum10 = (($iSpace1$0104) + ($147))|0;
      $216 = (($142) + ($$sum10)|0);
      $217 = (($139) + ($nCell$3<<2)|0);
      HEAP32[$217>>2] = $216;
      $218 = HEAP16[$210>>1]|0;
      $219 = $218&65535;
      $220 = (($219) - ($147))|0;
      $221 = $220&65535;
      HEAP16[$210>>1] = $221;
      $$sum11 = (($156) + 3)|0;
      $222 = (($142) + ($$sum11)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = ($223<<24>>24)==(0);
      if ($224) {
       $225 = HEAP32[$217>>2]|0;
       $226 = HEAP32[$161>>2]|0;
       $227 = (($226) + 8|0);
       $228 = HEAPU8[$227>>0]|(HEAPU8[$227+1>>0]<<8)|(HEAPU8[$227+2>>0]<<16)|(HEAPU8[$227+3>>0]<<24);
       HEAP8[$225>>0]=$228&255;HEAP8[$225+1>>0]=($228>>8)&255;HEAP8[$225+2>>0]=($228>>16)&255;HEAP8[$225+3>>0]=$228>>24;
      } else {
       $229 = $220 & 65532;
       $230 = ($229>>>0)<(4);
       if ($230) {
        HEAP16[$210>>1] = 4;
       }
      }
      $231 = (($nCell$3) + 1)|0;
      $iSpace1$1 = $213;$nCell$4 = $231;
     } else {
      $iSpace1$1 = $iSpace1$0104;$nCell$4 = $nCell$3;
     }
     $232 = (($i$2105) + 1)|0;
     $233 = ($232|0)<($17|0);
     if (!($233)) {
      break;
     }
     $$phi$trans$insert155 = (($apOld) + ($232<<2)|0);
     $$pre156 = HEAP32[$$phi$trans$insert155>>2]|0;
     $159 = $$pre156;$i$2105 = $232;$iSpace1$0104 = $iSpace1$1;$nCell$0106 = $nCell$4;
    }
    $234 = HEAP32[$56>>2]|0;
    $235 = (($147) + -12)|0;
    $236 = (($235) + ($234))|0;
    $237 = ($nCell$4|0)>(0);
    if ($237) {
     $not$ = ($150<<24>>24)!=(0);
     $238 = $not$ << 31 >> 31;
     $i$386 = 0;$k$085 = 0;$subtotal$084 = 0;
     while(1) {
      $239 = (($141) + ($i$386<<1)|0);
      $240 = HEAP16[$239>>1]|0;
      $241 = $240&65535;
      $242 = (($subtotal$084) + 2)|0;
      $243 = (($242) + ($241))|0;
      $244 = ($243|0)>($236|0);
      if ($244) {
       $245 = (($szNew) + ($k$085<<2)|0);
       HEAP32[$245>>2] = $242;
       $246 = (($cntNew) + ($k$085<<2)|0);
       HEAP32[$246>>2] = $i$386;
       $i$3$ = (($i$386) + ($238))|0;
       $247 = (($k$085) + 1)|0;
       $248 = ($k$085|0)>(3);
       if ($248) {
        label = 48;
        break;
       } else {
        $i$5 = $i$3$;$k$1 = $247;$subtotal$1 = 0;
       }
      } else {
       $i$5 = $i$386;$k$1 = $k$085;$subtotal$1 = $243;
      }
      $249 = (($i$5) + 1)|0;
      $250 = ($249|0)<($nCell$4|0);
      if ($250) {
       $i$386 = $249;$k$085 = $k$1;$subtotal$084 = $subtotal$1;
      } else {
       break;
      }
     }
     if ((label|0) == 48) {
      _sqlite3CorruptError(57154);
      HEAP32[$rc>>2] = 11;
      $apCell$0 = $139;$nNew$2 = 0;
      break;
     }
     $251 = (($szNew) + ($k$1<<2)|0);
     HEAP32[$251>>2] = $subtotal$1;
     $252 = (($cntNew) + ($k$1<<2)|0);
     HEAP32[$252>>2] = $nCell$4;
     $253 = (($k$1) + 1)|0;
     $254 = ($k$1|0)>(0);
     if ($254) {
      $255 = ($bBulk|0)==(0);
      $504 = $subtotal$1;$i$678 = $k$1;
      while(1) {
       $256 = (($szNew) + ($i$678<<2)|0);
       $257 = (($i$678) + -1)|0;
       $258 = (($szNew) + ($257<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = (($cntNew) + ($257<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $261;$szLeft$0 = $259;$szRight$0 = $504;
       while(1) {
        $r$0 = (($262) + -1)|0;
        $d$0 = (($262) - ($151))|0;
        $263 = ($szRight$0|0)==(0);
        if ($263) {
         $$phi$trans$insert = (($141) + ($d$0<<1)|0);
         $$pre = HEAP16[$$phi$trans$insert>>1]|0;
         $$phi$trans$insert153 = (($141) + ($r$0<<1)|0);
         $$pre154 = HEAP16[$$phi$trans$insert153>>1]|0;
         $$neg16$pre = (($szLeft$0) + -2)|0;
         $$neg16$pre$phiZZ2D = $$neg16$pre;$$pre$phiZ2D = 2;$275 = $$pre;$278 = $$pre154;
        } else {
         if (!($255)) {
          break;
         }
         $264 = (($141) + ($d$0<<1)|0);
         $265 = HEAP16[$264>>1]|0;
         $266 = $265&65535;
         $267 = (($szRight$0) + 2)|0;
         $268 = (($267) + ($266))|0;
         $269 = (($141) + ($r$0<<1)|0);
         $270 = HEAP16[$269>>1]|0;
         $271 = $270&65535;
         $$neg14 = (($szLeft$0) + -2)|0;
         $272 = (($$neg14) - ($271))|0;
         $273 = ($268|0)>($272|0);
         if ($273) {
          break;
         } else {
          $$neg16$pre$phiZZ2D = $$neg14;$$pre$phiZ2D = $267;$275 = $265;$278 = $270;
         }
        }
        $274 = $275&65535;
        $276 = (($$pre$phiZ2D) + ($274))|0;
        $277 = $278&65535;
        $279 = (($$neg16$pre$phiZZ2D) - ($277))|0;
        HEAP32[$260>>2] = $r$0;
        $262 = $r$0;$szLeft$0 = $279;$szRight$0 = $276;
       }
       HEAP32[$256>>2] = $szRight$0;
       HEAP32[$258>>2] = $szLeft$0;
       $280 = ($257|0)>(0);
       if ($280) {
        $504 = $szLeft$0;$i$678 = $257;
       } else {
        $318 = $253;$502 = $254;$503 = $237;$k$0$lcssa165 = $k$1;$nCell$0$lcssa162164 = $nCell$4;
        break;
       }
      }
     } else {
      $318 = $253;$502 = 0;$503 = $237;$k$0$lcssa165 = $k$1;$nCell$0$lcssa162164 = $nCell$4;
     }
    } else {
     $nCell$0$lcssa162$ph = $nCell$4;
     label = 50;
    }
   } else {
    $nCell$0$lcssa162$ph = 0;
    label = 50;
   }
   if ((label|0) == 50) {
    HEAP32[$szNew>>2] = 0;
    HEAP32[$cntNew>>2] = $nCell$0$lcssa162$ph;
    $318 = 1;$502 = 0;$503 = 0;$k$0$lcssa165 = 0;$nCell$0$lcssa162164 = $nCell$0$lcssa162$ph;
   }
   $281 = (($143) + 72|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ($282>>>0)<(2);
   if ($283) {
    _sqlite3CorruptError(57216);
    HEAP32[$rc>>2] = 11;
    $apCell$0 = $139;$nNew$2 = 0;
    break;
   }
   $284 = (($143) + 56|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = HEAP8[$285>>0]|0;
   $287 = $286&255;
   $288 = ($k$0$lcssa165|0)>(-1);
   if ($288) {
    $289 = ($bBulk|0)!=(0);
    $290 = (($1) + 17|0);
    $291 = (($pParent) + 72|0);
    $i$772 = 0;$nNew$073 = 0;
    while(1) {
     $293 = ($i$772|0)<($17|0);
     if ($293) {
      $294 = (($apOld) + ($i$772<<2)|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = (($apNew) + ($i$772<<2)|0);
      HEAP32[$296>>2] = $295;
      HEAP32[$pNew>>2] = $295;
      HEAP32[$294>>2] = 0;
      $297 = (($295) + 68|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (_sqlite3PagerWrite($298)|0);
      HEAP32[$rc>>2] = $299;
      $300 = (($nNew$073) + 1)|0;
      $301 = ($299|0)==(0);
      if ($301) {
       $nNew$1 = $300;
      } else {
       $apCell$0 = $139;$nNew$2 = $300;
       break L17;
      }
     } else {
      $302 = HEAP32[$pgno>>2]|0;
      $303 = $289 ? 1 : $302;
      $304 = (_allocateBtreePage($1,$pNew,$pgno,$303,0)|0);
      HEAP32[$rc>>2] = $304;
      $305 = ($304|0)==(0);
      if (!($305)) {
       $apCell$0 = $139;$nNew$2 = $nNew$073;
       break L17;
      }
      $306 = HEAP32[$pNew>>2]|0;
      $307 = (($apNew) + ($i$772<<2)|0);
      HEAP32[$307>>2] = $306;
      $308 = (($nNew$073) + 1)|0;
      $309 = HEAP8[$290>>0]|0;
      $310 = ($309<<24>>24)==(0);
      if ($310) {
       $nNew$1 = $308;
      } else {
       $311 = (($306) + 72|0);
       $312 = HEAP32[$311>>2]|0;
       $313 = HEAP32[$291>>2]|0;
       _ptrmapPut($1,$312,5,$313,$rc);
       $314 = HEAP32[$rc>>2]|0;
       $315 = ($314|0)==(0);
       if ($315) {
        $nNew$1 = $308;
       } else {
        $apCell$0 = $139;$nNew$2 = $308;
        break L17;
       }
      }
     }
     $316 = (($i$772) + 1)|0;
     $317 = ($316|0)<($318|0);
     if ($317) {
      $i$772 = $316;$nNew$073 = $nNew$1;
     } else {
      $i$7$lcssa = $316;$nNew$0$lcssa = $nNew$1;
      break;
     }
    }
   } else {
    $i$7$lcssa = 0;$nNew$0$lcssa = 0;
   }
   $292 = ($i$7$lcssa|0)<($17|0);
   if ($292) {
    $i$865 = $i$7$lcssa;
    while(1) {
     $319 = (($apOld) + ($i$865<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     _freePage($320,$rc);
     $321 = HEAP32[$rc>>2]|0;
     $322 = ($321|0)==(0);
     if (!($322)) {
      $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
      break L17;
     }
     _releasePage($320);
     HEAP32[$319>>2] = 0;
     $323 = (($i$865) + 1)|0;
     $324 = ($323|0)<($17|0);
     if ($324) {
      $i$865 = $323;
     } else {
      break;
     }
    }
   }
   if ($502) {
    $i$960 = 0;
    while(1) {
     $325 = (($apNew) + ($i$960<<2)|0);
     $326 = (($i$960) + 1)|0;
     $327 = ($326|0)<($318|0);
     if ($327) {
      $328 = HEAP32[$325>>2]|0;
      $329 = (($328) + 72|0);
      $330 = HEAP32[$329>>2]|0;
      $j$253 = $326;$minI$055 = $i$960;$minV$054 = $330;
      while(1) {
       $331 = (($apNew) + ($j$253<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = (($332) + 72|0);
       $334 = HEAP32[$333>>2]|0;
       $335 = ($334>>>0)<($minV$054>>>0);
       $$minV$0 = $335 ? $334 : $minV$054;
       $j$2$minI$0 = $335 ? $j$253 : $minI$055;
       $336 = (($j$253) + 1)|0;
       $exitcond132 = ($336|0)==($318|0);
       if ($exitcond132) {
        break;
       } else {
        $j$253 = $336;$minI$055 = $j$2$minI$0;$minV$054 = $$minV$0;
       }
      }
      $337 = ($j$2$minI$0|0)>($i$960|0);
      if ($337) {
       $338 = HEAP32[$325>>2]|0;
       $339 = (($apNew) + ($j$2$minI$0<<2)|0);
       $340 = HEAP32[$339>>2]|0;
       HEAP32[$325>>2] = $340;
       HEAP32[$339>>2] = $338;
      }
     }
     $exitcond133 = ($326|0)==($k$0$lcssa165|0);
     if ($exitcond133) {
      break;
     } else {
      $i$960 = $326;
     }
    }
   }
   $341 = (($nNew$0$lcssa) + -1)|0;
   $342 = (($apNew) + ($341<<2)|0);
   $343 = HEAP32[$342>>2]|0;
   $344 = (($343) + 72|0);
   $345 = HEAP32[$344>>2]|0;
   _sqlite3Put4byte($pRight$0,$345);
   $346 = ($nNew$0$lcssa|0)>(0);
   if ($346) {
    $347 = ($150<<24>>24)==(0);
    $i$1049 = 0;$iOvflSpace$046 = 0;$j$348 = 0;$nxDiv$247 = $nxDiv$1;
    while(1) {
     $348 = (($apNew) + ($i$1049<<2)|0);
     $349 = HEAP32[$348>>2]|0;
     _zeroPage($349,$287);
     $350 = (($cntNew) + ($i$1049<<2)|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = (($351) - ($j$348))|0;
     $353 = (($139) + ($j$348<<2)|0);
     $354 = (($141) + ($j$348<<1)|0);
     _assemblePage($349,$352,$353,$354);
     $355 = ($351|0)<($nCell$0$lcssa162164|0);
     if ($355) {
      $356 = (($139) + ($351<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = (($141) + ($351<<1)|0);
      $359 = HEAP16[$358>>1]|0;
      $360 = $359&65535;
      $361 = (($360) + ($147))|0;
      $362 = (($aOvflSpace) + ($iOvflSpace$046)|0);
      $363 = (($349) + 3|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = ($364<<24>>24)==(0);
      do {
       if ($365) {
        $366 = (($349) + 56|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = (($367) + 8|0);
        $369 = HEAPU8[$357>>0]|(HEAPU8[$357+1>>0]<<8)|(HEAPU8[$357+2>>0]<<16)|(HEAPU8[$357+3>>0]<<24);
        HEAP8[$368>>0]=$369&255;HEAP8[$368+1>>0]=($369>>8)&255;HEAP8[$368+2>>0]=($369>>16)&255;HEAP8[$368+3>>0]=$369>>24;
        $j$4 = $351;$pCell$0 = $357;$pTemp2$0 = $362;$sz3$0 = $361;
       } else {
        if (!($347)) {
         $370 = (($351) + -1)|0;
         $371 = (($139) + ($370<<2)|0);
         $372 = HEAP32[$371>>2]|0;
         _btreeParseCellPtr($349,$372,$info);
         $$sum = (($iOvflSpace$046) + 4)|0;
         $373 = (($aOvflSpace) + ($$sum)|0);
         $374 = $info;
         $375 = $374;
         $376 = HEAP32[$375>>2]|0;
         $377 = (($374) + 4)|0;
         $378 = $377;
         $379 = HEAP32[$378>>2]|0;
         $380 = (_sqlite3PutVarint($373,$376,$379)|0);
         $381 = (($380) + 4)|0;
         $j$4 = $370;$pCell$0 = $362;$pTemp2$0 = 0;$sz3$0 = $381;
         break;
        }
        $382 = (($357) + -4|0);
        $383 = ($359<<16>>16)==(4);
        if ($383) {
         $384 = (_cellSizePtr($pParent,$382)|0);
         $385 = $384&65535;
         $j$4 = $351;$pCell$0 = $382;$pTemp2$0 = $362;$sz3$0 = $385;
        } else {
         $j$4 = $351;$pCell$0 = $382;$pTemp2$0 = $362;$sz3$0 = $361;
        }
       }
      } while(0);
      $386 = (($349) + 72|0);
      $387 = HEAP32[$386>>2]|0;
      _insertCell($pParent,$nxDiv$247,$pCell$0,$sz3$0,$pTemp2$0,$387,$rc);
      $388 = HEAP32[$rc>>2]|0;
      $389 = ($388|0)==(0);
      if (!($389)) {
       $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
       break L17;
      }
      $390 = (($sz3$0) + ($iOvflSpace$046))|0;
      $391 = (($j$4) + 1)|0;
      $392 = (($nxDiv$247) + 1)|0;
      $iOvflSpace$1 = $390;$j$5 = $391;$nxDiv$3 = $392;
     } else {
      $iOvflSpace$1 = $iOvflSpace$046;$j$5 = $351;$nxDiv$3 = $nxDiv$247;
     }
     $393 = (($i$1049) + 1)|0;
     $394 = ($393|0)<($nNew$0$lcssa|0);
     if ($394) {
      $i$1049 = $393;$iOvflSpace$046 = $iOvflSpace$1;$j$348 = $j$5;$nxDiv$247 = $nxDiv$3;
     } else {
      break;
     }
    }
   }
   $395 = $287 & 8;
   $396 = ($395|0)==(0);
   if ($396) {
    $397 = (($apCopy) + ($i$0<<2)|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + 56|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = (($400) + 8|0);
    $402 = (($343) + 56|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = (($403) + 8|0);
    $405 = HEAPU8[$401>>0]|(HEAPU8[$401+1>>0]<<8)|(HEAPU8[$401+2>>0]<<16)|(HEAPU8[$401+3>>0]<<24);
    HEAP8[$404>>0]=$405&255;HEAP8[$404+1>>0]=($405>>8)&255;HEAP8[$404+2>>0]=($405>>16)&255;HEAP8[$404+3>>0]=$405>>24;
   }
   $406 = ($isRoot|0)==(0);
   if (!($406)) {
    $407 = HEAP16[$6>>1]|0;
    $408 = ($407<<16>>16)==(0);
    if ($408) {
     $409 = (($pParent) + 5|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = $410&255;
     $412 = HEAP32[$apNew>>2]|0;
     $413 = (($412) + 14|0);
     $414 = HEAP16[$413>>1]|0;
     $415 = $414&65535;
     $416 = ($411>>>0)>($415>>>0);
     if (!($416)) {
      _copyNodeContent($412,$pParent,$rc);
      _freePage($412,$rc);
      $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
      break;
     }
    }
   }
   $417 = (($1) + 17|0);
   $418 = HEAP8[$417>>0]|0;
   $419 = ($418<<24>>24)==(0);
   if ($419) {
    $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
   } else {
    $420 = HEAP32[$apNew>>2]|0;
    $421 = HEAP32[$apCopy>>2]|0;
    $422 = (($421) + 1|0);
    $423 = HEAP8[$422>>0]|0;
    $424 = $423&255;
    $425 = (($421) + 16|0);
    $426 = HEAP16[$425>>1]|0;
    $427 = $426&65535;
    $428 = (($427) + ($424))|0;
    $429 = ($423<<24>>24)==(0);
    if ($429) {
     $iOverflow$0$ph = -1;
    } else {
     $430 = (($421) + 20|0);
     $431 = HEAP16[$430>>1]|0;
     $432 = $431&65535;
     $iOverflow$0$ph = $432;
    }
    if ($503) {
     $433 = ($150<<24>>24)==(0);
     $434 = $433&1;
     $435 = ($148<<16>>16)==(0);
     $i$1137 = 0;$iNextOld$042 = $428;$iOverflow$043 = $iOverflow$0$ph;$j$636 = 0;$k$235 = 0;$nOverflow$041 = $424;$pNew4$039 = $420;$pOld5$040 = $421;
     while(1) {
      $436 = (($i$1137) + ($434))|0;
      $iNextOld$1$ph = $iNextOld$042;$iOverflow$1$ph = $iOverflow$043;$isDivider$0$ph = 0;$j$7$ph = $j$636;$nOverflow$1$ph = $nOverflow$041;$pOld5$1$ph = $pOld5$040;
      L149: while(1) {
       $iNextOld$1 = $iNextOld$1$ph;$isDivider$0 = $isDivider$0$ph;$j$7 = $j$7$ph;$pOld5$1 = $pOld5$1$ph;
       while(1) {
        $437 = ($i$1137|0)==($iNextOld$1|0);
        if (!($437)) {
         break L149;
        }
        $438 = (($j$7) + 1)|0;
        $439 = (($apCopy) + ($438<<2)|0);
        $440 = HEAP32[$439>>2]|0;
        $441 = (($440) + 16|0);
        $442 = HEAP16[$441>>1]|0;
        $443 = $442&65535;
        $444 = (($443) + ($436))|0;
        $445 = (($440) + 1|0);
        $446 = HEAP8[$445>>0]|0;
        $447 = $446&255;
        $448 = (($444) + ($447))|0;
        $449 = ($446<<24>>24)==(0);
        if ($449) {
         $iNextOld$1 = $448;$isDivider$0 = $434;$j$7 = $438;$pOld5$1 = $440;
        } else {
         break;
        }
       }
       $450 = (($440) + 20|0);
       $451 = HEAP16[$450>>1]|0;
       $452 = $451&65535;
       $453 = (($452) + ($436))|0;
       $iNextOld$1$ph = $448;$iOverflow$1$ph = $453;$isDivider$0$ph = $434;$j$7$ph = $438;$nOverflow$1$ph = $447;$pOld5$1$ph = $440;
      }
      $454 = ($i$1137|0)==($iOverflow$1$ph|0);
      if ($454) {
       $455 = (($nOverflow$1$ph) + -1)|0;
       $456 = ($455|0)>(0);
       $457 = $456&1;
       $$iOverflow$1 = (($457) + ($i$1137))|0;
       $iOverflow$3 = $$iOverflow$1;$isDivider$1 = 1;$nOverflow$3 = $455;
      } else {
       $iOverflow$3 = $iOverflow$1$ph;$isDivider$1 = $isDivider$0;$nOverflow$3 = $nOverflow$1$ph;
      }
      $458 = (($cntNew) + ($k$235<<2)|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = ($i$1137|0)==($459|0);
      if ($460) {
       $461 = (($k$235) + 1)|0;
       $462 = (($apNew) + ($461<<2)|0);
       $463 = HEAP32[$462>>2]|0;
       if ($433) {
        $k$4 = $461;$pNew4$2 = $463;
       } else {
        $k$3 = $461;$pNew4$1 = $463;
        label = 112;
       }
      } else {
       $k$3 = $k$235;$pNew4$1 = $pNew4$039;
       label = 112;
      }
      do {
       if ((label|0) == 112) {
        label = 0;
        $464 = ($isDivider$1|0)==(0);
        if ($464) {
         $465 = (($pOld5$1) + 72|0);
         $466 = HEAP32[$465>>2]|0;
         $467 = (($pNew4$1) + 72|0);
         $468 = HEAP32[$467>>2]|0;
         $469 = ($466|0)==($468|0);
         if ($469) {
          $k$4 = $k$3;$pNew4$2 = $pNew4$1;
          break;
         }
        }
        if ($435) {
         $470 = (($139) + ($i$1137<<2)|0);
         $471 = HEAP32[$470>>2]|0;
         $472 = (_sqlite3Get4byte($471)|0);
         $473 = (($pNew4$1) + 72|0);
         $474 = HEAP32[$473>>2]|0;
         _ptrmapPut($1,$472,5,$474,$rc);
        }
        $475 = (($141) + ($i$1137<<1)|0);
        $476 = HEAP16[$475>>1]|0;
        $477 = (($pNew4$1) + 10|0);
        $478 = HEAP16[$477>>1]|0;
        $479 = ($476&65535)>($478&65535);
        if (!($479)) {
         $k$4 = $k$3;$pNew4$2 = $pNew4$1;
         break;
        }
        $480 = (($139) + ($i$1137<<2)|0);
        $481 = HEAP32[$480>>2]|0;
        _ptrmapPutOvflPtr($pNew4$1,$481,$rc);
        $k$4 = $k$3;$pNew4$2 = $pNew4$1;
       }
      } while(0);
      $482 = (($i$1137) + 1)|0;
      $exitcond131 = ($482|0)==($nCell$0$lcssa162164|0);
      if ($exitcond131) {
       break;
      } else {
       $i$1137 = $482;$iNextOld$042 = $iNextOld$1;$iOverflow$043 = $iOverflow$3;$j$636 = $j$7;$k$235 = $k$4;$nOverflow$041 = $nOverflow$3;$pNew4$039 = $pNew4$2;$pOld5$040 = $pOld5$1;
      }
     }
    }
    $$not = ($148<<16>>16)!=(0);
    $$not166 = $346 ^ 1;
    $brmerge = $$not | $$not166;
    if ($brmerge) {
     $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
    } else {
     $i$1222 = 0;
     while(1) {
      $483 = (($apNew) + ($i$1222<<2)|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = (($484) + 56|0);
      $486 = HEAP32[$485>>2]|0;
      $487 = (($486) + 8|0);
      $488 = (_sqlite3Get4byte($487)|0);
      $489 = (($484) + 72|0);
      $490 = HEAP32[$489>>2]|0;
      _ptrmapPut($1,$488,5,$490,$rc);
      $491 = (($i$1222) + 1)|0;
      $exitcond122 = ($491|0)==($nNew$0$lcssa|0);
      if ($exitcond122) {
       $apCell$0 = $139;$nNew$2 = $nNew$0$lcssa;
       break;
      } else {
       $i$1222 = $491;
      }
     }
    }
   }
  } else {
   $i$1$lcssa = $i$0;
   label = 13;
  }
 } while(0);
 if ((label|0) == 13) {
  $57 = $i$1$lcssa << 2;
  $58 = (($57) + 4)|0;
  _memset(($apOld|0),0,($58|0))|0;
  $apCell$0 = 0;$nNew$2 = 0;
 }
 _sqlite3ScratchFree($apCell$0);
 $492 = ($i$0|0)>(-1);
 if ($492) {
  $i$1318 = 0;
  while(1) {
   $494 = (($apOld) + ($i$1318<<2)|0);
   $495 = HEAP32[$494>>2]|0;
   _releasePage($495);
   $496 = (($i$1318) + 1)|0;
   $497 = ($496|0)<($17|0);
   if ($497) {
    $i$1318 = $496;
   } else {
    break;
   }
  }
 }
 $493 = ($nNew$2|0)>(0);
 if ($493) {
  $i$1417 = 0;
  while(1) {
   $498 = (($apNew) + ($i$1417<<2)|0);
   $499 = HEAP32[$498>>2]|0;
   _releasePage($499);
   $500 = (($i$1417) + 1)|0;
   $exitcond = ($500|0)==($nNew$2|0);
   if ($exitcond) {
    break;
   } else {
    $i$1417 = $500;
   }
  }
 }
 $501 = HEAP32[$rc>>2]|0;
 $$0 = $501;
 STACKTOP = sp;return ($$0|0);
}
function _findOverflowCell($pPage,$iCell) {
 $pPage = $pPage|0;
 $iCell = $iCell|0;
 var $$0 = 0, $$01$ph = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $$01$ph = $iCell;$i$0$in$ph = $2;
 L1: while(1) {
  $i$0$in = $i$0$in$ph;
  while(1) {
   $i$0 = (($i$0$in) + -1)|0;
   $3 = ($i$0$in|0)>(0);
   if (!($3)) {
    label = 7;
    break L1;
   }
   $4 = ((($pPage) + ($i$0<<1)|0) + 20|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = ($6|0)>($$01$ph|0);
   if ($7) {
    $i$0$in = $i$0;
   } else {
    break;
   }
  }
  $8 = ($6|0)==($$01$ph|0);
  $9 = (($$01$ph) + -1)|0;
  if ($8) {
   label = 6;
   break;
  } else {
   $$01$ph = $9;$i$0$in$ph = $i$0;
  }
 }
 if ((label|0) == 6) {
  $10 = ((($pPage) + ($i$0<<2)|0) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 7) {
  $12 = (($pPage) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($pPage) + 18|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $$01$ph << 1;
  $18 = (($pPage) + 64|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 8;
  $$sum2 = $17 | 1;
  $24 = (($19) + ($$sum2)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  $28 = $27 & $16;
  $29 = (($13) + ($28)|0);
  $$0 = $29;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _assemblePage($pPage,$nCell,$apCell,$aSize) {
 $pPage = $pPage|0;
 $nCell = $nCell|0;
 $apCell = $apCell|0;
 $aSize = $aSize|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cellbody$0$lcssa = 0, $cellbody$05 = 0, $i$07 = 0, $i$07$in = 0, $pCellptr$06 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($pPage) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $nCell << 1;
 $10 = ($nCell|0)>(0);
 if ($10) {
  $11 = (($pPage) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9)|0);
  $cellbody$05 = $8;$i$07$in = $nCell;$pCellptr$06 = $13;
  while(1) {
   $i$07 = (($i$07$in) + -1)|0;
   $14 = (($aSize) + ($i$07<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = (($pCellptr$06) + -2|0);
   $17 = $15&65535;
   $18 = (($cellbody$05) - ($17))|0;
   $19 = $18 >>> 8;
   $20 = $19&255;
   HEAP8[$16>>0] = $20;
   $21 = $18&255;
   $22 = (($pCellptr$06) + -1|0);
   HEAP8[$22>>0] = $21;
   $23 = (($1) + ($18)|0);
   $24 = (($apCell) + ($i$07<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   _memcpy(($23|0),($25|0),($17|0))|0;
   $26 = ($i$07|0)>(0);
   if ($26) {
    $cellbody$05 = $18;$i$07$in = $i$07;$pCellptr$06 = $16;
   } else {
    $cellbody$0$lcssa = $18;
    break;
   }
  }
 } else {
  $cellbody$0$lcssa = $8;
 }
 $27 = $nCell >>> 8;
 $28 = $27&255;
 $29 = (($4) + 3)|0;
 $30 = (($1) + ($29)|0);
 HEAP8[$30>>0] = $28;
 $31 = $nCell&255;
 $$sum = (($4) + 4)|0;
 $32 = (($1) + ($$sum)|0);
 HEAP8[$32>>0] = $31;
 $33 = $cellbody$0$lcssa >>> 8;
 $34 = $33&255;
 $35 = (($4) + 5)|0;
 $36 = (($1) + ($35)|0);
 HEAP8[$36>>0] = $34;
 $37 = $cellbody$0$lcssa&255;
 $$sum1 = (($4) + 6)|0;
 $38 = (($1) + ($$sum1)|0);
 HEAP8[$38>>0] = $37;
 $39 = (($pPage) + 14|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $sum = (($8) + ($9))|0;
 $42 = (($cellbody$0$lcssa) - ($sum))|0;
 $43 = (($42) + ($41))|0;
 $44 = $43&65535;
 HEAP16[$39>>1] = $44;
 $45 = $nCell&65535;
 $46 = (($pPage) + 16|0);
 HEAP16[$46>>1] = $45;
 STACKTOP = sp;return;
}
function _copyNodeContent($pFrom,$pTo,$pRC) {
 $pFrom = $pFrom|0;
 $pTo = $pTo|0;
 $pRC = $pRC|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pRC>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($pFrom) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($pFrom) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pTo) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($pFrom) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($pTo) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 $14 = $13 ? 100 : 0;
 $15 = (($10) + 5)|0;
 $16 = (($5) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $$sum = (($10) + 6)|0;
 $20 = (($5) + ($$sum)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $19 | $22;
 $24 = (($7) + ($23)|0);
 $25 = (($5) + ($23)|0);
 $26 = (($3) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) - ($23))|0;
 _memcpy(($24|0),($25|0),($28|0))|0;
 $29 = (($7) + ($14)|0);
 $30 = (($5) + ($10)|0);
 $31 = (($pFrom) + 12|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($pFrom) + 16|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = $36 << 1;
 $38 = (($37) + ($33))|0;
 _memcpy(($29|0),($30|0),($38|0))|0;
 HEAP8[$pTo>>0] = 0;
 $39 = (_btreeInitPage($pTo)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  HEAP32[$pRC>>2] = $39;
  STACKTOP = sp;return;
 }
 $41 = (($3) + 17|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  STACKTOP = sp;return;
 }
 $44 = (_setChildPtrmaps($pTo)|0);
 HEAP32[$pRC>>2] = $44;
 STACKTOP = sp;return;
}
function _allocateSpace($pPage,$nByte,$pIdx) {
 $pPage = $pPage|0;
 $nByte = $nByte|0;
 $pIdx = $pIdx|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0, $top$0 = 0, $top$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($pPage) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($pPage) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($2) + 7)|0;
 $10 = (($4) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($pPage) + 12|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($pPage) + 16|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = $18 << 1;
 $20 = (($19) + ($15))|0;
 $21 = (($2) + 5)|0;
 $22 = (($4) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $$sum = (($2) + 6)|0;
 $26 = (($4) + ($$sum)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = (($29) + 65535)|0;
 $31 = $30 & 65535;
 $32 = (($31) + 1)|0;
 $33 = ($20|0)>($32|0);
 if ($33) {
  _sqlite3CorruptError(52031);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ($11&255)>(59);
 L5: do {
  if ($34) {
   $35 = (_defragmentPage($pPage)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = HEAP8[$22>>0]|0;
    $38 = $37&255;
    $39 = $38 << 8;
    $40 = HEAP8[$26>>0]|0;
    $41 = $40&255;
    $42 = $39 | $41;
    $43 = (($42) + 65535)|0;
    $44 = $43 & 65535;
    $45 = (($44) + 1)|0;
    $top$0 = $45;
    break;
   } else {
    $$0 = $35;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $46 = ($20|0)<($31|0);
   if ($46) {
    $47 = (($2) + 1)|0;
    $48 = (($8) + -4)|0;
    $addr$0 = $47;
    while(1) {
     $49 = (($4) + ($addr$0)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50&255;
     $52 = $51 << 8;
     $$sum1 = (($addr$0) + 1)|0;
     $53 = (($4) + ($$sum1)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = $52 | $55;
     $57 = ($56|0)==(0);
     if ($57) {
      $top$0 = $32;
      break L5;
     }
     $58 = ($56|0)>($48|0);
     if ($58) {
      label = 11;
      break;
     }
     $59 = (($addr$0) + 4)|0;
     $60 = ($56|0)<($59|0);
     if ($60) {
      label = 11;
      break;
     }
     $61 = (($56) + 2)|0;
     $62 = (($4) + ($61)|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $64 << 8;
     $$sum2 = (($56) + 3)|0;
     $66 = (($4) + ($$sum2)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = $65 | $68;
     $70 = ($69|0)<($nByte|0);
     if ($70) {
      $addr$0 = $56;
     } else {
      break;
     }
    }
    if ((label|0) == 11) {
     _sqlite3CorruptError(52050);
     $$0 = 11;
     STACKTOP = sp;return ($$0|0);
    }
    $71 = (($69) - ($nByte))|0;
    $72 = ($71|0)<(4);
    do {
     if ($72) {
      $73 = (($4) + ($56)|0);
      $74 = HEAPU8[$73>>0]|(HEAPU8[$73+1>>0]<<8);
      HEAP8[$49>>0]=$74&255;HEAP8[$49+1>>0]=$74>>8;
      $75 = (($71) + ($12))|0;
      $76 = $75&255;
      HEAP8[$10>>0] = $76;
     } else {
      $77 = (($69) + ($56))|0;
      $78 = ($77|0)>($8|0);
      if (!($78)) {
       $79 = $71 >>> 8;
       $80 = $79&255;
       HEAP8[$62>>0] = $80;
       $81 = $71&255;
       HEAP8[$66>>0] = $81;
       break;
      }
      _sqlite3CorruptError(52063);
      $$0 = 11;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $82 = (($71) + ($56))|0;
    HEAP32[$pIdx>>2] = $82;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $top$0 = $32;
   }
  }
 } while(0);
 $83 = (($nByte) + 2)|0;
 $84 = (($83) + ($20))|0;
 $85 = ($84|0)>($top$0|0);
 do {
  if ($85) {
   $86 = (_defragmentPage($pPage)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $88 = HEAP8[$22>>0]|0;
    $89 = $88&255;
    $90 = $89 << 8;
    $91 = HEAP8[$26>>0]|0;
    $92 = $91&255;
    $93 = $90 | $92;
    $94 = (($93) + 65535)|0;
    $95 = $94 & 65535;
    $96 = (($95) + 1)|0;
    $top$1 = $96;
    break;
   } else {
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $top$1 = $top$0;
  }
 } while(0);
 $97 = (($top$1) - ($nByte))|0;
 $98 = $97 >>> 8;
 $99 = $98&255;
 HEAP8[$22>>0] = $99;
 $100 = $97&255;
 HEAP8[$26>>0] = $100;
 HEAP32[$pIdx>>2] = $97;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _defragmentPage($pPage) {
 $pPage = $pPage|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cbrk$0$lcssa = 0, $cbrk$04 = 0;
 var $i$05 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $$idx = (($2) + 200|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = (_sqlite3PagerTempSpace($$idx$val)|0);
 $4 = (($pPage) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($pPage) + 5|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($pPage) + 12|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($pPage) + 16|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = (($1) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($8) + 5)|0;
 $18 = (($5) + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $$sum = (($8) + 6)|0;
 $22 = (($5) + ($$sum)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $21 | $24;
 $26 = (($3) + ($25)|0);
 $27 = (($5) + ($25)|0);
 $28 = (($16) - ($25))|0;
 _memcpy(($26|0),($27|0),($28|0))|0;
 $29 = $14 << 1;
 $30 = (($29) + ($11))|0;
 $31 = (($16) + -4)|0;
 $32 = ($13<<16>>16)==(0);
 L1: do {
  if ($32) {
   $cbrk$0$lcssa = $16;
  } else {
   $cbrk$04 = $16;$i$05 = 0;
   while(1) {
    $33 = $i$05 << 1;
    $34 = (($33) + ($11))|0;
    $35 = (($5) + ($34)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 << 8;
    $$sum1 = (($34) + 1)|0;
    $39 = (($5) + ($$sum1)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $38 | $41;
    $43 = ($42|0)<($30|0);
    $44 = ($42|0)>($31|0);
    $or$cond = $43 | $44;
    if ($or$cond) {
     label = 3;
     break;
    }
    $45 = (($3) + ($42)|0);
    $46 = (_cellSizePtr($pPage,$45)|0);
    $47 = $46&65535;
    $48 = (($cbrk$04) - ($47))|0;
    $49 = ($48|0)<($30|0);
    if ($49) {
     label = 6;
     break;
    }
    $50 = (($47) + ($42))|0;
    $51 = ($50|0)>($16|0);
    if ($51) {
     label = 6;
     break;
    }
    $52 = (($5) + ($48)|0);
    _memcpy(($52|0),($45|0),($47|0))|0;
    $53 = $48 >>> 8;
    $54 = $53&255;
    HEAP8[$35>>0] = $54;
    $55 = $48&255;
    HEAP8[$39>>0] = $55;
    $56 = (($i$05) + 1)|0;
    $57 = ($56|0)<($14|0);
    if ($57) {
     $cbrk$04 = $48;$i$05 = $56;
    } else {
     $cbrk$0$lcssa = $48;
     break L1;
    }
   }
   if ((label|0) == 3) {
    _sqlite3CorruptError(51962);
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 6) {
    _sqlite3CorruptError(51974);
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $58 = $cbrk$0$lcssa >>> 8;
 $59 = $58&255;
 HEAP8[$18>>0] = $59;
 $60 = $cbrk$0$lcssa&255;
 HEAP8[$22>>0] = $60;
 $61 = (($8) + 1)|0;
 $62 = (($5) + ($61)|0);
 HEAP8[$62>>0] = 0;
 $63 = (($8) + 2)|0;
 $64 = (($5) + ($63)|0);
 HEAP8[$64>>0] = 0;
 $65 = (($8) + 7)|0;
 $66 = (($5) + ($65)|0);
 HEAP8[$66>>0] = 0;
 $67 = (($5) + ($30)|0);
 $68 = (($cbrk$0$lcssa) - ($30))|0;
 _memset(($67|0),0,($68|0))|0;
 $69 = (($pPage) + 14|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70&65535;
 $72 = ($68|0)==($71|0);
 if ($72) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _sqlite3CorruptError(51991);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerTempSpace($pPager$0$53$val) {
 $pPager$0$53$val = $pPager$0$53$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPager$0$53$val|0);
}
function _freeSpace($pPage,$start,$size) {
 $pPage = $pPage|0;
 $start = $start|0;
 $size = $size|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum2 = 0, $$sum3 = 0, $$sum423 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPage) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pPage) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 22|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 4;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  $14 = $3;
 } else {
  $8 = (($1) + ($start)|0);
  _memset(($8|0),0,($size|0))|0;
  $$pre = HEAP32[$2>>2]|0;
  $14 = $$pre;
 }
 $9 = (($pPage) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 $13 = (($14) + 36|0);
 $15 = HEAP32[$13>>2]|0;
 $16 = (($15) + -4)|0;
 $addr$0 = $12;
 while(1) {
  $17 = (($1) + ($addr$0)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $$sum = (($addr$0) + 1)|0;
  $21 = (($1) + ($$sum)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $20 | $23;
  $25 = ($24|0)<($start|0);
  $26 = ($24|0)!=(0);
  $$ = $25 & $26;
  if (!($$)) {
   break;
  }
  $27 = (($addr$0) + 4)|0;
  $28 = ($24|0)<($27|0);
  if ($28) {
   label = 6;
   break;
  } else {
   $addr$0 = $24;
  }
 }
 if ((label|0) == 6) {
  _sqlite3CorruptError(52141);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ($24|0)>($16|0);
 if ($29) {
  _sqlite3CorruptError(52146);
  $$0 = 11;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = $start >>> 8;
 $31 = $30&255;
 HEAP8[$17>>0] = $31;
 $32 = $start&255;
 HEAP8[$21>>0] = $32;
 $33 = (($1) + ($start)|0);
 HEAP8[$33>>0] = $18;
 $$sum2 = (($start) + 1)|0;
 $34 = (($1) + ($$sum2)|0);
 HEAP8[$34>>0] = $22;
 $35 = $size >>> 8;
 $36 = $35&255;
 $37 = (($start) + 2)|0;
 $38 = (($1) + ($37)|0);
 HEAP8[$38>>0] = $36;
 $39 = $size&255;
 $$sum3 = (($start) + 3)|0;
 $40 = (($1) + ($$sum3)|0);
 HEAP8[$40>>0] = $39;
 $41 = (($pPage) + 14|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = (($43) + ($size))|0;
 $45 = $44&65535;
 HEAP16[$41>>1] = $45;
 $46 = (($1) + ($12)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 8;
 $$sum423 = (($11) + 2)|0;
 $50 = (($1) + ($$sum423)|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $49 | $52;
 $54 = ($53|0)==(0);
 L15: do {
  if (!($54)) {
   $55 = (($11) + 7)|0;
   $56 = (($1) + ($55)|0);
   $106 = $46;$110 = $50;$143 = $53;
   L17: while(1) {
    $60 = $143;
    while(1) {
     $59 = (($1) + ($60)|0);
     $61 = HEAP8[$59>>0]|0;
     $62 = $61&255;
     $63 = $62 << 8;
     $$sum8 = (($60) + 1)|0;
     $64 = (($1) + ($$sum8)|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65&255;
     $58 = $63 | $66;
     $67 = (($60) + 2)|0;
     $68 = (($1) + ($67)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $70 << 8;
     $$sum9 = (($60) + 3)|0;
     $72 = (($1) + ($$sum9)|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = $73&255;
     $75 = $71 | $74;
     $76 = (($75) + ($60))|0;
     $77 = (($76) + 3)|0;
     $78 = ($77|0)>=($58|0);
     $79 = ($58|0)!=(0);
     $or$cond = $78 & $79;
     if (!($or$cond)) {
      break;
     }
     $80 = (($58) - ($76))|0;
     $81 = ($80|0)<(0);
     if ($81) {
      break L17;
     }
     $82 = HEAP8[$56>>0]|0;
     $83 = $82&255;
     $84 = ($80|0)>($83|0);
     if ($84) {
      break L17;
     }
     $85 = (($83) - ($80))|0;
     $86 = $85&255;
     HEAP8[$56>>0] = $86;
     $87 = (($1) + ($58)|0);
     $88 = HEAP8[$87>>0]|0;
     $$sum10 = (($58) + 1)|0;
     $89 = (($1) + ($$sum10)|0);
     $90 = HEAP8[$89>>0]|0;
     HEAP8[$59>>0] = $88;
     HEAP8[$64>>0] = $90;
     $91 = (($58) + 2)|0;
     $92 = (($1) + ($91)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = $94 << 8;
     $$sum11 = (($58) + 3)|0;
     $96 = (($1) + ($$sum11)|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = $95 | $98;
     $100 = (($58) - ($60))|0;
     $101 = (($100) + ($99))|0;
     $102 = $101 >>> 8;
     $103 = $102&255;
     HEAP8[$68>>0] = $103;
     $104 = $101&255;
     HEAP8[$72>>0] = $104;
     $105 = HEAP8[$106>>0]|0;
     $107 = $105&255;
     $108 = $107 << 8;
     $109 = HEAP8[$110>>0]|0;
     $111 = $109&255;
     $112 = $108 | $111;
     $113 = ($112|0)==(0);
     if ($113) {
      break L15;
     } else {
      $60 = $112;
     }
    }
    $57 = ($58|0)==(0);
    if ($57) {
     break L15;
    } else {
     $106 = $59;$110 = $64;$143 = $58;
    }
   }
   _sqlite3CorruptError(52165);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $114 = HEAP8[$46>>0]|0;
 $115 = $114&255;
 $116 = (($11) + 5)|0;
 $117 = (($1) + ($116)|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = ($114<<24>>24)==($118<<24>>24);
 if (!($119)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $120 = HEAP8[$50>>0]|0;
 $121 = (($11) + 6)|0;
 $122 = (($1) + ($121)|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = ($120<<24>>24)==($123<<24>>24);
 if (!($124)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $125 = $115 << 8;
 $126 = $120&255;
 $127 = $126 | $125;
 $128 = (($1) + ($127)|0);
 $129 = HEAPU8[$128>>0]|(HEAPU8[$128+1>>0]<<8);
 HEAP8[$46>>0]=$129&255;HEAP8[$46+1>>0]=$129>>8;
 $130 = (($127) + 2)|0;
 $131 = (($1) + ($130)|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = $132&255;
 $134 = $133 << 8;
 $$sum7 = (($127) + 3)|0;
 $135 = (($1) + ($$sum7)|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&255;
 $138 = $134 | $137;
 $139 = (($138) + ($127))|0;
 $140 = $139 >>> 8;
 $141 = $140&255;
 HEAP8[$117>>0] = $141;
 $142 = $139&255;
 HEAP8[$122>>0] = $142;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fillInCell($pPage,$pCell,$pKey,$0,$1,$pData,$nData,$nZero,$pnSize) {
 $pPage = $pPage|0;
 $pCell = $pCell|0;
 $pKey = $pKey|0;
 $0 = $0|0;
 $1 = $1|0;
 $pData = $pData|0;
 $nData = $nData|0;
 $nZero = $nZero|0;
 $pnSize = $pnSize|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$1$ = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $info = 0, $n$2 = 0, $nHeader$1 = 0, $nPayload$0 = 0, $nPayload$15 = 0;
 var $nSrc$0 = 0, $nSrc$1$spaceLeft$1$nPayload$1 = 0, $nSrc$17 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond3 = 0, $pData$ = 0, $pOvfl = 0, $pPayload$012 = 0, $pPayload$1 = 0, $pPrior$011 = 0, $pPrior$1 = 0, $pSrc$0 = 0, $pSrc$16 = 0, $pToRelease$0$lcssa = 0, $pToRelease$09 = 0, $pToRelease$1 = 0, $pgnoOvfl = 0, $phitmp = 0, $rc = 0;
 var $spaceLeft$08 = 0, $spaceLeft$1 = 0, $spaceLeft$1$nPayload$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $rc = sp + 40|0;
 $pOvfl = sp + 36|0;
 $pgnoOvfl = sp + 32|0;
 $info = sp;
 HEAP32[$pOvfl>>2] = 0;
 $2 = (($pPage) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$pgnoOvfl>>2] = 0;
 $4 = (($pPage) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $$ = $6 ? 4 : 0;
 $7 = (($pPage) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $$01 = 0;$$02 = 0;$nHeader$1 = $$;
 } else {
  $10 = (($nZero) + ($nData))|0;
  $11 = ($10>>>0)<(128);
  if ($11) {
   $12 = $10&255;
   $13 = (($pCell) + ($$)|0);
   HEAP8[$13>>0] = $12;
   $17 = 1;
  } else {
   $14 = (($pCell) + ($$)|0);
   $15 = (_sqlite3PutVarint32($14,$10)|0);
   $phitmp = $15 & 255;
   $17 = $phitmp;
  }
  $16 = (($17) + ($$))|0;
  $$01 = $nData;$$02 = $nZero;$nHeader$1 = $16;
 }
 $18 = (($pCell) + ($nHeader$1)|0);
 $19 = (_sqlite3PutVarint($18,$0,$1)|0);
 $20 = (($19) + ($nHeader$1))|0;
 _btreeParseCellPtr($pPage,$pCell,$info);
 $21 = (($$01) + ($$02))|0;
 $22 = (($pPage) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 do {
  if ($24) {
   $25 = ($1|0)>(0);
   $26 = ($1|0)==(0);
   $27 = ($0>>>0)>(2147483647);
   $28 = $26 & $27;
   $29 = $25 | $28;
   $30 = ($pKey|0)==(0|0);
   $or$cond = $29 | $30;
   if (!($or$cond)) {
    $31 = (($21) + ($0))|0;
    $$1 = $$01;$nPayload$0 = $31;$nSrc$0 = $0;$pSrc$0 = $pKey;
    break;
   }
   _sqlite3CorruptError(56349);
   $$0 = 11;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$1 = 0;$nPayload$0 = $21;$nSrc$0 = $$01;$pSrc$0 = $pData;
  }
 } while(0);
 $32 = (($info) + 26|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 HEAP32[$pnSize>>2] = $34;
 $35 = ($nPayload$0|0)>(0);
 L15: do {
  if ($35) {
   $36 = (($info) + 24|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = (($info) + 22|0);
   $39 = $37&65535;
   $40 = HEAP16[$38>>1]|0;
   $41 = (($pCell) + ($39)|0);
   $42 = (($pCell) + ($20)|0);
   $43 = $40&65535;
   $44 = (($3) + 17|0);
   $45 = (($3) + 36|0);
   $46 = (($3) + 32|0);
   $nPayload$15 = $nPayload$0;$nSrc$17 = $nSrc$0;$pPayload$012 = $42;$pPrior$011 = $41;$pSrc$16 = $pSrc$0;$pToRelease$09 = 0;$spaceLeft$08 = $43;
   while(1) {
    $47 = ($spaceLeft$08|0)==(0);
    if ($47) {
     $48 = HEAP32[$pgnoOvfl>>2]|0;
     $49 = HEAP8[$44>>0]|0;
     $50 = ($49<<24>>24)==(0);
     if ($50) {
      $59 = $48;
     } else {
      $51 = HEAP32[1648>>2]|0;
      $52 = HEAP32[$46>>2]|0;
      $53 = (($51>>>0) / ($52>>>0))&-1;
      $55 = $48;
      while(1) {
       $54 = (($55) + 1)|0;
       $56 = (_ptrmapPageno($3,$54)|0);
       $57 = ($56|0)==($54|0);
       $58 = ($55|0)==($53|0);
       $or$cond13 = $57 | $58;
       if ($or$cond13) {
        $55 = $54;
       } else {
        break;
       }
      }
      HEAP32[$pgnoOvfl>>2] = $54;
      $59 = $54;
     }
     $60 = (_allocateBtreePage($3,$pOvfl,$pgnoOvfl,$59,0)|0);
     HEAP32[$rc>>2] = $60;
     $61 = HEAP8[$44>>0]|0;
     $62 = ($61<<24>>24)!=(0);
     $63 = ($60|0)==(0);
     $or$cond3 = $62 & $63;
     if ($or$cond3) {
      $64 = ($48|0)!=(0);
      $65 = $64 ? 4 : 3;
      $66 = HEAP32[$pgnoOvfl>>2]|0;
      _ptrmapPut($3,$66,$65,$48,$rc);
      $67 = HEAP32[$rc>>2]|0;
      $68 = ($67|0)==(0);
      if ($68) {
       $71 = $66;
      } else {
       label = 19;
       break;
      }
     } else {
      $70 = ($60|0)==(0);
      if (!($70)) {
       $89 = $60;
       break;
      }
      $$pre = HEAP32[$pgnoOvfl>>2]|0;
      $71 = $$pre;
     }
     _sqlite3Put4byte($pPrior$011,$71);
     _releasePage($pToRelease$09);
     $72 = HEAP32[$pOvfl>>2]|0;
     $73 = (($72) + 56|0);
     $74 = HEAP32[$73>>2]|0;
     _sqlite3Put4byte($74,0);
     $75 = HEAP32[$73>>2]|0;
     $76 = (($75) + 4|0);
     $77 = HEAP32[$45>>2]|0;
     $78 = (($77) + -4)|0;
     $pPayload$1 = $76;$pPrior$1 = $74;$pToRelease$1 = $72;$spaceLeft$1 = $78;
    } else {
     $pPayload$1 = $pPayload$012;$pPrior$1 = $pPrior$011;$pToRelease$1 = $pToRelease$09;$spaceLeft$1 = $spaceLeft$08;
    }
    $79 = ($nPayload$15|0)>($spaceLeft$1|0);
    $spaceLeft$1$nPayload$1 = $79 ? $spaceLeft$1 : $nPayload$15;
    $80 = ($nSrc$17|0)>(0);
    if ($80) {
     $81 = ($spaceLeft$1$nPayload$1|0)>($nSrc$17|0);
     $nSrc$1$spaceLeft$1$nPayload$1 = $81 ? $nSrc$17 : $spaceLeft$1$nPayload$1;
     _memcpy(($pPayload$1|0),($pSrc$16|0),($nSrc$1$spaceLeft$1$nPayload$1|0))|0;
     $n$2 = $nSrc$1$spaceLeft$1$nPayload$1;
    } else {
     _memset(($pPayload$1|0),0,($spaceLeft$1$nPayload$1|0))|0;
     $n$2 = $spaceLeft$1$nPayload$1;
    }
    $82 = (($nPayload$15) - ($n$2))|0;
    $83 = (($pPayload$1) + ($n$2)|0);
    $84 = (($pSrc$16) + ($n$2)|0);
    $85 = (($nSrc$17) - ($n$2))|0;
    $86 = (($spaceLeft$1) - ($n$2))|0;
    $87 = ($nSrc$17|0)==($n$2|0);
    $pData$ = $87 ? $pData : $84;
    $$1$ = $87 ? $$1 : $85;
    $88 = ($82|0)>(0);
    if ($88) {
     $nPayload$15 = $82;$nSrc$17 = $$1$;$pPayload$012 = $83;$pPrior$011 = $pPrior$1;$pSrc$16 = $pData$;$pToRelease$09 = $pToRelease$1;$spaceLeft$08 = $86;
    } else {
     $pToRelease$0$lcssa = $pToRelease$1;
     break L15;
    }
   }
   if ((label|0) == 19) {
    $69 = HEAP32[$pOvfl>>2]|0;
    _releasePage($69);
    $89 = $67;
   }
   _releasePage($pToRelease$09);
   $$0 = $89;
   STACKTOP = sp;return ($$0|0);
  } else {
   $pToRelease$0$lcssa = 0;
  }
 } while(0);
 _releasePage($pToRelease$0$lcssa);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VdbeSorterClose($db,$pCsr) {
 $db = $db|0;
 $pCsr = $pCsr|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCsr) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (($1) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $10 = $4;$i$01 = 0;
   while(1) {
    $9 = (($10) + (($i$01*48)|0)|0);
    _vdbeSorterIterZero($db,$9);
    $11 = (($i$01) + 1)|0;
    $12 = HEAP32[$6>>2]|0;
    $13 = ($11|0)<($12|0);
    $14 = HEAP32[$3>>2]|0;
    if ($13) {
     $10 = $14;$i$01 = $11;
    } else {
     $$lcssa = $14;
     break;
    }
   }
  } else {
   $$lcssa = $4;
  }
  _sqlite3DbFree($db,$$lcssa);
 }
 $15 = (($1) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  _sqlite3OsCloseFree($16);
 }
 $18 = (($1) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 _vdbeSorterRecordFree($db,$19);
 $20 = (($1) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 _sqlite3DbFree($db,$21);
 _sqlite3DbFree($db,$1);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _btreeCreateTable($p,$piTable,$createTabFlags) {
 $p = $p|0;
 $piTable = $piTable|0;
 $createTabFlags = $createTabFlags|0;
 var $$ = 0, $$0 = 0, $$off = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eType = 0, $iPtrPage = 0, $or$cond = 0;
 var $p$idx$val = 0, $p$idx1$val = 0, $p$idx2$val = 0, $p$idx3$val = 0, $pPageMove = 0, $pRoot = 0, $pgnoMove = 0, $pgnoRoot = 0, $pgnoRoot$promoted = 0, $rc = 0, $storemerge = 0, $storemerge$in4 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pRoot = sp + 20|0;
 $pgnoRoot = sp + 16|0;
 $rc = sp + 12|0;
 $pgnoMove = sp + 8|0;
 $pPageMove = sp + 4|0;
 $eType = sp + 24|0;
 $iPtrPage = sp;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 17|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $43 = (_allocateBtreePage($1,$pRoot,$pgnoRoot,1,0)|0);
   HEAP32[$rc>>2] = $43;
   $44 = ($43|0)==(0);
   if ($44) {
    $$pre = HEAP32[$pRoot>>2]|0;
    $$pre6 = HEAP32[$pgnoRoot>>2]|0;
    $47 = $$pre;$50 = $$pre6;
    break;
   } else {
    $$0 = $43;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   _invalidateAllOverflowCache($1);
   $p$idx$val = HEAP32[$p>>2]|0;
   $p$idx1$val = HEAP32[$0>>2]|0;
   _sqlite3BtreeGetMeta($p$idx$val,$p$idx1$val,4,$pgnoRoot);
   $5 = HEAP32[1648>>2]|0;
   $6 = (($1) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5>>>0) / ($7>>>0))&-1;
   $pgnoRoot$promoted = HEAP32[$pgnoRoot>>2]|0;
   $storemerge$in4 = $pgnoRoot$promoted;
   while(1) {
    $storemerge = (($storemerge$in4) + 1)|0;
    $9 = (_ptrmapPageno($1,$storemerge)|0);
    $10 = ($storemerge|0)==($9|0);
    $11 = ($storemerge$in4|0)==($8|0);
    $or$cond = $10 | $11;
    if ($or$cond) {
     $storemerge$in4 = $storemerge;
    } else {
     break;
    }
   }
   HEAP32[$pgnoRoot>>2] = $storemerge;
   $12 = (_allocateBtreePage($1,$pPageMove,$pgnoMove,$storemerge,1)|0);
   HEAP32[$rc>>2] = $12;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $$0 = $12;
    STACKTOP = sp;return ($$0|0);
   }
   $14 = HEAP32[$pgnoMove>>2]|0;
   $15 = ($14|0)==($storemerge|0);
   do {
    if ($15) {
     $37 = HEAP32[$pPageMove>>2]|0;
     HEAP32[$pRoot>>2] = $37;
     $40 = $37;
    } else {
     HEAP8[$eType>>0] = 0;
     HEAP32[$iPtrPage>>2] = 0;
     $16 = (_saveAllCursors($1,0,0)|0);
     HEAP32[$rc>>2] = $16;
     $17 = HEAP32[$pPageMove>>2]|0;
     _releasePage($17);
     $18 = ($16|0)==(0);
     if (!($18)) {
      $$0 = $16;
      STACKTOP = sp;return ($$0|0);
     }
     $19 = (_btreeGetPage($1,$storemerge,$pRoot,0)|0);
     HEAP32[$rc>>2] = $19;
     $20 = ($19|0)==(0);
     if (!($20)) {
      $$0 = $19;
      STACKTOP = sp;return ($$0|0);
     }
     $21 = (_ptrmapGet($1,$storemerge,$eType,$iPtrPage)|0);
     HEAP32[$rc>>2] = $21;
     $22 = HEAP8[$eType>>0]|0;
     $$off = (($22) + -1)<<24>>24;
     $switch = ($$off&255)<(2);
     if ($switch) {
      _sqlite3CorruptError(58090);
      HEAP32[$rc>>2] = 11;
      $23 = HEAP32[$pRoot>>2]|0;
      $26 = $23;$51 = 11;
     } else {
      $24 = ($21|0)==(0);
      $25 = HEAP32[$pRoot>>2]|0;
      if ($24) {
       $27 = HEAP32[$iPtrPage>>2]|0;
       $28 = (_relocatePage($1,$25,$22,$27,$14,0)|0);
       HEAP32[$rc>>2] = $28;
       _releasePage($25);
       $29 = ($28|0)==(0);
       if (!($29)) {
        $$0 = $28;
        STACKTOP = sp;return ($$0|0);
       }
       $30 = (_btreeGetPage($1,$storemerge,$pRoot,0)|0);
       HEAP32[$rc>>2] = $30;
       $31 = ($30|0)==(0);
       if (!($31)) {
        $$0 = $30;
        STACKTOP = sp;return ($$0|0);
       }
       $32 = HEAP32[$pRoot>>2]|0;
       $33 = (($32) + 68|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (_sqlite3PagerWrite($34)|0);
       HEAP32[$rc>>2] = $35;
       $36 = ($35|0)==(0);
       if ($36) {
        $40 = $32;
        break;
       }
       _releasePage($32);
       $$0 = $35;
       STACKTOP = sp;return ($$0|0);
      } else {
       $26 = $25;$51 = $21;
      }
     }
     _releasePage($26);
     $$0 = $51;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   _ptrmapPut($1,$storemerge,1,0,$rc);
   $38 = HEAP32[$rc>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    _releasePage($40);
    $$0 = $38;
    STACKTOP = sp;return ($$0|0);
   }
   $p$idx2$val = HEAP32[$p>>2]|0;
   $p$idx3$val = HEAP32[$0>>2]|0;
   $41 = (_sqlite3BtreeUpdateMeta($p$idx2$val,$p$idx3$val,4,$storemerge)|0);
   HEAP32[$rc>>2] = $41;
   $42 = ($41|0)==(0);
   if ($42) {
    $47 = $40;$50 = $storemerge;
   } else {
    _releasePage($40);
    $$0 = $41;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $45 = $createTabFlags & 1;
 $46 = ($45|0)==(0);
 $$ = $46 ? 10 : 13;
 _zeroPage($47,$$);
 $48 = (($47) + 68|0);
 $49 = HEAP32[$48>>2]|0;
 _sqlite3PagerUnref($49);
 HEAP32[$piTable>>2] = $50;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _btreeCursor($p,$iTable,$wrFlag,$pKeyInfo,$pCur) {
 $p = $p|0;
 $iTable = $iTable|0;
 $wrFlag = $wrFlag|0;
 $pKeyInfo = $pKeyInfo|0;
 $pCur = $pCur|0;
 var $$0 = 0, $$01 = 0, $$iTable = 0, $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($wrFlag|0)==(0);
 if (!($2)) {
  $3 = (($1) + 22|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 & 1;
  $6 = ($5<<16>>16)==(0);
  if (!($6)) {
   $$0 = 8;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $7 = ($iTable|0)==(1);
 if ($7) {
  $$idx = (($1) + 44|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $8 = (_btreePagecount($$idx$val)|0);
  $not$ = ($8|0)!=(0);
  $$iTable = $not$&1;
  $$01 = $$iTable;
 } else {
  $$01 = $iTable;
 }
 $9 = (($pCur) + 24|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($pCur) + 86|0);
 HEAP16[$10>>1] = -1;
 $11 = (($pCur) + 16|0);
 HEAP32[$11>>2] = $pKeyInfo;
 HEAP32[$pCur>>2] = $p;
 $12 = (($pCur) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = $wrFlag&255;
 $14 = (($pCur) + 80|0);
 HEAP8[$14>>0] = $13;
 $15 = (($1) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($pCur) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0|0);
 if (!($18)) {
  $19 = (($16) + 12|0);
  HEAP32[$19>>2] = $pCur;
 }
 HEAP32[$15>>2] = $pCur;
 $20 = (($pCur) + 83|0);
 HEAP8[$20>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3BtreeCursorZero($p) {
 $p = $p|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$p+0|0; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$p+84>>1]=0|0;
 STACKTOP = sp;return;
}
function _sqlite3PagerOpenSavepoint($pPager,$nSavepoint) {
 $pPager = $pPager|0;
 $nSavepoint = $nSavepoint|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ii$01 = 0, $pPager$idx = 0, $pPager$idx$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($nSavepoint|0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPager) + 6|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($pPager) + 92|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($nSavepoint*48)|0;
 $9 = (_sqlite3Realloc($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($9) + (($1*48)|0)|0);
 $12 = (($nSavepoint) - ($1))|0;
 $13 = ($12*48)|0;
 _memset(($11|0),0,($13|0))|0;
 HEAP32[$6>>2] = $9;
 $14 = (($pPager) + 24|0);
 $15 = (($pPager) + 64|0);
 $16 = (($pPager) + 148|0);
 $17 = (($pPager) + 52|0);
 $pPager$idx = (($pPager) + 208|0);
 $18 = (($pPager) + 72|0);
 $ii$01 = $1;
 while(1) {
  $19 = HEAP32[$14>>2]|0;
  $20 = (($9) + (($ii$01*48)|0)|0);
  $21 = ((($9) + (($ii$01*48)|0)|0) + 20|0);
  HEAP32[$21>>2] = $19;
  $22 = HEAP32[$15>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 8;
  } else {
   $25 = $18;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)>(0);
   $32 = ($30|0)==(0);
   $33 = ($27>>>0)>(0);
   $34 = $32 & $33;
   $35 = $31 | $34;
   if ($35) {
    $36 = $20;
    $37 = $36;
    HEAP32[$37>>2] = $27;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $30;
   } else {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $40 = HEAP32[$16>>2]|0;
   $41 = $20;
   $42 = $41;
   HEAP32[$42>>2] = $40;
   $43 = (($41) + 4)|0;
   $44 = $43;
   HEAP32[$44>>2] = 0;
  }
  $45 = HEAP32[$17>>2]|0;
  $46 = ((($9) + (($ii$01*48)|0)|0) + 24|0);
  HEAP32[$46>>2] = $45;
  $47 = HEAP32[$14>>2]|0;
  $48 = (_sqlite3BitvecCreate($47)|0);
  $49 = ((($9) + (($ii$01*48)|0)|0) + 16|0);
  HEAP32[$49>>2] = $48;
  $50 = ($48|0)==(0|0);
  if ($50) {
   $$0 = 7;
   label = 13;
   break;
  }
  $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
  $51 = (_pagerUseWal($pPager$idx$val)|0);
  $52 = ($51|0)==(0);
  if (!($52)) {
   $53 = ((($9) + (($ii$01*48)|0)|0) + 28|0);
   _sqlite3WalSavepoint($pPager$idx$val,$53);
  }
  $54 = (($ii$01) + 1)|0;
  HEAP32[$0>>2] = $54;
  $55 = ($54|0)<($nSavepoint|0);
  if ($55) {
   $ii$01 = $54;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _sqlite3WalSavepoint($pWal,$aWalData) {
 $pWal = $pWal|0;
 $aWalData = $aWalData|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$aWalData>>2] = $1;
 $2 = (($pWal) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($aWalData) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (($pWal) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($aWalData) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($pWal) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($aWalData) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function _newDatabase($pBt) {
 $pBt = $pBt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pBt) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3PagerWrite($8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$6+0|0; src=34400+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $11 = (($pBt) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 8;
 $14 = $13&255;
 $15 = (($6) + 16|0);
 HEAP8[$15>>0] = $14;
 $16 = HEAP32[$11>>2]|0;
 $17 = $16 >>> 16;
 $18 = $17&255;
 $19 = (($6) + 17|0);
 HEAP8[$19>>0] = $18;
 $20 = (($6) + 18|0);
 HEAP8[$20>>0] = 1;
 $21 = (($6) + 19|0);
 HEAP8[$21>>0] = 1;
 $22 = HEAP32[$11>>2]|0;
 $23 = (($pBt) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) - ($24))|0;
 $26 = $25&255;
 $27 = (($6) + 20|0);
 HEAP8[$27>>0] = $26;
 $28 = (($6) + 21|0);
 HEAP8[$28>>0] = 64;
 $29 = (($6) + 22|0);
 HEAP8[$29>>0] = 32;
 $30 = (($6) + 23|0);
 HEAP8[$30>>0] = 32;
 $31 = (($6) + 24|0);
 dest=$31+0|0; stop=dest+76|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _zeroPage($4,13);
 $32 = (($pBt) + 22|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = $34 | 2;
 $36 = $35&65535;
 HEAP16[$32>>1] = $36;
 $37 = (($6) + 52|0);
 $38 = (($pBt) + 17|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 _sqlite3Put4byte($37,$40);
 $41 = (($6) + 64|0);
 $42 = (($pBt) + 18|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 _sqlite3Put4byte($41,$44);
 HEAP32[$0>>2] = 1;
 $45 = (($6) + 31|0);
 HEAP8[$45>>0] = 1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fetchPayload($pCur,$pAmt) {
 $pCur = $pCur|0;
 $pAmt = $pAmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 58|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $3 = (($pCur) + 32|0);
  $4 = (($pCur) + 86|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  $7 = ((($pCur) + ($6<<2)|0) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($pCur) + ($6<<1)|0) + 88|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  _btreeParseCell($8,$11,$3);
 }
 $12 = (($pCur) + 54|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 HEAP32[$pAmt>>2] = $14;
 $15 = (($pCur) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($pCur) + 52|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (($16) + ($19)|0);
 STACKTOP = sp;return ($20|0);
}
function _sqlite3BtreeCursorHasMoved($pCur,$pHasMoved) {
 $pCur = $pCur|0;
 $pHasMoved = $pHasMoved|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pCur) + 83|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)>(2);
 if ($2) {
  $3 = (_btreeRestoreCursorPosition($pCur)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pr = HEAP8[$0>>0]|0;
   $6 = $$pr;
   label = 4;
  } else {
   $$0 = $3;$storemerge1 = 1;
  }
 } else {
  $6 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $5 = ($6<<24>>24)==(1);
  if ($5) {
   $7 = (($pCur) + 76|0);
   $8 = HEAP32[$7>>2]|0;
   $not$ = ($8|0)!=(0);
   $$ = $not$&1;
   $$0 = 0;$storemerge1 = $$;
  } else {
   $$0 = 0;$storemerge1 = 1;
  }
 }
 HEAP32[$pHasMoved>>2] = $storemerge1;
 STACKTOP = sp;return ($$0|0);
}
function _closeAllCursors($p) {
 $p = $p|0;
 var $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0;
 var $pFrame$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 176|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $pFrame$0 = $1;
  while(1) {
   $3 = (($pFrame$0) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $pFrame$0 = $4;
   }
  }
  (_sqlite3VdbeFrameRestore($pFrame$0)|0);
 }
 HEAP32[$0>>2] = 0;
 $6 = (($p) + 184|0);
 HEAP32[$6>>2] = 0;
 $7 = (($p) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 L6: do {
  if (!($9)) {
   $10 = (($p) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)>(0);
   if ($12) {
    $14 = $8;$36 = $11;$i$02 = 0;
    while(1) {
     $13 = (($14) + ($i$02<<2)|0);
     $15 = HEAP32[$13>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $21 = $36;
     } else {
      _sqlite3VdbeFreeCursor($p,$15);
      $17 = HEAP32[$7>>2]|0;
      $18 = (($17) + ($i$02<<2)|0);
      HEAP32[$18>>2] = 0;
      $$pre = HEAP32[$10>>2]|0;
      $21 = $$pre;
     }
     $19 = (($i$02) + 1)|0;
     $20 = ($19|0)<($21|0);
     if (!($20)) {
      break L6;
     }
     $$pre6 = HEAP32[$7>>2]|0;
     $14 = $$pre6;$36 = $21;$i$02 = $19;
    }
   }
  }
 } while(0);
 $22 = (($p) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = (($23) + 40|0);
  $26 = (($p) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  _releaseMemArray($25,$27);
 }
 $28 = (($p) + 180|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  _sqlite3VdbeDeleteAuxData($p,-1,0);
  STACKTOP = sp;return;
 } else {
  $32 = $29;
 }
 while(1) {
  $31 = (($32) + 4|0);
  $33 = HEAP32[$31>>2]|0;
  HEAP32[$28>>2] = $33;
  _sqlite3VdbeFrameDelete($32);
  $34 = HEAP32[$28>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   break;
  } else {
   $32 = $34;
  }
 }
 _sqlite3VdbeDeleteAuxData($p,-1,0);
 STACKTOP = sp;return;
}
function _vdbeCommit($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $$0 = 0, $$idx$val = 0, $$idx$val$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx10$val$idx$val = 0, $$idx10$val$idx$val$idx = 0, $$idx10$val$idx$val$idx$val = 0, $$idx11$val = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx9 = 0, $$idx9$val = 0, $$idx9$val$idx$val = 0, $$needSync$0 = 0, $$pre = 0, $$pre60 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond41 = 0, $i$044 = 0, $i$118 = 0, $i$216 = 0, $i$329 = 0, $i$424 = 0, $i$519 = 0, $iRandom = 0, $nTrans$0$ = 0, $nTrans$043 = 0, $nTrans$264 = 0, $needSync$027 = 0, $needSync$1 = 0, $needSync$2 = 0, $needXcommit$042 = 0;
 var $needXcommit$163 = 0, $not$ = 0, $or$cond = 0, $pMaster = 0, $rc$914 = 0, $res = 0, $retryCount$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pMaster = sp + 36|0;
 $res = sp + 32|0;
 $iRandom = sp + 28|0;
 $0 = (_sqlite3VtabSync($db,$p)|0);
 $cond41 = ($0|0)==(0);
 if (!($cond41)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($db) + 20|0);
 $2 = (($db) + 16|0);
 $i$044 = 0;$nTrans$043 = 0;$needXcommit$042 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($i$044|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$2>>2]|0;
  $6 = ((($5) + ($i$044<<4)|0) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_sqlite3BtreeIsInTrans($7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $nTrans$264 = $nTrans$043;$needXcommit$163 = $needXcommit$042;
  } else {
   $not$ = ($i$044|0)!=(1);
   $10 = $not$&1;
   $nTrans$0$ = (($10) + ($nTrans$043))|0;
   $$idx6$val = HEAP32[$7>>2]|0;
   $$idx7 = (($7) + 4|0);
   $$idx7$val = HEAP32[$$idx7>>2]|0;
   _sqlite3BtreeEnter($$idx6$val,$$idx7$val);
   $$idx$val = HEAP32[$$idx7>>2]|0;
   $$idx$val$idx$val = HEAP32[$$idx$val>>2]|0;
   $11 = (_sqlite3BtreePager($$idx$val$idx$val)|0);
   $12 = (_sqlite3PagerExclusiveLock($11)|0);
   $cond = ($12|0)==(0);
   if ($cond) {
    $nTrans$264 = $nTrans$0$;$needXcommit$163 = 1;
   } else {
    $$0 = $12;
    label = 56;
    break;
   }
  }
  $13 = (($i$044) + 1)|0;
  $i$044 = $13;$nTrans$043 = $nTrans$264;$needXcommit$042 = $needXcommit$163;
 }
 if ((label|0) == 56) {
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($needXcommit$042|0)==(0);
 if (!($14)) {
  $15 = (($db) + 184|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   $18 = (($db) + 180|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$16 & 255]($19)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$0 = 531;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $$idx9 = (($24) + 4|0);
 $$idx9$val = HEAP32[$$idx9>>2]|0;
 $$idx9$val$idx$val = HEAP32[$$idx9$val>>2]|0;
 $25 = (_sqlite3BtreeGetFilename($$idx9$val$idx$val)|0);
 $26 = (_sqlite3Strlen30($25)|0);
 $27 = ($26|0)==(0);
 $28 = ($nTrans$043|0)<(2);
 $or$cond = $27 | $28;
 if ($or$cond) {
  $i$118 = 0;
  while(1) {
   $29 = HEAP32[$1>>2]|0;
   $30 = ($i$118|0)<($29|0);
   if (!($30)) {
    $i$216 = 0;
    break;
   }
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31) + ($i$118<<4)|0) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    $35 = (_sqlite3BtreeCommitPhaseOne($33,0)|0);
    $36 = ($35|0)==(0);
    if (!($36)) {
     $$0 = $35;
     label = 56;
     break;
    }
   }
   $37 = (($i$118) + 1)|0;
   $i$118 = $37;
  }
  if ((label|0) == 56) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $38 = HEAP32[$1>>2]|0;
   $39 = ($i$216|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = HEAP32[$2>>2]|0;
   $41 = ((($40) + ($i$216<<4)|0) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $44 = (_sqlite3BtreeCommitPhaseTwo($42,0)|0);
    $45 = ($44|0)==(0);
    if (!($45)) {
     $$0 = $44;
     label = 56;
     break;
    }
   }
   $46 = (($i$216) + 1)|0;
   $i$216 = $46;
  }
  if ((label|0) == 56) {
   STACKTOP = sp;return ($$0|0);
  }
  _sqlite3VtabCommit($db);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = HEAP32[$db>>2]|0;
 HEAP32[$pMaster>>2] = 0;
 $48 = (_sqlite3Strlen30($25)|0);
 HEAP32[$vararg_buffer>>2] = $25;
 $49 = (_sqlite3MPrintf($db,34416,$vararg_buffer)|0);
 $50 = ($49|0)==(0|0);
 if ($50) {
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = (($49) + ($48)|0);
 $retryCount$0 = 0;
 while(1) {
  $52 = ($retryCount$0|0)==(0);
  if (!($52)) {
   $53 = ($retryCount$0|0)>(100);
   if ($53) {
    label = 28;
    break;
   }
   $54 = ($retryCount$0|0)==(1);
   if ($54) {
    HEAP32[$vararg_buffer1>>2] = $49;
    _sqlite3_log(13,34448,$vararg_buffer1);
   }
  }
  _sqlite3_randomness(4,$iRandom);
  $55 = HEAP32[$iRandom>>2]|0;
  $56 = $55 >>> 8;
  $57 = $55 & 255;
  HEAP32[$vararg_buffer4>>2] = $56;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $57;
  (_sqlite3_snprintf(13,$51,34464,$vararg_buffer4)|0);
  $58 = (_sqlite3OsAccess($47,$49,0,$res)|0);
  $59 = ($58|0)==(0);
  if (!($59)) {
   $rc$914 = $58;
   break;
  }
  $60 = (($retryCount$0) + 1)|0;
  $61 = HEAP32[$res>>2]|0;
  $62 = ($61|0)==(0);
  if ($62) {
   label = 29;
   break;
  } else {
   $retryCount$0 = $60;
  }
 }
 if ((label|0) == 28) {
  HEAP32[$vararg_buffer8>>2] = $49;
  _sqlite3_log(13,34432,$vararg_buffer8);
  (_sqlite3OsDelete($47,$49,0)|0);
  label = 29;
 }
 if ((label|0) == 29) {
  $63 = (_sqlite3OsOpenMalloc($47,$49,$pMaster,16406,0)|0);
  $64 = ($63|0)==(0);
  if ($64) {
   $65 = HEAP32[$1>>2]|0;
   $66 = ($65|0)>(0);
   if ($66) {
    $67 = HEAP32[$pMaster>>2]|0;
    $122 = $65;$80 = 0;$81 = 0;$i$329 = 0;$needSync$027 = 0;
    while(1) {
     $68 = HEAP32[$2>>2]|0;
     $69 = ((($68) + ($i$329<<4)|0) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (_sqlite3BtreeIsInTrans($70)|0);
     $72 = ($71|0)==(0);
     if ($72) {
      $123 = $80;$124 = $81;$92 = $122;$needSync$2 = $needSync$027;
     } else {
      $$idx10 = (($70) + 4|0);
      $$idx10$val = HEAP32[$$idx10>>2]|0;
      $$idx10$val$idx$val = HEAP32[$$idx10$val>>2]|0;
      $$idx10$val$idx$val$idx = (($$idx10$val$idx$val) + 172|0);
      $$idx10$val$idx$val$idx$val = HEAP32[$$idx10$val$idx$val$idx>>2]|0;
      $73 = (_sqlite3BtreeGetJournalname($$idx10$val$idx$val$idx$val)|0);
      $74 = ($73|0)==(0|0);
      if ($74) {
       $123 = $80;$124 = $81;$92 = $122;$needSync$2 = $needSync$027;
      } else {
       $75 = ($needSync$027|0)==(0);
       if ($75) {
        $$idx11$val = HEAP32[$70>>2]|0;
        $76 = (_sqlite3BtreeSyncDisabled($$idx11$val,$$idx10$val)|0);
        $77 = ($76|0)==(0);
        $$needSync$0 = $77&1;
        $needSync$1 = $$needSync$0;
       } else {
        $needSync$1 = $needSync$027;
       }
       $78 = (_sqlite3Strlen30($73)|0);
       $79 = (($78) + 1)|0;
       $82 = (_sqlite3OsWrite($67,$73,$79,$80,$81)|0);
       $83 = ($82|0)==(0);
       if (!($83)) {
        label = 39;
        break;
       }
       $84 = (_sqlite3Strlen30($73)|0);
       $85 = (($84) + 1)|0;
       $86 = ($85|0)<(0);
       $87 = $86 << 31 >> 31;
       $88 = (_i64Add(($85|0),($87|0),($80|0),($81|0))|0);
       $89 = tempRet0;
       $$pre60 = HEAP32[$1>>2]|0;
       $123 = $88;$124 = $89;$92 = $$pre60;$needSync$2 = $needSync$1;
      }
     }
     $90 = (($i$329) + 1)|0;
     $91 = ($90|0)<($92|0);
     if ($91) {
      $122 = $92;$80 = $123;$81 = $124;$i$329 = $90;$needSync$027 = $needSync$2;
     } else {
      break;
     }
    }
    if ((label|0) == 39) {
     _sqlite3OsCloseFree($67);
     (_sqlite3OsDelete($47,$49,0)|0);
     _sqlite3DbFree($db,$49);
     $$0 = $82;
     STACKTOP = sp;return ($$0|0);
    }
    $93 = ($needSync$2|0)==(0);
    if ($93) {
     $i$424 = 0;
    } else {
     $94 = HEAP32[$pMaster>>2]|0;
     $95 = (_sqlite3OsDeviceCharacteristics($94)|0);
     $96 = $95 & 1024;
     $97 = ($96|0)==(0);
     if ($97) {
      $98 = (_sqlite3OsSync($94,2)|0);
      $99 = ($98|0)==(0);
      if ($99) {
       $i$424 = 0;
      } else {
       _sqlite3OsCloseFree($94);
       (_sqlite3OsDelete($47,$49,0)|0);
       _sqlite3DbFree($db,$49);
       $$0 = $98;
       STACKTOP = sp;return ($$0|0);
      }
     } else {
      $i$424 = 0;
     }
    }
   } else {
    $i$424 = 0;
   }
   while(1) {
    $100 = HEAP32[$1>>2]|0;
    $101 = ($i$424|0)<($100|0);
    if (!($101)) {
     break;
    }
    $102 = HEAP32[$2>>2]|0;
    $103 = ((($102) + ($i$424<<4)|0) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(0|0);
    if (!($105)) {
     $106 = (_sqlite3BtreeCommitPhaseOne($104,$49)|0);
     $107 = ($106|0)==(0);
     if (!($107)) {
      label = 49;
      break;
     }
    }
    $108 = (($i$424) + 1)|0;
    $i$424 = $108;
   }
   if ((label|0) == 49) {
    $109 = HEAP32[$pMaster>>2]|0;
    _sqlite3OsCloseFree($109);
    _sqlite3DbFree($db,$49);
    $$0 = $106;
    STACKTOP = sp;return ($$0|0);
   }
   $110 = HEAP32[$pMaster>>2]|0;
   _sqlite3OsCloseFree($110);
   $111 = (_sqlite3OsDelete($47,$49,1)|0);
   _sqlite3DbFree($db,$49);
   $112 = ($111|0)==(0);
   if (!($112)) {
    $$0 = $111;
    STACKTOP = sp;return ($$0|0);
   }
   _sqlite3BeginBenignMalloc();
   $113 = HEAP32[$1>>2]|0;
   $114 = ($113|0)>(0);
   if ($114) {
    $125 = $113;$i$519 = 0;
    while(1) {
     $115 = HEAP32[$2>>2]|0;
     $116 = ((($115) + ($i$519<<4)|0) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)==(0|0);
     if ($118) {
      $121 = $125;
     } else {
      (_sqlite3BtreeCommitPhaseTwo($117,1)|0);
      $$pre = HEAP32[$1>>2]|0;
      $121 = $$pre;
     }
     $119 = (($i$519) + 1)|0;
     $120 = ($119|0)<($121|0);
     if ($120) {
      $125 = $121;$i$519 = $119;
     } else {
      break;
     }
    }
   }
   _sqlite3EndBenignMalloc();
   _sqlite3VtabCommit($db);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rc$914 = $63;
  }
 }
 _sqlite3DbFree($db,$49);
 $$0 = $rc$914;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3VtabSync($db,$p) {
 $db = $db|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $rc$0$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($db) + 320|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $2 = (($db) + 296|0);
 $i$02 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($i$02|0)<($3|0);
  if (!($4)) {
   $rc$0$lcssa = 0;
   label = 7;
   break;
  }
  $5 = (($1) + ($i$02<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = HEAP32[$8>>2]|0;
   $11 = (($10) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = (FUNCTION_TABLE_ii[$12 & 255]($8)|0);
    _sqlite3VtabImportErrmsg($p,$8);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $rc$0$lcssa = $14;
     label = 7;
     break;
    }
   }
  }
  $16 = (($i$02) + 1)|0;
  $i$02 = $16;
 }
 if ((label|0) == 7) {
  HEAP32[$0>>2] = $1;
  STACKTOP = sp;return ($rc$0$lcssa|0);
 }
 return 0|0;
}
function _sqlite3VtabCommit($db) {
 $db = $db|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _callFinaliser($db,64);
 STACKTOP = sp;return;
}
function _sqlite3BtreeGetJournalname($p$0$1$val$0$0$val$0$48$val) {
 $p$0$1$val$0$0$val$0$48$val = $p$0$1$val$0$0$val$0$48$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3PagerJournalname($p$0$1$val$0$0$val$0$48$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _sqlite3BtreeSyncDisabled($p$0$0$val,$p$0$1$val) {
 $p$0$0$val = $p$0$0$val|0;
 $p$0$1$val = $p$0$1$val|0;
 var $$idx = 0, $$idx$val = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3BtreeEnter($p$0$0$val,$p$0$1$val);
 $0 = HEAP32[$p$0$1$val>>2]|0;
 $$idx = (($0) + 7|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $1 = (_sqlite3PagerNosync($$idx$val)|0);
 STACKTOP = sp;return ($1|0);
}
function _sqlite3PagerNosync($pPager$0$4$val) {
 $pPager$0$4$val = $pPager$0$4$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $pPager$0$4$val&255;
 STACKTOP = sp;return ($0|0);
}
function _sqlite3PagerJournalname($pPager$0$48$val) {
 $pPager$0$48$val = $pPager$0$48$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($pPager$0$48$val|0);
}
function _sqlite3VdbeFrameDelete($p) {
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 72|0);
 $1 = (($p) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + (($2*40)|0)|0);
 $4 = (($p) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $i$01 = 0;
  while(1) {
   $7 = HEAP32[$p>>2]|0;
   $8 = (($3) + ($i$01<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   _sqlite3VdbeFreeCursor($7,$9);
   $10 = (($i$01) + 1)|0;
   $11 = HEAP32[$4>>2]|0;
   $12 = ($10|0)<($11|0);
   if ($12) {
    $i$01 = $10;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$1>>2]|0;
  $13 = $$pre;
 } else {
  $13 = $2;
 }
 _releaseMemArray($0,$13);
 $14 = HEAP32[$p>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 _sqlite3DbFree($15,$p);
 STACKTOP = sp;return;
}
function _sqlite3OpcodeName($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (34584 + ($i<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _displayP4($pOp,$zTemp) {
 $pOp = $pOp|0;
 $zTemp = $zTemp|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$03 = 0, $i$05 = 0, $i$1 = 0, $j$04 = 0, $n$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr28 = 0, $vararg_ptr7 = 0, $zColl$0 = 0, $zP4$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($pOp) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 do {
  switch ($2|0) {
  case -6:  {
   $3 = (($pOp) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + 6|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6&65535;
   HEAP32[$vararg_buffer>>2] = $7;
   (_sqlite3_snprintf(32,$zTemp,34488,$vararg_buffer)|0);
   $8 = (_sqlite3Strlen30($zTemp)|0);
   $9 = HEAP16[$5>>1]|0;
   $10 = ($9<<16>>16)==(0);
   L3: do {
    if ($10) {
     $i$03 = $8;
    } else {
     $11 = (($4) + 16|0);
     $i$05 = $8;$j$04 = 0;
     while(1) {
      $12 = ((($4) + ($j$04<<2)|0) + 20|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($13|0)==(0|0);
      if ($14) {
       $16 = 34496;
      } else {
       $15 = HEAP32[$13>>2]|0;
       $16 = $15;
      }
      $17 = (_sqlite3Strlen30($16)|0);
      $18 = ($17|0)==(6);
      if ($18) {
       $19 = (_memcmp($16,3592,6)|0);
       $20 = ($19|0)==(0);
       $$ = $20 ? 1 : 6;
       $$1 = $20 ? 34504 : $16;
       $n$0 = $$;$zColl$0 = $$1;
      } else {
       $n$0 = $17;$zColl$0 = $16;
      }
      $21 = (($n$0) + ($i$05))|0;
      $22 = ($21|0)>(26);
      if ($22) {
       break;
      }
      $24 = (($i$05) + 1)|0;
      $25 = (($zTemp) + ($i$05)|0);
      HEAP8[$25>>0] = 44;
      $26 = HEAP32[$11>>2]|0;
      $27 = (($26) + ($j$04)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = ($28<<24>>24)==(0);
      if ($29) {
       $i$1 = $24;
      } else {
       $30 = (($i$05) + 2)|0;
       $31 = (($zTemp) + ($24)|0);
       HEAP8[$31>>0] = 45;
       $i$1 = $30;
      }
      $32 = (($zTemp) + ($i$1)|0);
      $33 = (($n$0) + 1)|0;
      _memcpy(($32|0),($zColl$0|0),($33|0))|0;
      $34 = (($i$1) + ($n$0))|0;
      $35 = (($j$04) + 1)|0;
      $36 = HEAP16[$5>>1]|0;
      $37 = $36&65535;
      $38 = ($35|0)<($37|0);
      if ($38) {
       $i$05 = $34;$j$04 = $35;
      } else {
       $i$03 = $34;
       break L3;
      }
     }
     $23 = (($zTemp) + ($i$05)|0);
     HEAP8[$23>>0]=774778412&255;HEAP8[$23+1>>0]=(774778412>>8)&255;HEAP8[$23+2>>0]=(774778412>>16)&255;HEAP8[$23+3>>0]=774778412>>24;
     $i$03 = $i$05;
    }
   } while(0);
   $39 = (($i$03) + 1)|0;
   $40 = (($zTemp) + ($i$03)|0);
   HEAP8[$40>>0] = 41;
   $41 = (($zTemp) + ($39)|0);
   HEAP8[$41>>0] = 0;
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -12:  {
   $65 = (($pOp) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = +HEAPF64[$66>>3];
   HEAPF64[tempDoublePtr>>3]=$67;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_sqlite3_snprintf(32,$zTemp,9600,$vararg_buffer14)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -13:  {
   $51 = (($pOp) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($53) + 4)|0;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = $vararg_buffer8;
   $60 = $59;
   HEAP32[$60>>2] = $55;
   $61 = (($59) + 4)|0;
   $62 = $61;
   HEAP32[$62>>2] = $58;
   (_sqlite3_snprintf(32,$zTemp,9608,$vararg_buffer8)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -15:  {
   (_sqlite3_snprintf(32,$zTemp,34560,$vararg_buffer29)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -10:  {
   $96 = (($pOp) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $99;
   $vararg_ptr28 = (($vararg_buffer25) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $100;
   (_sqlite3_snprintf(32,$zTemp,34544,$vararg_buffer25)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -14:  {
   $63 = (($pOp) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $64;
   (_sqlite3_snprintf(32,$zTemp,34528,$vararg_buffer11)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -8:  {
   $68 = (($pOp) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 28|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = $72 & 2;
   $74 = ($73|0)==(0);
   if (!($74)) {
    $75 = (($69) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $zP4$0 = $76;
    STACKTOP = sp;return ($zP4$0|0);
   }
   $77 = $72 & 4;
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = (($69) + 16|0);
    $80 = $79;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = $vararg_buffer17;
    $87 = $86;
    HEAP32[$87>>2] = $82;
    $88 = (($86) + 4)|0;
    $89 = $88;
    HEAP32[$89>>2] = $85;
    (_sqlite3_snprintf(32,$zTemp,9608,$vararg_buffer17)|0);
    $zP4$0 = $zTemp;
    STACKTOP = sp;return ($zP4$0|0);
   }
   $90 = $72 & 8;
   $91 = ($90|0)==(0);
   if (!($91)) {
    $92 = (($69) + 8|0);
    $93 = +HEAPF64[$92>>3];
    HEAPF64[tempDoublePtr>>3]=$93;HEAP32[$vararg_buffer20>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer20+4>>2]=HEAP32[tempDoublePtr+4>>2];
    (_sqlite3_snprintf(32,$zTemp,9600,$vararg_buffer20)|0);
    $zP4$0 = $zTemp;
    STACKTOP = sp;return ($zP4$0|0);
   }
   $94 = $72 & 1;
   $95 = ($94|0)==(0);
   if ($95) {
    $zP4$0 = 34536;
    STACKTOP = sp;return ($zP4$0|0);
   }
   (_sqlite3_snprintf(32,$zTemp,9992,$vararg_buffer23)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -4:  {
   $42 = (($pOp) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $44;
   (_sqlite3_snprintf(32,$zTemp,34512,$vararg_buffer1)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -18:  {
   (_sqlite3_snprintf(32,$zTemp,34576,$vararg_buffer31)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -5:  {
   $45 = (($pOp) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP16[$46>>1]|0;
   $50 = $49 << 16 >> 16;
   HEAP32[$vararg_buffer4>>2] = $48;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $50;
   (_sqlite3_snprintf(32,$zTemp,34520,$vararg_buffer4)|0);
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  case -19:  {
   HEAP8[$zTemp>>0] = 0;
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
   break;
  }
  default: {
   $101 = (($pOp) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(0|0);
   if (!($103)) {
    $zP4$0 = $102;
    STACKTOP = sp;return ($zP4$0|0);
   }
   HEAP8[$zTemp>>0] = 0;
   $zP4$0 = $zTemp;
   STACKTOP = sp;return ($zP4$0|0);
  }
  }
 } while(0);
 return 0|0;
}
function _sqlite3VdbeMemHandleBom($pMem) {
 $pMem = $pMem|0;
 var $$bom$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bom$0 = 0, $or$cond = 0, $or$cond1 = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pMem) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(1);
 if (!($2)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $3 = (($pMem) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = (($4) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($5<<24>>24)==(-2);
 $9 = ($7<<24>>24)==(-1);
 $or$cond = $8 & $9;
 $bom$0 = $or$cond ? 3 : 0;
 $10 = ($5<<24>>24)==(-1);
 $11 = ($7<<24>>24)==(-2);
 $or$cond1 = $10 & $11;
 $$bom$0 = $or$cond1 ? 2 : $bom$0;
 $12 = ($$bom$0<<24>>24)==(0);
 if ($12) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 $13 = (_sqlite3VdbeMemMakeWriteable($pMem)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $rc$0 = $13;
  STACKTOP = sp;return ($rc$0|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + -2)|0;
 HEAP32[$0>>2] = $16;
 $17 = HEAP32[$3>>2]|0;
 $18 = (($17) + 2|0);
 _memmove(($17|0),($18|0),($16|0))|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($20) + ($19)|0);
 HEAP8[$21>>0] = 0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = (($24) + ($23)|0);
 HEAP8[$25>>0] = 0;
 $26 = (($pMem) + 28|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = $28 | 512;
 $30 = $29&65535;
 HEAP16[$26>>1] = $30;
 $31 = (($pMem) + 30|0);
 HEAP8[$31>>0] = $$bom$0;
 $rc$0 = 0;
 STACKTOP = sp;return ($rc$0|0);
}
function _Cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3DbFree($0,$2);
 HEAP32[$1>>2] = 0;
 $3 = (($p) + 20|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _vdbeFreeOpArray($db,$aOp,$nOp) {
 $db = $db|0;
 $aOp = $aOp|0;
 $nOp = $nOp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pOp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($aOp|0)==(0|0);
 if (!($0)) {
  $1 = (($aOp) + (($nOp*20)|0)|0);
  $2 = ($nOp|0)>(0);
  if ($2) {
   $pOp$01 = $aOp;
   while(1) {
    $3 = (($pOp$01) + 1|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = $4 << 24 >> 24;
    $6 = (($pOp$01) + 16|0);
    $7 = HEAP32[$6>>2]|0;
    _freeP4($db,$5,$7);
    $8 = (($pOp$01) + 20|0);
    $9 = ($8>>>0)<($1>>>0);
    if ($9) {
     $pOp$01 = $8;
    } else {
     break;
    }
   }
  }
 }
 _sqlite3DbFree($db,$aOp);
 STACKTOP = sp;return;
}
function _btreeClearHasContent($pBt) {
 $pBt = $pBt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pBt) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 _sqlite3BitvecDestroy($1);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _btreeEndTransaction($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$p>>2]|0;
 $3 = (($1) + 19|0);
 HEAP8[$3>>0] = 0;
 $4 = (($p) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if (!($6)) {
   $7 = (($2) + 144|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)>(1);
   if ($9) {
    _downgradeAllSharedCacheTableLocks($p);
    HEAP8[$4>>0] = 1;
    STACKTOP = sp;return;
   } else {
    _clearAllSharedCacheTableLocks($p);
    $10 = (($1) + 40|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + -1)|0;
    HEAP32[$10>>2] = $12;
    $13 = ($12|0)==(0);
    if (!($13)) {
     break;
    }
    $14 = (($1) + 20|0);
    HEAP8[$14>>0] = 0;
    break;
   }
  }
 } while(0);
 HEAP8[$4>>0] = 0;
 _unlockBtreeIfUnused($1);
 STACKTOP = sp;return;
}
function _downgradeAllSharedCacheTableLocks($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pLock$0 = 0, $pLock$01 = 0, $pLock$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($p|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 0;
 $5 = (($1) + 22|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 & 65439;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 $10 = (($1) + 72|0);
 $pLock$01 = HEAP32[$10>>2]|0;
 $11 = ($pLock$01|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 } else {
  $pLock$02 = $pLock$01;
 }
 while(1) {
  $12 = (($pLock$02) + 8|0);
  HEAP8[$12>>0] = 1;
  $13 = (($pLock$02) + 12|0);
  $pLock$0 = HEAP32[$13>>2]|0;
  $14 = ($pLock$0|0)==(0|0);
  if ($14) {
   break;
  } else {
   $pLock$02 = $pLock$0;
  }
 }
 STACKTOP = sp;return;
}
function _clearAllSharedCacheTableLocks($p) {
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ppIter$0$ph1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if (!($4)) {
   $32 = $3;$ppIter$0$ph1 = $2;
   while(1) {
    $8 = $32;
    while(1) {
     $7 = HEAP32[$8>>2]|0;
     $9 = ($7|0)==($p|0);
     $10 = (($8) + 12|0);
     $6 = HEAP32[$10>>2]|0;
     if (!($9)) {
      break;
     }
     HEAP32[$ppIter$0$ph1>>2] = $6;
     $11 = (($8) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(1);
     if ($13) {
      $15 = $6;
     } else {
      _sqlite3_free($8);
      $$pre = HEAP32[$ppIter$0$ph1>>2]|0;
      $15 = $$pre;
     }
     $14 = ($15|0)==(0|0);
     if ($14) {
      break L1;
     } else {
      $8 = $15;
     }
    }
    $5 = ($6|0)==(0|0);
    if ($5) {
     break;
    } else {
     $32 = $6;$ppIter$0$ph1 = $10;
    }
   }
  }
 } while(0);
 $16 = (($1) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($p|0);
 if ($18) {
  HEAP32[$16>>2] = 0;
  $19 = (($1) + 22|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $21 & 65439;
  $23 = $22&65535;
  HEAP16[$19>>1] = $23;
  STACKTOP = sp;return;
 }
 $24 = (($1) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(2);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = (($1) + 22|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $29 & 65471;
 $31 = $30&65535;
 HEAP16[$27>>1] = $31;
 STACKTOP = sp;return;
}
function _autoVacuumCommit($pBt) {
 $pBt = $pBt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $iFree$05 = 0, $or$cond2 = 0, $or$cond24 = 0, $pBt$idx = 0, $pBt$idx$val = 0, $rc$1$lcssa = 0, $rc$1$lcssa7 = 0, $rc$2 = 0, $rc$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pBt>>2]|0;
 _invalidateAllOverflowCache($pBt);
 $1 = (($pBt) + 18|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $pBt$idx = (($pBt) + 44|0);
 $pBt$idx$val = HEAP32[$pBt$idx>>2]|0;
 $4 = (_btreePagecount($pBt$idx$val)|0);
 $5 = (_ptrmapPageno($pBt,$4)|0);
 $6 = ($5|0)==($4|0);
 if (!($6)) {
  $7 = HEAP32[1648>>2]|0;
  $8 = (($pBt) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7>>>0) / ($9>>>0))&-1;
  $11 = (($10) + 1)|0;
  $12 = ($4|0)==($11|0);
  if (!($12)) {
   $13 = (($pBt) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 56|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 36|0);
   $18 = (_sqlite3Get4byte($17)|0);
   $19 = (_finalDbSize($pBt,$4,$18)|0);
   $20 = ($19>>>0)>($4>>>0);
   if ($20) {
    _sqlite3CorruptError(54026);
    $$0 = 11;
    STACKTOP = sp;return ($$0|0);
   }
   $21 = ($19>>>0)<($4>>>0);
   if ($21) {
    $22 = (_saveAllCursors($pBt,0,0)|0);
    $23 = ($22|0)==(0);
    $or$cond24 = $21 & $23;
    if ($or$cond24) {
     $iFree$05 = $4;
     while(1) {
      $24 = (_incrVacuumStep($pBt,$19,$iFree$05,1)|0);
      $25 = (($iFree$05) + -1)|0;
      $26 = ($25>>>0)>($19>>>0);
      $27 = ($24|0)==(0);
      $or$cond2 = $26 & $27;
      if ($or$cond2) {
       $iFree$05 = $25;
      } else {
       $rc$1$lcssa = $24;
       break;
      }
     }
    } else {
     $rc$1$lcssa = $22;
    }
    if ((($rc$1$lcssa|0) == 0) | (($rc$1$lcssa|0) == 101)) {
     $rc$1$lcssa7 = $rc$1$lcssa;
     label = 11;
    } else {
     $rc$23 = $rc$1$lcssa;
    }
   } else {
    $rc$1$lcssa7 = 0;
    label = 11;
   }
   if ((label|0) == 11) {
    $28 = ($18|0)==(0);
    if ($28) {
     $rc$2 = $rc$1$lcssa7;
    } else {
     $29 = HEAP32[$13>>2]|0;
     $30 = (($29) + 68|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (_sqlite3PagerWrite($31)|0);
     $33 = HEAP32[$13>>2]|0;
     $34 = (($33) + 56|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + 32|0);
     _sqlite3Put4byte($36,0);
     $37 = HEAP32[$13>>2]|0;
     $38 = (($37) + 56|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + 36|0);
     _sqlite3Put4byte($40,0);
     $41 = HEAP32[$13>>2]|0;
     $42 = (($41) + 56|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($43) + 28|0);
     _sqlite3Put4byte($44,$19);
     $45 = (($pBt) + 19|0);
     HEAP8[$45>>0] = 1;
     HEAP32[$pBt$idx>>2] = $19;
     $rc$2 = $32;
    }
    $46 = ($rc$2|0)==(0);
    if ($46) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $rc$23 = $rc$2;
    }
   }
   (_sqlite3PagerRollback($0)|0);
   $$0 = $rc$23;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sqlite3CorruptError(54021);
 $$0 = 11;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerCommitPhaseTwo($pPager) {
 $pPager = $pPager|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPager) + 15|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(2);
 if ($5) {
  $6 = (($pPager) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (($pPager) + 5|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(1);
   if ($11) {
    HEAP8[$3>>0] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $12 = (($pPager) + 18|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (_pager_end_transaction($pPager,$14,1)|0);
 $16 = (_pager_error($pPager,$15)|0);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _pager_incr_changecounter($pPager) {
 $pPager = $pPager|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPgHdr = 0, $rc$01 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPgHdr = sp;
 $0 = (($pPager) + 17|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $3 = (($pPager) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $6 = (_sqlite3PagerAcquire($pPager,1,$pPgHdr,0)|0);
 $7 = ($6|0)==(0);
 $8 = HEAP32[$pPgHdr>>2]|0;
 if ($7) {
  $9 = (_sqlite3PagerWrite($8)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   _pager_write_changecounter($8);
   HEAP8[$0>>0] = 1;
   $rc$01 = 0;
  } else {
   $rc$01 = $9;
  }
 } else {
  $rc$01 = $6;
 }
 _sqlite3PagerUnref($8);
 $rc$1 = $rc$01;
 STACKTOP = sp;return ($rc$1|0);
}
function _writeMasterJournal($pPager,$zMaster) {
 $pPager = $pPager|0;
 $zMaster = $zMaster|0;
 var $$0 = 0, $$phi$trans$insert = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cksum$0$lcssa = 0, $cksum$02 = 0, $jrnlSize = 0, $nMaster$0$lcssa = 0, $nMaster$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $jrnlSize = sp;
 $0 = ($zMaster|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($pPager) + 5|0);
 $2 = HEAP8[$1>>0]|0;
 if ((($2<<24>>24) == 2) | (($2<<24>>24) == 4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($pPager) + 18|0);
 HEAP8[$3>>0] = 1;
 $4 = HEAP8[$zMaster>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $cksum$0$lcssa = 0;$nMaster$0$lcssa = 0;
 } else {
  $7 = $4;$cksum$02 = 0;$nMaster$01 = 0;
  while(1) {
   $6 = $7 << 24 >> 24;
   $8 = (($6) + ($cksum$02))|0;
   $9 = (($nMaster$01) + 1)|0;
   $10 = (($zMaster) + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $cksum$0$lcssa = $8;$nMaster$0$lcssa = $9;
    break;
   } else {
    $7 = $11;$cksum$02 = $8;$nMaster$01 = $9;
   }
  }
 }
 $13 = (($pPager) + 8|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $$phi$trans$insert = (($pPager) + 72|0);
  $16 = $$phi$trans$insert;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $37 = $18;$38 = $21;
 } else {
  $22 = (_journalHdrOffset($pPager)|0);
  $23 = tempRet0;
  $24 = (($pPager) + 72|0);
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $37 = $22;$38 = $23;
 }
 $29 = (($pPager) + 72|0);
 $30 = (($pPager) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[1648>>2]|0;
 $33 = (($pPager) + 152|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32|0) / ($34|0))&-1;
 $36 = (($35) + 1)|0;
 $39 = (_write32bits($31,$37,$38,$36)|0);
 $40 = ($39|0)==(0);
 if (!($40)) {
  $$0 = $39;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$30>>2]|0;
 $42 = (_i64Add(($37|0),($38|0),4,0)|0);
 $43 = tempRet0;
 $44 = (_sqlite3OsWrite($41,$zMaster,$nMaster$0$lcssa,$42,$43)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[$30>>2]|0;
 $47 = ($nMaster$0$lcssa|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = (_i64Add(($42|0),($43|0),($nMaster$0$lcssa|0),($48|0))|0);
 $50 = tempRet0;
 $51 = (_write32bits($46,$49,$50,$nMaster$0$lcssa)|0);
 $52 = ($51|0)==(0);
 if (!($52)) {
  $$0 = $51;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = HEAP32[$30>>2]|0;
 $54 = (_i64Add(($49|0),($50|0),4,0)|0);
 $55 = tempRet0;
 $56 = (_write32bits($53,$54,$55,$cksum$0$lcssa)|0);
 $57 = ($56|0)==(0);
 if (!($57)) {
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
 }
 $58 = HEAP32[$30>>2]|0;
 $59 = (_i64Add(($49|0),($50|0),8,0)|0);
 $60 = tempRet0;
 $61 = (_sqlite3OsWrite($58,4608,8,$59,$60)|0);
 $62 = ($61|0)==(0);
 if (!($62)) {
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = (($nMaster$0$lcssa) + 20)|0;
 $64 = ($63|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = $29;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = (_i64Add(($68|0),($71|0),($63|0),($65|0))|0);
 $73 = tempRet0;
 $74 = $29;
 $75 = $74;
 HEAP32[$75>>2] = $72;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $73;
 $78 = HEAP32[$30>>2]|0;
 $79 = (_sqlite3OsFileSize($78,$jrnlSize)|0);
 $80 = ($79|0)==(0);
 if (!($80)) {
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 $81 = $jrnlSize;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = $29;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($86|0)>($92|0);
 $94 = ($86|0)==($92|0);
 $95 = ($83>>>0)>($89>>>0);
 $96 = $94 & $95;
 $97 = $93 | $96;
 if (!($97)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $98 = HEAP32[$30>>2]|0;
 $99 = (_sqlite3OsTruncate($98,$89,$92)|0);
 $$0 = $99;
 STACKTOP = sp;return ($$0|0);
}
function _pager_write($pPg) {
 $pPg = $pPg|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $pPg$idx = 0, $pPg$idx$val = 0, $pPg$idx4$val = 0, $pPg$idx5$val = 0, $pPg$idx6$val = 0, $rc$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPg) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 15|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 if ($4) {
  $5 = (_pager_open_journal($1)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _sqlite3PcacheMakeDirty($pPg);
 $$idx3 = (($1) + 56|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $pPg$idx = (($pPg) + 20|0);
 $pPg$idx$val = HEAP32[$pPg$idx>>2]|0;
 $7 = (_pageInJournal($$idx3$val,$pPg$idx$val)|0);
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $$idx = (($1) + 208|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $14 = (_pagerUseWal($$idx$val)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = (($1) + 28|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($pPg$idx$val>>>0)>($17>>>0);
    if (!($18)) {
     $19 = (($1) + 64|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if (!($22)) {
      $23 = (($1) + 72|0);
      $24 = $23;
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = (($24) + 4)|0;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($pPg) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $$idx1 = (($1) + 48|0);
      $$idx1$val = HEAP32[$$idx1>>2]|0;
      $$idx2 = (($1) + 152|0);
      $$idx2$val = HEAP32[$$idx2>>2]|0;
      $32 = (_pager_cksum($$idx1$val,$$idx2$val,$31)|0);
      $33 = (($pPg) + 24|0);
      $34 = HEAP16[$33>>1]|0;
      $35 = $34&65535;
      $36 = $35 | 4;
      $37 = $36&65535;
      HEAP16[$33>>1] = $37;
      $38 = (_write32bits($20,$26,$29,$pPg$idx$val)|0);
      $39 = ($38|0)==(0);
      if (!($39)) {
       $$0 = $38;
       STACKTOP = sp;return ($$0|0);
      }
      $40 = HEAP32[$19>>2]|0;
      $41 = HEAP32[$$idx2>>2]|0;
      $42 = (_i64Add(($26|0),($29|0),4,0)|0);
      $43 = tempRet0;
      $44 = (_sqlite3OsWrite($40,$31,$41,$42,$43)|0);
      $45 = ($44|0)==(0);
      if (!($45)) {
       $$0 = $44;
       STACKTOP = sp;return ($$0|0);
      }
      $46 = HEAP32[$19>>2]|0;
      $47 = HEAP32[$$idx2>>2]|0;
      $48 = ($47|0)<(0);
      $49 = $48 << 31 >> 31;
      $50 = (_i64Add(($42|0),($43|0),($47|0),($49|0))|0);
      $51 = tempRet0;
      $52 = (_write32bits($46,$50,$51,$32)|0);
      $53 = ($52|0)==(0);
      if (!($53)) {
       $$0 = $52;
       STACKTOP = sp;return ($$0|0);
      }
      $54 = HEAP32[$$idx2>>2]|0;
      $55 = (($54) + 8)|0;
      $56 = ($55|0)<(0);
      $57 = $56 << 31 >> 31;
      $58 = $23;
      $59 = $58;
      $60 = HEAP32[$59>>2]|0;
      $61 = (($58) + 4)|0;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = (_i64Add(($55|0),($57|0),($60|0),($63|0))|0);
      $65 = tempRet0;
      $66 = $23;
      $67 = $66;
      HEAP32[$67>>2] = $64;
      $68 = (($66) + 4)|0;
      $69 = $68;
      HEAP32[$69>>2] = $65;
      $70 = (($1) + 44|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + 1)|0;
      HEAP32[$70>>2] = $72;
      $73 = HEAP32[$$idx3>>2]|0;
      $74 = HEAP32[$pPg$idx>>2]|0;
      $75 = (_sqlite3BitvecSet($73,$74)|0);
      $76 = HEAP32[$pPg$idx>>2]|0;
      $77 = (_addToSavepointBitvecs($1,$76)|0);
      $78 = $77 | $75;
      $79 = ($78|0)==(0);
      if ($79) {
       label = 15;
       break;
      } else {
       $$0 = $78;
      }
      STACKTOP = sp;return ($$0|0);
     }
    }
    $80 = HEAP8[$2>>0]|0;
    $81 = ($80<<24>>24)==(4);
    if ($81) {
     label = 15;
    } else {
     $82 = (($pPg) + 24|0);
     $83 = HEAP16[$82>>1]|0;
     $84 = $83&65535;
     $85 = $84 | 4;
     $86 = $85&65535;
     HEAP16[$82>>1] = $86;
     label = 15;
    }
   } else {
    label = 15;
   }
  } else {
   $9 = (($1) + 96|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $rc$2 = 0;
   } else {
    $pPg$idx6$val = HEAP32[$0>>2]|0;
    $12 = (_subjRequiresPage($pPg$idx6$val,$pPg$idx$val)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $rc$2 = 0;
    } else {
     label = 15;
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $87 = (($1) + 96|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)>(0);
  if ($89) {
   $pPg$idx4$val = HEAP32[$0>>2]|0;
   $pPg$idx5$val = HEAP32[$pPg$idx>>2]|0;
   $90 = (_subjRequiresPage($pPg$idx4$val,$pPg$idx5$val)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $rc$2 = 0;
   } else {
    $92 = (_subjournalPage($pPg)|0);
    $rc$2 = $92;
   }
  } else {
   $rc$2 = 0;
  }
 }
 $93 = (($1) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[$pPg$idx>>2]|0;
 $96 = ($94>>>0)<($95>>>0);
 if (!($96)) {
  $$0 = $rc$2;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$93>>2] = $95;
 $$0 = $rc$2;
 STACKTOP = sp;return ($$0|0);
}
function _pager_open_journal($pPager) {
 $pPager = $pPager|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pPager$idx = 0;
 var $pPager$idx$val = 0, $rc$17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pPager>>2]|0;
 $1 = (($pPager) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $4 = (_pagerUseWal($pPager$idx$val)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = (($pPager) + 5|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(2);
   if (!($8)) {
    $9 = (($pPager) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_sqlite3BitvecCreate($10)|0);
    $12 = (($pPager) + 56|0);
    HEAP32[$12>>2] = $11;
    $13 = ($11|0)==(0|0);
    if ($13) {
     $$0 = 7;
     STACKTOP = sp;return ($$0|0);
    }
    $14 = (($pPager) + 64|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    do {
     if ($17) {
      $18 = HEAP8[$6>>0]|0;
      $19 = ($18<<24>>24)==(4);
      if ($19) {
       _sqlite3MemJournalOpen($15);
       label = 10;
       break;
      }
      $20 = (($pPager) + 12|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = (_databaseIsUnmoved($pPager)|0);
      $23 = ($22|0)==(0);
      if ($23) {
       $24 = ($21<<24>>24)!=(0);
       $25 = $24 ? 4110 : 2054;
       $26 = (($pPager) + 172|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = HEAP32[$14>>2]|0;
       $29 = (_sqlite3OsOpen($0,$27,$28,$25,0)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        label = 10;
       } else {
        $rc$17 = $29;
       }
      } else {
       $rc$17 = $22;
      }
     } else {
      label = 10;
     }
    } while(0);
    if ((label|0) == 10) {
     $31 = (($pPager) + 44|0);
     HEAP32[$31>>2] = 0;
     $32 = (($pPager) + 72|0);
     $33 = (($pPager) + 18|0);
     HEAP8[$33>>0] = 0;
     ;HEAP32[$32+0>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
     $34 = (_writeJournalHdr($pPager)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      break;
     } else {
      $rc$17 = $34;
     }
    }
    $36 = HEAP32[$12>>2]|0;
    _sqlite3BitvecDestroy($36);
    HEAP32[$12>>2] = 0;
    $$0 = $rc$17;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $37 = (($pPager) + 15|0);
 HEAP8[$37>>0] = 3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pageInJournal($pPager$0$26$val,$pPg$0$5$val) {
 $pPager$0$26$val = $pPager$0$26$val|0;
 $pPg$0$5$val = $pPg$0$5$val|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_sqlite3BitvecTest($pPager$0$26$val,$pPg$0$5$val)|0);
 STACKTOP = sp;return ($0|0);
}
function _databaseIsUnmoved($pPager) {
 $pPager = $pPager|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bHasMoved = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bHasMoved = sp;
 HEAP32[$bHasMoved>>2] = 0;
 $0 = (($pPager) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = (($pPager) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = (($pPager) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_sqlite3OsFileControl($7,20,$bHasMoved)|0);
 $9 = ($8|0)==(12);
 if ($9) {
  STACKTOP = sp;return 0;
 } else {
  $10 = ($8|0)!=(0);
  $11 = HEAP32[$bHasMoved>>2]|0;
  $12 = ($11|0)==(0);
  $or$cond = $10 | $12;
  $$ = $or$cond ? $8 : 1032;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _lockBtree($pBt) {
 $pBt = $pBt|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isOpen = 0;
 var $nPage$0 = 0, $nPageFile = 0, $or$cond = 0, $or$cond3 = 0, $pPage1 = 0, $rc$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pPage1 = sp + 8|0;
 $nPageFile = sp + 4|0;
 $isOpen = sp;
 HEAP32[$nPageFile>>2] = 0;
 $0 = HEAP32[$pBt>>2]|0;
 $1 = (_sqlite3PagerSharedLock($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_btreeGetPage($pBt,1,$pPage1,0)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$pPage1>>2]|0;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 28|0);
 $9 = (_sqlite3Get4byte($8)|0);
 $10 = HEAP32[$pBt>>2]|0;
 $$idx = (($10) + 24|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 _sqlite3PagerPagecount($$idx$val,$nPageFile);
 $11 = ($9|0)==(0);
 if ($11) {
  label = 5;
 } else {
  $12 = HEAP32[$6>>2]|0;
  $13 = (($12) + 24|0);
  $14 = (($12) + 92|0);
  $15 = (_memcmp($13,$14,4)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $nPage$0 = $9;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $17 = HEAP32[$nPageFile>>2]|0;
  $nPage$0 = $17;
 }
 $18 = ($nPage$0|0)>(0);
 L12: do {
  if ($18) {
   $19 = HEAP32[$6>>2]|0;
   $20 = (_memcmp($19,34400,16)|0);
   $21 = ($20|0)==(0);
   do {
    if ($21) {
     $22 = (($19) + 18|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23&255)>(2);
     if ($24) {
      $25 = (($pBt) + 22|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = $26&65535;
      $28 = $27 | 1;
      $29 = $28&65535;
      HEAP16[$25>>1] = $29;
     }
     $30 = (($19) + 19|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31&255)>(2);
     if ($32) {
      $rc$1 = 26;
     } else {
      $33 = ($31<<24>>24)==(2);
      if ($33) {
       $34 = (($pBt) + 22|0);
       $35 = HEAP16[$34>>1]|0;
       $36 = $35 & 16;
       $37 = ($36<<16>>16)==(0);
       if ($37) {
        HEAP32[$isOpen>>2] = 0;
        $38 = HEAP32[$pBt>>2]|0;
        $39 = (_sqlite3PagerOpenWal($38,$isOpen)|0);
        $40 = ($39|0)==(0);
        if (!($40)) {
         $rc$1 = $39;
         break;
        }
        $41 = HEAP32[$isOpen>>2]|0;
        $42 = ($41|0)==(0);
        if ($42) {
         _releasePage($5);
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
      $43 = (($19) + 21|0);
      $44 = (_memcmp($43,37088,3)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $46 = (($19) + 16|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = $47&255;
       $49 = $48 << 8;
       $50 = (($19) + 17|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = $51&255;
       $53 = $52 << 16;
       $54 = $53 | $49;
       $55 = (($54) + 16777215)|0;
       $56 = $55 & $54;
       $57 = ($56|0)!=(0);
       $58 = ($54>>>0)>(65536);
       $or$cond = $57 | $58;
       $59 = ($54>>>0)<(257);
       $or$cond3 = $or$cond | $59;
       if ($or$cond3) {
        $rc$1 = 26;
       } else {
        $60 = (($19) + 20|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = $61&255;
        $63 = (($54) - ($62))|0;
        $64 = (($pBt) + 32|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($54|0)==($65|0);
        if (!($66)) {
         _releasePage($5);
         $67 = (($pBt) + 36|0);
         HEAP32[$67>>2] = $63;
         HEAP32[$64>>2] = $54;
         _freeTempSpace($pBt);
         $68 = HEAP32[$pBt>>2]|0;
         $69 = (_sqlite3PagerSetPagesize($68,$64,$62)|0);
         $$0 = $69;
         STACKTOP = sp;return ($$0|0);
        }
        $70 = (($pBt) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (($71) + 24|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = $73 & 65536;
        $75 = ($74|0)==(0);
        if ($75) {
         $76 = HEAP32[$nPageFile>>2]|0;
         $77 = ($nPage$0|0)>($76|0);
         if ($77) {
          _sqlite3CorruptError(53306);
          $rc$1 = 11;
          break;
         }
        }
        $78 = ($63>>>0)<(480);
        if ($78) {
         $rc$1 = 26;
        } else {
         HEAP32[$64>>2] = $54;
         $79 = (($pBt) + 36|0);
         HEAP32[$79>>2] = $63;
         $80 = (($19) + 52|0);
         $81 = (_sqlite3Get4byte($80)|0);
         $82 = ($81|0)!=(0);
         $83 = $82&1;
         $84 = (($pBt) + 17|0);
         HEAP8[$84>>0] = $83;
         $85 = (($19) + 64|0);
         $86 = (_sqlite3Get4byte($85)|0);
         $87 = ($86|0)!=(0);
         $88 = $87&1;
         $89 = (($pBt) + 18|0);
         HEAP8[$89>>0] = $88;
         $91 = $63;
         break L12;
        }
       }
      } else {
       $rc$1 = 26;
      }
     }
    } else {
     $rc$1 = 26;
    }
   } while(0);
   _releasePage($5);
   $113 = (($pBt) + 12|0);
   HEAP32[$113>>2] = 0;
   $$0 = $rc$1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$phi$trans$insert = (($pBt) + 36|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $91 = $$pre;
  }
 } while(0);
 $90 = $91 << 6;
 $92 = (($90) + -768)|0;
 $93 = (($92>>>0) / 255)&-1;
 $94 = (($93) + 65513)|0;
 $95 = $94&65535;
 $96 = (($pBt) + 24|0);
 HEAP16[$96>>1] = $95;
 $97 = $91 << 5;
 $98 = (($97) + -384)|0;
 $99 = (($98>>>0) / 255)&-1;
 $100 = (($99) + 65513)|0;
 $101 = $100&65535;
 $102 = (($pBt) + 26|0);
 HEAP16[$102>>1] = $101;
 $103 = (($91) + 65501)|0;
 $104 = $103&65535;
 $105 = (($pBt) + 28|0);
 HEAP16[$105>>1] = $104;
 $106 = (($pBt) + 30|0);
 HEAP16[$106>>1] = $101;
 $107 = ($95&65535)>(127);
 if ($107) {
  $108 = (($pBt) + 21|0);
  HEAP8[$108>>0] = 127;
 } else {
  $109 = $94&255;
  $110 = (($pBt) + 21|0);
  HEAP8[$110>>0] = $109;
 }
 $111 = (($pBt) + 12|0);
 HEAP32[$111>>2] = $5;
 $112 = (($pBt) + 44|0);
 HEAP32[$112>>2] = $nPage$0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3PagerBegin($pPager,$exFlag,$subjInMemory) {
 $pPager = $pPager|0;
 $exFlag = $exFlag|0;
 $subjInMemory = $subjInMemory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pPager$idx = 0, $pPager$idx$val = 0, $rc$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pPager) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $subjInMemory&255;
 $4 = (($pPager) + 20|0);
 HEAP8[$4>>0] = $3;
 $5 = (($pPager) + 15|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $pPager$idx = (($pPager) + 208|0);
 $pPager$idx$val = HEAP32[$pPager$idx>>2]|0;
 $8 = (_pagerUseWal($pPager$idx$val)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $20 = (_pagerLockDb($pPager,2)|0);
  $21 = ($20|0)!=(0);
  $22 = ($exFlag|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $rc$0 = $20;
  } else {
   $23 = (_pager_wait_on_lock($pPager,4)|0);
   $rc$0 = $23;
  }
 } else {
  $10 = (($pPager) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(0);
  do {
   if (!($12)) {
    $13 = (_sqlite3WalExclusiveMode($pPager$idx$val,-1)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (_pagerLockDb($pPager,4)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP32[$pPager$idx>>2]|0;
      (_sqlite3WalExclusiveMode($17,1)|0);
      break;
     } else {
      $$0 = $15;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  } while(0);
  $18 = HEAP32[$pPager$idx>>2]|0;
  $19 = (_sqlite3WalBeginWriteTransaction($18)|0);
  $rc$0 = $19;
 }
 $24 = ($rc$0|0)==(0);
 if (!($24)) {
  $$0 = $rc$0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$5>>0] = 2;
 $25 = (($pPager) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($pPager) + 36|0);
 HEAP32[$27>>2] = $26;
 $28 = (($pPager) + 32|0);
 HEAP32[$28>>2] = $26;
 $29 = (($pPager) + 28|0);
 HEAP32[$29>>2] = $26;
 $30 = (($pPager) + 72|0);
 $31 = $30;
 $32 = $31;
 HEAP32[$32>>2] = 0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3WalBeginWriteTransaction($pWal) {
 $pWal = $pWal|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pWal$idx = 0, $pWal$idx$val = 0, $pWal$idx$val$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pWal) + 46|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 8;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_walLockExclusive($pWal,0,1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($pWal) + 44|0);
 HEAP8[$5>>0] = 1;
 $6 = (($pWal) + 52|0);
 $pWal$idx = (($pWal) + 32|0);
 $pWal$idx$val = HEAP32[$pWal$idx>>2]|0;
 $pWal$idx$val$val = HEAP32[$pWal$idx$val>>2]|0;
 $7 = (_walIndexHdr($pWal$idx$val$val)|0);
 $8 = (_memcmp($6,$7,48)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _walUnlockExclusive($pWal,0,1);
 HEAP8[$5>>0] = 0;
 $$0 = 517;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3ValueSetNull($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sqlite3VdbeMemSetNull($p);
 STACKTOP = sp;return;
}
function _dotlockIoFinderImpl($z,$p) {
 $z = $z|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (37096|0);
}
function _dotlockClose($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 (_dotlockUnlock($id,0)|0);
 $1 = (($id) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 _sqlite3_free($2);
 _closeUnixFile($id);
 STACKTOP = sp;return 0;
}
function _unixRead($id,$pBuf,$amt,$0,$1) {
 $id = $id|0;
 $pBuf = $pBuf|0;
 $amt = $amt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_seekAndRead($id,$0,$1,$pBuf,$amt)|0);
 $3 = ($2|0)==($amt|0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = ($2|0)<(0);
  if ($4) {
   $$0 = 266;
  } else {
   $5 = (($id) + 20|0);
   HEAP32[$5>>2] = 0;
   $6 = (($pBuf) + ($2)|0);
   $7 = (($amt) - ($2))|0;
   _memset(($6|0),0,($7|0))|0;
   $$0 = 522;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _unixWrite($id,$pBuf,$amt,$0,$1) {
 $id = $id|0;
 $pBuf = $pBuf|0;
 $amt = $amt|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$026 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($amt|0)>(0);
 L1: do {
  if ($2) {
   $$026 = $amt;$$035 = $pBuf;$3 = $0;$4 = $1;
   while(1) {
    $5 = (_seekAndWrite($id,$3,$4,$$035,$$026)|0);
    $6 = ($5|0)>(0);
    if (!($6)) {
     break;
    }
    $7 = (($$026) - ($5))|0;
    $8 = ($5|0)<(0);
    $9 = $8 << 31 >> 31;
    $10 = (_i64Add(($5|0),($9|0),($3|0),($4|0))|0);
    $11 = tempRet0;
    $12 = (($$035) + ($5)|0);
    $13 = ($7|0)>(0);
    if ($13) {
     $$026 = $7;$$035 = $12;$3 = $10;$4 = $11;
    } else {
     $$0 = 0;
     break L1;
    }
   }
   $14 = ($5|0)<(0);
   if ($14) {
    $15 = (($id) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(28);
    if (!($17)) {
     $$0 = 778;
     break;
    }
   }
   $18 = (($id) + 20|0);
   HEAP32[$18>>2] = 0;
   $$0 = 13;
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _unixTruncate($id,$0,$1) {
 $id = $id|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01$off0 = 0, $$c = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($id) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ($3|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_i64Add(($0|0),($1|0),-1,-1)|0);
  $8 = tempRet0;
  $9 = (_i64Add(($7|0),($8|0),($3|0),($6|0))|0);
  $10 = tempRet0;
  $11 = (___remdi3(($9|0),($10|0),($3|0),($6|0))|0);
  $12 = tempRet0;
  $13 = (_i64Subtract(($9|0),($10|0),($11|0),($12|0))|0);
  $14 = tempRet0;
  $$01$off0 = $13;
 } else {
  $$01$off0 = $0;
 }
 $15 = (($id) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($$01$off0|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = (_robust_ftruncate($16,$$01$off0,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (___errno_location()|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($id) + 20|0);
 $$c = $22;
 HEAP32[$23>>2] = $$c;
 $24 = (($id) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_unixLogErrorAtLine(1546,37536,$25,27284)|0);
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _unixSync($id,$flags) {
 $id = $id|0;
 $flags = $flags|0;
 var $$0 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dirfd = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dirfd = sp;
 $0 = (($id) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_full_fsync($1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($id) + 20|0);
  $$c = $5;
  HEAP32[$6>>2] = $$c;
  $7 = (($id) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_unixLogErrorAtLine(1034,37976,$8,27240)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($id) + 18|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 8;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[((37176 + 208|0))>>2]|0;
 $15 = (($id) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iii[$14 & 255]($16,$dirfd)|0);
 if ((($17|0) == 0)) {
  $18 = HEAP32[$dirfd>>2]|0;
  $19 = ($18|0)>(-1);
  if ($19) {
   (_full_fsync($18)|0);
   $20 = HEAP32[$dirfd>>2]|0;
   _robust_close($id,$20,27254);
   $rc$0 = 0;
  } else {
   $rc$0 = 0;
  }
 } else if ((($17|0) == 14)) {
  $rc$0 = 0;
 } else {
  $rc$0 = $17;
 }
 $21 = HEAP16[$10>>1]|0;
 $22 = $21&65535;
 $23 = $22 & 65527;
 $24 = $23&65535;
 HEAP16[$10>>1] = $24;
 $$0 = $rc$0;
 STACKTOP = sp;return ($$0|0);
}
function _unixFileSize($id,$pSize) {
 $id = $id|0;
 $pSize = $pSize|0;
 var $$0 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 $0 = HEAP32[((37176 + 64|0))>>2]|0;
 $1 = (($id) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$0 & 255]($2,$buf)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = (($buf) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = ($9|0)==(1);
  $13 = $12 ? 0 : $9;
  $14 = $12 ? 0 : $11;
  $15 = $pSize;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($id) + 20|0);
  $$c = $6;
  HEAP32[$7>>2] = $$c;
  $$0 = 1802;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _dotlockLock($id,$eFileLock) {
 $id = $id|0;
 $eFileLock = $eFileLock|0;
 var $$0 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($id) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($id) + 16|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $6 = HEAP32[((37176 + 220|0))>>2]|0;
   $7 = (FUNCTION_TABLE_iii[$6 & 255]($1,511)|0);
   $8 = ($7|0)<(0);
   if (!($8)) {
    $14 = $eFileLock&255;
    HEAP8[$2>>0] = $14;
    $$0 = $7;
    break;
   }
   $9 = (___errno_location()|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(17);
   if ($11) {
    $$0 = 5;
   } else {
    $12 = (_sqliteErrorFromPosixError($10)|0);
    if ((($12|0) == 0) | (($12|0) == 5)) {
     $$0 = $12;
    } else {
     $13 = (($id) + 20|0);
     $$c = $10;
     HEAP32[$13>>2] = $$c;
     $$0 = $12;
    }
   }
  } else {
   $5 = $eFileLock&255;
   HEAP8[$2>>0] = $5;
   (_utimes(($1|0),(0|0))|0);
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _dotlockUnlock($id,$eFileLock) {
 $id = $id|0;
 $eFileLock = $eFileLock|0;
 var $$ = 0, $$0 = 0, $$c = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($id) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($id) + 16|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==($eFileLock|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($eFileLock|0)==(1);
 if ($6) {
  HEAP8[$2>>0] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[((37176 + 232|0))>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 255]($1)|0);
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $10 = (___errno_location()|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(20);
   if ($12) {
    $13 = HEAP32[((37176 + 196|0))>>2]|0;
    $14 = (FUNCTION_TABLE_ii[$13 & 255]($1)|0);
    $15 = ($14|0)<(0);
    if (!($15)) {
     break;
    }
    $$pre = HEAP32[$10>>2]|0;
    $17 = $$pre;
   } else {
    $17 = $11;
   }
   $16 = ($17|0)!=(2);
   $$ = $16 ? 2058 : 0;
   if (!($16)) {
    $$0 = $$;
    STACKTOP = sp;return ($$0|0);
   }
   $18 = (($id) + 20|0);
   $$c = $17;
   HEAP32[$18>>2] = $$c;
   $$0 = $$;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP8[$2>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _dotlockCheckReservedLock($id,$pResOut) {
 $id = $id|0;
 $pResOut = $pResOut|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $reserved$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($id) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1&255)>(1);
 if ($2) {
  $reserved$0 = 1;
 } else {
  $3 = (($id) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[((37176 + 28|0))>>2]|0;
  $6 = (FUNCTION_TABLE_iii[$5 & 255]($4,0)|0);
  $7 = ($6|0)==(0);
  $8 = $7&1;
  $reserved$0 = $8;
 }
 HEAP32[$pResOut>>2] = $reserved$0;
 STACKTOP = sp;return 0;
}
function _unixFileControl($id,$op,$pArg) {
 $id = $id|0;
 $op = $op|0;
 $pArg = $pArg|0;
 var $$0 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($op|0) {
 case 5:  {
  $7 = $pArg;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (_fcntlSizeHint($id,$9,$12)|0);
  $$0 = $13;
  break;
 }
 case 13:  {
  _unixModeBit($id,16,$pArg);
  $$0 = 0;
  break;
 }
 case 20:  {
  $28 = (_fileHasMoved($id)|0);
  HEAP32[$pArg>>2] = $28;
  $$0 = 0;
  break;
 }
 case 10:  {
  _unixModeBit($id,4,$pArg);
  $$0 = 0;
  break;
 }
 case 4:  {
  $3 = (($id) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$pArg>>2] = $4;
  $$0 = 0;
  break;
 }
 case 1:  {
  $0 = (($id) + 16|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  HEAP32[$pArg>>2] = $2;
  $$0 = 0;
  break;
 }
 case 12:  {
  $14 = (($id) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $18 = (_sqlite3_mprintf(1712,$vararg_buffer)|0);
  HEAP32[$pArg>>2] = $18;
  $$0 = 0;
  break;
 }
 case 6:  {
  $5 = HEAP32[$pArg>>2]|0;
  $6 = (($id) + 40|0);
  $$c = $5;
  HEAP32[$6>>2] = $$c;
  $$0 = 0;
  break;
 }
 case 16:  {
  $19 = (($id) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_sqlite3_malloc($22)|0);
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$0 = 0;
  } else {
   $25 = HEAP32[$19>>2]|0;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   (_unixGetTempname($27,$23)|0);
   HEAP32[$pArg>>2] = $23;
   $$0 = 0;
  }
  break;
 }
 default: {
  $$0 = 12;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _unixSectorSize($NotUsed) {
 $NotUsed = $NotUsed|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4096;
}
function _unixDeviceCharacteristics($id) {
 $id = $id|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($id) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 16;
 $3 = ($2<<16>>16)==(0);
 $$ = $3 ? 0 : 4096;
 STACKTOP = sp;return ($$|0);
}
function _unixShmMap($fd,$iRegion,$szRegion,$bExtend,$pp) {
 $fd = $fd|0;
 $iRegion = $iRegion|0;
 $szRegion = $szRegion|0;
 $bExtend = $bExtend|0;
 $pp = $pp|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $9 = 0, $iPg$02 = 0, $or$cond = 0, $pMem$0 = 0, $rc$2 = 0, $rc$3 = 0, $sStat = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sStat = sp;
 $0 = (($fd) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (_unixOpenSharedMemory($fd)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $6 = $$pre;
    break;
   } else {
    $$0 = $3;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $6 = $1;
  }
 } while(0);
 $5 = HEAP32[$6>>2]|0;
 $7 = (($5) + 20|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($9|0)>($iRegion|0);
 L7: do {
  if ($10) {
   $rc$2 = 0;
  } else {
   $11 = (($iRegion) + 1)|0;
   $12 = Math_imul($11, $szRegion)|0;
   $13 = (($5) + 16|0);
   HEAP32[$13>>2] = $szRegion;
   $14 = (($5) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(-1);
   L9: do {
    if ($16) {
     $17 = HEAP32[((37176 + 64|0))>>2]|0;
     $18 = (FUNCTION_TABLE_iii[$17 & 255]($15,$sStat)|0);
     $19 = ($18|0)==(0);
     if (!($19)) {
      $rc$2 = 4874;
      break L7;
     }
     $20 = (($sStat) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)<($12|0);
     if ($22) {
      $23 = ($bExtend|0)==(0);
      if ($23) {
       $rc$2 = 0;
       break L7;
      }
      $24 = (($21|0) / 4096)&-1;
      $25 = (($12|0) / 4096)&-1;
      $26 = ($24|0)<($25|0);
      if ($26) {
       $iPg$02 = $24;
       while(1) {
        $29 = HEAP32[$14>>2]|0;
        $30 = $iPg$02 << 12;
        $31 = $30 | 4095;
        $32 = ($31|0)<(0);
        $33 = $32 << 31 >> 31;
        $34 = (_seekAndWriteFd($29,$31,$33,1728,1,0)|0);
        $35 = ($34|0)==(1);
        $28 = (($iPg$02) + 1)|0;
        if (!($35)) {
         break;
        }
        $27 = ($28|0)<($25|0);
        if ($27) {
         $iPg$02 = $28;
        } else {
         break L9;
        }
       }
       $36 = (($5) + 8|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (_unixLogErrorAtLine(4874,37584,$37,28074)|0);
       $rc$2 = $38;
       break L7;
      }
     }
    }
   } while(0);
   $39 = (($5) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $11 << 2;
   $42 = (_sqlite3_realloc($40,$41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    $rc$2 = 3082;
   } else {
    HEAP32[$39>>2] = $42;
    $44 = HEAP16[$7>>1]|0;
    $45 = $44&65535;
    $46 = ($45|0)>($iRegion|0);
    if ($46) {
     $rc$2 = 0;
    } else {
     $47 = (($5) + 22|0);
     $55 = $45;
     while(1) {
      $48 = HEAP32[$14>>2]|0;
      $49 = ($48|0)>(-1);
      if ($49) {
       $50 = HEAP32[((37176 + 256|0))>>2]|0;
       $51 = HEAP8[$47>>0]|0;
       $52 = ($51<<24>>24)!=(0);
       $53 = $52 ? 1 : 3;
       $54 = Math_imul($55, $szRegion)|0;
       $56 = (FUNCTION_TABLE_iiiiiii[$50 & 255](0,$szRegion,$53,1,$48,$54)|0);
       $57 = ($56|0)==((-1)|0);
       if ($57) {
        break;
       } else {
        $pMem$0 = $56;
       }
      } else {
       $61 = (_sqlite3_malloc($szRegion)|0);
       $62 = ($61|0)==(0|0);
       if ($62) {
        $rc$2 = 7;
        break L7;
       }
       _memset(($61|0),0,($szRegion|0))|0;
       $pMem$0 = $61;
      }
      $63 = HEAP16[$7>>1]|0;
      $64 = $63&65535;
      $65 = HEAP32[$39>>2]|0;
      $66 = (($65) + ($64<<2)|0);
      HEAP32[$66>>2] = $pMem$0;
      $67 = (($63) + 1)<<16>>16;
      HEAP16[$7>>1] = $67;
      $68 = $67&65535;
      $69 = ($68|0)>($iRegion|0);
      if ($69) {
       $rc$2 = 0;
       break L7;
      } else {
       $55 = $68;
      }
     }
     $58 = (($5) + 8|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (_unixLogErrorAtLine(5386,37688,$59,28099)|0);
     $rc$2 = $60;
    }
   }
  }
 } while(0);
 $70 = HEAP16[$7>>1]|0;
 $71 = $70&65535;
 $72 = ($71|0)>($iRegion|0);
 if ($72) {
  $73 = (($5) + 24|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($iRegion<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $storemerge = $76;
 } else {
  $storemerge = 0;
 }
 HEAP32[$pp>>2] = $storemerge;
 $77 = (($5) + 22|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = ($78<<24>>24)!=(0);
 $80 = ($rc$2|0)==(0);
 $or$cond = $79 & $80;
 $rc$3 = $or$cond ? 8 : $rc$2;
 $$0 = $rc$3;
 STACKTOP = sp;return ($$0|0);
}
function _unixShmLock($fd,$ofst,$n,$flags) {
 $fd = $fd|0;
 $ofst = $ofst|0;
 $n = $n|0;
 $flags = $flags|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx2 = 0, $$idx2$val = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $allMask$0$lcssa = 0, $allMask$022 = 0, $allMask$1 = 0, $allShared$0$lcssa = 0, $allShared$017 = 0, $pX$0 = 0, $pX$021 = 0, $pX$023 = 0, $pX$1 = 0, $pX$118 = 0, $pX$2 = 0, $pX$211 = 0, $pX$212 = 0;
 var $rc$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fd) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($n) + ($ofst))|0;
 $4 = 1 << $3;
 $5 = 1 << $ofst;
 $6 = (($4) - ($5))|0;
 $7 = $flags & 1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($2) + 32|0);
  $pX$021 = HEAP32[$9>>2]|0;
  $10 = ($pX$021|0)==(0|0);
  if ($10) {
   $allMask$0$lcssa = 0;
  } else {
   $allMask$022 = 0;$pX$023 = $pX$021;
   while(1) {
    $11 = ($pX$023|0)==($1|0);
    if ($11) {
     $allMask$1 = $allMask$022;
    } else {
     $12 = (($pX$023) + 10|0);
     $13 = HEAP16[$12>>1]|0;
     $14 = $13 | $allMask$022;
     $allMask$1 = $14;
    }
    $15 = (($pX$023) + 4|0);
    $pX$0 = HEAP32[$15>>2]|0;
    $16 = ($pX$0|0)==(0|0);
    if ($16) {
     $allMask$0$lcssa = $allMask$1;
     break;
    } else {
     $allMask$022 = $allMask$1;$pX$023 = $pX$0;
    }
   }
  }
  $17 = $allMask$0$lcssa&65535;
  $18 = $17 & $6;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = (($ofst) + 120)|0;
   $$idx2 = (($2) + 12|0);
   $$idx2$val = HEAP32[$$idx2>>2]|0;
   $21 = (_unixShmSystemLock($$idx2$val,2,$20,$n)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $rc$4 = $21;
    STACKTOP = sp;return ($rc$4|0);
   }
  }
  $$not = $6 | -65536;
  $23 = $$not ^ 65535;
  $24 = (($1) + 12|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = $26 & $23;
  $28 = $27&65535;
  HEAP16[$24>>1] = $28;
  $29 = (($1) + 10|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = $31 & $23;
  $33 = $32&65535;
  HEAP16[$29>>1] = $33;
  $rc$4 = 0;
  STACKTOP = sp;return ($rc$4|0);
 }
 $34 = $flags & 4;
 $35 = ($34|0)==(0);
 $36 = (($2) + 32|0);
 $pX$211 = HEAP32[$36>>2]|0;
 $37 = ($pX$211|0)==(0|0);
 if (!($35)) {
  L18: do {
   if ($37) {
    $allShared$0$lcssa = 0;
   } else {
    $allShared$017 = 0;$pX$118 = $pX$211;
    while(1) {
     $39 = (($pX$118) + 12|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $42 = $6 & $41;
     $43 = ($42|0)==(0);
     if (!($43)) {
      $rc$4 = 5;
      break;
     }
     $44 = (($pX$118) + 10|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45 | $allShared$017;
     $47 = (($pX$118) + 4|0);
     $pX$1 = HEAP32[$47>>2]|0;
     $48 = ($pX$1|0)==(0|0);
     if ($48) {
      $allShared$0$lcssa = $46;
      break L18;
     } else {
      $allShared$017 = $46;$pX$118 = $pX$1;
     }
    }
    STACKTOP = sp;return ($rc$4|0);
   }
  } while(0);
  $49 = $allShared$0$lcssa&65535;
  $50 = $6 & $49;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = (($ofst) + 120)|0;
   $$idx1 = (($2) + 12|0);
   $$idx1$val = HEAP32[$$idx1>>2]|0;
   $53 = (_unixShmSystemLock($$idx1$val,0,$52,$n)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $rc$4 = $53;
    STACKTOP = sp;return ($rc$4|0);
   }
  }
  $55 = (($1) + 10|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = $57 | $6;
  $59 = $58&65535;
  HEAP16[$55>>1] = $59;
  $rc$4 = 0;
  STACKTOP = sp;return ($rc$4|0);
 }
 L30: do {
  if (!($37)) {
   $38 = $6 & 65535;
   $pX$212 = $pX$211;
   while(1) {
    $62 = (($pX$212) + 12|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = $64 & $38;
    $66 = ($65|0)==(0);
    if (!($66)) {
     $rc$4 = 5;
     label = 23;
     break;
    }
    $67 = (($pX$212) + 10|0);
    $68 = HEAP16[$67>>1]|0;
    $69 = $68&65535;
    $70 = $69 & $38;
    $71 = ($70|0)==(0);
    if (!($71)) {
     $rc$4 = 5;
     label = 23;
     break;
    }
    $60 = (($pX$212) + 4|0);
    $pX$2 = HEAP32[$60>>2]|0;
    $61 = ($pX$2|0)==(0|0);
    if ($61) {
     break L30;
    } else {
     $pX$212 = $pX$2;
    }
   }
   if ((label|0) == 23) {
    STACKTOP = sp;return ($rc$4|0);
   }
  }
 } while(0);
 $72 = (($ofst) + 120)|0;
 $$idx = (($2) + 12|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $73 = (_unixShmSystemLock($$idx$val,1,$72,$n)|0);
 $74 = ($73|0)==(0);
 if (!($74)) {
  $rc$4 = $73;
  STACKTOP = sp;return ($rc$4|0);
 }
 $75 = (($1) + 12|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = $77 | $6;
 $79 = $78&65535;
 HEAP16[$75>>1] = $79;
 $rc$4 = 0;
 STACKTOP = sp;return ($rc$4|0);
}
function _unixShmBarrier($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _unixShmUnmap($fd,$deleteFlag) {
 $fd = $fd|0;
 $deleteFlag = $deleteFlag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $pp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fd) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 32|0);
 $pp$0 = $4;
 while(1) {
  $5 = HEAP32[$pp$0>>2]|0;
  $6 = ($5|0)==($1|0);
  $7 = (($5) + 4|0);
  if ($6) {
   break;
  } else {
   $pp$0 = $7;
  }
 }
 $8 = (($1) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pp$0>>2] = $9;
 _sqlite3_free($1);
 HEAP32[$0>>2] = 0;
 $10 = (($3) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = ($deleteFlag|0)==(0);
 if (!($14)) {
  $15 = (($3) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>(-1);
  if ($17) {
   $18 = HEAP32[((37176 + 196|0))>>2]|0;
   $19 = (($3) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   (FUNCTION_TABLE_ii[$18 & 255]($20)|0);
  }
 }
 _unixShmPurge($fd);
 STACKTOP = sp;return 0;
}
function _unixFetch($fd,$0,$1,$nAmt,$pp) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $nAmt = $nAmt|0;
 $pp = $pp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pp>>2] = 0;
 STACKTOP = sp;return 0;
}
function _unixUnfetch($fd,$0,$1,$p) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _unixShmPurge($pFd) {
 $pFd = $pFd|0;
 var $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFd) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($3) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($3) + 20|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $$pre = (($3) + 24|0);
  $$pre2 = (($3) + 12|0);
  $$pre$phi3Z2D = $$pre2;$$pre$phiZ2D = $$pre;
 } else {
  $11 = (($3) + 12|0);
  $12 = (($3) + 24|0);
  $13 = (($3) + 16|0);
  $i$01 = 0;
  while(1) {
   $14 = HEAP32[$11>>2]|0;
   $15 = ($14|0)>(-1);
   if ($15) {
    $16 = HEAP32[((37176 + 268|0))>>2]|0;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + ($i$01<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$13>>2]|0;
    (FUNCTION_TABLE_iii[$16 & 255]($19,$20)|0);
   } else {
    $21 = HEAP32[$12>>2]|0;
    $22 = (($21) + ($i$01<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _sqlite3_free($23);
   }
   $24 = (($i$01) + 1)|0;
   $25 = HEAP16[$8>>1]|0;
   $26 = $25&65535;
   $27 = ($24|0)<($26|0);
   if ($27) {
    $i$01 = $24;
   } else {
    $$pre$phi3Z2D = $11;$$pre$phiZ2D = $12;
    break;
   }
  }
 }
 $28 = HEAP32[$$pre$phiZ2D>>2]|0;
 _sqlite3_free($28);
 $29 = HEAP32[$$pre$phi3Z2D>>2]|0;
 $30 = ($29|0)>(-1);
 if ($30) {
  _robust_close($pFd,$29,27820);
  HEAP32[$$pre$phi3Z2D>>2] = -1;
 }
 $31 = HEAP32[$3>>2]|0;
 $32 = (($31) + 20|0);
 HEAP32[$32>>2] = 0;
 _sqlite3_free($3);
 STACKTOP = sp;return;
}
function _robust_close($pFile,$h,$lineno) {
 $pFile = $pFile|0;
 $h = $h|0;
 $lineno = $lineno|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((37176 + 16|0))>>2]|0;
 $1 = (FUNCTION_TABLE_ii[$0 & 255]($h)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($pFile|0)==(0|0);
 if ($3) {
  $6 = 0;
 } else {
  $4 = (($pFile) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 }
 (_unixLogErrorAtLine(4106,37464,$6,$lineno)|0);
 STACKTOP = sp;return;
}
function _unixLogErrorAtLine($errcode,$zFunc,$zPath,$iLine) {
 $errcode = $errcode|0;
 $zFunc = $zFunc|0;
 $zPath = $zPath|0;
 $iLine = $iLine|0;
 var $$zPath = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strerror(($1|0))|0);
 $3 = ($zPath|0)==(0|0);
 $$zPath = $3 ? 1728 : $zPath;
 HEAP32[$vararg_buffer>>2] = $iLine;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $zFunc;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $$zPath;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 _sqlite3_log($errcode,37472,$vararg_buffer);
 STACKTOP = sp;return ($errcode|0);
}
function _posixOpen($zFile,$flags,$mode) {
 $zFile = $zFile|0;
 $flags = $flags|0;
 $mode = $mode|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $mode;
 $0 = (_open(($zFile|0),($flags|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _openDirectory($zFilename,$pFd) {
 $zFilename = $zFilename|0;
 $pFd = $pFd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ii$0$lcssa = 0, $ii$01 = 0, $vararg_buffer = 0, $zDirname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $vararg_buffer = sp;
 $zDirname = sp + 4|0;
 HEAP32[$vararg_buffer>>2] = $zFilename;
 (_sqlite3_snprintf(512,$zDirname,1712,$vararg_buffer)|0);
 $0 = (_strlen(($zDirname|0))|0);
 $1 = ($0|0)>(1);
 L1: do {
  if ($1) {
   $ii$01 = $0;
   while(1) {
    $4 = (($zDirname) + ($ii$01)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)==(47);
    $3 = (($ii$01) + -1)|0;
    if ($6) {
     $ii$0$lcssa = $ii$01;
     break L1;
    }
    $2 = ($3|0)>(1);
    if ($2) {
     $ii$01 = $3;
    } else {
     $ii$0$lcssa = $3;
     break;
    }
   }
  } else {
   $ii$0$lcssa = $0;
  }
 } while(0);
 $7 = ($ii$0$lcssa|0)>(0);
 if ($7) {
  $8 = (($zDirname) + ($ii$0$lcssa)|0);
  HEAP8[$8>>0] = 0;
  $9 = (_robust_open($zDirname,0,0)|0);
  HEAP32[$pFd>>2] = $9;
  $10 = ($9|0)>(-1);
  if ($10) {
   $12 = 0;
   STACKTOP = sp;return ($12|0);
  }
 } else {
  HEAP32[$pFd>>2] = -1;
 }
 _sqlite3CantopenError(27199);
 $11 = (_unixLogErrorAtLine(14,37504,$zDirname,27199)|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function _posixFchown($fd,$uid,$gid) {
 $fd = $fd|0;
 $uid = $uid|0;
 $gid = $gid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getgid()|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_fchown(($fd|0),($uid|0),($gid|0))|0);
  $3 = $2;
 } else {
  $3 = 0;
 }
 STACKTOP = sp;return ($3|0);
}
function _robust_open($z,$f,$m) {
 $z = $z|0;
 $f = $f|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd$05 = 0, $statbuf = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $statbuf = sp + 8|0;
 $0 = ($m|0)!=(0);
 $1 = $0 ? $m : 420;
 $2 = $f | 524288;
 while(1) {
  $3 = HEAP32[((37176 + 4|0))>>2]|0;
  $4 = (FUNCTION_TABLE_iiii[$3 & 255]($z,$2,$1)|0);
  $5 = ($4|0)<(0);
  if ($5) {
   $6 = (___errno_location()|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(4);
   if ($8) {
    continue;
   } else {
    $fd$05 = $4;
    label = 11;
    break;
   }
  }
  $9 = ($4|0)>(2);
  if ($9) {
   label = 6;
   break;
  }
  $10 = HEAP32[((37176 + 16|0))>>2]|0;
  (FUNCTION_TABLE_ii[$10 & 255]($4)|0);
  HEAP32[$vararg_buffer>>2] = $z;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  _sqlite3_log(28,37712,$vararg_buffer);
  $11 = HEAP32[((37176 + 4|0))>>2]|0;
  $12 = (FUNCTION_TABLE_iiii[$11 & 255](37760,$f,$m)|0);
  $13 = ($12|0)<(0);
  if ($13) {
   $fd$05 = -1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 6) {
  if (!($0)) {
   $fd$05 = $4;
   STACKTOP = sp;return ($fd$05|0);
  }
  $14 = HEAP32[((37176 + 64|0))>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 255]($4,$statbuf)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $fd$05 = $4;
   STACKTOP = sp;return ($fd$05|0);
  }
  $17 = (($statbuf) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if (!($19)) {
   $fd$05 = $4;
   STACKTOP = sp;return ($fd$05|0);
  }
  $20 = (($statbuf) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 511;
  $23 = ($22|0)==($m|0);
  if ($23) {
   $fd$05 = $4;
   STACKTOP = sp;return ($fd$05|0);
  }
  $24 = HEAP32[((37176 + 172|0))>>2]|0;
  (FUNCTION_TABLE_iii[$24 & 255]($4,$m)|0);
  $fd$05 = $4;
  STACKTOP = sp;return ($fd$05|0);
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return ($fd$05|0);
 }
 return 0|0;
}
function _unixShmSystemLock($pShmNode$0$3$val,$lockType,$ofst,$n) {
 $pShmNode$0$3$val = $pShmNode$0$3$val|0;
 $lockType = $lockType|0;
 $ofst = $ofst|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $f = 0, $rc$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $f = sp + 8|0;
 $0 = ($pShmNode$0$3$val|0)>(-1);
 if (!($0)) {
  $rc$0 = 0;
  STACKTOP = sp;return ($rc$0|0);
 }
 ;HEAP32[$f+0>>2]=0|0;HEAP32[$f+4>>2]=0|0;HEAP32[$f+8>>2]=0|0;HEAP32[$f+12>>2]=0|0;
 $1 = $lockType&65535;
 HEAP16[$f>>1] = $1;
 $2 = (($f) + 2|0);
 HEAP16[$2>>1] = 0;
 $3 = (($f) + 4|0);
 HEAP32[$3>>2] = $ofst;
 $4 = (($f) + 8|0);
 HEAP32[$4>>2] = $n;
 $5 = HEAP32[((37176 + 88|0))>>2]|0;
 HEAP32[$vararg_buffer>>2] = $f;
 $6 = (FUNCTION_TABLE_iiii[$5 & 255]($pShmNode$0$3$val,13,$vararg_buffer)|0);
 $7 = ($6|0)!=(-1);
 $8 = $7 ? 0 : 5;
 $rc$0 = $8;
 STACKTOP = sp;return ($rc$0|0);
}
function _unixOpenSharedMemory($pDbFd) {
 $pDbFd = $pDbFd|0;
 var $$01 = 0, $$idx$val = 0, $$idx2$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $openFlags$0 = 0, $pShmNode$1 = 0, $rc$3$ph = 0, $sStat = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $sStat = sp + 4|0;
 $0 = (_sqlite3_malloc(16)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$01 = 7;
  STACKTOP = sp;return ($$01|0);
 }
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $2 = (($pDbFd) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L4: do {
  if ($6) {
   $7 = HEAP32[((37176 + 64|0))>>2]|0;
   $8 = (($pDbFd) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (FUNCTION_TABLE_iii[$7 & 255]($9,$sStat)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    label = 5;
   } else {
    $12 = (($3) + 13|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     $rc$3$ph = 1802;
    } else {
     label = 5;
    }
   }
   do {
    if ((label|0) == 5) {
     $15 = (($pDbFd) + 32|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (_strlen(($16|0))|0);
     $18 = (($17) + 42)|0;
     $19 = (_sqlite3_malloc($18)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      $rc$3$ph = 7;
     } else {
      $21 = (($17) + 6)|0;
      _memset(($19|0),0,($18|0))|0;
      $22 = (($19) + 36|0);
      $23 = (($19) + 8|0);
      HEAP32[$23>>2] = $22;
      $24 = HEAP32[$15>>2]|0;
      HEAP32[$vararg_buffer>>2] = $24;
      (_sqlite3_snprintf($21,$22,37776,$vararg_buffer)|0);
      $25 = (($19) + 12|0);
      HEAP32[$25>>2] = -1;
      $26 = HEAP32[$2>>2]|0;
      $27 = (($26) + 20|0);
      HEAP32[$27>>2] = $19;
      $28 = HEAP32[$2>>2]|0;
      HEAP32[$19>>2] = $28;
      $29 = (($19) + 4|0);
      HEAP32[$29>>2] = (8);
      $30 = (($3) + 13|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $pShmNode$1 = $19;
       break L4;
      }
      $33 = HEAP32[$15>>2]|0;
      $34 = (_sqlite3_uri_boolean($33,37784,0)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $openFlags$0 = 66;
      } else {
       $36 = (($19) + 22|0);
       HEAP8[$36>>0] = 1;
       $openFlags$0 = 0;
      }
      $37 = (($sStat) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = $38 & 511;
      $40 = (_robust_open($22,$openFlags$0,$39)|0);
      HEAP32[$25>>2] = $40;
      $41 = ($40|0)<(0);
      if ($41) {
       _sqlite3CantopenError(27932);
       $42 = (_unixLogErrorAtLine(14,37504,$22,27932)|0);
       $rc$3$ph = $42;
       break;
      }
      $43 = HEAP32[((37176 + 244|0))>>2]|0;
      $44 = (($sStat) + 20|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($sStat) + 24|0);
      $47 = HEAP32[$46>>2]|0;
      (FUNCTION_TABLE_iiii[$43 & 255]($40,$45,$47)|0);
      $$idx2$val = HEAP32[$25>>2]|0;
      $48 = (_unixShmSystemLock($$idx2$val,1,128,1)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       $50 = HEAP32[$25>>2]|0;
       $51 = (_robust_ftruncate($50,0,0)|0);
       $52 = ($51|0)==(0);
       if (!($52)) {
        $53 = (_unixLogErrorAtLine(4618,37536,$22,27948)|0);
        $54 = ($53|0)==(0);
        if (!($54)) {
         $rc$3$ph = $53;
         break;
        }
       }
      }
      $$idx$val = HEAP32[$25>>2]|0;
      $55 = (_unixShmSystemLock($$idx$val,0,128,1)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       $pShmNode$1 = $19;
       break L4;
      } else {
       $rc$3$ph = $55;
      }
     }
    }
   } while(0);
   _unixShmPurge($pDbFd);
   _sqlite3_free($0);
   $$01 = $rc$3$ph;
   STACKTOP = sp;return ($$01|0);
  } else {
   $pShmNode$1 = $5;
  }
 } while(0);
 HEAP32[$0>>2] = $pShmNode$1;
 $57 = (($pShmNode$1) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$57>>2] = $59;
 $60 = (($pDbFd) + 36|0);
 HEAP32[$60>>2] = $0;
 $61 = (($pShmNode$1) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($0) + 4|0);
 HEAP32[$63>>2] = $62;
 HEAP32[$61>>2] = $0;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function _seekAndWriteFd($fd,$0,$1,$pBuf,$nBuf,$piErrno) {
 $fd = $fd|0;
 $0 = $0|0;
 $1 = $1|0;
 $pBuf = $pBuf|0;
 $nBuf = $nBuf|0;
 $piErrno = $piErrno|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $nBuf & 131071;
 while(1) {
  $3 = (_lseek(($fd|0),($0|0),0)|0);
  $4 = ($3|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = ($3|0)==($0|0);
  $7 = ($5|0)==($1|0);
  $8 = $6 & $7;
  if (!($8)) {
   label = 3;
   break;
  }
  $14 = HEAP32[((37176 + 136|0))>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 255]($fd,$pBuf,$2)|0);
  $16 = ($15|0)<(0);
  if (!($16)) {
   $$0 = $15;
   break;
  }
  $17 = (___errno_location()|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(4);
  if (!($19)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $9 = ($piErrno|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = ($3|0)==(-1);
   if ($10) {
    $11 = (___errno_location()|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12;
   } else {
    $13 = 0;
   }
   HEAP32[$piErrno>>2] = $13;
   $$0 = -1;
  }
 }
 else if ((label|0) == 9) {
  $20 = ($piErrno|0)==(0|0);
  if ($20) {
   $$0 = $15;
  } else {
   HEAP32[$piErrno>>2] = $18;
   $$0 = $15;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _robust_ftruncate($h,$0,$1) {
 $h = $h|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $2 = HEAP32[((37176 + 76|0))>>2]|0;
  $3 = (FUNCTION_TABLE_iii[$2 & 255]($h,$0)|0);
  $4 = ($3|0)<(0);
  if (!($4)) {
   label = 4;
   break;
  }
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(4);
  if (!($7)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function _fcntlSizeHint($pFile,$0,$1) {
 $pFile = $pFile|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 $2 = (($pFile) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = HEAP32[((37176 + 64|0))>>2]|0;
 $6 = (($pFile) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$5 & 255]($7,$buf)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$1 = 1802;
  STACKTOP = sp;return ($$1|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = (_i64Add(($0|0),($1|0),-1,-1)|0);
 $14 = tempRet0;
 $15 = (_i64Add(($13|0),($14|0),($10|0),($12|0))|0);
 $16 = tempRet0;
 $17 = (___remdi3(($15|0),($16|0),($10|0),($12|0))|0);
 $18 = tempRet0;
 $19 = (_i64Subtract(($15|0),($16|0),($17|0),($18|0))|0);
 $20 = tempRet0;
 $21 = (($buf) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)<(0);
 $24 = $23 << 31 >> 31;
 $25 = ($20|0)>($24|0);
 $26 = ($20|0)==($24|0);
 $27 = ($19>>>0)>($22>>>0);
 $28 = $26 & $27;
 $29 = $25 | $28;
 if (!($29)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $30 = (($buf) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$6>>2]|0;
 $33 = (_robust_ftruncate($32,$19,$20)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = (___errno_location()|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($pFile) + 20|0);
  HEAP32[$37>>2] = $36;
  $38 = (($pFile) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_unixLogErrorAtLine(1546,37536,$39,27385)|0);
  $$1 = $40;
  STACKTOP = sp;return ($$1|0);
 }
 $41 = HEAP32[$21>>2]|0;
 $42 = $31 << 1;
 $43 = (($42) + -1)|0;
 $44 = (($43) + ($41))|0;
 $45 = (($44|0) % ($31|0))&-1;
 $46 = $45 ^ -1;
 $47 = (($44) + ($46))|0;
 $48 = ($47|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = ($49|0)<($20|0);
 $51 = ($49|0)==($20|0);
 $52 = ($47>>>0)<($19>>>0);
 $53 = $51 & $52;
 $54 = $50 | $53;
 if (!($54)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $55 = ($31|0)<(0);
 $56 = $55 << 31 >> 31;
 $64 = $47;$65 = $49;
 while(1) {
  $66 = (_seekAndWrite($pFile,$64,$65,1728,1)|0);
  $67 = ($66|0)==(1);
  $61 = (_i64Add(($64|0),($65|0),($31|0),($56|0))|0);
  $58 = tempRet0;
  if (!($67)) {
   $$1 = 778;
   label = 10;
   break;
  }
  $57 = ($58|0)<($20|0);
  $59 = ($58|0)==($20|0);
  $60 = ($61>>>0)<($19>>>0);
  $62 = $59 & $60;
  $63 = $57 | $62;
  if ($63) {
   $64 = $61;$65 = $58;
  } else {
   $$1 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$1|0);
 }
 return 0|0;
}
function _unixModeBit($pFile,$mask,$pArg) {
 $pFile = $pFile|0;
 $mask = $mask|0;
 $pArg = $pArg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pArg>>2]|0;
 $1 = ($0|0)<(0);
 if ($1) {
  $2 = (($pFile) + 18|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3&65535;
  $5 = $mask&255;
  $6 = $4 & $5;
  $7 = ($6|0)!=(0);
  $8 = $7&1;
  HEAP32[$pArg>>2] = $8;
  STACKTOP = sp;return;
 }
 $9 = ($0|0)==(0);
 $10 = $mask&255;
 if ($9) {
  $11 = $10 ^ 65535;
  $12 = (($pFile) + 18|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = $14 & $11;
  $16 = $15&65535;
  HEAP16[$12>>1] = $16;
  STACKTOP = sp;return;
 } else {
  $17 = (($pFile) + 18|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = $19 | $10;
  $21 = $20&65535;
  HEAP16[$17>>1] = $21;
  STACKTOP = sp;return;
 }
}
function _unixGetTempname($nBuf,$zBuf) {
 $nBuf = $nBuf|0;
 $zBuf = $zBuf|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $j$02 = 0, $scevgep$sum = 0, $scevgep3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_unixTempFileDir()|0);
 $1 = ($0|0)==(0|0);
 $$ = $1 ? 19256 : $0;
 $2 = (_strlen(($$|0))|0);
 $3 = (($2) + 25)|0;
 $4 = ($3>>>0)<($nBuf>>>0);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($nBuf) + -18)|0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $$;
  (_sqlite3_snprintf($5,$zBuf,37864,$vararg_buffer)|0);
  $6 = (_strlen(($zBuf|0))|0);
  $7 = (($zBuf) + ($6)|0);
  _sqlite3_randomness(15,$7);
  $scevgep$sum = (($6) + 15)|0;
  $scevgep3 = (($zBuf) + ($scevgep$sum)|0);
  $9 = $7;$i$01 = 0;$j$02 = $6;
  while(1) {
   $8 = HEAP8[$9>>0]|0;
   $10 = (($8&255) % 62)&-1;
   $11 = $10&255;
   $12 = (37800 + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   HEAP8[$9>>0] = $13;
   $14 = (($i$01) + 1)|0;
   $15 = (($j$02) + 1)|0;
   $16 = (($zBuf) + ($15)|0);
   $exitcond = ($14|0)==(15);
   if ($exitcond) {
    break;
   } else {
    $9 = $16;$i$01 = $14;$j$02 = $15;
   }
  }
  HEAP8[$scevgep3>>0] = 0;
  $17 = (($6) + 16)|0;
  $18 = (($zBuf) + ($17)|0);
  HEAP8[$18>>0] = 0;
  $19 = HEAP32[((37176 + 28|0))>>2]|0;
  $20 = (FUNCTION_TABLE_iii[$19 & 255]($zBuf,0)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fileHasMoved($pFile) {
 $pFile = $pFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 $0 = (($pFile) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $15 = 0;
 } else {
  $3 = HEAP32[((37176 + 52|0))>>2]|0;
  $4 = (($pFile) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iii[$3 & 255]($5,$buf)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = (($buf) + 72|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)!=($12|0);
   $15 = $13;
  } else {
   $15 = 1;
  }
 }
 $14 = $15&1;
 STACKTOP = sp;return ($14|0);
}
function _unixTempFileDir() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf = 0, $i$02 = 0, $zDir$0$lcssa = 0, $zDir$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf = sp;
 $0 = HEAP32[1832>>2]|0;
 HEAP32[37880>>2] = $0;
 $1 = HEAP32[((37880 + 4|0))>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_getenv((37952|0))|0);
  HEAP32[((37880 + 4|0))>>2] = $3;
 }
 $4 = HEAP32[((37880 + 8|0))>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_getenv((37968|0))|0);
  HEAP32[((37880 + 8|0))>>2] = $6;
 }
 $7 = (($buf) + 12|0);
 $i$02 = 0;$zDir$01 = 0;
 while(1) {
  $8 = ($zDir$01|0)==(0|0);
  if (!($8)) {
   $9 = HEAP32[((37176 + 52|0))>>2]|0;
   $10 = (FUNCTION_TABLE_iii[$9 & 255]($zDir$01,$buf)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$7>>2]|0;
    $13 = $12 & 61440;
    $14 = ($13|0)==(16384);
    if ($14) {
     $15 = HEAP32[((37176 + 28|0))>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$15 & 255]($zDir$01,7)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $zDir$0$lcssa = $zDir$01;
      label = 11;
      break;
     }
    }
   }
  }
  $18 = (($i$02) + 1)|0;
  $19 = (37880 + ($i$02<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18>>>0)<(7);
  if ($21) {
   $i$02 = $18;$zDir$01 = $20;
  } else {
   $zDir$0$lcssa = $20;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($zDir$0$lcssa|0);
 }
 return 0|0;
}
function _seekAndWrite($id,$0,$1,$pBuf,$cnt) {
 $id = $id|0;
 $0 = $0|0;
 $1 = $1|0;
 $pBuf = $pBuf|0;
 $cnt = $cnt|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($id) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($id) + 20|0);
 $5 = (_seekAndWriteFd($3,$0,$1,$pBuf,$cnt,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _sqliteErrorFromPosixError($posixError) {
 $posixError = $posixError|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($posixError|0) {
 case 1:  {
  $$0 = 3;
  break;
 }
 case 13: case 37: case 4: case 16: case 110: case 11:  {
  $$0 = 5;
  break;
 }
 default: {
  $$0 = 3850;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _full_fsync($fd) {
 $fd = $fd|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fsync(($fd|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _seekAndRead($id,$0,$1,$pBuf,$cnt) {
 $id = $id|0;
 $0 = $0|0;
 $1 = $1|0;
 $pBuf = $pBuf|0;
 $cnt = $cnt|0;
 var $$0 = 0, $$01$ph = 0, $$02$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $got$1 = 0, $prior$0$ph = 0, $prior$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $cnt & 131071;
 $3 = (($id) + 12|0);
 $$01$ph = $2;$$02$ph = $pBuf;$11 = $1;$5 = $0;$prior$0$ph = 0;
 L1: while(1) {
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $6 = (_lseek(($4|0),($5|0),0)|0);
   $7 = ($6|0)<(0);
   $8 = $7 << 31 >> 31;
   $9 = ($6|0)==($5|0);
   $10 = ($8|0)==($11|0);
   $12 = $9 & $10;
   if (!($12)) {
    label = 4;
    break L1;
   }
   $18 = HEAP32[((37176 + 100|0))>>2]|0;
   $19 = HEAP32[$3>>2]|0;
   $20 = (FUNCTION_TABLE_iiii[$18 & 255]($19,$$02$ph,$$01$ph)|0);
   $21 = ($20|0)==($$01$ph|0);
   if ($21) {
    $got$1 = $$01$ph;$prior$2 = $prior$0$ph;
    break L1;
   }
   $22 = ($20|0)<(0);
   if (!($22)) {
    break;
   }
   $23 = (___errno_location()|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(4);
   if (!($25)) {
    label = 10;
    break L1;
   }
  }
  $27 = ($20|0)>(0);
  if (!($27)) {
   $got$1 = 0;$prior$2 = $prior$0$ph;
   break;
  }
  $28 = (($$01$ph) - ($20))|0;
  $29 = ($20|0)<(0);
  $30 = $29 << 31 >> 31;
  $31 = (_i64Add(($20|0),($30|0),($5|0),($11|0))|0);
  $32 = tempRet0;
  $33 = (($20) + ($prior$0$ph))|0;
  $34 = (($$02$ph) + ($20)|0);
  $$01$ph = $28;$$02$ph = $34;$11 = $32;$5 = $31;$prior$0$ph = $33;
 }
 if ((label|0) == 4) {
  $13 = ($6|0)==(-1);
  if ($13) {
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($id) + 20|0);
   HEAP32[$16>>2] = $15;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $17 = (($id) + 20|0);
   HEAP32[$17>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 10) {
  $26 = (($id) + 20|0);
  HEAP32[$26>>2] = $24;
  $got$1 = $20;$prior$2 = 0;
 }
 $35 = (($prior$2) + ($got$1))|0;
 $$0 = $35;
 STACKTOP = sp;return ($$0|0);
}
function _closeUnixFile($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($id) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  _robust_close($id,$1,25595);
  HEAP32[$0>>2] = (-1);
 }
 $3 = (($id) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _sqlite3_free($4);
 dest=$id+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _nolockIoFinderImpl($z,$p) {
 $z = $z|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (37992|0);
}
function _nolockClose($id) {
 $id = $id|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _closeUnixFile($id);
 STACKTOP = sp;return 0;
}
function _nolockLock($NotUsed,$NotUsed2) {
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _nolockUnlock($NotUsed,$NotUsed2) {
 $NotUsed = $NotUsed|0;
 $NotUsed2 = $NotUsed2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _nolockCheckReservedLock($NotUsed,$pResOut) {
 $NotUsed = $NotUsed|0;
 $pResOut = $pResOut|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pResOut>>2] = 0;
 STACKTOP = sp;return 0;
}
function _findReusableFd($zPath,$flags) {
 $zPath = $zPath|0;
 $flags = $flags|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pInode$0 = 0, $pInode$010 = 0, $pInode$09 = 0, $pUnused$1 = 0, $pp$05 = 0, $sStat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sStat = sp;
 $0 = HEAP32[((37176 + 52|0))>>2]|0;
 $1 = (FUNCTION_TABLE_iii[$0 & 255]($zPath,$sStat)|0);
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $pInode$09 = HEAP32[38328>>2]|0;
   $3 = ($pInode$09|0)==(0|0);
   if ($3) {
    $pUnused$1 = 0;
   } else {
    $4 = HEAP32[$sStat>>2]|0;
    $5 = (($sStat) + 72|0);
    $6 = HEAP32[$5>>2]|0;
    $pInode$010 = $pInode$09;
    while(1) {
     $7 = HEAP32[$pInode$010>>2]|0;
     $8 = ($7|0)==($4|0);
     if ($8) {
      $9 = (($pInode$010) + 4|0);
      $10 = HEAP32[$9>>2]|0;
      $11 = ($10|0)==($6|0);
      if ($11) {
       break;
      }
     }
     $12 = (($pInode$010) + 32|0);
     $pInode$0 = HEAP32[$12>>2]|0;
     $13 = ($pInode$0|0)==(0|0);
     if ($13) {
      $pUnused$1 = 0;
      break L1;
     } else {
      $pInode$010 = $pInode$0;
     }
    }
    $14 = (($pInode$010) + 28|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $pUnused$1 = 0;
    } else {
     $$pr = $15;$pp$05 = $14;
     while(1) {
      $19 = (($$pr) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($flags|0);
      $22 = (($$pr) + 8|0);
      $18 = HEAP32[$22>>2]|0;
      if ($21) {
       break;
      }
      $17 = ($18|0)==(0|0);
      if ($17) {
       $pUnused$1 = 0;
       break L1;
      } else {
       $$pr = $18;$pp$05 = $22;
      }
     }
     HEAP32[$pp$05>>2] = $18;
     $pUnused$1 = $$pr;
    }
   }
  } else {
   $pUnused$1 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($pUnused$1|0);
}
function _findCreateFileMode($zPath,$flags,$pMode,$pUid,$pGid) {
 $zPath = $zPath|0;
 $flags = $flags|0;
 $pMode = $pMode|0;
 $pUid = $pUid|0;
 $pGid = $pGid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nDb$0 = 0;
 var $nDb$0$in = 0, $rc$1 = 0, $sStat = 0, $zDb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $zDb = sp + 76|0;
 $sStat = sp;
 HEAP32[$pMode>>2] = 0;
 HEAP32[$pUid>>2] = 0;
 HEAP32[$pGid>>2] = 0;
 $0 = $flags & 526336;
 $1 = ($0|0)==(0);
 if ($1) {
  $17 = $flags & 8;
  $18 = ($17|0)==(0);
  if ($18) {
   $rc$1 = 0;
   STACKTOP = sp;return ($rc$1|0);
  }
  HEAP32[$pMode>>2] = 384;
  $rc$1 = 0;
  STACKTOP = sp;return ($rc$1|0);
 }
 $2 = (_sqlite3Strlen30($zPath)|0);
 $nDb$0$in = $2;
 while(1) {
  $nDb$0 = (($nDb$0$in) + -1)|0;
  $3 = (($zPath) + ($nDb$0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(45);
  if ($5) {
   break;
  } else {
   $nDb$0$in = $nDb$0;
  }
 }
 _memcpy(($zDb|0),($zPath|0),($nDb$0|0))|0;
 $6 = (($zDb) + ($nDb$0)|0);
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[((37176 + 52|0))>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 255]($zDb,$sStat)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $rc$1 = 1802;
  STACKTOP = sp;return ($rc$1|0);
 }
 $10 = (($sStat) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 511;
 HEAP32[$pMode>>2] = $12;
 $13 = (($sStat) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$pUid>>2] = $14;
 $15 = (($sStat) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$pGid>>2] = $16;
 $rc$1 = 0;
 STACKTOP = sp;return ($rc$1|0);
}
function _fillInUnixFile($pVfs,$h,$pId,$zFilename,$ctrlFlags) {
 $pVfs = $pVfs|0;
 $h = $h|0;
 $pId = $pId|0;
 $zFilename = $zFilename|0;
 $ctrlFlags = $ctrlFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$c = 0, $pLockingStyle$01$ph = 0, $pLockingStyle$015 = 0, $rc$16 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($pId) + 12|0);
 $h$c = $h;
 HEAP32[$0>>2] = $h$c;
 $1 = (($pId) + 4|0);
 HEAP32[$1>>2] = $pVfs;
 $2 = (($pId) + 32|0);
 HEAP32[$2>>2] = $zFilename;
 $3 = $ctrlFlags&65535;
 $4 = $3 & 255;
 $5 = (($pId) + 18|0);
 HEAP16[$5>>1] = $4;
 $6 = $ctrlFlags & 64;
 $7 = ($6|0)!=(0);
 $8 = $7 ? $zFilename : 0;
 $9 = (_sqlite3_uri_boolean($8,38112,1)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP16[$5>>1]|0;
  $12 = $11&65535;
  $13 = $12 | 16;
  $14 = $13&65535;
  HEAP16[$5>>1] = $14;
 }
 $15 = (($pVfs) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_strcmp($16,1632)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP16[$5>>1]|0;
  $20 = $19&65535;
  $21 = $20 | 1;
  $22 = $21&65535;
  HEAP16[$5>>1] = $22;
 }
 $23 = $ctrlFlags & 128;
 $24 = ($23|0)==(0);
 do {
  if ($24) {
   $25 = (($pVfs) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iii[$27 & 255]($zFilename,$pId)|0);
   $29 = ($28|0)==(38120|0);
   if ($29) {
    $30 = (($pId) + 8|0);
    $31 = (_findInodeInfo($pId,$30)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $pLockingStyle$01$ph = 38120;
     label = 12;
     break;
    }
    _robust_close($pId,$h,28926);
    $33 = (($pId) + 20|0);
    HEAP32[$33>>2] = 0;
    $rc$16 = $31;
    STACKTOP = sp;return ($rc$16|0);
   }
   $34 = ($28|0)==(37096|0);
   if ($34) {
    $35 = (_strlen(($zFilename|0))|0);
    $36 = (($35) + 6)|0;
    $37 = (_sqlite3_malloc($36)|0);
    $38 = ($37|0)==(0|0);
    if (!($38)) {
     HEAP32[$vararg_buffer>>2] = $zFilename;
     (_sqlite3_snprintf($36,$37,38200,$vararg_buffer)|0);
     $39 = (($pId) + 24|0);
     HEAP32[$39>>2] = $37;
     $40 = (($pId) + 20|0);
     HEAP32[$40>>2] = 0;
     $pLockingStyle$015 = 37096;
     break;
    }
    $42 = (($pId) + 24|0);
    HEAP32[$42>>2] = 0;
    $43 = (($pId) + 20|0);
    HEAP32[$43>>2] = 0;
    $44 = ($h|0)>(-1);
    if (!($44)) {
     $rc$16 = 7;
     STACKTOP = sp;return ($rc$16|0);
    }
    _robust_close($pId,$h,29011);
    $rc$16 = 7;
    STACKTOP = sp;return ($rc$16|0);
   } else {
    $pLockingStyle$01$ph = $28;
    label = 12;
   }
  } else {
   $pLockingStyle$01$ph = 37992;
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $41 = (($pId) + 20|0);
  HEAP32[$41>>2] = 0;
  $pLockingStyle$015 = $pLockingStyle$01$ph;
 }
 HEAP32[$pId>>2] = $pLockingStyle$015;
 _verifyDbFile($pId);
 $rc$16 = 0;
 STACKTOP = sp;return ($rc$16|0);
}
function _findInodeInfo($pFile,$ppInode) {
 $pFile = $pFile|0;
 $ppInode = $ppInode|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond3 = 0, $fileId = 0, $pInode$0 = 0, $pInode$02 = 0, $pInode$04 = 0, $pInode$1 = 0, $statbuf = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $fileId = sp;
 $statbuf = sp + 8|0;
 $0 = (($pFile) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[((37176 + 64|0))>>2]|0;
 $3 = (FUNCTION_TABLE_iii[$2 & 255]($1,$statbuf)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($pFile) + 20|0);
  HEAP32[$7>>2] = $6;
  $8 = ($6|0)==(75);
  $$ = $8 ? 22 : 10;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = $fileId;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$statbuf>>2]|0;
 HEAP32[$fileId>>2] = $13;
 $14 = (($statbuf) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($fileId) + 4|0);
 HEAP32[$16>>2] = $15;
 $pInode$02 = HEAP32[38328>>2]|0;
 $cond3 = ($pInode$02|0)==(0|0);
 L5: do {
  if ($cond3) {
   label = 6;
  } else {
   $pInode$04 = $pInode$02;
   while(1) {
    $18 = (_memcmp($fileId,$pInode$04,8)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    }
    $17 = (($pInode$04) + 32|0);
    $pInode$0 = HEAP32[$17>>2]|0;
    $cond = ($pInode$0|0)==(0|0);
    if ($cond) {
     label = 6;
     break L5;
    } else {
     $pInode$04 = $pInode$0;
    }
   }
   $39 = (($pInode$04) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$39>>2] = $41;
   $pInode$1 = $pInode$04;
  }
 } while(0);
 if ((label|0) == 6) {
  $20 = (_sqlite3_malloc(40)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
  dest=$20+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $22 = $fileId;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $20;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $32 = (($20) + 16|0);
  HEAP32[$32>>2] = 1;
  $33 = HEAP32[38328>>2]|0;
  $34 = (($20) + 32|0);
  HEAP32[$34>>2] = $33;
  $35 = (($20) + 36|0);
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[38328>>2]|0;
  $37 = ($36|0)==(0|0);
  if (!($37)) {
   $38 = (($36) + 36|0);
   HEAP32[$38>>2] = $20;
  }
  HEAP32[38328>>2] = $20;
  $pInode$1 = $20;
 }
 HEAP32[$ppInode>>2] = $pInode$1;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _verifyDbFile($pFile) {
 $pFile = $pFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 28|0;
 $0 = (($pFile) + 18|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 & 256;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[((37176 + 64|0))>>2]|0;
 $5 = (($pFile) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$4 & 255]($6,$buf)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (($pFile) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  _sqlite3_log(28,38208,$vararg_buffer);
  $11 = HEAP16[$0>>1]|0;
  $12 = $11&65535;
  $13 = $12 | 256;
  $14 = $13&65535;
  HEAP16[$0>>1] = $14;
  STACKTOP = sp;return;
 }
 $15 = (($buf) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP16[$0>>1]|0;
  $19 = $18 & 32;
  $20 = ($19<<16>>16)==(0);
  if ($20) {
   $21 = (($pFile) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $22;
   _sqlite3_log(28,38232,$vararg_buffer1);
   $23 = HEAP16[$0>>1]|0;
   $24 = $23&65535;
   $25 = $24 | 256;
   $26 = $25&65535;
   HEAP16[$0>>1] = $26;
   STACKTOP = sp;return;
  }
 } else {
  $27 = ($16>>>0)>(1);
  if ($27) {
   $28 = (($pFile) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $29;
   _sqlite3_log(28,38264,$vararg_buffer4);
   $30 = HEAP16[$0>>1]|0;
   $31 = $30&65535;
   $32 = $31 | 256;
   $33 = $32&65535;
   HEAP16[$0>>1] = $33;
   STACKTOP = sp;return;
  }
 }
 $34 = (_fileHasMoved($pFile)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = (($pFile) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $37;
 _sqlite3_log(28,38296,$vararg_buffer7);
 $38 = HEAP16[$0>>1]|0;
 $39 = $38&65535;
 $40 = $39 | 256;
 $41 = $40&65535;
 HEAP16[$0>>1] = $41;
 STACKTOP = sp;return;
}
function _unixClose($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _verifyDbFile($id);
 (_unixUnlock($id,0)|0);
 $0 = (($id) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _setPendingFd($id);
  }
 }
 _releaseInodeInfo($id);
 _closeUnixFile($id);
 STACKTOP = sp;return 0;
}
function _unixLock($id,$eFileLock) {
 $id = $id|0;
 $eFileLock = $eFileLock|0;
 var $$0 = 0, $$c = 0, $$c1 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $8 = 0, $9 = 0, $lock = 0, $or$cond = 0, $or$cond2 = 0, $rc$0 = 0, $rc$15 = 0, $rc$213 = 0, $rc$21314 = 0, $storemerge = 0, $switch = 0, $tErrno$0 = 0, $tErrno$1$c = 0, $tErrno$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lock = sp;
 $0 = (($id) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ($2|0)<($eFileLock|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($id) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($1<<24>>24)==($7<<24>>24);
 if (!($8)) {
  $9 = ($7&255)>(2);
  $10 = ($eFileLock|0)>(1);
  $or$cond = $9 | $10;
  if ($or$cond) {
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $11 = ($eFileLock|0)==(1);
 do {
  if ($11) {
   $$off = (($7) + -1)<<24>>24;
   $switch = ($$off&255)<(2);
   if (!($switch)) {
    $12 = (($lock) + 8|0);
    HEAP32[$12>>2] = 1;
    $13 = (($lock) + 2|0);
    HEAP16[$13>>1] = 0;
    $77 = $12;
    label = 10;
    break;
   }
   HEAP8[$0>>0] = 1;
   $14 = (($5) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$14>>2] = $16;
   $17 = (($5) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[$17>>2] = $19;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $20 = (($lock) + 8|0);
   HEAP32[$20>>2] = 1;
   $21 = (($lock) + 2|0);
   HEAP16[$21>>1] = 0;
   $22 = ($eFileLock|0)==(4);
   if ($22) {
    $23 = ($1&255)<(3);
    if ($23) {
     $77 = $20;
     label = 10;
    } else {
     $38 = $20;
     label = 13;
    }
   } else {
    $67 = $20;
    label = 21;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $24 = $11&1;
  $25 = $24 ^ 1;
  HEAP16[$lock>>1] = $25;
  $26 = HEAP32[1648>>2]|0;
  $27 = (($lock) + 4|0);
  HEAP32[$27>>2] = $26;
  $28 = (_unixFileLock($id,$lock)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $38 = $77;
   label = 13;
  } else {
   $30 = (___errno_location()|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_sqliteErrorFromPosixError($31)|0);
   $33 = ($32|0)==(5);
   if ($33) {
    $$0 = 5;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = (($id) + 20|0);
   $$c1 = $31;
   HEAP32[$34>>2] = $$c1;
   $$0 = $32;
   STACKTOP = sp;return ($$0|0);
  }
 }
 L23: do {
  if ((label|0) == 13) {
   if ($11) {
    $35 = HEAP32[1648>>2]|0;
    $36 = (($35) + 2)|0;
    $37 = (($lock) + 4|0);
    HEAP32[$37>>2] = $36;
    HEAP32[$38>>2] = 510;
    $39 = (_unixFileLock($id,$lock)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $rc$0 = 0;$tErrno$0 = 0;
    } else {
     $41 = (___errno_location()|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (_sqliteErrorFromPosixError($42)|0);
     $rc$0 = $43;$tErrno$0 = $42;
    }
    $44 = HEAP32[1648>>2]|0;
    HEAP32[$37>>2] = $44;
    HEAP32[$38>>2] = 1;
    HEAP16[$lock>>1] = 2;
    $45 = (_unixFileLock($id,$lock)|0);
    $46 = ($45|0)!=(0);
    $47 = ($rc$0|0)==(0);
    $or$cond2 = $46 & $47;
    do {
     if ($or$cond2) {
      $48 = (___errno_location()|0);
      $49 = HEAP32[$48>>2]|0;
      $rc$15 = 2058;$tErrno$16 = $49;
     } else {
      if ((($rc$0|0) == 0)) {
       HEAP8[$0>>0] = 1;
       $51 = (($5) + 24|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($52) + 1)|0;
       HEAP32[$51>>2] = $53;
       $54 = (($5) + 8|0);
       HEAP32[$54>>2] = 1;
       break L23;
      } else if ((($rc$0|0) == 5)) {
       $$0 = 5;
       STACKTOP = sp;return ($$0|0);
      } else {
       $rc$15 = $rc$0;$tErrno$16 = $tErrno$0;
       break;
      }
     }
    } while(0);
    $50 = (($id) + 20|0);
    $tErrno$1$c = $tErrno$16;
    HEAP32[$50>>2] = $tErrno$1$c;
    $$0 = $rc$15;
    STACKTOP = sp;return ($$0|0);
   } else {
    $67 = $38;
    label = 21;
   }
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $55 = ($eFileLock|0)==(4);
   if ($55) {
    $56 = (($5) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)>(1);
    if ($58) {
     $rc$21314 = 5;
    } else {
     HEAP16[$lock>>1] = 1;
     $59 = HEAP32[1648>>2]|0;
     $65 = $59;
     label = 26;
    }
   } else {
    HEAP16[$lock>>1] = 1;
    $60 = ($eFileLock|0)==(2);
    $61 = HEAP32[1648>>2]|0;
    if ($60) {
     $62 = (($61) + 1)|0;
     $63 = (($lock) + 4|0);
     HEAP32[$63>>2] = $62;
     $storemerge = 1;
     label = 27;
    } else {
     $65 = $61;
     label = 26;
    }
   }
   if ((label|0) == 26) {
    $64 = (($65) + 2)|0;
    $66 = (($lock) + 4|0);
    HEAP32[$66>>2] = $64;
    $storemerge = 510;
    label = 27;
   }
   if ((label|0) == 27) {
    HEAP32[$67>>2] = $storemerge;
    $68 = (_unixFileLock($id,$lock)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     break;
    }
    $70 = (___errno_location()|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (_sqliteErrorFromPosixError($71)|0);
    $73 = ($72|0)==(5);
    if ($73) {
     $rc$213 = 5;
    } else {
     $74 = (($id) + 20|0);
     $$c = $71;
     HEAP32[$74>>2] = $$c;
     $75 = ($72|0)==(0);
     if ($75) {
      break;
     } else {
      $rc$213 = $72;
     }
    }
    if ($55) {
     $rc$21314 = $rc$213;
    } else {
     $$0 = $rc$213;
     STACKTOP = sp;return ($$0|0);
    }
   }
   HEAP8[$0>>0] = 3;
   HEAP8[$6>>0] = 3;
   $$0 = $rc$21314;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $76 = $eFileLock&255;
 HEAP8[$0>>0] = $76;
 HEAP8[$6>>0] = $76;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _unixUnlock($id,$eFileLock) {
 $id = $id|0;
 $eFileLock = $eFileLock|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_posixUnlock($id,$eFileLock)|0);
 STACKTOP = sp;return ($0|0);
}
function _unixCheckReservedLock($id,$pResOut) {
 $id = $id|0;
 $pResOut = $pResOut|0;
 var $$ = 0, $$$ = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lock = 0, $rc$0 = 0, $reserved$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $lock = sp + 8|0;
 $0 = (($id) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)>(1);
 $$ = $4&1;
 do {
  if ($4) {
   $rc$0 = 0;$reserved$1 = 1;
  } else {
   $5 = (($1) + 13|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $8 = (($lock) + 2|0);
    HEAP16[$8>>1] = 0;
    $9 = HEAP32[1648>>2]|0;
    $10 = (($9) + 1)|0;
    $11 = (($lock) + 4|0);
    HEAP32[$11>>2] = $10;
    $12 = (($lock) + 8|0);
    HEAP32[$12>>2] = 1;
    HEAP16[$lock>>1] = 1;
    $13 = HEAP32[((37176 + 88|0))>>2]|0;
    $14 = (($id) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$vararg_buffer>>2] = $lock;
    $16 = (FUNCTION_TABLE_iiii[$13 & 255]($15,12,$vararg_buffer)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $21 = HEAP16[$lock>>1]|0;
     $22 = ($21<<16>>16)==(2);
     $$$ = $22 ? $$ : 1;
     $rc$0 = 0;$reserved$1 = $$$;
     break;
    } else {
     $18 = (___errno_location()|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($id) + 20|0);
     $$c = $19;
     HEAP32[$20>>2] = $$c;
     $rc$0 = 3594;$reserved$1 = $$;
     break;
    }
   } else {
    $rc$0 = 0;$reserved$1 = 0;
   }
  }
 } while(0);
 HEAP32[$pResOut>>2] = $reserved$1;
 STACKTOP = sp;return ($rc$0|0);
}
function _posixUnlock($id,$eFileLock) {
 $id = $id|0;
 $eFileLock = $eFileLock|0;
 var $$0 = 0, $$c = 0, $$c1 = 0, $$c2 = 0, $$pre$phi10Z2D = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lock = 0, $rc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lock = sp;
 $0 = (($id) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ($2|0)>($eFileLock|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($id) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1&255)>(1);
 do {
  if ($6) {
   $7 = ($eFileLock|0)==(1);
   if ($7) {
    HEAP16[$lock>>1] = 0;
    $8 = (($lock) + 2|0);
    HEAP16[$8>>1] = 0;
    $9 = HEAP32[1648>>2]|0;
    $10 = (($9) + 2)|0;
    $11 = (($lock) + 4|0);
    HEAP32[$11>>2] = $10;
    $12 = (($lock) + 8|0);
    HEAP32[$12>>2] = 510;
    $13 = (_unixFileLock($id,$lock)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$pre$phi10Z2D = $12;$$pre$phi6Z2D = $8;$$pre$phi8Z2D = $11;
    } else {
     $15 = (___errno_location()|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($id) + 20|0);
     $$c2 = $16;
     HEAP32[$17>>2] = $$c2;
     $$0 = 2314;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$pre5 = (($lock) + 2|0);
    $$pre7 = (($lock) + 4|0);
    $$pre9 = (($lock) + 8|0);
    $$pre$phi10Z2D = $$pre9;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $$pre7;
   }
   HEAP16[$lock>>1] = 2;
   HEAP16[$$pre$phi6Z2D>>1] = 0;
   $18 = HEAP32[1648>>2]|0;
   HEAP32[$$pre$phi8Z2D>>2] = $18;
   HEAP32[$$pre$phi10Z2D>>2] = 2;
   $19 = (_unixFileLock($id,$lock)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (($5) + 12|0);
    HEAP8[$21>>0] = 1;
    break;
   }
   $22 = (___errno_location()|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($id) + 20|0);
   $$c1 = $23;
   HEAP32[$24>>2] = $$c1;
   $$0 = 2058;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $25 = ($eFileLock|0)==(0);
 if ($25) {
  $26 = (($5) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($28|0)==(0);
  do {
   if ($29) {
    HEAP16[$lock>>1] = 2;
    $30 = (($lock) + 2|0);
    HEAP16[$30>>1] = 0;
    $31 = (($lock) + 8|0);
    HEAP32[$31>>2] = 0;
    $32 = (($lock) + 4|0);
    HEAP32[$32>>2] = 0;
    $33 = (_unixFileLock($id,$lock)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = (($5) + 12|0);
     HEAP8[$35>>0] = 0;
     $rc$0 = 0;
     break;
    } else {
     $36 = (___errno_location()|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($id) + 20|0);
     $$c = $37;
     HEAP32[$38>>2] = $$c;
     $39 = (($5) + 12|0);
     HEAP8[$39>>0] = 0;
     HEAP8[$0>>0] = 0;
     $rc$0 = 2058;
     break;
    }
   } else {
    $rc$0 = 0;
   }
  } while(0);
  $40 = (($5) + 24|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + -1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ($42|0)==(0);
  if ($43) {
   _closePendingFds($id);
  }
  $44 = ($rc$0|0)==(0);
  if (!($44)) {
   $$0 = $rc$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $45 = $eFileLock&255;
 HEAP8[$0>>0] = $45;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _unixFileLock($pFile,$pLock) {
 $pFile = $pFile|0;
 $pLock = $pLock|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lock = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lock = sp + 16|0;
 $0 = (($pFile) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pFile) + 18|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 1;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  $6 = (($1) + 13|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = $3 & 2;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $11 = (($1) + 13|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $14 = (($lock) + 2|0);
   HEAP16[$14>>1] = 0;
   $15 = HEAP32[1648>>2]|0;
   $16 = (($15) + 2)|0;
   $17 = (($lock) + 4|0);
   HEAP32[$17>>2] = $16;
   $18 = (($lock) + 8|0);
   HEAP32[$18>>2] = 510;
   HEAP16[$lock>>1] = 1;
   $19 = HEAP32[((37176 + 88|0))>>2]|0;
   $20 = (($pFile) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer>>2] = $lock;
   $22 = (FUNCTION_TABLE_iiii[$19 & 255]($21,13,$vararg_buffer)|0);
   $23 = ($22|0)<(0);
   if ($23) {
    $$0 = $22;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$11>>0] = 1;
   $24 = (($1) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[$24>>2] = $26;
   $$0 = $22;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $27 = HEAP32[((37176 + 88|0))>>2]|0;
 $28 = (($pFile) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $pLock;
 $30 = (FUNCTION_TABLE_iiii[$27 & 255]($29,13,$vararg_buffer1)|0);
 $$0 = $30;
 STACKTOP = sp;return ($$0|0);
}
function _closePendingFds($pFile) {
 $pFile = $pFile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFile) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $p$01 = $3;
 }
 while(1) {
  $5 = (($p$01) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$p$01>>2]|0;
  _robust_close($pFile,$7,24861);
  _sqlite3_free($p$01);
  $8 = ($6|0)==(0|0);
  if ($8) {
   break;
  } else {
   $p$01 = $6;
  }
 }
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _setPendingFd($pFile) {
 $pFile = $pFile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFile) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($pFile) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 8|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$4>>2] = $3;
 $7 = (($pFile) + 12|0);
 HEAP32[$7>>2] = -1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _releaseInodeInfo($pFile) {
 $pFile = $pFile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pFile) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($1) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 _closePendingFds($pFile);
 $7 = (($1) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = (($1) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 if ($9) {
  HEAP32[38328>>2] = $11;
 } else {
  $12 = (($8) + 32|0);
  HEAP32[$12>>2] = $11;
 }
 $13 = HEAP32[$10>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$7>>2]|0;
  $16 = (($13) + 36|0);
  HEAP32[$16>>2] = $15;
 }
 _sqlite3_free($1);
 STACKTOP = sp;return;
}
function _posixIoFinderImpl($z,$p) {
 $z = $z|0;
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (38120|0);
}
function _getIntArg($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 if (!($3)) {
  $11 = 0;$12 = 0;
  tempRet0 = $11;
  STACKTOP = sp;return ($12|0);
 }
 $4 = (($2) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = (($p) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3_value_int64($8)|0);
 $10 = tempRet0;
 $11 = $10;$12 = $9;
 tempRet0 = $11;
 STACKTOP = sp;return ($12|0);
}
function _getDoubleArg($p) {
 $p = $p|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 if (!($3)) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $4 = (($2) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = (($p) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+_sqlite3_value_double($8));
 $$0 = $9;
 STACKTOP = sp;return (+$$0);
}
function _et_getdigit($val,$cnt) {
 $val = $val|0;
 $cnt = $cnt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cnt>>2]|0;
 $1 = ($0|0)<(1);
 if ($1) {
  $$0 = 48;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) + -1)|0;
 HEAP32[$cnt>>2] = $2;
 $3 = +HEAPF64[$val>>3];
 $4 = (~~(($3)));
 $5 = (+($4|0));
 $6 = (($4) + 48)|0;
 $7 = $3 - $5;
 $8 = $7 * 10.0;
 HEAPF64[$val>>3] = $8;
 $9 = $6&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _getTextArg($p) {
 $p = $p|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($2) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = (($p) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_sqlite3_value_text($8)|0);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _sqlite3AppendSpace($pAccum,$N) {
 $pAccum = $pAccum|0;
 $N = $N|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($N|0)>(28);
 if ($0) {
  $$01 = $N;
  while(1) {
   _sqlite3StrAccumAppend($pAccum,38592,29);
   $1 = (($$01) + -29)|0;
   $2 = ($1|0)>(28);
   if ($2) {
    $$01 = $1;
   } else {
    $$0$lcssa = $1;
    break;
   }
  }
 } else {
  $$0$lcssa = $N;
 }
 $3 = ($$0$lcssa|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 _sqlite3StrAccumAppend($pAccum,38592,$$0$lcssa);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[38712>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((38712 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((38712 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[38712>>2] = $22;
     } else {
      $23 = HEAP32[((38712 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((38712 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((38712 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((38712 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[38712>>2] = $74;
      } else {
       $75 = HEAP32[((38712 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((38712 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((38712 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((38712 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[38712>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[38712>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((38712 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((38712 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((38712 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((38712 + 8|0))>>2] = $81;
     HEAP32[((38712 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((38712 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((38712 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((38712 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((38712 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((38712 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((38712 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((38712 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((38712 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((38712 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((38712 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((38712 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((38712 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((38712 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[38712>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[38712>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((38712 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((38712 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((38712 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((38712 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((38712 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((38712 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((38712 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L9: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((38712 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((38712 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((38712 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((38712 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((38712 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((38712 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((38712 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((38712 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((38712 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((38712 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((38712 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[38712>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[38712>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((38712 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((38712 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((38712 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((38712 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((38712 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((38712 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L107: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L107;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((38712 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L87;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((38712 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((38712 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((38712 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((38712 + 20|0))>>2] = $516;
   HEAP32[((38712 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((38712 + 8|0))>>2] = 0;
   HEAP32[((38712 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((38712 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((38712 + 12|0))>>2] = $530;
  $531 = HEAP32[((38712 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((38712 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[39184>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((39184 + 8|0))>>2] = $540;
    HEAP32[((39184 + 4|0))>>2] = $540;
    HEAP32[((39184 + 12|0))>>2] = -1;
    HEAP32[((39184 + 16|0))>>2] = -1;
    HEAP32[((39184 + 20|0))>>2] = 0;
    HEAP32[((38712 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[39184>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((39184 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((38712 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((38712 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((38712 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((38712 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((38712 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((38712 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((39184 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((38712 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((38712 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((39184 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((38712 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((38712 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((38712 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((38712 + 432|0))>>2] = $633;
  $634 = HEAP32[((38712 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((38712 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((38712 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((38712 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((38712 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((38712 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((38712 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((38712 + 460|0))>>2] = 0;
    $641 = HEAP32[39184>>2]|0;
    HEAP32[((38712 + 36|0))>>2] = $641;
    HEAP32[((38712 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((38712 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((38712 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((38712 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((38712 + 24|0))>>2] = $654;
    HEAP32[((38712 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((39184 + 16|0))>>2]|0;
    HEAP32[((38712 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((38712 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((38712 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((38712 + 24|0))>>2] = $684;
       HEAP32[((38712 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((39184 + 16|0))>>2]|0;
       HEAP32[((38712 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((38712 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((38712 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((38712 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((38712 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((38712 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((38712 + 12|0))>>2] = $732;
        HEAP32[((38712 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((38712 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((38712 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((38712 + 8|0))>>2] = $738;
         HEAP32[((38712 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((38712 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((38712 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[38712>>2]|0;
            $765 = $764 & $763;
            HEAP32[38712>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((38712 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((38712 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((38712 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((38712 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((38712 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((38712 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((38712 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((38712 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((38712 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((38712 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((38712 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[38712>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[38712>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((38712 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((38712 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((38712 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((38712 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((38712 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((38712 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((38712 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((38712 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((38712 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((38712 + 24|0))>>2] = $958;
    HEAP32[((38712 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((39184 + 16|0))>>2]|0;
    HEAP32[((38712 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((38712 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((38712 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((38712 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((38712 + 448|0))+12>>2]|0;
    HEAP32[((38712 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((38712 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((38712 + 460|0))>>2] = 0;
    HEAP32[((38712 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((38712 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[38712>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[38712>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((38712 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((38712 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((38712 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((38712 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((38712 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((38712 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((38712 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((38712 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((38712 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((38712 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((38712 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((38712 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((38712 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((38712 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((38712 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((38712 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[38712>>2]|0;
     $36 = $35 & $34;
     HEAP32[38712>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((38712 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((38712 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((38712 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((38712 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((38712 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((38712 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((38712 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((38712 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((38712 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((38712 + 12|0))>>2] = $122;
   HEAP32[((38712 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((38712 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((38712 + 20|0))>>2] = 0;
   HEAP32[((38712 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((38712 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((38712 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((38712 + 8|0))>>2] = $130;
   HEAP32[((38712 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((38712 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((38712 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[38712>>2]|0;
     $154 = $153 & $152;
     HEAP32[38712>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((38712 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((38712 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((38712 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((38712 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((38712 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((38712 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((38712 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((38712 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((38712 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((38712 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((38712 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((38712 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((38712 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[38712>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[38712>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((38712 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((38712 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((38712 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((38712 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((38712 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((38712 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((38712 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((38712 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((38712 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((38712 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((38712 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((38712 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((38712 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((39184 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((38712 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((38712 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((38712 + 24|0))>>2] = $38;
  HEAP32[((38712 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((38712 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((38712 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((38712 + 8|0))>>2] = $storemerge21;
  HEAP32[((38712 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((38712 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[38712>>2]|0;
    $90 = $89 & $88;
    HEAP32[38712>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((38712 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((38712 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((38712 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((38712 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((38712 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((38712 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((38712 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((38712 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((38712 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((38712 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((38712 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[38712>>2]|0;
     $32 = $31 & $30;
     HEAP32[38712>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((38712 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((38712 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((38712 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((38712 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((38712 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((38712 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((38712 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((38712 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((38712 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((38712 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((38712 + 12|0))>>2] = $117;
   HEAP32[((38712 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((38712 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((38712 + 20|0))>>2] = 0;
   HEAP32[((38712 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((38712 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((38712 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((38712 + 8|0))>>2] = $125;
   HEAP32[((38712 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((38712 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[38712>>2]|0;
     $148 = $147 & $146;
     HEAP32[38712>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((38712 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((38712 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((38712 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((38712 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((38712 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((38712 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((38712 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((38712 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((38712 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((38712 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[38712>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[38712>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((38712 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((38712 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((38712 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((38712 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((38712 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((38712 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((38712 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((38712 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond5 = $2 | $3;
 $4 = ($1<<24>>24)==(0);
 $or$cond36 = $or$cond5 | $4;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
  $12 = $$lcssa&255;
  $13 = $$lcssa4&255;
  $14 = (($12) - ($13))|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $$027 = $l;$$08 = $r;
 }
 while(1) {
  $5 = (($$027) + 1|0);
  $6 = (($$08) + 1|0);
  $7 = HEAP8[$5>>0]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($7<<24>>24)!=($8<<24>>24);
  $10 = ($7<<24>>24)==(0);
  $or$cond = $9 | $10;
  $11 = ($8<<24>>24)==(0);
  $or$cond3 = $or$cond | $11;
  if ($or$cond3) {
   $$lcssa = $7;$$lcssa4 = $8;
   break;
  } else {
   $$027 = $5;$$08 = $6;
  }
 }
 $12 = $$lcssa&255;
 $13 = $$lcssa4&255;
 $14 = (($12) - ($13))|0;
 STACKTOP = sp;return ($14|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
    }
  

    function jsCall_iiii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(0,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(1,a1|0,a2|0,a3|0)|0;
    }

  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&255](a1|0);
    }
  

    function jsCall_vi_0(a1) {
      a1=a1|0;
      jsCall(0,a1|0);
    }

  

    function jsCall_vi_1(a1) {
      a1=a1|0;
      jsCall(1,a1|0);
    }

  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
    }
  

    function jsCall_vii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_vii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(1,a1|0,a2|0);
    }

  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }

  

    function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }

  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&255](a1|0)|0;
    }
  

    function jsCall_ii_0(a1) {
      a1=a1|0;
      return jsCall(0,a1|0)|0;
    }

  

    function jsCall_ii_1(a1) {
      a1=a1|0;
      return jsCall(1,a1|0)|0;
    }

  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
    }
  

    function jsCall_viii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(0,a1|0,a2|0,a3|0);
    }

  

    function jsCall_viii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      jsCall(1,a1|0,a2|0,a3|0);
    }

  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&7]();
    }
  

    function jsCall_v_0() {
      
      jsCall(0);
    }

  

    function jsCall_v_1() {
      
      jsCall(1);
    }

  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function jsCall_iiiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }

  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
    }
  

    function jsCall_iii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(0,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(1,a1|0,a2|0)|0;
    }

  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function jsCall_iiiiii_0(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function jsCall_iiiiii_1(a1,a2,a3,a4,a5) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }

  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
    }
  

    function jsCall_viiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(0,a1|0,a2|0,a3|0,a4|0);
    }

  

    function jsCall_viiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      jsCall(1,a1|0,a2|0,a3|0,a4|0);
    }

  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function _fcntl__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fcntl(p0|0,p1|0,p2|0)|0; }
  function _read__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _read(p0|0,p1|0,p2|0)|0; }
  function _write__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _write(p0|0,p1|0,p2|0)|0; }
  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
  function b3(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(3);return 0; }
  function _mmap__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _mmap(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _close__wrapper(p0) { p0 = p0|0; return _close(p0|0)|0; }
  function _unlink__wrapper(p0) { p0 = p0|0; return _unlink(p0|0)|0; }
  function _rmdir__wrapper(p0) { p0 = p0|0; return _rmdir(p0|0)|0; }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5); }
  function b6() { ; nullFunc_v(6); }
  function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0; }
  function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8); }
  function b9(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0; }
  function _access__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _access(p0|0,p1|0)|0; }
  function _getcwd__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _getcwd(p0|0,p1|0)|0; }
  function _stat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _stat(p0|0,p1|0)|0; }
  function _fstat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fstat(p0|0,p1|0)|0; }
  function _ftruncate__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _ftruncate(p0|0,p1|0)|0; }
  function _fchmod__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fchmod(p0|0,p1|0)|0; }
  function _mkdir__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _mkdir(p0|0,p1|0)|0; }
  function _munmap__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _munmap(p0|0,p1|0)|0; }
  function b10(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0; }
  function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,jsCall_iiii_0,b0,jsCall_iiii_1,b0,b0,_unixDelete,b0,b0,_unixRandomness,b0,b0,_unixGetLastError,b0,_unixSetSystemCall,b0,b0,b0,b0,b0,b0,b0,b0,_memjrnlTruncate,b0,b0,b0,b0
  ,_pcache1Create,b0,b0,_pcache1Fetch,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_unixTruncate,b0,b0,b0,b0,b0,_unixFileControl,b0,b0,b0,b0,b0,b0,b0,b0,_posixOpen
  ,b0,b0,b0,b0,b0,b0,_fcntl__wrapper,_read__wrapper,_write__wrapper,b0,b0,b0,b0,b0,_posixFchown,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vi = [b1,b1,jsCall_vi_0,b1,jsCall_vi_1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_pcache1Shutdown
  ,b1,b1,b1,b1,b1,b1,b1,_pcache1Destroy,_pcache1Shrink,b1,_sqlite3MemFree,b1,b1,b1,b1,_sqlite3MemShutdown,b1,b1,b1,_minMaxFinalize,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_sumFinalize,_totalFinalize,_avgFinalize,b1,_countFinalize,b1,_groupConcatFinalize,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_unixShmBarrier,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,_sqlite3SchemaClear,b1,_pageReinit,b1,_sqlite3_free,b1,b1,b1,b1,b1,b1,b1,b1,b1,_stat4Destructor,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,jsCall_vii_1,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_pcache1Cachesize,b2,b2,b2,b2,_pcache1Truncate,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_selectPopWith,b2,b2,_selectAddSubqueryTypeInfo,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_iiiiiii = [b3,b3,jsCall_iiiiiii_0,b3,jsCall_iiiiiii_1,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_mmap__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,jsCall_ii_0,b4,jsCall_ii_1,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_memjrnlClose,b4,b4,b4,b4,b4,_pcache1Init,b4
  ,b4,b4,_pcache1Pagecount,b4,b4,b4,b4,b4,b4,_sqlite3MemMalloc,b4,b4,_sqlite3MemSize,_sqlite3MemRoundup,_sqlite3MemInit,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_dotlockClose,b4,b4,b4,b4,b4,b4,b4,b4,b4,_unixSectorSize,_unixDeviceCharacteristics,b4,b4,b4,b4,b4,b4,b4
  ,_close__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,_unlink__wrapper,b4,b4,_rmdir__wrapper,b4,b4,b4,_nolockClose,b4,b4,b4,_unixClose,b4,b4,b4,b4,_sqlite3MallocSize,_sqlite3_value_text,b4,b4
  ,b4,b4,b4,b4,b4,b4,_btreeInvokeBusyHandler,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viii = [b5,b5,jsCall_viii_0,b5,jsCall_viii_1,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,_pcache1Unpin,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_trimFunc,_minmaxFunc,_minmaxStep,b5,_typeofFunc,_lengthFunc,_instrFunc,_substrFunc,_printfFunc,_unicodeFunc,_charFunc,_absFunc,_roundFunc,_upperFunc
  ,_lowerFunc,_versionFunc,_hexFunc,_randomFunc,_randomBlob,_nullifFunc,_sourceidFunc,_errlogFunc,_compileoptionusedFunc,_compileoptiongetFunc,_quoteFunc,_last_insert_rowid,_changes,_total_changes,_replaceFunc,_zeroblobFunc,_sumStep,b5,b5,b5,_countStep,b5,_groupConcatStep,b5,_likeFunc,_renameTableFunc,_renameTriggerFunc,_renameParentFunc,_juliandayFunc,_dateFunc
  ,_timeFunc,_datetimeFunc,_strftimeFunc,_ctimeFunc,_ctimestampFunc,_cdateFunc,_statInit,_statPush,_statGet,_detachFunc,_attachFunc,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_sqlite3InvalidFunction
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_v = [b6,b6,jsCall_v_0,b6,jsCall_v_1,b6,b6,b6];
  var FUNCTION_TABLE_iiiii = [b7,b7,jsCall_iiiii_0,b7,jsCall_iiiii_1,b7,b7,b7,_unixAccess,_unixFullPathname,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_unixShmLock,b7,b7,b7,_unixUnfetch,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,_sqlite3WalDefaultHook,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_sqlite3InitCallback,_analysisLoader,b7,b7,b7,b7,_vdbeRecordCompareInt,_vdbeRecordCompareString,_sqlite3VdbeRecordCompare,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiiiii = [b8,b8,jsCall_viiiiii_0,b8,jsCall_viiiiii_1,b8,b8,b8];
  var FUNCTION_TABLE_iii = [b9,b9,jsCall_iii_0,b9,jsCall_iii_1,b9,b9,b9,b9,b9,b9,_unixSleep,_unixCurrentTime,b9,_unixCurrentTimeInt64,b9,_unixGetSystemCall,_unixNextSystemCall,_posixIoFinderImpl,_nolockIoFinderImpl,_dotlockIoFinderImpl,b9,b9,b9,b9,_memjrnlSync,_memjrnlFileSize,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_sqlite3MemRealloc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_unixSync,_unixFileSize,_dotlockLock,_dotlockUnlock,_dotlockCheckReservedLock,b9,b9,b9,b9,b9,b9,_unixShmUnmap,b9,b9,b9
  ,b9,_access__wrapper,_getcwd__wrapper,_stat__wrapper,_fstat__wrapper,_ftruncate__wrapper,b9,b9,b9,_fchmod__wrapper,b9,_openDirectory,_mkdir__wrapper,b9,b9,b9,_munmap__wrapper,b9,_nolockLock,_nolockUnlock,_nolockCheckReservedLock,b9,_unixLock,_unixUnlock,_unixCheckReservedLock,b9,b9,b9,_sqliteDefaultBusyCallback,b9
  ,b9,b9,b9,b9,_pagerStress,b9,b9,b9,_exprWalkNoop,_convertCompoundSelectToSubquery,_selectExpander,b9,_resolveExprStep,_resolveSelectStep,b9,_incrAggDepth,_exprSrcCount,b9,b9,b9,_exprNodeIsConstant,_selectNodeIsConstant,_sqlite3BtreeNext,_sqlite3BtreePrevious,b9,b9,b9,_analyzeAggregate,_analyzeAggregatesInSelect,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_iiiiii = [b10,b10,jsCall_iiiiii_0,b10,jsCall_iiiiii_1,b10,_unixOpen,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_memjrnlRead,_memjrnlWrite,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_unixRead,_unixWrite,b10,b10,b10,b10,b10,b10,b10,b10,b10,_unixShmMap,b10,b10,b10,_unixFetch,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,_binCollFunc,_nocaseCollatingFunc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viiii = [b11,b11,jsCall_viiii_0,b11,jsCall_viiii_1,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,_pcache1Rekey,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_softHeapLimitEnforcer,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];

    return { _strlen: _strlen, _sqlite3_reset: _sqlite3_reset, _sqlite3_column_type: _sqlite3_column_type, _sqlite3_close: _sqlite3_close, _sqlite3_exec: _sqlite3_exec, _sqlite3_step: _sqlite3_step, _bitshift64Lshr: _bitshift64Lshr, _sqlite3_prepare_v2: _sqlite3_prepare_v2, _sqlite3_open: _sqlite3_open, _bitshift64Shl: _bitshift64Shl, _memset: _memset, _memcpy: _memcpy, _i64Subtract: _i64Subtract, _sqlite3_column_text: _sqlite3_column_text, _realloc: _realloc, _i64Add: _i64Add, _sqlite3_data_count: _sqlite3_data_count, _sqlite3_column_double: _sqlite3_column_double, _sqlite3_free: _sqlite3_free, _sqlite3_finalize: _sqlite3_finalize, _sqlite3_bind_text: _sqlite3_bind_text, _sqlite3_bind_double: _sqlite3_bind_double, _llvm_bswap_i32: _llvm_bswap_i32, _free: _free, _memmove: _memmove, _malloc: _malloc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_getgid": _getgid, "_sleep": _sleep, "_send": _send, "_getcwd": _getcwd, "_chown": _chown, "_lseek": _lseek, "___setErrNo": ___setErrNo, "_access": _access, "_fstat": _fstat, "_chmod": _chmod, "_rmdir": _rmdir, "_truncate": _truncate, "_usleep": _usleep, "_utimes": _utimes, "___buildEnvironment": ___buildEnvironment, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_sbrk": _sbrk, "_fcntl": _fcntl, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_unlink": _unlink, "_sysconf": _sysconf, "_fchmod": _fchmod, "_close": _close, "_ftruncate": _ftruncate, "_gettimeofday": _gettimeofday, "_munmap": _munmap, "_pread": _pread, "_getenv": _getenv, "_write": _write, "_fsync": _fsync, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_fchown": _fchown, "_read": _read, "_abort": _abort, "_time": _time, "_mkport": _mkport, "_strerror": _strerror, "_mknod": _mknod, "_mkdir": _mkdir, "_mmap": _mmap, "_localtime": _localtime, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _sqlite3_reset = Module["_sqlite3_reset"] = asm["_sqlite3_reset"];
var _sqlite3_column_type = Module["_sqlite3_column_type"] = asm["_sqlite3_column_type"];
var _sqlite3_close = Module["_sqlite3_close"] = asm["_sqlite3_close"];
var _sqlite3_exec = Module["_sqlite3_exec"] = asm["_sqlite3_exec"];
var _sqlite3_step = Module["_sqlite3_step"] = asm["_sqlite3_step"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _sqlite3_prepare_v2 = Module["_sqlite3_prepare_v2"] = asm["_sqlite3_prepare_v2"];
var _sqlite3_open = Module["_sqlite3_open"] = asm["_sqlite3_open"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _sqlite3_column_text = Module["_sqlite3_column_text"] = asm["_sqlite3_column_text"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _sqlite3_data_count = Module["_sqlite3_data_count"] = asm["_sqlite3_data_count"];
var _sqlite3_column_double = Module["_sqlite3_column_double"] = asm["_sqlite3_column_double"];
var _sqlite3_free = Module["_sqlite3_free"] = asm["_sqlite3_free"];
var _sqlite3_finalize = Module["_sqlite3_finalize"] = asm["_sqlite3_finalize"];
var _sqlite3_bind_text = Module["_sqlite3_bind_text"] = asm["_sqlite3_bind_text"];
var _sqlite3_bind_double = Module["_sqlite3_bind_double"] = asm["_sqlite3_bind_double"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



var apiTemp = Runtime.stackAlloc(4);
var dataTemp;

var sqlite3_open = Module['cwrap']('sqlite3_open', 'number', ['string', 'number']);
var sqlite3_close = Module['cwrap']('sqlite3_close', 'number', ['number']);
var sqlite3_exec = Module['cwrap']('sqlite3_exec', 'number', ['number', 'string', 'number', 'number', 'number']);
var sqlite3_free = Module['cwrap']('sqlite3_free', '', ['number']);

var callbackTemp = Runtime.addFunction(function(notUsed, argc, argv, colNames) {
  var curresult = (dataTemp.length==0) ? null : dataTemp[dataTemp.length-1];
  var isNewResult = (curresult === null || argc !== curresult['columns'].length);
  var curvalues = [], curcolumns = [];

  for (var i = 0; i < argc; i++) {
		var column = Pointer_stringify(getValue(colNames + i*Runtime.QUANTUM_SIZE, 'i32'));
		var value = Pointer_stringify(getValue(argv + i*Runtime.QUANTUM_SIZE, 'i32'));
		curvalues.push(value);
		curcolumns.push(column);

  	if (!isNewResult && column !== curresult['columns'][i]) {
			isNewResult = true;
  	}
  }
  if (isNewResult) {
		dataTemp.push({
			'columns' : curcolumns,
			'values' : [curvalues]
		});
  } else {
	  curresult['values'].push(curvalues);
  }
});


Module['open'] = function(data) {
  var filename = 'dbfile_' + (0xffffffff*Math.random()>>>0);
  if (data) {
    FS.createDataFile('/', filename, data, true, true);
  }
  var ret = sqlite3_open(filename, apiTemp);
  if (ret) throw 'SQLite exception: ' + ret;
  return {
    ptr: getValue(apiTemp, 'i32'),
    filename: filename,

    'close': function() {
      var ret = sqlite3_close(this.ptr);
      this.ptr = null;
      if (ret) throw 'SQLite exception: ' + ret;
    },

    'exec': function(sql) {
      if (!this.ptr) throw 'Database closed!';
      setValue(apiTemp, 0, 'i32');
      dataTemp = [];
      var ret = sqlite3_exec(this.ptr, sql, callbackTemp, 0, apiTemp);
      var errPtr = getValue(apiTemp, 'i32');
      if (ret || errPtr) {
        var msg = 'SQLite exception: ' + ret + (errPtr ? ', ' + Pointer_stringify(errPtr) : '');
        if (errPtr) sqlite3_free(errPtr);
        throw msg;
      }
      return dataTemp;
    },

    'exportData': function() {
      if (!this.ptr) throw 'Database closed!';
      return new Uint8Array(FS.root.contents[this.filename].contents);
    }
  };
};

this['SQL'] = Module;

// This completes shell-pre.js, and is appended to the compiled code
return {
  'open' : this['SQL']['open']
}
})();
if (typeof module !== 'undefined') module.exports = SQL;
